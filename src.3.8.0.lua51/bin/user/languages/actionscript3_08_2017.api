CustomActions@@\t\n|adobe.utils|The methods of the CustomActions class allow a SWF file playing in the Flash authoring tool to manage any custom actions that are registered with the authoring tool.
XMLUI@@\t\n|adobe.utils|The XMLUI class enables communication with SWF files that are used as custom user interfaces for the Flash authoring tool's extensibility features.
URLFilePromise@@\t\n|air.desktop|The URLFilePromise class allows resources accessible at a URL to be dragged out of an AIR application as a file promise.
SecureSocketMonitor@@\t\n|air.net|A SecureSocketMonitor object monitors availablity of a TCP endpoint over Secure Sockets Layer (SSL) and Transport Layer Security (TLS) protocols.
ServiceMonitor@@\t\n|air.net|The ServiceMonitor class implements the framework for monitoring the status and availability of network services.
SocketMonitor@@\t\n|air.net|A SocketMonitor object monitors availablity of a TCP endpoint.
URLMonitor@@\t\n|air.net|The URLMonitor class monitors availablity of an HTTP- or HTTPS-based service.
ApplicationUpdater@@\t\n|air.update|The ApplicationUpdater class defines the basic functionality of the update framework for Adobe® AIR® applications, without providing any default user interface.
ApplicationUpdaterUI@@\t\n|air.update|The ApplicationUpdaterUI class defines the basic functionality of the update framework for Adobe® AIR® applications, and it provides a default user interface.
DownloadErrorEvent@@\t\n|air.update.events|A DownloadErrorEvent object is dispatched by an ApplicationUpdater or ApplicationUpdaterUI object when an error happens while downloading the update file.
StatusFileUpdateErrorEvent@@\t\n|air.update.events|A StatusUpdateFileErrorEvent is dispatched when a call to the checkForUpdate() method of a ApplicationUpdater object encounters an error while downloading or parsing the update descriptor file.
StatusFileUpdateEvent@@\t\n|air.update.events|Dispatched after the updater successfully validates the file in the call to the installFromAIRFile() method.
StatusUpdateErrorEvent@@\t\n|air.update.events|A StatusUpdateErrorEvent is dispatched when a call to the checkForUpdate() method of an ApplicationUpdater object encounters an error while downloading or parsing the update descriptor file.
StatusUpdateEvent@@\t\n|air.update.events|An updater object dispatches a StatusUpdateEvent object after the updater successfully downloads and interprets the update descriptor file.
UpdateEvent@@\t\n|air.update.events|A UpdateEvent is dispatched by a ApplicationUpdater object during the update process.
ViewSource@@\t\n|com.adobe.viewsource|The ViewSource class adds support for the "View Source" context menu item.
AccImpl@@\t\n|fl.accessibility|The AccImpl class, also called the Accessibility Implementation class, is the base class for the implementation of accessibility in components.
ButtonAccImpl@@\t\n|fl.accessibility|The ButtonAccImpl class, also called the Button Accessibility Implementation class, enables communication between a Button component and a screen reader.
CheckBoxAccImpl@@\t\n|fl.accessibility|The CheckBoxAccImpl class, also called the CheckBox Accessibility Implementation class, is used to make a CheckBox component accessible.
ComboBoxAccImpl@@\t\n|fl.accessibility|The ComboBoxAccImpl class, also called the ComboBox Accessibility Implementation class, is used to make a ComboBox component accessible.
DataGridAccImpl@@\t\n|fl.accessibility|The DataGridAccImpl class, also called the DataGrid Accessibility Implementation class, is used to make a DataGrid component accessible.
LabelButtonAccImpl@@\t\n|fl.accessibility|The LabelButtonAccImpl class, also called the LabelButton Accessibility Implementation class, is used to make a LabelButton component accessible.
ListAccImpl@@\t\n|fl.accessibility|The ListAccImpl class, also called the List Accessiblity Implementation class, is used to make a List component accessible.
RadioButtonAccImpl@@\t\n|fl.accessibility|The RadioButtonAccImpl class, also called the RadioButton Accessibility Implementation class, is used to make a RadioButton component accessible.
SelectableListAccImpl@@\t\n|fl.accessibility|The SelectableListAccImpl class, also called the SelectableList Accessibility Implementation class, is used to make a SelectableList component accessible.
TileListAccImpl@@\t\n|fl.accessibility|The TileListAccImpl class, also called the Tile List Accessibility Implementation class, is used to make a TileList component accessible.
UIComponentAccImpl@@\t\n|fl.accessibility|The UIComponentAccImpl class, also called the UIComponent Accessibility Implementation class, is used to make a UIComponent accessible.
BaseScrollPane@@\t\n|fl.containers|The BaseScrollPane class handles basic scroll pane functionality including events, styling, drawing the mask and background, the layout of scroll bars, and the handling of scroll positions.
ScrollPane@@\t\n|fl.containers|The ScrollPane component displays display objects and JPEG, GIF, and PNG files, as well as SWF files, in a scrollable area.
UILoader@@\t\n|fl.containers|The UILoader class makes it possible to set content to load and to then monitor the loading operation at run time.
BaseButton@@\t\n|fl.controls|The BaseButton class is the base class for all button components, defining properties and methods that are common to all buttons.
Button@@\t\n|fl.controls|The Button component represents a commonly used rectangular button.
ButtonLabelPlacement@@\t\n|fl.controls|The ButtonLabelPlacement class defines constants for the values of the labelPlacement property of a Button, CheckBox, or RadioButton component.
CheckBox@@\t\n|fl.controls|The CheckBox component displays a small box that can contain a check mark.
ColorPicker@@\t\n|fl.controls|The ColorPicker component displays a list of one or more swatches from which the user can select a color.
ComboBox@@\t\n|fl.controls|The ComboBox component contains a drop-down list from which the user can select one value.
DataGrid@@\t\n|fl.controls|The DataGrid class is a list-based component that provides a grid of rows and columns.
Label@@\t\n|fl.controls|A Label component displays one or more lines of plain or HTML-formatted text that can be formatted for alignment and size.
LabelButton@@\t\n|fl.controls|The LabelButton class is an abstract class that extends the BaseButton class by adding a label, an icon, and toggle functionality.
List@@\t\n|fl.controls|The List component displays list-based information and is ideally suited for the display of arrays of information.
NumericStepper@@\t\n|fl.controls|The NumericStepper component displays an ordered set of numbers from which the user can make a selection.
ProgressBar@@\t\n|fl.controls|The ProgressBar component displays the progress of content that is being loaded.
ProgressBarDirection@@\t\n|fl.controls|The ProgressBarDirection class defines the values for the direction property of the ProgressBar class.
ProgressBarMode@@\t\n|fl.controls|The ProgressBarMode class defines the values for the mode property of the ProgressBar class.
RadioButton@@\t\n|fl.controls|The RadioButton component lets you force a user to make a single selection from a set of choices.
RadioButtonGroup@@\t\n|fl.controls|The RadioButtonGroup class defines a group of RadioButton components to act as a single component.
ScrollBar@@\t\n|fl.controls|The ScrollBar component provides the end user with a way to control the portion of data that is displayed when there is too much data to fit in the display area.
ScrollBarDirection@@\t\n|fl.controls|Defines the values for the direction property of the ScrollBar component.
ScrollPolicy@@\t\n|fl.controls|Values for the horizontalScrollPolicy and verticalScrollPolicy properties of the BaseScrollPane class.
SelectableList@@\t\n|fl.controls|The SelectableList is the base class for all list-based components--for example, the List, TileList, DataGrid, and ComboBox components.
Slider@@\t\n|fl.controls|The Slider component lets users select a value by moving a slider thumb between the end points of the slider track.
SliderDirection@@\t\n|fl.controls|The orientation of the Slider component.
TextArea@@\t\n|fl.controls|The TextArea component is a multiline text field with a border and optional scroll bars.
TextInput@@\t\n|fl.controls|The TextInput component is a single-line text component that contains a native ActionScript TextField object.
TileList@@\t\n|fl.controls|The TileList class provides a grid of rows and columns that is typically used to format and display images in a "tiled" format.
UIScrollBar@@\t\n|fl.controls|The UIScrollBar class includes all of the scroll bar functionality, but adds a scrollTarget property so it can be attached to a TextField instance or a TLFTextField instance.
DataGridCellEditor@@\t\n|fl.controls.dataGridClasses|The DataGridCellEditor class defines the default item editor for a DataGrid control.
DataGridColumn@@\t\n|fl.controls.dataGridClasses|The DataGridColumn class describes a column in a DataGrid component.
HeaderRenderer@@\t\n|fl.controls.dataGridClasses|The HeaderRenderer class displays the column header for the current DataGrid column.
CellRenderer@@\t\n|fl.controls.listClasses|The CellRenderer class defines methods and properties for list-based components to use to manipulate and display custom cell content in each of their rows.
ICellRenderer@@\t\n|fl.controls.listClasses|The ICellRenderer interface provides the methods and properties that a cell renderer requires.
ImageCell@@\t\n|fl.controls.listClasses|The ImageCell is the default cell renderer for the TileList component.
ListData@@\t\n|fl.controls.listClasses|ListData is a messenger class that holds information relevant to a specific cell in a list-based component.
TileListData@@\t\n|fl.controls.listClasses|TileListData is a messenger class that holds information relevant to a specific cell in the list-based TileListData component.
IndeterminateBar@@\t\n|fl.controls.progressBarClasses|The IndeterminateBar class handles the drawing of the progress bar component when the size of the source that is being loaded is unknown.
InvalidationType@@\t\n|fl.core|The InvalidationType class defines InvalidationType constants that are used by the type property of an event object that is dispatched after a component is invalidated.
UIComponent@@\t\n|fl.core|The UIComponent class is the base class for all visual components, both interactive and noninteractive.
DataProvider@@\t\n|fl.data|The DataProvider class provides methods and properties that allow you to query and modify the data in any list-based component--for example, in a List, DataGrid, TileList, or ComboBox component.
SimpleCollectionItem@@\t\n|fl.data|The SimpleCollectionItem class defines a single item in an inspectable property that represents a data provider.
TileListCollectionItem@@\t\n|fl.data|The TileListCollectionItem class defines a single item in an inspectable property that represents a data provider.
ProLoader@@\t\n|fl.display|The ProLoader class loads SWF files or images.
ProLoaderInfo@@\t\n|fl.display|This class is used by ProLoader in place of LoaderInfo.
ColorPickerEvent@@\t\n|fl.events|The ColorPickerEvent class defines events that are associated with the ColorPicker component.
ComponentEvent@@\t\n|fl.events|The ComponentEvent class defines events that are associated with the UIComponent class.
DataChangeEvent@@\t\n|fl.events|The DataChangeEvent class defines the event that is dispatched when the data that is associated with a component changes.
DataChangeType@@\t\n|fl.events|The DataChangeType class defines constants for the DataChangeEvent.changeType event.
DataGridEvent@@\t\n|fl.events|The DataGridEvent class defines events that are associated with the DataGrid component.
DataGridEventReason@@\t\n|fl.events|The DataGridEventReason class defines constants that are used for the values of the reason property of the DataGridEvent object when the value of the type property is itemEditEnd.
InteractionInputType@@\t\n|fl.events|The InteractionInputType class defines constants for the values of the triggerEvent property of the SliderEvent object.
ListEvent@@\t\n|fl.events|The ListEvent class defines events for list-based components including the List, DataGrid, TileList, and ComboBox components.
RSLErrorEvent@@\t\n|fl.events|The RSLErrorEvent class defines an error event dispatched by RSLPreloader.
RSLEvent@@\t\n|fl.events|The RSLEvent class defines events dispatched by RSLPreloader.
ScrollEvent@@\t\n|fl.events|The ScrollEvent class defines the scroll event that is associated with the ScrollBar component.
SliderEvent@@\t\n|fl.events|The SliderEvent class defines events that are associated with the Slider component.
SliderEventClickTarget@@\t\n|fl.events|The SliderEventClickTarget class defines constants for the values of the clickTarget property of the SliderEvent class.
IKArmature@@\t\n|fl.ik|The IKArmature class describes an inverse kinematics (IK) armature.
IKBone@@\t\n|fl.ik|The IKBone class describes a single segment, which is a foundational component of an inverse kinematics (IK) armature.
IKEvent@@\t\n|fl.ik|The IKEvent class defines events related to objects that contain inverse kinematics (IK) armatures.
IKJoint@@\t\n|fl.ik|The IKJoint class defines a connection between two bones, which are required foundational components of an inverse kinematics (IK) armature.
IKManager@@\t\n|fl.ik|The IKManager class is a container class that represents all the inverse kinematics (IK) trees (armatures) defined in a document, and allows the management of those armatures at run time.
IKMover@@\t\n|fl.ik|The IKMover class initiates and controls the inverse kinematic (IK) movement of armatures.
Locale@@\t\n|fl.lang|The fl.lang.Locale class allows you to control how multilanguage text is displayed in a SWF file.
LivePreviewParent@@\t\n|fl.livepreview|The LivePreviewParent class provides the timeline for a SWC file or for a compiled clip that is being exported when ActionScript 3.0 is selected.
FocusManager@@\t\n|fl.managers|The FocusManager class manages focus for a set of components that are navigated by mouse or keyboard as a tab loop.
IFocusManager@@\t\n|fl.managers|Implement the IFocusManager interface to create a custom focus manager.
IFocusManagerComponent@@\t\n|fl.managers|The IFocusManagerComponent interface provides methods and properties that give components the capability to receive focus.
IFocusManagerGroup@@\t\n|fl.managers|The IFocusManagerGroup interface provides properties that are used to manage a set of components of which only one can be selected at a time.
StyleManager@@\t\n|fl.managers|The StyleManager class provides static methods that can be used to get and set styles for a component instance, an entire component type, or all user interface components in a Flash document.
AdjustColor@@\t\n|fl.motion|The AdjustColor class defines various color properties, such as brightness, contrast, hue, and saturation, to support the ColorMatrixFilter class.
Animator@@\t\n|fl.motion|The Animator class applies an XML description of a motion tween to a display object.
Animator3D@@\t\n|fl.motion|The Animator3D class applies an XML description of a three-dimensional motion tween to a display object.
AnimatorBase@@\t\n|fl.motion|The AnimatorBase class applies an XML description of a motion tween to a display object.
AnimatorFactory@@\t\n|fl.motion|The AnimatorFactory class provides ActionScript-based support to associate one Motion object with multiple display objects.
AnimatorFactory3D@@\t\n|fl.motion|The AnimatorFactory3D class provides ActionScript-based support to associate one Motion object containing three-dimensional properties with multiple display objects.
AnimatorFactoryBase@@\t\n|fl.motion|The AnimatorFactoryBase class provides ActionScript-based support to display and tween multiple targeted objects with one Motion dynamically at runtime.
AnimatorFactoryUniversal@@\t\n|fl.motion|The AnimatorFactoryUniversal class provides ActionScript-based support to associate one Motion object with multiple display objects.
AnimatorUniversal@@\t\n|fl.motion|The AnimatorUniversal class applies an ActionScript description of a two and three-dimensional motion to a display object.
BezierEase@@\t\n|fl.motion|The BezierEase class provides precise easing control for a motion tween between two keyframes.
BezierSegment@@\t\n|fl.motion|A Bezier segment consists of four Point objects that define a single cubic Bezier curve.
Color@@\t\n|fl.motion|The Color class extends the Flash Player ColorTransform class, adding the ability to control brightness and tint.
ColorMatrix@@\t\n|fl.motion|The ColorMatrix class calculates and stores color matrixes based on given values.
CustomEase@@\t\n|fl.motion|The CustomEase class is used to modify specific properties of the easing behavior of a motion tween as the tween progresses over time.
DynamicMatrix@@\t\n|fl.motion|The DynamicMatrix class calculates and stores a matrix based on given values.
FunctionEase@@\t\n|fl.motion|The FunctionEase class allows custom interpolation functions to be used with the fl.motion framework in place of other interpolations like SimpleEase and CustomEase.
ITween@@\t\n|fl.motion|The ITween interface defines the application programming interface (API) that interpolation classes implement in order to work with the fl.motion classes.
Keyframe@@\t\n|fl.motion|The Keyframe class defines the visual state at a specific time in a motion tween.
KeyframeBase@@\t\n|fl.motion|The KeyframeBase class defines the visual state at a specific time in a motion tween.
MatrixTransformer@@\t\n|fl.motion|The MatrixTransformer class contains methods for modifying individual properties of a transformation matrix: horizontal and vertical scale, horizontal and vertical skew, and rotation.
Motion@@\t\n|fl.motion|The Motion class stores a keyframe animation sequence that can be applied to a visual object.
MotionBase@@\t\n|fl.motion|The MotionBase class stores a keyframe animation sequence that can be applied to a visual object.
MotionEvent@@\t\n|fl.motion|The MotionEvent class represents events that are broadcast by the fl.motion.Animator class.
RotateDirection@@\t\n|fl.motion|The RotateDirection class provides constant values for rotation behavior during a tween.
SimpleEase@@\t\n|fl.motion|The SimpleEase class allows you to control an animation with the kind of percentage easing that is used in the Flash timeline.
Source@@\t\n|fl.motion|The Source class stores information about the context in which a Motion instance was generated.
Tweenables@@\t\n|fl.motion|The Tweenables class provides constant values for the names of animation properties used in the MotionBase and KeyframeBase classes.
Back@@\t\n|fl.motion.easing|The Back class defines three easing functions to implement motion with ActionScript animations.
Bounce@@\t\n|fl.motion.easing|The Bounce class defines three easing functions to implement bouncing motion with ActionScript animation, similar to a ball falling and bouncing on a floor with several decaying rebounds.
Circular@@\t\n|fl.motion.easing|The Circular class defines three easing functions to implement motion with ActionScript animation.
Cubic@@\t\n|fl.motion.easing|The Cubic class defines three easing functions to implement motion with ActionScript animation.
Elastic@@\t\n|fl.motion.easing|The Elastic class defines three easing functions to implement motion with ActionScript animation, where the motion is defined by an exponentially decaying sine wave.
Exponential@@\t\n|fl.motion.easing|The Exponential class defines three easing functions to implement motion with ActionScript animation.
Linear@@\t\n|fl.motion.easing|The Linear class defines easing functions to implement non-accelerated motion with ActionScript animations.
Quadratic@@\t\n|fl.motion.easing|The Quadratic class defines three easing functions to implement accelerated motion with ActionScript animations.
Quartic@@\t\n|fl.motion.easing|The Quartic class defines three easing functions to implement motion with ActionScript animation.
Quintic@@\t\n|fl.motion.easing|The Quintic class defines three easing functions to implement motion with ActionScript animation.
Sine@@\t\n|fl.motion.easing|The Sine class defines three easing functions to implement motion with ActionScript animation.
RSLInfo@@\t\n|fl.rsl|The RSLInfo class allows to you specify the use of RSLs (Runtime Shared Library Files).
RSLPreloader@@\t\n|fl.rsl|The RSLPreloader class manages preloading of RSLs (Runtime Shared Libraries) before playing other content.
SWZInfo@@\t\n|fl.rsl|The SWZInfo class indicates how to download a SWZ file, which is a signed Runtime Shared Library (RSL).
TLFTextField@@\t\n|fl.text|Use the TLFTextField class to create text fields that use the advanced text display features of the Text Layout Framework (TLF).
Blinds@@\t\n|fl.transitions|The Blinds class reveals the movie clip object by using appearing or disappearing rectangles.
Fade@@\t\n|fl.transitions|The Fade class fades the movie clip object in or out.
Fly@@\t\n|fl.transitions|The Fly class slides the movie clip object in from a specified direction.
Iris@@\t\n|fl.transitions|The Iris class reveals the movie clip object by using an animated mask of a square shape or a circle shape that zooms in or out.
Photo@@\t\n|fl.transitions|Makes the movie clip object appear or disappear like a photographic flash.
PixelDissolve@@\t\n|fl.transitions|The PixelDissolve class reveals reveals the movie clip object by using randomly appearing or disappearing rectangles in a checkerboard pattern.
Rotate@@\t\n|fl.transitions|The Rotate class rotates the movie clip object.
Squeeze@@\t\n|fl.transitions|The Squeeze class scales the movie clip object horizontally or vertically.
Transition@@\t\n|fl.transitions|The Transition class is the base class for all transition classes.
TransitionManager@@\t\n|fl.transitions|The TransitionManager class defines animation effects.
Tween@@\t\n|fl.transitions|The Tween class lets you use ActionScript to move, resize, and fade movie clips by specifying a property of the target movie clip to animate over a number of frames or seconds.
TweenEvent@@\t\n|fl.transitions|The TweenEvent class represents events that are broadcast by the fl.transitions.Tween class.
Wipe@@\t\n|fl.transitions|The Wipe class reveals or hides the movie clip object by using an animated mask of a shape that moves horizontally.
Zoom@@\t\n|fl.transitions|The Zoom class zooms the movie clip object in or out by scaling it in proportion.
Back@@\t\n|fl.transitions.easing|The Back class defines three easing functions to implement motion with ActionScript animations.
Bounce@@\t\n|fl.transitions.easing|The Bounce class defines three easing functions to implement bouncing motion with ActionScript animation, similar to a ball falling and bouncing on a floor with several decaying rebounds.
Elastic@@\t\n|fl.transitions.easing|The Elastic class defines three easing functions to implement motion with ActionScript animation, where the motion is defined by an exponentially decaying sine wave.
None@@\t\n|fl.transitions.easing|The None class defines easing functions to implement nonaccelerated motion with ActionScript animations.
Regular@@\t\n|fl.transitions.easing|The Regular class defines three easing functions to implement accelerated motion with ActionScript animations.
Strong@@\t\n|fl.transitions.easing|The Strong class defines three easing functions to implement motion with ActionScript animation.
AutoLayoutEvent@@\t\n|fl.video|Flash® Player dispatches an AutoLayoutEvent object when the video player is resized and laid out automatically.
CaptionChangeEvent@@\t\n|fl.video|The CaptionChangeEvent is dispatched any time a caption is added or removed from the caption target text field.
CaptionTargetEvent@@\t\n|fl.video|Type for the captionTargetCreated event, dispatched after the captionTargetCreated event is created automatically and before any captions have been added to it.
CuePointType@@\t\n|fl.video|The CuePointType class provides constant values for the type property on the info object of a MetadataEvent instance of type CUE_POINT.
FLVPlayback@@\t\n|fl.video|FLVPlayback extends the Sprite class and wraps a VideoPlayer object.
FLVPlaybackCaptioning@@\t\n|fl.video|The FLVPlaybackCaptioning component enables captioning for the FLVPlayback component.
INCManager@@\t\n|fl.video|The INCManager is the interface for classes that create the flash.net.NetConnection for the VideoPlayer class.
IVPEvent@@\t\n|fl.video|The IVPEvent interface is implemented by video events that apply to a specific VideoPlayer object within the FLVPlayback component.
LayoutEvent@@\t\n|fl.video|Event dispatched when the video player is resized and/or laid out.
MetadataEvent@@\t\n|fl.video|Flash® Player dispatches a MetadataEvent object when the user requests the FLV file's metadata information packet (NetStream.onMetaData) and when cue points (NetStream.onCuePoint) are encountered in the FLV file.
NCManager@@\t\n|fl.video|Creates the NetConnection object for the VideoPlayer class, a helper class for that user facing class.
NCManagerNative@@\t\n|fl.video|The NCManagerNative class is a subclass of the NCManager class and supports native bandwidth detection, which some Flash Video Streaming Service providers may support.
SkinErrorEvent@@\t\n|fl.video|Flash® Player dispatches a SkinErrorEvent object when there is an error loading a skin.
SoundEvent@@\t\n|fl.video|Flash® Player dispatches a SoundEvent object when the user changes the sound by either moving the handle of the volumeBar control or setting the volume or soundTransform property.
VideoAlign@@\t\n|fl.video|The VideoAlign class provides constant values to use for the FLVPlayback.align and VideoPlayer.align properties.
VideoError@@\t\n|fl.video|The VideoError exception is the primary mechanism for reporting runtime errors from the FLVPlayback and VideoPlayer classes.
VideoEvent@@\t\n|fl.video|Flash® Player dispatches a VideoEvent object when the user plays a video.
VideoPlayer@@\t\n|fl.video|The VideoPlayer class lets you create a video player with a slightly smaller SWF file than if you used the FLVPlayback component.
VideoProgressEvent@@\t\n|fl.video|Flash® Player dispatches a VideoProgressEvent object when the user makes a request for the number of bytes loaded during a progressive HTTP download of their video.
VideoScaleMode@@\t\n|fl.video|The VideoScaleMode class provides constant values to use for the FLVPlayback.scaleMode and VideoPlayer.scaleMode properties.
VideoState@@\t\n|fl.video|The VideoState class provides constant values for the read-only FLVPlayback.state and VideoPlayer.state properties.
Accessibility@@\t\n|flash.accessibility|The Accessibility class manages communication with screen readers.
AccessibilityImplementation@@\t\n|flash.accessibility|The AccessibilityImplementation class is the base class in Flash Player that allows for the implementation of accessibility in components.
AccessibilityProperties@@\t\n|flash.accessibility|The AccessibilityProperties class lets you control the presentation of Flash objects to accessibility aids, such as screen readers.
ISearchableText@@\t\n|flash.accessibility|The ISearchableText interface can be implemented by objects that contain text which should be searchable on the web.
ISimpleTextSelection@@\t\n|flash.accessibility|The ISimpleTextSelection class can be used to add support for the MSAA ISimpleTextSelection interface to an AccessibilityImplementation.
Condition@@\t\n|flash.concurrent|A Condition object is a tool for sharing a resource between workers with the additional capability of pausing execution until a particular condition is satisfied.
Mutex@@\t\n|flash.concurrent|The Mutex (short for "mutual exclusion") class provides a way to make sure that only one set of code operates on a particular block of memory or other shared resource at a time.
EncryptedLocalStore@@\t\n|flash.data|The EncryptedLocalStore class (ELS) provides an encrypted local storage mechanism that can be used as a small cache for an application's private data.
SQLCollationType@@\t\n|flash.data|This class contains the constants that represent the possible values for the defaultCollationType parameter of the SQLColumnSchema constructor, as well as the SQLColumnSchema.defaultCollationType property.
SQLColumnNameStyle@@\t\n|flash.data|This class contains the constants that represent the possible values for the SQLConnection.columnNameStyle property.
SQLColumnSchema@@\t\n|flash.data|The SQLColumnSchema class provides information describing the characteristics of a specific column within a table in a database.
SQLConnection@@\t\n|flash.data|A SQLConnection instance is used to manage the creation of and connection to local SQL database files (local databases).
SQLIndexSchema@@\t\n|flash.data|A SQLIndexSchema instance provides information describing a specific index in a database.
SQLMode@@\t\n|flash.data|This class contains the constants that represent the possible values for the openMode parameter of the SQLConnection.open() and SQLConnection.openAsync() methods.
SQLResult@@\t\n|flash.data|The SQLResult class provides access to data returned in response to the execution of a SQL statement (a SQLStatement instance).
SQLSchema@@\t\n|flash.data|The SQLSchema class is the base class for schema information for database objects such as tables, views, and indices.
SQLSchemaResult@@\t\n|flash.data|A SQLSchemaResult instance contains the information resulting from a call to the SQLConnection.loadSchema() method.
SQLStatement@@\t\n|flash.data|A SQLStatement instance is used to execute a SQL statement against a local SQL database that is open through a SQLConnection instance.
SQLTableSchema@@\t\n|flash.data|A SQLTableSchema instance provides information describing a specific table in a database.
SQLTransactionLockType@@\t\n|flash.data|This class contains the constants that represent the possible values for the option parameter of the SQLConnection.begin() method.
SQLTriggerSchema@@\t\n|flash.data|A SQLTriggerSchema instance provides information describing a specific trigger in a database.
SQLViewSchema@@\t\n|flash.data|A SQLViewSchema instance provides information describing a specific view in a database.
Clipboard@@\t\n|flash.desktop|The Clipboard class provides a container for transferring data and objects through the clipboard.
ClipboardFormats@@\t\n|flash.desktop|The ClipboardFormats class defines constants for the names of the standard data formats used with the Clipboard class.
ClipboardTransferMode@@\t\n|flash.desktop|The ClipboardTransferMode class defines constants for the modes used as values of the transferMode parameter of the Clipboard.getData() method.
DockIcon@@\t\n|flash.desktop|The DockIcon class represents the Mac OS X®-style dock icon.
Icon@@\t\n|flash.desktop|The Icon class represents an operating system icon.
IFilePromise@@\t\n|flash.desktop|The IFilePromise interface defines the interface used by the AIR runtime to read data for a file promise.
InteractiveIcon@@\t\n|flash.desktop|The InteractiveIcon class is the base class for the operating system icons associated with applications.
InvokeEventReason@@\t\n|flash.desktop|The InvokeEventReason class enumerates values returned by the reason property of an InvokeEvent object.
NativeApplication@@\t\n|flash.desktop|The NativeApplication class represents this AIR application.
NativeDragActions@@\t\n|flash.desktop|The NativeDragActions class defines string constants for the names of the drag-and-drop actions.
NativeDragManager@@\t\n|flash.desktop|The NativeDragManager class coordinates drag-and-drop operations.
NativeDragOptions@@\t\n|flash.desktop|The NativeDragOptions class defines constants for the names of drag-and-drop actions allowed in a drag-and-drop operation.
NativeProcess@@\t\n|flash.desktop|The NativeProcess class provides command line integration and general launching capabilities.
NativeProcessStartupInfo@@\t\n|flash.desktop|This class provides the basic information used to start a process on the host operating system.
NotificationType@@\t\n|flash.desktop|The NotificationType class defines constants for use in the priority parameter of the DockIcon bounce() method and the type parameter of the NativeWindow notifyUser() method.
SystemIdleMode@@\t\n|flash.desktop|The SystemIdleMode class provides constant values for system idle behaviors.
SystemTrayIcon@@\t\n|flash.desktop|The SystemTrayIcon class represents the Windows® taskbar notification area (system tray)-style icon.
Updater@@\t\n|flash.desktop|The Updater class is used to update the currently running application with a different version.
ActionScriptVersion@@\t\n|flash.display|The ActionScriptVersion class is an enumeration of constant values that indicate the language version of a loaded SWF file.
AVLoader@@\t\n|flash.display| 
AVM1Movie@@\t\n|flash.display|AVM1Movie is a simple class that represents AVM1 movie clips, which use ActionScript 1.0 or 2.0.
Bitmap@@\t\n|flash.display|The Bitmap class represents display objects that represent bitmap images.
BitmapData@@\t\n|flash.display|The BitmapData class lets you work with the data (pixels) of a Bitmap object bitmap image.
BitmapDataChannel@@\t\n|flash.display|The BitmapDataChannel class is an enumeration of constant values that indicate which channel to use: red, blue, green, or alpha transparency.
BitmapEncodingColorSpace@@\t\n|flash.display|The BitmapEncodingColorSpace class defines the constants that specify how color channels are sampled by the flash.display.BitmapData.encode() method when specifying the compressor as flash.display.JPEGXREncoderOptions.
BlendMode@@\t\n|flash.display|A class that provides constant values for visual blend mode effects.
CapsStyle@@\t\n|flash.display|The CapsStyle class is an enumeration of constant values that specify the caps style to use in drawing lines.
ColorCorrection@@\t\n|flash.display|The ColorCorrection class provides values for the flash.display.Stage.colorCorrection property.
ColorCorrectionSupport@@\t\n|flash.display|The ColorCorrectionSupport class provides values for the flash.display.Stage.colorCorrectionSupport property.
DisplayObject@@\t\n|flash.display|The DisplayObject class is the base class for all objects that can be placed on the display list.
DisplayObjectContainer@@\t\n|flash.display|The DisplayObjectContainer class is the base class for all objects that can serve as display object containers on the display list.
FocusDirection@@\t\n|flash.display|The FocusDirection class enumerates values to be used for the direction parameter of the assignFocus() method of a Stage object and for the direction property of a FocusEvent object.
FrameLabel@@\t\n|flash.display|The FrameLabel object contains properties that specify a frame number and the corresponding label name.
GradientType@@\t\n|flash.display|The GradientType class provides values for the type parameter in the beginGradientFill() and lineGradientStyle() methods of the flash.display.Graphics class.
Graphics@@\t\n|flash.display|The Graphics class contains a set of methods that you can use to create a vector shape.
GraphicsBitmapFill@@\t\n|flash.display|Defines a bitmap fill.
GraphicsEndFill@@\t\n|flash.display|Indicates the end of a graphics fill.
GraphicsGradientFill@@\t\n|flash.display|Defines a gradient fill.
GraphicsPath@@\t\n|flash.display|A collection of drawing commands and the coordinate parameters for those commands.
GraphicsPathCommand@@\t\n|flash.display|Defines the values to use for specifying path-drawing commands.
GraphicsPathWinding@@\t\n|flash.display|The GraphicsPathWinding class provides values for the flash.display.GraphicsPath.winding property and the flash.display.Graphics.drawPath() method to determine the direction to draw a path.
GraphicsShaderFill@@\t\n|flash.display|Defines a shader fill.
GraphicsSolidFill@@\t\n|flash.display|Defines a solid fill.
GraphicsStroke@@\t\n|flash.display|Defines a line style or stroke.
GraphicsTrianglePath@@\t\n|flash.display|Defines an ordered set of triangles that can be rendered using either (u,v) fill coordinates or a normal fill.
IBitmapDrawable@@\t\n|flash.display|The IBitmapDrawable interface is implemented by objects that can be passed as the source parameter of the draw() method of the BitmapData class.
IGraphicsData@@\t\n|flash.display|This interface is used to define objects that can be used as parameters in the flash.display.Graphics methods, including fills, strokes, and paths.
IGraphicsFill@@\t\n|flash.display|This interface is used to define objects that can be used as fill parameters in the flash.display.Graphics methods and drawing classes.
IGraphicsPath@@\t\n|flash.display|This interface is used to define objects that can be used as path parameters in the flash.display.Graphics methods and drawing classes.
IGraphicsStroke@@\t\n|flash.display|This interface is used to define objects that can be used as stroke parameters in the flash.display.Graphics methods and drawing classes.
InteractiveObject@@\t\n|flash.display|The InteractiveObject class is the abstract base class for all display objects with which the user can interact, using the mouse, keyboard, or other user input device.
InterpolationMethod@@\t\n|flash.display|The InterpolationMethod class provides values for the interpolationMethod parameter in the Graphics.beginGradientFill() and Graphics.lineGradientStyle() methods.
JointStyle@@\t\n|flash.display|The JointStyle class is an enumeration of constant values that specify the joint style to use in drawing lines.
JPEGEncoderOptions@@\t\n|flash.display|The JPEGEncoderOptions class defines a compression algorithm for the flash.display.BitmapData.encode() method.
JPEGXREncoderOptions@@\t\n|flash.display|The JPEGXREncoderOptions class defines a compression algorithm for the flash.display.BitmapData.encode() method.
LineScaleMode@@\t\n|flash.display|The LineScaleMode class provides values for the scaleMode parameter in the Graphics.lineStyle() method.
Loader@@\t\n|flash.display|The Loader class is used to load SWF files or image (JPG, PNG, or GIF) files.
LoaderInfo@@\t\n|flash.display|The LoaderInfo class provides information about a loaded SWF file or a loaded image file (JPEG, GIF, or PNG).
MorphShape@@\t\n|flash.display|The MorphShape class represents MorphShape objects on the display list.
MovieClip@@\t\n|flash.display|The MovieClip class inherits from the following classes: Sprite, DisplayObjectContainer, InteractiveObject, DisplayObject, and EventDispatcher.
NativeMenu@@\t\n|flash.display|The NativeMenu class contains methods and properties for defining native menus.
NativeMenuItem@@\t\n|flash.display|The NativeMenuItem class represents a single item in a menu.
NativeWindow@@\t\n|flash.display|The NativeWindow class provides an interface for creating and controlling native desktop windows.
NativeWindowDisplayState@@\t\n|flash.display|The NativeWindowDisplayState class defines constants for the names of the window display states.
NativeWindowInitOptions@@\t\n|flash.display|The NativeWindowInitOptions class defines the initialization options used to construct a new NativeWindow instance.
NativeWindowRenderMode@@\t\n|flash.display|The NativeWindowRenderMode class defines constants for the renderMode property of the NativeWindowInitOptions object used to create a native window.
NativeWindowResize@@\t\n|flash.display|The NativeWindowResize class defines constants for the possible values of the edgeOrCorner parameter of the NativeWindow startResize() method.
NativeWindowSystemChrome@@\t\n|flash.display|The NativeWindowSystemChrome class defines constants for the systemChrome property of the NativeWindowInitOptions object used to create a native window.
NativeWindowType@@\t\n|flash.display|The NativeWindowType class defines constants for the type property of the NativeWindowInitOptions object used to create a native window.
PixelSnapping@@\t\n|flash.display|The PixelSnapping class is an enumeration of constant values for setting the pixel snapping options by using the pixelSnapping property of a Bitmap object.
PNGEncoderOptions@@\t\n|flash.display|The PNGEncoderOptions class defines a compression algorithm for the flash.display.BitmapData.encode() method.
Scene@@\t\n|flash.display|The Scene class includes properties for identifying the name, labels, and number of frames in a scene.
Screen@@\t\n|flash.display|The Screen class provides information about the display screens available to this application.
Shader@@\t\n|flash.display|A Shader instance represents a Pixel Bender shader kernel in ActionScript.
ShaderData@@\t\n|flash.display|A ShaderData object contains properties representing any parameters and inputs for a shader kernel, as well as properties containing any metadata specified for the shader.
ShaderInput@@\t\n|flash.display|A ShaderInput instance represents a single input image for a shader kernel.
ShaderJob@@\t\n|flash.display|A ShaderJob instance is used to execute a shader operation in stand-alone mode.
ShaderParameter@@\t\n|flash.display|A ShaderParameter instance represents a single input parameter of a shader kernel.
ShaderParameterType@@\t\n|flash.display|This class defines the constants that represent the possible values for the ShaderParameter class's type property.
ShaderPrecision@@\t\n|flash.display|This class defines the constants that represent the possible values for the Shader class's precisionHint property.
Shape@@\t\n|flash.display|This class is used to create lightweight shapes using the ActionScript drawing application program interface (API).
SimpleButton@@\t\n|flash.display|The SimpleButton class lets you control all instances of button symbols in a SWF file.
SpreadMethod@@\t\n|flash.display|The SpreadMethod class provides values for the spreadMethod parameter in the beginGradientFill() and lineGradientStyle() methods of the Graphics class.
Sprite@@\t\n|flash.display|The Sprite class is a basic display list building block: a display list node that can display graphics and can also contain children.
Stage@@\t\n|flash.display|The Stage class represents the main drawing area.
Stage3D@@\t\n|flash.display|The Stage3D class provides a display area and a programmable rendering context for drawing 2D and 3D graphics.
StageAlign@@\t\n|flash.display|The StageAlign class provides constant values to use for the Stage.align property.
StageAspectRatio@@\t\n|flash.display|The StageAspectRatio class provides values for the Stage.setAspectRatio() method.
StageDisplayState@@\t\n|flash.display|The StageDisplayState class provides values for the Stage.displayState property.
StageOrientation@@\t\n|flash.display|The StageOrientation class defines constants enumerating the possible orientations of the stage and the device.
StageQuality@@\t\n|flash.display|The StageQuality class provides values for the Stage.quality property and for the value of the quality parameter to the BitmapData.drawWithQuality() method.
StageScaleMode@@\t\n|flash.display|The StageScaleMode class provides values for the Stage.scaleMode property.
SWFVersion@@\t\n|flash.display|The SWFVersion class is an enumeration of constant values that indicate the file format version of a loaded SWF file.
TriangleCulling@@\t\n|flash.display|Defines codes for culling algorithms that determine which triangles not to render when drawing triangle paths.
Context3D@@\t\n|flash.display3D|The Context3D class provides a context for rendering geometrically defined graphics.
Context3DBlendFactor@@\t\n|flash.display3D|Defines the values to use for specifying the source and destination blend factors.
Context3DBufferUsage@@\t\n|flash.display3D|Defines the values to use for specifying the buffer usage type.
Context3DClearMask@@\t\n|flash.display3D|Defines the values to use for specifying Context3D clear masks.
Context3DCompareMode@@\t\n|flash.display3D|Defines the values to use for specifying 3D buffer comparisons in the setDepthTest() and setStencilAction() methods of a Context3D instance.
Context3DFillMode@@\t\n|flash.display3D|Defines the values to use for specifying 3D render fill mode in the setFillMode() methods of a Context3D instance.
Context3DMipFilter@@\t\n|flash.display3D|Defines the values to use for sampler mipmap filter mode 
Context3DProfile@@\t\n|flash.display3D|Defines the values to use for specifying the Context3D profile.
Context3DProgramType@@\t\n|flash.display3D|Defines the values to use for specifying whether a shader program is a fragment or a vertex program.
Context3DRenderMode@@\t\n|flash.display3D|Defines the values to use for specifying the Context3D render mode.
Context3DStencilAction@@\t\n|flash.display3D|Defines the values to use for specifying stencil actions.
Context3DTextureFilter@@\t\n|flash.display3D|Defines the values to use for sampler filter mode.
Context3DTextureFormat@@\t\n|flash.display3D|Defines the values to use for specifying a texture format.
Context3DTriangleFace@@\t\n|flash.display3D|Constants to specify the orientation of a triangle relative to the view point.
Context3DVertexBufferFormat@@\t\n|flash.display3D|Defines the values to use for specifying vertex buffers.
Context3DWrapMode@@\t\n|flash.display3D|Defines the values to use for sampler wrap mode 
IndexBuffer3D@@\t\n|flash.display3D|IndexBuffer3D is used to represent lists of vertex indices comprising graphic elements retained by the graphics subsystem.
Program3D@@\t\n|flash.display3D|The Program3D class represents a pair of rendering programs (also called "shaders") uploaded to the rendering context.
VertexBuffer3D@@\t\n|flash.display3D|The VertexBuffer3D class represents a set of vertex data uploaded to a rendering context.
CubeTexture@@\t\n|flash.display3D.textures|The CubeTexture class represents a cube texture uploaded to a rendering context.
RectangleTexture@@\t\n|flash.display3D.textures|The Rectangle Texture class represents a 2-dimensional texture uploaded to a rendering context.
Texture@@\t\n|flash.display3D.textures|The Texture class represents a 2-dimensional texture uploaded to a rendering context.
TextureBase@@\t\n|flash.display3D.textures|The TextureBase class is the base class for Context3D texture objects.
VideoTexture@@\t\n|flash.display3D.textures| 
DRMManagerError@@\t\n|flash.errors|The DRMManager dispatches a DRMManagerError event to report errors.
EOFError@@\t\n|flash.errors|An EOFError exception is thrown when you attempt to read past the end of the available data.
IllegalOperationError@@\t\n|flash.errors|The IllegalOperationError exception is thrown when a method is not implemented or the implementation doesn't cover the current usage.
InvalidSWFError@@\t\n|flash.errors|The Flash runtimes throw this exception when they encounter a corrupted SWF file.
IOError@@\t\n|flash.errors|The IOError exception is thrown when some type of input or output failure occurs.
MemoryError@@\t\n|flash.errors|The MemoryError exception is thrown when a memory allocation request fails.
PermissionError@@\t\n|flash.errors|Permission error is dispatched when the application tries to access a resource without requesting appropriate permissions.
ScriptTimeoutError@@\t\n|flash.errors|The ScriptTimeoutError exception is thrown when the script timeout interval is reached.
SQLError@@\t\n|flash.errors|A SQLError instance provides detailed information about a failed operation.
SQLErrorOperation@@\t\n|flash.errors|This class contains the constants that represent the possible values for the SQLError.operation property.
StackOverflowError@@\t\n|flash.errors|ActionScript throws a StackOverflowError exception when the stack available to the script is exhausted.
AccelerometerEvent@@\t\n|flash.events|The Accelerometer class dispatches AccelerometerEvent objects when acceleration updates are obtained from the Accelerometer sensor installed on the device.
ActivityEvent@@\t\n|flash.events|A Camera or Microphone object dispatches an ActivityEvent object whenever a camera or microphone reports that it has become active or inactive.
AsyncErrorEvent@@\t\n|flash.events|An object dispatches an AsyncErrorEvent when an exception is thrown from native asynchronous code, which could be from, for example, LocalConnection, NetConnection, SharedObject, or NetStream.
AVDictionaryDataEvent@@\t\n|flash.events|AVStream dispatch AVDictionaryDataEvent to signal ID3 tag information 
AVHTTPStatusEvent@@\t\n|flash.events|The application dispatches AVHTTPStatusEvent objects when a network request returns an HTTP status code.
AVPauseAtPeriodEndEvent@@\t\n|flash.events|AVStream dispatches AVPauseAtPeriodEndEvent when the period end is reached for the period to which this event is requested.
BrowserInvokeEvent@@\t\n|flash.events|The NativeApplication object of an AIR application dispatches a browserInvoke event when the application is invoked as the result of a SWF file in the browser using the browser invocation feature.
ContextMenuEvent@@\t\n|flash.events|An InteractiveObject dispatches a ContextMenuEvent object when the user opens or interacts with the context menu.
DataEvent@@\t\n|flash.events|An object dispatches a DataEvent object when raw data has completed loading.
DatagramSocketDataEvent@@\t\n|flash.events|A DatagramSocketDataEvent object is dispatched when Datagram socket has received data.
DNSResolverEvent@@\t\n|flash.events|The DNSResolverEvent class represents the results of a Domain Name System (DNS) lookup operation.
DRMAuthenticateEvent@@\t\n|flash.events|A NetStream object dispatchs a DRMAuthenticateEvent object when attempting to play digital rights management (DRM) encrypted content that requires a user credential for authentication.
DRMAuthenticationCompleteEvent@@\t\n|flash.events|The DRMManager dispatches a DRMAuthenticationCompleteEvent object when a call to the authenticate() method of the DRMManager object succeeds.
DRMAuthenticationErrorEvent@@\t\n|flash.events|The DRMManager dispatches a DRMAuthenticationErrorEvent object when a call to the authenticate() method of the DRMManager object fails.
DRMDeviceGroupErrorEvent@@\t\n|flash.events|Issued by the DRMManager when any error occurs during any device group related calls. It is the application's responsibility to explicitly handle the error events.These events include cases where the user inputs valid credentials, but the voucher protecting the encrypted content restricts the access to the content.
DRMDeviceGroupEvent@@\t\n|flash.events|Issued by the DRMManager when a device group related call successfully completes.
DRMErrorEvent@@\t\n|flash.events|The DRMErrorEvent class provides information about errors that occur when playing digital rights management (DRM) encrypted files.
DRMLicenseRequestEvent@@\t\n|flash.events|The DRMManager dispatches a DRMLicenseRequestEvent object before each call to the loadVoucher() or loadPreviewVoucher() methods of the DRMManager object succeeds.
DRMMetadataEvent@@\t\n|flash.events|AVSegmentedSource dispatches DRMMetadataEvent when it loads and parses files.
DRMReturnVoucherCompleteEvent@@\t\n|flash.events|The DRMManager dispatches a DRMVoucherReturnCompleteEvent object when a call to the returnVoucher() method of the DRMManager object succeeds.
DRMReturnVoucherErrorEvent@@\t\n|flash.events|The DRMManager dispatches a DRMReturnVoucherErrorEvent object when a call to the returnVoucher() method of the DRMManager object fails.
DRMStatusEvent@@\t\n|flash.events|A NetStream object dispatches a DRMStatusEvent object when the content protected using digital rights management (DRM) begins playing successfully (when the voucher is verified, and when the user is authenticated and authorized to view the content).
ErrorEvent@@\t\n|flash.events|An object dispatches an ErrorEvent object when an error causes an asynchronous operation to fail.
Event@@\t\n|flash.events|The Event class is used as the base class for the creation of Event objects, which are passed as parameters to event listeners when an event occurs.
EventDispatcher@@\t\n|flash.events|The EventDispatcher class is the base class for all runtime classes that dispatch events.
EventPhase@@\t\n|flash.events|The EventPhase class provides values for the eventPhase property of the Event class.
FileListEvent@@\t\n|flash.events|A File object dispatches a FileListEvent object when a call to the getDirectoryListingAsync() method of a File object successfully enumerates a set of files and directories or when a user selects files after a call to the browseForOpenMultiple() method.
FocusEvent@@\t\n|flash.events|An object dispatches a FocusEvent object when the user changes the focus from one object in the display list to another.
FullScreenEvent@@\t\n|flash.events|The Stage object dispatches a FullScreenEvent object whenever the Stage enters or leaves full-screen display mode.
GameInputEvent@@\t\n|flash.events|The GameInputEvent class represents an event that is dispatched when a game input device has either been added or removed from the application platform.
GeolocationEvent@@\t\n|flash.events|A Geolocation object dispatches GeolocationEvent objects when it receives updates from the location sensor installed on the device.
GestureEvent@@\t\n|flash.events|The GestureEvent class lets you handle multi-touch events on devices that detect complex user contact with the device (such as pressing two fingers on a touch screen at the same time).
GesturePhase@@\t\n|flash.events|The GesturePhase class is an enumeration class of constant values for use with the GestureEvent, PressAndTapGestureEvent, and TransformGestureEvent classes.
HTMLUncaughtScriptExceptionEvent@@\t\n|flash.events|An HTMLLoader object dispatches an HTMLUncaughtScriptExceptionEvent object whenever a JavaScript exception is thrown and not handled with a catch statement.
HTTPStatusEvent@@\t\n|flash.events|The application dispatches HTTPStatusEvent objects when a network request returns an HTTP status code.
IEventDispatcher@@\t\n|flash.events|The IEventDispatcher interface defines methods for adding or removing event listeners, checks whether specific types of event listeners are registered, and dispatches events.
IMEEvent@@\t\n|flash.events|An IMEEvent object is dispatched when the user enters text using an input method editor (IME).
InvokeEvent@@\t\n|flash.events|The NativeApplication object of an AIR application dispatches an invoke event when the application is invoked.
IOErrorEvent@@\t\n|flash.events|An IOErrorEvent object is dispatched when an error causes input or output operations to fail.
KeyboardEvent@@\t\n|flash.events|A KeyboardEvent object id dispatched in response to user input through a keyboard.
LocationChangeEvent@@\t\n|flash.events|An HTMLLoader or StageWebView object dispatches a LocationChangeEvent object when a new page loads.
MediaEvent@@\t\n|flash.events|CameraRoll and CameraUI classes dispatch MediaEvent objects when a media stream is available.
MouseEvent@@\t\n|flash.events|A MouseEvent object is dispatched into the event flow whenever mouse events occur.
NativeDragEvent@@\t\n|flash.events|Native drag events are dispatched by the interactive objects involved in a drag-and-drop operation.
NativeProcessExitEvent@@\t\n|flash.events|This event is dispatched by the NativeProcess object when the process exits.
NativeWindowBoundsEvent@@\t\n|flash.events|A NativeWindow object dispatches a NativeWindowBoundsEvent object when the size or location of the window changes.
NativeWindowDisplayStateEvent@@\t\n|flash.events|A NativeWindow object dispatches events of the NativeWindowDisplayStateEvent class when the window display state changes.
NetDataEvent@@\t\n|flash.events|A NetStream object dispatches a NetDataEvent object when a data message is encountered in the media stream.
NetMonitorEvent@@\t\n|flash.events|A NetMonitor object dispatches NetMonitorEvent objects when a NetStream object is created.
NetStatusEvent@@\t\n|flash.events|A NetConnection, NetStream, or SharedObject object dispatches NetStatusEvent objects when a it reports its status.
OutputProgressEvent@@\t\n|flash.events|A FileStream object dispatches OutputProgressEvent objects as pending asynchronous file write operations are performed.
PermissionEvent@@\t\n|flash.events| 
PressAndTapGestureEvent@@\t\n|flash.events|The PressAndTapGestureEvent class lets you handle press-and-tap gesture on touch-enabled devices.
ProgressEvent@@\t\n|flash.events|A ProgressEvent object is dispatched when a load operation has begun or a socket has received data.
RemoteNotificationEvent@@\t\n|flash.events|Contains events that are dispatched by flash.notifications.RemoteNotifier in response to push notification events from APNs.
SampleDataEvent@@\t\n|flash.events|Dispatched when a Sound object requests new audio data or when a Microphone object has new audio data to provide.
ScreenMouseEvent@@\t\n|flash.events|The SystemTrayIcon object dispatches events of type ScreenMouseEvent in response to mouse interaction.
SecurityErrorEvent@@\t\n|flash.events|An object dispatches a SecurityErrorEvent object to report the occurrence of a security error.
ServerSocketConnectEvent@@\t\n|flash.events|A ServerSocket object dispatches a ServerSocketConnectEvent object when a client attempts to connect to the server socket.
ShaderEvent@@\t\n|flash.events|A ShaderEvent is dispatched when a shader operation launched from a ShaderJob finishes.
SoftKeyboardEvent@@\t\n|flash.events|A SoftKeyboardEvent object is dispatched when a software-driven keyboard is activated or de-activated on a device or operating system.
SoftKeyboardTrigger@@\t\n|flash.events|The SoftKeyboardTrigger class provides enumerator values for the triggerType property of the SoftKeyboardEvent class.
SQLErrorEvent@@\t\n|flash.events|A SQLErrorEvent instance is dispatched by a SQLConnection instance or SQLStatement instance when an error occurs while performing a database operation in asynchronous execution mode.
SQLEvent@@\t\n|flash.events|Adobe AIR dispatches SQLEvent objects when one of the operations performed by a SQLConnection or SQLStatement instance completes successfully.
SQLUpdateEvent@@\t\n|flash.events|A SQLUpdateEvent object is dispatched by a SQLConnection object when a data change occurs on any table associated with the SQLConnection instance.
StageOrientationEvent@@\t\n|flash.events|A Stage object dispatches a StageOrientationEvent object when the orientation of the stage changes.
StageVideoAvailabilityEvent@@\t\n|flash.events|This event fires when the state of the Stage.stageVideos property changes.
StageVideoEvent@@\t\n|flash.events|A StageVideo object dispatches a StageVideoEvent object after the attachNetStream() method of the StageVideo object and the play() method of the attached NetStream object have both been called.
StatusEvent@@\t\n|flash.events|An object dispatches a StatusEvent object when a device, such as a camera or microphone, or an object such as a LocalConnection object reports its status.
StorageVolumeChangeEvent@@\t\n|flash.events|The StorageVolumeInfo.storageVolumeInfo object dispatches a StorageVolumeChangeEvent event object when a storage volume is mounted or unmounted.
SyncEvent@@\t\n|flash.events|An SharedObject object representing a remote shared object dispatches a SyncEvent object when the remote shared object has been updated by the server.
TextEvent@@\t\n|flash.events|An object dispatches a TextEvent object when a user enters text in a text field or clicks a hyperlink in an HTML-enabled text field.
ThrottleEvent@@\t\n|flash.events|A ThrottleEvent is dispatched when the Flash Player throttles, pauses, or resumes content.
ThrottleType@@\t\n|flash.events|The ThrottleType class provides values for the playback state property of the flash.event.ThrottleEvent class.
TimerEvent@@\t\n|flash.events|A Timer object dispatches a TimerEvent objects whenever the Timer object reaches the interval specified by the Timer.delay property.
TouchEvent@@\t\n|flash.events|The TouchEvent class lets you handle events on devices that detect user contact with the device (such as a finger on a touch screen).
TouchEventIntent@@\t\n|flash.events|The TouchEventIntent class defines constants for the touchIntent property of the TouchEvent class.
TransformGestureEvent@@\t\n|flash.events|The TransformGestureEvent class lets you handle complex movement input events (such as moving fingers across a touch screen) that the device or operating system interprets as a gesture.
UncaughtErrorEvent@@\t\n|flash.events|An UncaughtErrorEvent object is dispatched by an instance of the UncaughtErrorEvents class when an uncaught error occurs.
UncaughtErrorEvents@@\t\n|flash.events|The UncaughtErrorEvents class provides a way to receive uncaught error events.
VideoEvent@@\t\n|flash.events|This event class reports the current video rendering status.
VideoTextureEvent@@\t\n|flash.events|Almost exactly StageVideoEvent.
ExtensionContext@@\t\n|flash.external|The ExtensionContext class also provides a static method getExtensionDirectory() for accessing the directory in which the extension is installed on the device.
ExternalInterface@@\t\n|flash.external|The ExternalInterface class is an application programming interface that enables straightforward communication between ActionScript and the SWF container for example, an HTML page with JavaScript or a desktop application that uses Flash Player to display a SWF file.
File@@\t\n|flash.filesystem|A File object represents a path to a file or directory.
FileMode@@\t\n|flash.filesystem|The FileMode class defines string constants used in the fileMode parameter of the open() and openAsync() methods of the FileStream class.
FileStream@@\t\n|flash.filesystem|A FileStream object is used to read and write files.
StorageVolume@@\t\n|flash.filesystem|A StorageVolume object includes properties defining a mass storage volume.
StorageVolumeInfo@@\t\n|flash.filesystem|The StorageVolumeInfo object dispatches a StorageVolumeChangeEvent object when a storage volume is mounted or unmounted.
BevelFilter@@\t\n|flash.filters|The BevelFilter class lets you add a bevel effect to display objects.
BitmapFilter@@\t\n|flash.filters|The BitmapFilter class is the base class for all image filter effects.
BitmapFilterQuality@@\t\n|flash.filters|The BitmapFilterQuality class contains values to set the rendering quality of a BitmapFilter object.
BitmapFilterType@@\t\n|flash.filters|The BitmapFilterType class contains values to set the type of a BitmapFilter.
BlurFilter@@\t\n|flash.filters|The BlurFilter class lets you apply a blur visual effect to display objects.
ColorMatrixFilter@@\t\n|flash.filters|The ColorMatrixFilter class lets you apply a 4 x 5 matrix transformation on the RGBA color and alpha values of every pixel in the input image to produce a result with a new set of RGBA color and alpha values.
ConvolutionFilter@@\t\n|flash.filters|The ConvolutionFilter class applies a matrix convolution filter effect.
DisplacementMapFilter@@\t\n|flash.filters|The DisplacementMapFilter class uses the pixel values from the specified BitmapData object (called the displacement map image) to perform a displacement of an object.
DisplacementMapFilterMode@@\t\n|flash.filters|The DisplacementMapFilterMode class provides values for the mode property of the DisplacementMapFilter class.
DropShadowFilter@@\t\n|flash.filters|The DropShadowFilter class lets you add a drop shadow to display objects.
GlowFilter@@\t\n|flash.filters|The GlowFilter class lets you apply a glow effect to display objects.
GradientBevelFilter@@\t\n|flash.filters|The GradientBevelFilter class lets you apply a gradient bevel effect to display objects.
GradientGlowFilter@@\t\n|flash.filters|The GradientGlowFilter class lets you apply a gradient glow effect to display objects.
ShaderFilter@@\t\n|flash.filters|The ShaderFilter class applies a filter by executing a shader on the object being filtered.
ColorTransform@@\t\n|flash.geom|The ColorTransform class lets you adjust the color values in a display object.
Matrix@@\t\n|flash.geom|The Matrix class represents a transformation matrix that determines how to map points from one coordinate space to another.
Matrix3D@@\t\n|flash.geom|The Matrix3D class represents a transformation matrix that determines the position and orientation of a three-dimensional (3D) display object.
Orientation3D@@\t\n|flash.geom|The Orientation3D class is an enumeration of constant values for representing the orientation style of a Matrix3D object.
PerspectiveProjection@@\t\n|flash.geom|The PerspectiveProjection class provides an easy way to assign or modify the perspective transformations of a display object and all of its children.
Point@@\t\n|flash.geom|The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.
Rectangle@@\t\n|flash.geom|A Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.
Transform@@\t\n|flash.geom|The Transform class provides access to color adjustment properties and two- or three-dimensional transformation objects that can be applied to a display object.
Utils3D@@\t\n|flash.geom|The Utils3D class contains static methods that simplify the implementation of certain three-dimensional matrix operations.
Vector3D@@\t\n|flash.geom|The Vector3D class represents a point or a location in the three-dimensional space using the Cartesian coordinates x, y, and z.
Collator@@\t\n|flash.globalization|The Collator class provides locale-sensitive string comparison capabilities.
CollatorMode@@\t\n|flash.globalization|The CollatorMode class enumerates constant values that govern the behavior of string comparisons performed by a Collator object.
CurrencyFormatter@@\t\n|flash.globalization|The CurrencyFormatter class provides locale-sensitive formatting and parsing of currency values.
CurrencyParseResult@@\t\n|flash.globalization|A data structure that represents a currency amount and currency symbol or string that were extracted by parsing a currency value.
DateTimeFormatter@@\t\n|flash.globalization|The DateTimeFormatter class provides locale-sensitive formatting for Date objects and access to localized date field names.
DateTimeNameContext@@\t\n|flash.globalization|The DateTimeNameContext class enumerates constant values representing the formatting context in which a month name or weekday name is used.
DateTimeNameStyle@@\t\n|flash.globalization|The DateTimeNameStyle class enumerates constants that control the length of the month names and weekday names that are used when formatting dates.
DateTimeStyle@@\t\n|flash.globalization|Enumerates constants that determine a locale-specific date and time formatting pattern.
LastOperationStatus@@\t\n|flash.globalization|The LastOperationStatus class enumerates constant values that represent the status of the most recent globalization service operation.
LocaleID@@\t\n|flash.globalization|The LocaleID class provides methods for parsing and using locale ID names.
NationalDigitsType@@\t\n|flash.globalization|The NationalDigitsType class enumerates constants that indicate digit sets used by the NumberFormatter class.
NumberFormatter@@\t\n|flash.globalization|The NumberFormatter class provides locale-sensitive formatting and parsing of numeric values.
NumberParseResult@@\t\n|flash.globalization|A data structure that holds information about a number that was extracted by parsing a string.
StringTools@@\t\n|flash.globalization|The StringTools class provides locale-sensitive case conversion methods.
HTMLHistoryItem@@\t\n|flash.html|An HTMLHistoryItem object describes a location in the navigation history of an HTMLLoader object.
HTMLHost@@\t\n|flash.html|An HTMLHost object defines behaviors of an HTMLLoader object for user interface elements that can be controlled by setting various properties or by calling various methods of the window object of the HTML page.
HTMLLoader@@\t\n|flash.html|The HTMLLoader class defines a type of display object that is a container for HTML content.
HTMLPDFCapability@@\t\n|flash.html|The HTMLPDFCapability class contains possible values of the pdfCapability property of an HTMLLoader object.
HTMLSWFCapability@@\t\n|flash.html|The HTMLSWFCapability class contains possible values of the swfCapability property of an HTMLLoader object.
HTMLWindowCreateOptions@@\t\n|flash.html|This class defines the options that can be specified when JavaScript running in an HTMLLoader object tries to create a new HTML window by calling the window.open() method.
AudioDecoder@@\t\n|flash.media|The AudioDecoder class enumerates the types of multichannel audio that a system can support.
AudioPlaybackMode@@\t\n|flash.media|The AudioPlaybackMode class defines constants for the audioPlaybackMode property of the SoundMixer class.
AVNetworkingParams@@\t\n|flash.media|AVStream dispatch AVPlayStateEvent during playback to indicate changes in state.
AVTagData@@\t\n|flash.media|Provides information about a cue point from a period in an HLS stream.
AVURLLoader@@\t\n|flash.media|The URLLoader class downloads data from a URL as text, binary data, or URL-encoded variables.
AVURLStream@@\t\n|flash.media|The URLStream class provides low-level access to downloading URLs.
Camera@@\t\n|flash.media|Use the Camera class to capture video from the client system or device camera.
CameraPosition@@\t\n|flash.media|The CameraPosition class defines constants for the position property of the Camera class.
CameraRoll@@\t\n|flash.media|The CameraRoll class allows you to access image data in the system media library or "camera roll." AIR profile support: This feature is supported on mobile devices, but it is not supported on desktop operating systems or AIR for TV devices.
CameraRollBrowseOptions@@\t\n|flash.media|The CameraRollBrowseOptions class defines the initialization options that may be used when using the Camera Roll API to launch the Image Picker.
CameraUI@@\t\n|flash.media|The CameraUI class allows you to capture a still image or video using the default camera application on a device.
H264Level@@\t\n|flash.media|The H264Level class is an enumeration of constant values used in setting the level of H264VideoStreamSettings class.
H264Profile@@\t\n|flash.media|The H264Profile class is an enumeration of constant values used in setting the profile of H264VideoStreamSettings class.
H264VideoStreamSettings@@\t\n|flash.media|The H264VideoStreamSettings class enables specifying video compression settings for each NetStream.
ID3Info@@\t\n|flash.media|The ID3Info class contains properties that reflect ID3 metadata.
MediaPromise@@\t\n|flash.media|The MediaPromise class represents the promise to deliver a media object.
MediaType@@\t\n|flash.media|The MediaType class enumerates the general types of media that can be returned by a camera.
Microphone@@\t\n|flash.media|Use the Microphone class to monitor or capture audio from a microphone.
MicrophoneEnhancedMode@@\t\n|flash.media|The MicrophoneEnhancedMode class is an enumeration of constant values used in setting the mode property of MicrophoneEnhancedOptions class.
MicrophoneEnhancedOptions@@\t\n|flash.media|The MicrophoneEnhancedOptions class provides configuration options for enhanced audio (acoustic echo cancellation).
Sound@@\t\n|flash.media|The Sound class lets you work with sound in an application.
SoundChannel@@\t\n|flash.media|The SoundChannel class controls a sound in an application.
SoundCodec@@\t\n|flash.media|The SoundCodec class is an enumeration of constant values used in setting the codec property of the Microphone class.
SoundLoaderContext@@\t\n|flash.media|The SoundLoaderContext class provides security checks for files that load sound.
SoundMixer@@\t\n|flash.media|The SoundMixer class contains static properties and methods for global sound control in the application.
SoundTransform@@\t\n|flash.media|The SoundTransform class contains properties for volume and panning.
StageVideo@@\t\n|flash.media|The StageVideo object uses the device's hardware acceleration capabilities, if available, to display live or recorded video in an application.
StageVideoAvailability@@\t\n|flash.media|This class defines an enumeration that indicates whether stage video is currently available.
StageVideoAvailabilityReason@@\t\n|flash.media|This class defines an enumeration that indicates whether stage video is currently available.
StageWebView@@\t\n|flash.media|The StageWebView class displays HTML content in a stage view port.
Video@@\t\n|flash.media|The Video class displays live or recorded video in an application without embedding the video in your SWF file.
VideoCodec@@\t\n|flash.media|The VideoCodec class is an enumeration of constant values of supported video codecs.
VideoStatus@@\t\n|flash.media|This class defines an enumeration that describes possible levels of video decoding.
VideoStreamSettings@@\t\n|flash.media|The VideoStreamSettings class enables specifying video compression settings for each NetStream.
DatagramSocket@@\t\n|flash.net|The DatagramSocket class enables code to send and receive Universal Datagram Protocol (UDP) packets.
FileFilter@@\t\n|flash.net|The FileFilter class is used to indicate what files on the user's system are shown in the file-browsing dialog box that is displayed when the FileReference.browse() method, the FileReferenceList.browse() method is called or a browse method of a File, FileReference, or FileReferenceList object is called.
FileReference@@\t\n|flash.net|The FileReference class provides a means to upload and download files between a user's computer and a server.
FileReferenceList@@\t\n|flash.net|The FileReferenceList class provides a means to let users select one or more files for uploading.
GroupSpecifier@@\t\n|flash.net|The GroupSpecifier class is used to construct the opaque groupspec strings that can be passed to NetStream and NetGroup constructors.
InterfaceAddress@@\t\n|flash.net|The InterfaceAddress class reports the properties of a network interface address.
IPVersion@@\t\n|flash.net|The IPVersion class defines constants representing the different families of IP addresses.
LocalConnection@@\t\n|flash.net|The LocalConnection class lets you create a LocalConnection object that can invoke a method in another LocalConnection object.
NetConnection@@\t\n|flash.net|The NetConnection class creates a two-way connection between a client and a server.
NetGroup@@\t\n|flash.net|Instances of the NetGroup class represent membership in an RTMFP group.
NetGroupInfo@@\t\n|flash.net|The NetGroupInfo class specifies various Quality of Service (QoS) statistics related to a NetGroup object's underlying RTMFP Peer-to-Peer data transport.
NetGroupReceiveMode@@\t\n|flash.net|The NetGroupReceiveMode class is an enumeration of constant values used for the receiveMode property of the NetGroup class.
NetGroupReplicationStrategy@@\t\n|flash.net|The NetGroupReplicationStrategy class is an enumeration of constant values used in setting the replicationStrategy property of the NetGroup class.
NetGroupSendMode@@\t\n|flash.net|The NetGroupSendMode class is an enumeration of constant values used for the sendMode parameter of the NetGroup.sendToNeighbor() method.
NetGroupSendResult@@\t\n|flash.net|The NetGroupSendResult class is an enumeration of constant values used for the return value of the Directed Routing methods associated with a NetGroup instance.
NetMonitor@@\t\n|flash.net|The NetMonitor class maintains a list of NetStream objects.
NetStream@@\t\n|flash.net|The NetStream class opens a one-way streaming channel over a NetConnection.
NetStreamAppendBytesAction@@\t\n|flash.net|The NetStreamAppendBytesAction class is an enumeration of the constants you can pass to the NetStream.appendBytesAction() method.
NetStreamInfo@@\t\n|flash.net|The NetStreamInfo class specifies the various Quality of Service (QOS) statistics and other information related to a NetStream object and the underlying streaming buffer for audio, video, and data.
NetStreamMulticastInfo@@\t\n|flash.net|The NetStreamMulticastInfo class specifies various Quality of Service (QoS) statistics related to a NetStream object's underlying RTMFP Peer-to-Peer and IP Multicast stream transport.
NetStreamPlayOptions@@\t\n|flash.net|The NetStreamPlayOptions class specifies the various options that can be passed to the NetStream.play2() method.
NetStreamPlayTransitions@@\t\n|flash.net|The NetStreamPlayTransitions class specifies the valid strings that you can use with the NetStreamPlayOptions.transition property.
NetworkInfo@@\t\n|flash.net|The NetworkInfo class provides information about the network interfaces on a computer.
NetworkInterface@@\t\n|flash.net|The NetworkInterface class describes a network interface.
ObjectEncoding@@\t\n|flash.net|The ObjectEncoding class is used in defining serialization settings in classes that serialize objects (such as FileStream, NetStream, NetConnection, SharedObject, and ByteArray) to work with prior versions of ActionScript.
Responder@@\t\n|flash.net|The Responder class provides an object that is used in NetConnection.call() to handle return values from the server related to the success or failure of specific operations.
SecureSocket@@\t\n|flash.net|The SecureSocket class enables code to make socket connections using the Secure Sockets Layer (SSL) and Transport Layer Security (TLS) protocols.
ServerSocket@@\t\n|flash.net|The ServerSocket class allows code to act as a server for Transport Control Protocol (TCP) connections.
SharedObject@@\t\n|flash.net|The SharedObject class is used to read and store limited amounts of data on a user's computer or on a server.
SharedObjectFlushStatus@@\t\n|flash.net|The SharedObjectFlushStatus class provides values for the code returned from a call to the SharedObject.flush() method.
Socket@@\t\n|flash.net|The Socket class enables code to establish Transport Control Protocol (TCP) socket connections for sending and receiving binary data.
URLLoader@@\t\n|flash.net|The URLLoader class downloads data from a URL as text, binary data, or URL-encoded variables.
URLLoaderDataFormat@@\t\n|flash.net|The URLLoaderDataFormat class provides values that specify how downloaded data is received.
URLRequest@@\t\n|flash.net|The URLRequest class captures all of the information in a single HTTP request.
URLRequestDefaults@@\t\n|flash.net|The URLRequestDefaults class includes static properties that you can set to define default values for the properties of the URLRequest class.
URLRequestHeader@@\t\n|flash.net|A URLRequestHeader object encapsulates a single HTTP request header and consists of a name/value pair.
URLRequestMethod@@\t\n|flash.net|The URLRequestMethod class provides values that specify whether the URLRequest object should use the POST method or the GET method when sending data to a server.
URLStream@@\t\n|flash.net|The URLStream class provides low-level access to downloading URLs.
URLVariables@@\t\n|flash.net|The URLVariables class allows you to transfer variables between an application and a server.
XMLSocket@@\t\n|flash.net|The XMLSocket class implements client sockets that let the Flash Player or AIR application communicate with a server computer identified by an IP address or domain name.
AAAARecord@@\t\n|flash.net.dns|The AAAARecord class represents a Domain Name System (DNS) AAAA resource record containing an IPv6 address.
ARecord@@\t\n|flash.net.dns|The ARecord class represents a Domain Name System (DNS) A resource record containing an IPv4 address.
DNSResolver@@\t\n|flash.net.dns|The DNSResolver class lets you lookup Domain Name System (DNS) resource records.
MXRecord@@\t\n|flash.net.dns|The MXRecord class represents a Domain Name System (DNS) MX resource record containing a mail exchange server address.
PTRRecord@@\t\n|flash.net.dns|The PTRRecord class represents a Domain Name System (DNS) PTR resource record containing a canonical domain name.
ResourceRecord@@\t\n|flash.net.dns|The ResourceRecord class is the base class for Domain Name System (DNS) resource record classes.
SRVRecord@@\t\n|flash.net.dns|The SRVRecord class represents a Domain Name System (DNS) SRV resource record containing a service host.
AuthenticationMethod@@\t\n|flash.net.drm|The AuthenticationMethod class provides string constants enumerating the different types of authentication used by the authenticationMethod property of the DRMContentData class.
DRMContentData@@\t\n|flash.net.drm|The DRMContentData class provides the information required to obtain the voucher necessary to view DRM-protected content.
DRMDeviceGroup@@\t\n|flash.net.drm|A device group signifies a group of playback devices that shares protected-content playback rights.
DRMManager@@\t\n|flash.net.drm|The DRMManager manages the retrieval and storage of the vouchers needed to view DRM-protected content.
DRMPlaybackTimeWindow@@\t\n|flash.net.drm|The DRMPlaybackTimeWindow class represents the period of time during which a DRM voucher is valid.
DRMVoucher@@\t\n|flash.net.drm|The DRMVoucher class is a handle to the license token that allows a user to view DRM-protected content.
LoadVoucherSetting@@\t\n|flash.net.drm|The LoadVoucherSetting class provides string constants for use with the settings parameter of the DRMManager loadVoucher() method.
VoucherAccessInfo@@\t\n|flash.net.drm|A VoucherAccessInfo object presents the information that is required to successfully retrieve and consume a voucher, such as the type of authentication and the content domain of the media rights server.
NotificationStyle@@\t\n|flash.notifications|The NotificationStyle class defines constants for the styles of notifications supported by RemoteNotifier class.
RemoteNotifier@@\t\n|flash.notifications|The RemoteNotifier class lets you subscribe to and unsubscribe from push notifications.
RemoteNotifierSubscribeOptions@@\t\n|flash.notifications|The RemoteNotifierSubscribeOptions class defines the initialization options that may be used during the remote notification subscription process.
PermissionStatus@@\t\n|flash.permissions|The PermissionStatus class is an enumeration of constant values that specify the authorization status of a permission 
PaperSize@@\t\n|flash.printing|This class provides the available values for the paperSize parameter of the PrintJob.selectPaperSize() method.
PrintJob@@\t\n|flash.printing|The PrintJob class lets you create content and print it to one or more pages.
PrintJobOptions@@\t\n|flash.printing|The PrintJobOptions class contains properties to use with the options parameter of the PrintJob.addPage() method.
PrintJobOrientation@@\t\n|flash.printing|This class provides values that are used by the PrintJob.orientation property for the image position of a printed page.
PrintMethod@@\t\n|flash.printing|This class provides values for the PrintJobOptions.printMethod property to specify the method of printing a page.
PrintUIOptions@@\t\n|flash.printing|The PrintUIOptions class is used to specify options for print dialogs that are displayed to the user.
Telemetry@@\t\n|flash.profiler|The Telemetry class lets an application profile ActionScript code and register handlers for commands 
DeleteObjectSample@@\t\n|flash.sampler|The DeleteObjectSample class represents objects that are created within a getSamples() stream; each DeleteObjectSample object corresponds to a NewObjectSample object.
NewObjectSample@@\t\n|flash.sampler|The NewObjectSample class represents objects that are created within a getSamples() stream.
Sample@@\t\n|flash.sampler|The Sample class creates objects that hold memory analysis information over distinct durations.
StackFrame@@\t\n|flash.sampler|The StackFrame class provides access to the properties of a data block containing a function.
CertificateStatus@@\t\n|flash.security|The CertificateStatus class defines constants used to report the results of certificate validation processing by a SecureSocket object.
IURIDereferencer@@\t\n|flash.security|IURIDereferencer defines an interface for objects that resolve URIs in an XML signature.
ReferencesValidationSetting@@\t\n|flash.security|The ReferencesValidationSetting class defines constants used by the referencesValidationSetting property of an XMLSignatureValidator object.
RevocationCheckSettings@@\t\n|flash.security|The RevocationCheckSettings class defines constants used by the revocationCheckSetting property of an XMLSignatureValidator object.
SignatureStatus@@\t\n|flash.security|The SignatureStatus class defines constants used by the validityStatus property of an XMLSignatureValidator object.
SignerTrustSettings@@\t\n|flash.security|The SignerTrustSettings class defines constants used with the signerTrustSettings property of an XMLSignatureValidator object.
X500DistinguishedName@@\t\n|flash.security|The X500DistinguishedName class defines Distinguished Name (DN) properties for use in the X509Certificate class.
X509Certificate@@\t\n|flash.security|The X509Certificate class represents an X.509 certificate.
XMLSignatureValidator@@\t\n|flash.security|The XMLSignatureValidator class validates whether an XML signature file is well formed, unmodified, and, optionally, whether it is signed using a key linked to a trusted digital certificate.
Accelerometer@@\t\n|flash.sensors|The Accelerometer class dispatches events based on activity detected by the device's motion sensor.
Geolocation@@\t\n|flash.sensors|The Geolocation class dispatches events in response to the device's location sensor.
ApplicationDomain@@\t\n|flash.system|The ApplicationDomain class is a container for discrete groups of class definitions.
Capabilities@@\t\n|flash.system|The Capabilities class provides properties that describe the system and runtime that are hosting the application.
ImageDecodingPolicy@@\t\n|flash.system|The ImageDecodingPolicy class provides values for imageDecodingPolicy in the LoaderContext class.
IME@@\t\n|flash.system|The IME class lets you directly manipulate the operating system's input method editor (IME) in the Flash runtime application that is running on a client computer.
IMEConversionMode@@\t\n|flash.system|This class contains constants for use with the IME.conversionMode property.
JPEGLoaderContext@@\t\n|flash.system|The JPEGLoaderContext class includes a property for enabling a deblocking filter when loading a JPEG image.
LoaderContext@@\t\n|flash.system|The LoaderContext class provides options for loading SWF files and other media by using the Loader class.
MessageChannel@@\t\n|flash.system|The MessageChannel class provides a mechanism for a worker to communicate with another worker.
MessageChannelState@@\t\n|flash.system|This class defines constants that represent the possible values for the MessageChannel class's state property.
Security@@\t\n|flash.system|The Security class lets you specify how content in different domains can communicate with each other.
SecurityDomain@@\t\n|flash.system|The SecurityDomain class represents the current security "sandbox," also known as a security domain.
SecurityPanel@@\t\n|flash.system|The SecurityPanel class provides values for specifying which Security Settings panel you want to display.
System@@\t\n|flash.system|The System class contains properties related to local settings and operations.
SystemUpdater@@\t\n|flash.system|The SystemUpdater class allows you to update modules of the Flash Player, such as the DRM module for Adobe Access, as well as the Flash Player itself.
SystemUpdaterType@@\t\n|flash.system|The SystemUpdaterType class provides constants for a system update.
TouchscreenType@@\t\n|flash.system|The TouchscreenType class is an enumeration class that provides values for the different types of touch screens.
Worker@@\t\n|flash.system|A Worker object represents a worker, which is a virtual instance of the Flash runtime.
WorkerDomain@@\t\n|flash.system|The WorkerDomain class provides a way to create Worker objects and access them.
WorkerState@@\t\n|flash.system|This class defines constants that represent the possible values of the Worker class's state property.
AntiAliasType@@\t\n|flash.text|The AntiAliasType class provides values for anti-aliasing in the flash.text.TextField class.
AutoCapitalize@@\t\n|flash.text|The AutoCapitalize class defines constants for the autoCapitalize property of the StageText class.
CSMSettings@@\t\n|flash.text|The CSMSettings class contains properties for use with the TextRenderer.setAdvancedAntiAliasingTable() method to provide continuous stroke modulation (CSM).
Font@@\t\n|flash.text|The Font class is used to manage embedded fonts in SWF files.
FontStyle@@\t\n|flash.text|The FontStyle class provides values for the TextRenderer class.
FontType@@\t\n|flash.text|The FontType class contains the enumerated constants "embedded" and "device" for the fontType property of the Font class.
GridFitType@@\t\n|flash.text|The GridFitType class defines values for grid fitting in the TextField class.
ReturnKeyLabel@@\t\n|flash.text|The ReturnKeyLabel class defines the values to use for the returnKeyLabel property of the StageText class.
SoftKeyboardType@@\t\n|flash.text|The SoftKeyboardType class defines the types of soft keyboards for mobile applications.
StageText@@\t\n|flash.text|The StageText class is used to present the user with a native text input field.
StageTextClearButtonMode@@\t\n|flash.text|This class defines an enumeration that provides option for clearButton.
StageTextInitOptions@@\t\n|flash.text|The StageTextInitOptions class defines the options available for initializing a StageText object.
StaticText@@\t\n|flash.text|This class represents StaticText objects on the display list.
StyleSheet@@\t\n|flash.text|The StyleSheet class lets you create a StyleSheet object that contains text formatting rules for font size, color, and other styles.
TextColorType@@\t\n|flash.text|The TextColorType class provides color values for the flash.text.TextRenderer class.
TextDisplayMode@@\t\n|flash.text|The TextDisplayMode class contains values that control the subpixel anti-aliasing of the advanced anti-aliasing system.
TextField@@\t\n|flash.text|The TextField class is used to create display objects for text display and input.
TextFieldAutoSize@@\t\n|flash.text|The TextFieldAutoSize class is an enumeration of constant values used in setting the autoSize property of the TextField class.
TextFieldType@@\t\n|flash.text|The TextFieldType class is an enumeration of constant values used in setting the type property of the TextField class.
TextFormat@@\t\n|flash.text|The TextFormat class represents character formatting information.
TextFormatAlign@@\t\n|flash.text|The TextFormatAlign class provides values for text alignment in the TextFormat class.
TextInteractionMode@@\t\n|flash.text|A class that defines the Interactive mode of a text field object.
TextLineMetrics@@\t\n|flash.text|The TextLineMetrics class contains information about the text position and measurements of a line of text within a text field.
TextRenderer@@\t\n|flash.text|The TextRenderer class provides functionality for the advanced anti-aliasing capability of embedded fonts.
TextSnapshot@@\t\n|flash.text|TextSnapshot objects let you work with static text in a movie clip.
BreakOpportunity@@\t\n|flash.text.engine|The BreakOpportunity class is an enumeration of constant values that you can use to set the breakOpportunity property of the ElementFormat class.
CFFHinting@@\t\n|flash.text.engine|The CFFHinting class defines values for cff hinting in the FontDescription class.
ContentElement@@\t\n|flash.text.engine|The ContentElement class serves as a base class for the element types that can appear in a GroupElement, namely a GraphicElement, another GroupElement, or a TextElement.
DigitCase@@\t\n|flash.text.engine|The DigitCase class is an enumeration of constant values used in setting the digitCase property of the ElementFormat class.
DigitWidth@@\t\n|flash.text.engine|The DigitWidth class is an enumeration of constant values used in setting the digitWidth property of the ElementFormat class.
EastAsianJustifier@@\t\n|flash.text.engine|The EastAsianJustifier class has properties to control the justification options for text lines whose content is primarily East Asian text.
ElementFormat@@\t\n|flash.text.engine|The ElementFormat class represents formatting information which can be applied to a ContentElement.
FontDescription@@\t\n|flash.text.engine|The FontDescription class represents the information necessary to describe a font.
FontLookup@@\t\n|flash.text.engine|The FontLookup class is an enumeration of constant values used with FontDescription.fontLookup.
FontMetrics@@\t\n|flash.text.engine|The FontMetrics class contains measurement and offset information about a font.
FontPosture@@\t\n|flash.text.engine|The FontPosture class is an enumeration of constant values used with FontDescription.fontPosture to set text to italic or normal.
FontWeight@@\t\n|flash.text.engine|The FontWeight class is an enumeration of constant values used with FontDescription.fontWeight.
GraphicElement@@\t\n|flash.text.engine|The GraphicElement class represents a graphic element in a TextBlock or GroupElement object.
GroupElement@@\t\n|flash.text.engine|A GroupElement object groups a collection of TextElement, GraphicElement, or other GroupElement objects that you can assign as a unit to the content property of a TextBlock object.
JustificationStyle@@\t\n|flash.text.engine|The JustificationStyle class is an enumeration of constant values for setting the justificationStyle property of the EastAsianJustifier class.
Kerning@@\t\n|flash.text.engine|The Kerning class is an enumeration of constant values used with ElementFormat.kerning.
LigatureLevel@@\t\n|flash.text.engine|The LigatureLevel class is an enumeration of constant values used in setting the ligatureLevel property of the ElementFormat class.
LineJustification@@\t\n|flash.text.engine|The LineJustification class is an enumeration of constant values used in setting the lineJustfication property of the TextJustifier subclasses.
RenderingMode@@\t\n|flash.text.engine|The RenderingMode class provides values for rendering mode in the FontDescription class.
SpaceJustifier@@\t\n|flash.text.engine|The SpaceJustifier class represents properties that control the justification options for text lines in a text block.
TabAlignment@@\t\n|flash.text.engine|The TabAlignment class is an enumeration of constant values that you can use to set the tabAlignment property of the TabStop class.
TabStop@@\t\n|flash.text.engine|The TabStop class represents the properties of a tab stop in a text block.
TextBaseline@@\t\n|flash.text.engine|The TextBaseline class is an enumeration of constant values to use in setting the dominantBaseline and alignmentBaseline properties of the ElementFormat class.
TextBlock@@\t\n|flash.text.engine|The TextBlock class is a factory for the creation of TextLine objects, which you can render by placing them on the display list.
TextElement@@\t\n|flash.text.engine|The TextElement class represents a string of formatted text.
TextJustifier@@\t\n|flash.text.engine|The TextJustifier class is an abstract base class for the justifier types that you can apply to a TextBlock, specifically the EastAsianJustifier and SpaceJustifier classes.
TextLine@@\t\n|flash.text.engine|The TextLine class is used to display text on the display list.
TextLineCreationResult@@\t\n|flash.text.engine|The TextLineCreationResult class is an enumeration of constant values used with TextBlock.textLineCreationResult.
TextLineMirrorRegion@@\t\n|flash.text.engine|The TextLineMirrorRegion class represents a portion of a text line wherein events are mirrored to another event dispatcher.
TextLineValidity@@\t\n|flash.text.engine|The TextLineValidity class is an enumeration of constant values for setting the validity property of the TextLine class.
TextRotation@@\t\n|flash.text.engine|The TextRotation class is an enumeration of constant values used with the following properties: ElementFormat.textRotation, ContentElement.textRotation, TextBlock.lineRotation, and TextLine.getAtomTextRotation().
TypographicCase@@\t\n|flash.text.engine|The TypographicCase class is an enumeration of constant values for setting the typographicCase property of the ElementFormat class.
CompositionAttributeRange@@\t\n|flash.text.ime|The CompositionAttributeRange class represents a range of composition attributes for use with IME (input method editor) events.
IIMEClient@@\t\n|flash.text.ime|Interface for IME (input method editor) clients.
ContextMenu@@\t\n|flash.ui|The ContextMenu class provides control over the items displayed in context menus.
ContextMenuBuiltInItems@@\t\n|flash.ui|The ContextMenuBuiltInItems class describes the items that are built in to a context menu.
ContextMenuClipboardItems@@\t\n|flash.ui|The ContextMenuClipboardItems class lets you enable or disable the commands in the clipboard context menu.
ContextMenuItem@@\t\n|flash.ui|The ContextMenuItem class represents an item in the context menu.
GameInput@@\t\n|flash.ui|The GameInput class is the entry point into the GameInput API.
GameInputControl@@\t\n|flash.ui|The GameInputControl class represents a control on an input device.
GameInputDevice@@\t\n|flash.ui|The GameInputDevice class represents a single input device commonly used for gaming.
Keyboard@@\t\n|flash.ui|The Keyboard class is used to build an interface that can be controlled by a user with a standard keyboard.
KeyboardType@@\t\n|flash.ui|The KeyboardType class is an enumeration class that provides values for different categories of physical computer or device keyboards.
KeyLocation@@\t\n|flash.ui|The KeyLocation class contains constants that indicate the location of a key pressed on the keyboard or keyboard-like input device.
Mouse@@\t\n|flash.ui|The methods of the Mouse class are used to hide and show the mouse pointer, or to set the pointer to a specific style.
MouseCursor@@\t\n|flash.ui|The MouseCursor class is an enumeration of constant values used in setting the cursor property of the Mouse class.
MouseCursorData@@\t\n|flash.ui|The MouseCursorData class lets you define the appearance of a "native" mouse cursor.
Multitouch@@\t\n|flash.ui|The Multitouch class manages and provides information about the current environment's support for handling contact from user input devices, including contact that has two or more touch points (such as a user's fingers on a touch screen).
MultitouchInputMode@@\t\n|flash.ui|The MultitouchInputMode class provides values for the inputMode property in the flash.ui.Multitouch class.
ByteArray@@\t\n|flash.utils|The ByteArray class provides methods and properties to optimize reading, writing, and working with binary data.
CompressionAlgorithm@@\t\n|flash.utils|The CompressionAlgorithm class defines string constants for the names of compress and uncompress options.
Dictionary@@\t\n|flash.utils|The Dictionary class lets you create a dynamic collection of properties, which uses strict equality (===) for key comparison.
Endian@@\t\n|flash.utils|The Endian class contains values that denote the byte order used to represent multibyte numbers.
IDataInput@@\t\n|flash.utils|The IDataInput interface provides a set of methods for reading binary data.
IDataOutput@@\t\n|flash.utils|The IDataOutput interface provides a set of methods for writing binary data.
Timer@@\t\n|flash.utils|The Timer class is the interface to timers, which let you run code on a specified time sequence.
XMLDocument@@\t\n|flash.xml|The XMLDocument class represents the legacy XML object that was present in ActionScript 2.0.
XMLNode@@\t\n|flash.xml|The XMLNode class represents the legacy XML object that was present in ActionScript 2.0 and that was renamed in ActionScript 3.0.
XMLNodeType@@\t\n|flash.xml|The XMLNodeType class contains constants used with XMLNode.nodeType.
TextLayoutVersion@@\t\n|flashx.textLayout|This class controls the backward-compatibility of the framework.
FlowComposerBase@@\t\n|flashx.textLayout.compose|The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the composition of text lines in ContainerController objects.
FlowDamageType@@\t\n|flashx.textLayout.compose|The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.
IFlowComposer@@\t\n|flashx.textLayout.compose|IFlowComposer defines the interface for managing the layout and display of a text flow.
ISWFContext@@\t\n|flashx.textLayout.compose|The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.
IVerticalJustificationLine@@\t\n|flashx.textLayout.compose|The IVerticalJustificationLine interface defines the methods and properties required to allow the vertical justification of text lines.
StandardFlowComposer@@\t\n|flashx.textLayout.compose|The StandardFlowComposer class provides a standard composer and container manager.
TextFlowLine@@\t\n|flashx.textLayout.compose|The TextFlowLine class represents a single line of text in a text flow.
TextFlowLineLocation@@\t\n|flashx.textLayout.compose|The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location of a line within a paragraph.
TextLineRecycler@@\t\n|flashx.textLayout.compose|The TextLineRecycler class provides support for recycling of TextLines.
ColumnState@@\t\n|flashx.textLayout.container|The ColumnState class calculates the sizes and locations of columns using the width of the container and the container attributes.
ContainerController@@\t\n|flashx.textLayout.container|The ContainerController class defines the relationship between a TextFlow object and a container.
ISandboxSupport@@\t\n|flashx.textLayout.container|Interface to support TLF content in a sub-application.
ScrollPolicy@@\t\n|flashx.textLayout.container|The ScrollPolicy class is an enumeration class that defines values for setting the horizontalScrollPolicy and verticalScrollPolicy properties of the ContainerController class, which defines a text flow container.
TextContainerManager@@\t\n|flashx.textLayout.container|Manages text in a container.
ConversionType@@\t\n|flashx.textLayout.conversion|Values for the format of exported text.
ConverterBase@@\t\n|flashx.textLayout.conversion|This is a base class for importers as well as exporters.
FormatDescriptor@@\t\n|flashx.textLayout.conversion|Contains information about a format.
IHTMLImporter@@\t\n|flashx.textLayout.conversion|This interface should be implemented by converters that import HTML or HTML-structured data.
IPlainTextExporter@@\t\n|flashx.textLayout.conversion|This interface should be implemented by converters that export plain text.
ITextExporter@@\t\n|flashx.textLayout.conversion|Interface for exporting text content from a TextFlow instance to a given format, which may for example be String or XML format, or a user-defined format.
ITextImporter@@\t\n|flashx.textLayout.conversion|Interface for importing text content into a TextFlow from an external source.
ITextLayoutImporter@@\t\n|flashx.textLayout.conversion|This interface should be implemented by converters that import TextLayout structured data.
PlainTextExporter@@\t\n|flashx.textLayout.conversion|Export converter for plain text format.
TextConverter@@\t\n|flashx.textLayout.conversion|This is the gateway class for handling import and export.
EditingMode@@\t\n|flashx.textLayout.edit|The EditingMode class defines constants used with EditManager class to represent the read, select, and edit permissions of a document.
EditManager@@\t\n|flashx.textLayout.edit|The EditManager class manages editing changes to a TextFlow.
ElementRange@@\t\n|flashx.textLayout.edit|The ElementRange class represents the range of objects selected within a text flow.
IEditManager@@\t\n|flashx.textLayout.edit|IEditManager defines the interface for handling edit operations of a text flow.
IInteractionEventHandler@@\t\n|flashx.textLayout.edit|The IInteractionEventHandler interface defines the event handler functions that are handled by a Text Layout Framework selection or edit manager.
ISelectionManager@@\t\n|flashx.textLayout.edit|The ISelectionManager interface defines the interface for handling text selection.
SelectionFormat@@\t\n|flashx.textLayout.edit|The SelectionFormat class defines the properties of a selection highlight.
SelectionManager@@\t\n|flashx.textLayout.edit|The SelectionManager class manages text selection in a text flow.
SelectionState@@\t\n|flashx.textLayout.edit|The SelectionState class represents a selection in a text flow.
TextClipboard@@\t\n|flashx.textLayout.edit|The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.
TextScrap@@\t\n|flashx.textLayout.edit|The TextScrap class represents a fragment of a text flow.
BreakElement@@\t\n|flashx.textLayout.elements|The BreakElement class defines a line break, which provides for creating a line break in the text without creating a new paragraph.
Configuration@@\t\n|flashx.textLayout.elements|The Configuration class is a primary point of integration between the Text Layout Framework and an application.
ContainerFormattedElement@@\t\n|flashx.textLayout.elements|ContainerFormattedElement is the root class for all container-level block elements, such as DivElement and TextFlow objects.
DivElement@@\t\n|flashx.textLayout.elements|The DivElement class defines an element for grouping paragraphs (ParagraphElement objects).
FlowElement@@\t\n|flashx.textLayout.elements|The text in a flow is stored in tree form with the elements of the tree representing logical divisions within the text.
FlowGroupElement@@\t\n|flashx.textLayout.elements|The FlowGroupElement class is the base class for FlowElement objects that can have an array of children.
FlowLeafElement@@\t\n|flashx.textLayout.elements|Base class for FlowElements that appear at the lowest level of the flow hierarchy.
GlobalSettings@@\t\n|flashx.textLayout.elements|Configuration that applies to all TextFlow objects.
IConfiguration@@\t\n|flashx.textLayout.elements|Read-only interface to a configuration object.
IFormatResolver@@\t\n|flashx.textLayout.elements|Interface to a format resolver.
InlineGraphicElement@@\t\n|flashx.textLayout.elements|The InlineGraphicElement class handles graphic objects that display inline in the text.
InlineGraphicElementStatus@@\t\n|flashx.textLayout.elements|The InlineGraphicElementStatus class defines a set of constants for checking the value of InlineGraphicElement.status.
LinkElement@@\t\n|flashx.textLayout.elements|The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.
LinkState@@\t\n|flashx.textLayout.elements|The LinkState class defines a set of constants for the linkState property of the LinkElement class.
ListElement@@\t\n|flashx.textLayout.elements|The List class is used for grouping together items into a numbered or unnumbered list.
ListItemElement@@\t\n|flashx.textLayout.elements|ListItemElement is an item in a list.
OverflowPolicy@@\t\n|flashx.textLayout.elements|The OverflowPolicy class defines a set of constants for the overflowPolicy property of the IConfiguration class.
ParagraphElement@@\t\n|flashx.textLayout.elements|The ParagraphElement class represents a paragraph in the text flow hierarchy.
ParagraphFormattedElement@@\t\n|flashx.textLayout.elements|The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.
SpanElement@@\t\n|flashx.textLayout.elements|The SpanElement class represents a run of text that has a single set of formatting attributes applied.
SpecialCharacterElement@@\t\n|flashx.textLayout.elements|The SpecialCharacterElement class is an abstract base class for elements that represent special characters.
SubParagraphGroupElement@@\t\n|flashx.textLayout.elements|The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.
SubParagraphGroupElementBase@@\t\n|flashx.textLayout.elements|The SubParagraphGroupElementBase class groups FlowLeafElements together.
TabElement@@\t\n|flashx.textLayout.elements|The TabElement class represents a <tab/> in the text flow.
TCYElement@@\t\n|flashx.textLayout.elements|The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes text to draw horizontally within a vertical line.
TextFlow@@\t\n|flashx.textLayout.elements|The TextFlow class is responsible for managing all the text content of a story.
TextRange@@\t\n|flashx.textLayout.elements|A read only class that describes a range of contiguous text.
CompositionCompleteEvent@@\t\n|flashx.textLayout.events|A TextFlow instance dispatches this event after a compose operation completes.
DamageEvent@@\t\n|flashx.textLayout.events|A TextFlow instance dispatches this each time it is marked as damaged.
FlowElementMouseEvent@@\t\n|flashx.textLayout.events|A link element dispatches this event when it detects mouse activity.
FlowOperationEvent@@\t\n|flashx.textLayout.events|A TextFlow instance dispatches this event just before an operation commences and again just after an operation completes.
ScrollEvent@@\t\n|flashx.textLayout.events|Represents events that are dispatched when the TextFlow does automatic scrolling.
ScrollEventDirection@@\t\n|flashx.textLayout.events|Constants for the values of the direction property of a ScrollEvent.
SelectionEvent@@\t\n|flashx.textLayout.events|A TextFlow instance dispatches a SelectionEvent object when an EditManager or SelectionManager changes or selects a range of text.
StatusChangeEvent@@\t\n|flashx.textLayout.events|A TextFlow instance dispatches this event when the status of a FlowElement changes.
TextLayoutEvent@@\t\n|flashx.textLayout.events|A TextLayoutEvent instance represents an event, such as the TextLayoutEvent.SCROLL event, that does not require custom properties.
UpdateCompleteEvent@@\t\n|flashx.textLayout.events|A TextFlow instance dispatches this event after any of its containers completes an update.
StringTextLineFactory@@\t\n|flashx.textLayout.factory|The StringTextLineFactory class provides a simple way to create TextLines from a string.
TextFlowTextLineFactory@@\t\n|flashx.textLayout.factory|The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.
TextLineFactoryBase@@\t\n|flashx.textLayout.factory|The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.
TruncationOptions@@\t\n|flashx.textLayout.factory|The TruncationOptions class specifies options for limiting the number of lines of text created by a text line factory and for indicating when lines have been left out.
BackgroundColor@@\t\n|flashx.textLayout.formats|Defines a constant for specifying that the value of the backgroundColor property of the TextLayoutFormat class is "transparent".
BaselineOffset@@\t\n|flashx.textLayout.formats|Defines values for the firstBaselineOffset property of the TextLayoutFormat and ContainerFormattedElement classes.
BaselineShift@@\t\n|flashx.textLayout.formats|Defines constants for specifying subscript or superscript in the baselineShift property of the TextLayoutFormat class.
BlockProgression@@\t\n|flashx.textLayout.formats|Defines values for the blockProgression property of the TextLayouFormat class.
ClearFloats@@\t\n|flashx.textLayout.formats|Defines values for setting the clear property of the TextLayoutFormat class.
Direction@@\t\n|flashx.textLayout.formats|Defines values for setting the direction property of the TextLayoutFormat class.
Float@@\t\n|flashx.textLayout.formats|Defines values for the float property of the InlineGraphicElement class.
FormatValue@@\t\n|flashx.textLayout.formats|Defines values for specifying that a formatting property is to inherit its parent's value or have it's value generated automatically.
IListMarkerFormat@@\t\n|flashx.textLayout.formats|This interface provides read access to ListMarkerFormat properties.
ITabStopFormat@@\t\n|flashx.textLayout.formats|This interface provides read access to tab stop-related properties.
ITextLayoutFormat@@\t\n|flashx.textLayout.formats|This interface provides read access to FlowElements-related properties.
JustificationRule@@\t\n|flashx.textLayout.formats|Defines values for setting the justificationRule property of the TextLayoutFormat class.
LeadingModel@@\t\n|flashx.textLayout.formats|Defines values for setting the leadingModel property of the TextLayoutFormat class, composed of valid combinations of leading basis and leading direction.
LineBreak@@\t\n|flashx.textLayout.formats|Defines values for setting the lineBreak property of TextLayoutFormat to specify how lines are broken within wrapping text.
ListMarkerFormat@@\t\n|flashx.textLayout.formats|Defines the marker format in a ListItemElement.
ListStylePosition@@\t\n|flashx.textLayout.formats|Defines values for setting the listStylePosition property.
ListStyleType@@\t\n|flashx.textLayout.formats|Defines values for setting the listStyleType property of a TextLayoutFormat object.
Suffix@@\t\n|flashx.textLayout.formats|Defines values for setting the suffix property of a ListMarkerFormat.
TabStopFormat@@\t\n|flashx.textLayout.formats|The TabStopFormat class represents the properties of a tab stop in a paragraph.
TextAlign@@\t\n|flashx.textLayout.formats|Defines values for setting the textAlign and textAlignLast properties of the TextLayoutFormat class.
TextDecoration@@\t\n|flashx.textLayout.formats|Defines values for the textDecoration property of the TextLayoutFormat class.
TextJustify@@\t\n|flashx.textLayout.formats|Defines values for setting the textJustify property of the TextLayoutFormat class.
TextLayoutFormat@@\t\n|flashx.textLayout.formats|The TextLayoutFormat class holds all of the text layout properties.
TLFTypographicCase@@\t\n|flashx.textLayout.formats|Defines values for the typographicCase property of the TextLayoutFormat class.
VerticalAlign@@\t\n|flashx.textLayout.formats|Defines values for the verticalAlign property of the TextLayoutFormat class.
WhiteSpaceCollapse@@\t\n|flashx.textLayout.formats|Defines values for setting the whiteSpaceCollapse property of the TextLayoutFormat class.
ApplyElementIDOperation@@\t\n|flashx.textLayout.operations|The ChangeElementIDOperation class encapsulates an element ID change.
ApplyElementStyleNameOperation@@\t\n|flashx.textLayout.operations|The ApplyElementStyleNameOperation class encapsulates a style name change.
ApplyElementTypeNameOperation@@\t\n|flashx.textLayout.operations|The ApplyElementTypeNameOperation class encapsulates a type name change.
ApplyElementUserStyleOperation@@\t\n|flashx.textLayout.operations|The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.
ApplyFormatOperation@@\t\n|flashx.textLayout.operations|The ApplyFormatOperation class encapsulates a style change.
ApplyFormatToElementOperation@@\t\n|flashx.textLayout.operations|The ApplyFormatToElementOperation class encapsulates a style change to an element.
ApplyLinkOperation@@\t\n|flashx.textLayout.operations|The ApplyLinkOperation class encapsulates a link creation or modification operation.
ApplyTCYOperation@@\t\n|flashx.textLayout.operations|The ApplyTCYOperation class encapsulates a TCY transformation.
ClearFormatOnElementOperation@@\t\n|flashx.textLayout.operations|The ClearFormatOnElementOperation class encapsulates a style change to an element.
ClearFormatOperation@@\t\n|flashx.textLayout.operations|The ClearFormatOperation class encapsulates a way to undefine formats.
CompositeOperation@@\t\n|flashx.textLayout.operations|The CompositeOperation class encapsulates a group of transformations managed as a unit.
CopyOperation@@\t\n|flashx.textLayout.operations|The CopyOperation class encapsulates a copy operation.
CreateDivOperation@@\t\n|flashx.textLayout.operations|The CreateDivOperation class encapsulates creating DivElement 
CreateListOperation@@\t\n|flashx.textLayout.operations|The CreateListOperation class encapsulates creating list 
CreateSubParagraphGroupOperation@@\t\n|flashx.textLayout.operations|The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement 
CutOperation@@\t\n|flashx.textLayout.operations|The CutOperation class encapsulates a cut operation.
DeleteTextOperation@@\t\n|flashx.textLayout.operations|The DeleteTextOperation class encapsulates the deletion of a range of text.
FlowElementOperation@@\t\n|flashx.textLayout.operations|The FlowElementOperation class is the base class for operations that transform a FlowElement.
FlowOperation@@\t\n|flashx.textLayout.operations|The FlowOperation class is the base class for all Text Layout Framework operations.
FlowTextOperation@@\t\n|flashx.textLayout.operations|The FlowTextOperation is the base class for operations that transform a range of text.
InsertInlineGraphicOperation@@\t\n|flashx.textLayout.operations|The InsertInlineGraphicOperation class encapsulates the insertion of an inline graphic into a text flow.
InsertTextOperation@@\t\n|flashx.textLayout.operations|The InsertTextOperation class encapsulates a text insertion operation.
ModifyInlineGraphicOperation@@\t\n|flashx.textLayout.operations|The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.
MoveChildrenOperation@@\t\n|flashx.textLayout.operations|The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.
PasteOperation@@\t\n|flashx.textLayout.operations|The PasteOperation class encapsulates a paste operation.
RedoOperation@@\t\n|flashx.textLayout.operations|The RedoOperation class encapsulates a redo operation.
SplitElementOperation@@\t\n|flashx.textLayout.operations|The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.
SplitParagraphOperation@@\t\n|flashx.textLayout.operations|The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.
UndoOperation@@\t\n|flashx.textLayout.operations|The UndoOperation class encapsulates an undo operation.
CharacterUtil@@\t\n|flashx.textLayout.utils|Utilities for managing and getting information about characters.
NavigationUtil@@\t\n|flashx.textLayout.utils|Utilities for manipulating a TextRange The methods of this class are static and must be called using the syntax NavigationUtil.method(parameter).
IOperation@@\t\n|flashx.undo|IOperation defines the interface for operations that can be undone and redone.
IUndoManager@@\t\n|flashx.undo|IUndoManager defines the interface for managing the undo and redo stacks.
UndoManager@@\t\n|flashx.undo|The UndoManager class manages the history of editing operations on a text flow so that these operations can be undone and redone.
AccConst@@\t\n|mx.accessibility|The AccConst class defines constants defined in Microsoft's Active Accessibility (MSAA) specification.
AccImpl@@\t\n|mx.accessibility|AccImpl is Flex's base accessibility implementation class for MX and Spark components.
AccordionHeaderAccImpl@@\t\n|mx.accessibility|AccordionHeaderAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the AccordionHeader class.
AdvancedDataGridAccImpl@@\t\n|mx.accessibility|The AdvancedDataGridAccImpl class is the accessibility class for AdvancedDataGrid.
AlertAccImpl@@\t\n|mx.accessibility|AlertAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Alert class.
ButtonAccImpl@@\t\n|mx.accessibility|ButtonAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Button class.
CheckBoxAccImpl@@\t\n|mx.accessibility|CheckBoxAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the CheckBox class.
ColorPickerAccImpl@@\t\n|mx.accessibility|ColorPickerAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the ColorPicker class.
ComboBaseAccImpl@@\t\n|mx.accessibility|ComboBaseAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the ComboBase class.
ComboBoxAccImpl@@\t\n|mx.accessibility|ComboBoxAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the ComboBox class.
DataGridAccImpl@@\t\n|mx.accessibility|DataGridAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the DataGrid class.
DateChooserAccImpl@@\t\n|mx.accessibility|DateChooserAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the DateChooser class.
DateFieldAccImpl@@\t\n|mx.accessibility|DateFieldAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the DateField class.
LabelAccImpl@@\t\n|mx.accessibility|LabelAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Label class.
LinkButtonAccImpl@@\t\n|mx.accessibility|LinkButtonAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the LinkButton class.
ListAccImpl@@\t\n|mx.accessibility|ListAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the List class.
ListBaseAccImpl@@\t\n|mx.accessibility|ListBaseAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the ListBase class.
MenuAccImpl@@\t\n|mx.accessibility|MenuAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Menu class.
MenuBarAccImpl@@\t\n|mx.accessibility|MenuBarAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the MenuBar class.
PanelAccImpl@@\t\n|mx.accessibility|PanelAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Panel class.
RadioButtonAccImpl@@\t\n|mx.accessibility|RadioButtonAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the RadioButton class.
SliderAccImpl@@\t\n|mx.accessibility|SliderAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Slider class.
TabBarAccImpl@@\t\n|mx.accessibility|TabBarAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the TabBar class.
TitleWindowAccImpl@@\t\n|mx.accessibility|TitleWindowAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the TitleWindow class.
TreeAccImpl@@\t\n|mx.accessibility|TreeAccImpl is a subclass of AccessibilityImplementation which implements accessibility for the Tree class.
UIComponentAccProps@@\t\n|mx.accessibility|UIComponentAccProps is a subclass of AccessibilityProperties for use by various UIComponents.
Automation@@\t\n|mx.automation|The Automation class defines the entry point for the Flex Automation framework.
AutomationClass@@\t\n|mx.automation|Provides serializable class information for external automation tools.
AutomationError@@\t\n|mx.automation|The AutomationError class defines the error constants used by the Flex Automation mechanism.
AutomationEventDescriptor@@\t\n|mx.automation|Method descriptor class.
AutomationHelper@@\t\n|mx.automation|Helper class used to call appropriate methods based on whether the current app is an AIR app or a Flex app.
AutomationID@@\t\n|mx.automation|The Flex automation framework uses the AutomationID class to build object identification that Agents can use.
AutomationIDPart@@\t\n|mx.automation|The AutomationIDPart class represents a component instance to agents.
AutomationManager@@\t\n|mx.automation|Provides the interface for manipulating the automation hierarchy, and for recording and replaying events.
AutomationMethodDescriptor@@\t\n|mx.automation|Basic method descriptor class.
AutomationPropertyDescriptor@@\t\n|mx.automation|Describes a property of a test object.
IAutomationClass@@\t\n|mx.automation|The IAutomationClass interface defines the interface for a component class descriptor.
IAutomationClass2@@\t\n|mx.automation|The IAutomationClass2 interface defines the interface for a component class descriptor.
IAutomationDebugTracer@@\t\n|mx.automation|The IAutomationDebugTracer interface provides centralized methods that needs to be implemented in order to show detailed trace messages while debugging 
IAutomationEnvironment@@\t\n|mx.automation|The IAutomationEnvironment interface provides information about the objects and properties of automatable components needed for communicating with agents.
IAutomationEventDescriptor@@\t\n|mx.automation|The IAutomationEventDescriptor interface defines the interface for an event descriptor.
IAutomationManager@@\t\n|mx.automation|The IAutomationManager interface defines the interface expected from an AutomationManager object by the automation module.
IAutomationManager2@@\t\n|mx.automation|The IAutomationManager interface defines the interface expected from an AutomationManager object by the automation module.
IAutomationMethodDescriptor@@\t\n|mx.automation|The IAutomationMethodDescriptor interface defines the interface for a method descriptor.
IAutomationMouseSimulator@@\t\n|mx.automation|The IAutomationMouseSimulator interface describes an object that simulates mouse movement so that components capturing the mouse use the simulated versions of the mouse cursor instead of the live Flash Player version.
IAutomationObject@@\t\n|mx.automation|The IAutomationObject interface defines the interface for a delegate object that implements automation for a component.
IAutomationObjectHelper@@\t\n|mx.automation|The IAutomationObjectHelper interface defines helper methods for IAutomationObjects.
IAutomationPropertyDescriptor@@\t\n|mx.automation|The IAutomationPropertyDescriptor interface describes a property of a test object.
IAutomationTabularData@@\t\n|mx.automation|The IAutomationTabularData interface is implemented by components which can provide their content information in a tabular form.
AirDragManagerAutomationHandler@@\t\n|mx.automation.air|Helper class that provides methods required for automation of drag and drop in AIR applications 
AirFunctionsHelper@@\t\n|mx.automation.air|Helper class that provides methods required for automation of AIR applications 
DragManagerAutomationImpl@@\t\n|mx.automation.delegates|Defines the methods and properties required to perform instrumentation for the DragManager class.
TextFieldAutomationHelper@@\t\n|mx.automation.delegates|Utility class that facilitates replay of text input and selection.
AdvancedDataGridAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the AdvancedDataGrid control.
AdvancedDataGridBaseExAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the AdvancedDataGrid control.
AdvancedDataGridGroupItemRendererAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the AdvancedDataGridGroupItemRenderer class.
AdvancedDataGridItemRendererAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the AdvancedDataGridItemRenderer class.
AdvancedListBaseAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the AdvancedListBase class.
AdvancedListBaseContentHolderAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the AdvancedListBaseContentHolder class.
OLAPDataGridAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the OLAPDataGrid control.
OLAPDataGridGroupRendererAutomationImpl@@\t\n|mx.automation.delegates.advancedDataGrid|Defines methods and properties required to perform instrumentation for the OLAPDataGridGroupRenderer class.
AreaSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the AreaSeries class.
AxisRendererAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the AxisRenderer class.
BarSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the BarSeries class.
BubbleSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the BubbleSeries class.
CartesianChartAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the CartesianChart base class.
ChartBaseAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the ChartBase base class.
ColumnSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the ColumnSeries class.
HLOCSeriesBaseAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the CandlestickSeries and HLOCSeries classes.
LegendAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the Legend class.
LegendItemAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the LegendItem class.
LineSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the LineSeries class.
PieSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the LineSeries class.
PlotSeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the PlotSeries class.
SeriesAutomationImpl@@\t\n|mx.automation.delegates.charts|Defines the methods and properties required to perform instrumentation for the Series base class.
AccordionAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Accordion class.
ApplicationAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Application class.
BoxAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Box class.
CanvasAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Canvas class.
DividedBoxAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the DividedBox class.
FormAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Form class.
FormItemAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the FormItem class.
PanelAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Panel class.
TabNavigatorAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the TabNavigator class.
ViewStackAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the ViewStack class.
WindowedApplicationAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Canvas class.
WindowsAutomationImpl@@\t\n|mx.automation.delegates.containers|Defines the methods and properties required to perform instrumentation for the Canvas class.
AlertAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Alert control.
AlertFormAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the AlertForm class.
ButtonAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Button control.
ButtonBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ButtonBar control.
CheckBoxAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the CheckBox control.
ColorPickerAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ColorPicker control.
ComboBaseAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ComboBase class.
ComboBoxAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ComboBox control.
DataGridAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the DataGrid control.
DataGridItemRendererAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the DataGridItemRenderer class.
DateChooserAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the DateChooser control.
DateFieldAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the DateField control.
FileSystemTreeAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Tree control.
FlexNativeMenuAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Flex Native Menu.
LabelAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Label control.
LinkBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the LinkBar control.
ListAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the List control.
ListBaseAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ListBase class.
ListBaseContentHolderAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ListBaseContentHolder class.
ListItemRendererAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ListItemRenderer class.
MenuAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Menu control.
MenuBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the MenuBar control.
MenuBarItemAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the MenuBarItem class.
MenuItemRendererAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the MenuItemRenderer class.
NavBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the NavBar control.
NumericStepperAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the NumericStepper control.
PopUpButtonAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the PopUpButton control.
ProgressBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ProgressBar control.
RadioButtonAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the RadioButton control.
ScrollBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ScrollBar class.
SliderAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Slider class, which is the parent of the HSlider and VSlider classes.
SWFLoaderAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the SWFLoader control.
TextAreaAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the TextArea control.
TextInputAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the TextInput control.
TileBaseAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the TileBase class, which is the parent of the TileList component.
TileListItemRendererAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the TileListItemRenderer class.
ToggleButtonBarAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ToggleButtonBar control.
ToolTipAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the ToolTip control.
TreeAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the Tree control.
TreeItemRendererAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the TreeItemRenderer class.
VideoDisplayAutomationImpl@@\t\n|mx.automation.delegates.controls|Defines methods and properties required to perform instrumentation for the VideoDisplay control.
FTEDataGridItemRendererAutomationImpl@@\t\n|mx.automation.delegates.controls.dataGridClasses|Defines methods and properties required to perform instrumentation for the FTEDataGridItemRenderer class.
FileSystemDataGridNameColumnRendererAutomationImpl@@\t\n|mx.automation.delegates.controls.fileSystemClasses|Defines methods and properties required to perform instrumentation for the DataGridItemRenderer class.
ContainerAutomationImpl@@\t\n|mx.automation.delegates.core|Defines the methods and properties required to perform instrumentation for the Container class.
RepeaterAutomationImpl@@\t\n|mx.automation.delegates.core|Defines the methods and properties required to perform instrumentation for the Repeater class.
ScrollControlBaseAutomationImpl@@\t\n|mx.automation.delegates.core|Defines the methods and properties required to perform instrumentation for the ScrollControlBase class.
UIComponentAutomationImpl@@\t\n|mx.automation.delegates.core|Defines the methods and properties required to perform instrumentation for the UIComponent class.
UIFTETextFieldAutomationImpl@@\t\n|mx.automation.delegates.core|Defines the methods and properties required to perform instrumentation for the UIFTETextField class.
UITextFieldAutomationImpl@@\t\n|mx.automation.delegates.core|Defines the methods and properties required to perform instrumentation for the UITextField class.
ContainerMovieClipAutomationImpl@@\t\n|mx.automation.delegates.flashflexkit|Defines methods and properties required to perform instrumentation for the ContainerMovieClip control.
FlexContentHolderAutomationImpl@@\t\n|mx.automation.delegates.flashflexkit|Defines methods and properties required to perform instrumentation for the FlexContentHolder control.
UIMovieClipAutomationImpl@@\t\n|mx.automation.delegates.flashflexkit|Defines methods and properties required to perform instrumentation for the UIMovieclip control.
AdvancedDataGridHeaderShiftEvent@@\t\n|mx.automation.events|The AdvancedDataGridHeaderShiftEvent class represents event objects that are dispatched when an AdvancedDataGrid control's header item is shifted.
AdvancedDataGridItemSelectEvent@@\t\n|mx.automation.events|The AdvancedDataGridItemSelectEvent class represents event objects that are dispatched when an item in the header of an AdvancedDataGrid control is selected or deselected.
AutomationAirEvent@@\t\n|mx.automation.events|The AutomationAirEvent class represents event objects that are dispatched by the AutomationManager.
AutomationDragEvent@@\t\n|mx.automation.events|The AutomationDragEvent class represents event objects that are dispatched as part of a drag-and-drop operation.
AutomationDragEventWithPositionInfo@@\t\n|mx.automation.events|The AutomationDragEventWithPositionInfo class represents event objects that are dispatched as part of a drag-and-drop operation.
AutomationEvent@@\t\n|mx.automation.events|The AutomationEvent class represents event objects that are dispatched by the AutomationManager.
AutomationFlexNativeMenuEvent@@\t\n|mx.automation.events|The AutomationFlexNativeEvent class represents event objects that are dispatched as part of a flexnativemenu selection operation.
AutomationRecordEvent@@\t\n|mx.automation.events|The AutomationRecordEvent class represents event objects that are dispatched by the AutomationManager.
AutomationReplayEvent@@\t\n|mx.automation.events|The AutomationReplayEvent class represents event objects that are dispatched by the AutomationManager, and used by the functional testing classes and any other classes that must replay user interactions.
ChartSelectionChangeEvent@@\t\n|mx.automation.events|The ListItemSelectEvent class represents event objects that are dispatched when an item in a list-based control such as a Menu, DataGrid, or Tree control is selected or deselected.
EventDetails@@\t\n|mx.automation.events|Holds the details of an event like its type, handler etc...
ListItemSelectEvent@@\t\n|mx.automation.events|The ListItemSelectEvent class represents event objects that are dispatched when an item in a list-based control such as a Menu, DataGrid, or Tree control is selected or deselected.
MarshalledAutomationEvent@@\t\n|mx.automation.events|The MarshalledAutomationEvents class represents event objects that are dispatched by the AutomationManager.This represents the marshalling related events.
MenuShowEvent@@\t\n|mx.automation.events|The MenuShowEvent class represents events that are associated with menuBar.
TextSelectionEvent@@\t\n|mx.automation.events|The TextSelectionEvent class lets you track selection within a text field.
IBindingClient@@\t\n|mx.binding|This is used to mark documents, which have data bindings.
BindingUtils@@\t\n|mx.binding.utils|The BindingUtils class defines utility methods for performing data binding from ActionScript.
ChangeWatcher@@\t\n|mx.binding.utils|The ChangeWatcher class defines utility methods that you can use with bindable Flex properties.
AreaChart@@\t\n|mx.charts|The AreaChart control represents data as an area bounded by a line connecting the values in the data.
AxisLabel@@\t\n|mx.charts|An AxisLabel object represents a single label on the chart axis.
AxisRenderer@@\t\n|mx.charts|You use the AxisRenderer class to describe the horizontal and vertical axes of a chart.
BarChart@@\t\n|mx.charts|The BarChart control represents data as a series of horizontal bars whose length is determined by values in the data.
BubbleChart@@\t\n|mx.charts|The BubbleChart control represents data with three values for each data point.
CandlestickChart@@\t\n|mx.charts|The CandlestickChart control represents financial data as a series of candlesticks representing the high, low, opening, and closing values of a data series.
CategoryAxis@@\t\n|mx.charts|The CategoryAxis class lets charts represent data grouped by a set of discrete values along an axis.
ChartItem@@\t\n|mx.charts|A ChartItem represents a single item in a ChartSeries.
ColumnChart@@\t\n|mx.charts|The ColumnChart control represents data as a series of vertical columns whose height is determined by values in the data.
DateTimeAxis@@\t\n|mx.charts|The DateTimeAxis class maps time values evenly between a minimum and maximum value along a chart axis.
GridLines@@\t\n|mx.charts|The GridLines class draws grid lines inside the data area of the chart.
HitData@@\t\n|mx.charts|The HitData class represents information about the data item at a specific location on the screen.
HLOCChart@@\t\n|mx.charts|The HLOCChart (High Low Open Close) control represents financial data as a series of elements representing the high, low, closing, and optionally opening values of a data series.
Legend@@\t\n|mx.charts|The Legend control adds a legend to your charts, where the legend displays the label for each data series in the chart and a key showing the chart element for the series.
LegendItem@@\t\n|mx.charts|Controls the individual legend elements in a chart legend.
LinearAxis@@\t\n|mx.charts|The LinearAxis class maps numeric values evenly between a minimum and maximum value along a chart axis.
LineChart@@\t\n|mx.charts|The LineChart control represents a data series as points connected by a continuous line.
LogAxis@@\t\n|mx.charts|The LogAxis class maps numeric values logarithmically between a minimum and maximum value along a chart axis.
PieChart@@\t\n|mx.charts|The PieChart control represents a data series as a standard pie chart.
PlotChart@@\t\n|mx.charts|The PlotChart control represents data with two values for each data point.
AxisBase@@\t\n|mx.charts.chartClasses|The AxisBase class serves as a base class for the various axis types supported in Flex.
AxisLabelSet@@\t\n|mx.charts.chartClasses|An AxisLabelSet represents the label and tick data generated by an implementation of IAxis.
BoundedValue@@\t\n|mx.charts.chartClasses|A bounded value is used to represent a datapoint that a chart element intends to render on screen.
CartesianCanvasValue@@\t\n|mx.charts.chartClasses|Defines the position of objects on a data canvas.
CartesianChart@@\t\n|mx.charts.chartClasses|The CartesianChart class is a base class for the common chart types.
CartesianDataCanvas@@\t\n|mx.charts.chartClasses|This class lets you use add graphical elements such as lines, ellipses, and other shapes by using a graphics API.
CartesianTransform@@\t\n|mx.charts.chartClasses|The CartesianTransform object represents a set of axes that maps data values to x/y Cartesian screen coordinates and vice versa.
ChartBase@@\t\n|mx.charts.chartClasses|The ChartBase class is the link between the Flex component architecture and the DualStyleObject architecture.
ChartElement@@\t\n|mx.charts.chartClasses|The ChartElement class is the base class for visual chart elements.
ChartItemDragProxy@@\t\n|mx.charts.chartClasses|The default drag proxy used when dragging items from a chart control.
ChartLabel@@\t\n|mx.charts.chartClasses|Draws data labels on chart controls.
ChartState@@\t\n|mx.charts.chartClasses|Describes the current state of a chart.
DataDescription@@\t\n|mx.charts.chartClasses|The DataDescription structure is used by ChartElements to describe the characteristics of the data they represent to Axis objects that auto-generate values from the data represented in the chart.
DataTip@@\t\n|mx.charts.chartClasses|The DataTip control provides information about a data point to chart users.
DataTransform@@\t\n|mx.charts.chartClasses|The DataTransform object represents a portion of a chart that contains glyphs and can transform values to screen coordinates and vice versa.
DateRangeUtilities@@\t\n|mx.charts.chartClasses|A set of disabled date range utilities used by DateTimeAxis 
DualStyleObject@@\t\n|mx.charts.chartClasses|The DualStyleObject class serves as a base class for components that have a need to assign class selectors outside of the client developer's control.
GraphicsUtilities@@\t\n|mx.charts.chartClasses|A set of internal graphics rendering utilities used by the various chart classes.
HLOCSeriesBase@@\t\n|mx.charts.chartClasses|HLOCSeriesBase is the base class for the two financial series types, HLOCSeries and CandlestickSeries.
IAxis@@\t\n|mx.charts.chartClasses|The IAxis class is an abstract interface for defining label, tick mark, and data positioning properties for a chart axis.
IAxisRenderer@@\t\n|mx.charts.chartClasses|The IAxis class is an abstract interface for defining label, tick mark, and data positioning properties for a chart axis.
IBar@@\t\n|mx.charts.chartClasses|The IBar interface is implemented by any any series that can be clustered vertically, such as a BarSeries.
IChartElement@@\t\n|mx.charts.chartClasses|IChartElement defines the base set of properties and methods required by a UIComponent to be representable in the data space of a chart.
IChartElement2@@\t\n|mx.charts.chartClasses|IChartElement2 defines the base set of properties and methods required by a UIComponent to be representable in the data space of a chart.
IColumn@@\t\n|mx.charts.chartClasses|ChartElements that can be clustered along the vertical axis should implement this interface.
IDataCanvas@@\t\n|mx.charts.chartClasses|This interface is for internal use only.
InstanceCache@@\t\n|mx.charts.chartClasses|InstanceCache is a utility that governs the task of creating and managing a set of n object instances, where n changes frequently.
IStackable@@\t\n|mx.charts.chartClasses|The IStackable interface is implemented by any series that can be stacked.
IStackable2@@\t\n|mx.charts.chartClasses|The IStackable2 interface is implemented by any series that can be stacked.
LegendData@@\t\n|mx.charts.chartClasses|The LegendData structure is used by charts to describe the items that should be displayed in an auto-generated legend.
NumericAxis@@\t\n|mx.charts.chartClasses|The NumericAxis class acts as a common base class for axis types representing a continuous range of values between a defined minimum and maximum.
PolarChart@@\t\n|mx.charts.chartClasses|The PolarChart control serves as base class for circular charts based in polar coordinates.
PolarDataCanvas@@\t\n|mx.charts.chartClasses|PolarDataCanvas class enables user to use graphics API with respect to data coordinates instead of screen coordinates.
PolarTransform@@\t\n|mx.charts.chartClasses|The PolarTransform object represents a set of axes used to map data values to angle/distance polar coordinates and vice versa.
RenderData@@\t\n|mx.charts.chartClasses|RenderData structures are used by chart elements to store all of the relevant values and data needed to fully render the chart.
Series@@\t\n|mx.charts.chartClasses|The Series class is the base class for the classes that let you specify a data series for a chart control.
StackedSeries@@\t\n|mx.charts.chartClasses|Stacked Series serves as the common base class for all of the stacking set series (BarSet, ColumnSet, and AreaSet).
SeriesEffect@@\t\n|mx.charts.effects|The base class for chart effects.
SeriesInterpolate@@\t\n|mx.charts.effects|The SeriesInterpolate effect moves the graphics that represent the existing data in a series to the new points.
SeriesSlide@@\t\n|mx.charts.effects|The SeriesSlide effect slides a data series into and out of the chart's boundaries.
SeriesZoom@@\t\n|mx.charts.effects|The SeriesZoom effect implodes and explodes chart data into and out of the focal point that you specify.
SeriesEffectInstance@@\t\n|mx.charts.effects.effectClasses|The SeriesEffectInstance class implements the base instance class for the chart series effects.
SeriesInterpolateInstance@@\t\n|mx.charts.effects.effectClasses|The SeriesInterpolateInstance class implements the instance class for the SeriesInterpolate effect.
SeriesSlideInstance@@\t\n|mx.charts.effects.effectClasses|The SeriesSlideInstance class implements the instance class for the SeriesSlide effect.
SeriesZoomInstance@@\t\n|mx.charts.effects.effectClasses|The SeriesZoomInstance class implements the instance class for the SeriesZoom effect.
ChartEvent@@\t\n|mx.charts.events|The ChartEvent class represents events that are specific to the chart control, such as when a chart is clicked.
ChartItemEvent@@\t\n|mx.charts.events|The ChartItemEvent class represents events that are specific to the chart components, such as when a chart item is clicked.
LegendMouseEvent@@\t\n|mx.charts.events|The LegendMouseEvent class represents event objects that are specific to the chart legend components.
AreaRenderer@@\t\n|mx.charts.renderers|The default class used to render the area beneath the dataPoints of an AreaSeries object.
BoxItemRenderer@@\t\n|mx.charts.renderers|A simple chart itemRenderer implementation that fills a rectangular area.
CandlestickItemRenderer@@\t\n|mx.charts.renderers|The default itemRenderer for a CandlestickSeries object.
CircleItemRenderer@@\t\n|mx.charts.renderers|A simple chart itemRenderer implementation that fills an elliptical area.
CrossItemRenderer@@\t\n|mx.charts.renderers|A simple chart itemRenderer implementation that fills a cross in its assigned area.
DiamondItemRenderer@@\t\n|mx.charts.renderers|A simple chart itemRenderer implementation that fills a diamond in its assigned area.
HLOCItemRenderer@@\t\n|mx.charts.renderers|The default item renderer for an HLOCSeries object.
LineRenderer@@\t\n|mx.charts.renderers|A simple implementation of a line segment renderer that is used by LineSeries objects.
ShadowBoxItemRenderer@@\t\n|mx.charts.renderers|A simple chart itemRenderer implementation that fills a rectangular area and surrounds it with a drop shadow.
ShadowLineRenderer@@\t\n|mx.charts.renderers|An implementation of a line segment renderer that is used by LineSeries objects.
TriangleItemRenderer@@\t\n|mx.charts.renderers|A simple chart itemRenderer implementation that fills an upright triangle in its assigned area.
WedgeItemRenderer@@\t\n|mx.charts.renderers|The default itemRenderer for a PieSeries object.
AreaSeries@@\t\n|mx.charts.series|Defines a data series for an AreaChart control.
AreaSet@@\t\n|mx.charts.series|A grouping set that can be used to stack AreaSeries objects in any chart.
BarSeries@@\t\n|mx.charts.series|Defines a data series for a BarChart control.
BarSet@@\t\n|mx.charts.series|A grouping set that can be used to stack or cluster BarSeries objects in any chart.
BubbleSeries@@\t\n|mx.charts.series|Defines a data series for a BubbleChart control.
CandlestickSeries@@\t\n|mx.charts.series|Represents financial data as a series of candlesticks representing the high, low, opening, and closing values of a data series.
ColumnSeries@@\t\n|mx.charts.series|Defines a data series for a ColumnChart control.
ColumnSet@@\t\n|mx.charts.series|ColumnSet is a grouping set that can be used to stack or cluster column series in any arbitrary chart.
HLOCSeries@@\t\n|mx.charts.series|Represents financial data as a series of elements representing the high, low, closing, and, optionally, opening values of a data series.
LineSeries@@\t\n|mx.charts.series|Defines a data series for a LineChart control.
PieSeries@@\t\n|mx.charts.series|The PieSeries class defines the data series for a PieChart control.
PlotSeries@@\t\n|mx.charts.series|Defines a data series for a PlotChart control.
AreaSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of an AreaSeries.
BarSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of a BarSeries.
BubbleSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of a BubbleSeries.
ColumnSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of a ColumnSeries.
HLOCSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of a HLOCSeries.
LineSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of a LineSeries.
LineSeriesSegment@@\t\n|mx.charts.series.items|Represents the information required to render a segment in a LineSeries.
PieSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render a single wedge as part of a PieSeries.
PlotSeriesItem@@\t\n|mx.charts.series.items|Represents the information required to render an item as part of a PlotSeries.
AreaSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the AreaSeries to render.
BarSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the BarSeries to render.
BubbleSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the BubbleSeries to render.
ColumnSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the ColumnSeries to render.
HLOCSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the HLOCSeries and CandlestickSeries objects to render.
LineSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the LineSeries to render.
PieSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the PieSeries to render.
PlotSeriesRenderData@@\t\n|mx.charts.series.renderData|Represents all the information needed by the PlotSeries to render.
HaloDefaults@@\t\n|mx.charts.styles|Initializes the core default styles for the charts classes.
ArrayCollection@@\t\n|mx.collections|The ArrayCollection class is a wrapper class that exposes an Array as a collection that can be accessed and manipulated using the methods and properties of the ICollectionView or IList interfaces.
ArrayList@@\t\n|mx.collections|The ArrayList class is a simple implementation of IList that uses a backing Array as the source of the data.
AsyncListView@@\t\n|mx.collections|The AsyncListView class is an implementation of the IList interface that handles ItemPendingErrors errors thrown by the getItemAt(), removeItemAt(), and toArray() methods.
CursorBookmark@@\t\n|mx.collections|Encapsulates the positional aspects of a cursor in an ICollectionView.
DefaultSummaryCalculator@@\t\n|mx.collections|The DefaultSummaryCalculator class provides summary calculation logic for SUM, MIN, MAX, AVG, and COUNT operations.
Grouping@@\t\n|mx.collections|The Grouping class defines the fields in the data provider of the AdvancedDataGrid control used to group data.
GroupingCollection@@\t\n|mx.collections|The GroupingCollection class lets you create grouped data from flat data for display in the AdvancedDataGrid control.
GroupingCollection2@@\t\n|mx.collections|The GroupingCollection2 class lets you create grouped data from flat data for display in the AdvancedDataGrid control.
GroupingField@@\t\n|mx.collections|The GroupingField class represents individual data fields that you use to group flat data for display by the AdvancedDataGrid control.
HierarchicalCollectionView@@\t\n|mx.collections|The HierarchicalCollectionView class provides a hierarchical view of a standard collection.
HierarchicalCollectionViewCursor@@\t\n|mx.collections|The HierarchicalCollectionViewCursor class defines a cursor for a hierarchical view of a standard collection.
HierarchicalData@@\t\n|mx.collections|Hierarchical data is data already in a structure of parent and child data items.
ICollectionView@@\t\n|mx.collections|An ICollectionView is a view onto a collection of data.
IGroupingCollection@@\t\n|mx.collections|The IGroupingCollection interface defines the interface required to create grouped data from flat data.
IGroupingCollection2@@\t\n|mx.collections|The IGroupingCollection2 interface defines the interface required to create grouped data from flat data.
IHierarchicalCollectionView@@\t\n|mx.collections|The IHierarchicalCollectionView interface defines an interface for hierarchical or grouped data.
IHierarchicalCollectionViewCursor@@\t\n|mx.collections|The IHierarchicalCollectionViewCursor interface defines the interface for enumerating a hierarchical collection view bidirectionally.
IHierarchicalData@@\t\n|mx.collections|The IHierarchicalData interface defines the interface used to represent hierarchical data as the data provider for a Flex component.
IList@@\t\n|mx.collections|A collection of items organized in an ordinal fashion.
ISort@@\t\n|mx.collections|The ISort interface defines the interface for classes that provide the sorting information required to sort the data of a collection view.
ISortField@@\t\n|mx.collections|The ISortField interface defines the interface for classes that are used with ISort classes, to provide the sorting information required to sort the specific fields or property in a collection view.
ISummaryCalculator@@\t\n|mx.collections|The ISummaryCalculator interface defines the interface implemented by custom summary calculator classes.
ItemResponder@@\t\n|mx.collections|The ItemResponder class provides a default implementation of the mx.rpc.IResponder interface.
IViewCursor@@\t\n|mx.collections|Defines the interface for enumerating a collection view bi-directionally.
ListCollectionView@@\t\n|mx.collections|The ListCollectionView class adds the properties and methods of the ICollectionView interface to an object that conforms to the IList interface.
Sort@@\t\n|mx.collections|Provides the sorting information required to establish a sort on an existing view (ICollectionView interface or class that implements the interface).
SortField@@\t\n|mx.collections|Provides the sorting information required to establish a sort on a field or property in a collection view.
SummaryField@@\t\n|mx.collections|The SummaryField class represents a single property in a SummaryRow instance.
SummaryField2@@\t\n|mx.collections|The SummaryField2 class represents a single property in a SummaryRow instance.
SummaryObject@@\t\n|mx.collections|The SummaryObject class defines the object used to store information when performing custom data summaries on grouped data.
SummaryRow@@\t\n|mx.collections|The SummaryRow class represents a summary row of the AdvancedDataGrid.
XMLListCollection@@\t\n|mx.collections|The XMLListCollection class provides collection functionality to an XMLList object and makes available some of the methods of the native XMLList class.
ChildItemPendingError@@\t\n|mx.collections.errors|This error is thrown when retrieving a child item from a collection view requires an asynchronous call.
CollectionViewError@@\t\n|mx.collections.errors|The CollectionViewError class represents general errors within a collection that are not related to specific activities such as Cursor seeking.
CursorError@@\t\n|mx.collections.errors|This error is thrown by a collection Cursor.
ItemPendingError@@\t\n|mx.collections.errors|This error is thrown when retrieving an item from a collection view requires an asynchronous call.
SortError@@\t\n|mx.collections.errors|This error is thrown when a Sort class is not configured properly; for example, if the find criteria are invalid.
Accordion@@\t\n|mx.containers|An MX Accordion navigator container has a collection of child MX containers or Spark NavigatorContent containers, but only one of them at a time is visible.
ApplicationControlBar@@\t\n|mx.containers|The ApplicationControlBar container holds components that provide global navigation and application commands For the Halo Application container.
Box@@\t\n|mx.containers|A Halo Box container lays out its children in a single vertical column or a single horizontal row.
BoxDirection@@\t\n|mx.containers|The BoxDirection class specifies constant values for the direction property of the Box container.
Canvas@@\t\n|mx.containers|A Halo Canvas layout container defines a rectangular region in which you place child containers and controls.
ControlBar@@\t\n|mx.containers|The ControlBar container lets you place controls at the bottom of a Halo Panel or Halo TitleWindow container.
DividedBox@@\t\n|mx.containers|A DividedBox container measures and lays out its children horizontally or vertically in exactly the same way as a Box container, but it inserts draggable dividers in the gaps between the children.
Form@@\t\n|mx.containers|The Form container lets you control the layout of a form, mark form fields as required or optional, handle error messages, and bind your form data to the Flex data model to perform data checking and validation.
FormHeading@@\t\n|mx.containers|The FormHeading container is used to display a heading for a group of controls inside a Form container.
FormItem@@\t\n|mx.containers|The FormItem container defines a label and one or more children arranged horizontally or vertically.
FormItemDirection@@\t\n|mx.containers|The FormItemDirection class defines the constant values for the direction property of the FormItem class.
Grid@@\t\n|mx.containers|A Grid container lets you arrange children as rows and columns of cells, similar to an HTML table.
GridItem@@\t\n|mx.containers|The GridItem container defines a grid cell in GridRow container.
GridRow@@\t\n|mx.containers|The GridRow container defines a row in a Grid container, and contains GridCell containers.
HBox@@\t\n|mx.containers|The Halo HBox container lays out its children in a single horizontal row.
HDividedBox@@\t\n|mx.containers|The HDividedBox container lays out its children horizontally in the same way as HBox container, but it inserts a draggable divider in the gap between each child.
Panel@@\t\n|mx.containers|A Halo Panel container consists of a title bar, a caption, a border, and a content area for its children.
TabNavigator@@\t\n|mx.containers|The MX TabNavigator container extends the MX ViewStack container by including a TabBar container for navigating between its child containers.
Tile@@\t\n|mx.containers|A Halo Tile container lays out its children in a grid of equal-sized cells.
TileDirection@@\t\n|mx.containers|The TileDirection class defines the constant values for the direction property of the Tile container.
TitleWindow@@\t\n|mx.containers|A TitleWindow layout container contains a title bar, a caption, a border, and a content area for its child.
VBox@@\t\n|mx.containers|The Halo VBox container lays out its children in a single vertical column.
VDividedBox@@\t\n|mx.containers|The VDividedBox container lays out its children vertically in the same way as the VBox container, but it inserts a draggable divider in the gap between each child.
ViewStack@@\t\n|mx.containers|An MX ViewStack navigator container consists of a collection of child containers stacked on top of each other, where only one child at a time is visible.
AccordionHeader@@\t\n|mx.containers.accordionClasses|The AccordionHeader class defines the appearance of the navigation buttons of an Accordion.
BoxDivider@@\t\n|mx.containers.dividedBoxClasses|The BoxDivider class represents the divider between children of a DividedBox container.
ConstraintError@@\t\n|mx.containers.errors|This error is thrown when a constraint expression is not configured properly; for example, if the GridColumn reference is invalid.
ConstraintColumn@@\t\n|mx.containers.utilityClasses|The ConstraintColumn class partitions an absolutely positioned container in the vertical plane.
ConstraintRow@@\t\n|mx.containers.utilityClasses|ConstraintRow class partitions an absolutely positioned container in the horizontal plane.
IConstraintLayout@@\t\n|mx.containers.utilityClasses|IConstraintLayout is a marker interface that indicates that a container supports ConstraintColumn class and ConstraintRow class within its layout.
PostScaleAdapter@@\t\n|mx.containers.utilityClasses|The PostScaleAdapter class is used as a compatibility layer for Flex 3 classes that rely on width, height, min, max, explicit, measured, and other properties to be determined after scaling is applied.
AdvancedDataGrid@@\t\n|mx.controls|The AdvancedDataGrid control expands on the functionality of the standard DataGrid control to add data visualization features to your Adobe Flex application.
AdvancedDataGridBaseEx@@\t\n|mx.controls|The AdvancedDataGridBaseEx class is a base class of the AdvancedDataGrid control.
Alert@@\t\n|mx.controls|The Alert control is a pop-up dialog box that can contain a message, a title, buttons (any combination of OK, Cancel, Yes, and No) and an icon.
Button@@\t\n|mx.controls|The Button control is a commonly used rectangular button.
ButtonBar@@\t\n|mx.controls|The ButtonBar control defines a horizontal or vertical group of logically related push buttons with a common look and navigation.
ButtonLabelPlacement@@\t\n|mx.controls|The ButtonLabelPlacement class defines the constants for the allowed values of the labelPlacement property of a Button, CheckBox, LinkButton, or RadioButton control.
CheckBox@@\t\n|mx.controls|The CheckBox control consists of an optional label and a small box that can contain a check mark or not.
ColorPicker@@\t\n|mx.controls|The ColorPicker control provides a way for a user to choose a color from a swatch list.
ComboBase@@\t\n|mx.controls|The ComboBase class is the base class for controls that display text in a text field and have a button that causes a drop-down list to appear where the user can choose which text to display.
ComboBox@@\t\n|mx.controls|The ComboBox control contains a drop-down list from which the user can select a single value.
DataGrid@@\t\n|mx.controls|The DataGrid control is like a List except that it can show more than one column of data making it suited for showing objects with multiple properties.
DateChooser@@\t\n|mx.controls|The DateChooser control displays the name of a month, the year, and a grid of the days of the month, with columns labeled for the day of the week.
DateField@@\t\n|mx.controls|The DateField control is a text field that shows the date with a calendar icon on its right side.
FileSystemComboBox@@\t\n|mx.controls|The FileSystemComboBox control defines a combo box control for navigating up the chain of ancestor directories from a specified directory in a file system.
FileSystemDataGrid@@\t\n|mx.controls|The FileSystemDataGrid control lets you display the contents of a single file system directory in a data grid format.
FileSystemEnumerationMode@@\t\n|mx.controls|The FileSystemEnumerationMode class defines the constant values for the enumerationMode property of the FileSystemList, FileSystemDataGrid, and FileSystemTree classes.
FileSystemHistoryButton@@\t\n|mx.controls|The FileSystemHistoryButton control defines a single control with two buttons: a main button on the left and a secondary button on the right.
FileSystemList@@\t\n|mx.controls|The FileSystemList control lets you display the contents of a single file system directory, in a list format.
FileSystemSizeDisplayMode@@\t\n|mx.controls|The FileSystemSizeDisplayMode class defines the constant values for the sizeDisplayMode property of the FileSystemDataGrid class.
FileSystemTree@@\t\n|mx.controls|The FileSystemTree control displays the contents of a file system directory as a tree.
FlexNativeMenu@@\t\n|mx.controls|The FlexNativeMenu component provides a wrapper for AIR's NativeMenu class.
FormItemLabel@@\t\n|mx.controls|The FormItem container uses a FormItemLabel object to display the label portion of the FormItem container.
HorizontalList@@\t\n|mx.controls|The HorizontalList control displays a horizontal list of items.
HRule@@\t\n|mx.controls|The HRule control creates a single horizontal line.
HScrollBar@@\t\n|mx.controls|The HScrollBar (horizontal ScrollBar) control lets you control the portion of data that is displayed when there is too much data to fit in a display area.
HSlider@@\t\n|mx.controls|The HSlider control lets users select a value by moving a slider thumb between the end points of the slider track.
HTML@@\t\n|mx.controls|The HTML control lets you display HTML content in your application.
IFlexContextMenu@@\t\n|mx.controls|The IFlexContextMenu interface defines the interface for a Flex context menus.
Image@@\t\n|mx.controls|The Image control lets you import JPEG, PNG, GIF, and SWF files at runtime.
Label@@\t\n|mx.controls|The Label control displays a single line of noneditable text.
LinkBar@@\t\n|mx.controls|A LinkBar control defines a horizontal or vertical row of LinkButton controls that designate a series of link destinations.
LinkButton@@\t\n|mx.controls|The LinkButton control is a borderless Button control whose contents are highlighted when a user moves the mouse over it.
List@@\t\n|mx.controls|The List control displays a vertical list of items.
Menu@@\t\n|mx.controls|The Menu control creates a pop-up menu of individually selectable choices, similar to the File or Edit menu found in most software applications.
MenuBar@@\t\n|mx.controls|A MenuBar control defines a horizontal, top-level menu bar that contains one or more menus.
MovieClipSWFLoader@@\t\n|mx.controls|The MovieClipSWFLoader control extends SWFLoader to provide convenience methods for manipulating a SWF which has a MovieClip as its root content, provided that the MovieClip is not a Flex application.
MXFTETextInput@@\t\n|mx.controls|MXFTETextInput is a UIComponent which is used to support TLF text in MX controls and data grid renderers.
NavBar@@\t\n|mx.controls|The NavBar control is the superclass for navigator controls, such as the LinkBar and TabBar controls, and cannot be instantiated directly.
NumericStepper@@\t\n|mx.controls|The NumericStepper control lets the user select a number from an ordered set.
OLAPDataGrid@@\t\n|mx.controls|The OLAPDataGrid control expands on the functionality of the AdvancedDataGrid control to add support for the display of the results of OLAP queries.
PopUpButton@@\t\n|mx.controls|The PopUpButton control adds a flexible pop-up control interface to a Button control.
PopUpMenuButton@@\t\n|mx.controls|The PopUpMenuButton control creates a PopUpButton control with a main sub-button and a secondary sub-button.
ProgressBar@@\t\n|mx.controls|The ProgressBar control provides a visual representation of the progress of a task over time.
ProgressBarDirection@@\t\n|mx.controls|The ProgressBarDirection class defines the values for the direction property of the ProgressBar class.
ProgressBarLabelPlacement@@\t\n|mx.controls|The ProgressBarLabelPlacement class defines the values for the labelPlacement property of the ProgressBar class.
ProgressBarMode@@\t\n|mx.controls|The ProgressBarMode class defines the values for the mode property of the ProgressBar class.
RadioButton@@\t\n|mx.controls|The RadioButton control lets the user make a single choice within a set of mutually exclusive choices.
RadioButtonGroup@@\t\n|mx.controls|The RadioButtonGroup control defines a group of RadioButton controls that act as a single mutually exclusive control; therefore, a user can select only one RadioButton control at a time.
RichTextEditor@@\t\n|mx.controls|The RichTextEditor control lets users enter and format text.
Spacer@@\t\n|mx.controls|The Spacer control helps you lay out children within a parent container.
SWFLoader@@\t\n|mx.controls|The SWFLoader control loads and displays a specified SWF file.
TabBar@@\t\n|mx.controls|The TabBar control lets you create a horizontal or vertical group of tab navigation items by defining the labels and data associated with each tab.
Text@@\t\n|mx.controls|The Text control displays multiline, noneditable text.
TextArea@@\t\n|mx.controls|The TextArea control is a multiline text field with a border and optional scroll bars.
TextInput@@\t\n|mx.controls|The TextInput control is a single-line text field that is optionally editable.
TileList@@\t\n|mx.controls|The TileList control displays a number of items laid out in tiles.
ToggleButtonBar@@\t\n|mx.controls|The ToggleButtonBar control defines a horizontal or vertical group of buttons that maintain their selected or deselected state.
ToolTip@@\t\n|mx.controls|The ToolTip control lets you provide helpful information to your users.
Tree@@\t\n|mx.controls|The Tree control lets a user view hierarchical data arranged as an expandable tree.
VideoDisplay@@\t\n|mx.controls|The VideoDisplay control lets you play an FLV file in a Flex application.
VRule@@\t\n|mx.controls|The VRule control creates a single vertical line.
VScrollBar@@\t\n|mx.controls|The VScrollBar (vertical ScrollBar) control lets you control the portion of data that is displayed when there is too much data to fit in a display area.
VSlider@@\t\n|mx.controls|The VSlider control lets users select a value by moving a slider thumb between the end points of the slider track.
AdvancedDataGridBase@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridBase class is the base class for controls that display lists of items in multiple columns, such as the AdvancedDataGrid and OLAPDataGrid controls.
AdvancedDataGridBaseSelectionData@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridBaseSelectionData class defines a data structure used by the advanced data grid classes to track selected cells in the AdvancedDataGrid control.
AdvancedDataGridColumn@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridColumn class describes a column in an AdvancedDataGrid control.
AdvancedDataGridColumnGroup@@\t\n|mx.controls.advancedDataGridClasses|Use the AdvancedDataGridColumnGroup class to specify column groups for the AdvancedDataGrid control.
AdvancedDataGridDragProxy@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridDragProxy class defines the default drag proxy used when dragging data from an AdvancedDataGrid control.
AdvancedDataGridGroupItemRenderer@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridGroupItemRenderer class defines the default item renderer for the nodes of the navigation tree.
AdvancedDataGridHeaderInfo@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridHeaderInfo class contains information that describes the hierarchy of the columns of the AdvancedDataGrid control.
AdvancedDataGridHeaderRenderer@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridHeaderRenderer class defines the default header renderer for a AdvancedDataGrid control.
AdvancedDataGridItemRenderer@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridItemRenderer class defines the default item renderer for a AdvancedDataGrid control.
AdvancedDataGridListData@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridListData class defines the data type of the listData property implemented by drop-in item renderers or drop-in item editors for the AdvancedDataGrid control.
AdvancedDataGridRendererDescription@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridRendererDescription class contains information that describes an item renderer for the AdvancedDataGrid control.
AdvancedDataGridRendererProvider@@\t\n|mx.controls.advancedDataGridClasses|An AdvancedDataGridRendererProvider instance defines the characteristics for a single item renderer used by the AdvancedDataGrid control.
AdvancedDataGridSortItemRenderer@@\t\n|mx.controls.advancedDataGridClasses|The AdvancedDataGridSortItemRenderer class defines the item renderer for the sort icon and text field in the column header of the AdvancedDataGrid control.
FTEAdvancedDataGridItemRenderer@@\t\n|mx.controls.advancedDataGridClasses|The FTEAdvancedDataGridItemRenderer class defines the default item renderer for an AdvancedDataGrid control used with FTEText.
IAdvancedDataGridRendererProvider@@\t\n|mx.controls.advancedDataGridClasses|The IAdvancedDataGridRendererProvider interface defines the interface implemented by the AdvancedDataGridRendererProvider class, which defines the item renderer for the AdvancedDataGrid control.
MXAdvancedDataGridItemRenderer@@\t\n|mx.controls.advancedDataGridClasses|The MXAdvancedDataGridItemRenderer class defines the Spark item renderer class for use with the MX AdvancedDataGrid control.
SortInfo@@\t\n|mx.controls.advancedDataGridClasses|The SortInfo class defines information about the sorting of a column of the AdvancedDataGrid control.
DataGridBase@@\t\n|mx.controls.dataGridClasses|The DataGridBase class is the base class for controls that display lists of items in multiple columns.
DataGridColumn@@\t\n|mx.controls.dataGridClasses|The DataGridColumn class describes a column in a DataGrid control.
DataGridDragProxy@@\t\n|mx.controls.dataGridClasses|The DataGridDragProxy class defines the default drag proxy used when dragging data from a DataGrid control.
DataGridHeader@@\t\n|mx.controls.dataGridClasses|The DataGridHeader class defines the default header renderer for a DataGrid control.
DataGridHeaderBase@@\t\n|mx.controls.dataGridClasses|The DataGridHeaderBase class defines the base class for the DataGridHeader class, the class that defines the item renderer for the DataGrid control.
DataGridItemRenderer@@\t\n|mx.controls.dataGridClasses|The DataGridItemRenderer class defines the default item renderer for a DataGrid control.
DataGridListData@@\t\n|mx.controls.dataGridClasses|The DataGridListData class defines the data type of the listData property that is implemented by drop-in item renderers or drop-in item editors for the DataGrid control.
DataGridLockedRowContentHolder@@\t\n|mx.controls.dataGridClasses|The DataGridLockedRowContentHolder class defines a container in a DataGrid control of all of the control's item renderers and item editors.
FTEDataGridItemRenderer@@\t\n|mx.controls.dataGridClasses|The FTEDataGridItemRenderer class defines the default item renderer for a DataGrid control used with FTEText.
MXDataGridItemRenderer@@\t\n|mx.controls.dataGridClasses|The MXDataGridItemRenderer class defines the Spark item renderer class for use with the MX DataGrid control.
AdvancedListBase@@\t\n|mx.controls.listClasses|The AdvancedListBase class is the base class for controls, such as the AdvancedDataGrid and OLAPDataGrid controls, that represent lists of items that can have one or more selected items and can scroll through the items.
BaseListData@@\t\n|mx.controls.listClasses|The BaseListData class defines the data type of the listData property implemented by drop-in item renderers or drop-in item editors.
IDropInListItemRenderer@@\t\n|mx.controls.listClasses|The interface for "drop-in" item renderers.
IListItemRenderer@@\t\n|mx.controls.listClasses|Item renderers and item editors for list components must implement the IListItemRenderer interface.
ListBase@@\t\n|mx.controls.listClasses|The ListBase class is the base class for controls that represent lists of items that can have one or more selected and can scroll through the items.
ListBaseContentHolder@@\t\n|mx.controls.listClasses|The ListBaseContentHolder class defines a container in a list-based control of all of the control's item renderers and item editors.
ListBaseSeekPending@@\t\n|mx.controls.listClasses|An object that stores data about a seek operation that was interrupted by an ItemPendingError error.
ListBaseSelectionData@@\t\n|mx.controls.listClasses|Records used by list classes to keep track of what is selected.
ListData@@\t\n|mx.controls.listClasses|The ListData class defines the data type of the listData property implemented by drop-in item renderers or drop-in item editors for the List control.
ListItemDragProxy@@\t\n|mx.controls.listClasses|The default drag proxy used when dragging from an MX list-based control (except for the DataGrid class).
ListItemRenderer@@\t\n|mx.controls.listClasses|The ListItemRenderer class defines the default item renderer for a List control.
ListRowInfo@@\t\n|mx.controls.listClasses|Used by the list-based classes to store information about their IListItemRenderers.
MXItemRenderer@@\t\n|mx.controls.listClasses|The MXItemRenderer class is the base class for Spark item renderers and item editors used in MX list-based controls.
TileBase@@\t\n|mx.controls.listClasses|The TileBase class is the base class for controls that display data items in a sequence of rows and columns.
TileBaseDirection@@\t\n|mx.controls.listClasses|Values for the direction property of the TileList component.
TileListItemRenderer@@\t\n|mx.controls.listClasses|The TileListItemRenderer class defines the default item renderer for the HorizontalList and TileList controls.
IMenuBarItemRenderer@@\t\n|mx.controls.menuClasses|The IMenuBarItemRenderer interface defines the interface that an item renderer for the top-level menu bar of a MenuBar control must implement.
IMenuDataDescriptor@@\t\n|mx.controls.menuClasses|The IMenuDataDescriptor interface defines the interface that a dataDescriptor for a Menu or MenuBar control must implement.
IMenuItemRenderer@@\t\n|mx.controls.menuClasses|The IMenuItemRenderer interface defines the interface that a menu item renderer for a Menu control must implement.
MenuBarItem@@\t\n|mx.controls.menuClasses|The MenuBarItem class defines the default item renderer for the top-level menu bar of a MenuBar control.
MenuItemRenderer@@\t\n|mx.controls.menuClasses|The MenuItemRenderer class defines the default item renderer for menu items in any menu control.
MenuListData@@\t\n|mx.controls.menuClasses|The MenuListData class defines the data type of the listData property implemented by drop-in item renderers or drop-in item editors for the Menu and MenuBar control.
OLAPDataGridGroupRenderer@@\t\n|mx.controls.olapDataGridClasses|The OLAPDataGridGroupRenderer class defines the default item renderer for a group renderer for the OLAPDataGrid control.
OLAPDataGridHeaderRendererProvider@@\t\n|mx.controls.olapDataGridClasses|The OLAPDataGridHeaderRendererProvider class lets you specify a custom header renderer for the columns in the OLAPDataGrid control.
OLAPDataGridItemRendererProvider@@\t\n|mx.controls.olapDataGridClasses|An OLAPDataGridItemRendererProvider instance lets you specify a formatter for the items in the OLAPDataGrid control.
OLAPDataGridRendererProvider@@\t\n|mx.controls.olapDataGridClasses|The OLAPDataGridRendererProvider class defines the base class for assigning item renderers used by the OLAPDataGrid control.
ScrollBar@@\t\n|mx.controls.scrollClasses|The ScrollBar class is the base class for the HScrollBar and VScrollBar controls.
ScrollBarDirection@@\t\n|mx.controls.scrollClasses|The ScrollBarDirection class defines the values for the direction property of the ScrollBar control.
ScrollThumb@@\t\n|mx.controls.scrollClasses|The ScrollThumb class defines the thumb of a ScrollBar control.
Slider@@\t\n|mx.controls.sliderClasses|The Slider class is the base class for the Flex slider controls.
SliderDataTip@@\t\n|mx.controls.sliderClasses|The SliderDataTip class defines the tooltip used in the mx.controls.Slider control.
SliderDirection@@\t\n|mx.controls.sliderClasses|The SliderDirection class defines the constant values for the direction property of the Slider class.
SliderLabel@@\t\n|mx.controls.sliderClasses|The SliderLabel class defines the label used in the mx.controls.Slider component.
SliderThumb@@\t\n|mx.controls.sliderClasses|The SliderThumb class represents a thumb of a Slider control.
TextRange@@\t\n|mx.controls.textClasses|The TextRange class provides properties that select and format a range of text in the Label, Text, TextArea, TextEditor, and RichTextEditor controls.
DefaultDataDescriptor@@\t\n|mx.controls.treeClasses|The DefaultDataDescriptor class provides a default implementation for accessing and manipulating data for use in controls such as Tree and Menu.
ITreeDataDescriptor@@\t\n|mx.controls.treeClasses|Interface providing methods for parsing and adding nodes to a collection of data that is displayed by a Tree control.
ITreeDataDescriptor2@@\t\n|mx.controls.treeClasses|The ITreeDataDescriptor2 Interface defines methods for parsing and adding nodes to a collection of data that is displayed by a Tree control.
MXTreeItemRenderer@@\t\n|mx.controls.treeClasses|The MXTreeItemRenderer class defines the Spark item renderer class for use with the MX Tree control.
TreeItemRenderer@@\t\n|mx.controls.treeClasses|The TreeItemRenderer class defines the default item renderer for a Tree control.
TreeListData@@\t\n|mx.controls.treeClasses|The TreeListData class defines the data type of the listData property implemented by drop-in item renderers or drop-in item editors for the Tree control.
CuePointManager@@\t\n|mx.controls.videoClasses|The CuePointManager class lets you use ActionScript code to manage the cue points associated with the VideoDisplay control.
VideoError@@\t\n|mx.controls.videoClasses|The VideoError class represents the error codes for errors thrown by the VideoDisplay control.
Application@@\t\n|mx.core|Flex defines a default, or Application, container that lets you start adding content to your application without explicitly defining another container.
ApplicationDomainTarget@@\t\n|mx.core|The ApplicationDomainTarget class defines the possible values for the applicationDomainTarget property of the RSLData class.
BitmapAsset@@\t\n|mx.core|BitmapAsset is a subclass of the flash.display.Bitmap class which represents bitmap images that you embed in a Flex application.
ButtonAsset@@\t\n|mx.core|ButtonAsset is a subclass of the flash.display.SimpleButton class which represents button symbols that you embed in a Flex application from a SWF file produced by Flash.
ByteArrayAsset@@\t\n|mx.core|ByteArrayAsset is a subclass of the flash.utils.ByteArray class which represents an arbitrary sequence of byte data that you embed in a Flex application.
ClassFactory@@\t\n|mx.core|A ClassFactory instance is a "factory object" which Flex uses to generate instances of another class, each with identical properties.
ComponentDescriptor@@\t\n|mx.core|ComponentDescriptor is the base class for the UIComponentDescriptor class, which encapsulates the information that you specified in an MXML tag for an instance of a visual component.
Container@@\t\n|mx.core|The Container class is an abstract base class for components that controls the layout characteristics of child components.
ContainerCreationPolicy@@\t\n|mx.core|The ContainerCreationPolicy class defines the constant values for the creationPolicy property of the Container class.
ContainerLayout@@\t\n|mx.core|The ContainerLayout class defines the constant values for the layout property of container classes.
ContextualClassFactory@@\t\n|mx.core|A class factory that provides a system manager as a context of where the class should be created.
DeferredInstanceFromClass@@\t\n|mx.core|A deferred instance factory that creates and returns an instance of a specified class.
DeferredInstanceFromFunction@@\t\n|mx.core|A deferred instance factory that uses a generator function to create an instance of the required object.
DesignLayer@@\t\n|mx.core|The DesignLayer class represents a visibility group that can be associated with one or more IVisualElement instances at runtime.
DPIClassification@@\t\n|mx.core|An enum of the device screen density classess.
DragSource@@\t\n|mx.core|The DragSource class contains the data being dragged.
EdgeMetrics@@\t\n|mx.core|The EdgeMetrics class specifies the thickness, in pixels, of the four edge regions around a visual component.
EventPriority@@\t\n|mx.core|The EventPriority class defines constant values for the priority argument of the addEventListener() method of EventDispatcher.
FlexBitmap@@\t\n|mx.core|FlexBitmap is a subclass of the Player's Bitmap class.
FlexGlobals@@\t\n|mx.core|A class that contains variables that are global to all applications within the same ApplicationDomain.
FlexHTMLLoader@@\t\n|mx.core|FlexHTMLLoader is a subclass of the Player's HTMLLoader class used by the Flex HTML control.
FlexLoader@@\t\n|mx.core|FlexLoader is a subclass of the Player's Loader class.
FlexMovieClip@@\t\n|mx.core|FlexMovieClip is a subclass of the Player's MovieClip class.
FlexShape@@\t\n|mx.core|FlexShape is a subclass of the Player's Shape class.
FlexSimpleButton@@\t\n|mx.core|FlexSimpleButton is a subclass of the Player's SimpleButton class.
FlexSprite@@\t\n|mx.core|FlexSprite is a subclass of the Player's Sprite class and the superclass of UIComponent.
FlexTextField@@\t\n|mx.core|FlexTextField is a subclass of the Player's TextField class and the superclass of UITextField.
FlexVersion@@\t\n|mx.core|This class controls the backward-compatibility of the framework.
FontAsset@@\t\n|mx.core|FontAsset is a subclass of the flash.text.Font class which represents fonts that you embed in a Flex application.
FTETextField@@\t\n|mx.core|FTETextField is a Sprite which displays text by using the new Flash Text Engine to implement the old TextField API.
IAssetLayoutFeatures@@\t\n|mx.core|The IAssetLayoutFeatures interface defines the minimum properties and methods required for an Object to support advanced transforms in embedded assets.
IBorder@@\t\n|mx.core|The IBorder interface defines the interface that all classes used for border skins should implement.
IButton@@\t\n|mx.core|The IButton interface is a marker interface that indicates that a component acts as a button.
IChildList@@\t\n|mx.core|The IChildList interface defines the properties and methods for accessing and manipulating child lists, which are subsets of a DisplayObjectContainer's children.
IConstraintClient@@\t\n|mx.core|The IConstraintClient interface defines the interface for components that support layout constraints.
IContainer@@\t\n|mx.core|IContainer is a interface that indicates a component extends or mimics mx.core.Container 
IDataRenderer@@\t\n|mx.core|The IDataRenderer interface defines the interface for components that have a data property.
IDeferredContentOwner@@\t\n|mx.core|The IDeferredContentOwner interface defines the properties and methods for deferred instantiation.
IDeferredInstance@@\t\n|mx.core|The IDeferredInstance interface defines the Flex deferred instance factory interface.
IDeferredInstantiationUIComponent@@\t\n|mx.core|The IDeferredInstantiationUIComponent interface defines the interface for a component or object that defers instantiation.
IFactory@@\t\n|mx.core|The IFactory interface defines the interface that factory classes such as ClassFactory must implement.
IFlexAsset@@\t\n|mx.core|IFlexAsset is a marker interface with the following meaning: if a class declares that it implements IFlexAsset, then that class represents an asset -- such as a bitmap, a font, or a sound -- that has been embedded in a Flex application.
IFlexDisplayObject@@\t\n|mx.core|The IFlexDisplayObject interface defines the interface for skin elements.
IFlexModule@@\t\n|mx.core|The IFlexModule interface is used as an optional contract with IFlexModuleFactory.
IFlexModuleFactory@@\t\n|mx.core|The IFlexModuleFactory interface represents the contract expected for bootstrapping Flex applications and dynamically loaded modules.
IFontContextComponent@@\t\n|mx.core|Allows a component to support a font context property.
IIMESupport@@\t\n|mx.core|The IIMESupport interface defines the interface for any component that supports IME (input method editor).
IInvalidating@@\t\n|mx.core|The IInvalidating interface defines the interface for components that use invalidation to do delayed -- rather than immediate -- property commitment, measurement, drawing, and layout.
ILayoutDirectionElement@@\t\n|mx.core|The ILayoutDirectionElement interface defines the minimum properties and methods required for an Object to support the layoutDirection property.
ILayoutElement@@\t\n|mx.core|The ILayoutElement interface is used primarily by the layout classes to query, size and position the elements of GroupBase containers.
IMXMLObject@@\t\n|mx.core|The IMXMLObject interface defines the APIs that a non-visual component must implement in order to work properly with the MXML compiler.
INavigatorContent@@\t\n|mx.core|The INavigatorContent interface defines the interface that a container must implement to be used as the child of a navigator container, such as the ViewStack, TabNavigator, and Accordion navigator containers.
InteractionMode@@\t\n|mx.core|The InteractionMode class defines the alues for the interactionMode property of the UIComponent class.
IProgrammaticSkin@@\t\n|mx.core|The IProgrammaticSkin interface defines the interface that skin classes must implement if they use the name property skin interface.
IPropertyChangeNotifier@@\t\n|mx.core|The IPropertyChangeNotifier interface defines a marker interface.
IRawChildrenContainer@@\t\n|mx.core|The IRawChildrenContainer interface defines the APIs for containers that can return an IChildList that represents all their children.
IRectangularBorder@@\t\n|mx.core|The IRectangularBorder interface defines the interface that all classes used for rectangular border skins should implement.
IRepeater@@\t\n|mx.core|The IRepeater interface defines the public APIs of the Repeater object.
IRepeaterClient@@\t\n|mx.core|The IRepeaterClient interface defines the APIs for components that can have multiple instances created by a Repeater.
ISelectableList@@\t\n|mx.core|The ISelectableList interface indicates that the implementor is an IList element that supports a selectedIndex property.
IStateClient@@\t\n|mx.core|The IStateClient interface defines the interface that components must implement to support view states.
IStateClient2@@\t\n|mx.core|The IStateClient2 interface defines the interface that components must implement to support Flex 4 view state semantics.
ISWFBridgeGroup@@\t\n|mx.core|A sandbox bridge group is a group of bridges that represent applications that this application can communicate with.
ISWFBridgeProvider@@\t\n|mx.core|An implementor of ISWFBridgeProvider provides a bridge to an application in a different security sandbox or to an application that was compiled with a different version of the Flex compiler and is running in a separate ApplicationDomain.
ISWFLoader@@\t\n|mx.core|The ISWFLoader interface defines an API with special properties and method required when loading compatible applications and untrusted applications.
ITextInput@@\t\n|mx.core|Defines an interface for a single-line text field that is optionally editable.
IToggleButton@@\t\n|mx.core|The IToggleButton interface is a marker interface that indicates that a component acts as a toggleable button.
IToolTip@@\t\n|mx.core|The IToolTip interface defines the API that tooltip-like components must implement in order to work with the ToolTipManager.
ITransientDeferredInstance@@\t\n|mx.core|The ITransientDeferredInstance interface extends IDeferredInstance and adds the ability for the user to reset the deferred instance factory to its initial state (usually this implies releasing any known references to the component, such as the setting the owning document property that refers to the instance to null).
IUIComponent@@\t\n|mx.core|The IUIComponent interface defines the basic set of APIs that you must implement to create a child of a Flex container or list.
IUID@@\t\n|mx.core|The IUID interface defines the interface for objects that must have Unique Identifiers (UIDs) to uniquely identify the object.
IUITextField@@\t\n|mx.core|The IUITextField interface defines the basic set of APIs for UITextField instances.
IVisualElement@@\t\n|mx.core|The IVisualElement interface defines the minimum properties and methods required for a visual element to be laid out and displayed in a Spark container.
IVisualElementContainer@@\t\n|mx.core|The IVisualElementContainer interface defines the minimum properties and methods required for a container to manage Spark components for display.
IWindow@@\t\n|mx.core|The IWindow interface defines the API for components that serve as top-level containers in Flex-based AIR applications (containers that represent operating system windows).
LayoutContainer@@\t\n|mx.core|Flex defines a default, or Application, container that lets you start adding content to your module or Application without explicitly defining another container.
LayoutDirection@@\t\n|mx.core|The LayoutDirection class defines the constant values for the layoutDirection style of an IStyleClient and the layoutDirection property of an ILayoutDirectionElement.
MovieClipAsset@@\t\n|mx.core|MovieClipAsset is a subclass of the flash.display.MovieClip class which represents movieclip symbols that you embed in a Flex application from a SWF file produced by Flash.
MovieClipLoaderAsset@@\t\n|mx.core|MovieClipLoaderAsset is a subclass of the MovieClipAsset class which represents SWF files that you embed in a Flex application.
MXMLObjectAdapter@@\t\n|mx.core|The MXMLObjectAdapter class is a stub implementation of the IMXMLObject interface, so that you can implement the interface without defining all of the methods.
Repeater@@\t\n|mx.core|The Repeater class is the runtime object that corresponds to the <mx:Repeater> tag.
RSLData@@\t\n|mx.core|A Class that describes configuration data for an RSL.
RuntimeDPIProvider@@\t\n|mx.core|The RuntimeDPIProvider class provides the default mapping of similar device DPI values into predefined DPI classes.
ScrollControlBase@@\t\n|mx.core|The ScrollControlBase class is the base class for controls with scroll bars.
ScrollPolicy@@\t\n|mx.core|Values for the horizontalScrollPolicy and verticalScrollPolicy properties of the Container and ScrollControlBase classes.
SoundAsset@@\t\n|mx.core|SoundAsset is a subclass of the flash.media.Sound class which represents sounds that you embed in a Flex application.
SpriteAsset@@\t\n|mx.core|SpriteAsset is a subclass of the flash.display.Sprite class which represents vector graphic images that you embed in an application.
SWFBridgeGroup@@\t\n|mx.core|A SWFBridgeGroup represents all of the sandbox bridges that an application needs to communicate with its parent and children.
TextFieldAsset@@\t\n|mx.core|TextFieldAsset is a subclass of the flash.text.TextField class which represents TextField symbols that you embed in a Flex application from a SWF file produced by Flash.
UIComponent@@\t\n|mx.core|The UIComponent class is the base class for all visual components, both interactive and noninteractive.
UIComponentCachePolicy@@\t\n|mx.core|The ContainerCreationPolicy class defines the constant values for the cachePolicy property of the UIComponent class.
UIComponentDescriptor@@\t\n|mx.core|A UIComponentDescriptor instance encapsulates the information that you specified in an MXML tag for an instance of a visual component.
UIFTETextField@@\t\n|mx.core|The UIFTETextField class is an alternative to the UITextField class for displaying text in MX components.
UITextField@@\t\n|mx.core|The UITextField class defines the component used by many Flex components to display text.
UITextFormat@@\t\n|mx.core|The UITextFormat class represents character formatting information for the UITextField class.
Window@@\t\n|mx.core|The Window is a top-level container for additional windows in an AIR desktop application.
WindowedApplication@@\t\n|mx.core|The WindowedApplication defines the application container that you use to create Flex applications for AIR applications.
StatusBar@@\t\n|mx.core.windowClasses|The default status bar for a WindowedApplication or a Window.
TitleBar@@\t\n|mx.core.windowClasses|The default title bar for a WindowedApplication or a Window.
AddChildAction@@\t\n|mx.effects|The AddChildAction class defines an action effect that corresponds to the AddChild property of a view state definition.
AddItemAction@@\t\n|mx.effects|The AddItemAction class defines an action effect that determines when the item renderer appears in the control for an item being added to a list-based control, such as List or TileList, or for an item that replaces an existing item in the control.
AnimateProperty@@\t\n|mx.effects|The AnimateProperty effect animates a property or style of a component.
Blur@@\t\n|mx.effects|The Blur effect lets you apply a blur visual effect to a component.
CompositeEffect@@\t\n|mx.effects|The CompositeEffect class is the parent class for the Parallel and Sequence classes, which define the <mx:Parallel> and <mx:Sequence> MXML tags.
DefaultListEffect@@\t\n|mx.effects|The DefaultListEffect class defines the default effect applied to the item renderers of a List control when the data in the data provider changes.
DefaultTileListEffect@@\t\n|mx.effects|The DefaultTileListEffect class defines the default effect applied to the item renderers of a TileList control when the data in the data provider changes.
Dissolve@@\t\n|mx.effects|Animate the component from transparent to opaque, or from opaque to transparent.
Effect@@\t\n|mx.effects|The Effect class is an abstract base class that defines the basic functionality of all Flex effects.
EffectInstance@@\t\n|mx.effects|The EffectInstance class represents an instance of an effect playing on a target.
EffectManager@@\t\n|mx.effects|The EffectManager class listens for events, such as the show and move events, dispatched by objects in a Flex application.
EffectTargetFilter@@\t\n|mx.effects|The EffectTargetFilter class defines a custom filter that is executed by each transition effect on each target of the effect.
Fade@@\t\n|mx.effects|The Fade effect animates the alpha property of a component, either from transparent to opaque, or from opaque to transparent.
Glow@@\t\n|mx.effects|The Glow effect lets you apply a visual glow effect to a component.
IAbstractEffect@@\t\n|mx.effects|The IAbstractEffect interface is used to denote that a property or parameter must be of type Effect, but does not actually implement any of the APIs of the IEffect interface.
IEffect@@\t\n|mx.effects|The IEffect interface defines the base interface of all Flex effects.
IEffectInstance@@\t\n|mx.effects|The IEffectInstance interface represents an instance of an effect playing on a target.
IEffectTargetHost@@\t\n|mx.effects|The IEffectTargetHost interface defines the interface that lets you access the target list-based control of a data effect.
Iris@@\t\n|mx.effects|The Iris effect animates the effect target by expanding or contracting a rectangular mask centered on the target.
MaskEffect@@\t\n|mx.effects|The MaskEffect class is an abstract base class for all effects that animate a mask, such as the wipe effects and the Iris effect.
Move@@\t\n|mx.effects|The Move effect changes the position of a component over a specified time interval.
Parallel@@\t\n|mx.effects|The Parallel effect plays multiple child effects at the same time.
Pause@@\t\n|mx.effects|The Pause effect is useful when sequencing effects.
RemoveChildAction@@\t\n|mx.effects|The RemoveChildAction class defines an action effect that corresponds to the RemoveChild property of a view state definition.
RemoveItemAction@@\t\n|mx.effects|The RemoveItemAction class defines an action effect that determines when the item renderer disappears from the control for the item renderer of an item being removed from a list-based control, such as List or TileList, or for an item that is replaced by a new item added to the control.
Resize@@\t\n|mx.effects|The Resize effect changes the width, height, or both dimensions of a component over a specified time interval.
Rotate@@\t\n|mx.effects|The Rotate effect rotates a component around a specified point.
Sequence@@\t\n|mx.effects|The Sequence effect plays multiple child effects one after the other, in the order in which they are added.
SetPropertyAction@@\t\n|mx.effects|The SetPropertyAction class defines an action effect that corresponds to the SetProperty property of a view state definition.
SetStyleAction@@\t\n|mx.effects|The SetStyleAction class defines an action effect that corresponds to the SetStyle property of a view state definition.
SoundEffect@@\t\n|mx.effects|The SoundEffect class plays an MP3 audio file.
Tween@@\t\n|mx.effects|The Tween class defines a tween, a property animation performed on a target object over a period of time.
TweenEffect@@\t\n|mx.effects|The TweenEffect class is the superclass for all effects that are based on the Tween object.
UnconstrainItemAction@@\t\n|mx.effects|The UnconstrainItemAction class defines an action effect that is used in a data-effect definition to temporarily stop item renderers from being positioned by the layout algorithm of the parent control.
WipeDown@@\t\n|mx.effects|The WipeDown class defines a wipe down effect.
WipeLeft@@\t\n|mx.effects|The WipeLeft class defines a wipe left effect.
WipeRight@@\t\n|mx.effects|The WipeRight class defines a wipe right effect.
WipeUp@@\t\n|mx.effects|The WipeUp class defines a wipe up effect.
Zoom@@\t\n|mx.effects|The Zoom effect zooms the object in or out on a center point.
Back@@\t\n|mx.effects.easing|The Back class defines three easing functions to implement motion with Flex effect classes.
Bounce@@\t\n|mx.effects.easing|The Bounce class defines three easing functions to implement bounce motion with Flex effect classes.
Circular@@\t\n|mx.effects.easing|The Circular class defines three easing functions to implement circular motion with Flex effect classes.
Cubic@@\t\n|mx.effects.easing|The Cubic class defines three easing functions to implement motion with Flex effect classes.
Elastic@@\t\n|mx.effects.easing|The Elastc class defines three easing functions to implement motion with Flex effect classes, where the motion is defined by an exponentially decaying sine wave.
Exponential@@\t\n|mx.effects.easing|The Exponential class defines three easing functions to implement motion with Flex effect classes, where the motion is defined by an exponentially decaying sine wave.
Linear@@\t\n|mx.effects.easing|The Linear class defines easing functions to implement linear motion with Flex effect classes.
Quadratic@@\t\n|mx.effects.easing|The Quadratic class defines three easing functions to implement quadratic motion with Flex effect classes.
Quartic@@\t\n|mx.effects.easing|The Quartic class defines three easing functions to implement motion with Flex effect classes.
Quintic@@\t\n|mx.effects.easing|The Quintic class defines three easing functions to implement motion with Flex effect classes.
Sine@@\t\n|mx.effects.easing|The Sine class defines three easing functions to implement motion with Flex effect classes, where the motion is defined by a sine wave.
ActionEffectInstance@@\t\n|mx.effects.effectClasses|The ActionEffectInstance class is the superclass for all action effect instance classes.
AddChildActionInstance@@\t\n|mx.effects.effectClasses|The AddChildActionInstance class implements the instance class for the AddChildAction effect.
AddItemActionInstance@@\t\n|mx.effects.effectClasses|The AddItemActionInstance class implements the instance class for the AddItemAction effect.
AddRemoveEffectTargetFilter@@\t\n|mx.effects.effectClasses|AddRemoveEffectTargetFilter is a subclass of EffectTargetFilter that handles the logic for filtering targets that have been added or removed as children to a container.
AnimatePropertyInstance@@\t\n|mx.effects.effectClasses|The AnimatePropertyInstance class implements the instance class for the AnimateProperty effect.
BlurInstance@@\t\n|mx.effects.effectClasses|The BlurInstance class implements the instance class for the Blur effect.
CompositeEffectInstance@@\t\n|mx.effects.effectClasses|The CompositeEffectInstance class implements the instance class for the CompositeEffect class.
DissolveInstance@@\t\n|mx.effects.effectClasses|The DissolveInstance class implements the instance class for the Dissolve effect.
FadeInstance@@\t\n|mx.effects.effectClasses|The FadeInstance class implements the instance class for the Fade effect.
GlowInstance@@\t\n|mx.effects.effectClasses|The GlowInstance class implements the instance class for the Glow effect.
HideShowEffectTargetFilter@@\t\n|mx.effects.effectClasses|HideShowEffectTargetFilter is a subclass of EffectTargetFilter that handles the logic for filtering targets that have been shown or hidden by modifying their visible property.
IrisInstance@@\t\n|mx.effects.effectClasses|The IrisInstance class implements the instance class for the Iris effect.
MaskEffectInstance@@\t\n|mx.effects.effectClasses|The MaskEffectInstance class is an abstract base class that implements the instance class for the MaskEffect class.
MoveInstance@@\t\n|mx.effects.effectClasses|The MoveInstance class implements the instance class for the Move effect.
ParallelInstance@@\t\n|mx.effects.effectClasses|The ParallelInstance class implements the instance class for the Parallel effect.
PauseInstance@@\t\n|mx.effects.effectClasses|The PauseInstance class implements the instance class for the Pause effect.
PropertyChanges@@\t\n|mx.effects.effectClasses|The PropertyChanges class defines the start and end values for a set of properties of a target component of a transition.
RemoveChildActionInstance@@\t\n|mx.effects.effectClasses|The RemoveChildActionInstance class implements the instance class for the RemoveChildAction effect.
RemoveItemActionInstance@@\t\n|mx.effects.effectClasses|The RemoveItemActionInstance class implements the instance class for the RemoveChildAction effect.
ResizeInstance@@\t\n|mx.effects.effectClasses|The ResizeInstance class implements the instance class for the Resize effect.
RotateInstance@@\t\n|mx.effects.effectClasses|The RotateInstance class implements the instance class for the Rotate effect.
SequenceInstance@@\t\n|mx.effects.effectClasses|The SequenceInstance class implements the instance class for the Sequence effect.
SetPropertyActionInstance@@\t\n|mx.effects.effectClasses|The SetPropertyActionInstance class implements the instance class for the SetPropertyAction effect.
SetStyleActionInstance@@\t\n|mx.effects.effectClasses|The SetStyleActionInstance class implements the instance class for the SetStyleAction effect.
SoundEffectInstance@@\t\n|mx.effects.effectClasses|The SoundEffectInstance class implements the instance class for the SoundEffect effect.
TweenEffectInstance@@\t\n|mx.effects.effectClasses|The TweenEffectInstance class implements the instance class for the TweenEffect.
UnconstrainItemActionInstance@@\t\n|mx.effects.effectClasses|The UnconstrainItemActionInstance class implements the instance class for the UnconstrainItemAction effect.
WipeDownInstance@@\t\n|mx.effects.effectClasses|The WipeDownInstance class implements the instance class for the WipeDown effect.
WipeLeftInstance@@\t\n|mx.effects.effectClasses|The WipeLeftInstance class implements the instance class for the WipeLeft effect.
WipeRightInstance@@\t\n|mx.effects.effectClasses|The WipeRightInstance class implements the instance class for the WipeRight effect.
WipeUpInstance@@\t\n|mx.effects.effectClasses|The WipeUpInstance class implements the instance class for the WipeUp effect.
ZoomInstance@@\t\n|mx.effects.effectClasses|The ZoomInstance class implements the instance class for the Zoom effect.
AdvancedDataGridEvent@@\t\n|mx.events|The AdvancedDataGridEvent class represents event objects that are specific to the AdvancedDataGrid control, such as the event that is dispatched when an editable grid item gets the focus.
AdvancedDataGridEventReason@@\t\n|mx.events|The AdvancedDataGridEventReason class defines constants for the values of the reason property of a AdvancedDataGridEvent object when the type property is itemEditEnd.
AIREvent@@\t\n|mx.events|The AIREvent class represents the event object passed to the event listener for several AIR-specific events dispatched by the Window and WindowedApplication components.
BrowserChangeEvent@@\t\n|mx.events|The BrowserChangeEvent class represents event objects specific to the BrowserManager.
CalendarLayoutChangeEvent@@\t\n|mx.events|The CalendarLayoutChangeEvent class represents the event object passed to the event listener for the change event for the DateChooser and DateField controls.
ChildExistenceChangedEvent@@\t\n|mx.events|Represents events that are dispatched when a the child of a control is created or destroyed.
CloseEvent@@\t\n|mx.events|The CloseEvent class represents event objects specific to popup windows, such as the Alert control.
CollectionEvent@@\t\n|mx.events|The mx.events.CollectionEvent class represents an event that is dispatched when the associated collection changes.
CollectionEventKind@@\t\n|mx.events|The CollectionEventKind class contains constants for the valid values of the mx.events.CollectionEvent class kind property.
ColorPickerEvent@@\t\n|mx.events|Represents events that are specific to the ColorPicker control, such as when the user rolls the mouse over or out of a swatch in the swatch panel.
CubeEvent@@\t\n|mx.events|Event class used by OLAPCube to indicate its status.
CuePointEvent@@\t\n|mx.events|The CuePointEvent class represents the event object passed to the event listener for cue point events dispatched by the VideoDisplay control.
DataGridEvent@@\t\n|mx.events|The DataGridEvent class represents event objects that are specific to the DataGrid control, such as the event that is dispatched when an editable grid item gets the focus.
DataGridEventReason@@\t\n|mx.events|The DataGridEventReason class defines constants for the values of the reason property of a DataGridEvent object when the type property is itemEditEnd.
DateChooserEvent@@\t\n|mx.events|The DateChooserEvent class represents the event object passed to the event listener for the scroll event for the DateChooser and DateField controls.
DateChooserEventDetail@@\t\n|mx.events|Constants that define the values of the detail property of a DateChooserEvent object.
DividerEvent@@\t\n|mx.events|Represents events that are dispatched when a divider has been pressed, dragged or released.
DragEvent@@\t\n|mx.events|The DragEvent class represents event objects that are dispatched as part of a drag-and-drop operation.
DropdownEvent@@\t\n|mx.events|The DropdownEvent class represents the event object passed to the event listener for the open and close events.
DynamicEvent@@\t\n|mx.events|This subclass of Event is dynamic, meaning that you can set arbitrary event properties on its instances at runtime.
EffectEvent@@\t\n|mx.events|Represents event objects that are specific to Flex effects.
EventListenerRequest@@\t\n|mx.events|Request sent from one SystemManager to a SystemManager in another application through their bridge to add or remove a listener to a specified event on your behalf.
FileEvent@@\t\n|mx.events|The FileEvent class represents event objects that are specific to the FileSystemList, FileSystemDataGrid, FileSystemTree and FileSystemComboBox controls.
FlexEvent@@\t\n|mx.events|The FlexEvent class represents the event object passed to the event listener for many Flex events.
FlexMouseEvent@@\t\n|mx.events|The FlexMouseEvent class represents the event object passed to the event listener for Flex-specific mouse activity.
FlexNativeMenuEvent@@\t\n|mx.events|The FlexNativeMenuEvent class represents events that are associated with menu activities in FlexNativeMenu.
FlexNativeWindowBoundsEvent@@\t\n|mx.events|The FlexNativeWindowBoundsEvent is dispatched when the size or location changes for the NativeWindow that underlies a Window or WindowedApplication component.
FocusRequestDirection@@\t\n|mx.events|The FocusDirection class defines the constant values for the direction focus may be moved in.
IndexChangedEvent@@\t\n|mx.events|The IndexChangedEvent class represents events that are dispatched when an index changes.
InterDragManagerEvent@@\t\n|mx.events|An event sent between DragManagers that are in separate but trusted ApplicationDomains to handle the dispatching of DragEvents to the drag targets.
InterManagerRequest@@\t\n|mx.events|This is an event that is sent between ApplicationDomains to notify trusted listeners about activity in a particular manager.
InvalidateRequestData@@\t\n|mx.events|The InvalidateRequestData class defines constants for the values of the data property of a SWFBridgeRequest object when used with the SWFBridgeRequest.INVALIDATE_REQUEST request.
ItemClickEvent@@\t\n|mx.events|Represents events that are dispatched when a navigation item on a navigator bar, such as a ButtonBar, LinkBar, or TabBar control, has been clicked.
ListEvent@@\t\n|mx.events|The ListEvent class represents events associated with items in list-based controls such as List, Tree, Menu, and DataGrid.
ListEventReason@@\t\n|mx.events|Constants for the values of the reason property of a ListEvent object where the value of the type property is ListEvent.ITEM_EDIT_END.
MenuEvent@@\t\n|mx.events|The MenuEvent class represents events that are associated with menu activities in controls such as Menu, MenuBar, and PopUpMenuButton.
MetadataEvent@@\t\n|mx.events|The MetadataEvent class defines the event type for metadata and cue point events.
ModuleEvent@@\t\n|mx.events|The ModuleEvent class represents the event object passed to the event listener for events related to dynamically-loaded modules.
MoveEvent@@\t\n|mx.events|Represents event objects that are dispatched when a Flex component moves.
NumericStepperEvent@@\t\n|mx.events|Represents events that are specific to the NumericStepper control.
PropertyChangeEvent@@\t\n|mx.events|The PropertyChangeEvent class represents the event object passed to the event listener when one of the properties of an object has changed, and provides information about the change.
PropertyChangeEventKind@@\t\n|mx.events|The PropertyChangeEventKind class defines the constant values for the kind property of the PropertyChangeEvent class.
Request@@\t\n|mx.events|This is an event that is expects its data property to be set by a responding listener.
ResizeEvent@@\t\n|mx.events|Represents event objects that are dispatched when the size of a Flex component changes.
ResourceEvent@@\t\n|mx.events|The ResourceEvent class represents an Event object that is dispatched when the ResourceManager loads the resource bundles in a resource module by calling the loadResourceModule() method.
RSLEvent@@\t\n|mx.events|The RSLEvent class represents an event object used by the DownloadProgressBar class when an RSL is being downloaded by the Preloader class.
SandboxMouseEvent@@\t\n|mx.events|This is an event sent between applications in different security sandboxes to notify listeners about mouse activity in another security sandbox.
ScrollEvent@@\t\n|mx.events|Represents events that are dispatched by the ScrollBar class.
ScrollEventDetail@@\t\n|mx.events|Constants for the values of the detail property of a ScrollEvent.
ScrollEventDirection@@\t\n|mx.events|Constants for the values of the direction property of a ScrollEvent.
SliderEvent@@\t\n|mx.events|The SliderEvent class represents the event object passed to the event listener for the change, thumbDrag, thumbPress, and thumbRelease events of the HSlider and VSlider classes.
SliderEventClickTarget@@\t\n|mx.events|The SliderEventClickTarget class defines the constants for the values of the clickTarget property of the SliderEvent class.
StateChangeEvent@@\t\n|mx.events|The StateChangeEvent class represents an event that is dispatched when the currentState property of a component changes.
StyleEvent@@\t\n|mx.events|The StyleEvent class represents an event object used by the StyleManager class when a style SWF is being downloaded.
SWFBridgeEvent@@\t\n|mx.events|This is an event that is sent between applications that are in different security sandboxes.
SWFBridgeRequest@@\t\n|mx.events|An event that is sent between applications through the sharedEvents dispatcher that exists between two application SWFs.
ToolTipEvent@@\t\n|mx.events|The ToolTipEvent class represents ToolTip events, which are generated by the ToolTipManager class.
TouchInteractionEvent@@\t\n|mx.events|TouchInteractionEvents are used to coordinate touch intraction and response among different components.
TouchInteractionReason@@\t\n|mx.events|The TouchInteractionReason class defines the constant values for the reason property of the TouchInteractionEvent class.
TreeEvent@@\t\n|mx.events|The TreeEvent class represents the event object passed to the event listener for events that are associated with activities in tree, such as when a tree branch opens or closes.
TweenEvent@@\t\n|mx.events|Represents event objects that are specific to Flex tween effects.
ValidationResultEvent@@\t\n|mx.events|The ValidationResultEvent class represents the event object passed to the listener for the valid validator event or the invalid validator event.
VideoEvent@@\t\n|mx.events|The VideoEvent class represents the event object passed to the event listener for events dispatched by the VideoDisplay control, and defines the values of the VideoDisplay.state property.
BaseDimensionFilter@@\t\n|mx.filters|Base class for some Spark filters.
BaseFilter@@\t\n|mx.filters|Base class for some Spark filters.
IBitmapFilter@@\t\n|mx.filters|Interface used by some Spark filters.
ContainerMovieClip@@\t\n|mx.flash|Container components created in Adobe Flash Professional for use in Flex are subclasses of the mx.flash.ContainerMovieClip class.
UIMovieClip@@\t\n|mx.flash|Components created in Adobe Flash Professional for use in Flex are subclasses of the mx.flash.UIMovieClip class.
CurrencyFormatter@@\t\n|mx.formatters|The CurrencyFormatter class formats a valid number as a currency value.
DateBase@@\t\n|mx.formatters|The DateBase class contains the localized string information used by the mx.formatters.DateFormatter class and the parsing function that renders the pattern.
DateFormatter@@\t\n|mx.formatters|The DateFormatter class uses a format String to return a formatted date and time String from an input String or a Date object.
Formatter@@\t\n|mx.formatters|The Formatter class is the base class for all data formatters.
IFormatter@@\t\n|mx.formatters|This interface specifies the method that a formatter object must implement to allow it to be used as the formatter property for UI controls such as the AdvancedDataGridColumn.
NumberBase@@\t\n|mx.formatters|The NumberBase class is a utility class that contains general number formatting capabilities, including rounding, precision, thousands formatting, and negative sign formatting.
NumberBaseRoundType@@\t\n|mx.formatters|The NumberBaseRoundType class defines the constant values for formatter properties that specify a type of rounding.
NumberFormatter@@\t\n|mx.formatters|The NumberFormatter class formats a valid number by adjusting the decimal rounding and precision, the thousands separator, and the negative sign.
PhoneFormatter@@\t\n|mx.formatters|The PhoneFormatter class formats a valid number into a phone number format, including international configurations.
SwitchSymbolFormatter@@\t\n|mx.formatters|The SwitchSymbolFormatter class is a utility class that you can use when creating custom formatters.
ZipCodeFormatter@@\t\n|mx.formatters|The ZipCodeFormatter class formats a valid number into one of the following formats, based on a user-supplied formatString property.
CompoundTransform@@\t\n|mx.geom|A CompoundTransform represents a 2D or 3D matrix transform.
RoundedRectangle@@\t\n|mx.geom|RoundedRectangle represents a Rectangle with curved corners 
Transform@@\t\n|mx.geom|Adds synchronization support on top of the flash.geom.Transform class.
TransformOffsets@@\t\n|mx.geom|A CompoundTransform represents a 2D or 3D matrix transform.
BitmapFill@@\t\n|mx.graphics|Defines a set of values used to fill an area on screen with a bitmap or other DisplayObject.
BitmapFillMode@@\t\n|mx.graphics|The BitmapFillMode class defines an enumeration of the resize modes that determine how a BitmapImage fills in the dimensions specified by the layout system.
BitmapScaleMode@@\t\n|mx.graphics|The BitmapScaleMode class defines an enumeration for the scale modes that determine how a BitmapImage scales image content when fillMode is set to mx.graphics.BitmapFillMode.SCALE.
BitmapSmoothingQuality@@\t\n|mx.graphics|An enum of the smoothing quality modes that determine how a BitmapImage scales image content when fillMode is set to BitmapFillMode.SCALE and smooth is true.
GradientBase@@\t\n|mx.graphics|The GradientBase class is the base class for LinearGradient, LinearGradientStroke, and RadialGradient.
GradientEntry@@\t\n|mx.graphics|The GradientEntry class defines the objects that control a transition as part of a gradient fill.
GradientStroke@@\t\n|mx.graphics|The GradientStroke class lets you specify a gradient filled stroke.
IFill@@\t\n|mx.graphics|Defines the interface that classes that perform a fill must implement.
ImageSnapshot@@\t\n|mx.graphics|A helper class used to capture a snapshot of any Flash component that implements flash.display.IBitmapDrawable, including Flex UIComponents.
IStroke@@\t\n|mx.graphics|Defines the interface that classes that define a line must implement.
LinearGradient@@\t\n|mx.graphics|The LinearGradient class lets you specify the fill of a graphical element, where a gradient specifies a gradual color transition in the fill color.
LinearGradientStroke@@\t\n|mx.graphics|The LinearGradientStroke class lets you specify a gradient filled stroke.
RadialGradient@@\t\n|mx.graphics|The RadialGradient class lets you specify a gradual color transition in the fill color.
RadialGradientStroke@@\t\n|mx.graphics|The RadialGradientStroke class lets you specify a gradient filled stroke.
RectangularDropShadow@@\t\n|mx.graphics|Drop shadows are typically created using the DropShadowFilter class.
SolidColor@@\t\n|mx.graphics|Defines a representation for a color, including a color and an alpha value.
SolidColorStroke@@\t\n|mx.graphics|The SolidColorStroke class defines the properties for a line.
Stroke@@\t\n|mx.graphics|The Stroke class defines the properties for a line.
IImageEncoder@@\t\n|mx.graphics.codec|The IImageEncoder interface defines the interface that image encoders implement to take BitmapData objects, or ByteArrays containing raw ARGB pixels, as input and convert them to popular image formats such as PNG or JPEG.
JPEGEncoder@@\t\n|mx.graphics.codec|The JPEGEncoder class converts raw bitmap images into encoded images using Joint Photographic Experts Group (JPEG) compression.
PNGEncoder@@\t\n|mx.graphics.codec|The PNGEncoder class converts raw bitmap images into encoded images using Portable Network Graphics (PNG) lossless compression.
ColorBurnShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Color Burn' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
ColorDodgeShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Color Dodge' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
ColorShader@@\t\n|mx.graphics.shaderClasses|The ColorShader class creates a blend shader that is equivalent to the 'Color' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
ExclusionShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Exclusion' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
HueShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Hue' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
LuminosityMaskShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the luminosity masking option (also known as soft masking) available in Adobe Creative Suite tools.
LuminosityShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Luminosity' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
SaturationShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Saturation' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
SoftLightShader@@\t\n|mx.graphics.shaderClasses|Creates a blend shader that is equivalent to the 'Soft Light' blend mode for RGB premultiplied colors available in Adobe Creative Suite tools.
AbstractTarget@@\t\n|mx.logging|This class provides the basic functionality required by the logging framework for a target implementation.
ILogger@@\t\n|mx.logging|All loggers within the logging framework must implement this interface.
ILoggingTarget@@\t\n|mx.logging|All logger target implementations within the logging framework must implement this interface.
Log@@\t\n|mx.logging|Provides pseudo-hierarchical logging capabilities with multiple format and output options.
LogEvent@@\t\n|mx.logging|Represents the log information for a single logging event.
LogEventLevel@@\t\n|mx.logging|Static class containing constants for use in the level property.
LogLogger@@\t\n|mx.logging|The logger that is used within the logging framework.
InvalidCategoryError@@\t\n|mx.logging.errors|This error is thrown when a category specified for a logger contains invalid characters or is malformed.
InvalidFilterError@@\t\n|mx.logging.errors|This error is thrown when a filter specified for a target contains invalid characters or is malformed.
LineFormattedTarget@@\t\n|mx.logging.targets|All logger target implementations that have a formatted line style output should extend this class.
TraceTarget@@\t\n|mx.logging.targets|Provides a logger target that uses the global trace() method to output log messages.
BrowserManager@@\t\n|mx.managers|The BrowserManager is a Singleton manager that acts as a proxy between the browser and the application.
CursorManager@@\t\n|mx.managers|The CursorManager class controls a prioritized list of cursors, where the cursor with the highest priority is currently visible.
CursorManagerPriority@@\t\n|mx.managers|The CursorManagerPriority class defines the constant values for the priority argument to the CursorManager.setCursor() method.
DragManager@@\t\n|mx.managers|The DragManager class manages drag and drop operations, which let you move data from one place to another in a Flex application.
FocusManager@@\t\n|mx.managers|The FocusManager class manages the focus on components in response to mouse activity or keyboard activity (Tab key).
HistoryManager@@\t\n|mx.managers|History management lets users navigate through a Flex application using the web browser's Back and Forward navigation commands.
IBrowserManager@@\t\n|mx.managers|The interface that the shared instance of the BrowserManager implements.
IFocusManager@@\t\n|mx.managers|The IFocusManager interface defines the interface that components must implement to manage the focus on components in response to mouse activity or keyboard activity (Tab key), and to support a default button.
IFocusManagerComplexComponent@@\t\n|mx.managers|The IFocusManagerComplexComponent interface defines the interface that components that can have more than one internal focus target should implement in order to receive focus from the FocusManager.
IFocusManagerComponent@@\t\n|mx.managers|The IFocusManagerComponent interface defines the interface that focusable components must implement in order to receive focus from the FocusManager.
IFocusManagerContainer@@\t\n|mx.managers|The IFocusManagerContainer interface defines the interface that containers implement to host a FocusManager.
IFocusManagerGroup@@\t\n|mx.managers|The IFocusManagerGroup interface defines the interface that any component must implement if it is grouped in sets, where only one member of the set can be selected at any given time.
IHistoryManagerClient@@\t\n|mx.managers|Interface that must be implemented by objects registered with the History Manager.
ILayoutManager@@\t\n|mx.managers|The LayoutManager is the engine behind Flex's measurement and layout strategy.
ILayoutManagerClient@@\t\n|mx.managers|The ILayoutManagerClient interface defines the interface that a component must implement to participate in the LayoutManager's commit/measurement/layout sequence.
IMarshalSystemManager@@\t\n|mx.managers|The IMarshalSystemManager interface defines the methods and properties that classes must implement if they want to access, add, and remove bridges to other applications in a cross-versioned configuration.
ISystemManager@@\t\n|mx.managers|An ISystemManager manages an "application window".
IToolTipManagerClient@@\t\n|mx.managers|Components that implement IToolTipManagerClient can have tooltips and must have a toolTip getter/setter.
LayoutManager@@\t\n|mx.managers|The LayoutManager is the engine behind Flex's measurement and layout strategy.
PopUpManager@@\t\n|mx.managers|The PopUpManager singleton class creates new top-level windows and places or removes those windows from the layer on top of all other visible windows.
PopUpManagerChildList@@\t\n|mx.managers|The PopUpManagerChildList class defines the constant values for the detail property of the PopUpManager addPopUp() and createPopUp() methods.
SystemManager@@\t\n|mx.managers|The SystemManager class manages an application window.
ToolTipManager@@\t\n|mx.managers|The ToolTipManager lets you set basic ToolTip and error tip functionality, such as display delay and the disabling of ToolTips.
WindowedSystemManager@@\t\n|mx.managers|The WindowedSystemManager class manages any non-Application windows in a Flex-based AIR application.
IModule@@\t\n|mx.modules|An interface that marks a class as being a module.
IModuleInfo@@\t\n|mx.modules|An interface that acts as a handle for a particular module.
Module@@\t\n|mx.modules|The base class for MXML-based dynamically-loadable modules.
ModuleBase@@\t\n|mx.modules|The base class for ActionScript-based dynamically-loadable modules.
ModuleLoader@@\t\n|mx.modules|ModuleLoader is a component that behaves much like a SWFLoader except that it follows a contract with the loaded content.
ModuleManager@@\t\n|mx.modules|The ModuleManager class centrally manages dynamically loaded modules.
NetworkMonitor@@\t\n|mx.netmon|NetworkMonitor is a stub used by the framework and enterprise service classes to send information to the Flash Builder Network Monitor feature.
IOLAPAttribute@@\t\n|mx.olap|The IOLAPAttribute interface represents an attribute within a dimension of an OLAP schema.
IOLAPAxisPosition@@\t\n|mx.olap|The IOLAPAxisPosition interface represents a position on an OLAP axis.
IOLAPCell@@\t\n|mx.olap|The IOLAPCell interface represents a cell in an OLAPResult instance.
IOLAPCube@@\t\n|mx.olap|The IOLAPCube interface represents an OLAP cube that holds an N-dimensional representation of a flat data set.
IOLAPCustomAggregator@@\t\n|mx.olap|The IOLAPCustomAggregator interface defines the interface implemented by custom aggregator classes.
IOLAPDimension@@\t\n|mx.olap|The IOLAPDimension interface represents a dimension in an IOLAPCube instance.
IOLAPElement@@\t\n|mx.olap|The IOLAPElement interface defines a base interface that provides common properties for all OLAP elements.
IOLAPHierarchy@@\t\n|mx.olap|The IOLAPHierarchy interface represents a user-defined hierarchy in a dimension of an OLAP schema.
IOLAPLevel@@\t\n|mx.olap|The IOLAPLevel interface represents a level within the OLAP schema of an OLAP cube, where a hierarchy of a dimension contains one or more levels.
IOLAPMember@@\t\n|mx.olap|The IOLAPMember interface represents a member of a level of an OLAP schema.
IOLAPQuery@@\t\n|mx.olap|The IOLAPQuery interface represents an OLAP query that is executed on an IOLAPCube.
IOLAPQueryAxis@@\t\n|mx.olap|The IOLAPQueryAxis interface represents an axis of an OLAP query.
IOLAPResult@@\t\n|mx.olap|The IOLAPResult interface represents the result of a query on an OLAP cube.
IOLAPResultAxis@@\t\n|mx.olap|The IOLAPResultAxis interface represents an axis of the result of an OLAP query.
IOLAPSchema@@\t\n|mx.olap|The IOLAPSchema interface represents the OLAP schema.
IOLAPSet@@\t\n|mx.olap|The IOLAPSet interface represents a set, which is used to configure the axis of an OLAP query.
IOLAPTuple@@\t\n|mx.olap|The IOLAPTuple interface represents a tuple.
OLAPAttribute@@\t\n|mx.olap|The OLAPAttribute class represents a single attribute of an OLAPDimension.
OLAPAxisPosition@@\t\n|mx.olap|The OLAPAxisPosition class represents a position along the axis of the result of an OLAP query result.
OLAPCell@@\t\n|mx.olap|The OLAPCell class represents a cell in an OLAPResult instance.
OLAPCube@@\t\n|mx.olap|The OLAPCube class represents an OLAP cube.
OLAPDimension@@\t\n|mx.olap|The OLAPDimension class represents a dimension of an OLAP cube.
OLAPElement@@\t\n|mx.olap|The OLAPElement class defines a base interface that provides common properties for all OLAP elements.
OLAPHierarchy@@\t\n|mx.olap|The OLAPHierarchy class represents a hierarchy of the schema of an OLAP cube.
OLAPLevel@@\t\n|mx.olap|The OLAPLevel class represents a level in an OLAP cube.
OLAPMeasure@@\t\n|mx.olap|The OLAPMeasure class represents a member of the measure dimension of an OLAP cube.
OLAPMember@@\t\n|mx.olap|The OLAPMember class represents a member of an OLAP dimension.
OLAPQuery@@\t\n|mx.olap|The OLAPQuery interface represents an OLAP query that is executed on an IOLAPCube.
OLAPQueryAxis@@\t\n|mx.olap|The OLAPQueryAxis interface represents an axis of an OLAP query.
OLAPResult@@\t\n|mx.olap|The OLAPResult class represents the result of a query on an OLAP cube.
OLAPResultAxis@@\t\n|mx.olap|The OLAPResultAxis class represents an axis of the result of an OLAP query.
OLAPSchema@@\t\n|mx.olap|The OLAPSchema class represents an OLAP cube or cubes.
OLAPSet@@\t\n|mx.olap|The OLAPSet class represents a set, which is used to configure the axis of an OLAP query.
OLAPTrace@@\t\n|mx.olap|The OLAPTrace class controls the generation of trace information generated by the OLAP classes and written to the log file.
OLAPTuple@@\t\n|mx.olap|The OLAPTuple class reprsents a tuple expression pointing to an OLAP cube cell.
AverageAggregator@@\t\n|mx.olap.aggregators|The AverageAggregator class implements the average aggregator.
CountAggregator@@\t\n|mx.olap.aggregators|The CountAggregator class implements the count aggregator.
MaxAggregator@@\t\n|mx.olap.aggregators|The MaxAggregator class implements the maximum aggregator.
MinAggregator@@\t\n|mx.olap.aggregators|The MinAggregator class implements the minimum aggregator.
SumAggregator@@\t\n|mx.olap.aggregators|The SumAggregator class implements the sum aggregator.
DownloadProgressBar@@\t\n|mx.preloaders|The DownloadProgressBar class displays download progress.
IPreloaderDisplay@@\t\n|mx.preloaders|Defines the interface that a class must implement to be used as a download progress bar.
Preloader@@\t\n|mx.preloaders|The Preloader class is used by the SystemManager to monitor the download and initialization status of a Flex application.
SparkDownloadProgressBar@@\t\n|mx.preloaders|The SparkDownloadProgressBar class displays download progress.
FlexPrintJob@@\t\n|mx.printing|The FlexPrintJob class is a wrapper for the flash.printing.PrintJob class.
FlexPrintJobScaleType@@\t\n|mx.printing|Values for the scaleType property of the FlexPrintJob.addObject() method parameter.
PrintAdvancedDataGrid@@\t\n|mx.printing|The PrintAdvancedDataGrid control is an AdvancedDataGrid subclass that is styled to show a table with line borders and is optimized for printing.
PrintDataGrid@@\t\n|mx.printing|The PrintDataGrid control is a DataGrid subclass that is styled to show a table with line borders and is optimized for printing.
PrintOLAPDataGrid@@\t\n|mx.printing|The PrintOLAPDataGrid control is an OLAPDataGrid subclass that is styled to show a table with line borders and is optimized for printing.
IResourceBundle@@\t\n|mx.resources|The IResourceBundle and IResourceManager interfaces work together to provide localization support for Flex applications.
IResourceManager@@\t\n|mx.resources|The APIs of the IResourceManager interface provide localization support for Flex applications.
Locale@@\t\n|mx.resources|The Locale class can be used to parse a locale String such as "en_US_MAC" into its three parts: a language code, a country code, and a variant.
ResourceBundle@@\t\n|mx.resources|Provides an implementation of the IResourceBundle interface.
ResourceManager@@\t\n|mx.resources|This class is used to get a single instance of the IResourceManager implementation.
AbstractInvoker@@\t\n|mx.rpc|An invoker is an object that actually executes a remote procedure call (RPC).
AbstractOperation@@\t\n|mx.rpc|The AbstractOperation class represents an individual method on a service.
AbstractService@@\t\n|mx.rpc|The AbstractService class is the base class for the HTTPMultiService, WebService, and RemoteObject classes.
AsyncRequest@@\t\n|mx.rpc|The AsyncRequest class provides an abstraction of messaging for RPC call invocation.
AsyncResponder@@\t\n|mx.rpc|This class provides an RPC specific implementation of mx.rpc.IResponder.
AsyncToken@@\t\n|mx.rpc|This class provides a place to set additional or token-level data for asynchronous RPC operations.
CallResponder@@\t\n|mx.rpc|This component helps you manage the results for asynchronous calls made from RPC based services, typically from MXML components.
Fault@@\t\n|mx.rpc|The Fault class represents a fault in a remote procedure call (RPC) service invocation.
IResponder@@\t\n|mx.rpc|This interface provides the contract for any service that needs to respond to remote or asynchronous calls.
Responder@@\t\n|mx.rpc|This class provides a default implementation of the mx.rpc.IResponder interface.
AbstractEvent@@\t\n|mx.rpc.events|The base class for events that RPC services dispatch.
FaultEvent@@\t\n|mx.rpc.events|This event is dispatched when an RPC call has a fault.
HeaderEvent@@\t\n|mx.rpc.events|The event that indicates an RPC operation, such as a WebService SOAP request, returned a header in the response.
InvokeEvent@@\t\n|mx.rpc.events|The event that indicates an RPC operation has been invoked.
ResultEvent@@\t\n|mx.rpc.events|The event that indicates an RPC operation has successfully returned a result.
WSDLLoadEvent@@\t\n|mx.rpc.events|The WSDLLoadEvent class represents the event object for the event dispatched when a WSDL XML document has loaded successfully.
XMLLoadEvent@@\t\n|mx.rpc.events|The XMLLoadEvent class is a base class for events that are dispatched when an RPC service successfully loaded an XML document.
AbstractOperation@@\t\n|mx.rpc.http|An Operation used specifically by HTTPService or HTTPMultiService.
HTTPMultiService@@\t\n|mx.rpc.http|You use the <mx:HTTPMultiService> tag to represent a collection of http operations.
HTTPService@@\t\n|mx.rpc.http|You use the HTTPService class to represent an HTTPService object in ActionScript.
Operation@@\t\n|mx.rpc.http|An Operation used specifically by an HTTPMultiService.
SerializationFilter@@\t\n|mx.rpc.http|This class is useful for framework developers wishing to plug in or modify the HTTP services to use a new serialization format.
HTTPMultiService@@\t\n|mx.rpc.http.mxml|You use the <mx:HTTPMultiService> tag to represent an HTTPMultiService object in an MXML file.
HTTPService@@\t\n|mx.rpc.http.mxml|You use the <mx:HTTPService> tag to represent an HTTPService object in an MXML file.
Concurrency@@\t\n|mx.rpc.mxml|Concurrency is set via MXML based access to RPC services to indicate how to handle multiple calls to the same service.
IMXMLSupport@@\t\n|mx.rpc.mxml|Implementing this interface means that an RPC service can be used in an MXML document by using MXML tags.
Operation@@\t\n|mx.rpc.remoting|An Operation used specifically by RemoteObjects.
RemoteObject@@\t\n|mx.rpc.remoting|The RemoteObject class gives you access to classes on a remote application server.
Operation@@\t\n|mx.rpc.remoting.mxml|The Operation used for RemoteObject when created in an MXML document.
RemoteObject@@\t\n|mx.rpc.remoting.mxml|Use the <mx:RemoteObject> tag to represent an HTTPService object in an MXML file.
AbstractWebService@@\t\n|mx.rpc.soap|AbstractWebService is an abstract base class for implementations that provide RPC access to SOAP-based web services.
LoadEvent@@\t\n|mx.rpc.soap|This event is dispatched when a WSDL XML document has loaded successfully.
Operation@@\t\n|mx.rpc.soap|An Operation used specifically by WebServices.
SOAPFault@@\t\n|mx.rpc.soap|A subclass of mx.rpc.Fault that provides SOAP specific information from a SOAP envelope Fault element.
SOAPHeader@@\t\n|mx.rpc.soap|You use a SOAPHeader to specify the headers that need to be added to a SOAP envelope of a WebService Operation request.
SOAPResult@@\t\n|mx.rpc.soap|A context for the result of a SOAP based Remote Procedure Call.
WebService@@\t\n|mx.rpc.soap|The WebService class provides access to SOAP-based web services on remote servers.
Operation@@\t\n|mx.rpc.soap.mxml|An Operation used specifically by WebServices.
WebService@@\t\n|mx.rpc.soap.mxml|The <mx:WebService> tag gives you access to the operations of SOAP-compliant web services.
WSDLBinding@@\t\n|mx.rpc.wsdl|A binding defines the message format and protocol for messages sent to and from operations as defined by a particular portType.
IXMLDecoder@@\t\n|mx.rpc.xml|Decodes an XML document to an ActionScript object graph based on XML Schema definitions.
IXMLEncoder@@\t\n|mx.rpc.xml|Encodes an ActionScript object graph to XML based on an XML schema.
IXMLSchemaInstance@@\t\n|mx.rpc.xml|An ActionScript type should implement this interface when it needs to instruct an XML Schema based encoder (such as the WebService SOAP client) which concrete type definition to use while encoding instances of the type.
QualifiedResourceManager@@\t\n|mx.rpc.xml|QualifiedResourceManager is a helper class that simply maintains the order that resources were added and maps a target namespace to one or more resources.
SchemaTypeRegistry@@\t\n|mx.rpc.xml|XMLDecoder uses this class to map an XML Schema type by QName to an ActionScript Class so that it can create strongly typed objects when decoding content.
SimpleXMLDecoder@@\t\n|mx.rpc.xml|The SimpleXMLDecoder class deserialize XML into a graph of ActionScript objects.
SimpleXMLEncoder@@\t\n|mx.rpc.xml|The SimpleXMLEncoder class takes ActionScript Objects and encodes them to XML using default serialization.
Border@@\t\n|mx.skins|The Border class is an abstract base class for various classes that draw borders, either rectangular or non-rectangular, around UIComponents.
ProgrammaticSkin@@\t\n|mx.skins|This class is the base class for skin elements which draw themselves programmatically.
RectangularBorder@@\t\n|mx.skins|The RectangularBorder class is an abstract base class for various classes that draw rectangular borders around UIComponents.
AccordionHeaderSkin@@\t\n|mx.skins.halo|The skin for all the states of an AccordionHeader in an Accordion.
ActivatorSkin@@\t\n|mx.skins.halo|Defines the up, down, and over states for MenuBarItem objects.
AdvancedDataGridHeaderHorizontalSeparator@@\t\n|mx.skins.halo|The skin for the separator between column headers in an AdvancedDataGrid control.
ApplicationBackground@@\t\n|mx.skins.halo|The skin for application background gradient.
ApplicationTitleBarBackgroundSkin@@\t\n|mx.skins.halo|The skin for the TitleBar of a WindowedApplication or Window.
BrokenImageBorderSkin@@\t\n|mx.skins.halo|The skin for the border of a SWFLoader or Image component when the content could not be loaded.
BusyCursor@@\t\n|mx.skins.halo|Defines the appearance of the cursor that appears while an operation is taking place.
ButtonBarButtonSkin@@\t\n|mx.skins.halo|The skin for all the states of the ButtonBarButtons in a ButtonBar.
ButtonSkin@@\t\n|mx.skins.halo|The skin for all the states of a Button.
CheckBoxIcon@@\t\n|mx.skins.halo|The skin for all the states of the icon in a CheckBox.
ColorPickerSkin@@\t\n|mx.skins.halo|The skin for all the states of a ColorPicker.
ComboBoxArrowSkin@@\t\n|mx.skins.halo|The skin for all the states of the button in a ComboBox.
DataGridColumnDropIndicator@@\t\n|mx.skins.halo|The skin for the column drop indicator in a DataGrid.
DataGridColumnResizeSkin@@\t\n|mx.skins.halo|The skin for the column resizer in a DataGrid.
DataGridHeaderBackgroundSkin@@\t\n|mx.skins.halo|The skin for the background of the column headers in a DataGrid control.
DataGridHeaderSeparator@@\t\n|mx.skins.halo|The skin for the separator between column headers in a DataGrid.
DataGridSortArrow@@\t\n|mx.skins.halo|The skin for the sort arrow in a column header in a DataGrid.
DateChooserIndicator@@\t\n|mx.skins.halo|The skins of the DateChooser's indicators for displaying today, rollover and selected dates.
DateChooserMonthArrowSkin@@\t\n|mx.skins.halo|The skin for all the states of the next-month and previous-month buttons in a DateChooser.
DateChooserYearArrowSkin@@\t\n|mx.skins.halo|The skin for all the states of the next-year and previous-year buttons in a DateChooser.
DefaultDragImage@@\t\n|mx.skins.halo|The default drag proxy image for a drag and drop operation.
HaloBorder@@\t\n|mx.skins.halo|Defines the appearance of the default border for the Halo theme.
HaloColors@@\t\n|mx.skins.halo|Defines the colors used by components that support the Halo theme.
HaloFocusRect@@\t\n|mx.skins.halo|Defines the skin for the focus indicator.
LinkButtonSkin@@\t\n|mx.skins.halo|The skin for all the states of a LinkButton.
LinkSeparator@@\t\n|mx.skins.halo|The skin for the separator between the Links in a LinkBar.
ListDropIndicator@@\t\n|mx.skins.halo|The skin for the drop indicator of a list-based control.
MenuBarBackgroundSkin@@\t\n|mx.skins.halo|The skin for the background of a MenuBar.
NumericStepperDownSkin@@\t\n|mx.skins.halo|The skin for all the states of the down button in a NumericStepper.
NumericStepperUpSkin@@\t\n|mx.skins.halo|The skin for all the states of the up button in a NumericStepper.
PanelSkin@@\t\n|mx.skins.halo|The PanelSkin class defines the skin for the Panel, TitleWindow, and Alert components.
PopUpButtonSkin@@\t\n|mx.skins.halo|The skin for all the states of a PopUpButton.
PopUpIcon@@\t\n|mx.skins.halo|The skin for all the states of the icon in a PopUpButton.
PopUpMenuIcon@@\t\n|mx.skins.halo|The skin for all the states of the icon in a PopUpMenuButton.
ProgressBarSkin@@\t\n|mx.skins.halo|The skin for a ProgressBar.
ProgressIndeterminateSkin@@\t\n|mx.skins.halo|The skin for the indeterminate state of a ProgressBar.
ProgressMaskSkin@@\t\n|mx.skins.halo|The skin for the mask of the ProgressBar's determinate and indeterminate bars.
ProgressTrackSkin@@\t\n|mx.skins.halo|The skin for the track in a ProgressBar.
RadioButtonIcon@@\t\n|mx.skins.halo|The skin for all the states of the icon in a RadioButton.
ScrollArrowSkin@@\t\n|mx.skins.halo|The skin for all the states of the up or down button in a ScrollBar.
ScrollThumbSkin@@\t\n|mx.skins.halo|The skin for all the states of the thumb in a ScrollBar.
ScrollTrackSkin@@\t\n|mx.skins.halo|The skin for the track in a ScrollBar.
SliderHighlightSkin@@\t\n|mx.skins.halo|The skin for the highlighted state of the track of a Slider.
SliderThumbSkin@@\t\n|mx.skins.halo|The skin for all the states of a thumb in a Slider.
SliderTrackSkin@@\t\n|mx.skins.halo|The skin for the track in a Slider.
StatusBarBackgroundSkin@@\t\n|mx.skins.halo|The skin for the StatusBar of a WindowedApplication or Window.
SwatchPanelSkin@@\t\n|mx.skins.halo|The skin for the border of a SwatchPanel.
SwatchSkin@@\t\n|mx.skins.halo|The skin used for all color swatches in a ColorPicker.
TabSkin@@\t\n|mx.skins.halo|The skin for all the states of a Tab in a TabNavigator or TabBar.
TitleBackground@@\t\n|mx.skins.halo|The skin for a title bar area of a Panel.
ToolTipBorder@@\t\n|mx.skins.halo|The skin for a ToolTip.
WindowBackground@@\t\n|mx.skins.halo|The skin for a Window component's background gradient.
WindowCloseButtonSkin@@\t\n|mx.skins.halo|The skin for the close button in the TitleBar of a WindowedApplication or Window.
WindowMaximizeButtonSkin@@\t\n|mx.skins.halo|The skin for the maximize button in the TitleBar of a WindowedApplication or Window.
WindowMinimizeButtonSkin@@\t\n|mx.skins.halo|The skin for the minimize button in the TitleBar of a WindowedApplication or Window.
WindowRestoreButtonSkin@@\t\n|mx.skins.halo|The skin for the restore button in the TitleBar of a WindowedApplication or Window.
AccordionHeaderSkin@@\t\n|mx.skins.spark|The Spark skin class for the header of the MX Accordion container.
BorderSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX Border base class.
ButtonBarFirstButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the first button in the MX ButtonBar component.
ButtonBarLastButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the last button in the MX ButtonBar component.
ButtonBarMiddleButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the middle buttons in the MX ButtonBar component.
ButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX Button component.
CheckBoxSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX CheckBox component.
ColorPickerSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX ColorPicker component.
ComboBoxSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX ComboBox component.
ContainerBorderSkin@@\t\n|mx.skins.spark|Defines the border and background for the MX Container class's Spark skin.
DataGridHeaderBackgroundSkin@@\t\n|mx.skins.spark|The Spark skin class for the header background of the MX DataGrid component.
DataGridHeaderSeparatorSkin@@\t\n|mx.skins.spark|The Spark skin class for the separator of the MX DataGrid component.
DataGridSortArrow@@\t\n|mx.skins.spark|The skin for the sort arrow in a column header in an MX DataGrid.
DateChooserNextMonthSkin@@\t\n|mx.skins.spark|The Spark skin class for the next month arrow of the MX DateChooser component.
DateChooserNextYearSkin@@\t\n|mx.skins.spark|The Spark skin class for the next year arrow of an MX DateChooser component.
DateChooserPrevMonthSkin@@\t\n|mx.skins.spark|The Spark skin class for the previous month arrow of an MX DateChooser component.
DateChooserPrevYearSkin@@\t\n|mx.skins.spark|The Spark skin class for the previous year arrow of an MX DateChooser component.
DateChooserRollOverIndicatorSkin@@\t\n|mx.skins.spark|The Spark skin class for the rollover indicator of an MX DateChooser component.
DateChooserSelectionIndicatorSkin@@\t\n|mx.skins.spark|The Spark skin class for the selection indicator of an MX DateChooser component.
DateChooserTodayIndicatorSkin@@\t\n|mx.skins.spark|The Spark skin class for the current day indicator in an MX DateChooser component.
DefaultButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX default button.
EditableComboBoxSkin@@\t\n|mx.skins.spark|The Spark skin class for the editable MX ComboBox component.
LinkButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX LinkButton component.
MenuArrow@@\t\n|mx.skins.spark|The Spark skin class for the branchIcon of an MX Menu component.
MenuArrowDisabled@@\t\n|mx.skins.spark|The Spark skin class for the disabled branchIcon of an MX Menu component.
MenuCheck@@\t\n|mx.skins.spark|The Spark skin class for the checkIcon of an MX Menu component.
MenuCheckDisabled@@\t\n|mx.skins.spark|The Spark skin class for the checkDisabledIcon of an MX Menu component.
MenuItemSkin@@\t\n|mx.skins.spark|The wireframe skin class for menu items in the MX Menu component.
MenuRadio@@\t\n|mx.skins.spark|The Spark skin class for the radio icon of the MX Menu component.
MenuRadioDisabled@@\t\n|mx.skins.spark|The Spark skin class for the disabled radio icon of the MX Menu component.
MenuSeparatorSkin@@\t\n|mx.skins.spark|The Spark skin class for the menu item separators in the MX Menu component.
PanelBorderSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX Panel component's border.
PopUpButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX PopUpButton component.
ProgressBarSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX ProgressBar component.
ProgressBarTrackSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX ProgressBar component's track.
ProgressIndeterminateSkin@@\t\n|mx.skins.spark|The Spark skin for the indeterminate state of the MX ProgressBar component.
ProgressMaskSkin@@\t\n|mx.skins.spark|The Spark skin for the mask of the MX ProgressBar component's determinate and indeterminate bars.
RadioButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the MX RadioButton component.
ScrollBarDownButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the down button of the MX ScrollBar component.
ScrollBarThumbSkin@@\t\n|mx.skins.spark|The Spark skin class for the thumb of the MX ScrollBar component.
ScrollBarTrackSkin@@\t\n|mx.skins.spark|The Spark skin class for the track of the MX ScrollBar component.
ScrollBarUpButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the up button of the MX ScrollBar component.
SliderThumbSkin@@\t\n|mx.skins.spark|The Spark skin class for the thumb of the MX Slider component.
SliderTrackHighlightSkin@@\t\n|mx.skins.spark|The Spark skin class for the track highlight of the MX Slider component.
SliderTrackSkin@@\t\n|mx.skins.spark|The Spark skin class for the track of the MX Slider component.
SparkSkinForHalo@@\t\n|mx.skins.spark|The SparkSkinForHalo class is the base class for Spark skins for MX components.
StepperDecrButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the down button of the MX NumericStepper component.
StepperIncrButtonSkin@@\t\n|mx.skins.spark|The Spark skin class for the up button of the MX NumericStepper component.
TabSkin@@\t\n|mx.skins.spark|The Spark skin class for the tabs of the MX TabNavigator container.
TextInputBorderSkin@@\t\n|mx.skins.spark|The Spark skin class for the border of the MX TextInput component.
AccordionHeaderSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the header of the MX Accordion container.
BorderSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX Border base class.
ButtonBarFirstButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the first button in the MX ButtonBar component.
ButtonBarLastButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the last button in the MX ButtonBar component.
ButtonBarMiddleButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the middle buttons in the MX ButtonBar component.
ButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX Button component.
CheckBoxSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX CheckBox component.
ColorPickerSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX ColorPicker component.
ComboBoxSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX ComboBox component.
ContainerBorderSkin@@\t\n|mx.skins.wireframe|Defines the border and background for the MX Container class's wireframe skin.
ControlBarSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX Panel component's border.
DataGridHeaderBackgroundSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the header background of the MX DataGrid component.
DataGridHeaderSeparatorSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the separator of the MX DataGrid component.
DataGridSortArrow@@\t\n|mx.skins.wireframe|The wireframe skin for the sort arrow in a column header in the MX DataGrid component.
DateChooserNextMonthSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the next month arrow of the MX DateChooser component.
DateChooserNextYearSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the next year arrow of the MX DateChooser component.
DateChooserPrevMonthSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the next month arrow of the MX DateChooser component.
DateChooserPrevYearSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the previous year arrow of the MX DateChooser component.
DateChooserRollOverIndicatorSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the rollover indicator of a MX DateChooser component.
DateChooserSelectionIndicatorSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the selection indicator of the MX DateChooser component.
DateChooserTodayIndicatorSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the current day indicator in a MX DateChooser component.
DefaultButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX default button.
DividerSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX DividedBox component.
DropDownSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX components that use drop downs.
EditableComboBoxSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the editable MX ComboBox component.
EmphasizedButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the emphasized state of the MX Button component.
LinkButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX LinkButton component.
MenuArrow@@\t\n|mx.skins.wireframe|The wireframe skin class for the branchIcon of a MX Menu component.
MenuArrowDisabled@@\t\n|mx.skins.wireframe|The wireframe skin class for the disabled branchIcon of a MX Menu component.
MenuBarItemSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for menu items in the MX MenuBar component.
MenuBarSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX MenuBar component.
MenuCheck@@\t\n|mx.skins.wireframe|The wireframe skin class for the check icon of the MX Menu component.
MenuCheckDisabled@@\t\n|mx.skins.wireframe|The wireframe skin class for the disabled check icon of a MX Menu component.
MenuRadio@@\t\n|mx.skins.wireframe|The wireframe skin class for the radio icon of the MX Menu component.
MenuRadioDisabled@@\t\n|mx.skins.wireframe|The wireframe skin class for the disabled radio icon of the MX Menu component.
MenuSeparatorSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the menu item separators in the MX menu component.
MenuSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX Menu component.
PanelBorderSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX Panel component's border.
PopUpButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX PopUpButton component.
ProgressBarSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX ProgressBar component.
ProgressBarTrackSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the track of the MX ProgressBar component.
ProgressIndeterminateSkin@@\t\n|mx.skins.wireframe|The wireframe skin for the indeterminate state of the MX ProgressBar component.
ProgressMaskSkin@@\t\n|mx.skins.wireframe|The wireframe skin for the mask of the MX ProgressBar component's determinate and indeterminate bars.
RadioButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX RadioButton component.
ScrollBarDownButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the down button of the MX ScrollBar component.
ScrollBarThumbSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the thumb of the MX ScrollBar component.
ScrollBarTrackSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the track of the MX ScrollBar component.
ScrollBarUpButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the up button of the MX ScrollBar component.
SliderThumbSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the thumb of the MX Slider component.
SliderTrackHighlightSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the track highlight of the MX Slider component.
SliderTrackSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the track of the MX Slider component.
StepperDecrButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the down button of the MX NumericStepper component.
StepperIncrButtonSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the up button of the MX NumericStepper component.
TabSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the tabs of the MX TabNavigator container.
TextAreaSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX TextArea component.
TextInputSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX TextInput component.
TitleWindowCloseButtonDownSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the close button's down state in the TitleWindow component.
TitleWindowCloseButtonOverSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the close button's over state in the TitleWindow component.
TitleWindowCloseButtonUpSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the close button's up state in the TitleWindow component.
ToolTipSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the border of the MX ToolTip component.
WindowedApplicationSkin@@\t\n|mx.skins.wireframe|The wireframe skin class for the MX WindowedApplication component.
CloseButtonSkin@@\t\n|mx.skins.wireframe.windowChrome|The wireframe skin class for the MX WindowedApplication component's close button.
MaximizeButtonSkin@@\t\n|mx.skins.wireframe.windowChrome|The wireframe skin class for the MX WindowedApplication component's maximize button.
MinimizeButtonSkin@@\t\n|mx.skins.wireframe.windowChrome|The wireframe skin class for the MX WindowedApplication component's minimize button.
RestoreButtonSkin@@\t\n|mx.skins.wireframe.windowChrome|The wireframe skin class for the MX WindowedApplication component's restore button.
StatusBarSkin@@\t\n|mx.skins.wireframe.windowChrome|The wireframe skin class for the MX WindowedApplication component's StatusBar border.
TitleBarSkin@@\t\n|mx.skins.wireframe.windowChrome|The wireframe skin class for the MX WindowedApplication component's TitleBar border.
AddChild@@\t\n|mx.states|The AddChild class adds a child display object, such as a component, to a container as part of a view state.
AddItems@@\t\n|mx.states|Documentation is not currently available.
InterruptionBehavior@@\t\n|mx.states|The InterruptionBehavior class defines constants for use with the interruptionBehavior property of the mx.states.Transition class.
IOverride@@\t\n|mx.states|The IOverride interface is used for view state overrides.
OverrideBase@@\t\n|mx.states|The OverrideBase class is the base class for the override classes used by view states.
RemoveChild@@\t\n|mx.states|The RemoveChild class removes a child display object, such as a component, from a container as part of a view state.
SetEventHandler@@\t\n|mx.states|The SetEventHandler class specifies an event handler that is active only during a particular view state.
SetProperty@@\t\n|mx.states|The SetProperty class specifies a property value that is in effect only during the parent view state.
SetStyle@@\t\n|mx.states|The SetStyle class specifies a style that is in effect only during the parent view state.
State@@\t\n|mx.states|The State class defines a view state, a particular view of a component.
Transition@@\t\n|mx.states|The Transition class defines a set of effects that play in response to a change of view state.
AdvancedStyleClient@@\t\n|mx.styles|A base class that can be used when implementing an object that uses the IAdvancedStyleClient interface.
CSSCondition@@\t\n|mx.styles|Represents a condition for a CSSSelector which is used to match a subset of components based on a particular property.
CSSConditionKind@@\t\n|mx.styles|An enumeration of the kinds of CSSCondition.
CSSSelector@@\t\n|mx.styles|Represents a selector node in a potential chain of selectors used to match CSS style declarations to components.
CSSStyleDeclaration@@\t\n|mx.styles|The CSSStyleDeclaration class represents a set of CSS style rules.
IAdvancedStyleClient@@\t\n|mx.styles|This interface describes the advanced properties that a component must implement to fully participate in the advanced style subsystem.
ISimpleStyleClient@@\t\n|mx.styles|This interface describes the properties and methods that an object must implement so that it can participate in the style subsystem.
IStyleClient@@\t\n|mx.styles|This interface describes the properties and methods that an object must implement so that it can fully participate in the style subsystem.
IStyleManager@@\t\n|mx.styles|The IStyleManager class manages the following: Which CSS style properties the class inherits Which style properties are colors, and therefore get special handling A list of strings that are aliases for color values This interface was used by Flex 2.0.1.
IStyleManager2@@\t\n|mx.styles|The IStyleManager2 class manages the following: Which CSS style properties the class inherits Which style properties are colors, and therefore get special handling A list of strings that are aliases for color values 
IStyleModule@@\t\n|mx.styles|Simple interface to manipulate style modules.
StyleManager@@\t\n|mx.styles|The StyleManager class manages the following: Which CSS style properties the class inherits Which style properties are colors, and therefore get special handling A list of strings that are aliases for color values 
StyleProxy@@\t\n|mx.styles|Wraps an object that implements the IAdvancedStyleClient interface.
ArrayUtil@@\t\n|mx.utils|The ArrayUtil utility class is an all-static class with methods for working with arrays within Flex.
Base64Decoder@@\t\n|mx.utils|A utility class to decode a Base64 encoded String to a ByteArray.
Base64Encoder@@\t\n|mx.utils|A utility class to encode a String or ByteArray as a Base64 encoded String.
ColorUtil@@\t\n|mx.utils|The ColorUtil class is an all-static class with methods for working with RGB colors within Flex.
DisplayUtil@@\t\n|mx.utils|The DisplayUtil utility class is an all-static class with utility methods related to DisplayObjects.
GraphicsUtil@@\t\n|mx.utils|The Graphics class is an all-static class with utility methods related to the Graphics class.
HSBColor@@\t\n|mx.utils|This class holds information for a color represented in HSB (Hue, Saturation, and Brightness) space.
IXMLNotifiable@@\t\n|mx.utils|The IXMLNotifiable interface.
LinkedList@@\t\n|mx.utils|Provides a generic doubly linked list implementation.
LinkedListNode@@\t\n|mx.utils|Class representing a doubly linked list node.
LoaderUtil@@\t\n|mx.utils|The LoaderUtil class defines utility methods for use with Flex RSLs and generic Loader instances.
NameUtil@@\t\n|mx.utils|The NameUtil utility class defines static methods for creating names for Flex objects.
ObjectProxy@@\t\n|mx.utils|This class provides the ability to track changes to an item managed by this proxy.
ObjectUtil@@\t\n|mx.utils|The ObjectUtil class is an all-static class with methods for working with Objects within Flex.
OnDemandEventDispatcher@@\t\n|mx.utils|OnDemandEventDispatcher serves as a base class for classes that dispatch events but expect listeners to be infrequent.
OrderedObject@@\t\n|mx.utils|OrderedObject acts as a wrapper to Object to preserve the ordering of the properties as they are added.
RpcClassAliasInitializer@@\t\n|mx.utils|The RpcClassAliasInitializer class registers all classes for AMF serialization needed by the Flex RPC library.
RPCObjectUtil@@\t\n|mx.utils|The RPCObjectUtil class is a subset of ObjectUtil, removing methods that create dependency issues when RPC messages are in a bootstrap loader.
RPCStringUtil@@\t\n|mx.utils|The RPCStringUtil class is a subset of StringUtil, removing methods that create dependency issues when RPC messages are in a bootstrap loader.
RPCUIDUtil@@\t\n|mx.utils|The RPCUIDUtil class is a copy of UIDUtil without some functions that cause dependency problems when RPC messages are put in a bootstrap loader.
SecurityUtil@@\t\n|mx.utils|Utilities for working with security-related issues.
SHA256@@\t\n|mx.utils|Implementation of SHA-256 hash algorithm as described in Federal Information Processing Standards Publication 180-2 at http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf 
StringUtil@@\t\n|mx.utils|The StringUtil utility class is an all-static class with methods for working with String objects within Flex.
UIDUtil@@\t\n|mx.utils|The UIDUtil class is an all-static class with methods for working with UIDs (unique identifiers) within Flex.
URLUtil@@\t\n|mx.utils|The URLUtil class is a static class with methods for working with full and relative URLs within Flex.
XMLNotifier@@\t\n|mx.utils|Used for watching changes to XML and XMLList objects.
XMLUtil@@\t\n|mx.utils|The XMLUtil class is an all-static class with methods for working with XML within Flex.
CreditCardValidator@@\t\n|mx.validators|The CreditCardValidator class validates that a credit card number is the correct length, has the correct prefix, and passes the Luhn mod10 algorithm for the specified card type.
CreditCardValidatorCardType@@\t\n|mx.validators|The CreditCardValidatorCardType class defines value constants for specifying the type of credit card to validate.
CurrencyValidator@@\t\n|mx.validators|The CurrencyValidator class ensures that a String represents a valid currency expression.
CurrencyValidatorAlignSymbol@@\t\n|mx.validators|The CurrencyValidatorAlignSymbol class defines value constants for specifying currency symbol alignment.
DateValidator@@\t\n|mx.validators|The DateValidator class validates that a String, Date, or Object contains a proper date and matches a specified format.
EmailValidator@@\t\n|mx.validators|The EmailValidator class validates that a String has a single@sign, a period in the domain name and that the top-level domain suffix has two, three, four, or six characters.
IValidator@@\t\n|mx.validators|This interface specifies the methods and properties that a Validator object must implement.
IValidatorListener@@\t\n|mx.validators|The interface that components implement to support the Flex data validation mechanism.
NumberValidator@@\t\n|mx.validators|The NumberValidator class ensures that a String represents a valid number.
NumberValidatorDomainType@@\t\n|mx.validators|The NumberValidatorDomainType class defines the values for the domain property of the NumberValidator class.
PhoneNumberValidator@@\t\n|mx.validators|The PhoneNumberValidator class validates that a string is a valid phone number.
RegExpValidationResult@@\t\n|mx.validators|The RegExpValidator class dispatches the valid and invalid events.
RegExpValidator@@\t\n|mx.validators|The RegExpValidator class lets you use a regular expression to validate a field.
SocialSecurityValidator@@\t\n|mx.validators|The SocialSecurityValidator class validates that a String is a valid United States Social Security number.
StringValidator@@\t\n|mx.validators|The StringValidator class validates that the length of a String is within a specified range.
ValidationResult@@\t\n|mx.validators|The ValidationResult class contains the results of a validation.
Validator@@\t\n|mx.validators|The Validator class is the base class for all Flex validators.
ZipCodeValidator@@\t\n|mx.validators|The ZipCodeValidator class validates that a String has the correct length and format for a five-digit ZIP code, a five-digit+four-digit United States ZIP code, or Canadian postal code.
ZipCodeValidatorDomainType@@\t\n|mx.validators|The ZipCodeValidatorDomainType class defines the values for the domain property of the ZipCodeValidator class, which you use to specify the type of ZIP code to validate.
ButtonBarBaseAccImpl@@\t\n|spark.accessibility|ButtonBarBaseAccImpl is the accessibility implementation class for spark.components.supportClasses.ButtonBarBase.
ButtonBaseAccImpl@@\t\n|spark.accessibility|ButtonBaseAccImpl is the accessibility implementation class for spark.components.supportClasses.ButtonBase.
CheckBoxAccImpl@@\t\n|spark.accessibility|CheckBoxAccImpl is the accessibility implementation class for spark.components.CheckBox.
ComboBoxAccImpl@@\t\n|spark.accessibility|ComboBoxAccImpl is the accessibility implementation class for spark.components.ComboBox.
DataGridAccImpl@@\t\n|spark.accessibility|This is the accessibility implementation class for spark.components.DataGrid.
DropDownListBaseAccImpl@@\t\n|spark.accessibility|DropDownListAccImpl is the accessibility implementation class for spark.components.supportClasses.DropDownListBase.
ListAccImpl@@\t\n|spark.accessibility|ListAccImpl is the accessibility implementation class for spark.components.List.
ListBaseAccImpl@@\t\n|spark.accessibility|ListBaseAccImpl is a superclass of the Spark ListAccImpl, DropDownListAccImpl, ComboBoxAccImpl, ButtonBarBaseAccImpl, and TabBarAccImpl.
NumericStepperAccImpl@@\t\n|spark.accessibility|NumericStepperAccImpl is the accessibility implementation class for spark.components.NumericStepper.
PanelAccImpl@@\t\n|spark.accessibility|PanelAccImpl is the accessibility implementation class for spark.components.Panel.
RadioButtonAccImpl@@\t\n|spark.accessibility|RadioButtonAccImpl is the accessibility implementation class for spark.components.RadioButton.
RichEditableTextAccImpl@@\t\n|spark.accessibility|RichEditableTextAccImpl is the accessibility implementation class for spark.components.RichEditableText.
SliderBaseAccImpl@@\t\n|spark.accessibility|SliderBaseAccImpl is the accessibility implementation class for spark.components.supportClasses.SliderBase.
SpinnerAccImpl@@\t\n|spark.accessibility|SpinnerAccImpl is the accessibility implementation class for spark.components.Spinner.
TabBarAccImpl@@\t\n|spark.accessibility|TabBarAccImpl is the accessibility implementation class for spark.components.TabBar.
TextBaseAccImpl@@\t\n|spark.accessibility|TextBaseAccImpl is the accessibility implementation class for spark.components.TextBase.
TitleWindowAccImpl@@\t\n|spark.accessibility|TitleWindowAccImpl is the accessibility implementation class for spark.components.TitleWindow.
ToggleButtonAccImpl@@\t\n|spark.accessibility|ToggleButtonAccImpl is the accessibility implementation class for spark.components.ToggleButton.
VideoPlayerAccImpl@@\t\n|spark.accessibility|VideoPlayerAccImpl is the accessibility implementation class for spark.components.VideoPlayer.
SparkRichEditableTextAutomationHelper@@\t\n|spark.automation.delegates|Utility class that facilitates replay of text input and selection.
SparkApplicationAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the Application class.
SparkBorderContainerAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the BorderContainer class.
SparkButtonAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the Button control.
SparkButtonBarAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the ButtonBar control.
SparkButtonBarButtonAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the ButtonBarButton control.
SparkCheckBoxAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the CheckBox control.
SparkComboBoxAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the ComboBox control.
SparkDataGridAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the DataGrid class.
SparkDataGroupAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the DataGroup control.
SparkDropDownListAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the DropDownList control.
SparkFormAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the Form class.
SparkFormItemAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the FormItem class.
SparkGroupAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the Group control.
SparkImageAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the Image control.
SparkLabelAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the Label control.
SparkListAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the List class.
SparkNavigatorContentAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the NavigatorContent control.
SparkNumericStepperAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the NumericStepper control.
SparkPanelAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the Panel class.
SparkPopUpAnchorAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the PopUpAnchor component.
SparkRadioButtonAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the RadioButton control.
SparkRichEditableTextAutomationImpl@@\t\n|spark.automation.delegates.components|Utility class that facilitates replay of text input and selection.
SparkSkinnableContainerAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the SkinnableContainer class.
SparkSkinnableDataContainerAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the SkinnableContainer class.
SparkSpinnerAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the Spinner control.
SparkTabBarAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the TabBar class.
SparkTextAreaAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the TextArea control.
SparkTextInputAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the TextInput control.
SparkTileGroupAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the TileGroup control.
SparkTitleWindowAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the TitleWindow class.
SparkToggleButtonAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the ToggleButton control.
SparkVideoDisplayAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the VideoDisplay control.
SparkVideoPlayerAutomationImpl@@\t\n|spark.automation.delegates.components|Defines methods and properties required to perform instrumentation for the VideoPlayer control.
SparkWindowAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the Canvas class.
SparkWindowedApplicationAutomationImpl@@\t\n|spark.automation.delegates.components|Defines the methods and properties required to perform instrumentation for the SparkWindowedApplication class.
SparkGridItemRendererAutomationImpl@@\t\n|spark.automation.delegates.components.gridClasses|Defines methods and properties required to perform instrumentation for the GridItemRenderer component.
SparkMuteButtonAutomationImpl@@\t\n|spark.automation.delegates.components.mediaClasses|Defines methods and properties required to perform instrumentation for the MuteButton control.
SparkVolumeBarAutomationImpl@@\t\n|spark.automation.delegates.components.mediaClasses|Defines methods and properties required to perform instrumentation for the VolumeBar control.
SparkButtonBarBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the ButtonBarBase control.
SparkButtonBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the ButtonBase control.
SparkDropDownListBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the DropDownListBase control.
SparkGroupBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the GroupBase control.
SparkItemRendererAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the ItemRenderer class for spark.
SparkListBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the ListBase class.
SparkRangeAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the Range control.
SparkScrollBarBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the ScrollBarBase class.
SparkSkinnableComponentAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the SkinnableComponent control.
SparkSkinnableContainerBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the SkinnableContainerBase control.
SparkSkinnableTextBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the SkinnableTextBase control.
SparkSliderBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the SliderBarBase class.
SparkTextBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the TextBase control.
SparkToggleButtonBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the ToggleButtonBase control.
SparkTrackBaseAutomationImpl@@\t\n|spark.automation.delegates.components.supportClasses|Defines methods and properties required to perform instrumentation for the TrackBase control.
SparkDefaultComplexItemRendererAutomationImpl@@\t\n|spark.automation.delegates.skins.spark|Defines methods and properties required to perform instrumentation for the ItemRenderer class for spark.
SparkDefaultGridHeaderRendererAutomationImpl@@\t\n|spark.automation.delegates.skins.spark|Defines methods and properties required to perform instrumentation for the ItemRenderer class for spark.
SparkDefaultGridItemRendererAutomationImpl@@\t\n|spark.automation.delegates.skins.spark|Defines methods and properties required to perform instrumentation for the ItemRenderer class for spark.
SparkDefaultItemRendererAutomationImpl@@\t\n|spark.automation.delegates.skins.spark|Defines methods and properties required to perform instrumentation for the ItemRenderer class for spark.
SparkUITextFieldGridItemRendererAutomationImpl@@\t\n|spark.automation.delegates.skins.spark|Defines methods and properties required to perform instrumentation for the UITextFieldGridItemRenderer class for spark.
SparkDataGridItemSelectEvent@@\t\n|spark.automation.events|The SparkDataGridItemSelectEvent class represents event objects that are dispatched when an item in a datagrid control is selected or deselected.
SparkListItemSelectEvent@@\t\n|spark.automation.events|The SparkListItemSelectEvent class represents event objects that are dispatched when an item in a list-based control such as a Menu, DataGrid, or Tree control is selected or deselected.
SparkValueChangeAutomationEvent@@\t\n|spark.automation.events|The SparkValueChangeAutomationEvent class represents event objects that are dispatched when the value in a control changes.
NumericDataProvider@@\t\n|spark.collections|This IList class generates items that are a sequential series of numbers.
Sort@@\t\n|spark.collections|Provides the sorting information required to establish a sort on an existing view (ICollectionView interface or class that implements the interface).
SortField@@\t\n|spark.collections|Provides the sorting information required to establish a sort on a field or property in a collection view.
ActionBar@@\t\n|spark.components|The ActionBar class defines a component that includes title, navigation, and action content groups.
ActionBarDefaultButtonAppearance@@\t\n|spark.components|The ActionBarDefaultButtonAppearance class defines the constants for the allowed values of the defaultButtonAppearance style of ActionBar.
Application@@\t\n|spark.components|Flex defines a default, or Application, container that lets you start adding content to your application without explicitly defining another container.
ArrowDirection@@\t\n|spark.components|Enumeration of arrow directions for use in visual components.
BorderContainer@@\t\n|spark.components|The BorderContainer class defines a set of CSS styles that control the appearance of the border and background fill of the container.
BusyIndicator@@\t\n|spark.components|The BusyIndicator defines a component to display when a long-running operation is in progress.
Button@@\t\n|spark.components|The Button component is a commonly used rectangular button.
ButtonBar@@\t\n|spark.components|The ButtonBar control defines a horizontal group of logically related buttons with a common look and navigation.
ButtonBarButton@@\t\n|spark.components|The ButtonBarButton class defines the custom item renderer used by the ButtonBar control.
Callout@@\t\n|spark.components|The Callout container is a SkinnablePopUpContainer that functions as a pop-up with additional owner-relative positioning options similar to PopUpAnchor.
CalloutButton@@\t\n|spark.components|The CalloutButton control is a drop down component that defines a button to open and close a Callout container.
CalloutPosition@@\t\n|spark.components|The CalloutPosition calss defines the enumeration of horizontal and vertical positions of the Callout component relative to the owner.
CheckBox@@\t\n|spark.components|The CheckBox component consists of an optional label and a small box that can contain a check mark or not.
ComboBox@@\t\n|spark.components|The ComboBox control is a child class of the DropDownListBase control.
ContentBackgroundAppearance@@\t\n|spark.components|The ContentBackgroundAppearance class defines the constants for the allowed values of the contentBackgroundAppearance style of Callout.
DataGrid@@\t\n|spark.components|The DataGrid displays a row of column headings above a scrollable grid.
DataGroup@@\t\n|spark.components|The DataGroup class is the base container class for data items.
DataRenderer@@\t\n|spark.components|The DataRenderer class is the base class for data components in Spark.
DateSpinner@@\t\n|spark.components|The DateSpinner control presents an interface for picking a particular date or time.
DropDownList@@\t\n|spark.components|The DropDownList control contains a drop-down list from which the user can select a single value.
Form@@\t\n|spark.components|The Spark Form container lets you control the layout of a form, mark form fields as required or optional, handle error messages, and bind your form data to the Flex data model to perform data checking and validation.
FormHeading@@\t\n|spark.components|The Spark FormHeading container displays a heading for a group of controls inside a Spark Form container.
FormItem@@\t\n|spark.components|The FormItem container defines the following in a Spark From: A single label. A sequence label. One or more child controls or containers. Help content that provides a description of the form item or instructions for filling it in. Required indicator to indicate if a form item has to be filled Children can be controls or other containers.
Grid@@\t\n|spark.components|The Grid control displays a list of data items called its data provider in a scrollable table or "grid", one item per row.
GridColumnHeaderGroup@@\t\n|spark.components|The GridColumnHeaderGroup class displays a row of column headers and separators aligned with the grid's layout.
Group@@\t\n|spark.components|The Group class is the base container class for visual elements.
HGroup@@\t\n|spark.components|The HGroup container is an instance of the Group container that uses the HorizontalLayout class.
HScrollBar@@\t\n|spark.components|The HScrollBar (horizontal scrollbar) control lets you control the portion of data that is displayed when there is too much data to fit horizontally in a display area.
HSlider@@\t\n|spark.components|The HSlider (horizontal slider) control lets users select a value by moving a slider thumb between the end points of the slider track.
IconItemRenderer@@\t\n|spark.components|The IconItemRenderer class is a performant item renderer optimized for mobile devices.
IconPlacement@@\t\n|spark.components|The IconPlacement class defines the constants for the allowed values of the iconPlacement style of a Button, CheckBox, RadioButton or ToggleButton.
IItemRenderer@@\t\n|spark.components|The IItemRenderer interface defines the basic set of APIs that a class must implement to create an item renderer that can communicate with a host component.
IItemRendererOwner@@\t\n|spark.components|The IItemRendererOwner interface defines the basic set of APIs that a class must implement to support items renderers.
Image@@\t\n|spark.components|The Spark Image control is a skinnable component that provides a customizable loading state, chrome, and error state.
Label@@\t\n|spark.components|Label is a low-level UIComponent that can render one or more lines of uniformly-formatted text.
LabelItemRenderer@@\t\n|spark.components|The LabelItemRenderer class defines the default item renderer for a list-based control in the mobile theme.
List@@\t\n|spark.components|The List control displays a vertical list of items.
NavigatorContent@@\t\n|spark.components|The NavigatorContent class defines a Spark container that can be used in an MX navigator container, such as the ViewStack, TabNavigator and Accordion containers.
NumericStepper@@\t\n|spark.components|The NumericStepper control lets you select a number from an ordered set.
Panel@@\t\n|spark.components|The Panel class defines a container that includes a title bar, a caption, a border, and a content area for its children.
PopUpAnchor@@\t\n|spark.components|The PopUpAnchor component is used to position a control that pops up or drops down, such as a DropDownList component, in layout.
PopUpPosition@@\t\n|spark.components|Enumerated type for the PopUpAnchor.popUpPosition property.
RadioButton@@\t\n|spark.components|The RadioButton component allows the user make a single choice within a set of mutually exclusive choices.
RadioButtonGroup@@\t\n|spark.components|The RadioButtonGroup component defines a group of RadioButton components that act as a single mutually exclusive component; therefore, a user can select only one RadioButton component at a time.
ResizeMode@@\t\n|spark.components|The ResizeMode class defines an enumeration of the modes a component uses to resize its children in the dimensions specified by the layout system.
RichEditableText@@\t\n|spark.components|RichEditableText is a low-level UIComponent for displaying, scrolling, selecting, and editing richly-formatted text.
RichText@@\t\n|spark.components|RichText is a low-level UIComponent that can display one or more lines of richly-formatted text and embedded images.
Scroller@@\t\n|spark.components|The Scroller component displays a single scrollable component, called a viewport, and horizontal and vertical scroll bars.
ScrollSnappingMode@@\t\n|spark.components|The ScrollSnappingMode class defines the enumeration values for the scrollSnappingMode property of the List and Scroller classes.
SkinnableContainer@@\t\n|spark.components|The SkinnableContainer class is the base class for skinnable containers that have visual content.
SkinnableDataContainer@@\t\n|spark.components|The SkinnableDataContainer class is the base container class for data items.
SkinnablePopUpContainer@@\t\n|spark.components|The SkinnablePopUpContainer class is a SkinnableContainer that functions as a pop-up.
Spinner@@\t\n|spark.components|A Spinner component selects a value from an ordered set.
SpinnerList@@\t\n|spark.components|The SpinnerList component displays a list of items.
SpinnerListContainer@@\t\n|spark.components|Container for one or more SpinnerList controls.
SpinnerListItemRenderer@@\t\n|spark.components|The SpinnerListItemRenderer class defines the default item renderer for a SpinnerList control in the mobile theme.
SplitViewNavigator@@\t\n|spark.components|The SplitViewNavigator container displays multiple ViewNavigator or TabbedViewNavigator components at the same time in a single container.
TabBar@@\t\n|spark.components|The TabBar class displays a set of identical tabs.
TabbedViewNavigator@@\t\n|spark.components|The TabbedViewNavigator class is a container that manages a collection of view navigator containers.
TabbedViewNavigatorApplication@@\t\n|spark.components|The TabbedViewNavigatorApplication container defines an application with multiple sections.
TextArea@@\t\n|spark.components|TextArea is a text-entry control that lets users enter and edit multiple lines of formatted text.
TextInput@@\t\n|spark.components|TextInput is a text-entry control that lets users enter and edit a single line of uniformly-formatted text.
TextSelectionHighlighting@@\t\n|spark.components|This class specifies the allowed values for the selectionHighlighting property of the RichEditableText control, and controls that use RichEditableText as a subcomponent (Spark TextInput and Spark TextArea).
TileGroup@@\t\n|spark.components|The TileGroup container is an instance of the Group container that uses the TileLayout class.
TitleWindow@@\t\n|spark.components|The TitleWindow class extends Panel to include a close button and move area.
ToggleButton@@\t\n|spark.components|The ToggleButton component defines a toggle button.
ToggleSwitch@@\t\n|spark.components|The Spark ToggleSwitch control defines a binary switch that can be in the selected or unselected position.
VGroup@@\t\n|spark.components|The VGroup container is an instance of the Group container that uses the VerticalLayout class.
VideoDisplay@@\t\n|spark.components|The VideoDisplay class is chromeless video player that supports progressive download, multi-bitrate, and streaming video.
VideoPlayer@@\t\n|spark.components|The VideoPlayer control is a skinnable video player that supports progressive download, multi-bitrate streaming, and streaming video.
View@@\t\n|spark.components|The View class is the base container class for all views used by view navigators.
ViewMenu@@\t\n|spark.components|The ViewMenu container defines a menu in a View container.
ViewMenuItem@@\t\n|spark.components|The ViewMenuItem control displays a label and icon for a menu item in the ViewMenu container.
ViewNavigator@@\t\n|spark.components|The ViewNavigator component is a container that consists of a collection of View objects, where only the top most view is visible and active.
ViewNavigatorApplication@@\t\n|spark.components|The ViewNavigatorApplication class is an application class meant to provide a simple framework for applications that employ a view-based navigation model.
VScrollBar@@\t\n|spark.components|The VScrollBar (vertical scrollbar) control lets you control the portion of data that is displayed when there is too much data to fit vertically in a display area.
VSlider@@\t\n|spark.components|The VSlider (vertical slider) control lets users select a value by moving a slider thumb between the end points of the slider track.
Window@@\t\n|spark.components|The Window is a top-level container for additional windows in an AIR desktop application.
WindowedApplication@@\t\n|spark.components|The WindowedApplication defines the application container that you use to create Flex applications for AIR applications.
DateSelectorDisplayMode@@\t\n|spark.components.calendarClasses|The DateSelectorMode class defines the valid constant values for the displayMode property of the Spark DateSpinner control.
DateSpinnerItemRenderer@@\t\n|spark.components.calendarClasses|The DateSpinnerItemRenderer class defines the default item renderer for a DateSpinner control in the mobile theme.
CellPosition@@\t\n|spark.components.gridClasses|The CellPosition class defines a data structure used by the Spark data grid classes to represent selected cells in the control.
CellRegion@@\t\n|spark.components.gridClasses|The CellRegion class defines a data structure used by the Spark data grid classes to represent a rectangular region of cells in the control.
ComboBoxGridItemEditor@@\t\n|spark.components.gridClasses|The ComboBoxGridItemEditor class defines an item renderer for use with the Spark grid controls, such as DataGrid and Grid.
DefaultGridItemEditor@@\t\n|spark.components.gridClasses|The DefaultGridItemEditor class defines the default item renderer used by the Spark grid controls, such as DataGrid and Grid.
GridColumn@@\t\n|spark.components.gridClasses|The GridColumn class defines a column of a Spark grid control, such as the Spark DataGrid or Grid control.
GridItemEditor@@\t\n|spark.components.gridClasses|The GridItemEditor class defines the base class for custom item editors for the Spark grid controls, such as DataGrid and Grid.
GridItemRenderer@@\t\n|spark.components.gridClasses|The GridItemRenderer class defines the base class for custom item renderers for the Spark grid controls, such as DataGrid and Grid.
GridLayer@@\t\n|spark.components.gridClasses|The GridLayer class defines a container used for the layers of the Grid control's visual elements.
GridSelectionMode@@\t\n|spark.components.gridClasses|The GridSelectionMode class defines the valid constant values for the selectionMode property of the Spark DataGrid and Grid controls.
IDataGridElement@@\t\n|spark.components.gridClasses|Visual elements of the Spark DataGrid control that must remain in sync with the grid's layout and scroll position must implement this interface.
IGridItemEditor@@\t\n|spark.components.gridClasses|The IGridItemEditor interface defines the interface that item editors for the Spark DataGrid and Spark Grid controls must implement.
IGridItemRenderer@@\t\n|spark.components.gridClasses|The IGridItemRenderer interface must be implemented by DataGrid item renderers.
IGridVisualElement@@\t\n|spark.components.gridClasses|This interface provides a method that dynamically created visual elements can use to configure themselves before they're displayed.
DynamicStreamingVideoItem@@\t\n|spark.components.mediaClasses|The DynamicStreamingVideoItem class represents a video stream on the server plus a bitrate for that stream.
DynamicStreamingVideoSource@@\t\n|spark.components.mediaClasses|The DynamicStreamingVideoSource class represents a streaming video source and can be used for streaming pre-recorded video or live streaming video.
MuteButton@@\t\n|spark.components.mediaClasses|The MuteButton class defines the mute button used by the VideoPlayer control.
ScrubBar@@\t\n|spark.components.mediaClasses|The VideoScrubBar class defines a video timeline that shows the current play head location in the video, the amount of the video previously played, and the loaded in part of the video.
VolumeBar@@\t\n|spark.components.mediaClasses|The VolumeBar class defines a drop-down slider to control the volume of the VideoDisplay control.
ButtonBarBase@@\t\n|spark.components.supportClasses|The ButtonBarBase class defines the common behavior for the ButtonBar, TabBar and similar subclasses.
ButtonBarHorizontalLayout@@\t\n|spark.components.supportClasses|The ButtonBarHorizontalLayout class is a layout specifically designed for the Spark ButtonBar skins.
ButtonBase@@\t\n|spark.components.supportClasses|The ButtonBase class is the base class for the all Spark button components.
DisplayLayer@@\t\n|spark.components.supportClasses|A DisplayLayer class maintains an ordered list of DisplayObjects sorted on depth.
DropDownController@@\t\n|spark.components.supportClasses|The DropDownController class handles the mouse, keyboard, and focus interactions for an anchor button and its associated drop down.
DropDownListBase@@\t\n|spark.components.supportClasses|The DropDownListBase control contains a drop-down list from which the user can select a single value.
GroupBase@@\t\n|spark.components.supportClasses|The GroupBase class defines the base class for components that display visual elements.
InteractionState@@\t\n|spark.components.supportClasses|Values for the state property of the InteractionStateDetector class.
InteractionStateDetector@@\t\n|spark.components.supportClasses|A helper class for components to use to help them determine if they should be in the up, over, or down states.
ItemRenderer@@\t\n|spark.components.supportClasses|The ItemRenderer class is the base class for Spark item renderers.
ListBase@@\t\n|spark.components.supportClasses|The ListBase class is the base class for all components that support selection.
ListItemDragProxy@@\t\n|spark.components.supportClasses|The ListItemDragProxy class defines the default drag proxy used when dragging from a Spark List based control.
OverlayDepth@@\t\n|spark.components.supportClasses|The OverlayDepth class defines the default depth values for various overlay elements used by Flex.
Range@@\t\n|spark.components.supportClasses|The Range class holds a value and an allowed range for that value, defined by minimum and maximum properties.
ScrollBarBase@@\t\n|spark.components.supportClasses|The ScrollBarBase class helps to position the portion of data that is displayed when there is too much data to fit in a display area.
Skin@@\t\n|spark.components.supportClasses|The Skin class defines the base class for all skins used by skinnable components.
SkinnableComponent@@\t\n|spark.components.supportClasses|The SkinnableComponent class defines the base class for skinnable components.
SkinnableContainerBase@@\t\n|spark.components.supportClasses|Base class for skinnable container components.
SkinnableTextBase@@\t\n|spark.components.supportClasses|The base class for skinnable components, such as the Spark TextInput and TextArea, that include an instance of IEditableText in their skin to provide text display, scrolling, selection, and editing.
SliderBase@@\t\n|spark.components.supportClasses|The SliderBase class lets users select a value by moving a slider thumb between the end points of the slider track.
StyleableStageText@@\t\n|spark.components.supportClasses|The StyleableStageText class is a text primitive for use in ActionScript skins which is used to present the user with a native text input field.
StyleableTextField@@\t\n|spark.components.supportClasses|The StyleableTextField class is a text primitive for use in ActionScript skins and item renderers.
TextBase@@\t\n|spark.components.supportClasses|The base class for Spark text controls such as Label and RichText which display text using CSS styles for the default format.
TextInputOperation@@\t\n|spark.components.supportClasses|The TextInputOperation class represents a text input operation.
ToggleButtonBase@@\t\n|spark.components.supportClasses|The ToggleButtonBase component is the base class for the Spark button components that support the selected property.
TrackBase@@\t\n|spark.components.supportClasses|The TrackBase class is a base class for components with a track and one or more thumb buttons, such as Slider and ScrollBar.
ViewNavigatorAction@@\t\n|spark.components.supportClasses|The ViewNavigatorAction class defines the constant values for the action property of ViewNavigatorEvent class.
ViewNavigatorApplicationBase@@\t\n|spark.components.supportClasses|The ViewNavigatorApplicationBase class is the base class used for all view-based application types.
ViewNavigatorBase@@\t\n|spark.components.supportClasses|The ViewNavigatorBase class defines the base class logic and interface used by view navigators.
ViewReturnObject@@\t\n|spark.components.supportClasses|The ViewReturnObject class encapsulates the return value of a view when it is popped off a navigation stack.
TitleBar@@\t\n|spark.components.windowClasses|The TitleBar class defines the default title bar for a WindowedApplication or a Window container.
ContainerDestructionPolicy@@\t\n|spark.core|The ContainerCreationPolicy class defines the constant values for the destructionPolicy property of spark view classes.
ContentCache@@\t\n|spark.core|Provides a caching and queuing image content loader suitable for using a shared image cache for the BitmapImage and spark Image components.
ContentRequest@@\t\n|spark.core|Represents an IContentLoader content request instance returned from IContentLoader's load() method.
DisplayObjectSharingMode@@\t\n|spark.core|The DisplayObjectSharingMode class defines the possible values for the displayObjectSharingMode property of the IGraphicElement class.
IContentLoader@@\t\n|spark.core|Provides custom image/content loader for BitmapImage instances.
IDisplayText@@\t\n|spark.core|The IDisplayText interface defines the properties and methods for simple text display.
IEditableText@@\t\n|spark.core|The IEditableText interface defines the properties and methods for editable text.
IGraphicElement@@\t\n|spark.core|The IGraphicElement is implemented by IVisualElements that take advantage of the parent IGraphicElementContainer DisplayObject management.
IGraphicElementContainer@@\t\n|spark.core|The IGraphicElementContainer is the minimal contract for a container class to support IGraphicElement children.
ISharedDisplayObject@@\t\n|spark.core|The ISharedDisplayObject interface defines the minimum requirements that a DisplayObject must implement to be shared between IGraphicElement objects.
IViewport@@\t\n|spark.core|The IViewport interface is implemented by components that support a viewport.
MaskType@@\t\n|spark.core|The MaskType class defines the possible values for the maskType property of the GraphicElement class.
NavigationUnit@@\t\n|spark.core|The NavigationUnit class defines the possible values for the getVerticalScrollPositionDelta() and getHorizontalScrollPositionDelta() methods of the IViewport class.
SpriteVisualElement@@\t\n|spark.core|The SpriteVisualElement class is a light-weight Sprite-based implemention of the IVisualElement interface.
AddAction@@\t\n|spark.effects|The AddAction class defines an action effect that corresponds to the AddChild property of a view state definition.
Animate@@\t\n|spark.effects|This Animate effect animates an arbitrary set of properties between values.
AnimateColor@@\t\n|spark.effects|The AnimateColor effect animates a change in a color property over time, interpolating between given from/to color values on a per-channel basis.
AnimateFilter@@\t\n|spark.effects|The AnimateFilter effect applies an mx.filters.IBitmapFilter instance to the target and allows you to animate properties of the filter between values.
AnimateTransform@@\t\n|spark.effects|The AnimateTransform effect controls all transform-related animations on target objects.
AnimateTransform3D@@\t\n|spark.effects|The AnimateTransform3D effect extends the abilities of the AnimateTransform effect to 3D transform properties.
AnimateTransitionShader@@\t\n|spark.effects|The AnimateTransitionShader effect animates a transition between two bitmaps, one representing the start state (bitmapFrom), and the other representing the end state (bitmapTo).
CallAction@@\t\n|spark.effects|The CallAction effect calls the function specified by functionName property on the target object with optional arguments specified by the args property.
CrossFade@@\t\n|spark.effects|The CrossFade effect performs a bitmap transition effect by running a crossfade between the first and second bitmaps.
Fade@@\t\n|spark.effects|The Fade effect animates the alpha property of a component.
Move@@\t\n|spark.effects|The Move effect move the target object in the x and y directions.
Move3D@@\t\n|spark.effects|The Move3D class moves a target object in the x, y, and z dimensions.
RemoveAction@@\t\n|spark.effects|The RemoveAction class defines an action effect that corresponds to the RemoveChild property of a view state definition.
Resize@@\t\n|spark.effects|The Resize effect changes the width, height, or both dimensions of a component over a specified time interval.
Rotate@@\t\n|spark.effects|The Rotate effect rotates a target object in the x, y plane around the transform center.
Rotate3D@@\t\n|spark.effects|The Rotate3D class rotate a target object in three dimensions around the x, y, or z axes.
Scale@@\t\n|spark.effects|The Scale effect scales a target object in the x and y directions around the transform center.
Scale3D@@\t\n|spark.effects|The Scale3D class scales a target object in three dimensions around the transform center.
SetAction@@\t\n|spark.effects|The SetAction class defines an action effect that sets the value of a named property or style.
Wipe@@\t\n|spark.effects|The Wipe effect performs a bitmap transition effect by running a directional wipe between the first and second bitmaps.
WipeDirection@@\t\n|spark.effects|The WipeDirection class defines the values for the direction property of the Wipe class.
Animation@@\t\n|spark.effects.animation|The Animation class defines an animation that happens between the start and end values of a property over a specified period of time.
IAnimationTarget@@\t\n|spark.effects.animation|The IAnimationTarget interface is implemented by classes that support the events for an Animation instance.
Keyframe@@\t\n|spark.effects.animation|The Keyframe class defines the value of a property at a specific time during an effect.
MotionPath@@\t\n|spark.effects.animation|The MotionPath class defines the collection of Keyframes objects for an effect, and the name of the property on the target to animate.
RepeatBehavior@@\t\n|spark.effects.animation|The RepeatBehavior class defines constants for use with repeatBehavior property of the Animate and Animation classes.
SimpleMotionPath@@\t\n|spark.effects.animation|The SimpleMotionPath class specifies the name of a property, and the values that that property takes over time, for instances of the Animate effect.
Bounce@@\t\n|spark.effects.easing|The Bounce class implements easing functionality simulating gravity pulling on and bouncing the target object.
EaseInOutBase@@\t\n|spark.effects.easing|The EaseInOutBase class is the base class that provide easing capability.
EasingFraction@@\t\n|spark.effects.easing|The EasingFraction class defines constants for the easeInFraction property of the EaseInOutBase class.
Elastic@@\t\n|spark.effects.easing|The Elastic class implements easing functionality where the target object movement is defined by an exponentially decaying sine wave.
IEaser@@\t\n|spark.effects.easing|The IEaser interface is implemented by classes that provide time-easing functionality for the Animation class.
Linear@@\t\n|spark.effects.easing|The Linear class defines an easing with three phases: acceleration, uniform motion, and deceleration.
Power@@\t\n|spark.effects.easing|The Power class defines the easing functionality using a polynomial expression.
Sine@@\t\n|spark.effects.easing|The Sine class defines easing functionality using a Sine function.
HSBInterpolator@@\t\n|spark.effects.interpolation|The HSBInterpolator class provides Hue, Saturation, and Brightness (HSB) color interpolation between RGB uint start and end values.
IInterpolator@@\t\n|spark.effects.interpolation|The IInterpolator interface is implemented by classes that calculate values for the Animation class.
MultiValueInterpolator@@\t\n|spark.effects.interpolation|The MultiValueInterpolator class interpolates each element of Arrays or Vectors of start and end elements separately, using another interpolator to do the interpolation for each element.
NumberInterpolator@@\t\n|spark.effects.interpolation|The NumberInterpolator class provides interpolation between start and end values represented as Number instances.
RGBInterpolator@@\t\n|spark.effects.interpolation|The RGBInterpolator class provides interpolation between uint start and end values that represent RGB colors.
AddActionInstance@@\t\n|spark.effects.supportClasses|The AddActionInstance class implements the instance class for the AddAction effect.
AnimateColorInstance@@\t\n|spark.effects.supportClasses|The AnimateColorInstance class is the instance class of the AnimateColor effect, which animates a change in color by interpolating the from/to values per color channel.
AnimateFilterInstance@@\t\n|spark.effects.supportClasses|The AnimateFilterInstance class implements the instance class for the AnimateFilter effect.
AnimateInstance@@\t\n|spark.effects.supportClasses|The AnimateInstance class implements the instance class for the Animate effect.
AnimateTransformInstance@@\t\n|spark.effects.supportClasses|The AnimateTransformInstance class implements the instance class for the AnimateTransform effect.
AnimateTransitionShaderInstance@@\t\n|spark.effects.supportClasses|The AnimateTransitionShaderInstance class implements the instance class for the AnimateTransitionShader effect.
CallActionInstance@@\t\n|spark.effects.supportClasses|The CallActionInstance class implements the instance class for the CallAction effect.
FadeInstance@@\t\n|spark.effects.supportClasses|The FadeInstance class implements the instance class for the Fade effect.
RemoveActionInstance@@\t\n|spark.effects.supportClasses|The RemoveActionInstance class implements the instance class for the RemoveAction effect.
ResizeInstance@@\t\n|spark.effects.supportClasses|The ResizeInstance class implements the instance class for the Resize effect.
SetActionInstance@@\t\n|spark.effects.supportClasses|The SetActionInstance class implements the instance class for the SetAction effect.
DropDownEvent@@\t\n|spark.events|The DropDownEvent class represents the event object passed to the event listener for the open and close events.
ElementExistenceEvent@@\t\n|spark.events|The ElementExistenceEvent class represents events that are dispatched when an element of a Group is created or destroyed.
GridCaretEvent@@\t\n|spark.events|The GridCaretEvent class represents events that are dispatched when the caret changes in a Spark DataGrid control as the result of user interaction.
GridEvent@@\t\n|spark.events|The GridEvent class extends the MouseEvent class to includes additional grid specific information based on the event's location relative to a grid cell.
GridItemEditorEvent@@\t\n|spark.events|The GridItemEditorEvent class represents events that are dispatched over the life cycle of an item editor.
GridSelectionEvent@@\t\n|spark.events|The GridSelectionEvent class represents events that are dispatched when the selection changes in a Spark DataGrid control as the result of user interaction.
GridSelectionEventKind@@\t\n|spark.events|The GridSelectionEventKind class defines constants for the valid values of the spark.events.GridSelectionEvent class kind property.
GridSortEvent@@\t\n|spark.events|The GridSortEvent class represents events that are dispatched when the data provider of a Spark DataGrid control is sorted as the result of the user clicking on the header of a column in the DataGrid.
IndexChangeEvent@@\t\n|spark.events|The IndexChangeEvent class represents events that are dispatched when an index changes in a Spark component.
ListEvent@@\t\n|spark.events|ListEvents dispatched by ListBase components like ButtonBar and List in response to MouseEvents are constructed with the incoming mouse event's properties.
LoaderInvalidationEvent@@\t\n|spark.events|The LoaderInvalidationEvent class represents events that are dispatched to notify ContentRequest instances that their original request has been invalidated.
PopUpEvent@@\t\n|spark.events|The PopUpEvent class represents an event dispatched by the SkinnablePopUpContainer.
RendererExistenceEvent@@\t\n|spark.events|The RendererExistenceEvent class represents events that are dispatched when a renderer of a Spark DataGroup is added or removed.
TextOperationEvent@@\t\n|spark.events|The TextOperationEvent class represents events that are dispatched when text content changes due to user operations such as inserting characters, backspacing, pasting, or changing text attributes.
TitleWindowBoundsEvent@@\t\n|spark.events|The TitleWindowBoundsEvent class represents event objects that are dispatched when bounds of a Spark TitleWindow changes, either by moving or resizing.
TrackBaseEvent@@\t\n|spark.events|Represents events that are dispatched from a TrackBase component.
ViewNavigatorEvent@@\t\n|spark.events|The ViewNavigatorEvent class represents event objects dispatched by the View class.
BevelFilter@@\t\n|spark.filters|The BevelFilter class lets you add a bevel effect to display objects.
BlurFilter@@\t\n|spark.filters|The BlurFilter class lets you apply a blur visual effect to display objects.
ColorMatrixFilter@@\t\n|spark.filters|The ColorMatrixFilter class lets you apply a 4 x 5 matrix transformation on the RGBA color and alpha values of every pixel in the input image to produce a result with a new set of RGBA color and alpha values.
ConvolutionFilter@@\t\n|spark.filters|The ConvolutionFilter class applies a matrix convolution filter effect.
DisplacementMapFilter@@\t\n|spark.filters|The DisplacementMapFilter class uses the pixel values from the specified BitmapData object (called the displacement map image) to perform a displacement of an object.
DropShadowFilter@@\t\n|spark.filters|The DropShadowFilter class lets you add a drop shadow to display objects.
GlowFilter@@\t\n|spark.filters|The GlowFilter class lets you apply a glow effect to display objects.
GradientBevelFilter@@\t\n|spark.filters|The GradientBevelFilter class lets you apply a gradient bevel effect to display objects.
GradientFilter@@\t\n|spark.filters|The base class for filters that provide gradient visual effects.
GradientGlowFilter@@\t\n|spark.filters|The GradientGlowFilter class lets you apply a gradient glow effect to display objects.
ShaderFilter@@\t\n|spark.filters|The Flex ShaderFilter class abstracts away many of the details of using the Flash ShaderFilter, Shader, and ShaderData classes to apply a Pixel Bender shader as a filter.
CurrencyFormatter@@\t\n|spark.formatters|The CurrencyFormatter class provides locale-sensitive formatting and parsing of currency values.
DateTimeFormatter@@\t\n|spark.formatters|The DateTimeFormatter class provides locale-sensitve formatting for a Date object.
NumberFormatter@@\t\n|spark.formatters|The NumberFormatter class provides locale-sensitive formatting and parsing of numeric values.
NumberFormatterBase@@\t\n|spark.formatters.supportClasses|The NumberFormatterBase class is a base class for the NumberFormatter and CurrencyFormatter classes.
LastOperationStatus@@\t\n|spark.globalization|The LastOperationStatus class enumerates constant values that represent the status of the most recent globalization service operation.
MatchingCollator@@\t\n|spark.globalization|The MatchingCollator class provides locale-sensitve string comparison capabilities with inital settings suitable for general string matching such as finding a matching word in a block of text.
SortingCollator@@\t\n|spark.globalization|The SortingCollator class provides locale-sensitve string comparison capabilities with inital settings suitable for linguistic sorting purposes such as sorting a list of text strings that are displayed to an end-user.
StringTools@@\t\n|spark.globalization|The StringTools class provides locale-sensitve case conversion methods.
CollatorBase@@\t\n|spark.globalization.supportClasses|CollatorBase is a base class for the SortingCollator and MatchingCollator classes.
GlobalizationBase@@\t\n|spark.globalization.supportClasses|This is a base class used for wrapper classes that make use of the flash.globalization classes for language and region specific formatting of dates, times, number, and currency amounts, string comparison and case conversion.
BasicLayout@@\t\n|spark.layouts|The BasicLayout class arranges the layout elements according to their individual settings, independent of each-other.
ColumnAlign@@\t\n|spark.layouts|The ColumnAlign class defines the possible values for the columnAlign property of the TileLayout class.
ConstraintLayout@@\t\n|spark.layouts|The ConstraintLayout class arranges the layout elements based on their individual settings and a set of constraint regions defined by constraint columns and constraint rows.
FormItemLayout@@\t\n|spark.layouts|The FormItemLayout is used by FormItems to provide a constraint based layout.
FormLayout@@\t\n|spark.layouts|The FormLayout class defines the default layout for Spark Form skins.
HorizontalAlign@@\t\n|spark.layouts|The HorizontalAlign class defines the possible values for the horizontalAlign property of the VerticalLayout class.
HorizontalLayout@@\t\n|spark.layouts|The HorizontalLayout class arranges the layout elements in a horizontal sequence, left to right, with optional gaps between the elements and optional padding around the elements.
RowAlign@@\t\n|spark.layouts|The RowAlign class defines the possible values for the rowAlign property of the TileLayout class.
TileLayout@@\t\n|spark.layouts|The TileLayout class arranges layout elements in columns and rows of equally-sized cells.
TileOrientation@@\t\n|spark.layouts|The TileOrientation class defines the possible values for the orientation property of the TileLayout class.
VerticalAlign@@\t\n|spark.layouts|The VerticalAlign class defines the possible values for the verticalAlign property of the HorizontalLayout class.
VerticalLayout@@\t\n|spark.layouts|The VerticalLayout class arranges the layout elements in a vertical sequence, top to bottom, with optional gaps between the elements and optional padding around the sequence of elements.
ViewMenuLayout@@\t\n|spark.layouts|The ViewMenuLayout class defines the layout of the ViewMenu container.
DropLocation@@\t\n|spark.layouts.supportClasses|The DropLocation class contains information describing the drop location for the dragged data in a drag-and-drop operation.
LayoutBase@@\t\n|spark.layouts.supportClasses|The LayoutBase class defines the base class for all Spark layouts.
IPersistenceManager@@\t\n|spark.managers|IPersistenceManager defines the interface that all persistence managers must implement.
PersistenceManager@@\t\n|spark.managers|The PersistenceManager class is a basic persistence manager that is backed by a local shared object named FxAppCache.
Module@@\t\n|spark.modules|The base class for MXML-based dynamically-loadable modules.
ModuleLoader@@\t\n|spark.modules|ModuleLoader is a component that behaves much like a SWFLoader except that it follows a contract with the loaded content.
SplashScreen@@\t\n|spark.preloaders|The SplashScreen class is the default preloader for Mobile Flex applications.
SplashScreenImage@@\t\n|spark.preloaders|Use the SplashScreenImage class to specify different splash screen images based on characteristics of a mobile device.
SplashScreenImageSource@@\t\n|spark.preloaders|Use the SplashScreenImageSource class to specify a Class (typically an embedded image) to be displayed as splash screen at a particular device configuration such as DPI, orientation and resolution.
BitmapImage@@\t\n|spark.primitives|A BitmapImage element defines a rectangular region in its parent element's coordinate space, filled with bitmap data drawn from a source file or source URL.
Ellipse@@\t\n|spark.primitives|The Ellipse class is a filled graphic element that draws an ellipse.
Graphic@@\t\n|spark.primitives|The Graphic control displays a set of graphic drawing commands.
Line@@\t\n|spark.primitives|The Line class is a graphic element that draws a line between two points.
Path@@\t\n|spark.primitives|The Path class is a filled graphic element that draws a series of path segments.
Rect@@\t\n|spark.primitives|The Rect class is a filled graphic element that draws a rectangle.
RectangularDropShadow@@\t\n|spark.primitives|This class optimizes drop shadows for the common case.
FilledElement@@\t\n|spark.primitives.supportClasses|The FilledElement class is the base class for graphics elements that contain a stroke and a fill.
GraphicElement@@\t\n|spark.primitives.supportClasses|A base class for defining individual graphic elements.
StrokedElement@@\t\n|spark.primitives.supportClasses|The StrokedElement class is the base class for all graphic elements that have a stroke, including Line, Ellipse, Path, and Rect.
IHighlightBitmapCaptureClient@@\t\n|spark.skins|The IHighlightBitmapCaptureClient defines the interface for skins that support highlight bitmap capture.
SparkButtonSkin@@\t\n|spark.skins|Base class for Spark button skins.
SparkSkin@@\t\n|spark.skins|Base class for Spark skins.
ActionBarSkin@@\t\n|spark.skins.mobile|The default skin class for the Spark ActionBar component in mobile applications.
BeveledActionButtonSkin@@\t\n|spark.skins.mobile|iOS-styled ActionBar Button skin for use in the actionContent skinPart.
BeveledBackButtonSkin@@\t\n|spark.skins.mobile|iOS-styled ActionBar Button skin for use in the navigationContent skinPart.
ButtonBarFirstButtonSkin@@\t\n|spark.skins.mobile|Button skin for the first Button in a ButtonBar.
ButtonBarLastButtonSkin@@\t\n|spark.skins.mobile|Button skin for the last Button in a ButtonBar.
ButtonBarMiddleButtonSkin@@\t\n|spark.skins.mobile|Button skin for middle Buttons in a ButtonBar.
ButtonBarSkin@@\t\n|spark.skins.mobile|The default skin class for the Spark ButtonBar component.
ButtonSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for Button controls in mobile applications.
CalloutActionBarSkin@@\t\n|spark.skins.mobile|Additional skin class for the Spark ActionBar component for use with a ViewNavigator inside a Callout component.
CalloutSkin@@\t\n|spark.skins.mobile|The default skin class for the Spark Callout component in mobile applications.
CalloutViewNavigatorSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin for view navigators inside a callout.
CheckBoxSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for CheckBox components in mobile applications.
DateSpinnerSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the DateSpinner in mobile applications.
DefaultBeveledActionButtonSkin@@\t\n|spark.skins.mobile|Emphasized button uses accentColor instead of chromeColor.
DefaultBeveledBackButtonSkin@@\t\n|spark.skins.mobile|Emphasized button uses accentColor instead of chromeColor.
DefaultButtonSkin@@\t\n|spark.skins.mobile|Emphasized button uses accentColor instead of chromeColor.
DefaultTransparentActionButtonSkin@@\t\n|spark.skins.mobile|Emphasized button uses accentColor instead of chromeColor.
DefaultTransparentNavigationButtonSkin@@\t\n|spark.skins.mobile|Emphasized button uses accentColor instead of chromeColor.
HScrollBarSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for HScrollBar components in mobile applications.
HScrollBarThumbSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the HScrollBar thumb skin part in mobile applications.
HSliderSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for HSlider controls in mobile applications.
HSliderThumbSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the HSlider thumb skin part in mobile applications.
HSliderTrackSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the HSlider track skin part in mobile applications.
ImageSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the Image component in mobile applications.
ListSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the List components in mobile applications.
RadioButtonSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for RadioButton controls in mobile applications.
SkinnableContainerSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for SkinnableContainer in mobile applications.
SpinnerListContainerSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the SpinnerListContainer in mobile applications.
SpinnerListScrollerSkin@@\t\n|spark.skins.mobile|The default skin class for the Spark Scroller that is used by the SpinnerList component.
SpinnerListSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the SpinnerList in mobile applications.
SplitViewNavigatorSkin@@\t\n|spark.skins.mobile|The default skin for the SplitViewNavigator component.
StageTextAreaSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for TextArea controls in mobile applications that uses a StyleableStageText class for the text display.
StageTextInputSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for TextInput controls in mobile applications that uses a StyleableStageText class for the text input.
TabbedViewNavigatorApplicationSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin used for TabbedViewNavigatorApplication.
TabbedViewNavigatorSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin used for TabbedViewNavigator components.
TabbedViewNavigatorTabBarFirstTabSkin@@\t\n|spark.skins.mobile|Skin for the left-most button in the TabbedViewNavigator ButtonBar skin part.
TabbedViewNavigatorTabBarLastTabSkin@@\t\n|spark.skins.mobile|Skin for used for middle and the right-most ButtonBarButton in the TabbedViewNavigator ButtonBar skin.
TabbedViewNavigatorTabBarSkin@@\t\n|spark.skins.mobile|The default skin class for the Spark TabbedViewNavigator tabBar skin part.
TextAreaHScrollBarSkin@@\t\n|spark.skins.mobile|The default skin class for the Spark TextAreaHScrollBar component in mobile applications.
TextAreaHScrollBarThumbSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin used for TextAreaHScrollBarThumb components in mobile applications.
TextAreaSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for TextArea components in mobile applications.
TextAreaVScrollBarSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for TextAreaVScrollBar components in mobile applications.
TextAreaVScrollBarThumbSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin used for TextAreaHScrollBarThumb components in mobile applications.
TextInputSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for TextInput controls in mobile applications.
ToggleSwitchSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the ToggleSwitch control.
TransparentActionButtonSkin@@\t\n|spark.skins.mobile|The default skin class for buttons in the action area of the Spark ActionBar component in mobile applications.
TransparentNavigationButtonSkin@@\t\n|spark.skins.mobile|The default skin class for buttons in the navigation area of the Spark ActionBar component in mobile applications.
ViewMenuItemSkin@@\t\n|spark.skins.mobile|Default skin for ViewMenuItem.
ViewMenuSkin@@\t\n|spark.skins.mobile|The default skin class for a Spark ViewMenu in a mobile application.
ViewNavigatorApplicationSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin used for ViewNavigatorApplication.
ViewNavigatorSkin@@\t\n|spark.skins.mobile|The ActionScript-based skin for view navigators in mobile applications.
VScrollBarSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for VScrollBar components in mobile applications.
VScrollBarThumbSkin@@\t\n|spark.skins.mobile|ActionScript-based skin for the VScrollBar thumb skin part in mobile applications.
ActionBarButtonSkinBase@@\t\n|spark.skins.mobile.supportClasses|Base skin class for ActionBar buttons in mobile applications.
ButtonBarButtonClassFactory@@\t\n|spark.skins.mobile.supportClasses|Adds skinClass style support to ClassFactory.
ButtonBarButtonSkinBase@@\t\n|spark.skins.mobile.supportClasses|ButtonBarButton skin base class.
ButtonSkinBase@@\t\n|spark.skins.mobile.supportClasses|ActionScript-based skin for mobile applications.
CalloutArrow@@\t\n|spark.skins.mobile.supportClasses|The arrow skin part for CalloutSkin.
HSliderDataTip@@\t\n|spark.skins.mobile.supportClasses|HSlider dataTip component for HSlider in mobile applications.
MobileSkin@@\t\n|spark.skins.mobile.supportClasses|ActionScript-based skin for mobile applications.
SelectableButtonSkinBase@@\t\n|spark.skins.mobile.supportClasses|ActionScript-based skin for toggle buttons.
StageTextSkinBase@@\t\n|spark.skins.mobile.supportClasses|ActionScript-based skin for text input controls in mobile applications.
TabbedViewNavigatorTabBarHorizontalLayout@@\t\n|spark.skins.mobile.supportClasses|The TabbedViewNavigatorButtonBarHorizontalLayout class is a layout specifically designed for the TabbedViewNavigator.
TabbedViewNavigatorTabBarTabSkinBase@@\t\n|spark.skins.mobile.supportClasses|ButtonBarButton skin base class for TabbedViewNavigator ButtonBarButtons.
TextSkinBase@@\t\n|spark.skins.mobile.supportClasses|ActionScript-based skin for text input controls in mobile applications that uses a StyleableTextField class for the text display.
ApplicationSkin@@\t\n|spark.skins.spark|The default skin class for the Spark Application component.
BorderContainerSkin@@\t\n|spark.skins.spark|The default skin class for a Spark BorderContainer component.
ButtonBarFirstButtonSkin@@\t\n|spark.skins.spark|The default skin class for the first button in a Spark ButtonBar component.
ButtonBarLastButtonSkin@@\t\n|spark.skins.spark|The default skin class for the last button in a Spark ButtonBar component.
ButtonBarMiddleButtonSkin@@\t\n|spark.skins.spark|The default skin class for the middle buttons in a Spark ButtonBar component.
ButtonBarSkin@@\t\n|spark.skins.spark|The default skin class for the Spark ButtonBar component.
ButtonSkin@@\t\n|spark.skins.spark|The default skin class for the Spark Button component.
CheckBoxSkin@@\t\n|spark.skins.spark|The default skin class for the Spark CheckBox component.
ComboBoxButtonSkin@@\t\n|spark.skins.spark|The default skin class for the anchor button on a Spark ComboBox component.
ComboBoxSkin@@\t\n|spark.skins.spark|The default skin class for the Spark ComboBox component.
ComboBoxTextInputSkin@@\t\n|spark.skins.spark|The default skin class for the textInput of a Spark ComboBox component.
DataGridSkin@@\t\n|spark.skins.spark|The default skin class for a Spark DataGrid component.
DefaultButtonSkin@@\t\n|spark.skins.spark|The default skin class for a Spark DefaultButton component.
DefaultComplexItemRenderer@@\t\n|spark.skins.spark|The Spark DefaultComplexItemRenderer class is an item renderer class that displays a Flex component in a Group container.
DefaultGridHeaderRenderer@@\t\n|spark.skins.spark|The DefaultGridHeaderRenderer class defines the default header renderer for the columns of a Spark DataGrid control.
DefaultGridItemRenderer@@\t\n|spark.skins.spark|The DefaultGridItemRenderer class defines simple and efficient item renderer that displays a single text label.
DefaultItemRenderer@@\t\n|spark.skins.spark|The DefaultItemRenderer class defines the default item renderer for a List control.
DropDownListButtonSkin@@\t\n|spark.skins.spark|The default skin class for the anchor button on a Spark DropDownList component.
DropDownListSkin@@\t\n|spark.skins.spark|The default skin class for the Spark DropDownList component.
ErrorSkin@@\t\n|spark.skins.spark|The ErrorSkin class defines the error skin for Spark components.
FocusSkin@@\t\n|spark.skins.spark|Defines the "glow" around Spark components when the component has focus.
FormHeadingSkin@@\t\n|spark.skins.spark|The default skin class for the Spark FormHeading component.
FormItemSkin@@\t\n|spark.skins.spark|The default skin class for the Spark FormItem component.
FormSkin@@\t\n|spark.skins.spark|The default skin class for a Spark Form container.
HighlightBitmapCaptureSkin@@\t\n|spark.skins.spark|Base class for skins that do a bitmap capture of a target components and apply a filter to the bitmap.
HScrollBarSkin@@\t\n|spark.skins.spark|The default skin class for the Spark HScrollBar component.
HScrollBarThumbSkin@@\t\n|spark.skins.spark|The default skin class for the thumb of a Spark HScrollBar component.
HScrollBarTrackSkin@@\t\n|spark.skins.spark|The default skin class for the track on a Spark HScrollBar component.
HSliderSkin@@\t\n|spark.skins.spark|The default skin class for the Spark HSlider component.
HSliderThumbSkin@@\t\n|spark.skins.spark|The default skin class for the thumb of a Spark HSlider component.
HSliderTrackSkin@@\t\n|spark.skins.spark|The default skin class for the track of a Spark HSlider component.
ImageLoadingSkin@@\t\n|spark.skins.spark|The default skin class for the Spark Image skin progress bar preloader.
ImageSkin@@\t\n|spark.skins.spark|The default skin class for the Spark Image component.
ListDropIndicator@@\t\n|spark.skins.spark|The default skin for the drop indicator of a List component in case List doesn't have a dropIndicator part defined in its skin.
ListSkin@@\t\n|spark.skins.spark|The default skin class for a Spark List component.
NumericStepperDecrementButtonSkin@@\t\n|spark.skins.spark|The default skin class for the down button of a Spark NumericStepper component.
NumericStepperIncrementButtonSkin@@\t\n|spark.skins.spark|The default skin class for the up button of a Spark NumericStepper component.
NumericStepperSkin@@\t\n|spark.skins.spark|The default skin class for a Spark NumericStepper component.
NumericStepperTextInputSkin@@\t\n|spark.skins.spark|The default skin class for the text input field of a Spark NumericStepper component.
PanelSkin@@\t\n|spark.skins.spark|The default skin class for a Spark Panel container.
RadioButtonSkin@@\t\n|spark.skins.spark|The default skin class for a Spark RadioButton component.
ScrollBarDownButtonSkin@@\t\n|spark.skins.spark|The default skin class for down button of the Spark ScrollBar component.
ScrollBarLeftButtonSkin@@\t\n|spark.skins.spark|The default skin class for left button of the Spark ScrollBar component.
ScrollBarRightButtonSkin@@\t\n|spark.skins.spark|The default skin class for right button of the Spark ScrollBar component.
ScrollBarUpButtonSkin@@\t\n|spark.skins.spark|The default skin class for up button of the Spark ScrollBar component.
ScrollerSkin@@\t\n|spark.skins.spark|The default skin class for the Spark Scroller component.
SkinnableContainerSkin@@\t\n|spark.skins.spark|The default skin class for a Spark SkinnableContainer container.
SkinnableDataContainerSkin@@\t\n|spark.skins.spark|The default skin class for the Spark SkinnableDataContainer container.
SkinnablePopUpContainerSkin@@\t\n|spark.skins.spark|The default skin class for a Spark SkinnablePopUpContainer container.
SparkChromeWindowedApplicationSkin@@\t\n|spark.skins.spark|A skin class for the Spark WindowedApplication component.
SpinnerDecrementButtonSkin@@\t\n|spark.skins.spark|The default skin class for the down button of a Spark Spinner component.
SpinnerIncrementButtonSkin@@\t\n|spark.skins.spark|The default skin class for the up button of a Spark Spinner component.
SpinnerSkin@@\t\n|spark.skins.spark|The default skin class for the Spark Spinner component.
StackedFormHeadingSkin@@\t\n|spark.skins.spark|An alternate skin class for the Spark FormHeading component.
StackedFormItemSkin@@\t\n|spark.skins.spark|An alternate skin class for the Spark FormItem component which positions the label above the content.
StackedFormSkin@@\t\n|spark.skins.spark|An alternate skin class for the Spark Form container.
TabBarButtonSkin@@\t\n|spark.skins.spark|The default skin class for Spark TabBar buttons.
TabBarSkin@@\t\n|spark.skins.spark|The default skin class for the Spark TabBar component.
TextAreaSkin@@\t\n|spark.skins.spark|The default skin class for Spark TextArea component.
TextInputSkin@@\t\n|spark.skins.spark|The default skin class for Spark TextInput component.
TitleWindowCloseButtonSkin@@\t\n|spark.skins.spark|The default skin class for the close button of the Spark TitleWindow component.
TitleWindowSkin@@\t\n|spark.skins.spark|The default skin class for a Spark TitleWindow container.
ToggleButtonSkin@@\t\n|spark.skins.spark|The default skin class for a Spark ToggleButton component.
UITextFieldGridItemRenderer@@\t\n|spark.skins.spark|The UITextFieldGridItemRenderer class defines simple and efficient item renderer that displays a single text label.
VideoPlayerSkin@@\t\n|spark.skins.spark|The default skin class for the Spark VideoPlayer component.
VScrollBarSkin@@\t\n|spark.skins.spark|The default skin class for the Spark VScrollBar component.
VScrollBarThumbSkin@@\t\n|spark.skins.spark|The default skin class for the thumb of a Spark VScrollBar component.
VScrollBarTrackSkin@@\t\n|spark.skins.spark|The default skin class for the track of a Spark VScrollBar component.
VSliderSkin@@\t\n|spark.skins.spark|The default skin class for the Spark VSlider component.
VSliderThumbSkin@@\t\n|spark.skins.spark|The default skin class for the thumb of a Spark VSlider component.
VSliderTrackSkin@@\t\n|spark.skins.spark|The default skin class for the track of a Spark VSlider component.
WindowedApplicationSkin@@\t\n|spark.skins.spark|A skin class for the Spark WindowedApplication and Window containers.
FullScreenButtonSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the fullScreen button of a Spark VideoPlayer component while in one of the fullScreen skin states.
MuteButtonSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the mute button of a Spark VideoPlayer component while in one of the fullScreen skin states.
PlayPauseButtonSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the play/pause button of a Spark VideoPlayer component while in one of the fullScreen skin states.
ScrubBarSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the scrub bar of a Spark VideoPlayer component while in one of the fullScreen skin states.
ScrubBarThumbSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the scrub bar thumb part of a Spark VideoPlayer component while in one of the fullScreen skin states.
ScrubBarTrackSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the scrub bar track part of a Spark VideoPlayer component while in one of the fullScreen skin states.
VolumeBarSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the volume bar of a Spark VideoPlayer component while in one of the fullScreen skin states.
VolumeBarThumbSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the volume bar thumb part button of a Spark VideoPlayer component while in one of the fullScreen skin states.
VolumeBarTrackSkin@@\t\n|spark.skins.spark.mediaClasses.fullScreen|The default skin class for the volume bar track part of a Spark VideoPlayer component while in one of the fullScreen skin states.
FullScreenButtonSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the fullScreen button of a Spark VideoPlayer component in the normal skin state.
MuteButtonSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the mute button of a Spark VideoPlayer component in the normal skin state.
PlayPauseButtonSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the play/pause button of a Spark VideoPlayer component in the normal skin state.
ScrubBarSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the scrub bar of a Spark VideoPlayer component in the normal skin state.
ScrubBarThumbSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the scrub bar thumb part of a Spark VideoPlayer component in the normal skin state.
ScrubBarTrackSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the scrub bar track part of a Spark VideoPlayer component in the normal skin state.
VolumeBarSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the volume bar of a Spark VideoPlayer component in the normal skin state.
VolumeBarThumbSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the volume bar thumb part of a Spark VideoPlayer component in the normal skin state.
VolumeBarTrackSkin@@\t\n|spark.skins.spark.mediaClasses.normal|The default skin class for the volume bar track part of a Spark VideoPlayer component in the normal skin state.
CloseButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the close button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome.
GripperSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the gripper button in the Spark WindowedApplication component and Spark Window component when you use Flex chrome.
MacCloseButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the close button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome on an Apple Computer.
MacMaximizeButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the maximize button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome with an Apple computer.
MacMinimizeButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the minimize button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome with an Apple computer.
MacTitleBarSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the title bar of the Spark WindowedApplication component and Spark Window component for an Apple Macintosh when you use Flex chrome.
MaximizeButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the maximize button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome.
MinimizeButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the minimize button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome.
RestoreButtonSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the restore button in the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome.
TitleBarSkin@@\t\n|spark.skins.spark.windowChrome|The default skin class for the title bar of the Spark WindowedApplication component and Spark Window component when you use Flex chrome.
ApplicationSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark Application component.
ButtonBarFirstButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ButtonBarFirstButton component.
ButtonBarLastButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ButtonBarLastButton component.
ButtonBarMiddleButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ButtonBarMiddleButton component.
ButtonBarSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ButtonBar component.
ButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark Button component.
CheckBoxSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark CheckBox component.
ComboBoxButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ComboBoxButton component.
ComboBoxSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ComboBox component.
DataGridSkin@@\t\n|spark.skins.wireframe|The default skin class for a Spark DataGrid component in the Wireframe theme.
DefaultButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark DefaultButton component.
DefaultGridHeaderRenderer@@\t\n|spark.skins.wireframe|The default header renderer for s:DataGrid columns.
DefaultItemRenderer@@\t\n|spark.skins.wireframe|The DefaultItemRenderer class defines the default item renderer for a List control.
DropDownListButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark DropDownListButton component.
DropDownListSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark DropDownList component.
HScrollBarSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark HScrollBar component.
HScrollBarThumbSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark HScrollBarThumb component.
HScrollBarTrackSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark HScrollBarTrack component.
HSliderSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark HSlider component.
HSliderThumbSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark HSliderThumb component.
HSliderTrackSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark HSliderTrack component.
ListSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark List component.
NumericStepperSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark NumericStepper component.
NumericStepperTextInputSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark NumericStepperTextInput component.
PanelSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark Panel component.
RadioButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark RadioButton component.
ScrollBarDownButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ScrollBarDownButton component.
ScrollBarLeftButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ScrollBarLeftButton component.
ScrollBarRightButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ScrollBarRightButton component.
ScrollBarUpButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ScrollBarUpButton component.
SpinnerDecrementButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark SpinnerDecrementButton component.
SpinnerIncrementButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark SpinnerIncrementButton component.
SpinnerSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark Spinner component.
TabBarButtonSkin@@\t\n|spark.skins.wireframe|The wireframe skin class for TabBar component.
TabBarSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark TabBar component.
TextAreaSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark TextArea component.
TextInputSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark TextInput component.
TitleWindowCloseButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark TitleWindowCloseButton component.
TitleWindowSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark TitleWindow component.
ToggleButtonSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ToggleButton component.
VideoPlayerSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark VideoPlayer component.
VScrollBarSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark VScrollBar component.
VScrollBarThumbSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ScrollBarThumb component.
VScrollBarTrackSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark ScrollBarTrack component.
VSliderSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark VSlider component.
VSliderThumbSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark VSliderThumb component.
VSliderTrackSkin@@\t\n|spark.skins.wireframe|The default wireframe skin class for the Spark VSliderTrack component.
FullScreenButtonSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the fullScreen button of a Spark VideoPlayer component.
MuteButtonSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the mute button of a Spark VideoPlayer component.
PlayPauseButtonSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the play/pause button of a Spark VideoPlayer component.
ScrubBarSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the scrub bar of a Spark VideoPlayer component.
ScrubBarThumbSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the scrub bar thumb part of a Spark VideoPlayer component.
ScrubBarTrackSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the scrub bar track part of a Spark VideoPlayer component.
VolumeBarSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the volume bar of a Spark VideoPlayer component.
VolumeBarThumbSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the volume bar thumb part of a Spark VideoPlayer component.
VolumeBarTrackSkin@@\t\n|spark.skins.wireframe.mediaClasses|The wireframe skin class for the volume bar track part of a Spark VideoPlayer component.
FullScreenButtonSkin@@\t\n|spark.skins.wireframe.mediaClasses.fullScreen|The wireframe skin class for the fullScreen button of a Spark VideoPlayer component while in one of the fullScreen skin state.
CrossFadeViewTransition@@\t\n|spark.transitions|The CrossFadeViewTransition class serves as a simple cross fade transition for views.
FlipViewTransition@@\t\n|spark.transitions|The FlipViewTransition class performs a simple flip transition for views.
SlideViewTransition@@\t\n|spark.transitions|The SlideViewTransition class performs a simple slide transition for views.
SlideViewTransitionMode@@\t\n|spark.transitions|The SlideViewTransitionMode class provides the constants used to specify the type of a slide transition.
ViewTransitionBase@@\t\n|spark.transitions|The ViewTransitionBase class is the base class for all view transitions.
ViewTransitionDirection@@\t\n|spark.transitions|The ViewTransitionDirection class provides the constants used when hinting the direction of a view transition.
ZoomViewTransition@@\t\n|spark.transitions|The ZoomViewTransition class performs a zoom in or out transition for views.
BitmapUtil@@\t\n|spark.utils|This class provides bitmap-related utility functions 
DataItem@@\t\n|spark.utils|The DataItem class represents a dynamic object with bindable properties.
LabelUtil@@\t\n|spark.utils|The LabelUtil class is used by components to determine the correct text to display for their renderers or sub-parts.
MultiDPIBitmapSource@@\t\n|spark.utils|This class provides a list of bitmaps for various runtime densities.
TextFlowUtil@@\t\n|spark.utils|TextFlowUtil is a utility class which provides methods for importing a TextFlow from, and exporting a TextFlow to, the markup language used by the Text Layout Framework.
CurrencyValidator@@\t\n|spark.validators|The CurrencyValidator class ensures that a String represents a valid currency amount according to the conventions of a locale.
NumberValidator@@\t\n|spark.validators|The NumberValidator class ensures that a String represents a valid number according to the conventions of a locale.
GlobalizationUtils@@\t\n|spark.validators.supportClasses|GlobalizationUtils is a class containing Unicode related functionality not supported directly in Flex or ActionScript.
GlobalizationValidatorBase@@\t\n|spark.validators.supportClasses|The GlobalizationValidatorBase class is the base class for all Spark validators.
NumberValidatorBase@@\t\n|spark.validators.supportClasses|The NumberValidatorBase class contains all the common functionality that is required by the NumberValidator and CurrencyValidator classes.
ArgumentError@@\t\n|Top Level|The ArgumentError class represents an error that occurs when the arguments supplied in a function do not match the arguments defined for that function.
arguments@@\t\n|Top Level|An arguments object is used to store and access a function's arguments.
Array@@\t\n|Top Level|The Array class lets you access and manipulate arrays.
Boolean@@\t\n|Top Level|A Boolean object is a data type that can have one of two values, either true or false, used for logical operations.
Class@@\t\n|Top Level|A Class object is created for each class definition in a program.
Date@@\t\n|Top Level|The Date class represents date and time information.
DefinitionError@@\t\n|Top Level|The DefinitionError class represents an error that occurs when user code attempts to define an identifier that is already defined.
Error@@\t\n|Top Level|The Error class contains information about an error that occurred in a script.
EvalError@@\t\n|Top Level|The EvalError class represents an error that occurs when user code calls the eval() function or attempts to use the new operator with the Function object.
Function@@\t\n|Top Level|A function is the basic unit of code that can be invoked in ActionScript.
int@@\t\n|Top Level|The int class lets you work with the data type representing a 32-bit signed integer.
JSON@@\t\n|Top Level|The JSON class lets applications import and export data using JavaScript Object Notation (JSON) format.
Math@@\t\n|Top Level|The Math class contains methods and constants that represent common mathematical functions and values.
Namespace@@\t\n|Top Level|The Namespace class contains methods and properties for defining and working with namespaces.
Number@@\t\n|Top Level|A data type representing an IEEE-754 double-precision floating-point number.
Object@@\t\n|Top Level|The Object class is at the root of the ActionScript runtime class hierarchy.
QName@@\t\n|Top Level|QName objects represent qualified names of XML elements and attributes.
RangeError@@\t\n|Top Level|A RangeError exception is thrown when a numeric value is outside the acceptable range.
ReferenceError@@\t\n|Top Level|A ReferenceError exception is thrown when a reference to an undefined property is attempted on a sealed (nondynamic) object.
RegExp@@\t\n|Top Level|The RegExp class lets you work with regular expressions, which are patterns that you can use to perform searches in strings and to replace text in strings.
SecurityError@@\t\n|Top Level|The SecurityError exception is thrown when some type of security violation takes place.
String@@\t\n|Top Level|The String class is a data type that represents a string of characters.
SyntaxError@@\t\n|Top Level|A SyntaxError exception is thrown when a parsing error occurs, for one of the following reasons:.
TypeError@@\t\n|Top Level|A TypeError exception is thrown when the actual type of an operand is different from the expected type.
uint@@\t\n|Top Level|The uint class provides methods for working with a data type representing a 32-bit unsigned integer.
URIError@@\t\n|Top Level|A URIError exception is thrown when one of the global URI handling functions is used in a way that is incompatible with its definition.
Vector@@\t\n|Top Level|The Vector class lets you access and manipulate a vector  an array whose elements all have the same data type.
VerifyError@@\t\n|Top Level|The VerifyError class represents an error that occurs when a malformed or corrupted SWF file is encountered.
XML@@\t\n|Top Level|The XML class contains methods and properties for working with XML objects.
XMLList@@\t\n|Top Level|The XMLList class contains methods for working with one or more XML elements.

#Global Scope keywords
break@@Appears within a loop (for, for..in, for each..in, do..while, or while) or within a block of statements associated with a particular case within a switch statement.
case@@Defines a jump target for the switch statement.
continue@@Jumps past all remaining statements in the innermost loop and starts the next iteration of the loop as if control had passed through to the end of the loop normally.
default@@Defines the default case for a switch statement.
do..while@@Similar to a while loop, except that the statements are executed once before the initial evaluation of the condition.
else@@Specifies the statements to run if the condition in the if statement returns false.
for@@Evaluates the init (initialize) expression once and then starts a looping sequence.
for..in@@Iterates over the dynamic properties of an object or elements in an array and executes statement for each property or element.
for..each..in@@Iterates over the items of a collection and executes statement for each item.
if@@Evaluates a condition to determine the next statement to execute.
label@@Associates a statement with an identifier that can be referenced by break or continue.
return@@Causes execution to return immediately to the calling function.
super@@Invokes the superclass or parent version of a method or constructor.
switch@@Causes control to transfer to one of several statements, depending on the value of an expression.
throw@@Generates, or throws, an error that can be handled, or caught, by a catch code block.
try..catch..finally@@Encloses a block of code in which an error can occur, and then responds to the error.
while@@Evaluates a condition and if the condition evaluates to true, executes one or more statements before looping back to evaluate the condition again.
with@@Establishes a default object to be used for the execution of a statement or statements, potentially reducing the amount of code that needs to be written.

#Global Scope Attribute keywords
dynamic@@Specifies that instances of a class may possess dynamic properties added at runtime.
final@@Specifies that a method cannot be overridden or that a class cannot be extended.
internal@@Specifies that a class, variable, constant or function is available to any caller within the same package.
native@@Specifies that a function or method is implemented by Flash Player in native code.
override@@Specifies that a method replaces an inherited method.
private@@Specifies that a variable, constant, method or namespace is available only to the class that defines it.
protected@@Specifies that a variable, constant, method, or namespace is available only to the class that defines it and to any subclasses of that class.
public@@Specifies that a class, variable, constant or method is available to any caller.
static@@Specifies that a variable, constant, or method belongs to the class, rather than to instances of the class.

#Global Scope Definition Keywords
...@@rest parameter@@Specifies that a function will accept any number of comma-delimited arguments.
class@@Defines a class, which lets you instantiate objects that share methods and properties that you define.
const@@Specifies a constant, which is a variable that can be assigned a value only once.
extends@@Defines a class that is a subclass of another class.
function@@Comprises a set of statements that you define to perform a certain task.
get@@Defines a getter, which is a method that can be read like a property.
implements@@Specifies that a class implements one or more interfaces.
interface@@Defines an interface.
namespace@@Allows you to control the visibility of definitions.
package@@Allows you to organize your code into discrete groups that can be imported by other scripts.
set@@Defines a setter, which is a method that appears in the public interface as a property.
var@@Specifies a variable.

#Global Scope Directives
default_xml_namespace@@The [default xml namespace] directive sets the default namespace to use for XML objects.
import@@Makes externally defined classes and packages available to your code.
include@@Includes the contents of the specified file, as if the commands in the file are part of the calling script.
use_namespace@@Causes the specified namespaces to be added to the set of open namespaces.

#Global Scope Namespaces
AS3@@Defines methods and properties of the core ActionScript classes that are fixed properties instead of prototype properties.
flash_proxy@@Defines methods of the flash_proxy class.
object_proxy@@ Defines methods of the object_proxy class.

##Global Scope Primary expr keywords
false@@A Boolean value representing false.
null@@A special value that can be assigned to variables or returned by a function if no data was provided.
this@@A reference to a method's containing object.
true@@A Boolean value representing true.

##Global Scope Properties
constructor@@:Object A reference to the class object or constructor function for a given object instance.
length@@:uint A non-negative integer specifying the number of elements in the array.

##Global Scope Constants
Infinity@@A special value representing positive Infinity.
NaN@@A special member of the Number data type that represents a value that is "not a number" (NaN).
undefined@@A special value that applies to untyped variables that have not been initialized or dynamic object properties that are not initialized.

#Global Scope functions
Array()Creates a new array.
Boolean()Converts the expression parameter to a Boolean value and returns the value.
decodeURI()Decodes an encoded URI into a string.
decodeURIComponent()Decodes an encoded URI component into a string.
encodeURI()Encodes a string into a valid URI (Uniform Resource Identifier).
encodeURIComponent()Encodes a string into a valid URI component.
escape()Converts the parameter to a string and encodes it in a URL-encoded format, where most nonalphanumeric characters are replaced with % hexadecimal sequences.
int()Converts a given numeric value to an integer value.
isFinite()Returns true if the value is a finite number, or false if the value is Infinity or -Infinity.
isNaN()Returns true if the value is NaN(not a number).
isXMLName()Determines whether the specified string is a valid name for an XML element or attribute.
Number()Converts a given value to a Number value.
Object()Every value in ActionScript 3.0 is an object, which means that calling Object() on a value returns that value.
parseFloat()Converts a string to a floating-point number.
parseInt()Converts a string to an integer.
String()Returns a string representation of the specified parameter.
trace()Displays expressions, or writes to log files, while debugging.
uint()Converts a given numeric value to an unsigned integer value.
unescape()Evaluates the parameter str as a string, decodes the string from URL-encoded format (converting all hexadecimal sequences to ASCII characters), and returns the string.
Vector()Creates a new Vector instance whose elements are instances of the specified data type.
XML()Converts an object to an XML object.
XMLList()Converts an object to an XMLList object.

#Common Inheritated Base Methods
Vector(length:uint = 0, fixed:Boolean = false)\r\nCreates a Vector with the specified base type.
concat(... args):Vector.<T>\r\nConcatenates the Vectors specified in the parameters list with the elements in this Vector and creates a new Vector.
every(callback:Function, thisObject:Object = null):Boolean\r\nExecutes a test function on each item in the Vector until an item is reached that returns false for the specified function.
filter(callback:Function, thiunsObject:Object = null):Vector.<T>\r\nExecutes a test function on each item in the Vector and returns a new Vector containing all items that return true for the specified function.
forEach(callback:Function, thisObject:Object = null):void\r\nExecutes a function on each item in the Vector.
hasOwnProperty(name:String):Boolean\r\nIndicates whether an object has a specified property defined.
indexOf(searchElement:T, fromIndex:int = 0):int\r\nSearches for an item in the Vector and returns the index position of the item.
isPrototypeOf(theClass:Object):Boolean\r\nIndicates whether an instance of the Object class is in the prototype chain of the object specified as the parameter.
join(sep:String = ","):String\r\nConverts the elements in the Vector to strings, inserts the specified separator between the elements, concatenates them, and returns the resulting string.
lastIndexOf(searchElement:T, fromIndex:int = 0x7fffffff):int\r\nSearches for an item in the Vector, working backward from the specified index position, and returns the index position of the matching item.
map(callback:Function, thisObject:Object = null):Vector.<T>\r\nExecutes a function on each item in the Vector, and returns a new Vector of items corresponding to the results of calling the function on each item in this Vector.
pop():T\r\nRemoves the last element from the Vector and returns that element.
propertyIsEnumerable(name:String):Boolean\r\nIndicates whether the specified property exists and is enumerable.
push(... args):uint\r\nAdds one or more elements to the end of the Vector and returns the new length of the Vector.
reverse():Vector.<T>\r\nReverses the order of the elements in the Vector.
setPropertyIsEnumerable(name:String, isEnum:Boolean = true):void\r\nSets the availability of a dynamic property for loop operations.
shift():T\r\nRemoves the first element from the Vector and returns that element.
slice(startIndex:int = 0, endIndex:int = 16777215):Vector.<T>\r\nReturns a new Vector that consists of a range of elements from the original Vector, without modifying the original Vector.
some(callback:Function, thisObject:Object = null):Boolean\r\nExecutes a test function on each item in the Vector until an item is reached that returns true.
sort(sortBehavior:*):Vector.<T>\r\n Sorts the elements in the Vector object, and also returns a sorted Vector object.
splice(startIndex:int, deleteCount:uint = 4294967295, ... items):Vector.<T>\r\nAdds elements to and removes elements from the Vector.
toLocaleString():String\r\nReturns a string that represents the elements in the specified Vector.
toString():String\r\nReturns a string that represents the elements in the Vector.
unshift(... args):uint\r\n Adds one or more elements to the beginning of the Vector and returns the new length of the Vector.
valueOf():Object\r\nReturns the primitive value of the specified object.
apply(thisArg:*, argArray:*):*\r\nSpecifies the value of thisObject to be used within any function that ActionScript calls.
call(thisArg:*, ... args):*\r\nInvokes the function represented by a Function object.

#Do: Add often used classes members (eg toJSON / Vector ...)	

#Package flash.utils 
clearInterval(id:uint):void\r\n|flash.utils|Cancels a specified setInterval() call.
clearTimeout(id:uint):void\r\n|flash.utils|Cancels a specified setTimeout() call.
describeType(value:*):XML\r\n|flash.utils|Produces an XML object that describes the ActionScript object named as the parameter of the method.
escapeMultiByte(value:String):String\r\n|flash.utils|Returns an escaped copy of the input string encoded as either UTF-8 or system code page, depending on the value of System.useCodePage.
getDefinitionByName(name:String):Object\r\n|flash.utils|Returns a reference to the class object of the class specified by the name parameter.
getQualifiedClassName(value:*):String\r\n|flash.utils|Returns the fully qualified class name of an object.
getQualifiedSuperclassName(value:*):String\r\n|flash.utils|Returns the fully qualified class name of the base class of the object specified by the value parameter.
getTimer():int\r\n|flash.utils|Used to compute relative time.
setInterval(closure:Function, delay:Number, ... arguments):uint\r\n|flash.utils|Runs a function at a specified interval (in milliseconds).
setTimeout(closure:Function, delay:Number, ... arguments):uint\r\n|flash.utils|Runs a specified function after a specified delay (in milliseconds).
unescapeMultiByte(value:String):String\r\n|flash.utils|Returns an unescaped copy of the input string, which is decoded from either system code page page or UTF-8 depending on the value of System.useCodePage.

BIG_ENDIAN@@:String[static] Indicates the most significant byte of the multibyte number appears first in the sequence of bytes.
LITTLE_ENDIAN@@:String[static] Indicates the least significant byte of the multibyte number appears first in the sequence of bytes.

