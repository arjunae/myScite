# Define SciTE settings for lisp, Scheme an Clojure files.

file.patterns.lisp=*.lsp;*.lisp;*.el
filter.lisp=LISP (lsp lisp)|$(file.patterns.lisp)|
*filter.lisp=$(filter.lisp)
*source.patterns.lisp=$(file.patterns.lisp);

file.patterns.scheme=*.scm;*.smd;*.ss;*.rkt
filter.scheme=Scheme (scm smd)|$(file.patterns.scheme)|
*filter.scheme=$(filter.cloure)
*source.patterns.scheme=$(file.patterns.scheme);

file.patterns.clojure=*.clj;*.edn;*.cljs
filter.clojure=Clojure (clj)|$(file.patterns.clojure)|
*filter.clojure=$(filter.cloure)
*source.patterns.clojure=$(file.patterns.clojure);

lexer.$(file.patterns.lisp)=lisp
lexer.$(file.patterns.scheme)=lisp
lexer.$(file.patterns.clojure)=lisp

# lisp build in functions, xlisp dialect
keywords.$(file.patterns.lisp)= not defun + - * / = < > <= >= princ \
eval apply funcall quote identity function complement backquote lambda set setq setf \
defun defmacro gensym make symbol intern symbol name symbol value symbol plist get \
getf putprop remprop hash make array aref car cdr caar cadr cdar cddr caaar caadr cadar \
caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr \
cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr cons list append reverse last nth \
nthcdr member assoc subst sublis nsubst  nsublis remove length list length \
mapc mapcar mapl maplist mapcan mapcon rplaca rplacd nconc delete atom symbolp numberp \
boundp null listp consp minusp zerop plusp evenp oddp eq eql equal cond case and or let l if prog \
prog1 prog2 progn go return do dolist dotimes catch throw error cerror break \
continue errset baktrace evalhook truncate float rem min max abs sin cos tan expt exp sqrt \
random logand logior logxor lognot bignums logeqv lognand lognor \
logorc2 logtest logbitp logcount integer length nil

word.chars.lisp=$(chars.alpha)$(chars.numeric)_-<>.#+@$%^&=*!?
word.characters.$(file.patterns.lisp)=$(word.chars.lisp)

# Scheme functions, R5RS
keywords.$(file.patterns.scheme)= + - * / = < > <= >= => \
abs acos and angle append apply asin assoc assoc assq assv atan begin boolean? caar cadr call-with-current-continuation call/cc \
call-with-input-file call-with-output-file call-with-values car cdr caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr caaaar \
caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr case ceiling char->integer char-alphabetic? \
char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? \
char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cond cons cos current-input-port current-output-port define \
define-syntax delay denominator display do dynamic-wind else eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt \
floor for-each force gcd if imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lambda lcm length \
let let* let-syntax letrec letrec-syntax list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular \
make-string make-vector map max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator \
odd? open-input-file open-output-file or output-port? pair? peek-char input-port? output-port? positive? procedure? quasiquote quote quotient \
rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string \
string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! \
string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? syntax-rules \
transcript-off transcript-on truncate unquote unquote-splicing values vector vector->list vector-fill! vector-length vector-ref vector-set! vector? \
with-input-from-file with-output-to-file write write-char \
zero?

word.chars.scheme=$(chars.alpha)$(chars.numeric)!$%&*/:<=>?^_~+-.@
word.characters.$(file.patterns.scheme)=$(word.chars.scheme)

keywords.$(file.patterns.clojure)= * * *1 *2 *3 *agent* *allow-unresolved-vars* *append-to-writer* *buffer-size* *byte-array-type* *clojure-version* *code-dispatch* *code-table* *command-line-args* *compile-files* \
*compile-path* *core-java-api* *current* *default-encoding* *e *err* *feeling-lucky* *feeling-lucky-url* *file* *flush-on-newline* *html-compatible* *in* *json-keyword-keys* *local-javadocs* *macro-meta* \
*math-context* *ns* *open-url-script* *out* *pass1-string* *print-circle* *print-dup* *print-length* *print-level* *print-lines* *print-meta* *print-miser-width* *print-pprint-dispatch* *print-pretty* \
*print-readably* *print-right-margin* *print-shared* *print-suppress-namespaces* *prxml-indent* *read-eval* *remote-javadocs* *sb* *sh-dir* *sh-env* *simple-dispatch* *source-path* *stack* *state* \
*symbol-map* *trace-depth* *use-context-classloader* *warn-on-reflection* + + - - -> .. / / < < <= <= = = == > > >= >= READ_ONLY abs abs acc-tuple accessor aclone acos action-translation-table add \
add-action-listener add-break-thread! add-classpath add-core-ns add-items add-key-typed-listener add-local-javadoc add-menu-item add-remote-javadoc add-watch add-watcher agent agent-errors aget \
alength alias all-ns alter alter-meta! alter-var-root amap ancestors ancestors and append-child append-spit append-writer apply apply-template approx= areduce array-map aset aset-boolean aset-byte \
aset-char aset-double aset-float aset-int aset-long aset-short asin assert assoc assoc assoc-in associative? atan atan2 atom attrs auto auto? await await-for await1 bases bean bernoulli bigdec \
bigint bind-continue binding binomial bit-and bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left bit-shift-right bit-test bit-xor boolean branch? break-threads browse-url \
buffer-stream butlast byte call-cc cartesian-product case cast ceil ceil censor certainly char char-escape-string char-name-string children children children-auto chomp choose chop cl-format \
class class? clear-agent-errors clojure-version close-server coll? combinations combine comment commute comp comparator compare compare-and-set! compile compile-format compiled-format5958 \
compiled-format5979 compiled-format6014 compiled-format6026 compiled-format6031 compiled-format6036 compiled-format6050 compiled-format6124 compiled-format6170 complement complex \
complex-struct components concat cond cond-dist-m cond-let cond-prob condp condt conj conj conjugate connection connection-count cons const constantly construct-proxy constructor-form \
cont-m contains? content content-handler continue continue-with copy cos count counted? counter counter-with-total create-ns create-repl-server create-server create-struct create-table \
cycle dec decimal? declare deconstruct defadt defalias deferror defhinted definline defmacro defmacro- defmethod defmethod* defmonad defmonadfn defmulti defn defn- defnk defonce defonce- \
defst defstream defstruct defstruct- defsymbolmacro deftemplate deftrace deftype deftype- defunbound defunbound- defvar defvar- delay delay? delete-rows deref derive descendants descendants \
destructure difference dir discrete disj dissoc dissoc dist-m distinct distinct? do-commands do-not-handle do-prepared do-swing do-swing* do-swing-and-wait do-template doall doc docs domonad \
dorun doseq dosync dotimes doto double double-array doubles down drop drop-last drop-table drop-while e econdt edit element element emit emit emit-element emit-element empty empty empty-counter \
empty-counter-with-total empty-list empty-map empty-maximum empty-mean-variance empty-min-max empty-minimum empty-product empty-queue empty-set empty-string empty-sum empty-tuple empty-vector empty? \
end? ensure enumeration-seq error escape-xml escape-xml-map eval even? every? exact-integer-sqrt execute-format exp exponential expression-info expt false? fcase fetch-state fetch-val ffirst fibs \
file-seq file-str filenames-in-jar filter find find-connection find-doc find-first find-holes find-javadoc-url find-ns find-pure-exprs find-symbols find-var first flatten flatten-map float float-array \
float? floats floor floor flush fmap fn fn? fnext for force format formatter formatter-out frequencies fresh-line future future-call gcd gen-class gen-interface gensym get get get-in get-method get-ns \
get-proxy-class get-source get-validator group-by handle has-pull hash hash-map hash-set identical? identity identity-m if-let if-not ifn? imag imaginary import import-static in-case in-case-test in-ns \
inc includes? index indexed init-navigator init-proxy insert-child insert-left insert-records insert-right insert-rows insert-values instance-case instance? int int-array integer? interleave intern \
interpose intersection interval into into into-array ints io! is-rollback-only isa? iterate iterator-seq jar-file? javadoc join join-with json-str key keys keyword keyword? keywordize-keys last lazy-cat \
lazy-seq lcg lcm left left-locs leftmost leftmost? lefts let letfn letfn- lex-permutations line-seq list list* list? listen load load-file load-file load-reader load-script load-string loaded-libs locking \
log lognormal long long-array longs loop m+m-chain+m m+m-fmap+m m+m-join+m m+m-map+m m+m-reduce+m m+m-seq+m m+write+m m-bind m-chain m-fmap m-join m-lift m-map m-plus m-reduce m-result m-seq m-when m-when-not \
m-zero macroexpand macroexpand-1 macroexpand-all macrolet main make-action make-array make-distribution make-hierarchy make-map make-menubar make-node make-parents map map-invert map? mapcat mapcat-chain match \
max max-key maximum maybe-m maybe-t mean-variance memfn memoize menu-constructor-dispatch merge merge-with meta method-sig methods mexpand mexpand-1 mexpand-all miglayout min min-key min-max minimum mmap mod \
monad monad-transformer n-sphere name name-with-attributes namespace nary-dispatch nary-type neg? newline next next nfirst nil? nnext node node normal normal-box-muller normalize normalize-cond not not-any? \
not-empty not-every? not= ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ns-refers ns-resolve ns-unalias ns-unmap ns-vars nth nthnext nulary-type num number? odd? one open-url-in-browser \
open-url-in-swing or parents parse parse-seq parse-trim partial partition partition-all partition-by path pcalls peek permutations pick pick-all pmap pop pos? postwalk postwalk-demo postwalk-replace pow \
powers-of-2 pp pprint pprint-agent pprint-anon-func pprint-array pprint-atom pprint-binding-form pprint-code-list pprint-code-symbol pprint-cond pprint-condp pprint-defn pprint-hold-first pprint-if \
pprint-indent pprint-let pprint-list pprint-logical-block pprint-map pprint-newline pprint-reader-macro pprint-ref pprint-set pprint-simple-code-list pprint-simple-default pprint-simple-list pprint-tab \
pprint-vector pr pr-str prefer-method prefers pretty-writer prev prewalk prewalk-demo prewalk-replace primes primitives-classnames print print-cause-trace print-ctor print-dir print-doc print-docs print-dup \
print-help print-json print-method print-namespace-doc print-repl-info print-simple print-special-doc print-stack-trace print-str print-throwable print-trace-element printf println println-str prn prn-str \
prob product project proper-subset? proper-superset? proxy proxy-call-with-super proxy-mappings proxy-name proxy-super prxml pvalues pwd qsym quot raise raise* rand rand-elt rand-int rand-stream random-stream \
range ratio? rational? rationalize re-case re-find re-groups re-gsub re-matcher re-matches re-partition re-pattern re-seq re-split re-sub read read-json read-json-string read-line read-lines read-string \
reader reader-macros real rebind-fn rec-cat rec-seq reduce reductions ref ref-set refer refer-clojure reject release-pending-sends rem remove remove remove-method remove-ns remove-watch remove-watcher \
rename rename-keys repeat repeatedly repl repl repl-caught repl-exception repl-info repl-prompt repl-prompt repl-read replace replace replicate require reset! reset-meta! resolve rest resultset-seq reverse \
reversible? right right-locs rightmost rightmost? rights rint root root-cause root-type rotations round round rseq rsubseq run run* run-cont sample sample-mean sample-mean-variance sample-reduce sample-sum \
second select select select-keys selections send send-off separate seq seq seq-on seq-zip seq? seque sequence sequence-m sequence-t sequential? server-def set set-m set-pprint-dispatch set-repl-name set-repl-prompt \
set-rollback-only set-state set-val set-validator! set? sgn sh short show shuffle shutdown-agents sin skip-if-eol skip-whitespace slurp slurp slurp* some sort sort-by sorted-map sorted-map-by sorted-set sorted? \
source special-form-anchor special-symbol? spit split-at split-with sqr sqrt sqrt st-as-stream start-handling-break startparse-sax startparse-sax state-m state-t str str-join stream-drop stream-filter stream-flatten \
stream-m stream-map stream-next stream-repl stream-seq stream-type stream? string? stringify-keys struct struct-map subs subseq subset? subsets subvec sum supers superset? swap! symbol symbol-macrolet symbol? \
sync syntax-symbol-anchor tag take take-nth take-while tan template template? test the-ns throw-arg throw-if throw-if-not throw-msg throwf time to-array to-array-2d to-byte-array trace trace-fn-call trace-indent \
tracer trampoline transaction tree-seq true? two-forms type unchecked-add unchecked-dec unchecked-divide unchecked-inc unchecked-multiply unchecked-negate unchecked-remainder unchecked-subtract underive uniform \
union unquote unquote-splicing up update-in update-or-insert-values update-proxy update-state update-val update-values use use-method val vals var-get var-set var? vars vary-meta vec vector vector-zip vector? \
walk when when-first when-let when-not while with-bindings with-command-line with-connection with-handler with-in-reader with-in-str with-local-vars with-meta with-monad with-open with-out-append-writer \
with-out-str with-out-writer with-pprint-dispatch with-precision with-query-results with-sh-dir with-sh-env with-symbol-macros write write write-lines write-out writer writer-m xml-seq xml-zip zero zero? \
zero? zipf zipmap zippernew finally loop def monitor-enter & #Special_Forms throw var fn do recur . monitor-exit try let catch quote if set! \

word.chars.clojure=$(chars.alpha)$(chars.numeric)!$%&*/:<=>?^_~+-.@
word.characters.$(file.patterns.clojure)=$(word.chars.clojure)


comment.block.lisp=;
comment.box.start.lisp=;;
comment.box.middle.lisp=;;
comment.box.end.lisp=;;


# LISP styles

# Default
style.lisp.32=$(font.base)
# White space
style.lisp.0=fore:#7F7F7F
# Line Comment
style.lisp.1=$(colour.code.comment.box),$(font.code.comment.box)
# Number
style.lisp.2=$(colour.number)
# Keyword
style.lisp.3=$(colour.keyword),bold
# String
style.lisp.6=$(colour.string)
# Operators
style.lisp.10=$(colour.operator),bold
# Identifiers
style.lisp.9=
# End of line where string is not closed
style.lisp.8=fore:#FFFFFF,font:Verdana,size:9,back:#010133,eolfilled
# Matched Operators
style.lisp.34=fore:#FFFF00,bold
style.lisp.35=fore:#00FFFF,bold
# Braces are only matched in operator style
braces.lisp.style=10

#command.go.$(file.patterns.scheme)=c:\tools\pscheme\pscheme.exe /r $(FilePath)
command.go.$(file.patterns.scheme)=c:\tools\gambit\gsi.exe -f $(FilePath)
#command.go.$(file.patterns.scheme)=c:\tools\plt\mzscheme.exe -r $(FilePath)
command.go.subsystem.$(file.patterns.scheme)=0
