$AUTH_TYPE
$DOCUMENT_ROOT
$GATEWAY_INTERFACE
$GLOBALS
$HTTP_ACCEPT
$HTTP_ACCEPT_CHARSET
$HTTP_ACCEPT_ENCODING
$HTTP_ACCEPT_LANGUAGE
$HTTP_CONNECTION
$HTTP_HOST
$HTTP_REFERER
$HTTP_USER_AGENT
$PATH_TRANSLATED
$PHP_AUTH_PW
$PHP_AUTH_USER
$PHP_SELF
$QUERY_STRING
$REMOTE_ADDR
$REMOTE_HOST
$REMOTE_PORT
$REQUEST_METHOD
$REQUEST_URI
$SCRIPT_FILENAME
$SCRIPT_NAME
$SERVER_ADMIN
$SERVER_NAME
$SERVER_PORT
$SERVER_PROTOCOL
$SERVER_SIGNATURE
$SERVER_SOFTWARE
$_COOKIE
$_ENV
$_FILES
$_GET
$_POST
$_REQUEST
$_SERVER
$_SESSION
#~ php consts -thanks to MingFunWong https://github.com/mingfunwong/scite/blob/master/api/php.consts.api
E_ERROR
E_RECOVERABLE_ERROR
E_WARNING
E_PARSE
E_NOTICE
E_STRICT
E_CORE_ERROR
E_CORE_WARNING
E_COMPILE_ERROR
E_COMPILE_WARNING
E_USER_ERROR
E_USER_WARNING
E_USER_NOTICE
E_ALL
TRUE
FALSE
NULL
ZEND_THREAD_SAFE
PHP_VERSION
PHP_OS
PHP_SAPI
DEFAULT_INCLUDE_PATH
PEAR_INSTALL_DIR
PEAR_EXTENSION_DIR
PHP_EXTENSION_DIR
PHP_PREFIX
PHP_BINDIR
PHP_LIBDIR
PHP_DATADIR
PHP_SYSCONFDIR
PHP_LOCALSTATEDIR
PHP_CONFIG_FILE_PATH
PHP_CONFIG_FILE_SCAN_DIR
PHP_SHLIB_SUFFIX
PHP_EOL
PHP_INT_MAX
PHP_INT_SIZE
PHP_OUTPUT_HANDLER_START
PHP_OUTPUT_HANDLER_CONT
PHP_OUTPUT_HANDLER_END
UPLOAD_ERR_OK
UPLOAD_ERR_INI_SIZE
UPLOAD_ERR_FORM_SIZE
UPLOAD_ERR_PARTIAL
UPLOAD_ERR_NO_FILE
UPLOAD_ERR_NO_TMP_DIR
UPLOAD_ERR_CANT_WRITE
UPLOAD_ERR_EXTENSION
CAL_GREGORIAN
CAL_JULIAN
CAL_JEWISH
CAL_FRENCH
CAL_NUM_CALS
CAL_DOW_DAYNO
CAL_DOW_SHORT
CAL_DOW_LONG
CAL_MONTH_GREGORIAN_SHORT
CAL_MONTH_GREGORIAN_LONG
CAL_MONTH_JULIAN_SHORT
CAL_MONTH_JULIAN_LONG
CAL_MONTH_JEWISH
CAL_MONTH_FRENCH
CAL_EASTER_DEFAULT
CAL_EASTER_ROMAN
CAL_EASTER_ALWAYS_GREGORIAN
CAL_EASTER_ALWAYS_JULIAN
CAL_JEWISH_ADD_ALAFIM_GERESH
CAL_JEWISH_ADD_ALAFIM
CAL_JEWISH_ADD_GERESHAYIM
CLSCTX_INPROC_SERVER
CLSCTX_INPROC_HANDLER
CLSCTX_LOCAL_SERVER
CLSCTX_REMOTE_SERVER
CLSCTX_SERVER
CLSCTX_ALL
VT_NULL
VT_EMPTY
VT_UI1
VT_I1
VT_UI2
VT_I2
VT_UI4
VT_I4
VT_R4
VT_R8
VT_BOOL
VT_ERROR
VT_CY
VT_DATE
VT_BSTR
VT_DECIMAL
VT_UNKNOWN
VT_DISPATCH
VT_VARIANT
VT_INT
VT_UINT
VT_ARRAY
VT_BYREF
CP_ACP
CP_MACCP
CP_OEMCP
CP_UTF7
CP_UTF8
CP_SYMBOL
CP_THREAD_ACP
VARCMP_LT
VARCMP_EQ
VARCMP_GT
VARCMP_NULL
NORM_IGNORECASE
NORM_IGNORENONSPACE
NORM_IGNORESYMBOLS
NORM_IGNOREWIDTH
NORM_IGNOREKANATYPE
DISP_E_DIVBYZERO
DISP_E_OVERFLOW
DISP_E_BADINDEX
MK_E_UNAVAILABLE
INPUT_POST
INPUT_GET
INPUT_COOKIE
INPUT_ENV
INPUT_SERVER
INPUT_SESSION
INPUT_REQUEST
FILTER_FLAG_NONE
FILTER_REQUIRE_SCALAR
FILTER_REQUIRE_ARRAY
FILTER_FORCE_ARRAY
FILTER_NULL_ON_FAILURE
FILTER_VALIDATE_INT
FILTER_VALIDATE_BOOLEAN
FILTER_VALIDATE_FLOAT
FILTER_VALIDATE_REGEXP
FILTER_VALIDATE_URL
FILTER_VALIDATE_EMAIL
FILTER_VALIDATE_IP
FILTER_DEFAULT
FILTER_UNSAFE_RAW
FILTER_SANITIZE_STRING
FILTER_SANITIZE_STRIPPED
FILTER_SANITIZE_ENCODED
FILTER_SANITIZE_SPECIAL_CHARS
FILTER_SANITIZE_EMAIL
FILTER_SANITIZE_URL
FILTER_SANITIZE_NUMBER_INT
FILTER_SANITIZE_NUMBER_FLOAT
FILTER_SANITIZE_MAGIC_QUOTES
FILTER_CALLBACK
FILTER_FLAG_ALLOW_OCTAL
FILTER_FLAG_ALLOW_HEX
FILTER_FLAG_STRIP_LOW
FILTER_FLAG_STRIP_HIGH
FILTER_FLAG_ENCODE_LOW
FILTER_FLAG_ENCODE_HIGH
FILTER_FLAG_ENCODE_AMP
FILTER_FLAG_NO_ENCODE_QUOTES
FILTER_FLAG_EMPTY_STRING_NULL
FILTER_FLAG_ALLOW_FRACTION
FILTER_FLAG_ALLOW_THOUSAND
FILTER_FLAG_ALLOW_SCIENTIFIC
FILTER_FLAG_SCHEME_REQUIRED
FILTER_FLAG_HOST_REQUIRED
FILTER_FLAG_PATH_REQUIRED
FILTER_FLAG_QUERY_REQUIRED
FILTER_FLAG_IPV4
FILTER_FLAG_IPV6
FILTER_FLAG_NO_RES_RANGE
FILTER_FLAG_NO_PRIV_RANGE
FTP_ASCII
FTP_TEXT
FTP_BINARY
FTP_IMAGE
FTP_AUTORESUME
FTP_TIMEOUT_SEC
FTP_AUTOSEEK
FTP_FAILED
FTP_FINISHED
FTP_MOREDATA
HASH_HMAC
ICONV_IMPL
ICONV_VERSION
ICONV_MIME_DECODE_STRICT
ICONV_MIME_DECODE_CONTINUE_ON_ERROR
ODBC_TYPE
ODBC_BINMODE_PASSTHRU
ODBC_BINMODE_RETURN
ODBC_BINMODE_CONVERT
SQL_ODBC_CURSORS
SQL_CUR_USE_DRIVER
SQL_CUR_USE_IF_NEEDED
SQL_CUR_USE_ODBC
SQL_CONCURRENCY
SQL_CONCUR_READ_ONLY
SQL_CONCUR_LOCK
SQL_CONCUR_ROWVER
SQL_CONCUR_VALUES
SQL_CURSOR_TYPE
SQL_CURSOR_FORWARD_ONLY
SQL_CURSOR_KEYSET_DRIVEN
SQL_CURSOR_DYNAMIC
SQL_CURSOR_STATIC
SQL_KEYSET_SIZE
SQL_FETCH_FIRST
SQL_FETCH_NEXT
SQL_CHAR
SQL_VARCHAR
SQL_LONGVARCHAR
SQL_DECIMAL
SQL_NUMERIC
SQL_BIT
SQL_TINYINT
SQL_SMALLINT
SQL_INTEGER
SQL_BIGINT
SQL_REAL
SQL_FLOAT
SQL_DOUBLE
SQL_BINARY
SQL_VARBINARY
SQL_LONGVARBINARY
SQL_DATE
SQL_TIME
SQL_TIMESTAMP
PREG_PATTERN_ORDER
PREG_SET_ORDER
PREG_OFFSET_CAPTURE
PREG_SPLIT_NO_EMPTY
PREG_SPLIT_DELIM_CAPTURE
PREG_SPLIT_OFFSET_CAPTURE
PREG_GREP_INVERT
PREG_NO_ERROR
PREG_INTERNAL_ERROR
PREG_BACKTRACK_LIMIT_ERROR
PREG_RECURSION_LIMIT_ERROR
PREG_BAD_UTF8_ERROR
PCRE_VERSION
DATE_ATOM
DATE_COOKIE
DATE_ISO8601
DATE_RFC822
DATE_RFC850
DATE_RFC1036
DATE_RFC1123
DATE_RFC2822
DATE_RFC3339
DATE_RSS
DATE_W3C
SUNFUNCS_RET_TIMESTAMP
SUNFUNCS_RET_STRING
SUNFUNCS_RET_DOUBLE
LIBXML_VERSION
LIBXML_DOTTED_VERSION
LIBXML_NOENT
LIBXML_DTDLOAD
LIBXML_DTDATTR
LIBXML_DTDVALID
LIBXML_NOERROR
LIBXML_NOWARNING
LIBXML_NOBLANKS
LIBXML_XINCLUDE
LIBXML_NSCLEAN
LIBXML_NOCDATA
LIBXML_NONET
LIBXML_COMPACT
LIBXML_NOXMLDECL
LIBXML_NOEMPTYTAG
LIBXML_ERR_NONE
LIBXML_ERR_WARNING
LIBXML_ERR_ERROR
LIBXML_ERR_FATAL
CONNECTION_ABORTED
CONNECTION_NORMAL
CONNECTION_TIMEOUT
INI_USER
INI_PERDIR
INI_SYSTEM
INI_ALL
PHP_URL_SCHEME
PHP_URL_HOST
PHP_URL_PORT
PHP_URL_USER
PHP_URL_PASS
PHP_URL_PATH
PHP_URL_QUERY
PHP_URL_FRAGMENT
M_E
M_LOG2E
M_LOG10E
M_LN2
M_LN10
M_PI
M_PI_2
M_PI_4
M_1_PI
M_2_PI
M_SQRTPI
M_2_SQRTPI
M_LNPI
M_EULER
M_SQRT2
M_SQRT1_2
M_SQRT3
INF
NAN
INFO_GENERAL
INFO_CREDITS
INFO_CONFIGURATION
INFO_MODULES
INFO_ENVIRONMENT
INFO_VARIABLES
INFO_LICENSE
INFO_ALL
CREDITS_GROUP
CREDITS_GENERAL
CREDITS_SAPI
CREDITS_MODULES
CREDITS_DOCS
CREDITS_FULLPAGE
CREDITS_QA
CREDITS_ALL
HTML_SPECIALCHARS
HTML_ENTITIES
ENT_COMPAT
ENT_QUOTES
ENT_NOQUOTES
STR_PAD_LEFT
STR_PAD_RIGHT
STR_PAD_BOTH
PATHINFO_DIRNAME
PATHINFO_BASENAME
PATHINFO_EXTENSION
PATHINFO_FILENAME
CHAR_MAX
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_ALL
SEEK_SET
SEEK_CUR
SEEK_END
LOCK_SH
LOCK_EX
LOCK_UN
LOCK_NB
STREAM_NOTIFY_CONNECT
STREAM_NOTIFY_AUTH_REQUIRED
STREAM_NOTIFY_AUTH_RESULT
STREAM_NOTIFY_MIME_TYPE_IS
STREAM_NOTIFY_FILE_SIZE_IS
STREAM_NOTIFY_REDIRECTED
STREAM_NOTIFY_PROGRESS
STREAM_NOTIFY_FAILURE
STREAM_NOTIFY_COMPLETED
STREAM_NOTIFY_RESOLVE
STREAM_NOTIFY_SEVERITY_INFO
STREAM_NOTIFY_SEVERITY_WARN
STREAM_NOTIFY_SEVERITY_ERR
STREAM_FILTER_READ
STREAM_FILTER_WRITE
STREAM_FILTER_ALL
STREAM_CLIENT_PERSISTENT
STREAM_CLIENT_ASYNC_CONNECT
STREAM_CLIENT_CONNECT
STREAM_CRYPTO_METHOD_SSLv2_CLIENT
STREAM_CRYPTO_METHOD_SSLv3_CLIENT
STREAM_CRYPTO_METHOD_SSLv23_CLIENT
STREAM_CRYPTO_METHOD_TLS_CLIENT
STREAM_CRYPTO_METHOD_SSLv2_SERVER
STREAM_CRYPTO_METHOD_SSLv3_SERVER
STREAM_CRYPTO_METHOD_SSLv23_SERVER
STREAM_CRYPTO_METHOD_TLS_SERVER
STREAM_SHUT_RD
STREAM_SHUT_WR
STREAM_SHUT_RDWR
STREAM_PF_INET
STREAM_PF_INET6
STREAM_PF_UNIX
STREAM_IPPROTO_IP
STREAM_IPPROTO_TCP
STREAM_IPPROTO_UDP
STREAM_IPPROTO_ICMP
STREAM_IPPROTO_RAW
STREAM_SOCK_STREAM
STREAM_SOCK_DGRAM
STREAM_SOCK_RAW
STREAM_SOCK_SEQPACKET
STREAM_SOCK_RDM
STREAM_PEEK
STREAM_OOB
STREAM_SERVER_BIND
STREAM_SERVER_LISTEN
FILE_USE_INCLUDE_PATH
FILE_IGNORE_NEW_LINES
FILE_SKIP_EMPTY_LINES
FILE_APPEND
FILE_NO_DEFAULT_CONTEXT
PSFS_PASS_ON
PSFS_FEED_ME
PSFS_ERR_FATAL
PSFS_FLAG_NORMAL
PSFS_FLAG_FLUSH_INC
PSFS_FLAG_FLUSH_CLOSE
CRYPT_SALT_LENGTH
CRYPT_STD_DES
CRYPT_EXT_DES
CRYPT_MD5
CRYPT_BLOWFISH
DIRECTORY_SEPARATOR
PATH_SEPARATOR
GLOB_BRACE
GLOB_MARK
GLOB_NOSORT
GLOB_NOCHECK
GLOB_NOESCAPE
GLOB_ERR
GLOB_ONLYDIR
GLOB_AVAILABLE_FLAGS
LOG_EMERG
LOG_ALERT
LOG_CRIT
LOG_ERR
LOG_WARNING
LOG_NOTICE
LOG_INFO
LOG_DEBUG
LOG_KERN
LOG_USER
LOG_MAIL
LOG_DAEMON
LOG_AUTH
LOG_SYSLOG
LOG_LPR
LOG_NEWS
LOG_UUCP
LOG_CRON
LOG_AUTHPRIV
LOG_PID
LOG_CONS
LOG_ODELAY
LOG_NDELAY
LOG_NOWAIT
LOG_PERROR
EXTR_OVERWRITE
EXTR_SKIP
EXTR_PREFIX_SAME
EXTR_PREFIX_ALL
EXTR_PREFIX_INVALID
EXTR_PREFIX_IF_EXISTS
EXTR_IF_EXISTS
EXTR_REFS
SORT_ASC
SORT_DESC
SORT_REGULAR
SORT_NUMERIC
SORT_STRING
SORT_LOCALE_STRING
CASE_LOWER
CASE_UPPER
COUNT_NORMAL
COUNT_RECURSIVE
ASSERT_ACTIVE
ASSERT_CALLBACK
ASSERT_BAIL
ASSERT_WARNING
ASSERT_QUIET_EVAL
STREAM_USE_PATH
STREAM_IGNORE_URL
STREAM_ENFORCE_SAFE_MODE
STREAM_REPORT_ERRORS
STREAM_MUST_SEEK
STREAM_URL_STAT_LINK
STREAM_URL_STAT_QUIET
STREAM_MKDIR_RECURSIVE
STREAM_IS_URL
IMAGETYPE_GIF
IMAGETYPE_JPEG
IMAGETYPE_PNG
IMAGETYPE_SWF
IMAGETYPE_PSD
IMAGETYPE_BMP
IMAGETYPE_TIFF_II
IMAGETYPE_TIFF_MM
IMAGETYPE_JPC
IMAGETYPE_JP2
IMAGETYPE_JPX
IMAGETYPE_JB2
IMAGETYPE_SWC
IMAGETYPE_IFF
IMAGETYPE_WBMP
IMAGETYPE_JPEG2000
IMAGETYPE_XBM
T_REQUIRE_ONCE
T_REQUIRE
T_EVAL
T_INCLUDE_ONCE
T_INCLUDE
T_LOGICAL_OR
T_LOGICAL_XOR
T_LOGICAL_AND
T_PRINT
T_SR_EQUAL
T_SL_EQUAL
T_XOR_EQUAL
T_OR_EQUAL
T_AND_EQUAL
T_MOD_EQUAL
T_CONCAT_EQUAL
T_DIV_EQUAL
T_MUL_EQUAL
T_MINUS_EQUAL
T_PLUS_EQUAL
T_BOOLEAN_OR
T_BOOLEAN_AND
T_IS_NOT_IDENTICAL
T_IS_IDENTICAL
T_IS_NOT_EQUAL
T_IS_EQUAL
T_IS_GREATER_OR_EQUAL
T_IS_SMALLER_OR_EQUAL
T_SR
T_SL
T_INSTANCEOF
T_UNSET_CAST
T_BOOL_CAST
T_OBJECT_CAST
T_ARRAY_CAST
T_STRING_CAST
T_DOUBLE_CAST
T_INT_CAST
T_DEC
T_INC
T_CLONE
T_NEW
T_EXIT
T_IF
T_ELSEIF
T_ELSE
T_ENDIF
T_LNUMBER
T_DNUMBER
T_STRING
T_STRING_VARNAME
T_VARIABLE
T_NUM_STRING
T_INLINE_HTML
T_CHARACTER
T_BAD_CHARACTER
T_ENCAPSED_AND_WHITESPACE
T_CONSTANT_ENCAPSED_STRING
T_ECHO
T_DO
T_WHILE
T_ENDWHILE
T_FOR
T_ENDFOR
T_FOREACH
T_ENDFOREACH
T_DECLARE
T_ENDDECLARE
T_AS
T_SWITCH
T_ENDSWITCH
T_CASE
T_DEFAULT
T_BREAK
T_CONTINUE
T_FUNCTION
T_CONST
T_RETURN
T_TRY
T_CATCH
T_THROW
T_USE
T_GLOBAL
T_PUBLIC
T_PROTECTED
T_PRIVATE
T_FINAL
T_ABSTRACT
T_STATIC
T_VAR
T_UNSET
T_ISSET
T_EMPTY
T_HALT_COMPILER
T_CLASS
T_INTERFACE
T_EXTENDS
T_IMPLEMENTS
T_OBJECT_OPERATOR
T_DOUBLE_ARROW
T_LIST
T_ARRAY
T_CLASS_C
T_METHOD_C
T_FUNC_C
T_LINE
T_FILE
T_COMMENT
T_DOC_COMMENT
T_OPEN_TAG
T_OPEN_TAG_WITH_ECHO
T_CLOSE_TAG
T_WHITESPACE
T_START_HEREDOC
T_END_HEREDOC
T_DOLLAR_OPEN_CURLY_BRACES
T_CURLY_OPEN
T_PAAMAYIM_NEKUDOTAYIM
T_DOUBLE_COLON
FORCE_GZIP
FORCE_DEFLATE
XML_ELEMENT_NODE
XML_ATTRIBUTE_NODE
XML_TEXT_NODE
XML_CDATA_SECTION_NODE
XML_ENTITY_REF_NODE
XML_ENTITY_NODE
XML_PI_NODE
XML_COMMENT_NODE
XML_DOCUMENT_NODE
XML_DOCUMENT_TYPE_NODE
XML_DOCUMENT_FRAG_NODE
XML_NOTATION_NODE
XML_HTML_DOCUMENT_NODE
XML_DTD_NODE
XML_ELEMENT_DECL_NODE
XML_ATTRIBUTE_DECL_NODE
XML_ENTITY_DECL_NODE
XML_NAMESPACE_DECL_NODE
XML_LOCAL_NAMESPACE
XML_ATTRIBUTE_CDATA
XML_ATTRIBUTE_ID
XML_ATTRIBUTE_IDREF
XML_ATTRIBUTE_IDREFS
XML_ATTRIBUTE_ENTITY
XML_ATTRIBUTE_NMTOKEN
XML_ATTRIBUTE_NMTOKENS
XML_ATTRIBUTE_ENUMERATION
XML_ATTRIBUTE_NOTATION
DOM_PHP_ERR
DOM_INDEX_SIZE_ERR
DOMSTRING_SIZE_ERR
DOM_HIERARCHY_REQUEST_ERR
DOM_WRONG_DOCUMENT_ERR
DOM_INVALID_CHARACTER_ERR
DOM_NO_DATA_ALLOWED_ERR
DOM_NO_MODIFICATION_ALLOWED_ERR
DOM_NOT_FOUND_ERR
DOM_NOT_SUPPORTED_ERR
DOM_INUSE_ATTRIBUTE_ERR
DOM_INVALID_STATE_ERR
DOM_SYNTAX_ERR
DOM_INVALID_MODIFICATION_ERR
DOM_NAMESPACE_ERR
DOM_INVALID_ACCESS_ERR
DOM_VALIDATION_ERR
XML_ERROR_NONE
XML_ERROR_NO_MEMORY
XML_ERROR_SYNTAX
XML_ERROR_NO_ELEMENTS
XML_ERROR_INVALID_TOKEN
XML_ERROR_UNCLOSED_TOKEN
XML_ERROR_PARTIAL_CHAR
XML_ERROR_TAG_MISMATCH
XML_ERROR_DUPLICATE_ATTRIBUTE
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
XML_ERROR_PARAM_ENTITY_REF
XML_ERROR_UNDEFINED_ENTITY
XML_ERROR_RECURSIVE_ENTITY_REF
XML_ERROR_ASYNC_ENTITY
XML_ERROR_BAD_CHAR_REF
XML_ERROR_BINARY_ENTITY_REF
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
XML_ERROR_MISPLACED_XML_PI
XML_ERROR_UNKNOWN_ENCODING
XML_ERROR_INCORRECT_ENCODING
XML_ERROR_UNCLOSED_CDATA_SECTION
XML_ERROR_EXTERNAL_ENTITY_HANDLING
XML_OPTION_CASE_FOLDING
XML_OPTION_TARGET_ENCODING
XML_OPTION_SKIP_TAGSTART
XML_OPTION_SKIP_WHITE
XML_SAX_IMPL
CURLOPT_DNS_USE_GLOBAL_CACHE
CURLOPT_DNS_CACHE_TIMEOUT
CURLOPT_PORT
CURLOPT_FILE
CURLOPT_READDATA
CURLOPT_INFILE
CURLOPT_INFILESIZE
CURLOPT_URL
CURLOPT_PROXY
CURLOPT_VERBOSE
CURLOPT_HEADER
CURLOPT_HTTPHEADER
CURLOPT_NOPROGRESS
CURLOPT_NOBODY
CURLOPT_FAILONERROR
CURLOPT_UPLOAD
CURLOPT_POST
CURLOPT_FTPLISTONLY
CURLOPT_FTPAPPEND
CURLOPT_NETRC
CURLOPT_FOLLOWLOCATION
CURLOPT_PUT
CURLOPT_USERPWD
CURLOPT_PROXYUSERPWD
CURLOPT_RANGE
CURLOPT_TIMEOUT
CURLOPT_POSTFIELDS
CURLOPT_REFERER
CURLOPT_USERAGENT
CURLOPT_FTPPORT
CURLOPT_FTP_USE_EPSV
CURLOPT_LOW_SPEED_LIMIT
CURLOPT_LOW_SPEED_TIME
CURLOPT_RESUME_FROM
CURLOPT_COOKIE
CURLOPT_COOKIESESSION
CURLOPT_AUTOREFERER
CURLOPT_SSLCERT
CURLOPT_SSLCERTPASSWD
CURLOPT_WRITEHEADER
CURLOPT_SSL_VERIFYHOST
CURLOPT_COOKIEFILE
CURLOPT_SSLVERSION
CURLOPT_TIMECONDITION
CURLOPT_TIMEVALUE
CURLOPT_CUSTOMREQUEST
CURLOPT_STDERR
CURLOPT_TRANSFERTEXT
CURLOPT_RETURNTRANSFER
CURLOPT_QUOTE
CURLOPT_POSTQUOTE
CURLOPT_INTERFACE
CURLOPT_KRB4LEVEL
CURLOPT_HTTPPROXYTUNNEL
CURLOPT_FILETIME
CURLOPT_WRITEFUNCTION
CURLOPT_READFUNCTION
CURLOPT_HEADERFUNCTION
CURLOPT_MAXREDIRS
CURLOPT_MAXCONNECTS
CURLOPT_CLOSEPOLICY
CURLOPT_FRESH_CONNECT
CURLOPT_FORBID_REUSE
CURLOPT_RANDOM_FILE
CURLOPT_EGDSOCKET
CURLOPT_CONNECTTIMEOUT
CURLOPT_SSL_VERIFYPEER
CURLOPT_CAINFO
CURLOPT_CAPATH
CURLOPT_COOKIEJAR
CURLOPT_SSL_CIPHER_LIST
CURLOPT_BINARYTRANSFER
CURLOPT_NOSIGNAL
CURLOPT_PROXYTYPE
CURLOPT_BUFFERSIZE
CURLOPT_HTTPGET
CURLOPT_HTTP_VERSION
CURLOPT_SSLKEY
CURLOPT_SSLKEYTYPE
CURLOPT_SSLKEYPASSWD
CURLOPT_SSLENGINE
CURLOPT_SSLENGINE_DEFAULT
CURLOPT_SSLCERTTYPE
CURLOPT_CRLF
CURLOPT_ENCODING
CURLOPT_PROXYPORT
CURLOPT_UNRESTRICTED_AUTH
CURLOPT_FTP_USE_EPRT
CURLOPT_TCP_NODELAY
CURLOPT_HTTP200ALIASES
CURL_TIMECOND_IFMODSINCE
CURL_TIMECOND_IFUNMODSINCE
CURL_TIMECOND_LASTMOD
CURLOPT_HTTPAUTH
CURLAUTH_BASIC
CURLAUTH_DIGEST
CURLAUTH_GSSNEGOTIATE
CURLAUTH_NTLM
CURLAUTH_ANY
CURLAUTH_ANYSAFE
CURLOPT_PROXYAUTH
CURLOPT_FTP_CREATE_MISSING_DIRS
CURLOPT_PRIVATE
CURLCLOSEPOLICY_LEAST_RECENTLY_USED
CURLCLOSEPOLICY_LEAST_TRAFFIC
CURLCLOSEPOLICY_SLOWEST
CURLCLOSEPOLICY_CALLBACK
CURLCLOSEPOLICY_OLDEST
CURLINFO_EFFECTIVE_URL
CURLINFO_HTTP_CODE
CURLINFO_HEADER_SIZE
CURLINFO_REQUEST_SIZE
CURLINFO_TOTAL_TIME
CURLINFO_NAMELOOKUP_TIME
CURLINFO_CONNECT_TIME
CURLINFO_PRETRANSFER_TIME
CURLINFO_SIZE_UPLOAD
CURLINFO_SIZE_DOWNLOAD
CURLINFO_SPEED_DOWNLOAD
CURLINFO_SPEED_UPLOAD
CURLINFO_FILETIME
CURLINFO_SSL_VERIFYRESULT
CURLINFO_CONTENT_LENGTH_DOWNLOAD
CURLINFO_CONTENT_LENGTH_UPLOAD
CURLINFO_STARTTRANSFER_TIME
CURLINFO_CONTENT_TYPE
CURLINFO_REDIRECT_TIME
CURLINFO_REDIRECT_COUNT
CURLINFO_HEADER_OUT
CURLINFO_PRIVATE
CURL_VERSION_IPV6
CURL_VERSION_KERBEROS4
CURL_VERSION_SSL
CURL_VERSION_LIBZ
CURLVERSION_NOW
CURLE_OK
CURLE_UNSUPPORTED_PROTOCOL
CURLE_FAILED_INIT
CURLE_URL_MALFORMAT
CURLE_URL_MALFORMAT_USER
CURLE_COULDNT_RESOLVE_PROXY
CURLE_COULDNT_RESOLVE_HOST
CURLE_COULDNT_CONNECT
CURLE_FTP_WEIRD_SERVER_REPLY
CURLE_FTP_ACCESS_DENIED
CURLE_FTP_USER_PASSWORD_INCORRECT
CURLE_FTP_WEIRD_PASS_REPLY
CURLE_FTP_WEIRD_USER_REPLY
CURLE_FTP_WEIRD_PASV_REPLY
CURLE_FTP_WEIRD_227_FORMAT
CURLE_FTP_CANT_GET_HOST
CURLE_FTP_CANT_RECONNECT
CURLE_FTP_COULDNT_SET_BINARY
CURLE_PARTIAL_FILE
CURLE_FTP_COULDNT_RETR_FILE
CURLE_FTP_WRITE_ERROR
CURLE_FTP_QUOTE_ERROR
CURLE_HTTP_NOT_FOUND
CURLE_WRITE_ERROR
CURLE_MALFORMAT_USER
CURLE_FTP_COULDNT_STOR_FILE
CURLE_READ_ERROR
CURLE_OUT_OF_MEMORY
CURLE_OPERATION_TIMEOUTED
CURLE_FTP_COULDNT_SET_ASCII
CURLE_FTP_PORT_FAILED
CURLE_FTP_COULDNT_USE_REST
CURLE_FTP_COULDNT_GET_SIZE
CURLE_HTTP_RANGE_ERROR
CURLE_HTTP_POST_ERROR
CURLE_SSL_CONNECT_ERROR
CURLE_FTP_BAD_DOWNLOAD_RESUME
CURLE_FILE_COULDNT_READ_FILE
CURLE_LDAP_CANNOT_BIND
CURLE_LDAP_SEARCH_FAILED
CURLE_LIBRARY_NOT_FOUND
CURLE_FUNCTION_NOT_FOUND
CURLE_ABORTED_BY_CALLBACK
CURLE_BAD_FUNCTION_ARGUMENT
CURLE_BAD_CALLING_ORDER
CURLE_HTTP_PORT_FAILED
CURLE_BAD_PASSWORD_ENTERED
CURLE_TOO_MANY_REDIRECTS
CURLE_UNKNOWN_TELNET_OPTION
CURLE_TELNET_OPTION_SYNTAX
CURLE_OBSOLETE
CURLE_SSL_PEER_CERTIFICATE
CURLE_GOT_NOTHING
CURLE_SSL_ENGINE_NOTFOUND
CURLE_SSL_ENGINE_SETFAILED
CURLE_SEND_ERROR
CURLE_RECV_ERROR
CURLE_SHARE_IN_USE
CURLE_SSL_CERTPROBLEM
CURLE_SSL_CIPHER
CURLE_SSL_CACERT
CURLE_BAD_CONTENT_ENCODING
CURLE_LDAP_INVALID_URL
CURLE_FILESIZE_EXCEEDED
CURLE_FTP_SSL_FAILED
CURLPROXY_HTTP
CURLPROXY_SOCKS5
CURL_NETRC_OPTIONAL
CURL_NETRC_IGNORED
CURL_NETRC_REQUIRED
CURL_HTTP_VERSION_NONE
CURL_HTTP_VERSION_1_0
CURL_HTTP_VERSION_1_1
CURLM_CALL_MULTI_PERFORM
CURLM_OK
CURLM_BAD_HANDLE
CURLM_BAD_EASY_HANDLE
CURLM_OUT_OF_MEMORY
CURLM_INTERNAL_ERROR
CURLMSG_DONE
CURLOPT_FTPSSLAUTH
CURLFTPAUTH_DEFAULT
CURLFTPAUTH_SSL
CURLFTPAUTH_TLS
CURLOPT_FTP_SSL
CURLFTPSSL_NONE
CURLFTPSSL_TRY
CURLFTPSSL_CONTROL
CURLFTPSSL_ALL
IMG_GIF
IMG_JPG
IMG_JPEG
IMG_PNG
IMG_WBMP
IMG_XPM
IMG_COLOR_TILED
IMG_COLOR_STYLED
IMG_COLOR_BRUSHED
IMG_COLOR_STYLEDBRUSHED
IMG_COLOR_TRANSPARENT
IMG_ARC_ROUNDED
IMG_ARC_PIE
IMG_ARC_CHORD
IMG_ARC_NOFILL
IMG_ARC_EDGED
IMG_GD2_RAW
IMG_GD2_COMPRESSED
IMG_EFFECT_REPLACE
IMG_EFFECT_ALPHABLEND
IMG_EFFECT_NORMAL
IMG_EFFECT_OVERLAY
GD_BUNDLED
IMG_FILTER_NEGATE
IMG_FILTER_GRAYSCALE
IMG_FILTER_BRIGHTNESS
IMG_FILTER_CONTRAST
IMG_FILTER_COLORIZE
IMG_FILTER_EDGEDETECT
IMG_FILTER_GAUSSIAN_BLUR
IMG_FILTER_SELECTIVE_BLUR
IMG_FILTER_EMBOSS
IMG_FILTER_MEAN_REMOVAL
IMG_FILTER_SMOOTH
GD_VERSION
GD_MAJOR_VERSION
GD_MINOR_VERSION
GD_RELEASE_VERSION
GD_EXTRA_VERSION
PNG_NO_FILTER
PNG_FILTER_NONE
PNG_FILTER_SUB
PNG_FILTER_UP
PNG_FILTER_AVG
PNG_FILTER_PAETH
PNG_ALL_FILTERS
MB_OVERLOAD_MAIL
MB_OVERLOAD_STRING
MB_OVERLOAD_REGEX
MB_CASE_UPPER
MB_CASE_LOWER
MB_CASE_TITLE
MCRYPT_ENCRYPT
MCRYPT_DECRYPT
MCRYPT_DEV_RANDOM
MCRYPT_DEV_URANDOM
MCRYPT_RAND
MCRYPT_3DES
MCRYPT_ARCFOUR_IV
MCRYPT_ARCFOUR
MCRYPT_BLOWFISH
MCRYPT_BLOWFISH_COMPAT
MCRYPT_CAST_128
MCRYPT_CAST_256
MCRYPT_CRYPT
MCRYPT_DES
MCRYPT_ENIGNA
MCRYPT_GOST
MCRYPT_LOKI97
MCRYPT_PANAMA
MCRYPT_RC2
MCRYPT_RIJNDAEL_128
MCRYPT_RIJNDAEL_192
MCRYPT_RIJNDAEL_256
MCRYPT_SAFER64
MCRYPT_SAFER128
MCRYPT_SAFERPLUS
MCRYPT_SERPENT
MCRYPT_THREEWAY
MCRYPT_TRIPLEDES
MCRYPT_TWOFISH
MCRYPT_WAKE
MCRYPT_XTEA
MCRYPT_IDEA
MCRYPT_MARS
MCRYPT_RC6
MCRYPT_SKIPJACK
MCRYPT_MODE_CBC
MCRYPT_MODE_CFB
MCRYPT_MODE_ECB
MCRYPT_MODE_NOFB
MCRYPT_MODE_OFB
MCRYPT_MODE_STREAM
MYSQL_ASSOC
MYSQL_NUM
MYSQL_BOTH
MYSQL_CLIENT_COMPRESS
MYSQL_CLIENT_SSL
MYSQL_CLIENT_INTERACTIVE
MYSQL_CLIENT_IGNORE_SPACE
MYSQLI_READ_DEFAULT_GROUP
MYSQLI_READ_DEFAULT_FILE
MYSQLI_OPT_CONNECT_TIMEOUT
MYSQLI_OPT_LOCAL_INFILE
MYSQLI_INIT_COMMAND
MYSQLI_CLIENT_SSL
MYSQLI_CLIENT_COMPRESS
MYSQLI_CLIENT_INTERACTIVE
MYSQLI_CLIENT_IGNORE_SPACE
MYSQLI_CLIENT_NO_SCHEMA
MYSQLI_CLIENT_FOUND_ROWS
MYSQLI_STORE_RESULT
MYSQLI_USE_RESULT
MYSQLI_ASSOC
MYSQLI_NUM
MYSQLI_BOTH
MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH
MYSQLI_STMT_ATTR_CURSOR_TYPE
MYSQLI_CURSOR_TYPE_NO_CURSOR
MYSQLI_CURSOR_TYPE_READ_ONLY
MYSQLI_CURSOR_TYPE_FOR_UPDATE
MYSQLI_CURSOR_TYPE_SCROLLABLE
MYSQLI_STMT_ATTR_PREFETCH_ROWS
MYSQLI_NOT_NULL_FLAG
MYSQLI_PRI_KEY_FLAG
MYSQLI_UNIQUE_KEY_FLAG
MYSQLI_MULTIPLE_KEY_FLAG
MYSQLI_BLOB_FLAG
MYSQLI_UNSIGNED_FLAG
MYSQLI_ZEROFILL_FLAG
MYSQLI_AUTO_INCREMENT_FLAG
MYSQLI_TIMESTAMP_FLAG
MYSQLI_SET_FLAG
MYSQLI_NUM_FLAG
MYSQLI_PART_KEY_FLAG
MYSQLI_GROUP_FLAG
MYSQLI_TYPE_DECIMAL
MYSQLI_TYPE_TINY
MYSQLI_TYPE_SHORT
MYSQLI_TYPE_LONG
MYSQLI_TYPE_FLOAT
MYSQLI_TYPE_DOUBLE
MYSQLI_TYPE_NULL
MYSQLI_TYPE_TIMESTAMP
MYSQLI_TYPE_LONGLONG
MYSQLI_TYPE_INT24
MYSQLI_TYPE_DATE
MYSQLI_TYPE_TIME
MYSQLI_TYPE_DATETIME
MYSQLI_TYPE_YEAR
MYSQLI_TYPE_NEWDATE
MYSQLI_TYPE_ENUM
MYSQLI_TYPE_SET
MYSQLI_TYPE_TINY_BLOB
MYSQLI_TYPE_MEDIUM_BLOB
MYSQLI_TYPE_LONG_BLOB
MYSQLI_TYPE_BLOB
MYSQLI_TYPE_VAR_STRING
MYSQLI_TYPE_STRING
MYSQLI_TYPE_CHAR
MYSQLI_TYPE_INTERVAL
MYSQLI_TYPE_GEOMETRY
MYSQLI_TYPE_NEWDECIMAL
MYSQLI_TYPE_BIT
MYSQLI_SET_CHARSET_NAME
MYSQLI_RPL_MASTER
MYSQLI_RPL_SLAVE
MYSQLI_RPL_ADMIN
MYSQLI_NO_DATA
MYSQLI_DATA_TRUNCATED
MYSQLI_REPORT_INDEX
MYSQLI_REPORT_ERROR
MYSQLI_REPORT_STRICT
MYSQLI_REPORT_ALL
MYSQLI_REPORT_OFF
SOAP_1_1
SOAP_1_2
SOAP_PERSISTENCE_SESSION
SOAP_PERSISTENCE_REQUEST
SOAP_FUNCTIONS_ALL
SOAP_ENCODED
SOAP_LITERAL
SOAP_RPC
SOAP_DOCUMENT
SOAP_ACTOR_NEXT
SOAP_ACTOR_NONE
SOAP_ACTOR_UNLIMATERECEIVER
SOAP_COMPRESSION_ACCEPT
SOAP_COMPRESSION_GZIP
SOAP_COMPRESSION_DEFLATE
SOAP_AUTHENTICATION_BASIC
SOAP_AUTHENTICATION_DIGEST
UNKNOWN_TYPE
XSD_STRING
XSD_BOOLEAN
XSD_DECIMAL
XSD_FLOAT
XSD_DOUBLE
XSD_DURATION
XSD_DATETIME
XSD_TIME
XSD_DATE
XSD_GYEARMONTH
XSD_GYEAR
XSD_GMONTHDAY
XSD_GDAY
XSD_GMONTH
XSD_HEXBINARY
XSD_BASE64BINARY
XSD_ANYURI
XSD_QNAME
XSD_NOTATION
XSD_NORMALIZEDSTRING
XSD_TOKEN
XSD_LANGUAGE
XSD_NMTOKEN
XSD_NAME
XSD_NCNAME
XSD_ID
XSD_IDREF
XSD_IDREFS
XSD_ENTITY
XSD_ENTITIES
XSD_INTEGER
XSD_NONPOSITIVEINTEGER
XSD_NEGATIVEINTEGER
XSD_LONG
XSD_INT
XSD_SHORT
XSD_BYTE
XSD_NONNEGATIVEINTEGER
XSD_UNSIGNEDLONG
XSD_UNSIGNEDINT
XSD_UNSIGNEDSHORT
XSD_UNSIGNEDBYTE
XSD_POSITIVEINTEGER
XSD_NMTOKENS
XSD_ANYTYPE
XSD_ANYXML
APACHE_MAP
SOAP_ENC_OBJECT
SOAP_ENC_ARRAY
XSD_1999_TIMEINSTANT
XSD_NAMESPACE
XSD_1999_NAMESPACE
SOAP_SINGLE_ELEMENT_ARRAYS
SOAP_WAIT_ONE_WAY_CALLS
SOAP_USE_XSI_ARRAY_TYPE
WSDL_CACHE_NONE
WSDL_CACHE_DISK
WSDL_CACHE_MEMORY
WSDL_CACHE_BOTH
AF_UNIX
AF_INET
AF_INET6
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
MSG_OOB
MSG_WAITALL
MSG_PEEK
MSG_DONTROUTE
SO_DEBUG
SO_REUSEADDR
SO_KEEPALIVE
SO_DONTROUTE
SO_LINGER
SO_BROADCAST
SO_OOBINLINE
SO_SNDBUF
SO_RCVBUF
SO_SNDLOWAT
SO_RCVLOWAT
SO_SNDTIMEO
SO_RCVTIMEO
SO_TYPE
SO_ERROR
SOL_SOCKET
SOMAXCONN
PHP_NORMAL_READ
PHP_BINARY_READ
SOCKET_EINTR
SOCKET_EBADF
SOCKET_EACCES
SOCKET_EFAULT
SOCKET_EINVAL
SOCKET_EMFILE
SOCKET_EWOULDBLOCK
SOCKET_EINPROGRESS
SOCKET_EALREADY
SOCKET_ENOTSOCK
SOCKET_EDESTADDRREQ
SOCKET_EMSGSIZE
SOCKET_EPROTOTYPE
SOCKET_ENOPROTOOPT
SOCKET_EPROTONOSUPPORT
SOCKET_ESOCKTNOSUPPORT
SOCKET_EOPNOTSUPP
SOCKET_EPFNOSUPPORT
SOCKET_EAFNOSUPPORT
SOCKET_EADDRINUSE
SOCKET_EADDRNOTAVAIL
SOCKET_ENETDOWN
SOCKET_ENETUNREACH
SOCKET_ENETRESET
SOCKET_ECONNABORTED
SOCKET_ECONNRESET
SOCKET_ENOBUFS
SOCKET_EISCONN
SOCKET_ENOTCONN
SOCKET_ESHUTDOWN
SOCKET_ETOOMANYREFS
SOCKET_ETIMEDOUT
SOCKET_ECONNREFUSED
SOCKET_ELOOP
SOCKET_ENAMETOOLONG
SOCKET_EHOSTDOWN
SOCKET_EHOSTUNREACH
SOCKET_ENOTEMPTY
SOCKET_EPROCLIM
SOCKET_EUSERS
SOCKET_EDQUOT
SOCKET_ESTALE
SOCKET_EREMOTE
SOCKET_EDISCON
SOCKET_SYSNOTREADY
SOCKET_VERNOTSUPPORTED
SOCKET_NOTINITIALISED
SOCKET_HOST_NOT_FOUND
SOCKET_TRY_AGAIN
SOCKET_NO_RECOVERY
SOCKET_NO_DATA
SOCKET_NO_ADDRESS
SOL_TCP
SOL_UDP
SQLITE_BOTH
SQLITE_NUM
SQLITE_ASSOC
SQLITE_OK
SQLITE_ERROR
SQLITE_INTERNAL
SQLITE_PERM
SQLITE_ABORT
SQLITE_BUSY
SQLITE_LOCKED
SQLITE_NOMEM
SQLITE_READONLY
SQLITE_INTERRUPT
SQLITE_IOERR
SQLITE_CORRUPT
SQLITE_NOTFOUND
SQLITE_FULL
SQLITE_CANTOPEN
SQLITE_PROTOCOL
SQLITE_EMPTY
SQLITE_SCHEMA
SQLITE_TOOBIG
SQLITE_CONSTRAINT
SQLITE_MISMATCH
SQLITE_MISUSE
SQLITE_NOLFS
SQLITE_AUTH
SQLITE_NOTADB
SQLITE_FORMAT
SQLITE_ROW
SQLITE_DONE
MEMCACHE_COMPRESSED
MEMCACHE_HAVE_SESSION
EACCELERATOR_VERSION
EACCELERATOR_SHM_AND_DISK
EACCELERATOR_SHM
EACCELERATOR_SHM_ONLY
EACCELERATOR_DISK_ONLY
EACCELERATOR_NONE
OPT_PASS_1
OPT_PASS_2
OPT_PASS_3
OPT_PASS_4
OPT_PASS_5
OPT_PASS_6
OPT_PASS_7
OPT_PASS_8
OPT_PASS_9
OPT_PASS_10
OPT_ALL
OPTIMIZER_VERSION
DEBUGGER_VERSION
array_change_key_case ( $[, int $case = CASE_LOWER ] ):array | Returns an array with all keys from array lowercased or uppercased. Numbered indices are left as is. 
array_chunk ( $, int $size [, bool $preserve_keys = FALSE ] ):array | Chunks an array into arrays with size elements. The last chunk may contain less than size elements. 
array_column ( $input , mixed $column_key [, mixed $index_key = NULL ] ):array | returns the values from a single column of the input, identified by the column_key. 
array_combine ( $keys , $values ):array | Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values. 
array_count_values ( $):array | returns an array using the values of array as keys and their frequency in array as values. 
array_diff_assoc ( $array1 , $array2 [, $... ] ):array | Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison. 
array_diff_key ( $array1 , $array2 [, $... ] ):array | Compares the keys from array1 against the keys from array2 and returns the difference.
array_diff_uassoc ( $array1 , $array2 [, $... ], callable $key_compare_func ):array |  Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. 
array_diff_ukey ( $array1 , $array2 [, $... ], callable $key_compare_func ):array
array_diff ( $array1 , $array2 [, $... ] ):array | Compares array1 against one or more other arrays and returns the values in array1 that are not present in any of the other arrays. 
array_fill_keys ( $keys , mixed $value ):array | Fills an array with the value of the value parameter, using the values of the keys array as keys. 
array_fill ( int $start_index , int $num , mixed $value ):array | Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter. 
array_filter ( $[, callable $callback [, int $flag = 0 ]] ):array | Iterates over each value in the array, if the callback function returns true, the value will be returned.
array_flip ( $):array |  Return array with key <-> value flipped
array_intersect_assoc ( $array1 , $array2 [, $... ] ):array | returns an array containing all the values of array1 that are present in all the arguments.
array_intersect_key ( $array1 , $array2 [, $... ] ):array | returns an array containing all the entries of array1 which have keys that are present in all the arguments. 
array_intersect_uassoc ( $array1 , $array2 [, $... ], callable $key_compare_func ):array | returns an array containing all the values of array1 that are present in all the arguments. 
array_intersect_ukey ( $array1 , $array2 [, $... ], callable $key_compare_func ):array |  returns an array containing all the values of array1 which have matching keys that are present in all the arguments. 
array_intersect ( $array1 , $array2 [, $... ] ):array | returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved. 
array_key_exists ( mixed $key , array $array ):bool | returns TRUE if the given key is set in the array. key can be any value possible for an array index. 
array_key_first ( array $array ):mixed | Get the first key of the given array without affecting the internal array pointer. 
array_key_last ( array $array ):mixed | Get the last key of the given array without affecting the internal array pointer. 
array_keys ( $[, mixed $search_value [, bool $strict = FALSE ]] ):array |  Return just the keys from the input array, optionally only for the specified search_value
array_map ( callable $callback , $array1 [, $... ] ):array | returns an array containing all the elements of array1 after applying the callback function to each one. 
array_merge_recursive ( $array1 [, $... ] ):array |  Recursively merges elements from passed arrays into one array
array_merge ( $array1 [, $... ] ):array |  Merges elements from passed arrays into one array
array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] ):bool |  Sort multiple arrays at once similar to how ORDER BY clause works in SQL
array_pad ( $, int $size , mixed $value ):array | returns a copy of the array padded to size specified by size with value value. If size is positive then the array is padded on the right,
array_pop ( array &$array ):mixed |  Pops an element off the end of the array
array_product ( array $array ):number | returns the product of values in an array. 
array_push ( array &$array [, mixed $... ] ):int |  Pushes elements onto the end of the array
array_rand ( array $array [, int $num = 1 ] ):mixed | Picks one or more pseudo random entries out of an array, and returns the key (or keys) of the random entries.
array_reduce ( array $array , callable $callback [, $initial = NULL ] ):mixed | applies iteratively the callback function to the elements of the array, so as to reduce the array to a single value. 
array_replace_recursive ( $array1 [, $... ] ):array
array_replace ( $array1 [, $... ] ):array
array_reverse ( $[, bool $preserve_keys = FALSE ] ):array | Takes an input array and returns a new array with the order of the elements reversed. 
array_search ( $needle , array $haystack [, bool $strict = FALSE ] ):mixed | Searches haystack for needle. 
array_shift ( array &$array ):mixed |  Pops an element off the beginning of the array
array_slice ( $, int $offset [, int $length = NULL [, bool $preserve_keys = FALSE ]] ):array | returns the sequence of elements from the array array as specified by the offset and length parameters. 
array_splice ( &$input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]] ):array |  Removes the elements designated by offset and length and replace them with supplied array
array_sum ( array $array ):number | returns the sum of values in an array. 
array_udiff_assoc ( $array1 , $array2 [, $... ], callable $value_compare_func ):array |  callback based-Return the entries of arr1 that have values which are not present in any of the others arguments .
array_udiff_uassoc ( $array1 , $array2 [, $... ], callable $value_compare_func , callable $key_compare_func ):array |  callback-based-returns the entries of arr1 that have values which are not present in any of the others arguments. 
array_udiff ( $array1 , $array2 [, $... ], callable $value_compare_func ):array | Computes the difference of arrays by using a callback function for data comparison. 
array_uintersect_assoc ( $array1 , $array2 [, $... ], callable $value_compare_func ):array |  Returns the entries of arr1 that have values which are present in all the other arguments. 
array_uintersect_uassoc ( $array1 , $array2 [, $... ], callable $value_compare_func , callable $key_compare_func ):array | calllback based-Compute the intersection of arrays with additional index check, compares data and indexes. 
array_uintersect ( $array1 , $array2 [, $... ], callable $value_compare_func ):array | Computes the intersection of arrays, compares data by a callback function. 
array_unique ( $[, int $sort_flags = SORT_STRING ] ):array |  Removes duplicate values from array
array_unshift ( array &$array [, mixed $... ] ):int | prepends passed elements to the front of the array. 
array_values ( $):array | returns all the values from the array and indexes the array numerically. 
array_walk_recursive ( array &$array , callable $callback [, mixed $userdata = NULL ] ):bool | Applies the user-defined callback function to each element of the array. This function will recurse into deeper arrays. 
array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] ):bool |  Apply a user function to every member of an array
([ mixed $... ] ):array | Creates an array. Read the section on the array type for more information on what an array is. 
arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array in reverse order and maintain index association
asort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array and maintain index association
compact ( mixed $varname1 [, mixed $... ] ):array |  Creates a hash containing variables and their values
count ( mixed $array_or_countable [, $mode = COUNT_NORMAL ] ):int |  Count the number of elements in a variable (usually an array)
current ( array $array ):mixed | Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array. 
each ( &$):array |  Return the currently pointed key..value pair in the passed array, and advance the pointer to the next element
end ( array &$array ):mixed | advances array's internal pointer to the last element, and returns its value. 
extract ( array &$array [, $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] ):int |  Imports variables into symbol table from an array
in_array ( mixed $needle , array $haystack [, $strict = FALSE ] ):bool | Searches haystack for needle using loose comparison unless strict is set. 
key_exists(->) function is an alias of: array_key_exists(). :This
key ( array $array ):mixed | returns the index element of the current array position. 
krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool | Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays. 
ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool | Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays. 
list ( mixed $var1 [, mixed $... ] ):array
natcasesort ( array &$array ):bool |  Sort an array using case-insensitive natural sort
natsort ( array &$array ):bool |  Sort an array using natural sort
next ( array &$array ):mixed | behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. 
pos(->) function is an alias of: current() :This
prev ( array &$array ):mixed |  Move array argument's internal pointer to the previous element and return it
range ( mixed $start , mixed $end [, number $step = 1 ] ):array | Create an array containing a range of elements. 
reset ( array &$array ):mixed | rewinds array's internal pointer to the first element and returns the value of the first array element. 
rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array in reverse order
shuffle ( array &$array ):bool | This function shuffles (randomizes the order of the elements in) an array. It uses a pseudo random number generator that is not suitable for cryptographic purposes. 
sizeof(->) function is an alias of: count(). :This
sort ( array &$array [, int $sort_flags = SORT_REGULAR ] ):bool |  Sort an array
uasort ( array &$array , callable $value_compare_func ):bool |  Sort an array with a user-defined comparison function and maintain index association
uksort ( array &$array , callable $key_compare_func ):bool |  Sort an array by keys using a user-defined comparison function
usort ( array &$array , callable $value_compare_func ):bool |  Sort an array by values using a user-defined comparison function
__autoload ( string $class ):void | You can define this function to enable classes autoloading. 
call_user_method_array ( string $method_name , object &$obj , array $params ):mixed |  Call a user method on a specific object or class using a parameter array
call_user_method ( string $method_name , object &$obj [, $parameter [, $... ]] ):mixed |  Call a user method on a specific object or class
class_alias ( string $original , string $alias [, $autoload = TRUE ] ):bool | Creates an alias named alias based on the user defined class original. The aliased class is exactly the same as the original class. 
class_exists ( string $class_name [, $autoload = TRUE ] ):bool | This function checks whether or not the given class has been defined. 
get_called_class ( void ):string | Gets the name of the class the static method is called in. 
get_class_methods ( mixed $class_name ):array | Gets the class methods names. 
get_class_vars ( string $class_name ):array | Get the default properties of the given class. 
get_class ([ object $object ] ):string | Gets the name of the class of the given object. 
get_declared_classes ( void ):array | Gets the declared classes. 
get_declared_interfaces ( void ):array | Gets the declared interfaces. 
get_declared_traits ( void ):array
get_object_vars ( object $object ):array | Gets the accessible non-static properties of the given object according to scope. 
get_parent_class ([ mixed $object ] ):string | Retrieves the parent class name for object or class. 
interface_exists ( string $interface_name [, $autoload = TRUE ] ):bool | Checks if the given interface has been defined. 
is_a ( object $object , string $class_name [, $allow_string = FALSE ] ):bool | Checks if the given object is of this class or has this class as one of its parents. 
is_subclass_of ( mixed $object , string $class_name [, $allow_string = TRUE ] ):bool | Checks if the given object has the class class_name as one of its parents or implements it. 
method_exists ( mixed $object , string $method_name ):bool | Checks if the class method exists in the given object. 
property_exists ( mixed $class , string $property ):bool
trait_exists ( string $traitname [, $autoload ] ):bool
random_bytes ( int $length ):string
random_( $min , $max ):int
checkdate ( int $month , int $day , int $year ):bool | Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined. 
date_add(->) function is an alias of: DateTime::add() :This
date_create_from_format(->) function is an alias of: DateTime::createFromFormat() :This
date_create_immutable_from_format(->) function is an alias of: DateTimeImmutable::createFromFormat() :This
date_create_immutable(->) function is an alias of: DateTimeImmutable::__construct() :This
date_create(->) function is an alias of: DateTime::__construct() :This
date_date_set(->) function is an alias of: DateTime::setDate() :This
date_default_timezone_get ( void ):string
date_default_timezone_set ( string $timezone_identifier ):bool
date_diff(->) function is an alias of: DateTime::diff() :This
date_format(->) function is an alias of: DateTime::format() :This
date_get_last_errors(->) function is an alias of: DateTime::getLastErrors() :This
date_interval_create_from_date_string(->) function is an alias of: DateInterval::createFromDateString() :This
date_interval_format(->) function is an alias of: DateInterval::format() :This
date_isodate_set(->) function is an alias of: DateTime::setISODate() :This
date_modify(->) function is an alias of: DateTime::modify() :This
date_offset_get(->) function is an alias of: DateTime::getOffset() :This
date_parse_from_format ( string $format , string $date ):array | Returns associative array with detailed info about given date. 
date_parse ( string $date ):array
date_sub(->) function is an alias of: DateTime::sub() :This
date_sun_info ( int $time , float $latitude , float $longitude ):array
date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get "date.default_latitude" [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get "date.sunrise_zenith" [, float $gmt_offset = 0 ]]]]] ):mixed |  returns the sunrise time for a given day (specified as a timestamp) and location. 
date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get "date.default_latitude" [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get "date.sunset_zenith" [, float $gmt_offset = 0 ]]]]] ):mixed |  returns the sunset time for a given day (specified as a timestamp) and location. 
date_time_set(->) function is an alias of: DateTime::setTime() :This
date_timestamp_get(->) function is an alias of: DateTime::getTimestamp() :This
date_timestamp_set(->) function is an alias of: DateTime::setTimestamp() :This
date_timezone_get(->) function is an alias of: DateTime::getTimezone() :This
date_timezone_set(->) function is an alias of: DateTime::setTimezone() :This
date ( $format [, int $timestamp = time() ] ):string | Returns a string formatted according to the given format string. Timestamp is optional and defaults to the value of time(). 
getdate ([ int $timestamp = time() ] ):array | Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given. 
gettimeofday ([ bool $return_float = FALSE ] ):mixed | This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call. 
gmdate ( $format [, int $timestamp = time() ] ):string | Identical to the date() function except that the time returned is Greenwich Mean Time (GMT). 
gmmktime ([ $hour = gmdate("H") [, $minute = gmdate("i") [, $second = gmdate("s") [, $month = gmdate("n") [, $day = gmdate("j") [, $year = gmdate("Y") [, $is_dst = -1 ]]]]]]] ):int |  Get UNIX timestamp for a GMT date
gmstrftime ( $format [, int $timestamp = time() ] ):string | like  strftime() except that the time returned is Greenwich Mean Time (GMT).
idate ( string $format [, $timestamp = time() ] ):int |  Format a local time/date as integer
localtime ([ int $timestamp = time() [, bool $is_associative = FALSE ]] ):array | returns an array identical to that of the structure returned by the C function call. 
microtime ([ bool $get_as_float = FALSE ] ):mixed | returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call. 
mktime ([ $hour = date("H") [, $minute = date("i") [, $second = date("s") [, $month = date("n") [, $day = date("j") [, $year = date("Y") [, $is_dst = -1 ]]]]]]] ):int |  Get UNIX timestamp for a date
strftime ( $format [, int $timestamp = time() ] ):string |  Format a local time/date according to locale settings
strptime ( string $date , string $format ):array
strtotime ( string $time [, $now = time() ] ):int |  Convert string representation of date and time to a timestamp
time ( void ):int | Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). 
timezone_abbreviations_list(->) function is an alias of: DateTimeZone::listAbbreviations() :This
timezone_identifiers_list(->) function is an alias of: DateTimeZone::listIdentifiers() :This
timezone_location_get(->) function is an alias of: DateTimeZone::getLocation() :This
timezone_name_from_abbr ( $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] ):string
timezone_name_get(->) function is an alias of: DateTimeZone::getName() :This
timezone_offset_get(->) function is an alias of: DateTimeZone::getOffset() :This
timezone_open(->) function is an alias of: DateTimeZone::__construct() :This
timezone_transitions_get(->) function is an alias of: DateTimeZone::getTransitions() :This
timezone_version_get ( void ):string | Returns the current version of the timezonedb. 
chdir ( string $directory ):bool | Changes PHP's current directory to directory. 
chroot ( string $directory ):bool |  Change root directory
closedir ([ resource $dir_handle ] ):void | Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir(). 
dir ( string $directory [, resource $context ] ):Directory | A pseudo-object oriented mechanism for reading a directory. The given directory is opened. 
getcwd ( void ):string | Gets the current working directory. 
opendir ( string $path [, $context ] ):resource | Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls. 
readdir ([ resource $dir_handle ] ):string | Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem. 
rewinddir ([ resource $dir_handle ] ):void | Resets the directory stream indicated by dir_handle to the beginning of the directory. 
scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] ):array | Returns an array of files and directories from the directory. 
debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] ):array | generates a PHP backtrace. 
debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] ):void | prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff. 
error_clear_last ( ):void
error_get_last ( void ):array | Gets information about the last error that occurred. 
error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] ):bool | Sends an error message to the web server's error log or to a file. 
error_reporting ([ $level ] ):int |  sets the error_reporting directive at runtime.
restore_error_handler ( void ):bool | Used after using set_error_handler() to revert to the previous error handler
restore_exception_handler ( void ):bool | Used after changing the exception handler function using set_exception_handler().
set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] ):mixed |  Sets a user-defined error handler function. | Returns the previously defined error handler, or false on error
set_exception_handler ( $exception_handler ):callable | Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called. 
trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] ):bool |  Generates a user-level error/warning/notice message
user_error(->) function is an alias of: trigger_error(). :This
escapeshellarg ( $arg ):string |  Quote and escape an argument for use in a shell command
escapeshellcmd ( $command ):string |  Escape shell metacharacters
exec ( $command [, array &$output [, int &$return_var ]] ):string | executes the given command. 
passthru ( string $command [, int &$return_var ] ):void | Use in place of exec() or system() when the output from the Unix command is binary data 
proc_close ( resource $process ):int | similar to pclose() except that it only works on processes opened by proc_open(). 
proc_get_status ( resource $process ):array | fetches data about a process opened using proc_open(). 
proc_nice ( int $increment ):bool |  Change the priority of the current process
proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] ):resource | similar to popen() but provides a much greater degree of control over the program execution. 
proc_terminate ( resource $process [, int $signal = 15 ] ):bool |  kill a process opened by proc_open
shell_exec ( $cmd ):string | This function is identical to the backtick operator. 
system ( $command [, int &$return_var ] ):string |  Execute an external program and display output
basename ( $path [, $suffix ] ):string |  Returns the filename component of the path
chgrp ( string $filename , mixed $group ):bool |  Change file group
chmod ( string $filename , int $mode ):bool | Attempts to change the mode of the specified file to that given in mode. 
chown ( string $filename , mixed $user ):bool | Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file. 
clearstatcache ([ bool $clear_realpath_cache = FALSE [, string $filename ]] ):void |  Clear file stat cache
copy ( string $source , string $dest [, resource $context ] ):bool |  Copy a file
dirname ( $path [, int $levels = 1 ] ):string |  Returns the directory name component of the path
disk_free_space ( string $directory ):float | will return the number of bytes available on the corresponding filesystem or disk partition. 
disk_total_space ( string $directory ):float | will return the total number of bytes on the corresponding filesystem or disk partition. 
diskfreespace(->) function is an alias of: disk_free_space(). :This
fclose ( resource $handle ):bool | The file pointed to by handle is closed. 
feof ( resource $handle ):bool | Tests for end-of-file on a file pointer. 
fflush ( resource $handle ):bool | This function forces a write of all buffered output to the resource pointed to by the file handle. 
fgetc ( resource $handle ):string | Gets a character from the given file pointer. 
fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]]] ):array |  Get line from file pointer and parse for CSV fields
fgets ( resource $handle [, int $length ] ):string | Gets a line from file pointer. 
fgetss ( resource $handle [, int $length [, $allowable_tags ]] ):string | Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads. 
file_exists ( string $filename ):bool | Checks whether a file or directory exists. 
file_get_contents ( $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen ]]]] ):string |  Read the entire file into a string
file_put_contents ( string $filename , mixed $data [, $flags = 0 [, resource $context ]] ):int |  Write/Create a file with contents data and return the number of bytes written
file ( string $filename [, int $flags = 0 [, resource $context ]] ):array |  Read entire file into an array
fileatime ( string $filename ):int | Gets the last access time of the given file. 
filectime ( string $filename ):int | Gets the inode change time of a file. 
filegroup ( string $filename ):int | Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name. 
fileinode ( string $filename ):int | Gets the file inode. 
filemtime ( string $filename ):int | This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed. 
fileowner ( string $filename ):int | Gets the file owner. 
fileperms ( string $filename ):int | Gets permissions for the given file. 
filesize ( string $filename ):int | Gets the size for the given file. 
filetype ( $filename ):string | Returns the type of the given file. 
flock ( resource $handle , int $operation [, int &$wouldblock ] ):bool |  Portable file locking
fnmatch ( string $pattern , string $string [, int $flags = 0 ] ):bool | checks if the passed string would match the given shell wildcard pattern. 
fopen ( string $filename , string $mode [, bool $use_include_path = FALSE [, $context ]] ):resource | binds a named resource, specified by filename, to a stream. 
fpassthru ( resource $handle ):int |  Output all remaining data from a file pointer
fputcsv ( resource $handle , array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape_char = "\\" ]]] ):int |  formats a Fields array as CSV and write it to the specified file handle. 
fputs(->) function is an alias of: fwrite(). :This
fread ( resource $handle , int $length ):string |  Binary-safe file read
fscanf ( resource $handle , string $format [, &$... ] ):mixed |  Implements a mostly ANSI compatible fscanf()
fseek ( resource $handle , $offset [, $whence = SEEK_SET ] ):int |  Seek on a file pointer
fstat ( resource $handle ):array | Gathers the statistics of the file opened by the file pointer handle. 
ftell ( resource $handle ):int | Returns the position of the file pointer referenced by handle. 
ftruncate ( resource $handle , int $size ):bool | Takes the filepointer, handle, and truncates the file to length, size. 
fwrite ( resource $handle , string $string [, $length ] ):int | writes the contents of string to the file stream pointed to by handle. 
glob ( string $pattern [, int $flags = 0 ] ):array | searches for all the pathnames matching pattern according to the rules used by the libc glob() function.
is_dir ( string $filename ):bool | Tells whether the given filename is a directory. 
is_executable ( string $filename ):bool | Tells whether the filename is executable. 
is_file ( string $filename ):bool | Tells whether the given file is a regular file. 
is_link ( string $filename ):bool | Tells whether the given file is a symbolic link. 
is_readable ( string $filename ):bool | Tells whether a file exists and is readable. 
is_uploaded_file ( string $filename ):bool |  Check if file was created by rfc1867 upload
is_writable ( string $filename ):bool |  Returns true if file can be written
is_writeable(->) function is an alias of: is_writable(). :This
lchgrp ( string $filename , mixed $group ):bool
lchown ( string $filename , mixed $user ):bool
link ( string $target , string $link ):bool | creates a hard link. 
linkinfo ( string $path ):int |  Returns the st_dev field of the UNIX C stat structure describing the link
lstat ( string $filename ):array | Gathers the statistics of the file or symbolic link named by filename. 
mkdir ( string $pathname [, int $mode = 0777 [, $recursive = FALSE [, resource $context ]]] ):bool | Attempts to create the directory specified by pathname. 
move_uploaded_file ( string $filename , string $destination ):bool |  Move a file if and only if it was created by an upload
parse_ini_file ( string $filename [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL ]] ):array |  Parse configuration file
parse_ini_string ( string $ini [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL ]] ):array
pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] ):mixed |  Returns information about a certain string
pclose ( resource $handle ):int | Closes a file pointer to a pipe opened by popen(). 
popen ( string $command , string $mode ):resource | Opens a pipe to a process executed by forking the command given by command. 
readfile ( string $filename [, bool $use_include_path = FALSE [, resource $context ]] ):int | Reads a file and writes it to the output buffer. 
readlink ( $path ):string | does the same as the readlink C function. 
realpath_cache_get ( void ):array | Get the contents of the realpath cache. 
realpath_cache_size ( void ):int | Get the amount of memory used by the realpath cache. 
realpath ( $path ):string | expands all symbolic links and resolves references to /./, /../ and extra / characters in the input path and returns the canonicalized absolute pathname. 
rename ( string $oldname , string $newname [, resource $context ] ):bool | Attempts to rename oldname to newname, moving it between directories if necessary. overwrittes newname.
rewind ( resource $handle ):bool |  Rewind the position of a file pointer
rmdir ( string $dirname [, resource $context ] ):bool | Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. 
set_file_buffer(->) function is an alias of: stream_set_write_buffer(). :This
stat ( string $filename ):array |  Give information about a file
symlink ( string $target , string $link ):bool | creates a symbolic link to the existing target with the specified name link. 
tempnam ( $dir , $prefix ):string | Creates a file with a unique filename, with access permission set to 0600, in the specified directory. 
tmpfile ( void ):resource |  Create a temporary file that will be deleted automatically after use
touch ( string $filename [, int $time = time() [, int $atime ]] ):bool |  Set modification time of file
umask ([ $mask ] ):int | sets PHPs umask to mask & 0777 and returns the old umask.
unlink ( string $filename [, resource $context ] ):bool | Deletes filename. Similar to the Unix C unlink() function. An E_WARNING level error will be generated on failure. 
filter_has_var ( int $type , string $variable_name ):bool
filter_id ( string $filtername ):int
filter_input_array ( int $type [, $definition [, bool $add_empty = TRUE ]] ):mixed | This function is useful for retrieving many values without repetitively calling filter_input(). 
filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, $options ]] ):mixed
filter_list ( void ):array
filter_var_array ( array $data [, $definition [, bool $add_empty = TRUE ]] ):mixed | This function is useful for retrieving many values without repetitively calling filter_var(). 
filter_var ( $variable [, int $filter = FILTER_DEFAULT [, $options ]] ):mixed
call_user_func_array ( callable $callback , array $param_arr ):mixed | Calls the callback given by the first parameter with the parameters in param_arr. 
call_user_func ( callable $callback [, $parameter [, $... ]] ):mixed | Calls the callback given by the first parameter and passes the remaining parameters as arguments. 
create_function ( $args , $code ):string |  Creates an anonymous function, and returns its name (funny, eh?)
forward_static_call_array ( callable $function , array $parameters ):mixed | Calls a user defined function or method given by the function parameter. 
 orward_static_call ( callable $function [, $parameter [, $... ]] ):mixed | Calls a user defined function with the following arguments. 
func_get_arg ( int $arg_num ):mixed |  Get the $arg_num'th argument that was passed to the function
func_get_args ( void ):array |  Get an array of the arguments that were passed to the function
func_num_args ( void ):int |  Get the number of arguments that were passed to the function
function_exists ( string $function_name ):bool | Checks the list of defined functions, both built-in (internal) and user-defined, for function_name. 
get_defined_functions ([ bool $exclude_disabled = FALSE ] ):array | Gets an array of all defined functions. 
register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] ):void |  Register a user-level function to be called on request termination
register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] ):bool | Registers the given function to be executed when a tick is called. 
unregister_tick_function ( string $function_name ):void | De-registers the function named by function_name so it is no longer executed when a tick is called. 
hash_algos ( void ):array
hash_copy ( $context ):HashContext
hash_equals ( string $known_string , string $user_string ):bool
hash_file ( $algo , $filename [, bool $raw_output = FALSE ] ):string
hash_final ( HashContext $context [, bool $raw_output = FALSE ] ):string
hash_hkdf ( $algo , $ikm [, int $length = 0 [, $info = '' [, $salt = '' ]]] ):string
hash_hmac_algos ( void ):array
hash_hmac_file ( $algo , $filename , $key [, bool $raw_output = FALSE ] ):string
hash_hmac ( $algo , $data , $key [, bool $raw_output = FALSE ] ):string
hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] ):HashContext
hash_pbkdf2 ( $algo , $password , $salt , int $iterations [, int $length = 0 [, bool $raw_output = FALSE ]] ):string
hash_update_file ( HashContext $hcontext , string $filename [, resource $scontext = NULL ] ):bool
hash_update_stream ( HashContext $context , resource $handle [, $length = -1 ] ):int
hash_update ( HashContext $context , string $data ):bool
hash ( $algo , $data [, bool $raw_output = FALSE ] ):string
assert_options ( int $what [, $value ] ):mixed | Set the various assert() control options or just query their current settings. 
5 and 7:PHP |  Checks if assertion is false
cli_get_process_title ( void ):string
cli_set_process_title ( string $title ):bool | Sets the process title visible in tools such as top and ps. This function is available only in CLI mode. 
dl ( string $library ):bool |  Load a PHP extension at runtime
extension_loaded ( string $name ):bool | Finds out whether the extension is loaded. 
gc_collect_cycles ( void ):int | Forces collection of any existing garbage cycles. 
gc_disable ( ):void | Deactivates the circular reference collector, setting zend.enable_gc to 0. 
gc_enable ( ):void | Activates the circular reference collector, setting zend.enable_gc to 1. 
gc_enabled ( void ):bool | Returns status of the circular reference collector. 
gc_mem_caches ( void ):int | Reclaims memory used by the Zend Engine memory manager. 
get_cfg_var ( string $option ):mixed |  Get the value of a PHP configuration option
get_current_user ( void ):string | Returns the name of the owner of the current PHP script. 
get_defined_constants ([ bool $categorize = FALSE ] ):array | Returns the names and values of all the constants currently defined. 
get_extension_funcs ( string $module_name ):array | This function returns the names of all the functions defined in the module indicated by module_name. 
get_include_path ( void ):string | Gets the current include_path configuration option value. 
get_included_files ( void ):array | Gets the names of all files that have been included using include, include_once, require or require_once. 
get_loaded_extensions ([ bool $zend_extensions = FALSE ] ):array | This function returns the names of all the modules compiled and loaded in the PHP interpreter. 
get_magic_quotes_gpc ( void ):bool |  Get the current active configuration setting of magic_quotes_gpc
get_magic_quotes_runtime ( void ):bool | Returns the current active configuration setting of magic_quotes_runtime. 
get_required_files(->) function is an alias of: get_included_files(). :This
get_resources ([ string $type ] ):array | Returns an array of all currently active resources, optionally filtered by resource type. 
getenv ( $varname [, bool $local_only = FALSE ] ):string |  Get the value of an environment variable
getlastmod ( void ):int |  Get time of last page modification
getmygid ( void ):int | Gets the group ID of the current script. 
getmyinode ( void ):int | Gets the inode of the current script. 
getmypid ( void ):int | Gets the current PHP process ID. 
getmyuid ( void ):int | Gets the user ID of the current script. 
getopt ( string $options [, $longopts [, int &$optind ]] ):array | Parses options passed to the script. 
getrusage ([ int $who = 0 ] ):array | This is an interface to getrusage(2). It gets data returned from the system call. 
ini_alter(->) function is an alias of: ini_set(). :This
ini_get_all ([ string $extension [, bool $details = TRUE ]] ):array | Returns all the registered configuration options. 
ini_get ( $varname ):string | Returns the value of the configuration option on success. 
ini_restore ( string $varname ):void | Restores a given configuration option to its original value. 
ini_set ( $varname , $newvalue ):string | Sets the value of the given configuration option for that session. 
magic_quotes_runtime(->) function is an alias of: set_magic_quotes_runtime() :This
memory_get_peak_usage ([ bool $real_usage = FALSE ] ):int | Returns the peak of memory, in bytes, that's been allocated to your PHP script. 
memory_get_usage ([ bool $real_usage = FALSE ] ):int | Returns the amount of memory, in bytes, that's currently being allocated to your PHP script. 
php_ini_loaded_file ( void ):string | Check if a php.ini file is loaded, and retrieve its path. 
php_ini_scanned_files ( void ):string |  Return comma-separated string of .ini files parsed from the additional ini dir
php_logo_guid ( void ):string |  Return the special ID used to request the PHP logo in phpinfo screens
php_sapi_name ( void ):string | Returns a lowercase string that describes the type of interface (the Server API, SAPI) that PHP is using.
php_uname ([ $mode = "a" ] ):string |  Return information about the system PHP was built on
phpcredits ([ int $flag = CREDITS_ALL ] ):bool | This function prints out the HTML credits listing the PHP developers, modules, etc. 
phpinfo ([ int $what = INFO_ALL ] ):bool |  Output a page of useful information about PHP and the current request
phpversion ([ $extension ] ):string | Returns a string containing the version of the currently running PHP parser or extension. 
putenv ( string $setting ):bool |  Set the value of an environment variable
restore_include_path ( ):void | Restores the include_path configuration option back to its original master value as set in php.ini 
set_include_path ( $new_include_path ):string | Sets the include_path configuration option for the duration of the script. 
set_magic_quotes_runtime ( $new_setting ):bool | Set the current active configuration setting of magic_quotes_runtime. 
set_time_limit ( int $seconds ):bool |  Sets the maximum time a script can run
sys_get_temp_dir ( void ):string | Returns the path of the directory PHP stores temporary files in by default. 
version_compare ( string $version1 , string $version2 ):int |  Compares two "PHP-standardized" version number strings
zend_logo_guid ( void ):string |  Return the special ID used to request the Zend logo in phpinfo screens
zend_thread_id ( void ):int | This function returns a unique identifier for the current thread. 
zend_version ( void ):string | Returns a string containing the version of the currently running Zend Engine. 
ezmlm_hash ( string $addr ):int | calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database. 
mail ( string $to , string $subject , string $message [, mixed $additional_headers [, string $additional_parameters ]] ):bool | Sends an email. 
abs ( mixed $):number | Returns the absolute value of number. 
acos ( $arg ):float | Returns the arc cosine of arg in radians. acos() is the inverse function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range. 
acosh ( $arg ):float | Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg. 
asin ( $arg ):float | Returns the arc sine of arg in radians. asin() is the inverse function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range. 
asinh ( $arg ):float | Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg. 
atan2 ( $y , $x ):float |  Returns the arc tangent of y/x, with the resulting quadrant determined by the signs of y and x
atan ( $arg ):float | Returns the arc tangent of arg in radians. atan() is the inverse function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range. 
atanh ( $arg ):float | Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg. 
base_convert ( $number , int $frombase , int $tobase ):string |  Converts a number in a string from any base <= 36 to any base <= 36
bindec ( string $binary_string ):number |  Returns the decimal equivalent of the binary number
ceil ( $value ):float | Returns the next highest integer value by rounding up value if necessary. 
cos ( $arg ):float | returns the cosine of the arg parameter. The arg parameter is in radians. 
cosh ( $arg ):float | Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2. 
decbin ( int $number ):string | Returns a string containing a binary representation of the given number argument. 
dechex ( int $number ):string |  Returns a string containing a hexadecimal representation of the given number
decoct ( int $number ):string | Returns a string containing an octal representation of the given number argument. 
deg2rad ( $number ):float | This function converts number from degrees to the radian equivalent. 
exp ( $arg ):float |  Returns e raised to the power of the number
expm1 ( $arg ):float | returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero.
floor ( $value ):float | Returns the next lowest integer value (as float) by rounding down value if necessary. 
fmod ( $x , $y ):float | Returns the floating point remainder of dividing the dividend (x) by the divisor (y). 
getrandmax ( void ):int | Returns the maximum value that can be returned by a call to rand(). 
hexdec ( string $hex_string ):number |  Returns the decimal equivalent of the hexadecimal number
hypot ( $x , $y ):float | returns the length of the hypotenuse of a right-angle triangle or the distance of the point (x, y) from the origin.  
intdiv ( $dividend , $divisor ):int | Returns the integer quotient of the division of dividend by divisor. 
is_finite ( float $val ):bool | Checks whether val is a legal finite on this platform. 
is_infinite ( float $val ):bool | Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform. 
is_nan ( float $val ):bool | Checks whether val is 'not a number', like the result of acos(1.01). 
lcg_value ( void ):float |  Returns a value from the combined linear congruential generator
log10 ( $arg ):float | Returns the base-10 logarithm of arg. 
log1p ( $number ):float | returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. 
log ( $arg [, $base = M_E ] ):float | If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg. 
max ( array $values ):mixed |  Return the highest value in an array or a series of arguments
min ( array $values ):mixed |  Return the lowest value in an array or a series of arguments
mt_getrandmax ( void ):int | Returns the maximum value that can be returned by a call to mt_rand(). 
mt_rand ( void ):int |  Returns a random number from Mersenne Twister
mt_srand ([ int $seed [, int $mode = MT_RAND_MT19937 ]] ):void |  Seeds Mersenne Twister random number generator
octdec ( string $octal_string ):number | Returns the decimal equivalent of the octal number represented by the octal_string argument. 
pi ( void ):float | Returns an approximation of pi. The returned float has a precision based on the precision directive in php.ini, which defaults to 14. 
pow ( $base , $exp ):number |  Returns base raised to the power of exponent. Returns integer result when possible
rad2deg ( $number ):float | This function converts number from radian to degrees. 
rand ( void ):int |  Returns a random number
round ( $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] ):float |  Returns the number rounded to specified precision
sin ( $arg ):float | returns the sine of the arg parameter. The arg parameter is in radians. 
sinh ( $arg ):float | Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2. 
sqrt ( $arg ):float | Returns the square root of arg. 
srand(->) srand ([ int $seed ] ):void |  Seeds random number generator
tan ( $arg ):float | returns the tangent of the arg parameter. The arg parameter is in radians. 
tanh ( $arg ):float | Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg). 
connection_aborted ( void ):int | Checks whether the client disconnected. 
connection_status ( void ):int | Gets the connection status bitfield. 
constant ( string $name ):mixed |  Given the name of a constant this function will return the constants associated value
define ( string $name , mixed $value [, $case_insensitive = FALSE ] ):bool | Defines a named constant at runtime. 
defined ( string $name ):bool |  Check whether a constant exists
eval ( string $code ):mixed
exit ([ string $status ] ):void
get_browser ([ string $user_agent [, bool $return_array = FALSE ]] ):mixed | Attempts to determine the capabilities of the user's browser, see browscap.ini file. 
__halt_compiler ( ):void
highlight_file ( string $filename [, bool $return = FALSE ] ):mixed |  Syntax highlight a source file
highlight_string ( string $str [, bool $return = FALSE ] ):mixed | Outputs or returns html markup for a syntax highlighted version of the given PHP code.
hrtime ([ bool $get_as_number = FALSE ] ):mixed | Returns the system's high resolution time, counted from an arbitrary point in time. 
ignore_user_abort ([ bool $value ] ):int |  Set whether we want to ignore a user abort event or not
pack ( $format [, mixed $args [, mixed $... ]] ):string |  Takes one or more arguments and packs them into a binary string according to the format argument
php_check_syntax(->) php_check_syntax ( string $filename [, string &$error_message ] ):bool |  Check the syntax of the specified file.
php_strip_whitespace ( $filename ):string | Returns the PHP source code in filename with PHP comments and whitespace removed. (see php -w)
sapi_windows_cp_conv ( int|$in_codepage , int|$out_codepage , $subject ):string | Convert string from one codepage to another. 
sapi_windows_cp_get ( string $kind ):int | Get the identifier of the codepage of the current process. 
sapi_windows_cp_is_utf8 ( void ):bool | Indicates whether the codepage of the current process is UTF-8 compatible. 
sapi_windows_cp_set ( int $cp ):bool | Set the codepage of the current process. 
sapi_windows_vt100_support ( resource $stream [, $enable ] ):bool
show_source(->) function is an alias of: highlight_file(). :This
sleep ( $seconds ):int | Delays the program execution for the given number of seconds. 
sys_getloadavg ( void ):array | Returns three samples containing the number of processes in the system run queue over the last 1, 5 and 15 minutes.
time_nanosleep ( int $seconds , int $nanoseconds ):mixed | Delays program execution for the given number of seconds and nanoseconds. 
time_sleep_until ( float $timestamp ):bool | Makes the script sleep until the specified timestamp. 
uniqid ([ $prefix = "" [, bool $more_entropy = FALSE ]] ):string |  Generates a unique ID
unpack ( string $format , string $data [, int $offset = 0 ] ):array |  Unpack binary string into named array elements according to format argument
usleep ( int $micro_seconds ):void | Delays program execution for the given number of microseconds. 
checkdnsrr ( string $host [, string $type = "MX" ] ):bool | Searches DNS for records of type type corresponding to host. 
closelog ( void ):bool | closes the descriptor being used to write to the system logger. The use of closelog() is optional. 
define_syslog_variables ( ):void | Initializes all variables used in the syslog functions. 
dns_check_record(->) function is an alias of: checkdnsrr(). :This |  Check DNS records corresponding to a given Internet host name or IP address
dns_get_mx(->) function is an alias of: getmxrr(). :This |  Get MX records corresponding to a given Internet host name
dns_get_record ( string $hostname [, int $type = DNS_ANY [, &$authns [, &$addtl [, bool $raw = FALSE ]]]] ):array | Fetch DNS Resource Records associated with the given hostname. 
fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] ):resource |  Open Internet or Unix domain socket connection
gethostbyaddr ( $ip_address ):string | Returns the host name of the Internet host specified by ip_address. 
gethostbyname ( $hostname ):string | Returns the IPv4 address of the Internet host specified by hostname. 
gethostbynamel ( string $hostname ):array | Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves. 
gethostname ( void ):string | gets the standard host name for the local machine. 
getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] ):bool | Searches DNS for MX records corresponding to hostname. 
getprotobyname ( string $name ):int | returns the protocol number associated with the protocol name as per /etc/protocols. 
getprotobynumber ( int $number ):string | returns the protocol name associated with protocol number as per /etc/protocols. 
getservbyname ( string $service , string $protocol ):int | returns the Internet port which corresponds to service for the specified protocol as per /etc/services. 
getservbyport ( int $port , $protocol ):string | returns the Internet service associated with port for the specified protocol as per /etc/services. 
header_register_callback ( callable $callback ):bool
header_remove ([ string $name ] ):void | Removes an HTTP header previously set using header(). 
header ( string $header [, bool $replace = TRUE [, int $http_response_code ]] ):void |  Sends a raw HTTP header
headers_list ( void ):array | will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent(). 
headers_sent ([ string &$file [, int &$line ]] ):bool |  Returns true if headers have already been sent, false otherwise
http_response_code ([ int $response_code ] ):mixed | Gets or sets the HTTP response status code. 
inet_ntop ( $in_addr ):string | This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate string representation. 
inet_pton ( $address ):string | This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure. 
ip2long ( string $ip_address ):int |  Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address
long2ip ( int $proper_address ):string | generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the long integer representation. 
openlog ( string $ident , int $option , int $facility ):bool |  Open connection to system logger
pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] ):resource | like fsockopen() but the connection is not closed after the script finishes.
setcookie ( string $name [, string $value = "" [, int $expires = 0 [, string $path = "" [, string $domain = "" [, $secure = FALSE [, $httponly = FALSE ]]]]]] ):bool |  Send a cookie
setrawcookie ( string $name [, string $value [, int $expires = 0 [, string $path [, string $domain [, $secure = FALSE [, $httponly = FALSE ]]]]]] ):bool |  Send a cookie with no url encoding of the value
socket_get_status(->) function is an alias of: stream_get_meta_data(). :This
socket_set_blocking(->) function is an alias of: stream_set_blocking(). :This
socket_set_timeout(->) function is an alias of: stream_set_timeout(). :This
syslog ( int $priority , string $message ):bool |  Generate a system log message
flush ( ):void |  Flush the output buffer
ob_clean ( ):void |  Clean (delete) the current output buffer
ob_end_clean ( void ):bool |  Clean the output buffer, and delete current output buffer
ob_end_flush ( void ):bool |  Flush (send) the output buffer, and delete current output buffer
ob_flush ( ):void |  Flush (send) contents of the output buffer. The last buffer content is sent to next buffer
ob_get_clean ( void ):string |  Get current buffer contents and delete current output buffer
ob_get_contents ( void ):string | Gets the contents of the output buffer without clearing it. 
ob_get_flush ( void ):string |  Get current buffer contents, flush (send) the output buffer, and delete current output buffer
ob_get_length ( void ):int | This will return the length of the contents in the output buffer, in bytes. 
ob_get_level ( void ):int | Returns the nesting level of the output buffering mechanism. 
ob_get_status ([ bool $full_status = FALSE ] ):array | returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE. 
ob_gzhandler ( $buffer , int $mode ):string | intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages.
ob_implicit_flush ([ int $flag = 1 ] ):void | will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed. 
ob_list_handlers ( void ):array | Lists all output handlers in use. 
ob_start ([ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ]]] ):bool |  Turn on Output Buffering (specifying an optional output handler).
output_add_rewrite_var ( string $name , string $value ):bool |  Add URL rewriter values
output_reset_rewrite_vars ( void ):bool | This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function. 
password_get_info ( string $hash ):array | When passed in a valid hash created by an algorithm supported by password_hash(), this function will return an array of information about that hash. 
password_hash(->) password_hash ( $password , int $algo [, array $options ] ):string
password_needs_rehash ( string $hash , int $algo [, array $options ] ):bool |  checks to see if the supplied hash implements the algorithm and options provided.
password_verify ( string $password , string $hash ):bool
ereg_replace ( $pattern , $replacement , $):string | This function scans string for matches to pattern, then replaces the matched text with replacement. 
ereg ( string $pattern , string $string [, array &$regs ] ):int | Searches a string for matches to the regular expression given in pattern in a case-sensitive way. 
eregi_replace ( $pattern , $replacement , $):string | This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters. 
eregi ( string $pattern , string $string [, array &$regs ] ):int | This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters. 
split ( string $pattern , string $string [, int $limit = -1 ] ):array | Splits a string into array by regular expression. 
spliti ( string $pattern , string $string [, int $limit = -1 ] ):array |  Split string into array by regular expression case-insensitive
sql_regcase ( $):string | Creates a regular expression for a case insensitive match. 
session_abort ( void ):bool | finishes session without saving data. Thus the original values in session data are kept. 
session_cache_expire ([ string $new_cache_expire ] ):int |  Return the current cache expire. If new_cache_expire is given, the current cache_expire is replaced with new_cache_expire
session_cache_limiter ([ $cache_limiter ] ):string |  Return the current cache limiter. If new_cache_limited is given, the current cache_limiter is replaced with new_cache_limiter
session_commit(->) function is an alias of: session_write_close(). :This
session_create_id ([ $prefix ] ):string
session_decode ( string $data ):bool |  Deserializes data and reinitializes the variables
session_destroy ( void ):bool |  Destroy the current session and all data associated with it
session_encode ( void ):string |  Serializes the current setup and returns the serialized representation
session_gc ( void ):int
session_get_cookie_params ( void ):array | Gets the session cookie parameters. 
session_id ([ $id ] ):string |  Return the current session id. If newid is given, the session id is replaced with newid
session_is_registered ( string $name ):bool |  Checks if a variable is registered in session
session_module_name ([ $module ] ):string | gets the name of the current session module. 
session_name ([ $name ] ):string |  Return the current session name. If newname is given, the session name is replaced with newname
session_regenerate_id ([ $delete_old_session = FALSE ] ):bool |  Update the current session id with a newly generated one.
session_register_shutdown ( ):void | Registers session_write_close() as a shutdown function. 
session_register(->) session_register ( mixed $name [, mixed $... ] ):bool |  Adds varname(s) to the list of variables which are freezed at the session end
session_reset ( void ):bool | reinitializes a session with original values stored in session storage. This function requires an active session and discards changes in $_SESSION. 
session_save_path ([ $path ] ):string | returns the path of the current directory used to save session data. 
session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, $secure = FALSE [, $httponly = FALSE ]]]] ):bool |  Set session cookie parameters
session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp ]]] ):bool |  Sets user-level functions
session_start ([ array $options = array() ] ):bool |  Begin session - reinitializes freezed variables, registers browsers etc
session_status ( void ):int | is used to return the current session status. 
session_unregister ( string $name ):bool |  Removes varname from the list of variables which are freezed at the session end
session_unset ( void ):bool | frees all session variables currently registered. 
session_write_close ( void ):bool |  Write session data and end session
class_implements ( mixed $class [, bool $autoload = TRUE ] ):array | This function returns an array with the names of the interfaces that the given class and its parents implement. 
class_parents ( mixed $class [, bool $autoload = TRUE ] ):array | This function returns an array with the name of the parent classes of the given class. 
class_uses ( mixed $class [, bool $autoload = TRUE ] ):array | This function returns an array with the names of the traits that the given class uses.
iterator_apply ( Traversable $iterator , callable $function [, array $args = NULL ] ):int | Calls a function for every element in an iterator. 
iterator_count ( Traversable $iterator ):int | Count the elements in an iterator. iterator_count() is not guaranteed to retain the current position of the iterator. 
iterator_to_( Traversable $iterator [, bool $use_keys = TRUE ] ):array | Copy the elements of an iterator into an array. 
spl_autoload_call ( string $class_name ):void | This function can be used to manually search for a class or interface using the registered __autoload functions. 
spl_autoload_extensions ([ $file_extensions ] ):string | This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using. 
spl_autoload_functions ( void ):array | Get all registered __autoload() functions. 
spl_autoload_register ([ callable $autoload_function [, $throw = TRUE [, $prepend = FALSE ]]] ):bool
spl_autoload_unregister ( mixed $autoload_function ):bool
spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] ):void | default implementation for __autoload(). 
spl_classes ( void ):array | This function returns an array with the current available SPL classes. 
spl_object_hash ( object $obj ):string | This function returns a unique identifier for the object. This id can be used as a hash key for storing or for identifying an object, as long as the object is not destroyed. 
spl_object_id ( object $obj ):int | This function returns a unique identifier for the object. The object id is unique for the lifetime of the object. 
set_socket_blocking(->) function is an alias of: stream_set_blocking() :This |  Set blocking/non-blocking mode on a socket
stream_bucket_append ( resource $brigade , object $bucket ):void |  Append bucket to brigade
stream_bucket_make_writeable ( resource $brigade ):object |  Return a bucket object from the brigade for operating on
stream_bucket_new ( resource $stream , string $buffer ):object |  Create a new bucket for use on the current stream
stream_bucket_prepend ( resource $brigade , object $bucket ):void | This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter(). 
stream_context_create ([ array $options [, array $params ]] ):resource | Creates and returns a stream context with any options supplied in options preset. 
stream_context_get_default ([ array $options ] ):resource | Returns the default stream context which is used whenever file operations are called without a context parameter. 
stream_context_get_options ( resource $stream_or_context ):array | Returns an array of options on the specified stream or context. 
stream_context_get_params ( resource $stream_or_context ):array | Retrieves parameter and options information from the stream or context. 
stream_context_set_default ( array $options ):resource | Set the default stream context which will be used whenever file operations are called without a context parameter. 
stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value ):bool |  Set an option for a wrapper
stream_context_set_params ( resource $stream_or_context , array $params ):bool | Sets parameters on the specified context. 
stream_copy_to_stream ( resource $source , resource $dest [, $maxlength = -1 [, $offset = 0 ]] ):int | Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. 
stream_filter_append ( $stream , string $filtername [, int $read_write [, mixed $params ]] ):resource | Adds filtername to the list of filters attached to stream. 
stream_filter_prepend ( $stream , string $filtername [, int $read_write [, mixed $params ]] ):resource | Adds filtername to the list of filters attached to stream. 
stream_filter_register ( string $filtername , string $classname ):bool | allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.). 
stream_filter_remove ( resource $stream_filter ):bool | Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). 
stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] ):string | Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource.
stream_get_filters ( void ):array | Retrieve the list of registered filters on the running system. 
stream_get_line ( resource $handle , int $length [, $ending ] ):string |  Read up to maxlen bytes from a stream or until the ending string is found
stream_get_meta_data ( resource $stream ):array | Returns information about an existing stream. 
stream_get_transports ( void ):array | Returns an indexed array containing the name of all socket transports available on the running system. 
stream_get_wrappers ( void ):array | Retrieve list of registered streams available on the running system. 
stream_is_local ( mixed $stream_or_url ):bool | Checks if a stream, or a URL, is a local one or not. 
stream_isatty ( resource $stream ):bool | Determines if stream stream refers to a valid terminal type device. This is a more portable version of posix_isatty(), since it works on Windows systems too. 
stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max ):void
stream_register_wrapper(->) function is an alias of: stream_wrapper_register(). :This
stream_resolve_include_path ( $filename ):string | Resolve filename against the include path according to the same rules as fopen()/include. 
stream_select ( array &$read , array &$write , array &$except , $tv_sec [, $tv_usec = 0 ] ):int | accepts arrays of streams and waits for them to change status. Like socket_select() except in that it acts on streams. 
stream_set_blocking ( resource $stream , $mode ):bool |  Set blocking/non-blocking mode on a socket or stream
stream_set_chunk_size ( resource $fp , $chunk_size ):int | Set the stream chunk size. 
stream_set_read_buffer ( resource $stream , $buffer ):int | Sets the read buffer. It's the equivalent of stream_set_write_buffer(), but for read operations. 
stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] ):bool |  Set timeout on stream read to seconds |  |  | microseonds
stream_set_write_buffer ( resource $stream , $buffer ):int | Sets the buffering for write operations on the given stream to buffer bytes. 
stream_socket_accept ( $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] ):resource | Accept a connection on a socket previously created by stream_socket_server(). 
stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, $context ]]]]] ):resource |  Open a client connection to a remote address
stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] ):mixed
stream_socket_get_name ( resource $handle , bool $want_peer ):string | Returns the local or remote name of a given socket connection. 
stream_socket_pair ( int $domain , int $type , int $protocol ):array | creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication). 
stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, &$address ]] ):string | accepts data from a remote socket up to length bytes. 
stream_socket_sendto ( resource $socket , string $data [, $flags = 0 [, string $address ]] ):int | Sends the specified data through the socket. 
stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, $context ]]]] ):resource |  Create a server socket bound to localaddress
stream_socket_shutdown ( resource $stream , int $how ):bool
stream_supports_lock ( resource $stream ):bool | Tells whether the stream supports locking through flock(). 
stream_wrapper_register ( string $protocol , string $classname [, int $flags = 0 ] ):bool | Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions. 
stream_wrapper_restore ( string $protocol ):bool | Restores a built-in wrapper previously unregistered with stream_wrapper_unregister(). 
stream_wrapper_unregister ( string $protocol ):bool | Allows you to disable an already defined stream wrapper.
addcslashes ( $str , $charlist ):string | Returns a string with backslashes before characters that are listed in charlist parameter. 
addslashes ( $str ):string |  Escapes single quote, double quotes and backslash characters in a string with backslashes
bin2hex ( $str ):string | Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first. 
chop(->) function is an alias of: rtrim(). :This
chr ( int $bytevalue ):string |  Converts ASCII code to a character
chunk_split ( $body [, int $chunklen = 76 [, $end = "\r\n" ]] ):string | Can be used to split a string into smaller chunks. It inserts end every chunklen characters. 
convert_cyr_( $str , $from , $to ):string | Converts from one Cyrillic character set to another. 
convert_uudecode ( $data ):string
convert_uuencode ( $data ):string
count_chars ( string $string [, int $mode = 0 ] ):mixed | Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways. 
crc32 ( string $str ):int |  Calculate the crc32 polynomial of a string
crypt ( $str [, $salt ] ):string |  Encrypt a string
echo ( string $arg1 [, string $... ] ):void
explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] ):array | Returns an array of strings by splitting it on boundaries formed by the string delimiter. 
fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] ):int | Write a string produced according to format to the stream resource specified by handle. 
get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = "UTF-8" ]]] ):array |  Returns the internal translation table used by htmlspecialchars and htmlentities
hebrev ( $hebrew_text [, int $max_chars_per_line = 0 ] ):string |  Converts logical Hebrew text to visual text
hebrevc ( $hebrew_text [, int $max_chars_per_line = 0 ] ):string |  Converts logical Hebrew text to visual text with newline conversion
hex2bin ( $data ):string
html_entity_decode ( $[, int $flags = ENT_COMPAT | ENT_HTML401 [, $encoding = ini_get("default_charset") ]] ):string |  Convert all HTML entities to their applicable characters
htmlentities ( $[, int $flags = ENT_COMPAT | ENT_HTML401 [, $encoding = ini_get("default_charset") [, bool $double_encode = TRUE ]]] ):string |  Convert all applicable characters to HTML entities
htmlspecialchars_decode ( $[, int $flags = ENT_COMPAT | ENT_HTML401 ] ):string
htmlspecialchars ( $[, int $flags = ENT_COMPAT | ENT_HTML401 [, $encoding = ini_get("default_charset") [, bool $double_encode = TRUE ]]] ):string |  Convert special characters to HTML entities
implode ( $glue , array $pieces ):string |  Joins array elements placing glue string between items and return one string
join(->) function is an alias of: implode() |  An alias for implode
lcfirst ( $str ):string
levenshtein ( string $str1 , string $str2 ):int |  Calculate Levenshtein distance between two strings
localeconv ( void ):array | Returns an associative array containing localized numeric and monetary formatting information. 
ltrim ( $str [, $character_mask ] ):string | Strip whitespace (or other characters) from the beginning of a string. 
md5_file ( $filename [, bool $raw_output = FALSE ] ):string | Calculates the MD5 hash of the file specified by the filename parameter using the RSA- MD5 Message-Digest Algorithm.
md5 ( $str [, bool $raw_output = FALSE ] ):string | Calculates the MD5 hash of str using the  RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. 
metaphone ( $str [, int $phonemes = 0 ] ):string |  Break english phrases down into their phonemes
money_format ( $format , float $number ):string | returns a formatted version of number.
nl_langinfo ( int $item ):string | used to access individual elements of the locale categories. 
nl2br ( $[, bool $is_xhtml = TRUE ] ):string | Returns string with <br /> or <br> inserted before all newlines (\r\n, \n\r, \n and \r). 
number_format ( float $number [, int $decimals = 0 ] ):string |  Formats a number with grouped thousands
ord ( string $string ):int |  Returns ASCII value of character
parse_str ( string $encoded_string [, array &$result ] ):void | Parses encoded_string as if it were the query string passed via a URL and sets variables in the current scope or within result
pr( string $arg ):int
printf ( string $format [, mixed $args [, mixed $... ]] ):int | Produces output according to format. 
quoted_printable_decode ( $str ):string |  Convert a quoted-printable string to an 8 bit string
quoted_printable_encode ( $str ):string
quotemeta ( $str ):string |  Quotes meta characters
rtrim ( $str [, $character_mask ] ):string |  Removes trailing whitespace
setlocale ( int $category , $locale [, $... ] ):string |  Set locale information
sha1_file ( $filename [, bool $raw_output = FALSE ] ):string | Calculates the sha1 hash of the file specified by filename using the US Secure Hash Algorithm 1.
sha1 ( $str [, bool $raw_output = FALSE ] ):string | Calculates the sha1 hash of str using the US Secure Hash Algorithm 1. 
similar_text ( string $first , string $second [, float &$percent ] ):int | This calculates the similarity between two strings
soundex ( $str ):string |  Calculate the soundex key of a string
sprintf ( $format [, mixed $args [, mixed $... ]] ):string | Returns a string produced according to the formatting string format. 
sscanf ( string $str , string $format [, &$... ] ):mixed |  Implements an ANSI C compatible sscanf
str_getcsv ( string $input [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] ):array
str_ireplace ( $search , $replace , $subject [, int &$count ] ):mixed | returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. 
str_pad ( $input , int $pad_length [, $pad_= " " [, int $pad_type = STR_PAD_RIGHT ]] ):string | returns the input string padded on the left, the right, or both sides to the specified padding length. 
str_repeat ( $input , int $multiplier ):string | Returns input repeated multiplier times. 
str_replace ( $search , $replace , $subject [, int &$count ] ):mixed |  Replaces all occurrences of search in haystack with replace
str_rot13 ( $str ):string |  Perform the rot13 transform on a string
str_shuffle ( $str ):string |  Shuffles string. One permutation of all possible is created
str_split ( string $string [, int $split_length = 1 ] ):array | Converts a string to an array. 
str_word_count ( string $string [, int $format = 0 [, string $charlist ]] ):mixed |  Counts the number of words inside a string. 
strcasecmp ( string $str1 , string $str2 ):int | Binary safe case-insensitive string comparison. 
strchr(->) function is an alias of: strstr(). :This |  An alias for strstr
strcmp ( string $str1 , string $str2 ):int | Note that this comparison is case sensitive. 
strcoll ( string $str1 , string $str2 ):int |  Compares two strings using the current locale
strcspn ( string $subject , string $mask [, $start [, $length ]] ):int |  Finds length of initial segment consisting entirely of characters not found in mask. 
strip_tags ( $str [, $allowable_tags ] ):string | This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given str.
stripcslashes ( $str ):string | Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation. 
stripos ( string $haystack , mixed $needle [, $offset = 0 ] ):int |  Finds position of first occurrence of a string within another, case insensitive
stripslashes ( $str ):string |  Strips backslashes from a string
stristr ( $haystack , mixed $needle [, bool $before_needle = FALSE ] ):string | Returns all of haystack starting from and including the first occurrence of needle to the end. 
strlen ( string $string ):int | Returns the length of the given string. 
strnatcasecmp ( string $str1 , string $str2 ):int | This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. 
strnatcmp ( string $str1 , string $str2 ):int | This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, 
strncasecmp ( string $str1 , string $str2 , $len ):int | like strcasecmp(), but you can specify the number of characters from each string to be used in the comparison. 
strncmp ( string $str1 , string $str2 , $len ):int |  Binary safe string comparison
strpbrk ( $haystack , $char_list ):string | searches the haystack string for a char_list. 
strpos ( string $haystack , mixed $needle [, $offset = 0 ] ):int | Find the numeric position of the first occurrence of needle in the haystack string. 
strrchr ( $haystack , mixed $needle ):string | This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack. 
strrev ( $):string | Returns string, reversed. 
strripos ( string $haystack , mixed $needle [, $offset = 0 ] ):int |  Finds position of last occurrence of a string within another string
strrpos ( string $haystack , mixed $needle [, $offset = 0 ] ):int | Find the numeric position of the last occurrence of needle in the haystack string. 
strspn ( string $subject , string $mask [, $start [, $length ]] ):int |  Finds length of initial segment consisting entirely of characters found in mask. 
strstr ( $haystack , mixed $needle [, bool $before_needle = FALSE ] ):string |  Finds first occurrence of a string within another
strtok ( $str , $token ):string |  Tokenize a string
strtolower ( $):string |  Makes a string lowercase
strtoupper ( $):string |  Makes a string uppercase
strtr ( $str , $from , $to ):string |  Translates characters in str using given translation tables
substr_compare ( string $main_str , string $str , $offset [, $length [, bool $case_insensitivity = FALSE ]] ):int | compares main_str from position offset with str up to length characters. 
substr_count ( string $haystack , string $needle [, $offset = 0 [, $length ]] ):int |  Returns the number of times a substring occurs in the string
substr_replace ( $string , $replacement , $start [, $length ] ):mixed |  replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement. 
substr ( $, int $start [, int $length ] ):string | Returns the portion of string specified by the start and length parameters. 
trim ( $str [, $character_mask = "  | \r\0\x0B" ] ):string |  Strips whitespace from the beginning and end of a string
ucfirst ( $str ):string |  Makes a string's first character uppercase
ucwords ( $str [, $delimiters = " \t\r\n\f\v" ] ):string |  Uppercase the first character of every word in a string
vfprintf ( resource $handle , string $format , array $args ):int |  Output a formatted string into a stream
vprintf ( string $format , array $args ):int |  Output a formatted string
vsprintf ( $format , array $args ):string | Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments. 
wordwrap ( $str [, int $width = 75 [, $break = "\n" [, bool $cut = FALSE ]]] ):string | Wraps a string to a given number of characters using a string break character. 
token_get_all ( string $source [, int $flags = 0 ] ):array
token_name ( int $token ):string | gets the symbolic name for a PHP token value. 
base64_decode ( $data [, bool $strict = FALSE ] ):string | Decodes a base64 encoded data. 
base64_encode ( $data ):string |  Encodes string using MIME base64 algorithm
get_headers ( string $url [, int $format = 0 [, resource $context ]] ):array | returns an array with the headers sent by the server in response to a HTTP request. 
get_meta_tags ( string $filename [, bool $use_include_path = FALSE ] ):array | Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>. 
http_build_query ( mixed $query_data [, $numeric_prefix [, $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] ):string | Generates a URL-encoded query string from the associative (or indexed) array provided. 
parse_url ( string $url [, int $component = -1 ] ):mixed |  Parse a URL and return its components
rawurldecode ( $str ):string | Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters. 
rawurlencode ( $str ):string | Encodes the given string according to RFC 3986. 
urldecode ( $str ):string | Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character. 
urlencode ( $str ):string | This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page. 
boolval ( mixed $var ):bool | Returns the boolean value of var. 
debug_zval_dump ( mixed $variable [, mixed $... ] ):void | Dumps a string representation of an internal zend value to output. 
doubleval(->) function is an alias of: floatval(). :This
empty ( mixed $var ):bool | Determine whether a variable is considered to be empty.
floatval ( mixed $var ):float | Gets the float value of var. 
get_defined_vars ( void ):array | This function returns a multidimensional array containing a list of all defined variables.
get_resource_type ( resource $handle ):string | This function gets the type of the given resource. 
gettype ( mixed $var ):string | Returns the type of the PHP variable var. For type checking, use is_* functions. 
import_request_variables ( string $types [, string $prefix ] ):bool |  Import GET/POST/Cookie variables into the global scope
intval ( mixed $var [, $base = 10 ] ):int | Returns the integer value of var, using the specified base for the conversion (the default is base 10).
is_array ( mixed $var ):bool | Finds whether the given variable is an array. 
is_( mixed $var ):bool | Finds whether the given variable is a boolean. 
is_callable ( mixed $var [, $syntax_only = FALSE [, string &$callable_name ]] ):bool | Verify that the contents of a variable can be called as a function. 
is_countable ( mixed $var ):bool | Verify that the contents of a variable is an array or an object implementing Countable 
is_double(->) function is an alias of: is_float(). :This
is_float ( mixed $var ):bool |  Returns true if variable is float point
is_int ( mixed $var ):bool
is_integer(->) function is an alias of: is_int(). :This
is_iterable ( mixed $var ):bool | Verify that the contents of a variable is accepted by the iterable pseudo-type, i.e. that it is an array or an object implementing Traversable 
is_long(->) function is an alias of: is_int(). :This |  Returns true if variable is a long (integer)
is_null ( mixed $var ):bool | Finds whether the given variable is NULL. 
is_numeric ( mixed $var ):bool | Finds whether the given variable is numeric. 
is_object ( mixed $var ):bool | Finds whether the given variable is an object. 
is_real(->) function is an alias of: is_float(). :This
is_resource ( mixed $var ):bool | Finds whether the given variable is a resource. 
is_scalar ( mixed $var ):bool |  Returns true if value is a scalar
is_string ( mixed $var ):bool | Finds whether the type of the given variable is string. 
isset ( mixed $var [, mixed $... ] ):bool
print_r ( $expression [, bool $return = FALSE ] ):mixed |  Prints out or returns information about the specified variable
serialize ( mixed $value ):string |  Returns a string representation of variable (which can later be unserialized)
settype ( mixed &$var , string $type ):bool | Set the type of variable var to type. 
strval ( mixed $var ):string |  Get the string value of a variable
unserialize ( string $str [, array $options ] ):mixed |  Takes a string representation of variable and recreates it
unset ( mixed $var [, mixed $... ] ):void
var_dump ( mixed $expression [, mixed $... ] ):void |  Dumps a string representation of variable to output
var_export ( $expression [, bool $return = FALSE ] ):mixed | var_export() gets structured, valid php code, information about the given variable.