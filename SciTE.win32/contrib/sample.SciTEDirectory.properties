###############################################
#
#	MinGW Project File for use with Scintilla and SciTE
#	See https://groups.google.com/forum/#!forum/scite-interest
#
#	@author: Marcedo@HabMalNeFrage.de
#  
#	Note: Pathes in this File have to be related to $(SciteDirectoryHome)
#	Info: commence scite/src/scite.properties !
#
###############################################

# Common Options
project.name=Scintilla_SciTE
project.path=$(SciteDirectoryHome)
file.patterns.project=$(file.patterns.cpp);$(file.patterns.py)
ccopts=-pedantic  --std=gnu++11 -Og
cc=g++ $(ccopts)
ccc=gcc $(ccopts)

#
#~~~~~~~~~~
# Menu Commands (Windows)
#~~~~~~~~~~
#

[ Windows ]
if PLAT_WIN
	sdk.path=$(USERPROFILE)\scite
	scintilla=$(SciteDirectoryHome)\scintilla
	scite=$(SciteDirectoryHome)\scite
	dirSep=\/
	
	# Tools -> make
	make.cmd.scintilla=cd "$(scintilla)\win32" && mingw32-make
	make.cmd.scite=cd "$(scite)\win32\" && mingw32-make
	release=for %f in (SciLexer.dll,SciTE.exe) do @copy /y "$(scite)\bin\%f" "$(SciteDirectoryHome)\..\release"
	command.build.*=$(make.cmd.scintilla) && $(make.cmd.scite) && $(release)
	command.clean.*=cmd /c cd "$(scite)" && del /S /Q *.exe *.o *.dll *.res *.map *.plist

	# Tools -> compile
	project.includes=-I $(FileDir) -I $(scintilla)\include $(scintilla)\src -I $(scintilla)\lexlib -I $(scite)\src -I $(scite)\lua\include
	command.compile.*.cxx="cmd /c $(ccc) -c $(FileNameExt) -o $(FileName).o $(project.includes)"
	command.compile.*.rc="windres $(FileNameExt) $(FileName).o $(project.includes)"
	
	# Tools -> run
	command.go.*="$(SciteDirectoryHome)\..\release\SciTE.exe $(FilePath)"
	# To make the Go command both compile (if needed) and execute, use this setting:
	command.go.needs.*=

#
#~~~~~~~~
# Menu Comands (GTK/Linux)
#~~~~~~~~
#

[ Linux ]
if PLAT_GTK
	sdk.path=$(HOME)/scite
	scintilla=$(SciteDirectoryHome)/scintilla
	scite=$(SciteDirectoryHome)/scite
	dirSep=/
		
	# Tools -> make
	make.cmd.scintilla=cd "$(scintilla)/gtk" && make
	make.cmd.scite=cd "$(scite)/gtk" && make
	release=cp -v $(scite)/bin/SciTE $(SciteDirectoryHome)/../release
	command.build.*=$(make.cmd.scintilla) && $(make.cmd.scite) && $(release)
	command.clean.*=find $(scite) -name "*.o"  -delete
	
	# Tools -> compile
	project.includes=-I $(FileDir) -I $(scintilla)/include  $(scintilla)/src -I $(scintilla)/lexlib -I $(scite)/src -I $(scite)/lua/include
	command.compile.*.cxx=$(ccc)  -c $(FilePath) -o $(FileName).o $(project.includes)
	
	# Tools -> run
	command.go.*="$(SciteDirectoryHome)/../release/SciTE"
	# To make the Go command both compile (if needed) and execute, use this setting:
	command.go.needs.*=


#
#~~~~~~~~~
# Project SDK Settings (Autocomplete)
#~~~~~~~~~
#

[ ctags ]
project.ctags.filename=ctags.tags
project.ctags.filepath=$(project.path)$(dirSep)$(project.ctags.filename)
project.ctags.langdef=
project.ctags.excludes=--exclude="@$(project.path)$(dirSep)ctags.excludes"
project.ctags.opt=--tag-relative=yes -R --fields=+iaS  --languages=c++,c,python $(project.ctags.excludes) $(project.ctags.root) $(project.ctags.langdef)

# choose if you want SDK API Autocompletition and .properties based SDK Syntax Highlightening
project.sdk.api=$(sdk.path)$(dirSep)ctags.mingw.functions.api
import $(sdk.path)$(dirSep)ctags.mingw.functions.api

# ...If you choosed to place the Platform SDK within the Project Folder:
#project.sdk.api=$(project.path)$(dirSep)ctags.mingw.functions.api
#import $(project.path)$(dirSep)ctags.mingw.functions.api


[ various ]
output.horizontal.scroll.width.tracking=1
tabbar.hide.one=1
selection.always.visible=1
open.dialog.in.file.directory=1
view.whitespace=0