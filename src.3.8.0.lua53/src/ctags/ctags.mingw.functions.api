Abandon(void)virtual HRESULT WINAPI <asptlb.h>
AbandonSearch(ADS_SEARCH_HANDLE phSearchResult)virtual HRESULT WINAPI <iads.h>
ABI() __inline void Uninitialize<roapi.h>
ABI(HSTRING classid,T ** factory)template<roapi.h>
ABI(RO_INIT_TYPE it=RO_INIT_SINGLETHREADED) __inline HRESULT Initialze<roapi.h>
Abort(BOID * pboidReason,WINBOOL fRetaining,WINBOOL fAsync)virtual HRESULT WINAPI <transact.h>
Abort(HCHAPTER hChapter,DBASYNCHOP eOperation)virtual HRESULT WINAPI <transact.h>
Abort(VARIANT * fRetaining,VARIANT * fAsync)virtual HRESULT WINAPI <transact.h>
Abort(void)	virtual HRESULT __stdcall <transact.h>
AbortAll(void)virtual HRESULT WINAPI <subsmgr.h>
AbortDoc(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
Aborted(BOID * pboidReason,WINBOOL fRetaining,XACTUOW * pNewUOW,HRESULT hr)virtual HRESULT WINAPI <transact.h>
AbortItems(DWORD dwNumCookies,const SUBSCRIPTIONCOOKIE * pCookies)virtual HRESULT WINAPI <subsmgr.h>
AbortOperation(void)virtual HRESULT WINAPI <strmif.h>
AbortPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
AbortPrinter(HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
ABORTPROC(HDC,int) typedef WINBOOL<wingdi.h>
AbortRecord(CrmLogRecordRead crmLogRec,WINBOOL * pfForget)virtual HRESULT WINAPI <comsvcs.h>
AbortRecordVariants(VARIANT * pLogRecord,VARIANT_BOOL * pbForget)virtual HRESULT WINAPI <comsvcs.h>
AbortRequest(BOID * pboidReason,WINBOOL fRetaining,XACTUOW * pNewUOW)virtual HRESULT WINAPI <txcoord.h>
AbortRequestDone(HRESULT hr)virtual HRESULT WINAPI <txcoord.h>
AbortSystemShutdown(LPSTR lpMachineName) WINADVAPI WINBOOL WINAPI <winreg.h>
AbortSystemShutdownA(LPSTR lpMachineName) WINADVAPI WINBOOL WINAPI <winreg.h>
AbortSystemShutdownW(LPWSTR lpMachineName) WINADVAPI WINBOOL WINAPI <winreg.h>
AboutBox(void)virtual HRESULT WINAPI <mshtmlc.h>
ABPROVIDERINIT(HINSTANCE hInstance,LPMALLOC lpMalloc,LPALLOCATEBUFFER lpAllocateBuffer,LPALLOCATEMORE lpAllocateMore,LPFREEBUFFER lpFreeBuffer,ULONG ulFlags,ULONG ulMAPIVer,ULONG * lpulProviderVer,LPABPROVIDER * lppABProvider) typedef HRESULT<mapispi.h>
ACCELERATEABSDI(ULONG ulUIParam,LPVOID lpvmsg) typedef WINBOOL<wabdefs.h>
Accept(__LONG32 lMediaTypes)virtual HRESULT WINAPI <rtccore.h>
Accept(BSTR bstrContentType,BSTR bstrSessionDescription)virtual HRESULT WINAPI <rtccore.h>
Accept(ICalendarMessage ** Response)virtual HRESULT WINAPI <rtccore.h>
accept(SOCKET s,struct sockaddr * addr,int * addrlen) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
Accept(void)virtual HRESULT WINAPI <rtccore.h>
ACCEPT_SECURITY_CONTEXT_FN(PCredHandle,PCtxtHandle,PSecBufferDesc,unsigned __LONG32,unsigned __LONG32,PCtxtHandle,PSecBufferDesc,unsigned __LONG32 *,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
AcceptEx(SOCKET sListenSocket,SOCKET sAcceptSocket,PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,LPDWORD lpdwBytesReceived,LPOVERLAPPED lpOverlapped) WINBOOL WINAPI <winsock.h>
AcceptParentalLevelChange(WINBOOL bAccept)virtual HRESULT WINAPI <strmif.h>
AcceptSecurityContext(PCredHandle phCredential,PCtxtHandle phContext,PSecBufferDesc pInput,unsigned __LONG32 fContextReq,unsigned __LONG32 TargetDataRep,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
AcceptTentative(ICalendarMessage ** Response)virtual HRESULT WINAPI <cdoex.h>
access(__f,__m)<pthread.h>
AccessCheck(BSTR bstrObjectName,VARIANT varScopeNames,VARIANT varOperations,VARIANT varParameterNames,VARIANT varParameterValues,VARIANT varInterfaceNames,VARIANT varInterfaceFlags,VARIANT varInterfaces,VARIANT * pvarResults)virtual HRESULT WINAPI <securitybaseapi.h>
AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessCheckAndAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,LPSTR ObjectTypeName,LPSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckAndAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPSTR ObjectTypeName,LPSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPWSTR ObjectTypeName,LPWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID PrincipalSelfSid,HANDLE ClientToken,DWORD DesiredAccess,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessCheckByTypeAndAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPCWSTR ObjectTypeName,LPCWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID PrincipalSelfSid,HANDLE ClientToken,DWORD DesiredAccess,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccessList,LPDWORD AccessStatusList) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessCheckByTypeResultListAndAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckByTypeResultListAndAuditAlarmByHandle(LPCSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,LPCWSTR ObjectTypeName,LPCWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccessList,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPCWSTR ObjectTypeName,LPCWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccessList,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AccessibleChildren(IAccessible * paccContainer,LONG iChildStart,LONG cChildren,VARIANT * rgvarChildren,LONG * pcObtained) STDAPI <oleacc.h>
AccessibleObjectFromEvent(HWND hwnd,DWORD dwId,DWORD dwChildId,IAccessible ** ppacc,VARIANT * pvarChild) STDAPI <oleacc.h>
AccessibleObjectFromID(LONG hwnd,LONG lObjectID,LPACCESSIBLE * pIAccessible)virtual HRESULT WINAPI <oleacc.h>
AccessibleObjectFromPoint(POINT ptScreen,IAccessible ** ppacc,VARIANT * pvarChild) STDAPI <oleacc.h>
AccessibleObjectFromWindow(HWND hwnd,DWORD dwId,REFIID riid,void ** ppvObject) STDAPI <oleacc.h>
AccessNtmsLibraryDoor(HANDLE hSession,LPNTMS_GUID lpLibraryId,DWORD dwAction) DWORD WINAPI <ntmsapi.h>
AccessRanges(*) ACCESS_RANGE<strmini.h>
Acknowledge(void)virtual HRESULT WINAPI <oledbdep.h>
AckUnplug(void)virtual HRESULT WINAPI <txdtc.h>
acmDriverAdd(LPHACMDRIVERID phadid,HINSTANCE hinstModule,LPARAM lParam,DWORD dwPriority,DWORD fdwAdd) MMRESULT ACMAPI <msacm.h>
acmDriverAddA(LPHACMDRIVERID phadid,HINSTANCE hinstModule,LPARAM lParam,DWORD dwPriority,DWORD fdwAdd) MMRESULT ACMAPI <msacm.h>
acmDriverAddW(LPHACMDRIVERID phadid,HINSTANCE hinstModule,LPARAM lParam,DWORD dwPriority,DWORD fdwAdd) MMRESULT ACMAPI <msacm.h>
acmDriverClose(HACMDRIVER had,DWORD fdwClose) MMRESULT ACMAPI <msacm.h>
acmDriverDetails(HACMDRIVERID hadid,LPACMDRIVERDETAILSA padd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmDriverDetailsA(HACMDRIVERID hadid,LPACMDRIVERDETAILSA padd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmDriverDetailsW(HACMDRIVERID hadid,LPACMDRIVERDETAILSW padd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmDriverEnum(ACMDRIVERENUMCB fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
ACMDRIVERENUMCB(HACMDRIVERID hadid,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
acmDriverID(HACMOBJ hao,LPHACMDRIVERID phadid,DWORD fdwDriverID) MMRESULT ACMAPI <msacm.h>
acmDriverMessage(HACMDRIVER had,UINT uMsg,LPARAM lParam1,LPARAM lParam2) LRESULT ACMAPI <msacm.h>
acmDriverOpen(LPHACMDRIVER phad,HACMDRIVERID hadid,DWORD fdwOpen) MMRESULT ACMAPI <msacm.h>
acmDriverPriority(HACMDRIVERID hadid,DWORD dwPriority,DWORD fdwPriority) MMRESULT ACMAPI <msacm.h>
ACMDRIVERPROC(DWORD_PTR,HACMDRIVERID,UINT,LPARAM,LPARAM) typedef LRESULT<msacm.h>
acmDriverRemove(HACMDRIVERID hadid,DWORD fdwRemove) MMRESULT ACMAPI <msacm.h>
acmFilterChoose(LPACMFILTERCHOOSEA pafltrc) MMRESULT ACMAPI <msacm.h>
acmFilterChooseA(LPACMFILTERCHOOSEA pafltrc) MMRESULT ACMAPI <msacm.h>
ACMFILTERCHOOSEHOOKPROCA(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef UINT<msacm.h>
ACMFILTERCHOOSEHOOKPROCW(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef UINT<msacm.h>
acmFilterChooseW(LPACMFILTERCHOOSEW pafltrc) MMRESULT ACMAPI <msacm.h>
acmFilterDetails(HACMDRIVER had,LPACMFILTERDETAILSA pafd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFilterDetailsA(HACMDRIVER had,LPACMFILTERDETAILSA pafd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFilterDetailsW(HACMDRIVER had,LPACMFILTERDETAILSW pafd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFilterEnum(HACMDRIVER had,LPACMFILTERDETAILSA pafd,ACMFILTERENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFilterEnumA(HACMDRIVER had,LPACMFILTERDETAILSA pafd,ACMFILTERENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
ACMFILTERENUMCBA(HACMDRIVERID hadid,LPACMFILTERDETAILSA pafd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
ACMFILTERENUMCBW(HACMDRIVERID hadid,LPACMFILTERDETAILSW pafd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
acmFilterEnumW(HACMDRIVER had,LPACMFILTERDETAILSW pafd,ACMFILTERENUMCBW fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFilterTagDetails(HACMDRIVER had,LPACMFILTERTAGDETAILSA paftd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFilterTagDetailsA(HACMDRIVER had,LPACMFILTERTAGDETAILSA paftd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFilterTagDetailsW(HACMDRIVER had,LPACMFILTERTAGDETAILSW paftd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFilterTagEnum(HACMDRIVER had,LPACMFILTERTAGDETAILSA paftd,ACMFILTERTAGENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFilterTagEnumA(HACMDRIVER had,LPACMFILTERTAGDETAILSA paftd,ACMFILTERTAGENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
ACMFILTERTAGENUMCBA(HACMDRIVERID hadid,LPACMFILTERTAGDETAILSA paftd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
ACMFILTERTAGENUMCBW(HACMDRIVERID hadid,LPACMFILTERTAGDETAILSW paftd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
acmFilterTagEnumW(HACMDRIVER had,LPACMFILTERTAGDETAILSW paftd,ACMFILTERTAGENUMCBW fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFormatChoose(LPACMFORMATCHOOSEA pafmtc) MMRESULT ACMAPI <msacm.h>
acmFormatChooseA(LPACMFORMATCHOOSEA pafmtc) MMRESULT ACMAPI <msacm.h>
ACMFORMATCHOOSEHOOKPROCA(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef UINT<msacm.h>
ACMFORMATCHOOSEHOOKPROCW(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef UINT<msacm.h>
acmFormatChooseW(LPACMFORMATCHOOSEW pafmtc) MMRESULT ACMAPI <msacm.h>
acmFormatDetails(HACMDRIVER had,LPACMFORMATDETAILSA pafd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFormatDetailsA(HACMDRIVER had,LPACMFORMATDETAILSA pafd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFormatDetailsW(HACMDRIVER had,LPACMFORMATDETAILSW pafd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFormatEnum(HACMDRIVER had,LPACMFORMATDETAILSA pafd,ACMFORMATENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFormatEnumA(HACMDRIVER had,LPACMFORMATDETAILSA pafd,ACMFORMATENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
ACMFORMATENUMCBA(HACMDRIVERID hadid,LPACMFORMATDETAILSA pafd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
ACMFORMATENUMCBW(HACMDRIVERID hadid,LPACMFORMATDETAILSW pafd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
acmFormatEnumW(HACMDRIVER had,LPACMFORMATDETAILSW pafd,ACMFORMATENUMCBW fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFormatSuggest(HACMDRIVER had,LPWAVEFORMATEX pwfxSrc,LPWAVEFORMATEX pwfxDst,DWORD cbwfxDst,DWORD fdwSuggest) MMRESULT ACMAPI <msacm.h>
acmFormatTagDetails(HACMDRIVER had,LPACMFORMATTAGDETAILSA paftd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFormatTagDetailsA(HACMDRIVER had,LPACMFORMATTAGDETAILSA paftd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFormatTagDetailsW(HACMDRIVER had,LPACMFORMATTAGDETAILSW paftd,DWORD fdwDetails) MMRESULT ACMAPI <msacm.h>
acmFormatTagEnum(HACMDRIVER had,LPACMFORMATTAGDETAILSA paftd,ACMFORMATTAGENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmFormatTagEnumA(HACMDRIVER had,LPACMFORMATTAGDETAILSA paftd,ACMFORMATTAGENUMCBA fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
ACMFORMATTAGENUMCBA(HACMDRIVERID hadid,LPACMFORMATTAGDETAILSA paftd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
ACMFORMATTAGENUMCBW(HACMDRIVERID hadid,LPACMFORMATTAGDETAILSW paftd,DWORD_PTR dwInstance,DWORD fdwSupport) typedef WINBOOL<msacm.h>
acmFormatTagEnumW(HACMDRIVER had,LPACMFORMATTAGDETAILSW paftd,ACMFORMATTAGENUMCBW fnCallback,DWORD_PTR dwInstance,DWORD fdwEnum) MMRESULT ACMAPI <msacm.h>
acmGetVersion(void) DWORD ACMAPI <msacm.h>
acmMetrics(HACMOBJ hao,UINT uMetric,LPVOID pMetric) MMRESULT ACMAPI <msacm.h>
acmStreamClose(HACMSTREAM has,DWORD fdwClose) MMRESULT ACMAPI <msacm.h>
acmStreamConvert(HACMSTREAM has,LPACMSTREAMHEADER pash,DWORD fdwConvert) MMRESULT ACMAPI <msacm.h>
acmStreamMessage(HACMSTREAM has,UINT uMsg,LPARAM lParam1,LPARAM lParam2) MMRESULT ACMAPI <msacm.h>
acmStreamOpen(LPHACMSTREAM phas,HACMDRIVER had,LPWAVEFORMATEX pwfxSrc,LPWAVEFORMATEX pwfxDst,LPWAVEFILTER pwfltr,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) MMRESULT ACMAPI <msacm.h>
acmStreamPrepareHeader(HACMSTREAM has,LPACMSTREAMHEADER pash,DWORD fdwPrepare) MMRESULT ACMAPI <msacm.h>
acmStreamReset(HACMSTREAM has,DWORD fdwReset) MMRESULT ACMAPI <msacm.h>
acmStreamSize(HACMSTREAM has,DWORD cbInput,LPDWORD pdwOutputBytes,DWORD fdwSize) MMRESULT ACMAPI <msacm.h>
acmStreamUnprepareHeader(HACMSTREAM has,LPACMSTREAMHEADER pash,DWORD fdwUnprepare) MMRESULT ACMAPI <msacm.h>
ACPI_ENUM_CHILD_LENGTH_FROM_CHILD( Child )<acpiioct.h>
ACPI_ENUM_CHILD_LENGTH_FROM_CHILD()()()
ACPI_ENUM_CHILD_NEXT( Child )<acpiioct.h>
ACPI_ENUM_CHILD_NEXT()()()
ACPI_METHOD_ARGUMENT_LENGTH( DataLength )<acpiioct.h>
ACPI_METHOD_ARGUMENT_LENGTH()()()
ACPI_METHOD_ARGUMENT_LENGTH_FROM_ARGUMENT( Argument )<acpiioct.h>
ACPI_METHOD_ARGUMENT_LENGTH_FROM_ARGUMENT()()()
ACPI_METHOD_NEXT_ARGUMENT( Argument )<acpiioct.h>
ACPI_METHOD_NEXT_ARGUMENT()()()
ACPI_METHOD_SET_ARGUMENT_BUFFER( Argument, BuffData, BuffLength )<acpiioct.h>
ACPI_METHOD_SET_ARGUMENT_BUFFER()()()
ACPI_METHOD_SET_ARGUMENT_INTEGER( MethodArgument, IntData )<acpiioct.h>
ACPI_METHOD_SET_ARGUMENT_INTEGER()()()
ACPI_METHOD_SET_ARGUMENT_STRING( Argument, StrData )<acpiioct.h>
ACPI_METHOD_SET_ARGUMENT_STRING()()()
ACQUIRE_CREDENTIALS_HANDLE_FN_A(SEC_CHAR *,SEC_CHAR *,unsigned __LONG32,void *,void *,SEC_GET_KEY_FN,void *,PCredHandle,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
ACQUIRE_CREDENTIALS_HANDLE_FN_W(PSECURITY_STRING,PSECURITY_STRING,unsigned __LONG32,void *,void *,SEC_GET_KEY_FN,void *,PCredHandle,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
ACQUIRE_SPINLOCK(rpLock,rOwn,Loop)<kxia64.h>
AcquireCredentialsHandle(SEC_CHAR * pszPrincipal,SEC_CHAR * pszPackage,unsigned __LONG32 fCredentialUse,void * pvLogonId,void * pAuthData,SEC_GET_KEY_FN pGetKeyFn,void * pvGetKeyArgument,PCredHandle phCredential,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
AcquireCredentialsHandleA(SEC_CHAR * pszPrincipal,SEC_CHAR * pszPackage,unsigned __LONG32 fCredentialUse,void * pvLogonId,void * pAuthData,SEC_GET_KEY_FN pGetKeyFn,void * pvGetKeyArgument,PCredHandle phCredential,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
AcquireCredentialsHandleW(PSECURITY_STRING pPrincipal,PSECURITY_STRING pPackage,unsigned __LONG32 fCredentialUse,void * pvLogonId,void * pAuthData,SEC_GET_KEY_FN pGetKeyFn,void * pvGetKeyArgument,PCredHandle phCredential,PTimeStamp ptsExpiry) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
AcquireSRWLockExclusive(PSRWLOCK SRWLock) VOID WINAPI <synchapi.h>
AcquireSRWLockShared(PSRWLOCK SRWLock) VOID WINAPI <synchapi.h>
AcsLan(PLLC_CCB pCcb,PLLC_CCB * ppBadCcb) ACSLAN_STATUS WINAPI <dlcapi.h>
Activate(LPCWSTR pwszName,REFIID riid,IUnknown ** ppUnk)virtual HRESULT WINAPI <rrascfg.h>
Activate(short sState)virtual HRESULT WINAPI <rrascfg.h>
Activate(ULONG_PTR uConnectionParam,ULONG_PTR uReserved1,ULONG_PTR uReserved2)virtual HRESULT WINAPI <rrascfg.h>
Activate(VARIANT State,VARIANT_BOOL * Success)virtual HRESULT WINAPI <rrascfg.h>
Activate(void)virtual HRESULT WINAPI <rrascfg.h>
Activate(WINBOOL fRestoreLayout)virtual HRESULT WINAPI <rrascfg.h>
ActivateActCtx(HANDLE hActCtx,ULONG_PTR * lpCookie) WINBASEAPI WINBOOL WINAPI <winbase.h>
ActivateAtPosition(POINT point)virtual HRESULT WINAPI <strmif.h>
ActivateButton(void)virtual HRESULT WINAPI <strmif.h>
ActivateInputState(__LONG32 dwCharID,__LONG32 bActivated)virtual HRESULT WINAPI <agtsvr.h>
ActivateKeyboardLayout(HKL hkl,UINT Flags) WINUSERAPI HKL WINAPI <winuser.h>
ActivatePendingView(void)virtual HRESULT WINAPI <shdeprecated.h>
ActiveClientChange(__LONG32 dwCharID,__LONG32 lStatus)virtual HRESULT WINAPI <agtsvr.h>
ActivityId(VARIANT Index,LPVARIANT pItem)virtual HRESULT WINAPI <evntcons.h>
ACTIVPROF_E_PROFILER_ABSENT(SEVERITY_ERROR, FACILITY_ITF, 0x0201)const HRESULT <activprof.h>
ACTIVPROF_E_PROFILER_PRESENT(SEVERITY_ERROR, FACILITY_ITF, 0x0200)const HRESULT <activprof.h>
Add(__LONG32 Index,IBodyPart ** ppPart)virtual HRESULT WINAPI <txdtc.h>
Add(__LONG32 Index,VARIANT * pVariant)virtual HRESULT WINAPI <txdtc.h>
Add(__LONG32 lFlags,VARIANT var)virtual HRESULT WINAPI <txdtc.h>
Add(__LONG32 NewValue)virtual HRESULT WINAPI <txdtc.h>
Add(ARG_TYPE newElement)inline int CDXArray<txdtc.h>
Add(BSTR Address,IAttendee ** Attendee)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR bstrHeaderValue,BSTR bstrHeaderName)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR bstrName,IDispatch ** ppItem)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR bstrName,VARIANT vItem)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR bstrNewItem)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR bstrSuperclass)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR bszCaption,BSTR bszVoice,__LONG32 bEnabled,__LONG32 bVisible,__LONG32 * pdwID)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR Name,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand ** Command)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR SnapinNameOrCLSID,VARIANT ParentSnapin,VARIANT Properties,PPSNAPIN SnapIn)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR Type,IException ** Exception)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR Type,IRecurrencePattern ** RecurrencePattern)virtual HRESULT WINAPI <txdtc.h>
Add(BSTR val)virtual HRESULT WINAPI <txdtc.h>
Add(byte * pucLuPair,DWORD cbLuPair)virtual HRESULT WINAPI <txdtc.h>
Add(GPMSearchProperty searchProperty,GPMSearchOperation searchOperation,VARIANT varValue)virtual HRESULT WINAPI <txdtc.h>
Add(IDispatch * pContact)virtual HRESULT WINAPI <txdtc.h>
Add(IDispatch ** ppCatalogObject)virtual HRESULT WINAPI <txdtc.h>
Add(IGPMPermission * pPerm)virtual HRESULT WINAPI <txdtc.h>
Add(IUnknown * CalendarPart,CdoComponentType ComponentType)virtual HRESULT WINAPI <txdtc.h>
Add(LONG Index,BSTR pAttribute)virtual HRESULT WINAPI <txdtc.h>
Add(LPCWSTR pszwPathToFolder)virtual HRESULT WINAPI <txdtc.h>
Add(PNODE Node,VIEWOPTIONS viewOptions=ViewOption_Default)virtual HRESULT WINAPI <txdtc.h>
Add(T & t) WINBOOL <txdtc.h>
Add(VARIANT * item,BSTR objectID)virtual HRESULT WINAPI <txdtc.h>
Add(VARIANT Name,VARIANT Address,VARIANT Type,VARIANT * pvarResult)virtual HRESULT WINAPI <txdtc.h>
Add(VARIANT Name,VARIANT Type,VARIANT Source,VARIANT ContentLocation,VARIANT ContentBase,VARIANT * pvarResult)virtual HRESULT WINAPI <txdtc.h>
Add(VARIANT NewValue)virtual HRESULT WINAPI <txdtc.h>
Add(VARIANT Subject,VARIANT Text,VARIANT Importance,VARIANT * pvarResult)virtual HRESULT WINAPI <txdtc.h>
Add(VARIANT vUser)virtual HRESULT WINAPI <txdtc.h>
Add(void)virtual HRESULT WINAPI <txdtc.h>
ADD_ADAPTER_HANDLER(IN NDIS_HANDLE MacMacContext,IN NDIS_HANDLE WrapperConfigurationContext,IN PNDIS_STRING AdapterName)typedef NDIS_STATUS<ndis.h>
ADD_CREDENTIALS_FN_A(PCredHandle,SEC_CHAR *,SEC_CHAR *,unsigned __LONG32,void *,SEC_GET_KEY_FN,void *,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
ADD_CREDENTIALS_FN_W(PCredHandle,PSECURITY_STRING,PSECURITY_STRING,unsigned __LONG32,void *,SEC_GET_KEY_FN,void *,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
AddAccessAllowedAce(PACL pAcl,DWORD dwAceRevision,DWORD AccessMask,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAccessAllowedAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAccessAllowedObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID * ObjectTypeGuid,GUID * InheritedObjectTypeGuid,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAccessDeniedAce(PACL pAcl,DWORD dwAceRevision,DWORD AccessMask,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAccessDeniedAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAccessDeniedObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID * ObjectTypeGuid,GUID * InheritedObjectTypeGuid,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAce(IDispatch * pAccessControlEntry)virtual HRESULT WINAPI <securitybaseapi.h>
AddAce(PACL pAcl,DWORD dwAceRevision,DWORD dwStartingAceIndex,LPVOID pAceList,DWORD nAceListLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddApplicationGroups(VARIANT varApplicationGroups)virtual HRESULT WINAPI <azroles.h>
AddAppMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddAppNonMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddArc(const Rect & rect,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddArc(const RectF & rect,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddArc(INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddArc(REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddAssignedResourceFromParent(p, n)<portcls.h>
AddAtom(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
AddAtomA(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
AddAtomW(LPCWSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
AddAttachment(BSTR URL,BSTR UserName,BSTR Password,IBodyPart ** ppBody)virtual HRESULT WINAPI <cdosys.h>
AddAuditAccessAce(PACL pAcl,DWORD dwAceRevision,DWORD dwAccessMask,PSID pSid,WINBOOL bAuditSuccess,WINBOOL bAuditFailure) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAuditAccessAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD dwAccessMask,PSID pSid,WINBOOL bAuditSuccess,WINBOOL bAuditFailure) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAuditAccessObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID * ObjectTypeGuid,GUID * InheritedObjectTypeGuid,PSID pSid,WINBOOL bAuditSuccess,WINBOOL bAuditFailure) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddAuthenticatedAttributesToPKCS7Request(PCRYPT_ATTRIBUTES pAttributes)virtual HRESULT WINAPI <xenroll.h>
AddBezier(const Point & pt1,const Point & pt2,const Point & pt3,const Point & pt4)	Status <gdipluspath.h>
AddBezier(const PointF & pt1,const PointF & pt2,const PointF & pt3,const PointF & pt4)	Status <gdipluspath.h>
AddBezier(INT x1,INT y1,INT x2,INT y2,INT x3,INT y3,INT x4,INT y4)	Status <gdipluspath.h>
AddBezier(REAL x1,REAL y1,REAL x2,REAL y2,REAL x3,REAL y3,REAL x4,REAL y4)	Status <gdipluspath.h>
AddBeziers(const Point * points,INT count)	Status <gdipluspath.h>
AddBeziers(const PointF * points,INT count)	Status <gdipluspath.h>
AddBitmap(int nImages,HBITMAP hbmp,int cxSize,int cySize,COLORREF crMask)virtual HRESULT WINAPI <mmc.h>
AddBodyPart(__LONG32 Index,IBodyPart ** ppPart)virtual HRESULT WINAPI <cdosys.h>
AddBuddy(BSTR bstrPresentityURI,BSTR bstrUserName,BSTR bstrData,VARIANT_BOOL fPersistent,IRTCProfile * pProfile,__LONG32 lFlags,IRTCBuddy ** ppBuddy)virtual HRESULT WINAPI <rtccore.h>
AddBuddy(IRTCBuddy * pBuddy)virtual HRESULT WINAPI <rtccore.h>
AddBuddyEx(BSTR bstrPresentityURI,BSTR bstrUserName,BSTR bstrData,VARIANT_BOOL fPersistent,RTC_BUDDY_SUBSCRIPTION_TYPE enSubscriptionType,IRTCProfile * pProfile,__LONG32 lFlags,IRTCBuddy2 ** ppBuddy)virtual HRESULT WINAPI <rtccore.h>
AddBusNumberFromParent(p, n)<portcls.h>
AddButton(int idCommand,LPOLESTR lpButtonText,LPOLESTR lpTooltipText)virtual HRESULT WINAPI <mmc.h>
AddButtons(int nButtons,LPMMCBUTTON lpButtons)virtual HRESULT WINAPI <mmc.h>
AddCategory(CHANNELCATEGORYINFO * pCategoryInfo)virtual HRESULT WINAPI <chanmgr.h>
AddCertTypeToRequestWStr(LPWSTR szw)virtual HRESULT WINAPI <xenroll.h>
AddCertTypeToRequestWStrEx(LONG lType,LPCWSTR pwszOIDOrName,LONG lMajorVersion,WINBOOL fMinorVersion,LONG lMinorVersion)virtual HRESULT WINAPI <xenroll.h>
AddChannelShortcut(CHANNELSHORTCUTINFO * pChannelInfo)virtual HRESULT WINAPI <chanmgr.h>
AddClipboardFormatListener(HWND hwnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
AddClosedCurve(const Point * points,INT count)	Status <gdipluspath.h>
AddClosedCurve(const Point * points,INT count,REAL tension)	Status <gdipluspath.h>
AddClosedCurve(const PointF * points,INT count)	Status <gdipluspath.h>
AddClosedCurve(const PointF * points,INT count,REAL tension)	Status <gdipluspath.h>
AddClusterNode(HCLUSTER hCluster,PCWSTR lpszNodeName,PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback,PVOID pvCallbackArg)HNODE WINAPI <clusapi.h>
AddClusterResourceDependency(HRESOURCE hResource,HRESOURCE hDependsOn) DWORD WINAPI <clusapi.h>
AddClusterResourceNode(HRESOURCE hResource,HNODE hNode) DWORD WINAPI <clusapi.h>
AddColumn(DBID * pTableID,DBCOLUMNDESC * pColumnDesc,DBID ** ppColumnID)virtual HRESULT WINAPI <oledb.h>
AddColumns(DBORDINAL cColumns,const DBCOLUMNINFO rgNewColumnInfo[],DBCOLUMNACCESS rgColumns[])virtual HRESULT WINAPI <oledb.h>
AddConditionalAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,UCHAR AceType,DWORD AccessMask,PSID pSid,PWCHAR ConditionStr,DWORD * ReturnLength) WINADVAPI WINBOOL WINAPI <winbase.h>
AddConnectNotify(LPNOTIFYINFO lpNotifyInfo,LPNOTIFYADD lpAddInfo)DWORD WINAPI <npapi.h>
AddConsoleAlias(LPSTR Source,LPSTR Target,LPSTR ExeName) WINBASEAPI WINBOOL WINAPI <wincon.h>
AddConsoleAliasA(LPSTR Source,LPSTR Target,LPSTR ExeName) WINBASEAPI WINBOOL WINAPI <wincon.h>
AddConsoleAliasW(LPWSTR Source,LPWSTR Target,LPWSTR ExeName) WINBASEAPI WINBOOL WINAPI <wincon.h>
AddConstraint(DBID * pTableID,DBCONSTRAINTDESC * pConstraintDesc)virtual HRESULT WINAPI <oledb.h>
AddContextMenuItems(IUnknown * piData,IWCContextMenuCallback * piCallback)virtual HRESULT WINAPI <cluadmex.h>
AddCredentials(PCredHandle hCredentials,SEC_CHAR * pszPrincipal,SEC_CHAR * pszPackage,unsigned __LONG32 fCredentialUse,void * pAuthData,SEC_GET_KEY_FN pGetKeyFn,void * pvGetKeyArgument,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
AddCredentialsA(PCredHandle hCredentials,SEC_CHAR * pszPrincipal,SEC_CHAR * pszPackage,unsigned __LONG32 fCredentialUse,void * pAuthData,SEC_GET_KEY_FN pGetKeyFn,void * pvGetKeyArgument,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
AddCredentialsW(PCredHandle hCredentials,PSECURITY_STRING pPrincipal,PSECURITY_STRING pPackage,unsigned __LONG32 fCredentialUse,void * pAuthData,SEC_GET_KEY_FN pGetKeyFn,void * pvGetKeyArgument,PTimeStamp ptsExpiry) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
AddCurve(const Point * points,INT count)	Status <gdipluspath.h>
AddCurve(const Point * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status <gdipluspath.h>
AddCurve(const Point * points,INT count,REAL tension)	Status <gdipluspath.h>
AddCurve(const PointF * points,INT count)	Status <gdipluspath.h>
AddCurve(const PointF * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status <gdipluspath.h>
AddCurve(const PointF * points,INT count,REAL tension)	Status <gdipluspath.h>
AddDelBackupEntry(LPCSTR lpcszFileList,LPCSTR lpcszBackupDir,LPCSTR lpcszBaseName,DWORD dwFlags) HRESULT WINAPI <advpub.h>
ADDDELBACKUPENTRY(LPCSTR lpcszFileList,LPCSTR lpcszBackupDir,LPCSTR lpcszBaseName,DWORD dwFlags) typedef HRESULT<advpub.h>
AddDelegatedPolicyUser(BSTR bstrDelegatedPolicyUser,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddDelegatedPolicyUserName(BSTR bstrDelegatedPolicyUser,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddDependency(BSTR bstrApplication,BSTR bstrGroupID)virtual HRESULT WINAPI <iiisext.h>
AddDesigner(IHTMLEditDesigner * pIDesigner)virtual HRESULT WINAPI <mshtmlc.h>
AddDeviceDlg(HWND hwndParent,LONG lFlags)virtual HRESULT WINAPI <wia.h>
AddDevicePrivateFromParent(p, n)<portcls.h>
AddDeviceSpecificFromParent(p, n)<portcls.h>
AddDirectoryObject(ITDirectoryObject * pDirectoryObject)virtual HRESULT WINAPI <rend.h>
AddDllDirectory(PCWSTR NewDirectory) WINBASEAPI DLL_DIRECTORY_COOKIE WINAPI <libloaderapi.h>
AddDmaFromParent(p, n)<portcls.h>
AddElementSegment(IHTMLElement * pIElement,IElementSegment ** ppISegmentAdded)virtual HRESULT WINAPI <mshtmlc.h>
AddEllipse(const Rect & rect)	Status <gdipluspath.h>
AddEllipse(const RectF & rect)	Status <gdipluspath.h>
AddEllipse(INT x,INT y,INT width,INT height)	Status <gdipluspath.h>
AddEllipse(REAL x,REAL y,REAL width,REAL height)	Status <gdipluspath.h>
AddEntry(BSTR bstrSource,GPMEntryType gpmEntryType,VARIANT * pvarDestination,IGPMMapEntry ** ppEntry)virtual HRESULT WINAPI <shdeprecated.h>
AddEntry(IUnknown * punk,WINBOOL fIsLocalAnchor)virtual HRESULT WINAPI <shdeprecated.h>
AddERExcludedApplication(LPCSTR szApplication)WINBOOL WINAPI <errorrep.h>
AddERExcludedApplicationA(LPCSTR szApplication)WINBOOL WINAPI <errorrep.h>
AddERExcludedApplicationW(LPCWSTR wszApplication)WINBOOL WINAPI <errorrep.h>
AddErrorRecord(ERRORINFO * pErrorInfo,DWORD dwLookupID,DISPPARAMS * pdispparams,IUnknown * punkCustomError,DWORD dwDynamicErrorID)virtual HRESULT WINAPI <oledb.h>
AddEx(BSTR bszCaption,BSTR bszVoice,BSTR bszVoiceCaption,__LONG32 bEnabled,__LONG32 bVisible,__LONG32 ulHelpId,__LONG32 * pdwID)virtual HRESULT WINAPI <agtsvr.h>
AddExtension(HSCOPEITEM hItem,LPCLSID lpClsid)virtual HRESULT WINAPI <mmc.h>
AddExtensionFile(BSTR bstrExtensionFile,VARIANT bAccess,BSTR bstrGroupID,VARIANT bCanDelete,BSTR bstrDescription)virtual HRESULT WINAPI <iiisext.h>
AddExtensionMenuItem(BSTR lpszName,BSTR lpszStatusBarText,ULONG nCommandID,ULONG nSubmenuCommandID,ULONG uFlags)virtual HRESULT WINAPI <cluadmex.h>
AddExtensionPages(void)virtual HRESULT WINAPI <mmc.h>
AddExtensionsToRequest(PCERT_EXTENSIONS pCertExtensions)virtual HRESULT WINAPI <xenroll.h>
AddFile(LPCWSTR RemoteUrl,LPCWSTR LocalName)virtual HRESULT WINAPI <bits.h>
AddFiles(ULONG cFileCount,FILESETINFO ** ppFileSet)virtual HRESULT WINAPI <qmgr.h>
AddFileSet(ULONG cFileCount,BG_FILE_INFO * pFileSet)virtual HRESULT WINAPI <bits.h>
AddFileWithRanges(LPCWSTR RemoteUrl,LPCWSTR LocalName,DWORD RangeCount,BG_FILE_RANGE Ranges[])virtual HRESULT WINAPI <bits2_0.h>
AddFiltersToGraph() virtual HRESULT <msptrmvc.h>
AddFilterToCache(IBaseFilter * pFilter)virtual HRESULT WINAPI <strmif.h>
AddFontFile(const WCHAR * filename)__inline__ Status PrivateFontCollection::<gdiplusimpl.h>
AddFontMemResourceEx(PVOID pFileView,DWORD cjSize,PVOID pvResrved,DWORD * pNumFonts) WINGDIAPI HANDLE WINAPI <wingdi.h>
AddFontResource(LPCSTR) WINGDIAPI int WINAPI <wingdi.h>
AddFontResourceA(LPCSTR) WINGDIAPI int WINAPI <wingdi.h>
AddFontResourceEx(LPCSTR name,DWORD fl,PVOID res) WINGDIAPI int WINAPI <wingdi.h>
AddFontResourceExA(LPCSTR name,DWORD fl,PVOID res) WINGDIAPI int WINAPI <wingdi.h>
AddFontResourceExW(LPCWSTR name,DWORD fl,PVOID res) WINGDIAPI int WINAPI <wingdi.h>
AddFontResourceW(LPCWSTR) WINGDIAPI int WINAPI <wingdi.h>
AddForm(HANDLE hPrinter,DWORD Level,LPBYTE pForm) WINBOOL WINAPI <winspool.h>
AddFormA(HANDLE hPrinter,DWORD Level,LPBYTE pForm) WINBOOL WINAPI <winspool.h>
AddFormW(HANDLE hPrinter,DWORD Level,LPBYTE pForm) WINBOOL WINAPI <winspool.h>
AddGroup(BSTR bstrGroupName,BSTR bstrData,IRTCProfile * pProfile,__LONG32 lFlags,IRTCBuddyGroup ** ppGroup)virtual HRESULT WINAPI <rtccore.h>
AddHead(ARG_TYPE newElement)DXLISTPOS CDXList<dxtmpl.h>
AddHead(CDXList * pNewList)void CDXList<dxtmpl.h>
AddHeader(BSTR bstrHeaderName,BSTR bstrHeaderValue)virtual HRESULT WINAPI <asptlb.h>
AddInksetInterval(HINKSET,LPINTERVAL) WINBOOL WINAPI <penwin.h>
AddIntegrityLabelToBoundaryDescriptor(HANDLE * BoundaryDescriptor,PSID IntegrityLabel) WINBASEAPI WINBOOL WINAPI <winbase.h>
AddInterruptFromParent(p, n)<portcls.h>
AddIPAddress(IPAddr Address,IPMask IpMask,DWORD IfIndex,PULONG NTEContext,PULONG NTEInstance) DWORD WINAPI <iphlpapi.h>
AddIScsiConnection(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PVOID Reserved,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA TargetPortal,ISCSI_SECURITY_FLAGS SecurityFlags,PSCSI_LOGIN_OPTIONS LoginOptions,ULONG KeySize,PCHAR Key,PISCSI_UNIQUE_CONNECTION_ID ConnectionId) HRESULT WINAPI <iscsidsc.h>
AddIScsiConnectionA(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PVOID Reserved,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA TargetPortal,ISCSI_SECURITY_FLAGS SecurityFlags,PSCSI_LOGIN_OPTIONS LoginOptions,ULONG KeySize,PCHAR Key,PISCSI_UNIQUE_CONNECTION_ID ConnectionId) HRESULT WINAPI <iscsidsc.h>
AddIScsiConnectionW(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PVOID Reserved,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALW TargetPortal,ISCSI_SECURITY_FLAGS SecurityFlags,PSCSI_LOGIN_OPTIONS LoginOptions,ULONG KeySize,PCHAR Key,PISCSI_UNIQUE_CONNECTION_ID ConnectionId) HRESULT WINAPI <iscsidsc.h>
AddIScsiSendTargetPortal(PCHAR InitiatorName,ULONG InitiatorPortNumber,PISCI_LOGIN_OPTIONS LoginOptions,ISCSI_SECURITY_FLAGS SecurityFlags,PISCSI_TARGET_PORTALA Portal) HRESULT WINAPI <iscsidsc.h>
AddIScsiSendTargetPortalA(PCHAR InitiatorName,ULONG InitiatorPortNumber,PISCI_LOGIN_OPTIONS LoginOptions,ISCSI_SECURITY_FLAGS SecurityFlags,PISCSI_TARGET_PORTALA Portal) HRESULT WINAPI <iscsidsc.h>
AddIScsiSendTargetPortalW(PWCHAR InitiatorName,ULONG InitiatorPortNumber,PISCI_LOGIN_OPTIONS LoginOptions,ISCSI_SECURITY_FLAGS SecurityFlags,PISCSI_TARGET_PORTALW Portal) HRESULT WINAPI <iscsidsc.h>
AddIScsiStaticTarget(PCHAR TargetName,PCHAR TargetAlias,ISCSI_TARGET_FLAGS TargetFlags,BOOLEAN Persist,PISCSI_TARGET_MAPPINGA Mappings,PISCSI_LOGIN_OPTIONS LoginOptions,PISCSI_TARGET_PORTAL_GROUPA PortalGroup) HRESULT WINAPI <iscsidsc.h>
AddIScsiStaticTargetA(PCHAR TargetName,PCHAR TargetAlias,ISCSI_TARGET_FLAGS TargetFlags,BOOLEAN Persist,PISCSI_TARGET_MAPPINGA Mappings,PISCSI_LOGIN_OPTIONS LoginOptions,PISCSI_TARGET_PORTAL_GROUPA PortalGroup) HRESULT WINAPI <iscsidsc.h>
AddIScsiStaticTargetW(PWCHAR TargetName,PWCHAR TargetAlias,ISCSI_TARGET_FLAGS TargetFlags,BOOLEAN Persist,PISCSI_TARGET_MAPPINGW Mappings,PISCSI_LOGIN_OPTIONS LoginOptions,PISCSI_TARGET_PORTAL_GROUPW PortalGroup) HRESULT WINAPI <iscsidsc.h>
AddISNSServer(PCHAR Address) HRESULT WINAPI <iscsidsc.h>
AddISNSServerA(PCHAR Address) HRESULT WINAPI <iscsidsc.h>
AddISNSServerW(PWCHAR Address) HRESULT WINAPI <iscsidsc.h>
AddItem(BSTR bstrCryptoKey)virtual HRESULT WINAPI <msclus.h>
AddItem(BSTR bstrRegistryKey)virtual HRESULT WINAPI <msclus.h>
AddItem(CONTEXTMENUITEM * pItem)virtual HRESULT WINAPI <msclus.h>
AddItem(CONTEXTMENUITEM2 * pItem)virtual HRESULT WINAPI <msclus.h>
AddItem(ISClusNode * pNode)virtual HRESULT WINAPI <msclus.h>
AddItem(ISClusResource * pResource)virtual HRESULT WINAPI <msclus.h>
AddJob(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
AddJobA(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
AddJobW(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
AddKey(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath)virtual HRESULT WINAPI <iadmw.h>
AddLeafElement(BSTR bstrLeafElement)virtual HRESULT WINAPI <iads.h>
AddLine(const Point & pt1,const Point & pt2)	Status <gdipluspath.h>
AddLine(const PointF & pt1,const PointF & pt2)	Status <gdipluspath.h>
AddLine(INT x1,INT y1,INT x2,INT y2)	Status <gdipluspath.h>
AddLine(REAL x1,REAL y1,REAL x2,REAL y2)	Status <gdipluspath.h>
AddLines(const Point * points,INT count)	Status <gdipluspath.h>
AddLines(const PointF * points,INT count)	Status <gdipluspath.h>
AddLogContainer(HANDLE hLog,PULONGLONG pcbContainer,LPWSTR pwszContainerPath,LPVOID pReserved)WINBOOL WINAPI <clfsw32.h>
AddLogContainerSet(HANDLE hLog,USHORT cContainers,PULONGLONG pcbContainer,LPWSTR * rgwszContainerPath,PVOID Reserved)WINBOOL WINAPI <clfsw32.h>
AddMandatoryAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD MandatoryPolicy,PSID pLabelSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <oledb.h>
AddMember(TRUSTEE_W * pMembershipTrustee,TRUSTEE_W * pMemberTrustee)virtual HRESULT WINAPI <oledb.h>
AddMemberName(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddMemoryFont(const VOID * memory,INT length)__inline__ Status PrivateFontCollection::<gdiplusimpl.h>
AddMemoryFromParent(p, n)<portcls.h>
AddMenuItem(BSTR bstrItem,__LONG32 lPosition,__LONG32 * plCommand)virtual HRESULT WINAPI <msimcntl.h>
AddMenuItems(LPDATAOBJECT piDataObject,LPCONTEXTMENUCALLBACK piCallback,__LONG32 * pInsertionAllowed)virtual HRESULT WINAPI <mmc.h>
AddMetafileComment(const BYTE * data,UINT sizeData)	Status <gdiplusgraphics.h>
AddMonitor(LPSTR pName,DWORD Level,LPBYTE pMonitorInfo) WINBOOL WINAPI <winspool.h>
AddMonitorA(LPSTR pName,DWORD Level,LPBYTE pMonitorInfo) WINBOOL WINAPI <winspool.h>
AddMonitorW(LPWSTR pName,DWORD Level,LPBYTE pMonitorInfo) WINBOOL WINAPI <winspool.h>
AddNamespace(BSTR bstrNamespace,BSTR bstrUrn,LONG lFlags,VARIANT * pvarFactory)virtual HRESULT WINAPI <mshtmlc.h>
AddNameValuePairToSignatureWStr(LPWSTR Name,LPWSTR Value)virtual HRESULT WINAPI <xenroll.h>
AddNodeToList(BSTR bstrNodeNameIn)virtual HRESULT WINAPI <cluscfgwizard.h>
AddNonMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddNonMemberName(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddNtmsMediaType(HANDLE hSession,LPNTMS_GUID lpMediaTypeId,LPNTMS_GUID lpLibId) DWORD WINAPI <ntmsapi.h>
AddOperation(BSTR bstrOp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddOperation(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddPage(HPROPSHEETPAGE hPage)virtual HRESULT WINAPI <mmc.h>
AddPages(HWND hwndParent,LPFNADDPROPSHEETPAGE pfnAddPage,LPARAM lParam)virtual HRESULT WINAPI <netcon.h>
AddParticipant(BSTR bstrAddress,BSTR bstrName,IRTCParticipant ** ppParticipant)virtual HRESULT WINAPI <rtccore.h>
AddPath(const GraphicsPath * addingPath,BOOL connect)	Status <gdipluspath.h>
AddPenDataHRC(HRC,HPENDATA) int WINAPI <penwin.h>
AddPenInputHRC(HRC,LPPOINT,LPVOID,UINT,LPSTROKEINFO) int WINAPI <penwin.h>
AddPersistentiScsiDevice(PCHAR VolumePath) HRESULT WINAPI <iscsidsc.h>
AddPersistentiScsiDeviceA(PCHAR VolumePath) HRESULT WINAPI <iscsidsc.h>
AddPersistentiScsiDeviceW(PWCHAR VolumePath) HRESULT WINAPI <iscsidsc.h>
AddPie(const Rect & rect,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddPie(const RectF & rect,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddPie(INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddPie(REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status <gdipluspath.h>
AddPointsPenData(HPENDATA,LPPOINT,LPVOID,LPSTROKEINFO) HPENDATA WINAPI <penwin.h>
AddPolicyAdministrator(BSTR bstrAdmin,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddPolicyAdministratorName(BSTR bstrAdmin,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddPolicyReader(BSTR bstrReader,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddPolicyReaderName(BSTR bstrReader,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddPolygon(const Point * points,INT count)	Status <gdipluspath.h>
AddPolygon(const PointF * points,INT count)	Status <gdipluspath.h>
AddPort(LPSTR pName,HWND hWnd,LPSTR pMonitorName) WINBOOL WINAPI <winspool.h>
AddPortA(LPSTR pName,HWND hWnd,LPSTR pMonitorName) WINBOOL WINAPI <winspool.h>
AddPortFromParent(p, n)<portcls.h>
AddPortMapping(BSTR bstrName,UCHAR ucIPProtocol,USHORT usExternalPort,USHORT usInternalPort,DWORD dwOptions,BSTR bstrTargetNameOrIPAddress,ICS_TARGETTYPE eTargetType,INetSharingPortMapping ** ppMapping)virtual HRESULT WINAPI <netcon.h>
AddPortUI(PCWSTR pszServer,HWND hWnd,PCWSTR pszMonitorNameIn,PWSTR * ppszPortNameOut)<winsplp.h>
AddPortW(LPWSTR pName,HWND hWnd,LPWSTR pMonitorName) WINBOOL WINAPI <winspool.h>
AddPostProcessing(DBCOMMANDTREE ** ppRoot,WINBOOL fCopy)virtual HRESULT WINAPI <cmdtree.h>
AddPrimaryExtensionItems(LPUNKNOWN piExtension,LPDATAOBJECT piDataObject)virtual HRESULT WINAPI <mmc.h>
AddPrimaryPages(LPUNKNOWN lpUnknown,WINBOOL bCreateHandle,HWND hNotifyWindow,WINBOOL bScopePane)virtual HRESULT WINAPI <mmc.h>
AddPrinter(LPSTR pName,DWORD Level,LPBYTE pPrinter) HANDLE WINAPI <winspool.h>
AddPrinterA(LPSTR pName,DWORD Level,LPBYTE pPrinter) HANDLE WINAPI <winspool.h>
AddPrinterConnection(LPSTR pName) WINBOOL WINAPI <winspool.h>
AddPrinterConnection2(HWND hWnd,LPCSTR pszName,DWORD dwLevel,PVOID pConnectionInfo) WINBOOL <winspool.h>
AddPrinterConnection2A(HWND hWnd,LPCSTR pszName,DWORD dwLevel,PVOID pConnectionInfo) WINBOOL <winspool.h>
AddPrinterConnection2W(HWND hWnd,LPCWSTR pszName,DWORD dwLevel,PVOID pConnectionInfo) WINBOOL <winspool.h>
AddPrinterConnectionA(LPSTR pName) WINBOOL WINAPI <winspool.h>
AddPrinterConnectionW(LPWSTR pName) WINBOOL WINAPI <winspool.h>
AddPrinterDriver(LPSTR pName,DWORD Level,LPBYTE pDriverInfo) WINBOOL WINAPI <winspool.h>
AddPrinterDriverA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo) WINBOOL WINAPI <winspool.h>
AddPrinterDriverEx(LPSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags) WINBOOL WINAPI <winspool.h>
AddPrinterDriverExA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags) WINBOOL WINAPI <winspool.h>
AddPrinterDriverExW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags) WINBOOL WINAPI <winspool.h>
AddPrinterDriverW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo) WINBOOL WINAPI <winspool.h>
AddPrinterW(LPWSTR pName,DWORD Level,LPBYTE pPrinter) HANDLE WINAPI <winspool.h>
AddPrintProcessor(LPSTR pName,LPSTR pEnvironment,LPSTR pPathName,LPSTR pPrintProcessorName) WINBOOL WINAPI <winspool.h>
AddPrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPathName,LPSTR pPrintProcessorName) WINBOOL WINAPI <winspool.h>
AddPrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPathName,LPWSTR pPrintProcessorName) WINBOOL WINAPI <winspool.h>
AddPrintProvidorW(LPWSTR pName,DWORD level,LPBYTE pProvidorInfo) WINBOOL WINAPI <winspool.h>
AddProperty(HPROTOCOL hProtocol,LPPROPERTYINFO PropertyInfo) HPROPERTY WINAPI <sql_1.h>
AddProperty(LPWSTR pProp) void <sql_1.h>
AddPropertyItem(LONG lPropId,VARIANT varProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddPropertyName(LPCOLESTR pszPropName,DWORD dwFlags)virtual HRESULT WINAPI <mmcobj.h>
AddPropertySheetPage(LONG * hpage)virtual HRESULT WINAPI <cluadmex.h>
AddProtocol(LPCOLESTR pszMachineName,DWORD dwTransportId,DWORD dwProtocolId,HWND hWnd,DWORD dwFlags,IUnknown * pRouter,ULONG_PTR uReserved1)virtual HRESULT WINAPI <rrascfg.h>
AddRadiusServer(PCHAR Address) HRESULT WINAPI <iscsidsc.h>
AddRadiusServerA(PCHAR Address) HRESULT WINAPI <iscsidsc.h>
AddRadiusServerW(PWCHAR Address) HRESULT WINAPI <iscsidsc.h>
AddRectangle(const Rect & rect)	Status <gdipluspath.h>
AddRectangle(const RectF & rect)	Status <gdipluspath.h>
AddRectangles(const Rect * rects,INT count)	Status <gdipluspath.h>
AddRectangles(const RectF * rects,INT count)	Status <gdipluspath.h>
AddRef()virtual ULONG STDMETHODCALLTYPE <unknwnbase.h>
AddRef(void)virtual ULONG STDMETHODCALLTYPE <unknwnbase.h>
AddRefAccessor(HACCESSOR hAccessor,DBREFCOUNT * pcRefCount)virtual HRESULT WINAPI <oledb.h>
AddRefActCtx(HANDLE hActCtx) WINBASEAPI VOID WINAPI <winbase.h>
AddRefChapter(HCHAPTER hChapter,DBREFCOUNT * pcRefCount)virtual HRESULT WINAPI <oledb.h>
AddRefContext(PFIO_CONTEXT) FILEHC_EXPORT void WINAPI <filehc.h>
AddRefRows(DBCOUNTITEM cRows,const HROW rghRows[],DBREFCOUNT rgRefCounts[],DBROWSTATUS rgRowStatus[])virtual HRESULT WINAPI <oledb.h>
AddRelatedBodyPart(BSTR URL,BSTR Reference,CdoReferenceType ReferenceType,BSTR UserName,BSTR Password,IBodyPart ** ppBody)virtual HRESULT WINAPI <cdosys.h>
AddRequest(IBidiRequest * pRequest)virtual HRESULT WINAPI <bidispl.h>
AddResourceAttributeAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid,PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,PDWORD pReturnLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddResourceNode(ISClusNode * pNode)virtual HRESULT WINAPI <msclus.h>
Address32To64(LPADDRESS a32,LPADDRESS64 a64) static __inline void <psdk>
Address64To32(LPADDRESS64 a64,LPADDRESS a32) static __inline void <psdk>
ADDRESS_AND_SIZE_TO_SPAN_PAGES(_Va, _Size)<wdm.h>
AddressToString(LPSTR string,BYTE * lpAddress) LPSTR WINAPI <netmon.h>
AddressTypeToMacType(DWORD AddressType) DWORD WINAPI <netmon.h>
ADDRINFOT(ADDRINFO)typedef __MINGW_NAME_AW<ws2tcpip.h>
AddRoles(VARIANT varRoles,BSTR bstrScopeName)virtual HRESULT WINAPI <azroles.h>
AddScopedPolicyIDAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AddSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack) WINBASEAPI WINBOOL WINAPI <winbase.h>
AddSecurityPackage(LPSTR pszPackageName,PSECURITY_PACKAGE_OPTIONS pOptions)SECURITY_STATUS WINAPI <sspi.h>
AddSecurityPackageA(LPSTR pszPackageName,PSECURITY_PACKAGE_OPTIONS pOptions)SECURITY_STATUS WINAPI <sspi.h>
AddSecurityPackageW(LPWSTR pszPackageName,PSECURITY_PACKAGE_OPTIONS pOptions)SECURITY_STATUS WINAPI <sspi.h>
AddSegment(IDisplayPointer * pDispPointerStart,IDisplayPointer * pDispPointerEnd,IHTMLRenderStyle * pIRenderStyle,IHighlightSegment ** ppISegment)virtual HRESULT WINAPI <mshtmlc.h>
AddSegment(IMarkupPointer * pIStart,IMarkupPointer * pIEnd,ISegment ** ppISegmentAdded)virtual HRESULT WINAPI <mshtmlc.h>
AddSIDToBoundaryDescriptor(HANDLE * BoundaryDescriptor,PSID RequiredSid) WINBASEAPI WINBOOL WINAPI <namespaceapi.h>
AddStream(__LONG32 lMediaType,LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
AddString(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const Point & origin,const StringFormat * format)	Status <mmc.h>
AddString(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const PointF & origin,const StringFormat * format)	Status <mmc.h>
AddString(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const Rect & layoutRect,const StringFormat * format)	Status <mmc.h>
AddString(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const RectF & layoutRect,const StringFormat * format)	Status <mmc.h>
AddString(LPCOLESTR pszAdd,MMC_STRING_ID * pStringID)virtual HRESULT WINAPI <mmc.h>
AddStringSids(VARIANT varStringSids)virtual HRESULT WINAPI <azroles.h>
AddSubAllocateFromFromParent(p, n)<portcls.h>
AddTab(float tbPos,__LONG32 tbAlign,__LONG32 tbLeader)virtual HRESULT WINAPI <tom.h>
AddTag(BSTR bstrTagName,LONG lFlags)virtual HRESULT WINAPI <mshtmlc.h>
AddTail(ARG_TYPE newElement)DXLISTPOS CDXList<parser.h>
AddTail(CDXList * pNewList)void CDXList<parser.h>
AddTail(CHAR * sz) DWORD <parser.h>
AddTask(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddTask(BSTR bstrTask,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
AddThirdPartyExtensionItems(LPDATAOBJECT piDataObject)virtual HRESULT WINAPI <mmc.h>
AddToAvailable(VARIANT varContact)virtual HRESULT WINAPI <msimcntl.h>
AddToken(SQL_LEVEL_1_TOKEN & pTok) void <sql_1.h>
AddToken(SQL_LEVEL_1_TOKEN * pTok) void <sql_1.h>
AddUsersToEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_LIST pUsers) WINADVAPI DWORD WINAPI <winefs.h>
AddValue(__LONG32 lIndex,double dValue)virtual HRESULT WINAPI <control.h>
AddVectoredContinueHandler(ULONG First,PVECTORED_EXCEPTION_HANDLER Handler) WINBASEAPI PVOID WINAPI <errhandlingapi.h>
AddVectoredExceptionHandler(ULONG First,PVECTORED_EXCEPTION_HANDLER Handler)WINBASEAPI PVOID WINAPI <errhandlingapi.h>
AddView(PMMC_EXT_VIEW_DATA pExtViewData)virtual HRESULT WINAPI <mmc.h>
AddVirtualDiskParent(HANDLE VirtualDiskHandle,PCWSTR ParentPath)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
AddWatcher(BSTR bstrPresentityURI,BSTR bstrUserName,BSTR bstrData,VARIANT_BOOL fBlocked,VARIANT_BOOL fPersistent,IRTCWatcher ** ppWatcher)virtual HRESULT WINAPI <rtccore.h>
AddWatcherEx(BSTR bstrPresentityURI,BSTR bstrUserName,BSTR bstrData,RTC_WATCHER_STATE enState,VARIANT_BOOL fPersistent,RTC_ACE_SCOPE enScope,IRTCProfile * pProfile,__LONG32 lFlags,IRTCWatcher2 ** ppWatcher)virtual HRESULT WINAPI <rtccore.h>
AddWizard97Page(LONG * hpage)virtual HRESULT WINAPI <cluadmex.h>
AddWizardPage(LONG * hpage)virtual HRESULT WINAPI <cluadmex.h>
AddWordsHWL(HWL,LPSTR,UINT) int WINAPI <penwin.h>
AddWorkItem(LPCWSTR pwszTaskName,IScheduledWorkItem * pWorkItem)virtual HRESULT WINAPI <mstask.h>
ADJUST_FUA_FLAG(fdoExt)<classpnp.h>
AdjustableArrowCap()	virtual ~<gdipluslinecaps.h>
AdjustableArrowCap(BOOL isFilled)	Status SetFillState<gdipluslinecaps.h>
AdjustableArrowCap(const AdjustableArrowCap &)	<gdipluslinecaps.h>
AdjustableArrowCap(GpCustomLineCap * customLineCap,Status status)	<gdipluslinecaps.h>
AdjustableArrowCap(REAL height)	Status SetHeight<gdipluslinecaps.h>
AdjustableArrowCap(REAL height,REAL width,BOOL isFilled)	<gdipluslinecaps.h>
AdjustableArrowCap(REAL middleInset)	Status SetMiddleInset<gdipluslinecaps.h>
AdjustableArrowCap(REAL width)	Status SetWidth<gdipluslinecaps.h>
AdjustOperatorPrecedence(LPADDRESSTABLE AddressTable) extern LPADDRESSTABLE WINAPI <nmsupp.h>
AdjustOperatorPrecedence(LPADDRESSTABLE2 AddressTable) LPADDRESSTABLE2 WINAPI <nmsupp.h>
AdjustSystemTime(SYSTEMTIME * SystemTime,__int64 TimeDelta) __MINGW_EXTENSION SYSTEMTIME<netmon.h>
AdjustTokenGroups(HANDLE TokenHandle,WINBOOL ResetToDefault,PTOKEN_GROUPS NewState,DWORD BufferLength,PTOKEN_GROUPS PreviousState,PDWORD ReturnLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AdjustTokenPrivileges(HANDLE TokenHandle,WINBOOL DisableAllPrivileges,PTOKEN_PRIVILEGES NewState,DWORD BufferLength,PTOKEN_PRIVILEGES PreviousState,PDWORD ReturnLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AdjustWindowRect(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu) WINUSERAPI WINBOOL WINAPI <winuser.h>
AdjustWindowRectEx(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu,DWORD dwExStyle) WINUSERAPI WINBOOL WINAPI <winuser.h>
ADO_FIXED_LENGTH_ENTRY(Ordinal,DataType,Buffer,Status,Modify)<icrsint.h>
ADO_FIXED_LENGTH_ENTRY2(Ordinal,DataType,Buffer,Modify)<icrsint.h>
ADO_NUMERIC_ENTRY(Ordinal,DataType,Buffer,Precision,Scale,Status,Modify)<icrsint.h>
ADO_NUMERIC_ENTRY2(Ordinal,DataType,Buffer,Precision,Scale,Modify)<icrsint.h>
ADO_VARIABLE_LENGTH_ENTRY(Ordinal,DataType,Buffer,Size,Status,Length,Modify)<icrsint.h>
ADO_VARIABLE_LENGTH_ENTRY2(Ordinal,DataType,Buffer,Size,Status,Modify)<icrsint.h>
ADO_VARIABLE_LENGTH_ENTRY3(Ordinal,DataType,Buffer,Size,Length,Modify)<icrsint.h>
ADO_VARIABLE_LENGTH_ENTRY4(Ordinal,DataType,Buffer,Size,Modify)<icrsint.h>
ADsBuildEnumerator(IADsContainer * pADsContainer,IEnumVARIANT ** ppEnumVariant) HRESULT WINAPI <adshlp.h>
ADsBuildVarArrayInt(LPDWORD lpdwObjectTypes,DWORD dwObjectTypes,VARIANT * pVar) HRESULT WINAPI <adshlp.h>
ADsBuildVarArrayStr(LPWSTR * lppPathNames,DWORD dwPathNames,VARIANT * pVar) HRESULT WINAPI <adshlp.h>
ADsDecodeBinaryData(LPCWSTR szSrcData,PBYTE * ppbDestData,ULONG * pdwDestLen) HRESULT WINAPI <adshlp.h>
ADsEncodeBinaryData(PBYTE pbSrcData,DWORD dwSrcLen,LPWSTR * ppszDestData) HRESULT WINAPI <adshlp.h>
ADsEnumerateNext(IEnumVARIANT * pEnumVariant,ULONG cElements,VARIANT * pvar,ULONG * pcElementsFetched) HRESULT WINAPI <adshlp.h>
AdsFreeAdsValues(PADSVALUE pAdsValues,DWORD dwNumValues) void WINAPI <adshlp.h>
ADsFreeAllErrorRecords(VOID) VOID WINAPI <adshlp.h>
ADsFreeEnumerator(IEnumVARIANT * pEnumVariant) HRESULT WINAPI <adshlp.h>
ADsGetLastError(LPDWORD lpError,LPWSTR lpErrorBuf,DWORD dwErrorBufLen,LPWSTR lpNameBuf,DWORD dwNameBufLen) HRESULT WINAPI <adshlp.h>
ADsGetObject(LPCWSTR lpszPathName,REFIID riid,VOID ** ppObject) HRESULT WINAPI <adshlp.h>
ADSIGetIDsOfNames(REFIID riid,OLECHAR ** rgszNames,UINT cNames,LCID lcid,DISPID * rgdispid)virtual HRESULT WINAPI <iads.h>
ADSIGetTypeInfo(UINT itinfo,LCID lcid,ITypeInfo ** pptinfo)virtual HRESULT WINAPI <iads.h>
ADSIGetTypeInfoCount(UINT * pctinfo)virtual HRESULT WINAPI <iads.h>
ADSIInitializeDispatchManager(__LONG32 dwExtensionId)virtual HRESULT WINAPI <iads.h>
ADSIInitializeObject(BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved)virtual HRESULT WINAPI <iads.h>
ADSIInvoke(DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS * pdispparams,VARIANT * pvarResult,EXCEPINFO * pexcepinfo,UINT * puArgErr)virtual HRESULT WINAPI <iads.h>
ADSIReleaseObject(void)virtual HRESULT WINAPI <iads.h>
ADsOpenObject(LPCWSTR lpszPathName,LPCWSTR lpszUserName,LPCWSTR lpszPassword,DWORD dwReserved,REFIID riid,void ** ppObject) HRESULT WINAPI <adshlp.h>
ADsPropCheckIfWritable(const PWSTR pwzAttr,const PADS_ATTR_INFO pWritableAttrs) STDAPI_<adsprop.h>
ADsPropCreateNotifyObj(LPDATAOBJECT pAppThdDataObj,PWSTR pwzADsObjName,HWND * phNotifyObj) STDAPI <adsprop.h>
ADsPropGetInitInfo(HWND hNotifyObj,PADSPROPINITPARAMS pInitParams) STDAPI_<adsprop.h>
ADsPropSendErrorMessage(HWND hNotifyObj,PADSPROPERROR pError) STDAPI_<adsprop.h>
ADsPropSetHwnd(HWND hNotifyObj,HWND hPage) STDAPI_<adsprop.h>
ADsPropSetHwndWithTitle(HWND hNotifyObj,HWND hPage,PTSTR ptzTitle) STDAPI_<adsprop.h>
ADsPropShowErrorDialog(HWND hNotifyObj,HWND hPage) STDAPI_<adsprop.h>
ADsSetLastError(DWORD dwErr,LPCWSTR pszError,LPCWSTR pszProvider) VOID WINAPI <adshlp.h>
AdsTypeToPropVariant(PADSVALUE pAdsValues,DWORD dwNumValues,VARIANT * pVariant) HRESULT WINAPI <adshlp.h>
Advance(void)virtual HRESULT WINAPI <mshtmlc.h>
AdvancedDocumentProperties(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput) LONG WINAPI <winspool.h>
AdvancedDocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput) LONG WINAPI <winspool.h>
AdvancedDocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput) LONG WINAPI <winspool.h>
AdvanceLogBase(PVOID pvMarshal,PCLFS_LSN plsnBase,ULONG fFlags,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
AdvInstallFile(HWND hwnd,LPCSTR lpszSourceDir,LPCSTR lpszSourceFile,LPCSTR lpszDestDir,LPCSTR lpszDestFile,DWORD dwFlags,DWORD dwReserved) HRESULT WINAPI <advpub.h>
ADVINSTALLFILE(HWND hwnd,LPCSTR lpszSourceDir,LPCSTR lpszSourceFile,LPCSTR lpszDestDir,LPCSTR lpszDestFile,DWORD dwFlags,DWORD dwReserved) typedef HRESULT<advpub.h>
Advise(VARIANT vtimeMin,VARIANT vtimeMax,VARIANT vtimeInterval,DWORD dwFlags,ITimerSink * pTimerSink,DWORD * pdwCookie)virtual HRESULT WINAPI <ocmm.h>
AdviseNotify(IVMRSurfaceAllocatorNotify * lpIVMRSurfAllocNotify)virtual HRESULT WINAPI <strmif.h>
AdviseSurfaceAllocator(DWORD_PTR dwUserID,IVMRSurfaceAllocator * lpIVRMSurfaceAllocator)virtual HRESULT WINAPI <strmif.h>
adwTrailingFill(3) DWORD <aviriff.h>
adwTrailingFill(7) DWORD <aviriff.h>
AGENTAUDIOERROR(x)<agterr.h>
AGENTCTLERROR(x)<agterr.h>
AGENTERROR(x)<agterr.h>
AGENTEXTERROR(x)<agterr.h>
AgentPropertyChange(void)virtual HRESULT WINAPI <agtsvr.h>
AGENTPROVIDERERROR(x)<agterr.h>
AGENTREQERROR(x)<agterr.h>
AGENTVOICEERROR(x)<agterr.h>
AGENTWARNING(x)<agterr.h>
aIndex(2) AVISTDINDEX_ENTRY <aviriff.h>
aIndex(3) AVITIMEDINDEX_ENTRY <aviriff.h>
aIndex(7) AVITCDLINDEX_ENTRY <aviriff.h>
aIndex(LONG))))))))))))))))) TIMECODEDATA <aviriff.h>
ALERT_OTHER_INFO(x)<lmalert.h>
ALERT_VAR_DATA(p)<lmalert.h>
AlertSamplesAvailFunc(void) typedef HRESULT<timeprov.h>
ALIGN_CLUSPROP(count)<clusapi.h>
ALIGN_DOWN(size, type)<wdm.h>
ALIGN_DOWN_BY(size, align)<wdm.h>
ALIGN_DOWN_POINTER(ptr, type)<wdm.h>
ALIGN_DOWN_POINTER_BY(ptr, align)<wdm.h>
ALIGN_LENGTH(length)<rtinfo.h>
ALIGN_POINTER(ptr)<rtinfo.h>
ALIGN_UP(size, type)<wdm.h>
ALIGN_UP_BY(size, align)<wdm.h>
ALIGN_UP_POINTER(ptr, type)<wdm.h>
ALIGN_UP_POINTER_BY(ptr, align)<wdm.h>
AlignReservedLog(PVOID pvMarshal,ULONG cReservedRecords,LONGLONG rgcbReservation,PLONGLONG pcbAlignReservation)WINBOOL WINAPI <clfsw32.h>
AllEnumeration( SharedEnumeration | UserEnumeration ) <wcmconfig.h>
Alloc(BYTE ** ppBuffer,DWORD * pdwcbBuffer)virtual HRESULT WINAPI <strmif.h>
alloca(x)<malloc.h>
AllocADsMem(DWORD cb) LPVOID WINAPI <adshlp.h>
AllocADsStr(LPCWSTR pStr) LPWSTR WINAPI <adshlp.h>
AllocateAndGetTcpExTableFromStack(PVOID * ppTcpTable,WINBOOL bOrder,HANDLE hHeap,DWORD dwFlags,DWORD dwFamily) DWORD <iphlpapi.h>
AllocateAndGetUdpExTableFromStack(PVOID * ppUdpTable,WINBOOL bOrder,HANDLE hHeap,DWORD dwFlags,DWORD dwFamily) DWORD <iphlpapi.h>
AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,BYTE nSubAuthorityCount,DWORD nSubAuthority0,DWORD nSubAuthority1,DWORD nSubAuthority2,DWORD nSubAuthority3,DWORD nSubAuthority4,DWORD nSubAuthority5,DWORD nSubAuthority6,DWORD nSubAuthority7,PSID * pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AllocateArrays(INT capacity)	Status <gdiplustypes.h>
ALLOCATEBUFFER(ULONG cbSize,LPVOID * lppBuffer) typedef SCODE<wabdefs.h>
AllocateEventItem(SIZE_T nExtraBytes=0)MSPEVENTITEM<mspaddr.h>
AllocateLocallyUniqueId(PLUID Luid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
ALLOCATEMORE(ULONG cbSize,LPVOID lpObject,LPVOID * lppBuffer) typedef SCODE<wabdefs.h>
AllocateNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaPool,LPNTMS_GUID lpPartition,LPNTMS_GUID lpMediaId,DWORD dwOptions,DWORD dwTimeout,LPNTMS_ALLOCATION_INFORMATION lpAllocateInformation) DWORD WINAPI <ntmsapi.h>
AllocateSurface(DWORD_PTR dwUserID,VMRALLOCATIONINFO * lpAllocInfo,DWORD * lpdwActualBuffers,LPDIRECTDRAWSURFACE7 * lplpSurface)virtual HRESULT WINAPI <strmif.h>
AllocateUserPhysicalPages(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR PageArray) WINBASEAPI WINBOOL WINAPI <winbase.h>
AllocateUserPhysicalPagesNuma(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR PageArray,DWORD nndPreferred) WINBASEAPI WINBOOL WINAPI <winbase.h>
AllocBlobTable(DWORD dwNumBlobs) static __inline PBLOB_TABLE <netmon.h>
AllocConnections(Connections ** connections,UINT16 connectionsCount) NAPAPI HRESULT WINAPI <naputil.h>
AllocConsole(VOID) WINBASEAPI WINBOOL WINAPI <wincon.h>
AllocCountedString(CountedString ** countedString,CONST WCHAR * string) NAPAPI HRESULT WINAPI <naputil.h>
AllocFixupInfo(FixupInfo ** fixupInfo,UINT16 countResultCodes) NAPAPI HRESULT WINAPI <naputil.h>
AllocMBlobTable(DWORD dwNumBlobs) static __inline PMBLOB_TABLE <netmon.h>
AllocMemory(SIZE_T size) extern LPVOID WINAPI <nmsupp.h>
AllocObject(HOBJECTHEAP hObjectHeap) extern LPVOID WINAPI <nmsupp.h>
AllocReservedLog(PVOID pvMarshal,ULONG cReservedRecords,PLONGLONG pcbAdjustment)WINBOOL WINAPI <clfsw32.h>
AllocResource(const RESTYPID __MIDL_0018,RESID * __MIDL_0019)virtual HRESULT WINAPI <comsvcs.h>
AllowSetForegroundWindow(DWORD dwProcessId) WINUSERAPI WINBOOL WINAPI <winuser.h>
AllowViewResize(WINBOOL f)virtual HRESULT WINAPI <shdeprecated.h>
AlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn) WINGDIAPI WINBOOL WINAPI <wingdi.h>
AlterColumn(DBID * pTableId,DBID * pColumnId,DBCOLUMNDESCFLAGS dwColumnDescFlags,DBCOLUMNDESC * pColumnDesc)virtual HRESULT WINAPI <oledb.h>
AlterIndex(DBID * pTableId,DBID * pIndexId,DBID * pNewIndexId,ULONG cPropertySets,DBPROPSET rgPropertySets[])virtual HRESULT WINAPI <oledb.h>
ALTERNATE_ENTRY(Name)<kxia64.h>
AlterTable(DBID * pTableId,DBID * pNewTableId,ULONG cPropertySets,DBPROPSET rgPropertySets[])virtual HRESULT WINAPI <oledb.h>
AMGETERRORTEXTPROCA(HRESULT,char *,DWORD)typedef WINBOOL<errors.h>
AMGETERRORTEXTPROCW(HRESULT,WCHAR *,DWORD)typedef WINBOOL<errors.h>
AMGetErrorTextW(HRESULT,LPWSTR,DWORD)DWORD WINAPI <errors.h>
AnalogVideoMask_MCE_NTSC(AnalogVideo_NTSC_M | AnalogVideo_NTSC_M_J)<strmif.h>
AnalogVideoMask_MCE_PAL(AnalogVideo_PAL_B | AnalogVideo_PAL_D) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G) | AnalogVideo_PAL_G)<strmif.h>
AnalogVideoMask_MCE_SECAM(AnalogVideo_SECAM_B | AnalogVideo_SECAM_D)<strmif.h>
AnalyzeItem(LONG lFlags)virtual HRESULT WINAPI <wia.h>
AndExpression(LPEXPRESSION Expression,LPPATTERNMATCH Pattern) extern LPEXPRESSION WINAPI <nmsupp.h>
AngleArc(HDC hdc,int x,int y,DWORD r,FLOAT StartAngle,FLOAT SweepAngle) WINGDIAPI WINBOOL WINAPI <wingdi.h>
AngleChange(ULONG ulAngle)virtual HRESULT WINAPI <strmif.h>
Animate_Close(hwnd)<commctrl.h>
Animate_Create(hwndP,id,dwStyle,hInstance)<commctrl.h>
Animate_IsPlaying(hwnd)<commctrl.h>
Animate_Open(hwnd,szName)<commctrl.h>
Animate_OpenEx(hwnd,hInst,szName)<commctrl.h>
Animate_Play(hwnd,from,to,rep)<commctrl.h>
Animate_Seek(hwnd,frame)<commctrl.h>
Animate_Stop(hwnd)<commctrl.h>
AnimatePalette(HPALETTE hPal,UINT iStartIndex,UINT cEntries,CONST PALETTEENTRY * ppe) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ANIMATEPROC(HPENDATA,UINT,UINT,UINT *,LPARAM) typedef WINBOOL<penwin.h>
AnimateWindow(HWND hWnd,DWORD dwTime,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
ANIMATOR(void) typedef void<ftsiface.h>
Answer(void)virtual HRESULT WINAPI <tapi3if.h>
AnswerWithSessionDescription(BSTR bstrContentType,BSTR bstrSessionDescription)virtual HRESULT WINAPI <rtccore.h>
AnyPopup(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
APC_CALLBACK_FUNCTION(DWORD,PVOID,PVOID)typedef VOID<winnt.h>
ApExtractFlags(TypeFlags)<adtgen.h>
ApExtractType(TypeFlags)<adtgen.h>
API_SET_STRING(s)<apiset.h>
API_SET_STRING_U(s)<apiset.h>
API_SET_STRING_U_X(s)<apiset.h>
API_SET_STRING_U_Y(s)<apiset.h>
API_SET_STRING_X(s)<apiset.h>
ApiSetResolveToHost(PCAPI_SET_NAMESPACE_ARRAY ApiSetSchema,PCUNICODE_STRING FileNameIn,PCUNICODE_STRING ParentName,PBOOLEAN Resolved,PUNICODE_STRING HostBinary) NTSTATUS NTAPI <apiset.h>
AppCreate(LPCWSTR szMDPath,WINBOOL fInProc)virtual HRESULT WINAPI <iwamreg.h>
AppCreate(VARIANT_BOOL bSetInProcFlag)virtual HRESULT WINAPI <iwamreg.h>
AppCreate2(LONG lAppMode)virtual HRESULT WINAPI <iwamreg.h>
AppCreate2(LPCWSTR szMDPath,DWORD dwAppMode)virtual HRESULT WINAPI <iwamreg.h>
AppCreate3(LONG lAppMode,VARIANT bstrAppPooI,VARIANT bCreatePool)virtual HRESULT WINAPI <iiisext.h>
AppDelete(LPCWSTR szMDPath,WINBOOL fRecursive)virtual HRESULT WINAPI <iwamreg.h>
AppDelete(void)virtual HRESULT WINAPI <iwamreg.h>
AppDeleteRecoverable(LPCWSTR szMDPath,WINBOOL fRecursive)virtual HRESULT WINAPI <iwamreg.h>
AppDeleteRecursive(void)virtual HRESULT WINAPI <iiisext.h>
AppDisable(void)virtual HRESULT WINAPI <iiisext.h>
AppDisableRecursive(void)virtual HRESULT WINAPI <iiisext.h>
AppEnable(void)virtual HRESULT WINAPI <iiisext.h>
AppEnableRecursive(void)virtual HRESULT WINAPI <iiisext.h>
Append(CdbWorkspace & o) VOID <dxtmpl.h>
Append(const CDXArray & src)int CDXArray<dxtmpl.h>
AppendMenu(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
AppendMenuA(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
AppendMenuW(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
AppendPrinterNotifyInfoData(PPRINTER_NOTIFY_INFO pInfoDest,PPRINTER_NOTIFY_INFO_DATA pInfoDataSrc,DWORD fdwFlags)WINBOOL WINAPI <winsplp.h>
AppendRecord(BYTE byRefCtrl,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
AppendTailList(IN OUT PLIST_ENTRY ListHead,IN OUT PLIST_ENTRY ListToAppend)<wdm.h>
AppendToLog(BSTR bstrLogEntry)virtual HRESULT WINAPI <asptlb.h>
AppGetStatus(DWORD * pdwStatus)virtual HRESULT WINAPI <iwamreg.h>
AppGetStatus(LPCWSTR szMDPath,DWORD * pdwAppStatus)virtual HRESULT WINAPI <iwamreg.h>
AppGetStatus2(LONG * lpStatus)virtual HRESULT WINAPI <iiisext.h>
APPLET_PROC(HWND hwndCpl,UINT msg,LPARAM lParam1,LPARAM lParam2) typedef LONG<cpl.h>
APPLICATION_RECOVERY_CALLBACK(PVOID pvParameter) typedef DWORD<winbase.h>
ApplicationRecoveryFinished(WINBOOL bSuccess) WINBASEAPI VOID WINAPI <winbase.h>
ApplicationRecoveryInProgress(PBOOL pbCancelled) WINBASEAPI HRESULT WINAPI <winbase.h>
Apply(void)virtual HRESULT WINAPI <sdoias.h>
APPLY_CONTROL_TOKEN_FN(PCtxtHandle,PSecBufferDesc) typedef SECURITY_STATUS<sspi.h>
ApplyControlToken(PCtxtHandle phContext,PSecBufferDesc pInput) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
ApplyEffect(Bitmap ** inputs,INT numInputs,Effect * effect,RECT * ROI,RECT * outputRect,Bitmap ** output)	static Status <gdiplusheaders.h>
ApplyEffect(Effect * effect,RECT * ROI)	Status <gdiplusheaders.h>
ApplyPatchToFile(LPCSTR PatchFileName,LPCSTR OldFileName,LPCSTR NewFileName,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileA(LPCSTR PatchFileName,LPCSTR OldFileName,LPCSTR NewFileName,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileByBuffers(PBYTE PatchFileMapped,ULONG PatchFileSize,PBYTE OldFileMapped,ULONG OldFileSize,PBYTE * NewFileBuffer,ULONG NewFileBufferSize,ULONG * NewFileActualSize,FILETIME * NewFileTime,ULONG ApplyOptionFlags,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext)WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileByHandles(HANDLE PatchFileHandle,HANDLE OldFileHandle,HANDLE NewFileHandle,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileByHandlesEx(HANDLE PatchFileHandle,HANDLE OldFileHandle,HANDLE NewFileHandle,ULONG ApplyOptionFlags,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileEx(LPCSTR PatchFileName,LPCSTR OldFileName,LPCSTR NewFileName,ULONG ApplyOptionFlags,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileExA(LPCSTR PatchFileName,LPCSTR OldFileName,LPCSTR NewFileName,ULONG ApplyOptionFlags,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileExW(LPCWSTR PatchFileName,LPCWSTR OldFileName,LPCWSTR NewFileName,ULONG ApplyOptionFlags,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
ApplyPatchToFileW(LPCWSTR PatchFileName,LPCWSTR OldFileName,LPCWSTR NewFileName,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
ApplySnapshotVhdSet(HANDLE VirtualDiskHandle,const PAPPLY_SNAPSHOT_VHDSET_PARAMETERS Parameters,APPLY_SNAPSHOT_VHDSET_FLAG Flags)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
AppRecover(LPCWSTR szMDPath,WINBOOL fRecursive)virtual HRESULT WINAPI <iwamreg.h>
AppUnLoad(LPCWSTR szMDPath,WINBOOL fRecursive)virtual HRESULT WINAPI <iwamreg.h>
AppUnLoad(void)virtual HRESULT WINAPI <iwamreg.h>
AppUnLoadRecursive(void)virtual HRESULT WINAPI <iiisext.h>
Arc(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ARC_IS_BROADCAST(Address) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address)) (BOOLEAN)(!(Address))<afilter.h>
ARC_QUERY_FILTER_CLASSES(Filter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter) ((Filter)->CombinedPacketFilter)<afilter.h>
ARC_QUERY_PACKET_FILTER(Filter, NdisFilterHandle)<afilter.h>
ArcCreateFilter(IN struct _NDIS_MINIPORT_BLOCK * Miniport,IN UCHAR AdapterAddress,OUT PARC_FILTER * Filter)<afilter.h>
ArcDeleteFilter(IN PARC_FILTER Filter)<afilter.h>
ArcDeleteFilterOpenAdapter(IN PARC_FILTER Filter,IN NDIS_HANDLE NdisFilterHandle,IN PNDIS_REQUEST NdisRequest)<afilter.h>
ArcDestroyPacket(IN PARC_FILTER Filter,IN PARC_PACKET Packet)<afilter.h>
ArcFilterAdjust(IN PARC_FILTER Filter,IN NDIS_HANDLE NdisFilterHandle,IN PNDIS_REQUEST NdisRequest,IN UINT FilterClasses,IN BOOLEAN Set)<afilter.h>
ArcFilterDoIndication(IN PARC_FILTER Filter,IN PARC_PACKET Packet)<afilter.h>
ArcFilterDprIndicateReceive(IN PARC_FILTER Filter,IN PUCHAR pRawHeader,IN PUCHAR pData,IN UINT Length)<afilter.h>
ArcFilterDprIndicateReceiveComplete(IN PARC_FILTER Filter)<afilter.h>
ArcFilterTransferData(IN PARC_FILTER Filter,IN NDIS_HANDLE MacReceiveContext,IN UINT ByteOffset,IN UINT BytesToTransfer,OUT PNDIS_PACKET Packet,OUT PUINT BytesTransfered)<afilter.h>
ArcFreeNdisPacket(IN PARC_PACKET Packet)<afilter.h>
ArcNoteFilterOpenAdapter(IN PARC_FILTER Filter,IN NDIS_HANDLE NdisBindingHandle,OUT PNDIS_HANDLE NdisFilterHandle)<afilter.h>
ArcSegment(const D2D1_POINT_2F & point,const D2D1_SIZE_F & size,const FLOAT rotationAngle,D2D1_SWEEP_DIRECTION sweepDirection,D2D1_ARC_SIZE arcSize)D2D1FORCEINLINE D2D1_ARC_SEGMENT <d2d1helper.h>
ArcTo(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2) WINGDIAPI WINBOOL WINAPI <wingdi.h>
AreAllAccessesGranted(DWORD GrantedAccess,DWORD DesiredAccess) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AreAnyAccessesGranted(DWORD GrantedAccess,DWORD DesiredAccess) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
AreComponentsSelected()bool WINAPI <vswriter.h>
AreFileApisANSI(VOID) WINBASEAPI WINBOOL WINAPI <winbase.h>
arg(void *) typedef void RPC_ENTRY RPC_ADDRESS_CHANGE_FN<rpcdcep.h>
ARGPTR(rPtr)<kxia64.h>
ArgSize(T)<mapival.h>
ARGUMENT_PRESENT(ArgumentPointer)<ntdef.h>
ArrangeIconicWindows(HWND hWnd) WINUSERAPI UINT WINAPI <winuser.h>
ARRAYSIZE(a)<winnt.h>
As(ComPtr<U> * p)       HRESULT <client.h>
As(Details::ComPtrRef<ComPtr<U>> p)       HRESULT <client.h>
AsIID(REFIID riid,ComPtr<IUnknown> * p)       HRESULT <client.h>
ASM_CMPF_IL_ALL(ASM_CMPF_NAME | ASM_CMPF_VERSION) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN) | ASM_CMPF_PUBLIC_KEY_TOKEN)<fusion.h>
ASM_CMPF_IL_NO_VERSION(ASM_CMPF_NAME | ASM_CMPF_PUBLIC_KEY_TOKEN)<fusion.h>
ASM_CMPF_VERSION(ASM_CMPF_MAJOR_VERSION | ASM_CMPF_MINOR_VERSION)<fusion.h>
ASM_DISPLAYF_FULL(ASM_DISPLAYF_VERSION | ASM_DISPLAYF_CULTURE)<fusion.h>
ASN1_CloseDecoder(ASN1decoding_t pDecoderInfo) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1_CloseEncoder(ASN1encoding_t pEncoderInfo) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1_CloseEncoder2(ASN1encoding_t pEncoderInfo) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1_CloseModule(ASN1module_t pModule) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1_CreateDecoder(ASN1module_t pModule,ASN1decoding_t * ppDecoderInfo,ASN1octet_t * pbBuf,ASN1uint32_t cbBufSize,ASN1decoding_t pParent) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_CreateDecoderEx(ASN1module_t pModule,ASN1decoding_t * ppDecoderInfo,ASN1octet_t * pbBuf,ASN1uint32_t cbBufSize,ASN1decoding_t pParent,ASN1uint32_t dwFlags) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_CreateEncoder(ASN1module_t pModule,ASN1encoding_t * ppEncoderInfo,ASN1octet_t * pbBuf,ASN1uint32_t cbBufSize,ASN1encoding_t pParent) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_CreateModule(ASN1uint32_t nVersion,ASN1encodingrule_e eRule,ASN1uint32_t dwFlags,ASN1uint32_t cPDU,const ASN1GenericFun_t apfnEncoder[],const ASN1GenericFun_t apfnDecoder[],const ASN1FreeFun_t apfnFreeMemory[],const ASN1uint32_t acbStructSize[],ASN1magic_t nModuleName) extern ASN1_PUBLIC ASN1module_t WINAPI <msasn1.h>
ASN1_Decode(ASN1decoding_t pDecoderInfo,void ** ppDataStruct,ASN1uint32_t nPduNum,ASN1uint32_t dwFlags,ASN1octet_t * pbBuf,ASN1uint32_t cbBufSize) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_Encode(ASN1encoding_t pEncoderInfo,void * pDataStruct,ASN1uint32_t nPduNum,ASN1uint32_t dwFlags,ASN1octet_t * pbBuf,ASN1uint32_t cbBufSize) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_ERR_BADARGS(-1007)ASN1_ERR_CONSTRAINT<msasn1.h>
ASN1_ERR_BADPDU(-1007)ASN1_ERR_CONSTRAINT<msasn1.h>
ASN1_ERR_BADREAL(-1012)<msasn1.h>
ASN1_ERR_BADTAG(-1012)ASN1_ERR_BADREAL<msasn1.h>
ASN1_ERR_CHOICE(-1012)ASN1_ERR_BADREAL<msasn1.h>
ASN1_ERR_CONSTRAINT(-1007)<msasn1.h>
ASN1_ERR_CORRUPT(-1002)ASN1_SUCCESS<msasn1.h>
ASN1_ERR_EOD(-1002)ASN1_SUCCESS<msasn1.h>
ASN1_ERR_INTERNAL(-1002)ASN1_SUCCESS<msasn1.h>
ASN1_ERR_LARGE(-1002)ASN1_SUCCESS<msasn1.h>
ASN1_ERR_MEMORY(-1007)ASN1_ERR_CONSTRAINT<msasn1.h>
ASN1_ERR_NYI(-1052)ASN1_ERR_PDU_TYPE<msasn1.h>
ASN1_ERR_OVERFLOW(-1007)ASN1_ERR_CONSTRAINT<msasn1.h>
ASN1_ERR_PDU_TYPE(-1052)<msasn1.h>
ASN1_ERR_RULE(-1012)ASN1_ERR_BADREAL<msasn1.h>
ASN1_ERR_UTF8(-1012)ASN1_ERR_BADREAL<msasn1.h>
ASN1_FAILED(ret)<msasn1.h>
ASN1_FreeDecoded(ASN1decoding_t pDecoderInfo,void * pDataStruct,ASN1uint32_t nPduNum) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1_FreeEncoded(ASN1encoding_t pEncoderInfo,void * pBuf) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1_GetDecoderOption(ASN1decoding_t pDecoderInfo,ASN1optionparam_t * pOptParam) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_GetEncoderOption(ASN1encoding_t pEncoderInfo,ASN1optionparam_t * pOptParam) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_MAKE_VERSION(major,minor)<msasn1.h>
ASN1_SetDecoderOption(ASN1decoding_t pDecoderInfo,ASN1optionparam_t * pOptParam) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_SetEncoderOption(ASN1encoding_t pEncoderInfo,ASN1optionparam_t * pOptParam) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1_SUCCEEDED(ret)<msasn1.h>
ASN1_SUCCESS(-1002)<msasn1.h>
ASN1_WRN_EXTENDED(-1052)ASN1_ERR_PDU_TYPE<msasn1.h>
ASN1_WRN_NOEOD(-1052)ASN1_ERR_PDU_TYPE<msasn1.h>
ASN1BERDecBitString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1bitstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecBitString2(ASN1decoding_t dec,ASN1uint32_t tag,ASN1bitstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecBool(ASN1decoding_t dec,ASN1uint32_t tag,ASN1bool_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecChar16String(ASN1decoding_t dec,ASN1uint32_t tag,ASN1char16string_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecChar32String(ASN1decoding_t dec,ASN1uint32_t tag,ASN1char32string_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecCharacterString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1characterstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecCharString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1charstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecCheck(ASN1decoding_t dec,ASN1uint32_t len) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecDouble(ASN1decoding_t dec,ASN1uint32_t tag,double *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecEmbeddedPdv(ASN1decoding_t dec,ASN1uint32_t tag,ASN1embeddedpdv_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecEndOfContents(ASN1decoding_t dec,ASN1decoding_t dd,ASN1octet_t * di) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecEoid(ASN1decoding_t dec,ASN1uint32_t tag,ASN1encodedOID_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecExplicitTag(ASN1decoding_t dec,ASN1uint32_t tag,ASN1decoding_t * dd,ASN1octet_t ** di) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecExternal(ASN1decoding_t dec,ASN1uint32_t tag,ASN1external_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecFlush(ASN1decoding_t dec) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BerDecFun_t(ASN1decoding_t enc,ASN1uint32_t tag,void * data) typedef ASN1int32_t<msasn1.h>
ASN1BERDecGeneralizedTime(ASN1decoding_t dec,ASN1uint32_t tag,ASN1generalizedtime_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecLength(ASN1decoding_t dec,ASN1uint32_t * len,ASN1uint32_t * infinite) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecMultibyteString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1charstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecNotEndOfContents(ASN1decoding_t dec,ASN1octet_t * di) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecNull(ASN1decoding_t dec,ASN1uint32_t tag) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecObjectIdentifier(ASN1decoding_t dec,ASN1uint32_t tag,ASN1objectidentifier_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecObjectIdentifier2(ASN1decoding_t dec,ASN1uint32_t tag,ASN1objectidentifier2_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecOctetString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1octetstring_t * val) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecOctetString2(ASN1decoding_t dec,ASN1uint32_t tag,ASN1octetstring_t * val) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecOpenType(ASN1decoding_t dec,ASN1open_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecOpenType2(ASN1decoding_t dec,ASN1open_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecPeekTag(ASN1decoding_t dec,ASN1uint32_t * tag) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecS16Val(ASN1decoding_t dec,ASN1uint32_t tag,ASN1int16_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecS32Val(ASN1decoding_t dec,ASN1uint32_t tag,ASN1int32_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecS8Val(ASN1decoding_t dec,ASN1uint32_t tag,ASN1int8_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecSkip(ASN1decoding_t dec) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecSXVal(ASN1decoding_t dec,ASN1uint32_t tag,ASN1intx_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecTag(ASN1decoding_t dec,ASN1uint32_t tag,ASN1uint32_t * constructed) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecU16Val(ASN1decoding_t dec,ASN1uint32_t tag,ASN1uint16_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecU32Val(ASN1decoding_t dec,ASN1uint32_t tag,ASN1uint32_t * val) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecU8Val(ASN1decoding_t dec,ASN1uint32_t tag,ASN1uint8_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecUTCTime(ASN1decoding_t dec,ASN1uint32_t tag,ASN1utctime_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecUTF8String(ASN1decoding_t dec,ASN1uint32_t tag,ASN1wstring_t * val) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecZeroChar16String(ASN1decoding_t dec,ASN1uint32_t tag,ASN1ztchar16string_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecZeroChar32String(ASN1decoding_t dec,ASN1uint32_t tag,ASN1ztchar32string_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecZeroCharString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1ztcharstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDecZeroMultibyteString(ASN1decoding_t dec,ASN1uint32_t tag,ASN1ztcharstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BERDotVal2Eoid(ASN1encoding_t enc,char * pszDotVal,ASN1encodedOID_t * pOut) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncBitString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t,ASN1octet_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncBool(ASN1encoding_t enc,ASN1uint32_t tag,ASN1bool_t) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncChar16String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t,ASN1char16_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncChar32String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t,ASN1char32_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncCharacterString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1characterstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncCharString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t,ASN1char_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncCheck(ASN1encoding_t enc,ASN1uint32_t noctets) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncDouble(ASN1encoding_t enc,ASN1uint32_t tag,double) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncEmbeddedPdv(ASN1encoding_t enc,ASN1uint32_t tag,ASN1embeddedpdv_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncEndOfContents(ASN1encoding_t enc,ASN1uint32_t LengthOffset) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncEoid(ASN1encoding_t enc,ASN1uint32_t tag,ASN1encodedOID_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncExplicitTag(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t * pLengthOffset) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncExternal(ASN1encoding_t enc,ASN1uint32_t tag,ASN1external_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncFlush(ASN1encoding_t enc) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BerEncFun_t(ASN1encoding_t enc,ASN1uint32_t tag,void * data) typedef ASN1int32_t<msasn1.h>
ASN1BEREncGeneralizedTime(ASN1encoding_t enc,ASN1uint32_t tag,ASN1generalizedtime_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncLength(ASN1encoding_t enc,ASN1uint32_t len) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncMultibyteString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1charstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncNull(ASN1encoding_t enc,ASN1uint32_t tag) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncObjectIdentifier(ASN1encoding_t enc,ASN1uint32_t tag,ASN1objectidentifier_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncObjectIdentifier2(ASN1encoding_t enc,ASN1uint32_t tag,ASN1objectidentifier2_t * val) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncOctetString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1octet_t * val) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncOpenType(ASN1encoding_t enc,ASN1open_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncRemoveZeroBits(ASN1uint32_t *,ASN1octet_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncS32(ASN1encoding_t enc,ASN1uint32_t tag,ASN1int32_t) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncSX(ASN1encoding_t enc,ASN1uint32_t tag,ASN1intx_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncTag(ASN1encoding_t enc,ASN1uint32_t tag) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncU32(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncUTCTime(ASN1encoding_t enc,ASN1uint32_t tag,ASN1utctime_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncUTF8String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t length,WCHAR * value) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREncZeroMultibyteString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1ztcharstring_t) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREoid2DotVal(ASN1decoding_t dec,ASN1encodedOID_t * pIn,char ** ppszDotVal) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1BEREoid_free(ASN1encodedOID_t *) extern ASN1_PUBLIC void WINAPI <msber.h>
ASN1bitstring_cmp(ASN1bitstring_t *,ASN1bitstring_t *,int) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1bitstring_free(ASN1bitstring_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1CEREncBeginBlk(ASN1encoding_t enc,ASN1blocktype_e eBlkType,void ** ppBlk) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncBitString(ASN1encoding_t enc,ASN1uint32_t,ASN1uint32_t,ASN1octet_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncChar16String(ASN1encoding_t enc,ASN1uint32_t,ASN1uint32_t,ASN1char16_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncChar32String(ASN1encoding_t enc,ASN1uint32_t,ASN1uint32_t,ASN1char32_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncCharString(ASN1encoding_t enc,ASN1uint32_t,ASN1uint32_t,ASN1char_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncEndBlk(void * pBlk) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncFlushBlkElement(void * pBlk) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncGeneralizedTime(ASN1encoding_t enc,ASN1uint32_t,ASN1generalizedtime_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncMultibyteString(ASN1encoding_t enc,ASN1uint32_t,ASN1charstring_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncNewBlkElement(void * pBlk,ASN1encoding_t * enc2) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncOctetString(ASN1encoding_t enc,ASN1uint32_t,ASN1uint32_t,ASN1octet_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncUTCTime(ASN1encoding_t enc,ASN1uint32_t,ASN1utctime_t *) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1CEREncUTF8String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t length,WCHAR * value) __CRT_INLINE int WINAPI <msber.h>
ASN1CEREncZeroMultibyteString(ASN1encoding_t enc,ASN1uint32_t,ASN1ztcharstring_t) extern ASN1_PUBLIC int WINAPI <msber.h>
ASN1char16string_cmp(ASN1char16string_t *,ASN1char16string_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1char16string_free(ASN1char16string_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1char32string_cmp(ASN1char32string_t *,ASN1char32string_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1char32string_free(ASN1char32string_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1characterstring_free(ASN1characterstring_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1charstring_cmp(ASN1charstring_t *,ASN1charstring_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1charstring_free(ASN1charstring_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1DbgMemTrackDumpCurrent(ASN1uint32_t nModuleName) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1DecAlloc(ASN1decoding_t dec,ASN1uint32_t size) extern ASN1_PUBLIC void<msasn1.h>
ASN1DecRealloc(ASN1decoding_t dec,void * ptr,ASN1uint32_t size) extern ASN1_PUBLIC void<msasn1.h>
ASN1DecSetError(ASN1decoding_t dec,ASN1error_e err) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1DEREncBeginBlk(ASN1encoding_t enc,ASN1blocktype_e eBlkType,void ** ppBlk) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncBitString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1octet_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncChar16String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1char16_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncChar32String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1char32_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncCharString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1char_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncEndBlk(void * pBlk) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncFlushBlkElement(void * pBlk) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncGeneralizedTime(ASN1encoding_t enc,ASN1uint32_t tag,ASN1generalizedtime_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncMultibyteString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1charstring_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncNewBlkElement(void * pBlk,ASN1encoding_t * enc2) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncOctetString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1octet_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncUTCTime(ASN1encoding_t enc,ASN1uint32_t tag,ASN1utctime_t * val) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncUTF8String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t length,WCHAR * value) __CRT_INLINE int WINAPI <msber.h>
ASN1DEREncZeroMultibyteString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1ztcharstring_t val) __CRT_INLINE int WINAPI <msber.h>
ASN1embeddedpdv_free(ASN1embeddedpdv_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1EncSetError(ASN1encoding_t enc,ASN1error_e err) extern ASN1_PUBLIC ASN1error_e WINAPI <msasn1.h>
ASN1external_free(ASN1external_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1Free(void * ptr) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1FreeFun_t(void * data) typedef void<msasn1.h>
ASN1generalizedtime_cmp(ASN1generalizedtime_t *,ASN1generalizedtime_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1GenericFun_t(void) typedef void<msasn1.h>
ASN1intx2int32(ASN1intx_t * val) extern ASN1_PUBLIC ASN1int32_t WINAPI <msasn1.h>
ASN1intx2uint32(ASN1intx_t * val) extern ASN1_PUBLIC ASN1uint32_t WINAPI <msasn1.h>
ASN1intx_add(ASN1intx_t *,ASN1intx_t *,ASN1intx_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1intx_free(ASN1intx_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1intx_setuint32(ASN1intx_t * dst,ASN1uint32_t val) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1intx_sub(ASN1intx_t *,ASN1intx_t *,ASN1intx_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1intx_uoctets(ASN1intx_t *) extern ASN1_PUBLIC ASN1uint32_t WINAPI <msasn1.h>
ASN1intxisuint32(ASN1intx_t * val) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1objectidentifier2_cmp(ASN1objectidentifier2_t * v1,ASN1objectidentifier2_t * v2) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1objectidentifier_cmp(ASN1objectidentifier_t * v1,ASN1objectidentifier_t * v2) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1objectidentifier_cmp(ASN1objectidentifier_t *,ASN1objectidentifier_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1objectidentifier_free(ASN1objectidentifier_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1octetstring_cmp(ASN1octetstring_t *,ASN1octetstring_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1octetstring_free(ASN1octetstring_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1open_cmp(ASN1open_t *,ASN1open_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1open_free(ASN1open_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1PerDecFun_t(ASN1decoding_t enc,void * data) typedef ASN1int32_t<msasn1.h>
ASN1PerEncFun_t(ASN1encoding_t enc,void * data) typedef ASN1int32_t<msasn1.h>
ASN1real_free(ASN1real_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1uint32_uoctets(ASN1uint32_t) extern ASN1_PUBLIC ASN1uint32_t WINAPI <msasn1.h>
ASN1utctime_cmp(ASN1utctime_t *,ASN1utctime_t *) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1utf8string_free(ASN1wstring_t *) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1ztchar16string_cmp(ASN1ztchar16string_t,ASN1ztchar16string_t) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1ztchar16string_free(ASN1ztchar16string_t) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1ztchar32string_free(ASN1ztchar32string_t) extern ASN1_PUBLIC void WINAPI <msasn1.h>
ASN1ztcharstring_cmp(ASN1ztcharstring_t,ASN1ztcharstring_t) extern ASN1_PUBLIC int WINAPI <msasn1.h>
ASN1ztcharstring_free(ASN1ztcharstring_t) extern ASN1_PUBLIC void WINAPI <msasn1.h>
AspAppRestart(void)virtual HRESULT WINAPI <iiisext.h>
AssemblyIsUBM()<alink.h>
assert(_Expression)<assert.h>
ASSERT(exp)<wdm.h>
Assert(t)<mapidbg.h>
ASSERT_APC(Object)<wdm.h>
ASSERT_DEVICE_QUEUE(Object)<wdm.h>
ASSERT_DPC(Object)<wdm.h>
ASSERT_EVENT(E)<wdm.h>
ASSERT_FDO(x)<classpnp.h>
ASSERT_GATE(object)<wdm.h>
ASSERT_MUTANT(E)<wdm.h>
ASSERT_PDO(x)<classpnp.h>
ASSERT_QUEUE(Q)<ntifs.h>
ASSERT_SEMAPHORE(E)<wdm.h>
ASSERT_TIMER(E)<wdm.h>
ASSERTMSG(msg, exp)<wdm.h>
AssertSz(t,psz)<mapidbg.h>
AssertSz1(t,psz,a1)<mapidbg.h>
AssertSz2(t,psz,a1,a2)<mapidbg.h>
AssertSz3(t,psz,a1,a2,a3)<mapidbg.h>
AssertSz4(t,psz,a1,a2,a3,a4)<mapidbg.h>
AssertSz5(t,psz,a1,a2,a3,a4,a5)<mapidbg.h>
AssertSz6(t,psz,a1,a2,a3,a4,a5,a6)<mapidbg.h>
AssertSz7(t,psz,a1,a2,a3,a4,a5,a6,a7)<mapidbg.h>
AssertSz8(t,psz,a1,a2,a3,a4,a5,a6,a7,a8)<mapidbg.h>
AssertSz9(t,psz,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapidbg.h>
AssertValid()void CDXMap<dxtmpl.h>
Assign(BSTR s)inline void _bstr_t::Data_t::<comutil.h>
AssignFrom(IClusCfgCredentials * picccSourceIn)virtual HRESULT WINAPI <cluscfgserver.h>
AssignProcessToJobObject(HANDLE hJob,HANDLE hProcess) WINBASEAPI WINBOOL WINAPI <winbase.h>
AssignTo(IClusCfgCredentials * picccDestIn)virtual HRESULT WINAPI <cluscfgserver.h>
AssocCreate(CLSID clsid,REFIID riid,LPVOID * ppv) LWSTDAPI <shlwapi.h>
AssocCreateForClasses(const ASSOCIATIONELEMENT * rgClasses,ULONG cClasses,REFIID riid,void ** ppv) SHSTDAPI <shellapi.h>
AssocGetDetailsOfPropKey(IShellFolder * psf,PCUITEMID_CHILD pidl,const PROPERTYKEY * pkey,VARIANT * pv,WINBOOL * pfFoundPropKey) SHSTDAPI <shlobj.h>
AssocGetPerceivedType(LPCWSTR pszExt,PERCEIVED * ptype,PERCEIVEDFLAG * pflag,LPWSTR * ppszType) LWSTDAPI <shlwapi.h>
AssociateColorProfileWithDevice(PCSTR,PCSTR,PCSTR) WINBOOL WINAPI <icm.h>
AssociateColorProfileWithDeviceA(PCSTR,PCSTR,PCSTR) WINBOOL WINAPI <icm.h>
AssociateColorProfileWithDeviceW(PCWSTR,PCWSTR,PCWSTR) WINBOOL WINAPI <icm.h>
AssociateContext(HWND hWnd,HIMC hIME,HIMC * phPrev)virtual HRESULT WINAPI <mshtmlc.h>
AssociateContextEx(HWND hWnd,HIMC hIMC,DWORD dwFlags)virtual HRESULT WINAPI <mshtmlc.h>
AssociateContextWithName(PNAME_CACHE_CONTEXT pNameCache,LPBYTE lpbName,DWORD cbName,LPBYTE lpbData,DWORD cbData,PGENERIC_MAPPING pGenericMapping,PSECURITY_DESCRIPTOR pSecurityDescriptor,FIO_CONTEXT * pContext,WINBOOL fKeepReference) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
AssociateFile(HANDLE hFile) FILEHC_EXPORT PFIO_CONTEXT WINAPI <filehc.h>
AssociateFileEx(HANDLE hFile,WINBOOL fStoreWithDots,WINBOOL fStoredWithTerminatingDot) FILEHC_EXPORT PFIO_CONTEXT WINAPI <filehc.h>
AssociateRole(BSTR bstrRoleID)virtual HRESULT WINAPI <mtxadmin.h>
AssociateRoleByName(BSTR bstrRoleName)virtual HRESULT WINAPI <mtxadmin.h>
AssocIsDangerous(LPCWSTR pszAssoc) LWSTDAPI_<shlwapi.h>
AssocQueryKey(ASSOCF flags,ASSOCKEY key,LPCSTR pszAssoc,LPCSTR pszExtra,HKEY * phkeyOut) LWSTDAPI <shlwapi.h>
AssocQueryKeyA(ASSOCF flags,ASSOCKEY key,LPCSTR pszAssoc,LPCSTR pszExtra,HKEY * phkeyOut) LWSTDAPI <shlwapi.h>
AssocQueryKeyW(ASSOCF flags,ASSOCKEY key,LPCWSTR pszAssoc,LPCWSTR pszExtra,HKEY * phkeyOut) LWSTDAPI <shlwapi.h>
AssocQueryString(ASSOCF flags,ASSOCSTR str,LPCSTR pszAssoc,LPCSTR pszExtra,LPSTR pszOut,DWORD * pcchOut) LWSTDAPI <shlwapi.h>
AssocQueryStringA(ASSOCF flags,ASSOCSTR str,LPCSTR pszAssoc,LPCSTR pszExtra,LPSTR pszOut,DWORD * pcchOut) LWSTDAPI <shlwapi.h>
AssocQueryStringByKey(ASSOCF flags,ASSOCSTR str,HKEY hkAssoc,LPCSTR pszExtra,LPSTR pszOut,DWORD * pcchOut) LWSTDAPI <shlwapi.h>
AssocQueryStringByKeyA(ASSOCF flags,ASSOCSTR str,HKEY hkAssoc,LPCSTR pszExtra,LPSTR pszOut,DWORD * pcchOut) LWSTDAPI <shlwapi.h>
AssocQueryStringByKeyW(ASSOCF flags,ASSOCSTR str,HKEY hkAssoc,LPCWSTR pszExtra,LPWSTR pszOut,DWORD * pcchOut) LWSTDAPI <shlwapi.h>
AssocQueryStringW(ASSOCF flags,ASSOCSTR str,LPCWSTR pszAssoc,LPCWSTR pszExtra,LPWSTR pszOut,DWORD * pcchOut) LWSTDAPI <shlwapi.h>
ASTR_ALIGNED_STACK_COPY(d,s)<stralign.h>
ASYNC_COMPLETION(DRV_REQUESTID dwRequestID,LONG lResult) typedef void<tspi.h>
ASYNC_STGMEDIUM_UserFree(ULONG *,ASYNC_STGMEDIUM *)void            __RPC_USER <objidl.h>
ASYNC_STGMEDIUM_UserMarshal(ULONG *,unsigned char *,ASYNC_STGMEDIUM *)unsigned char<objidl.h>
ASYNC_STGMEDIUM_UserSize(ULONG *,ULONG,ASYNC_STGMEDIUM *)ULONG           __RPC_USER <objidl.h>
ASYNC_STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,ASYNC_STGMEDIUM *)unsigned char<objidl.h>
AsyncCall(IMTSCall * pCall)virtual HRESULT WINAPI <comsvcs.h>
AsyncEventStruct()<mspstrm.h>
AsynchronousCall(IServiceCall * pIServiceCall)virtual HRESULT WINAPI <comsvcs.h>
AsyncIMSAdminBaseSinkW_QueryInterface(This,riid,ppvObject) define <iadmw.h>
AsyncInstallDistributionUnit(LPCWSTR szDistUnit,LPCWSTR szTYPE,LPCWSTR szExt,DWORD dwFileVersionMS,DWORD dwFileVersionLS,LPCWSTR szURL,IBindCtx * pbc,LPVOID pvReserved,DWORD flags)STDAPI <urlmon.h>
AsyncMultiGraphEvent(LPVOID pVoid)DWORD WINAPI <mspcall.h>
ATL()virtual ~CProviderHelper<wmiatlprov.h>
ATL(__LONG32 lFlags,IWbemObjectSink ** ppResponseHandler)virtual HRESULT WINAPI QueryObjectSink<wmiatlprov.h>
ATL(const BSTR Class,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI CreateInstanceEnum<wmiatlprov.h>
ATL(const BSTR Class,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)HRESULT WINAPI DeleteClass<wmiatlprov.h>
ATL(const BSTR Class,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI DeleteClassAsync<wmiatlprov.h>
ATL(const BSTR Namespace,__LONG32 lFlags,IWbemContext * pCtx,IWbemServices ** ppWorkingNamespace,IWbemCallResult ** ppResult)HRESULT WINAPI OpenNamespace<wmiatlprov.h>
ATL(const BSTR ObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)HRESULT WINAPI DeleteInstance<wmiatlprov.h>
ATL(const BSTR ObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject ** ppObject,IWbemCallResult ** ppCallResult)HRESULT WINAPI GetObject<wmiatlprov.h>
ATL(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI ExecQuery<wmiatlprov.h>
ATL(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI ExecNotificationQueryAsync<wmiatlprov.h>
ATL(const BSTR strClass,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI CreateInstanceEnum<wmiatlprov.h>
ATL(const BSTR strClass,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI DeleteClass<wmiatlprov.h>
ATL(const BSTR strClass,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI CreateInstanceEnumAsync<wmiatlprov.h>
ATL(const BSTR strNamespace,__LONG32 lFlags,IWbemContext * pCtx,IWbemServices ** ppWorkingNamespace,IWbemCallResult ** ppResult)virtual HRESULT WINAPI OpenNamespace<wmiatlprov.h>
ATL(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI DeleteInstance<wmiatlprov.h>
ATL(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject ** ppObject,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI GetObject<wmiatlprov.h>
ATL(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI DeleteInstanceAsync<wmiatlprov.h>
ATL(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject * pInParams,IWbemClassObject ** ppOutParams,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI ExecMethod<wmiatlprov.h>
ATL(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject * pInParams,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI ExecMethodAsync<wmiatlprov.h>
ATL(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI ExecQuery<wmiatlprov.h>
ATL(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI ExecNotificationQueryAsync<wmiatlprov.h>
ATL(const BSTR strSuperclass,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI CreateClassEnum<wmiatlprov.h>
ATL(const BSTR Superclass,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI CreateClassEnum<wmiatlprov.h>
ATL(const BSTR Superclass,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI CreateClassEnumAsync<wmiatlprov.h>
ATL(const ULONG ulStatusCode,const BSTR bstrDescription,const BSTR bstrOperation,const BSTR bstrParameter,const BSTR bstrProviderName,IWbemClassObject ** ppErrorObject)HRESULT WINAPI ConstructErrorObject<wmiatlprov.h>
ATL(DWORD & a_Level)HRESULT GetCurrentImpersonationLevel<wmiatlprov.h>
ATL(IClassFactory * pParserFactory,const BSTR ObjectPath,const BSTR ClassName,ULONGLONG ullTest)HRESULT WINAPI CheckInstancePath<wmiatlprov.h>
ATL(IWbemClassObject * pInst,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI PutInstance<wmiatlprov.h>
ATL(IWbemClassObject * pInst,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI PutInstanceAsync<wmiatlprov.h>
ATL(IWbemClassObject * pInstanceToDelete,IWbemObjectSink * pSink)HRESULT WINAPI FireDeletionEvent<wmiatlprov.h>
ATL(IWbemClassObject * pNewInstance,IWbemObjectSink * pSink)HRESULT WINAPI FireCreationEvent<wmiatlprov.h>
ATL(IWbemClassObject * pObject,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI PutClass<wmiatlprov.h>
ATL(IWbemClassObject * pObject,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI PutClassAsync<wmiatlprov.h>
ATL(IWbemClassObject * pOldInstance,IWbemClassObject * pNewInstance,IWbemObjectSink * pSink)HRESULT WINAPI FireModificationEvent<wmiatlprov.h>
ATL(IWbemObjectSink * pSink)virtual HRESULT WINAPI CancelAsyncCall<wmiatlprov.h>
ATL(IWbemServices * pNamespace,IWbemContext * pCtx)CProviderHelper<wmiatlprov.h>
AtomicVirtualEvent(WINBOOL) VOID WINAPI <penwin.h>
ATT(_atp,_id)<tnef.h>
ATT_ID(_att)<tnef.h>
ATT_TYPE(_att)<tnef.h>
Attach(BSTR bstrComputerName)virtual HRESULT WINAPI <sdoias.h>
Attach(BSTR s)inline void _bstr_t::Data_t::<sdoias.h>
Attach(Interface * pInterface) void <sdoias.h>
Attach(Interface * pInterface,bool fAddRef) void <sdoias.h>
Attach(InterfaceType * other)       void <sdoias.h>
Attach(MMC_CONTROL_TYPE nType,LPUNKNOWN lpUnknown)virtual HRESULT WINAPI <sdoias.h>
Attach(VARIANT & varSrc)inline void _variant_t::<sdoias.h>
AttachByHandle(HSCARD hCard)virtual HRESULT WINAPI <scardssp.h>
AttachByReader(BSTR bstrReaderName,SCARD_SHARE_MODES ShareMode=EXCLUSIVE,SCARD_PROTOCOLS PrefProtocol=T0)virtual HRESULT WINAPI <scardssp.h>
AttachConsole(DWORD dwProcessId) WINBASEAPI WINBOOL WINAPI <wincon.h>
AttachCurrentSecurityContext(void)virtual HRESULT WINAPI <mqoai.h>
AttachCurrentSecurityContext2(void)virtual HRESULT WINAPI <mqoai.h>
AttachDocument(HWND hwnd,ITextDocument2 * pTextDoc)virtual HRESULT WINAPI <tom.h>
AttachFile(VARIANT Source,VARIANT FileName,VARIANT EncodingMethod)virtual HRESULT WINAPI <cdonts.h>
AttachMsgFilter(ITextMsgFilter * pMsgFilter)virtual HRESULT WINAPI <tom.h>
AttachMsgFilter(IUnknown * pFilter)virtual HRESULT WINAPI <tom.h>
ATTACHPROPERTIES(HFRAME,ULPBYTE,ULPBYTE,DWORD,DWORD,HPROTOCOL,DWORD,DWORD_PTR) typedef LPBYTE<netmon.h>
AttachPropertyInstance(HFRAME hFrame,HPROPERTY hProperty,DWORD Length,ULPVOID lpData,DWORD HelpID,DWORD Level,DWORD IFlags) WINBOOL WINAPI <netmon.h>
AttachPropertyInstanceEx(HFRAME hFrame,HPROPERTY hProperty,DWORD Length,ULPVOID lpData,DWORD ExLength,ULPVOID lpExData,DWORD HelpID,DWORD Level,DWORD IFlags) WINBOOL WINAPI <netmon.h>
AttachThreadInput(DWORD idAttach,DWORD idAttachTo,WINBOOL fAttach) WINUSERAPI WINBOOL WINAPI <winuser.h>
AttachURL(VARIANT Source,VARIANT ContentLocation,VARIANT ContentBase,VARIANT EncodingMethod)virtual HRESULT WINAPI <cdonts.h>
AttachVirtualDisk(HANDLE VirtualDiskHandle,PSECURITY_DESCRIPTOR SecurityDescriptor,ATTACH_VIRTUAL_DISK_FLAG Flags,ULONG ProviderSpecificFlags,PATTACH_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
AUDCLNT_ERR(n)<audioclient.h>
AUDCLNT_SUCCESS(n)<audioclient.h>
AudioStreamChange(ULONG ulAudio)virtual HRESULT WINAPI <strmif.h>
AuditComputeEffectivePolicyBySid(const PSID pSid,const GUID * pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION * ppAuditPolicy) BOOLEAN WINAPI <ntsecapi.h>
AuditComputeEffectivePolicyByToken(HANDLE hTokenHandle,const GUID * pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION * ppAuditPolicy) BOOLEAN WINAPI <ntsecapi.h>
AuditEnumerateCategories(GUID ** ppAuditCategoriesArray,PULONG pCountReturned) BOOLEAN WINAPI <ntsecapi.h>
AuditEnumeratePerUserPolicy(PPOLICY_AUDIT_SID_ARRAY * ppAuditSidArray) BOOLEAN WINAPI <ntsecapi.h>
AuditEnumerateSubCategories(const GUID * pAuditCategoryGuid,BOOLEAN bRetrieveAllSubCategories,GUID ** ppAuditSubCategoriesArray,PULONG pCountReturned) BOOLEAN WINAPI <ntsecapi.h>
AuditFree(PVOID Buffer) VOID WINAPI <ntsecapi.h>
AuditLookupCategoryGuidFromCategoryId(POLICY_AUDIT_EVENT_TYPE AuditCategoryId,GUID * pAuditCategoryGuid) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupCategoryIdFromCategoryGuid(const GUID * pAuditCategoryGuid,PPOLICY_AUDIT_EVENT_TYPE pAuditCategoryId) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupCategoryName(const GUID * pAuditCategoryGuid,LPSTR * ppszCategoryName) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupCategoryNameA(const GUID * pAuditCategoryGuid,LPSTR * ppszCategoryName) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupCategoryNameW(const GUID * pAuditCategoryGuid,LPWSTR * ppszCategoryName) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupSubCategoryName(const GUID * pAuditSubCategoryGuid,LPSTR * ppszSubCategoryName) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupSubCategoryNameA(const GUID * pAuditSubCategoryGuid,LPSTR * ppszSubCategoryName) BOOLEAN WINAPI <ntsecapi.h>
AuditLookupSubCategoryNameW(const GUID * pAuditSubCategoryGuid,LPWSTR * ppszSubCategoryName) BOOLEAN WINAPI <ntsecapi.h>
AuditQueryPerUserPolicy(const PSID pSid,const GUID * pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION * ppAuditPolicy) BOOLEAN WINAPI <ntsecapi.h>
AuditQuerySecurity(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR * ppSecurityDescriptor) BOOLEAN WINAPI <ntsecapi.h>
AuditQuerySystemPolicy(const GUID * pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION * ppAuditPolicy) BOOLEAN WINAPI <ntsecapi.h>
AuditSetPerUserPolicy(const PSID pSid,PCAUDIT_POLICY_INFORMATION pAuditPolicy,ULONG PolicyCount) BOOLEAN WINAPI <ntsecapi.h>
AuditSetSecurity(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) BOOLEAN WINAPI <ntsecapi.h>
AuditSetSystemPolicy(PCAUDIT_POLICY_INFORMATION pAuditPolicy,ULONG PolicyCount) BOOLEAN WINAPI <ntsecapi.h>
AuthzAccessCheck(DWORD Flags,AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PAUTHZ_ACCESS_REQUEST pRequest,AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent,PSECURITY_DESCRIPTOR pSecurityDescriptor,PSECURITY_DESCRIPTOR * OptionalSecurityDescriptorArray,DWORD OptionalSecurityDescriptorCount,PAUTHZ_ACCESS_REPLY pReply,PAUTHZ_ACCESS_CHECK_RESULTS_HANDLE phAccessCheckResults) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzAddSidsToContext(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PSID_AND_ATTRIBUTES Sids,DWORD SidCount,PSID_AND_ATTRIBUTES RestrictedSids,DWORD RestrictedSidCount,PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzCachedAccessCheck(DWORD Flags,AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults,PAUTHZ_ACCESS_REQUEST pRequest,AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent,PAUTHZ_ACCESS_REPLY pReply) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzEnumerateSecurityEventSources(DWORD dwFlags,PAUTHZ_SOURCE_SCHEMA_REGISTRATION Buffer,PDWORD pdwCount,PDWORD pdwLength) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzEvaluateSacl(AUTHZ_CLIENT_CONTEXT_HANDLE AuthzClientContext,PAUTHZ_ACCESS_REQUEST pRequest,PACL Sacl,ACCESS_MASK GrantedAccess,WINBOOL AccessGranted,PBOOL pbGenerateAudit) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzFreeAuditEvent(AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzFreeCentralAccessPolicyCache() AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzFreeContext(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzFreeHandle(AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzFreeResourceManager(AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzGetInformationFromContext(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,AUTHZ_CONTEXT_INFORMATION_CLASS InfoClass,DWORD BufferSize,PDWORD pSizeRequired,PVOID Buffer) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeCompoundContext(AUTHZ_CLIENT_CONTEXT_HANDLE UserContext,AUTHZ_CLIENT_CONTEXT_HANDLE DeviceContext,PAUTHZ_CLIENT_CONTEXT_HANDLE phCompoundContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeContextFromAuthzContext(DWORD Flags,AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PLARGE_INTEGER pExpirationTime,LUID Identifier,PVOID DynamicGroupArgs,PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeContextFromSid(DWORD Flags,PSID UserSid,AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager,PLARGE_INTEGER pExpirationTime,LUID Identifier,PVOID DynamicGroupArgs,PAUTHZ_CLIENT_CONTEXT_HANDLE phAuthzClientContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeContextFromToken(DWORD Flags,HANDLE TokenHandle,AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager,PLARGE_INTEGER pExpirationTime,LUID Identifier,PVOID DynamicGroupArgs,PAUTHZ_CLIENT_CONTEXT_HANDLE phAuthzClientContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeObjectAccessAuditEvent(DWORD Flags,AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType,PWSTR szOperationType,PWSTR szObjectType,PWSTR szObjectName,PWSTR szAdditionalInfo,PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent,DWORD dwAdditionalParameterCount,...) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeObjectAccessAuditEvent2(DWORD Flags,AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType,PWSTR szOperationType,PWSTR szObjectType,PWSTR szObjectName,PWSTR szAdditionalInfo,PWSTR szAdditionalInfo2,PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent,DWORD dwAdditionalParameterCount,...) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeRemoteResourceManager(PAUTHZ_RPC_INIT_INFO_CLIENT pRpcInitInfo,PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeResourceManager(DWORD Flags,PFN_AUTHZ_DYNAMIC_ACCESS_CHECK pfnDynamicAccessCheck,PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS pfnComputeDynamicGroups,PFN_AUTHZ_FREE_DYNAMIC_GROUPS pfnFreeDynamicGroups,PCWSTR szResourceManagerName,PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInitializeResourceManagerEx(DWORD Flags,PAUTHZ_INIT_INFO pAuthzInitInfo,PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzInstallSecurityEventSource(DWORD dwFlags,PAUTHZ_SOURCE_SCHEMA_REGISTRATION pRegistration) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzModifyClaims(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,AUTHZ_CONTEXT_INFORMATION_CLASS ClaimClass,PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pClaimOperations,PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pClaims) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzModifySecurityAttributes(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pOperations,PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pAttributes) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzModifySids(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,AUTHZ_CONTEXT_INFORMATION_CLASS SidClass,PAUTHZ_SID_OPERATION pSidOperations,PTOKEN_GROUPS pSids) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzOpenObjectAudit(DWORD Flags,AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PAUTHZ_ACCESS_REQUEST pRequest,AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent,PSECURITY_DESCRIPTOR pSecurityDescriptor,PSECURITY_DESCRIPTOR * OptionalSecurityDescriptorArray,DWORD OptionalSecurityDescriptorCount,PAUTHZ_ACCESS_REPLY pReply) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzRegisterCapChangeNotification(PAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE phCapChangeSubscription,LPTHREAD_START_ROUTINE pfnCapChangeCallback,PVOID pCallbackContext) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzRegisterSecurityEventSource(DWORD dwFlags,PCWSTR szEventSourceName,PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzReportSecurityEvent(DWORD dwFlags,AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider,DWORD dwAuditId,PSID pUserSid,DWORD dwCount,...) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzReportSecurityEventFromParams(DWORD dwFlags,AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider,DWORD dwAuditId,PSID pUserSid,PAUDIT_PARAMS pParams) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzSetAppContainerInformation(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PSID pAppContainerSid,DWORD CapabilityCount,PSID_AND_ATTRIBUTES pCapabilitySids) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzUninstallSecurityEventSource(DWORD dwFlags,PCWSTR szEventSourceName) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzUnregisterCapChangeNotification(AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE hCapChangeSubscription) AUTHZAPI WINBOOL WINAPI <authz.h>
AuthzUnregisterSecurityEventSource(DWORD dwFlags,PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider) AUTHZAPI WINBOOL WINAPI <authz.h>
AutoAttach(REFGUID guidPort,DWORD dwPid,AUTOATTACH_PROGRAM_TYPE dwProgramType,DWORD dwProgramId,LPCWSTR pszSessionId)virtual HRESULT WINAPI <dbgautoattach.h>
AutoCorrectProc(LANGID langid,const WCHAR * pszBefore,WCHAR * pszAfter,LONG cchAfter,LONG * pcchReplaced) typedef int<richedit.h>
AutoTune(LONG lChannel,LONG * plFoundSignal)virtual HRESULT WINAPI <strmif.h>
AUX_CTL_CODE()()()
AUX_CTL_CODE(subcode, iomethod, access)<ntddsnd.h>
AUX_SETCOLOR(x,y)<glaux.h>
AUX_WIND_HAS_ACCUM(x)<glaux.h>
AUX_WIND_HAS_ALPHA(x)<glaux.h>
AUX_WIND_HAS_DEPTH(x)<glaux.h>
AUX_WIND_HAS_STENCIL(x)<glaux.h>
AUX_WIND_IS_DIRECT(x)<glaux.h>
AUX_WIND_IS_DOUBLE(x)<glaux.h>
AUX_WIND_IS_INDEX(x)<glaux.h>
AUX_WIND_IS_INDIRECT(x)<glaux.h>
AUX_WIND_IS_RGB(x)<glaux.h>
AUX_WIND_IS_SINGLE(x)<glaux.h>
AUX_WIND_USES_FIXED_332_PAL(x)<glaux.h>
AUXEXPOSEPROC(int,int)typedef void<glaux.h>
auxGetDevCaps(UINT_PTR uDeviceID,LPAUXCAPSA pac,UINT cbac) WINMMAPI MMRESULT WINAPI <mmsystem.h>
auxGetDevCapsA(UINT_PTR uDeviceID,LPAUXCAPSA pac,UINT cbac) WINMMAPI MMRESULT WINAPI <mmsystem.h>
auxGetDevCapsW(UINT_PTR uDeviceID,LPAUXCAPSW pac,UINT cbac) WINMMAPI MMRESULT WINAPI <mmsystem.h>
auxGetVolume(UINT uDeviceID,LPDWORD pdwVolume) WINMMAPI MMRESULT WINAPI <mmsystem.h>
AUXIDLEPROC(void)typedef void<glaux.h>
AUXKEYPROC(void)typedef void<glaux.h>
AUXMAINPROC(void)typedef void<glaux.h>
AUXMOUSEPROC(AUX_EVENTREC *)typedef void<glaux.h>
auxOutMessage(UINT uDeviceID,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2) WINMMAPI MMRESULT WINAPI <mmsystem.h>
AUXRESHAPEPROC(GLsizei,GLsizei)typedef void<glaux.h>
auxSetVolume(UINT uDeviceID,DWORD dwVolume) WINMMAPI MMRESULT WINAPI <mmsystem.h>
AuxUlibInitialize(VOID) WINBOOL WINAPI <aux_ulib.h>
AuxUlibIsDLLSynchronizationHeld(PBOOL SynchronizationHeld) WINBOOL WINAPI <aux_ulib.h>
AuxUlibSetSystemFileCacheSize(SIZE_T MinimumFileCacheSize,SIZE_T MaximumFileCacheSize,DWORD Flags) WINBOOL WINAPI <aux_ulib.h>
AVIBuildFilter(LPSTR lpszFilter,LONG cbFilter,WINBOOL fSaving) STDAPI <vfw.h>
AVIBuildFilterA(LPSTR lpszFilter,LONG cbFilter,WINBOOL fSaving) STDAPI <vfw.h>
AVIBuildFilterW(LPWSTR lpszFilter,LONG cbFilter,WINBOOL fSaving) STDAPI <vfw.h>
AVICapSM(hwnd,m,w,l)<vfw.h>
AVIClearClipboard(void) STDAPI <vfw.h>
AVIFileAddRef(PAVIFILE pfile) STDAPI_<vfw.h>
AVIFileCreateStream(PAVIFILE pfile,PAVISTREAM * ppavi,AVISTREAMINFOA * psi) STDAPI <vfw.h>
AVIFileCreateStreamA(PAVIFILE pfile,PAVISTREAM * ppavi,AVISTREAMINFOA * psi) STDAPI <vfw.h>
AVIFileCreateStreamW(PAVIFILE pfile,PAVISTREAM * ppavi,AVISTREAMINFOW * psi) STDAPI <vfw.h>
AVIFileEndRecord(PAVIFILE pfile) STDAPI <vfw.h>
AVIFileExit(void) STDAPI_<vfw.h>
AVIFileGetStream(PAVIFILE pfile,PAVISTREAM * ppavi,DWORD fccType,LONG lParam) STDAPI <vfw.h>
AVIFileInfo(PAVIFILE pfile,LPAVIFILEINFOA pfi,LONG lSize) STDAPI <vfw.h>
AVIFileInfoA(PAVIFILE pfile,LPAVIFILEINFOA pfi,LONG lSize) STDAPI <vfw.h>
AVIFileInfoW(PAVIFILE pfile,LPAVIFILEINFOW pfi,LONG lSize) STDAPI <vfw.h>
AVIFileInit(void) STDAPI_<vfw.h>
AVIFileOpen(PAVIFILE * ppfile,LPCSTR szFile,UINT uMode,LPCLSID lpHandler) STDAPI <vfw.h>
AVIFileOpenA(PAVIFILE * ppfile,LPCSTR szFile,UINT uMode,LPCLSID lpHandler) STDAPI <vfw.h>
AVIFileOpenW(PAVIFILE * ppfile,LPCWSTR szFile,UINT uMode,LPCLSID lpHandler) STDAPI <vfw.h>
AVIFileReadData(PAVIFILE pfile,DWORD ckid,LPVOID lpData,LONG * lpcbData) STDAPI <vfw.h>
AVIFileRelease(PAVIFILE pfile) STDAPI_<vfw.h>
AVIFileWriteData(PAVIFILE pfile,DWORD ckid,LPVOID lpData,LONG cbData) STDAPI <vfw.h>
AVIGetFromClipboard(PAVIFILE * lppf) STDAPI <vfw.h>
AVIMakeCompressedStream(PAVISTREAM * ppsCompressed,PAVISTREAM ppsSource,AVICOMPRESSOPTIONS * lpOptions,CLSID * pclsidHandler) STDAPI <vfw.h>
AVIMakeFileFromStreams(PAVIFILE * ppfile,int nStreams,PAVISTREAM * papStreams) STDAPI <vfw.h>
AVIMakeStreamFromClipboard(UINT cfFormat,HANDLE hGlobal,PAVISTREAM * ppstream) STDAPI <vfw.h>
AVIPutFileOnClipboard(PAVIFILE pf) STDAPI <vfw.h>
AVISave(LPCSTR szFile,CLSID * pclsidHandler,AVISAVECALLBACK lpfnCallback,int nStreams,PAVISTREAM pfile,LPAVICOMPRESSOPTIONS lpOptions,...) EXTERN_C HRESULT CDECL <vfw.h>
AVISaveA(LPCSTR szFile,CLSID * pclsidHandler,AVISAVECALLBACK lpfnCallback,int nStreams,PAVISTREAM pfile,LPAVICOMPRESSOPTIONS lpOptions,...) EXTERN_C HRESULT CDECL <vfw.h>
AVISAVECALLBACK(int) typedef WINBOOL<vfw.h>
AVISaveOptions(HWND hwnd,UINT uiFlags,int nStreams,PAVISTREAM * ppavi,LPAVICOMPRESSOPTIONS * plpOptions) STDAPI_<vfw.h>
AVISaveOptionsFree(int nStreams,LPAVICOMPRESSOPTIONS * plpOptions) STDAPI <vfw.h>
AVISaveV(LPCSTR szFile,CLSID * pclsidHandler,AVISAVECALLBACK lpfnCallback,int nStreams,PAVISTREAM * ppavi,LPAVICOMPRESSOPTIONS * plpOptions) STDAPI <vfw.h>
AVISaveVA(LPCSTR szFile,CLSID * pclsidHandler,AVISAVECALLBACK lpfnCallback,int nStreams,PAVISTREAM * ppavi,LPAVICOMPRESSOPTIONS * plpOptions) STDAPI <vfw.h>
AVISaveVW(LPCWSTR szFile,CLSID * pclsidHandler,AVISAVECALLBACK lpfnCallback,int nStreams,PAVISTREAM * ppavi,LPAVICOMPRESSOPTIONS * plpOptions) STDAPI <vfw.h>
AVISaveW(LPCWSTR szFile,CLSID * pclsidHandler,AVISAVECALLBACK lpfnCallback,int nStreams,PAVISTREAM pfile,LPAVICOMPRESSOPTIONS lpOptions,...) EXTERN_C HRESULT CDECL <vfw.h>
AVIStreamAddRef(PAVISTREAM pavi) STDAPI_<vfw.h>
AVIStreamBeginStreaming(PAVISTREAM pavi,LONG lStart,LONG lEnd,LONG lRate) STDAPI <vfw.h>
AVIStreamCreate(PAVISTREAM * ppavi,LONG lParam1,LONG lParam2,CLSID * pclsidHandler) STDAPI <vfw.h>
AVIStreamDataSize(pavi,fcc,plSize)<vfw.h>
AVIStreamEnd(pavi)<vfw.h>
AVIStreamEndStreaming(PAVISTREAM pavi) STDAPI <vfw.h>
AVIStreamEndTime(pavi)<vfw.h>
AVIStreamFindSample(PAVISTREAM pavi,LONG lPos,LONG lFlags) STDAPI_<vfw.h>
AVIStreamFormatSize(pavi,lPos,plSize)<vfw.h>
AVIStreamGetFrame(PGETFRAME pg,LONG lPos) STDAPI_<vfw.h>
AVIStreamGetFrameClose(PGETFRAME pg) STDAPI <vfw.h>
AVIStreamGetFrameOpen(PAVISTREAM pavi,LPBITMAPINFOHEADER lpbiWanted) STDAPI_<vfw.h>
AVIStreamInfo(PAVISTREAM pavi,LPAVISTREAMINFOA psi,LONG lSize) STDAPI <vfw.h>
AVIStreamInfoA(PAVISTREAM pavi,LPAVISTREAMINFOA psi,LONG lSize) STDAPI <vfw.h>
AVIStreamInfoW(PAVISTREAM pavi,LPAVISTREAMINFOW psi,LONG lSize) STDAPI <vfw.h>
AVIStreamIsKeyFrame(pavi,l)<vfw.h>
AVIStreamLength(PAVISTREAM pavi) STDAPI_<vfw.h>
AVIStreamLengthTime(pavi)<vfw.h>
AVIStreamNearestKeyFrame(pavi,l)<vfw.h>
AVIStreamNearestKeyFrameTime(pavi,t)<vfw.h>
AVIStreamNearestSample(pavi,l)<vfw.h>
AVIStreamNearestSampleTime(pavi,t)<vfw.h>
AVIStreamNextKeyFrame(pavi,l)<vfw.h>
AVIStreamNextKeyFrameTime(pavi,t)<vfw.h>
AVIStreamNextSample(pavi,l)<vfw.h>
AVIStreamNextSampleTime(pavi,t)<vfw.h>
AVIStreamOpenFromFile(PAVISTREAM * ppavi,LPCSTR szFile,DWORD fccType,LONG lParam,UINT mode,CLSID * pclsidHandler) STDAPI <vfw.h>
AVIStreamOpenFromFileA(PAVISTREAM * ppavi,LPCSTR szFile,DWORD fccType,LONG lParam,UINT mode,CLSID * pclsidHandler) STDAPI <vfw.h>
AVIStreamOpenFromFileW(PAVISTREAM * ppavi,LPCWSTR szFile,DWORD fccType,LONG lParam,UINT mode,CLSID * pclsidHandler) STDAPI <vfw.h>
AVIStreamPrevKeyFrame(pavi,l)<vfw.h>
AVIStreamPrevKeyFrameTime(pavi,t)<vfw.h>
AVIStreamPrevSample(pavi,l)<vfw.h>
AVIStreamPrevSampleTime(pavi,t)<vfw.h>
AVIStreamRead(PAVISTREAM pavi,LONG lStart,LONG lSamples,LPVOID lpBuffer,LONG cbBuffer,LONG * plBytes,LONG * plSamples) STDAPI <vfw.h>
AVIStreamReadData(PAVISTREAM pavi,DWORD fcc,LPVOID lp,LONG * lpcb) STDAPI <vfw.h>
AVIStreamReadFormat(PAVISTREAM pavi,LONG lPos,LPVOID lpFormat,LONG * lpcbFormat) STDAPI <vfw.h>
AVIStreamRelease(PAVISTREAM pavi) STDAPI_<vfw.h>
AVIStreamSampleSize(pavi,lPos,plSize)<vfw.h>
AVIStreamSampleToSample(pavi1,pavi2,l)<vfw.h>
AVIStreamSampleToTime(PAVISTREAM pavi,LONG lSample) STDAPI_<vfw.h>
AVIStreamSetFormat(PAVISTREAM pavi,LONG lPos,LPVOID lpFormat,LONG cbFormat) STDAPI <vfw.h>
AVIStreamStart(PAVISTREAM pavi) STDAPI_<vfw.h>
AVIStreamStartTime(pavi)<vfw.h>
AVIStreamTimeToSample(PAVISTREAM pavi,LONG lTime) STDAPI_<vfw.h>
AVIStreamWrite(PAVISTREAM pavi,LONG lStart,LONG lSamples,LPVOID lpBuffer,LONG cbBuffer,DWORD dwFlags,LONG * plSampWritten,LONG * plBytesWritten) STDAPI <vfw.h>
AVIStreamWriteData(PAVISTREAM pavi,DWORD fcc,LPVOID lp,LONG cb) STDAPI <vfw.h>
aviTWOCC(ch0,ch1)<vfw.h>
AvQuerySystemResponsiveness(HANDLE AvrtHandle,PULONG SystemResponsivenessValue) WINBOOL WINAPI <avrt.h>
AvRevertMmThreadCharacteristics(HANDLE AvrtHandle) WINBOOL WINAPI <avrt.h>
AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK(PAVRF_HANDLE_OPERATION HandleOperation,PVOID EnumerationContext,PULONG EnumerationLevel) typedef ULONG<avrfsdk.h>
AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK(PAVRF_HEAP_ALLOCATION HeapAllocation,PVOID EnumerationContext,PULONG EnumerationLevel) typedef ULONG<avrfsdk.h>
AVRF_RESOURCE_ENUMERATE_CALLBACK(PVOID ResourceDescription,PVOID EnumerationContext,PULONG EnumerationLevel) typedef ULONG<avrfsdk.h>
AvRtCreateThreadOrderingGroup(PHANDLE Context,PLARGE_INTEGER Period,GUID * ThreadOrderingGuid,PLARGE_INTEGER Timeout) WINBOOL WINAPI <avrt.h>
AvRtCreateThreadOrderingGroupEx(PHANDLE Context,PLARGE_INTEGER Period,GUID * ThreadOrderingGuid,PLARGE_INTEGER Timeout,LPCSTR TaskName) WINBOOL WINAPI <avrt.h>
AvRtCreateThreadOrderingGroupExA(PHANDLE Context,PLARGE_INTEGER Period,GUID * ThreadOrderingGuid,PLARGE_INTEGER Timeout,LPCSTR TaskName) WINBOOL WINAPI <avrt.h>
AvRtCreateThreadOrderingGroupExW(PHANDLE Context,PLARGE_INTEGER Period,GUID * ThreadOrderingGuid,PLARGE_INTEGER Timeout,LPCWSTR TaskName) WINBOOL WINAPI <avrt.h>
AvRtDeleteThreadOrderingGroup(HANDLE Context) WINBOOL WINAPI <avrt.h>
AvRtJoinThreadOrderingGroup(PHANDLE Context,GUID * ThreadOrderingGuid,WINBOOL Before) WINBOOL WINAPI <avrt.h>
AvRtLeaveThreadOrderingGroup(HANDLE Context) WINBOOL WINAPI <avrt.h>
AvRtWaitOnThreadOrderingGroup(HANDLE Context) WINBOOL WINAPI <avrt.h>
AvSetMmMaxThreadCharacteristics(LPCSTR FirstTask,LPCSTR SecondTask,LPDWORD TaskIndex) HANDLE WINAPI <avrt.h>
AvSetMmMaxThreadCharacteristicsA(LPCSTR FirstTask,LPCSTR SecondTask,LPDWORD TaskIndex) HANDLE WINAPI <avrt.h>
AvSetMmMaxThreadCharacteristicsW(LPCWSTR FirstTask,LPCWSTR SecondTask,LPDWORD TaskIndex) HANDLE WINAPI <avrt.h>
AvSetMmThreadCharacteristics(LPCSTR TaskName,LPDWORD TaskIndex) HANDLE WINAPI <avrt.h>
AvSetMmThreadCharacteristicsA(LPCSTR TaskName,LPDWORD TaskIndex) HANDLE WINAPI <avrt.h>
AvSetMmThreadCharacteristicsW(LPCWSTR TaskName,LPDWORD TaskIndex) HANDLE WINAPI <avrt.h>
AvSetMmThreadPriority(HANDLE AvrtHandle,AVRT_PRIORITY Priority) WINBOOL WINAPI <avrt.h>
AVStreamNextKeyFrame(pavi,pos)<vfw.h>
AVStreamPrevKeyFrame(pavi,pos)<vfw.h>
ax_reg()extern int __cdecl <xa.h>
ax_reg(int,XID *,__LONG32)extern int __cdecl <xa.h>
ax_unreg()extern int __cdecl <xa.h>
ax_unreg(int,__LONG32)extern int __cdecl <xa.h>
AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT( 15 * 1000 )<azroles.h>
AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT( 45 * 1000 )<azroles.h>
AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT( 5 * 1000 )<azroles.h>
Back(void)virtual HRESULT WINAPI <mmcobj.h>
BackedOut(void)virtual HRESULT WINAPI <txdtc.h>
BackOut(void)virtual HRESULT WINAPI <txdtc.h>
Backup(BSTR bstrBackupDir,BSTR bstrComment,VARIANT * pvarGPMProgress,VARIANT * pvarGPMCancel,IGPMResult ** ppIGPMResult)virtual HRESULT WINAPI <iiisext.h>
Backup(BSTR bstrLocation,LONG lVersion,LONG lFlags)virtual HRESULT WINAPI <iiisext.h>
Backup(LPCWSTR pszMDBackupLocation,DWORD dwMDVersion,DWORD dwMDFlags)virtual HRESULT WINAPI <iiisext.h>
BackupClusterDatabase(HCLUSTER hCluster,LPCWSTR lpszPathName) DWORD WINAPI <clusapi.h>
BackupEventLog(HANDLE hEventLog,LPCSTR lpBackupFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
BackupEventLogA(HANDLE hEventLog,LPCSTR lpBackupFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
BackupEventLogW(HANDLE hEventLog,LPCWSTR lpBackupFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
BackupPerfRegistryToFileW(LPCWSTR szFileName,LPCWSTR szCommentString) DWORD <loadperf.h>
BackupRead(HANDLE hFile,LPBYTE lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,WINBOOL bAbort,WINBOOL bProcessSecurity,LPVOID * lpContext) WINBASEAPI WINBOOL WINAPI <winbase.h>
BackupSeek(HANDLE hFile,DWORD dwLowBytesToSeek,DWORD dwHighBytesToSeek,LPDWORD lpdwLowByteSeeked,LPDWORD lpdwHighByteSeeked,LPVOID * lpContext) WINBASEAPI WINBOOL WINAPI <winbase.h>
BackupWithPasswd(LPCWSTR pszMDBackupLocation,DWORD dwMDVersion,DWORD dwMDFlags,LPCWSTR pszPasswd)virtual HRESULT WINAPI <iadmw.h>
BackupWithPassword(BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword)virtual HRESULT WINAPI <iiisext.h>
BackupWrite(HANDLE hFile,LPBYTE lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,WINBOOL bAbort,WINBOOL bProcessSecurity,LPVOID * lpContext) WINBASEAPI WINBOOL WINAPI <winbase.h>
BackwardScan(double dwSpeed)virtual HRESULT WINAPI <strmif.h>
BAD_STANDARD_OBJ(lpObj,prefix,method,lpVtbl)<mapival.h>
BalloonVisibleState(__LONG32 dwCharID,__LONG32 bVisible)virtual HRESULT WINAPI <agtsvr.h>
BandedDataCallback(LONG lMessage,LONG lStatus,LONG lPercentComplete,LONG lOffset,LONG lLength,LONG lReserved,LONG lResLength,BYTE * pbBuffer)virtual HRESULT WINAPI <wia.h>
BatteryClassInitializeDevice(PBATTERY_MINIPORT_INFO MiniportInfo,PVOID * ClassData)NTSTATUS BATTERYCLASSAPI <batclass.h>
BatteryClassIoctl(PVOID ClassData,PIRP Irp)NTSTATUS BATTERYCLASSAPI <batclass.h>
BatteryClassQueryWmiDataBlock(PVOID ClassData,PDEVICE_OBJECT DeviceObject,PIRP Irp,ULONG GuidIndex,PULONG InstanceLengthArray,ULONG OutBufferSize,PUCHAR Buffer)NTSTATUS BATTERYCLASSAPI <batclass.h>
BatteryClassStatusNotify(PVOID ClassData)NTSTATUS BATTERYCLASSAPI <batclass.h>
BatteryClassSystemControl(PVOID ClassData,PVOID WmiLibContext,PDEVICE_OBJECT DeviceObject,PIRP Irp,PVOID Disposition)NTSTATUS BATTERYCLASSAPI <batclass.h>
BatteryClassUnload(PVOID ClassData)NTSTATUS BATTERYCLASSAPI <batclass.h>
BatteryLow(DWORD dwBatteryLifePercent)virtual HRESULT WINAPI <sensevts.h>
BCLASS_DISABLE_STATUS_NOTIFY_CALLBACK(PVOID Context)typedef NTSTATUS<batclass.h>
BCLASS_QUERY_INFORMATION_CALLBACK(PVOID Context,ULONG BatteryTag,BATTERY_QUERY_INFORMATION_LEVEL Level,LONG AtRate,PVOID Buffer,ULONG BufferLength,PULONG ReturnedLength)typedef NTSTATUS<batclass.h>
BCLASS_QUERY_STATUS_CALLBACK(PVOID Context,ULONG BatteryTag,PBATTERY_STATUS BatteryStatus)typedef NTSTATUS<batclass.h>
BCLASS_QUERY_TAG_CALLBACK(PVOID Context,PULONG BatteryTag)typedef NTSTATUS<batclass.h>
BCLASS_SET_INFORMATION_CALLBACK(PVOID Context,ULONG BatteryTag,BATTERY_SET_INFORMATION_LEVEL Level,PVOID Buffer)typedef NTSTATUS<batclass.h>
BCLASS_SET_STATUS_NOTIFY_CALLBACK(PVOID Context,ULONG BatteryTag,PBATTERY_NOTIFY BatteryNotify)typedef NTSTATUS<batclass.h>
bcp_batch(HDBC) DBINT SQL_API <odbcss.h>
bcp_bind(HDBC,LPCBYTE,INT,DBINT,LPCBYTE,INT,INT,INT) RETCODE SQL_API <odbcss.h>
bcp_colfmt(HDBC,INT,BYTE,INT,DBINT,LPCBYTE,INT,INT) RETCODE SQL_API <odbcss.h>
bcp_collen(HDBC,DBINT,INT) RETCODE SQL_API <odbcss.h>
bcp_colptr(HDBC,LPCBYTE,INT) RETCODE SQL_API <odbcss.h>
bcp_columns(HDBC,INT) RETCODE SQL_API <odbcss.h>
bcp_control(HDBC,INT,void *) RETCODE SQL_API <odbcss.h>
bcp_done(HDBC) DBINT SQL_API <odbcss.h>
bcp_exec(HDBC,LPDBINT) RETCODE SQL_API <odbcss.h>
bcp_getcolfmt(HDBC,INT,INT,void *,INT,INT *) RETCODE SQL_API <odbcss.h>
bcp_init(HDBC,LPCSTR,LPCSTR,LPCSTR,INT)<odbcss.h>
bcp_initA(HDBC,LPCSTR,LPCSTR,LPCSTR,INT) RETCODE SQL_API <odbcss.h>
bcp_initW(HDBC,LPCWSTR,LPCWSTR,LPCWSTR,INT) RETCODE SQL_API <odbcss.h>
bcp_moretext(HDBC,DBINT,LPCBYTE) RETCODE SQL_API <odbcss.h>
bcp_readfmt(HDBC,LPCSTR)<odbcss.h>
bcp_readfmtA(HDBC,LPCSTR) RETCODE SQL_API <odbcss.h>
bcp_readfmtW(HDBC,LPCWSTR) RETCODE SQL_API <odbcss.h>
bcp_sendrow(HDBC) RETCODE SQL_API <odbcss.h>
bcp_setcolfmt(HDBC,INT,INT,void *,INT) RETCODE SQL_API <odbcss.h>
bcp_writefmt(HDBC,LPCSTR)<odbcss.h>
bcp_writefmtA(HDBC,LPCSTR) RETCODE SQL_API <odbcss.h>
bcp_writefmtW(HDBC,LPCWSTR) RETCODE SQL_API <odbcss.h>
BCRYPT_IS_INTERFACE_VERSION_COMPATIBLE()()()
BCRYPT_IS_INTERFACE_VERSION_COMPATIBLE(loader, provider)<bcrypt.h>
BCRYPT_MAKE_INTERFACE_VERSION()()()
BCRYPT_MAKE_INTERFACE_VERSION(major, minor)<bcrypt.h>
BCRYPT_SUCCESS(Status)<bcrypt.h>
BCryptAddContextFunction(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,ULONG dwPosition) NTSTATUS WINAPI <bcrypt.h>
BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptConfigureContext(ULONG dwTable,LPCWSTR pszContext,PCRYPT_CONTEXT_CONFIG pConfig) NTSTATUS WINAPI <bcrypt.h>
BCryptConfigureContextFunction(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig) NTSTATUS WINAPI <bcrypt.h>
BCryptCreateContext(ULONG dwTable,LPCWSTR pszContext,PCRYPT_CONTEXT_CONFIG pConfig) NTSTATUS WINAPI <bcrypt.h>
BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm,BCRYPT_HASH_HANDLE * phHash,PUCHAR pbHashObject,ULONG cbHashObject,PUCHAR pbSecret,ULONG cbSecret,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptDecrypt(BCRYPT_KEY_HANDLE hKey,PUCHAR pbInput,ULONG cbInput,VOID * pPaddingInfo,PUCHAR pbIV,ULONG cbIV,PUCHAR pbOutput,ULONG cbOutput,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptDeleteContext(ULONG dwTable,LPCWSTR pszContext) NTSTATUS WINAPI <bcrypt.h>
BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret,LPCWSTR pwszKDF,BCryptBufferDesc * pParameterList,PUCHAR pbDerivedKey,ULONG cbDerivedKey,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash,BCRYPT_ALG_HANDLE hTargetAlg,PUCHAR pbDerivedKey,ULONG cbDerivedKey,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf,PUCHAR pbPassword,ULONG cbPassword,PUCHAR pbSalt,ULONG cbSalt,ULONGLONG cIterations,PUCHAR pbDerivedKey,ULONG cbDerivedKey,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash) NTSTATUS WINAPI <bcrypt.h>
BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey) NTSTATUS WINAPI <bcrypt.h>
BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret) NTSTATUS WINAPI <bcrypt.h>
BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash,BCRYPT_HASH_HANDLE * phNewHash,PUCHAR pbHashObject,ULONG cbHashObject,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey,BCRYPT_KEY_HANDLE * phNewKey,PUCHAR pbKeyObject,ULONG cbKeyObject,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptEncrypt(BCRYPT_KEY_HANDLE hKey,PUCHAR pbInput,ULONG cbInput,VOID * pPaddingInfo,PUCHAR pbIV,ULONG cbIV,PUCHAR pbOutput,ULONG cbOutput,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptEnumAlgorithms(ULONG dwAlgOperations,ULONG * pAlgCount,BCRYPT_ALGORITHM_IDENTIFIER ** ppAlgList,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptEnumContextFunctionProviders(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,ULONG * pcbBuffer,PCRYPT_CONTEXT_FUNCTION_PROVIDERS * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptEnumContextFunctions(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,ULONG * pcbBuffer,PCRYPT_CONTEXT_FUNCTIONS * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptEnumContexts(ULONG dwTable,ULONG * pcbBuffer,PCRYPT_CONTEXTS * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptEnumProviders(LPCWSTR pszAlgId,ULONG * pImplCount,BCRYPT_PROVIDER_NAME ** ppImplList,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptEnumRegisteredProviders(ULONG * pcbBuffer,PCRYPT_PROVIDERS * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptExportKey(BCRYPT_KEY_HANDLE hKey,BCRYPT_KEY_HANDLE hExportKey,LPCWSTR pszBlobType,PUCHAR pbOutput,ULONG cbOutput,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptFinishHash(BCRYPT_HASH_HANDLE hHash,PUCHAR pbOutput,ULONG cbOutput,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptFreeBuffer(PVOID pvBuffer) VOID WINAPI <bcrypt.h>
BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm,BCRYPT_KEY_HANDLE * phKey,ULONG dwLength,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm,BCRYPT_KEY_HANDLE * phKey,PUCHAR pbKeyObject,ULONG cbKeyObject,PUCHAR pbSecret,ULONG cbSecret,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm,PUCHAR pbBuffer,ULONG cbBuffer,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptGetFipsAlgorithmMode(BOOLEAN * pfEnabled) NTSTATUS WINAPI <bcrypt.h>
BCryptGetProperty(BCRYPT_HANDLE hObject,LPCWSTR pszProperty,PUCHAR pbOutput,ULONG cbOutput,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptHashData(BCRYPT_HASH_HANDLE hHash,PUCHAR pbInput,ULONG cbInput,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm,BCRYPT_KEY_HANDLE hImportKey,LPCWSTR pszBlobType,BCRYPT_KEY_HANDLE * phKey,PUCHAR pbKeyObject,ULONG cbKeyObject,PUCHAR pbInput,ULONG cbInput,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm,BCRYPT_KEY_HANDLE hImportKey,LPCWSTR pszBlobType,BCRYPT_KEY_HANDLE * phKey,PUCHAR pbInput,ULONG cbInput,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey,BCryptBufferDesc * pParameterList,PUCHAR pbDerivedKey,ULONG cbDerivedKey,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE * phAlgorithm,LPCWSTR pszAlgId,LPCWSTR pszImplementation,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptQueryContextConfiguration(ULONG dwTable,LPCWSTR pszContext,ULONG * pcbBuffer,PCRYPT_CONTEXT_CONFIG * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptQueryContextFunctionConfiguration(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,ULONG * pcbBuffer,PCRYPT_CONTEXT_FUNCTION_CONFIG * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptQueryContextFunctionProperty(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,LPCWSTR pszProperty,ULONG * pcbValue,PUCHAR * ppbValue) NTSTATUS WINAPI <bcrypt.h>
BCryptQueryProviderRegistration(LPCWSTR pszProvider,ULONG dwMode,ULONG dwInterface,ULONG * pcbBuffer,PCRYPT_PROVIDER_REG * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptRegisterConfigChangeNotify(HANDLE * phEvent) NTSTATUS WINAPI <bcrypt.h>
BCryptRegisterConfigChangeNotify(PRKEVENT pEvent) NTSTATUS WINAPI <bcrypt.h>
BCryptRemoveContextFunction(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction) NTSTATUS WINAPI <bcrypt.h>
BCryptResolveProviders(LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,LPCWSTR pszProvider,ULONG dwMode,ULONG dwFlags,ULONG * pcbBuffer,PCRYPT_PROVIDER_REFS * ppBuffer) NTSTATUS WINAPI <bcrypt.h>
BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey,BCRYPT_KEY_HANDLE hPubKey,BCRYPT_SECRET_HANDLE * phAgreedSecret,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptSetContextFunctionProperty(ULONG dwTable,LPCWSTR pszContext,ULONG dwInterface,LPCWSTR pszFunction,LPCWSTR pszProperty,ULONG cbValue,PUCHAR pbValue) NTSTATUS WINAPI <bcrypt.h>
BCryptSetProperty(BCRYPT_HANDLE hObject,LPCWSTR pszProperty,PUCHAR pbInput,ULONG cbInput,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptSignHash(BCRYPT_KEY_HANDLE hKey,VOID * pPaddingInfo,PUCHAR pbInput,ULONG cbInput,PUCHAR pbOutput,ULONG cbOutput,ULONG * pcbResult,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BCryptUnregisterConfigChangeNotify(HANDLE hEvent) NTSTATUS WINAPI <bcrypt.h>
BCryptUnregisterConfigChangeNotify(PRKEVENT pEvent) NTSTATUS WINAPI <bcrypt.h>
BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey,VOID * pPaddingInfo,PUCHAR pbHash,ULONG cbHash,PUCHAR pbSignature,ULONG cbSignature,ULONG dwFlags) NTSTATUS WINAPI <bcrypt.h>
BdaCheckChanges(IN PIRP Irp)<bdasup.h>
BdaCommitChanges(IN PIRP Irp)<bdasup.h>
BdaCreateFilterFactory(IN PKSDEVICE pKSDevice,IN const KSFILTER_DESCRIPTOR * pFilterDescriptor,IN const BDA_FILTER_TEMPLATE * pBdaFilterTemplate)<bdasup.h>
BdaCreateFilterFactoryEx(IN PKSDEVICE pKSDevice,IN const KSFILTER_DESCRIPTOR * pFilterDescriptor,IN const BDA_FILTER_TEMPLATE * pBdaFilterTemplate,OUT PKSFILTERFACTORY * ppKSFilterFactory)<bdasup.h>
BdaCreatePin(IN PKSFILTER pKSFilter,IN ULONG ulPinType,OUT ULONG * pulPinId)<bdasup.h>
BdaCreateTopology(IN PKSFILTER pKSFilter,IN ULONG InputPinId,IN ULONG OutputPinId)<bdasup.h>
BdaDeletePin(IN PKSFILTER pKSFilter,IN ULONG * pulPinId)<bdasup.h>
BdaFilterFactoryUpdateCacheData(IN PKSFILTERFACTORY pFilterFactory,IN const KSFILTER_DESCRIPTOR * pFilterDescriptor OPTIONAL)<bdasup.h>
BdaGetChangeState(IN PIRP Irp,OUT BDA_CHANGE_STATE * pChangeState)<bdasup.h>
BdaInitFilter(IN PKSFILTER pKSFilter,IN const BDA_FILTER_TEMPLATE * pBdaFilterTemplate)<bdasup.h>
BdaMethodCreatePin(IN PIRP Irp,IN KSMETHOD * pKSMethod,OUT ULONG * pulPinFactoryID)<bdasup.h>
BdaMethodCreateTopology(IN PIRP Irp,IN KSMETHOD * pKSMethod,OPTIONAL PVOID pvIgnored)<bdasup.h>
BdaMethodDeletePin(IN PIRP Irp,IN KSMETHOD * pKSMethod,OPTIONAL PVOID pvIgnored)<bdasup.h>
BdaPropertyGetControllingPinId(IN PIRP Irp,IN KSP_BDA_NODE_PIN * pProperty,OUT ULONG * pulControllingPinId)<bdasup.h>
BdaPropertyGetPinControl(IN PIRP Irp,IN KSPROPERTY * pKSProperty,OUT ULONG * pulProperty)<bdasup.h>
BdaPropertyNodeDescriptors(IN PIRP Irp,IN KSPROPERTY * pKSProperty,OUT BDANODE_DESCRIPTOR * pNodeDescriptorProperty)<bdasup.h>
BdaPropertyNodeEvents(IN PIRP Irp,IN KSP_NODE * pKSProperty,OUT GUID * pguidProperty)<bdasup.h>
BdaPropertyNodeMethods(IN PIRP Irp,IN KSP_NODE * pKSProperty,OUT GUID * pguidProperty)<bdasup.h>
BdaPropertyNodeProperties(IN PIRP Irp,IN KSP_NODE * pKSProperty,OUT GUID * pguidProperty)<bdasup.h>
BdaPropertyNodeTypes(IN PIRP Irp,IN KSPROPERTY * pKSProperty,OUT ULONG * pulProperty)<bdasup.h>
BdaPropertyPinTypes(IN PIRP Irp,IN KSPROPERTY * pKSProperty,OUT ULONG * pulProperty)<bdasup.h>
BdaPropertyTemplateConnections(IN PIRP Irp,IN KSPROPERTY * pKSProperty,OUT KSTOPOLOGY_CONNECTION * pConnectionProperty)<bdasup.h>
BdaStartChanges(IN PIRP Irp)<bdasup.h>
BdaUninitFilter(IN PKSFILTER pKSFilter)<bdasup.h>
BdaValidateNodeProperty(IN PIRP Irp,IN KSPROPERTY * pKSProperty)<bdasup.h>
BecomeQuorumResource(BSTR bstrDevicePath,__LONG32 lMaxLogSize)virtual HRESULT WINAPI <msclus.h>
Beep(DWORD dwFreq,DWORD dwDuration) WINBASEAPI WINBOOL WINAPI <utilapiset.h>
BEGIN_ADO_BINDING(cls)<icrsint.h>
Begin_AssignFrom(IClusCfgCredentials * picccSourceIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_AssignTo(IClusCfgCredentials * picccDestIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_CleanupLocalNode(DWORD dwDelayIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_CleanupRemoteNode(const WCHAR * pcszEvictedNodeNameIn,DWORD dwDelayIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Clone(void)virtual HRESULT WINAPI <cluscfgserver.h>
BEGIN_COM_MAP(CMSPCallBase) <mspcall.h>
Begin_CommitChanges(IUnknown * punkClusterInfoIn,IUnknown * punkResTypeServicesIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Count(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Create(const WCHAR * pcszResTypeNameIn,const WCHAR * pcszResTypeDisplayNameIn,const WCHAR * pcszResDllNameIn,DWORD dwLooksAliveIntervalIn,DWORD dwIsAliveIntervalIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_EvictNotify(LPCWSTR pcszNodeNameIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetBindingString(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetClusterConfigInfo(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetClusterServiceAccountCredentials(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetClusterVersion(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetCommitMode(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetCredentials(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetDescription(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetDriveLetterMappings(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetIdentity(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetIPAddress(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetMaxNodeCount(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetName(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetNetworkInfo(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetOSVersion(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetPassword(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetPrimaryNetworkAddress(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetProcessorInfo(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetSize(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetSubnetMask(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetTypeGUID(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetTypeName(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_GetUID(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Initialize(IUnknown * punkCallbackIn,LCID lcidIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsManaged(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsManagedByDefault(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsMemberOfCluster(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsPrivate(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsPublic(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsQuorumCapable(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_IsQuorumResource(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_JobError(IBackgroundCopyJob * pJob,IBackgroundCopyError * pError)virtual HRESULT WINAPI <bits.h>
Begin_JobModification(IBackgroundCopyJob * pJob,DWORD dwReserved)virtual HRESULT WINAPI <bits.h>
Begin_JobTransferred(IBackgroundCopyJob * pJob)virtual HRESULT WINAPI <bits.h>
Begin_Next(ULONG cNumberRequestedIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Notify(IUnknown * punkClusterInfoIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Notify(IUnknown * punkIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_RegisterAdminExtensions(const WCHAR * pcszResTypeNameIn,ULONG cExtClsidCountIn,const CLSID * rgclsidExtClsidsIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Reset(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SendNotifications(LPCWSTR pcszNodeNameIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SendNotifications(void)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SendStatusReport(LPCWSTR pcszNodeNameIn,CLSID clsidTaskMajorIn,CLSID clsidTaskMinorIn,ULONG ulMinIn,ULONG ulMaxIn,ULONG ulCurrentIn,HRESULT hrStatusIn,LPCWSTR pcszDescriptionIn,FILETIME * pftTimeIn,LPCWSTR pcszReferenceIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetBindingString(LPCWSTR pcszBindingStringIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetCommitMode(ECommitMode ecmNewModeIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetCredentials(LPCWSTR pcszUserIn,LPCWSTR pcszDomainIn,LPCWSTR pcszPasswordIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetDescription(LPCWSTR pcszDescriptionIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetDriveLetterMappings(SDriveLetterMapping dlmDriveLetterMappingIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetIPAddress(ULONG ulDottedQuadIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetManaged(WINBOOL fIsManagedIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetManagedByDefault(WINBOOL fIsManagedByDefaultIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetName(LPCWSTR pcszNameIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetNetworkInfo(IClusCfgNetworkInfo * piccniIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetPrimaryNetworkAddress(IClusCfgIPAddressInfo * pIPAddressIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetPrivate(WINBOOL fIsPrivateIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetPublic(WINBOOL fIsPublicIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetQuorumCapable(WINBOOL fIsQuorumCapableIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetQuorumResource(WINBOOL fIsQuorumResourceIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_SetSubnetMask(ULONG ulDottedQuadIn)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_ShutdownNotify(void)virtual HRESULT WINAPI <iadmw.h>
Begin_SinkNotify(DWORD dwMDNumElements,MD_CHANGE_OBJECT_W pcoChangeList[])virtual HRESULT WINAPI <iadmw.h>
Begin_Skip(ULONG cNumberToSkip)virtual HRESULT WINAPI <cluscfgserver.h>
Begin_Skip(ULONG cNumberToSkipIn)virtual HRESULT WINAPI <cluscfgserver.h>
BEGIN_TM_CLASS_PARTS(name)<schemadef.h>
BEGIN_TM_ENUM(name)<schemadef.h>
BEGIN_TM_PART_STATES(name)<schemadef.h>
BEGIN_TM_SCHEMA(name)<schemadef.h>
BeginAbort(WINBOOL fRecovery)virtual HRESULT WINAPI <comsvcs.h>
BeginAbortVariants(VARIANT_BOOL bRecovery)virtual HRESULT WINAPI <comsvcs.h>
BeginBufferedAnimation(HWND hwnd,HDC hdcTarget,const RECT * rcTarget,BP_BUFFERFORMAT dwFormat,BP_PAINTPARAMS * pPaintParams,BP_ANIMATIONPARAMS * pAnimationParams,HDC * phdcFrom,HDC * phdcTo)THEMEAPI_<uxtheme.h>
BeginBufferedPaint(HDC hdcTarget,const RECT * prcTarget,BP_BUFFERFORMAT dwFormat,BP_PAINTPARAMS * pPaintParams,HDC * phdc)THEMEAPI_<uxtheme.h>
BeginCommit(WINBOOL fRecovery)virtual HRESULT WINAPI <comsvcs.h>
BeginCommitVariants(VARIANT_BOOL bRecovery)virtual HRESULT WINAPI <comsvcs.h>
BeginContainer()	GraphicsContainer <gdiplusgraphics.h>
BeginContainer(const Rect & dstrect,const Rect & srcrect,Unit unit)	GraphicsContainer <gdiplusgraphics.h>
BeginContainer(const RectF & dstrect,const RectF & srcrect,Unit unit)	GraphicsContainer <gdiplusgraphics.h>
BeginDeferWindowPos(int nNumWindows) WINUSERAPI HDWP WINAPI <winuser.h>
BeginEditCollection(void)virtual HRESULT WINAPI <tom.h>
BeginEnumStrokes(HPENDATA) LPPENDATA WINAPI <penwin.h>
BeginNtmsDeviceChangeDetection(HANDLE hSession,LPHANDLE lpDetectHandle) DWORD WINAPI <ntmsapi.h>
BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint) WINUSERAPI HDC WINAPI <winuser.h>
BeginPanningFeedback(HWND hwnd)WINBOOL WINAPI <uxtheme.h>
BeginPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
BeginPrepare(void)virtual HRESULT WINAPI <comsvcs.h>
BeginPrepareVariants(void)virtual HRESULT WINAPI <comsvcs.h>
BeginSelectionUndo(void)virtual HRESULT WINAPI <mshtmlc.h>
BeginTransaction(IMSMQTransaction ** ptransaction)virtual HRESULT WINAPI <transact.h>
BeginTransaction(IMSMQTransaction2 ** ptransaction)virtual HRESULT WINAPI <transact.h>
BeginTransaction(IMSMQTransaction3 ** ptransaction)virtual HRESULT WINAPI <transact.h>
BeginTransaction(IUnknown * punkOuter,ISOLEVEL isoLevel,ULONG isoFlags,ITransactionOptions * pOptions,ITransaction ** ppTransaction)virtual HRESULT WINAPI <transact.h>
BeginUndoUnit(OLECHAR * pchTitle)virtual HRESULT WINAPI <mshtmlc.h>
BeginUpdateResource(LPCSTR pFileName,WINBOOL bDeleteExistingResources) WINBASEAPI HANDLE WINAPI <winbase.h>
BeginUpdateResourceA(LPCSTR pFileName,WINBOOL bDeleteExistingResources) WINBASEAPI HANDLE WINAPI <winbase.h>
BeginUpdateResourceW(LPCWSTR pFileName,WINBOOL bDeleteExistingResources) WINBASEAPI HANDLE WINAPI <winbase.h>
BEM_FREE_INTERFACE_CALLBACK(void * interfaceInstance) typedef void<bemapiset.h>
BemCopyReference(BEM_REFERENCE * reference,BEM_REFERENCE ** copiedReference) HRESULT WINAPI <bemapiset.h>
BemCreateContractFrom(LPCWSTR dllPath,REFGUID extensionId,const CONTRACT_DESCRIPTION * contractDescription,void * hostContract,void ** contract) HRESULT WINAPI <bemapiset.h>
BemCreateReference(REFGUID iid,void * interfaceInstance,BEM_FREE_INTERFACE_CALLBACK freeCallback,BEM_REFERENCE ** reference) HRESULT WINAPI <bemapiset.h>
BemFreeContract(void * contract) void WINAPI <bemapiset.h>
BemFreeReference(BEM_REFERENCE * reference) void WINAPI <bemapiset.h>
ber_alloc_t(INT options) WINBERAPI BerElement<winber.h>
ber_bvdup(BERVAL * pBerVal) WINBERAPI BERVAL<winber.h>
ber_bvecfree(PBERVAL * pBerVal) WINBERAPI VOID BERAPI <winber.h>
ber_bvfree(BERVAL * pBerVal) WINBERAPI VOID BERAPI <winldap.h>
ber_bvfree(struct berval * bv) WINLDAPAPI VOID LDAPAPI <winldap.h>
ber_first_element(BerElement * pBerElement,ULONG * pLen,CHAR ** ppOpaque) WINBERAPI ULONG BERAPI <winber.h>
ber_flatten(BerElement * pBerElement,PBERVAL * pBerVal) WINBERAPI INT BERAPI <winber.h>
ber_free(BerElement * pBerElement,INT fbuf) WINBERAPI VOID BERAPI <winber.h>
ber_init(BERVAL * pBerVal) WINBERAPI BerElement<winber.h>
ber_next_element(BerElement * pBerElement,ULONG * pLen,CHAR * opaque) WINBERAPI ULONG BERAPI <winber.h>
ber_peek_tag(BerElement * pBerElement,ULONG * pLen) WINBERAPI ULONG BERAPI <winber.h>
ber_printf(BerElement * pBerElement,PSTR fmt,...) WINBERAPI INT BERAPI <winber.h>
ber_scanf(BerElement * pBerElement,PSTR fmt,...) WINBERAPI ULONG BERAPI <winber.h>
ber_skip_tag(BerElement * pBerElement,ULONG * pLen) WINBERAPI ULONG BERAPI <winber.h>
BERGetHeader(ULPBYTE pCurrentPointer,ULPBYTE pTag,LPDWORD pHeaderLength,LPDWORD pDataLength,ULPBYTE * ppNext) WINBOOL __cdecl <netmon.h>
BERGetInteger(ULPBYTE pCurrentPointer,ULPBYTE * ppValuePointer,LPDWORD pHeaderLength,LPDWORD pDataLength,ULPBYTE * ppNext) WINBOOL __cdecl <netmon.h>
BERGetString(ULPBYTE pCurrentPointer,ULPBYTE * ppValuePointer,LPDWORD pHeaderLength,LPDWORD pDataLength,ULPBYTE * ppNext) WINBOOL __cdecl <netmon.h>
BezierSegment(const D2D1_POINT_2F & point1,const D2D1_POINT_2F & point2,const D2D1_POINT_2F & point3)D2D1FORCEINLINE D2D1_BEZIER_SEGMENT <d2d1helper.h>
BFFCALLBACK(HWND hwnd,UINT uMsg,LPARAM lParam,LPARAM lpData) typedef int<shlobj.h>
BFO_QUERY_ALL(int)<shobjidl.h>
BhAllocSystemMemory(DWORD nBytes) extern LPVOID WINAPI <nmsupp.h>
BhCloseService(HANDLE ServiceHandle) extern VOID WINAPI <nmsupp.h>
BhFreeSystemMemory(LPVOID ptr) extern LPVOID WINAPI <nmsupp.h>
BhGetLastError(VOID) extern DWORD WINAPI <nmsupp.h>
BhGetNetworkRequestAddress(DWORD NalRequestType) extern LPVOID WINAPI <nmsupp.h>
BhGetWindowsVersion(VOID) extern DWORD WINAPI <nmsupp.h>
BhKillTimer(HTIMER hTimer) extern VOID WINAPI <nmsupp.h>
BhOpenService(LPSTR ServiceName) extern HANDLE WINAPI <nmsupp.h>
BhSetLastError(DWORD Error) extern DWORD WINAPI <nmsupp.h>
BhSetTimer(BHTIMERPROC TimerProc,LPVOID InstData,DWORD TimeOut) extern HTIMER WINAPI <nmsupp.h>
BhStartService(HANDLE ServiceHandle) extern DWORD WINAPI <nmsupp.h>
BhStopService(HANDLE ServiceHandle) extern DWORD WINAPI <nmsupp.h>
BHTIMERPROC(LPVOID) typedef VOID<nmsupp.h>
BinaryRead(VARIANT * pvarCountToRead,VARIANT * pvarReturn)virtual HRESULT WINAPI <asptlb.h>
BinarySDToSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,VARIANT * pVarsec,LPCWSTR pszServerName,LPCWSTR userName,LPCWSTR passWord,DWORD dwFlags) HRESULT WINAPI <adshlp.h>
BinaryWrite(VARIANT varInput)virtual HRESULT WINAPI <asptlb.h>
Bind(BSTR pDomainName,BSTR pUserName,BSTR pPassword,__LONG32 lFlags)virtual HRESULT WINAPI <rend.h>
Bind(IUnknown * pUnkOuter,LPCOLESTR pwszURL,DBBINDURLFLAG dwBindURLFlags,REFGUID rguid,REFIID riid,IAuthenticate * pAuthenticate,DBIMPLICITSESSION * pImplSession,DBBINDURLSTATUS * pdwBindStatus,IUnknown ** ppUnk)virtual HRESULT WINAPI <rend.h>
bind(SOCKET s,const struct sockaddr * name,int namelen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
BindDevice(const LPCWSTR pszDeviceName,const DWORD dwAccess)virtual HRESULT WINAPI <bidispl.h>
BindIFilterFromStorage(IStorage * pStg,IUnknown * pUnkOuter,void ** ppIUnk) STDAPI <ntquery.h>
BindIFilterFromStream(IStream * pStm,IUnknown * pUnkOuter,void ** ppIUnk) STDAPI <ntquery.h>
BindImage(PCSTR ImageName,PCSTR DllPath,PCSTR SymbolPath) WINBOOL IMAGEAPI <imagehlp.h>
BindImageEx(DWORD Flags,PCSTR ImageName,PCSTR DllPath,PCSTR SymbolPath,PIMAGEHLP_STATUS_ROUTINE StatusRoutine) WINBOOL IMAGEAPI <imagehlp.h>
BINDINFO_OPTIONS_SHDOCVW_NAVIGATE(int)<urlmon.h>
BindIoCompletionCallback(HANDLE FileHandle,LPOVERLAPPED_COMPLETION_ROUTINE Function,ULONG Flags) WINBASEAPI WINBOOL WINAPI <winbase.h>
BindMoniker(LPMONIKER pmk,DWORD grfOpt,REFIID iidResult,LPVOID * ppvResult)WINOLEAPI <objbase.h>
BindToCurrentThread(void)virtual HRESULT WINAPI <comsvcs.h>
BIT(b)<ws2bth.h>
BitBlt(HDC hdc,int x,int y,int cx,int cy,HDC hdcSrc,int x1,int y1,DWORD rop) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Bitmap()	virtual ~<wintrust.h>
Bitmap(Bitmap ** inputs,INT numInputs,Effect * effect,RECT * ROI,RECT * outputRect,Bitmap ** output)	static Status ApplyEffect<wintrust.h>
Bitmap(BitmapData * lcokedBitmapData)	Status UnlockBits<wintrust.h>
Bitmap(BitmapData * lockedBitmapData)__inline__ Status ::UnlockBits<wintrust.h>
Bitmap(ColorPalette * palette,PaletteType paletteType,INT optimalColors,BOOL useTransparentColor,Bitmap * bitmap)__inline__ Status ::InitializePalette<wintrust.h>
Bitmap(const Bitmap &)	<wintrust.h>
Bitmap(const BITMAPINFO * gdiBitmapInfo,VOID * gdiBitmapData)__inline__ <wintrust.h>
Bitmap(const Color & colorBackground,HBITMAP * hbmReturn)__inline__ Status ::GetHBITMAP<wintrust.h>
Bitmap(const Rect & rect,PixelFormat format)__inline__ <wintrust.h>
Bitmap(const Rect * rect,UINT flags,PixelFormat format,BitmapData * lockedBitmapData)__inline__ Status ::LockBits<wintrust.h>
Bitmap(const RectF & rect,PixelFormat format)__inline__ <wintrust.h>
Bitmap(const WCHAR * filename,BOOL useEmbeddedColorManagement)__inline__ <wintrust.h>
Bitmap(const WCHAR * filename,BOOL useEmbeddedColorManagement=FALSE)	static <wintrust.h>
Bitmap(Effect * effect,RECT * ROI)	Status ApplyEffect<wintrust.h>
Bitmap(GpImage * image,Status status)	<wintrust.h>
Bitmap(HBITMAP hbm,HPALETTE hpal)__inline__ <wintrust.h>
Bitmap(HICON * icon)__inline__ Status ::GetHICON<wintrust.h>
Bitmap(HICON hicon)__inline__ ::<wintrust.h>
Bitmap(HICON icon)__inline__ <wintrust.h>
Bitmap(HINSTANCE hInstance,const WCHAR * bitmapName)__inline__ <wintrust.h>
Bitmap(HistogramFormat format,UINT * numberOfEntries)__inline__ Status ::GetHistogramSize<wintrust.h>
Bitmap(HistogramFormat format,UINT numberOfEntries,UINT * channel0,UINT * channel1,UINT * channel2,UINT * channel3)__inline__ Status ::GetHistogram<wintrust.h>
Bitmap(IDirectDrawSurface7 * surface)__inline__ <wintrust.h>
Bitmap(INT width,INT height,Graphics * target)__inline__ ::<wintrust.h>
Bitmap(INT width,INT height,INT stride,PixelFormat format,BYTE * scan0)__inline__ ::<wintrust.h>
Bitmap(INT width,INT height,PixelFormat format)__inline__ ::<wintrust.h>
Bitmap(INT width,INT height,PixelFormat format=PixelFormat32bppARGB)	<wintrust.h>
Bitmap(INT x,INT y,Color * color)__inline__ Status ::GetPixel<wintrust.h>
Bitmap(INT x,INT y,const Color & color)__inline__ Status ::SetPixel<wintrust.h>
Bitmap(INT x,INT y,INT width,INT height,PixelFormat format)__inline__ <wintrust.h>
Bitmap(IStream * stream,BOOL useEmbeddedColorManagement)__inline__ <wintrust.h>
Bitmap(IStream * stream,BOOL useEmbeddedColorManagement=FALSE)	static <wintrust.h>
Bitmap(PixelFormat format,DitherType ditherType,PaletteType paletteType,ColorPalette * palette,REAL alphaThresholdPercent)__inline__ Status ::ConvertFormat<wintrust.h>
Bitmap(REAL x,REAL y,REAL width,REAL height,PixelFormat format)__inline__ <wintrust.h>
Bitmap(REAL xdpi,REAL ydpi)__inline__ Status ::SetResolution<wintrust.h>
BitmapBrushProperties(D2D1_EXTEND_MODE extendModeX=D2D1_EXTEND_MODE_CLAMP,D2D1_EXTEND_MODE extendModeY=D2D1_EXTEND_MODE_CLAMP,D2D1_BITMAP_INTERPOLATION_MODE interpolationMode=D2D1_BITMAP_INTERPOLATION_MODE_LINEAR)D2D1FORCEINLINE D2D1_BITMAP_BRUSH_PROPERTIES <d2d1helper.h>
BitmapBrushProperties1(D2D1_EXTEND_MODE extendmodeX=D2D1_EXTEND_MODE_CLAMP,D2D1_EXTEND_MODE extendmodeY=D2D1_EXTEND_MODE_CLAMP,D2D1_INTERPOLATION_MODE interpolationMode=D2D1_INTERPOLATION_MODE_LINEAR)D2D1FORCEINLINE D2D1_BITMAP_BRUSH_PROPERTIES1 <d2d1_1helper.h>
BitmapProperties(),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f)D2D1FORCEINLINE D2D1_BITMAP_PROPERTIES <d2d1helper.h>
BitmapProperties1(),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL)D2D1FORCEINLINE D2D1_BITMAP_PROPERTIES1 <d2d1_1helper.h>
BitScanForward64(DWORD * Index,DWORD64 Mask) BOOLEAN <winnt.h>
BitScanReverse64(DWORD * Index,DWORD64 Mask) BOOLEAN <winnt.h>
BITSTOBYTES(b)<celib.h>
BlindTransfer(BSTR pDestAddress)virtual HRESULT WINAPI <tapi3if.h>
BLOB_TABLE_SIZE(DWORD dwNumBlobs) static __inline DWORD <netmon.h>
BLOBSPROC(PBLOB_TABLE * ppBlobTable) typedef DWORD<netmon.h>
Block(__LONG32 lRow)virtual HRESULT WINAPI <strmif.h>
Block(DWORD dwBlockFlags,HANDLE hEvent)virtual HRESULT WINAPI <strmif.h>
BlockInput(WINBOOL fBlockIt) WINUSERAPI WINBOOL WINAPI <winuser.h>
BlockSelected(void)virtual HRESULT WINAPI <msimcntl.h>
BluetoothAuthenticateDeviceEx(HWND hwndParentIn,HANDLE hRadioIn,BLUETOOTH_DEVICE_INFO * pbtdiInout,PBLUETOOTH_OOB_DATA_INFO pbtOobData,BLUETOOTH_AUTHENTICATION_REQUIREMENTS authenticationRequirement)HRESULT WINAPI <bluetoothapis.h>
BluetoothAuthenticateMultipleDevices(HWND hwndParent,HANDLE hRadio,DWORD cDevices,BLUETOOTH_DEVICE_INFO * pbtdi)DWORD WINAPI <bluetoothapis.h>
BluetoothDisplayDeviceProperties(HWND hwndParent,BLUETOOTH_DEVICE_INFO * pbtdi)WINBOOL WINAPI <bluetoothapis.h>
BluetoothEnableDiscovery(HANDLE hRadio,WINBOOL fEnabled)WINBOOL WINAPI <bluetoothapis.h>
BluetoothEnableIncomingConnections(HANDLE hRadio,WINBOOL fEnabled)WINBOOL WINAPI <bluetoothapis.h>
BluetoothEnumerateInstalledServices(HANDLE hRadio,BLUETOOTH_DEVICE_INFO * pbtdi,DWORD * pcServices,GUID * pGuidServices)DWORD WINAPI <bluetoothapis.h>
BluetoothFindDeviceClose(HBLUETOOTH_DEVICE_FIND hFind)WINBOOL WINAPI <bluetoothapis.h>
BluetoothFindFirstDevice(BLUETOOTH_DEVICE_SEARCH_PARAMS * pbtsp,BLUETOOTH_DEVICE_INFO * pbtdi)HBLUETOOTH_DEVICE_FIND WINAPI <bluetoothapis.h>
BluetoothFindFirstRadio(BLUETOOTH_FIND_RADIO_PARAMS * pbtfrp,HANDLE * phRadio)HBLUETOOTH_RADIO_FIND WINAPI <bluetoothapis.h>
BluetoothFindNextDevice(HBLUETOOTH_DEVICE_FIND hFind,BLUETOOTH_DEVICE_INFO * pbtdi)WINBOOL WINAPI <bluetoothapis.h>
BluetoothFindNextRadio(HBLUETOOTH_RADIO_FIND hFind,HANDLE * phRadio)WINBOOL WINAPI <bluetoothapis.h>
BluetoothFindRadioClose(HBLUETOOTH_RADIO_FIND hFind)WINBOOL WINAPI <bluetoothapis.h>
BluetoothGetDeviceInfo(HANDLE hRadio,BLUETOOTH_DEVICE_INFO * pbtdi)DWORD WINAPI <bluetoothapis.h>
BluetoothGetRadioInfo(HANDLE hRadio,PBLUETOOTH_RADIO_INFO pRadioInfo)DWORD WINAPI <bluetoothapis.h>
BluetoothIsConnectable(HANDLE hRadio)WINBOOL WINAPI <bluetoothapis.h>
BluetoothIsDiscoverable(HANDLE hRadio)WINBOOL WINAPI <bluetoothapis.h>
BluetoothRegisterForAuthentication(BLUETOOTH_DEVICE_INFO * pbtdi,HBLUETOOTH_AUTHENTICATION_REGISTRATION * phRegHandle,PFN_AUTHENTICATION_CALLBACK pfnCallback,PVOID pvParam)DWORD WINAPI <bluetoothapis.h>
BluetoothRegisterForAuthenticationEx(const BLUETOOTH_DEVICE_INFO * pbtdiln,HBLUETOOTH_AUTHENTICATION_REGISTRATION * phRegHandleOut,PFN_AUTHENTICATION_CALLBACK_EX pfnCallbackIn,PVOID pvParam)HRESULT WINAPI <bluetoothapis.h>
BluetoothRemoveDevice(BLUETOOTH_ADDRESS * pAddress)DWORD WINAPI <bluetoothapis.h>
BluetoothSdpEnumAttributes(LPBYTE pSDPStream,ULONG cbStreamSize,PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback,LPVOID pvParam)WINBOOL WINAPI <bluetoothapis.h>
BluetoothSdpGetAttributeValue(LPBYTE pRecordStream,ULONG cbRecordLength,USHORT usAttributeId,PSDP_ELEMENT_DATA pAttributeData)DWORD WINAPI <bluetoothapis.h>
BluetoothSdpGetContainerElementData(LPBYTE pContainerStream,ULONG cbContainerLength,HBLUETOOTH_CONTAINER_ELEMENT * pElement,PSDP_ELEMENT_DATA pData)DWORD WINAPI <bluetoothapis.h>
BluetoothSdpGetElementData(LPBYTE pSdpStream,ULONG cbSpdStreamLength,PSDP_ELEMENT_DATA pData)DWORD <bluetoothapis.h>
BluetoothSdpGetString(LPBYTE pRecordStream,ULONG cbRecordLength,PSDP_STRING_TYPE_DATA pStringData,USHORT usStringOffset,PWCHAR pszString,PULONG pcchStringLength)DWORD <bluetoothapis.h>
BluetoothSelectDevices(BLUETOOTH_SELECT_DEVICE_PARAMS * pbtsdp)WINBOOL WINAPI <bluetoothapis.h>
BluetoothSelectDevicesFree(BLUETOOTH_SELECT_DEVICE_PARAMS * pbtsdp)WINBOOL WINAPI <bluetoothapis.h>
BluetoothSendAuthenticationResponse(HANDLE hRadio,BLUETOOTH_DEVICE_INFO * pbtdi,LPWSTR pszPasskey)DWORD WINAPI <bluetoothapis.h>
BluetoothSendAuthenticationResponseEx(HANDLE hRadioIn,PBLUETOOTH_AUTHENTICATE_RESPONSE pauthResponse)HRESULT WINAPI <bluetoothapis.h>
BluetoothSetLocalServiceInfo(HANDLE hRadioIn,const GUID * pClassGuid,ULONG ulInstance,const BLUETOOTH_LOCAL_SERVICE_INFO * pServiceInfoIn)DWORD WINAPI <bluetoothapis.h>
BluetoothSetServiceState(HANDLE hRadio,BLUETOOTH_DEVICE_INFO * pbtdi,GUID * pGuidService,DWORD dwServiceFlags)DWORD WINAPI <bluetoothapis.h>
BluetoothUnregisterAuthentication(HBLUETOOTH_AUTHENTICATION_REGISTRATION hRegHandle)WINBOOL WINAPI <bluetoothapis.h>
BluetoothUpdateDeviceRecord(BLUETOOTH_DEVICE_INFO * pbtdi)DWORD WINAPI <bluetoothapis.h>
BookMark(__LONG32 dwBookMarkID)virtual HRESULT WINAPI <agtsvr.h>
boolean_array_from_ndr(Source,LowerIndex,UpperIndex,Target)<rpcndr.h>
boolean_from_ndr(source,target)<rpcndr.h>
BooleanFlagOn(F,SF) <ntifs.h>
BoundingRectFromPoints(LPPOINT,UINT,LPRECT) VOID WINAPI <penwin.h>
BreakLineA(LCID locale,UINT uCodePage,const CHAR * pszSrc,__LONG32 cchSrc,__LONG32 cMaxColumns,__LONG32 * pcchLine,__LONG32 * pcchSkip)virtual HRESULT WINAPI <mlang.h>
BreakLineML(IMLangString * pSrcMLStr,__LONG32 lSrcPos,__LONG32 lSrcLen,__LONG32 cMinColumns,__LONG32 cMaxColumns,__LONG32 * plLineLen,__LONG32 * plSkipLen)virtual HRESULT WINAPI <mlang.h>
BreakLineW(LCID locale,const WCHAR * pszSrc,__LONG32 cchSrc,__LONG32 cMaxColumns,__LONG32 * pcchLine,__LONG32 * pcchSkip)virtual HRESULT WINAPI <mlang.h>
BreakMirrorVirtualDisk(HANDLE VirtualDiskHandle)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
BreakText(TEXT_SOURCE * pTextSource,IWordSink * pWordSink,IPhraseSink * pPhraseSink)virtual HRESULT WINAPI <indexsrv.h>
BringWindowToTop(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
BringYourOwnTransaction(LPCWSTR szTipURL)virtual HRESULT WINAPI <comsvcs.h>
BroadcastSystemMessage(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI __LONG32 WINAPI <winuser.h>
BroadcastSystemMessageA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI __LONG32 WINAPI <winuser.h>
BroadcastSystemMessageEx(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo) WINUSERAPI __LONG32 WINAPI <winuser.h>
BroadcastSystemMessageExA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo) WINUSERAPI __LONG32 WINAPI <winuser.h>
BroadcastSystemMessageExW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo) WINUSERAPI __LONG32 WINAPI <winuser.h>
BroadcastSystemMessageW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI __LONG32 WINAPI <winuser.h>
BrowseForGPO(LPGPOBROWSEINFO lpBrowseInfo) GPEDITAPI HRESULT WINAPI <gpedit.h>
BrowseType(REFGUID rguidPathType,LPOLESTR pszDefaultPath,ULONG cchPath,LPOLESTR pszPath,HWND hWnd)virtual HRESULT WINAPI <datapath.h>
BROWSEUIAPI(type)<shlobj.h>
Brush()	virtual ~<gdiplusbrush.h>
Brush(const Brush & brush)	<gdiplusbrush.h>
Brush(const Brush &)	<gdiplusbrush.h>
Brush(GpBrush * brush,Status status)	<gdiplusbrush.h>
Brush(Status newStatus)	Status updateStatus<gdiplusbrush.h>
BRUSHOBJ_hGetColorTransform(BRUSHOBJ * pbo)<winddi.h>
BRUSHOBJ_pvAllocRbrush(BRUSHOBJ * pbo,ULONG cj)<winddi.h>
BRUSHOBJ_pvGetRbrush(BRUSHOBJ * pbo)<winddi.h>
BRUSHOBJ_ulGetBrushColor(BRUSHOBJ * pbo)<winddi.h>
BrushProperties()))))))))))))))))D2D1FORCEINLINE D2D1_BRUSH_PROPERTIES <d2d1helper.h>
BSTR_UserFree(ULONG *,BSTR *) void __RPC_API <xenroll.h>
BSTR_UserMarshal(ULONG *,unsigned char *,BSTR *) unsigned char<xenroll.h>
BSTR_UserSize(ULONG *,ULONG,BSTR *) ULONG __RPC_API <xenroll.h>
BSTR_UserUnmarshal(ULONG *,unsigned char *,BSTR *) unsigned char<xenroll.h>
BstrFromVector(SAFEARRAY * psa,BSTR * pbstr)WINOLEAUTAPI <oleauto.h>
BTYPE(x)<winnt.h>
Buffer(256 *2) UCHAR <winternl.h>
BufferedPaintClear(HPAINTBUFFER hBufferedPaint,const RECT * prc)THEMEAPI_<uxtheme.h>
BufferedPaintInit(VOID)THEMEAPI_<uxtheme.h>
BufferedPaintRenderAnimation(HWND hwnd,HDC hdcTarget)THEMEAPI_<uxtheme.h>
BufferedPaintSetAlpha(HPAINTBUFFER hBufferedPaint,const RECT * prc,BYTE alpha)THEMEAPI_<uxtheme.h>
BufferedPaintStopAllAnimations(HWND hwnd)THEMEAPI <uxtheme.h>
BufferedPaintUnInit(VOID)THEMEAPI_<uxtheme.h>
BuildCmd(BYTE byClassId,BYTE byInsId,BYTE byP1=0,BYTE byP2=0,LPBYTEBUFFER pbyData=0,LONG * plLe=0)virtual HRESULT WINAPI <scardssp.h>
BuildCommDCB(LPCSTR lpDef,LPDCB lpDCB) WINBASEAPI WINBOOL WINAPI <winbase.h>
BuildCommDCBA(LPCSTR lpDef,LPDCB lpDCB) WINBASEAPI WINBOOL WINAPI <winbase.h>
BuildCommDCBAndTimeouts(LPCSTR lpDef,LPDCB lpDCB,LPCOMMTIMEOUTS lpCommTimeouts) WINBASEAPI WINBOOL WINAPI <winbase.h>
BuildCommDCBAndTimeoutsA(LPCSTR lpDef,LPDCB lpDCB,LPCOMMTIMEOUTS lpCommTimeouts) WINBASEAPI WINBOOL WINAPI <winbase.h>
BuildCommDCBAndTimeoutsW(LPCWSTR lpDef,LPDCB lpDCB,LPCOMMTIMEOUTS lpCommTimeouts) WINBASEAPI WINBOOL WINAPI <winbase.h>
BuildCommDCBW(LPCWSTR lpDef,LPDCB lpDCB) WINBASEAPI WINBOOL WINAPI <winbase.h>
BuildDisplayTable(LPALLOCATEBUFFER lpAllocateBuffer,LPALLOCATEMORE lpAllocateMore,LPFREEBUFFER lpFreeBuffer,LPMALLOC lpMalloc,HINSTANCE hInstance,UINT cPages,LPDTPAGE lpPage,ULONG ulFlags,LPMAPITABLE * lppTable,LPTABLEDATA * lppTblData) STDAPI <wabutil.h>
BuildExplicitAccessWithName(PEXPLICIT_ACCESS_A pExplicitAccess,LPSTR pTrusteeName,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance) WINADVAPI VOID WINAPI <aclapi.h>
BuildExplicitAccessWithNameA(PEXPLICIT_ACCESS_A pExplicitAccess,LPSTR pTrusteeName,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance) WINADVAPI VOID WINAPI <aclapi.h>
BuildExplicitAccessWithNameW(PEXPLICIT_ACCESS_W pExplicitAccess,LPWSTR pTrusteeName,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance) WINADVAPI VOID WINAPI <aclapi.h>
BuildImpersonateExplicitAccessWithName(PEXPLICIT_ACCESS_A pExplicitAccess,LPSTR pTrusteeName,PTRUSTEE_A pTrustee,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance) WINADVAPI VOID WINAPI <aclapi.h>
BuildImpersonateExplicitAccessWithNameA(PEXPLICIT_ACCESS_A pExplicitAccess,LPSTR pTrusteeName,PTRUSTEE_A pTrustee,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance) WINADVAPI VOID WINAPI <aclapi.h>
BuildImpersonateExplicitAccessWithNameW(PEXPLICIT_ACCESS_W pExplicitAccess,LPWSTR pTrusteeName,PTRUSTEE_W pTrustee,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance) WINADVAPI VOID WINAPI <aclapi.h>
BuildImpersonateTrustee(PTRUSTEE_A pTrustee,PTRUSTEE_A pImpersonateTrustee) WINADVAPI VOID WINAPI <aclapi.h>
BuildImpersonateTrusteeA(PTRUSTEE_A pTrustee,PTRUSTEE_A pImpersonateTrustee) WINADVAPI VOID WINAPI <aclapi.h>
BuildImpersonateTrusteeW(PTRUSTEE_W pTrustee,PTRUSTEE_W pImpersonateTrustee) WINADVAPI VOID WINAPI <aclapi.h>
BuildINIPath(char * FullPath,char * IniFileName) LPSTR __cdecl <netmon.h>
BuildSecurityDescriptor(PTRUSTEE_A pOwner,PTRUSTEE_A pGroup,ULONG cCountOfAccessEntries,PEXPLICIT_ACCESS_A pListOfAccessEntries,ULONG cCountOfAuditEntries,PEXPLICIT_ACCESS_A pListOfAuditEntries,PSECURITY_DESCRIPTOR pOldSD,PULONG pSizeNewSD,PSECURITY_DESCRIPTOR * pNewSD) WINADVAPI DWORD WINAPI <aclapi.h>
BuildSecurityDescriptorA(PTRUSTEE_A pOwner,PTRUSTEE_A pGroup,ULONG cCountOfAccessEntries,PEXPLICIT_ACCESS_A pListOfAccessEntries,ULONG cCountOfAuditEntries,PEXPLICIT_ACCESS_A pListOfAuditEntries,PSECURITY_DESCRIPTOR pOldSD,PULONG pSizeNewSD,PSECURITY_DESCRIPTOR * pNewSD) WINADVAPI DWORD WINAPI <aclapi.h>
BuildSecurityDescriptorW(PTRUSTEE_W pOwner,PTRUSTEE_W pGroup,ULONG cCountOfAccessEntries,PEXPLICIT_ACCESS_W pListOfAccessEntries,ULONG cCountOfAuditEntries,PEXPLICIT_ACCESS_W pListOfAuditEntries,PSECURITY_DESCRIPTOR pOldSD,PULONG pSizeNewSD,PSECURITY_DESCRIPTOR * pNewSD) WINADVAPI DWORD WINAPI <aclapi.h>
BuildTrusteeWithName(PTRUSTEE_A pTrustee,LPSTR pName) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithNameA(PTRUSTEE_A pTrustee,LPSTR pName) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithNameW(PTRUSTEE_W pTrustee,LPWSTR pName) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithObjectsAndName(PTRUSTEE_A pTrustee,POBJECTS_AND_NAME_A pObjName,SE_OBJECT_TYPE ObjectType,LPSTR ObjectTypeName,LPSTR InheritedObjectTypeName,LPSTR Name) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithObjectsAndNameA(PTRUSTEE_A pTrustee,POBJECTS_AND_NAME_A pObjName,SE_OBJECT_TYPE ObjectType,LPSTR ObjectTypeName,LPSTR InheritedObjectTypeName,LPSTR Name) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithObjectsAndNameW(PTRUSTEE_W pTrustee,POBJECTS_AND_NAME_W pObjName,SE_OBJECT_TYPE ObjectType,LPWSTR ObjectTypeName,LPWSTR InheritedObjectTypeName,LPWSTR Name) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithObjectsAndSid(PTRUSTEE_A pTrustee,POBJECTS_AND_SID pObjSid,GUID * pObjectGuid,GUID * pInheritedObjectGuid,PSID pSid) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithObjectsAndSidA(PTRUSTEE_A pTrustee,POBJECTS_AND_SID pObjSid,GUID * pObjectGuid,GUID * pInheritedObjectGuid,PSID pSid) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithObjectsAndSidW(PTRUSTEE_W pTrustee,POBJECTS_AND_SID pObjSid,GUID * pObjectGuid,GUID * pInheritedObjectGuid,PSID pSid) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithSid(PTRUSTEE_A pTrustee,PSID pSid) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithSidA(PTRUSTEE_A pTrustee,PSID pSid) WINADVAPI VOID WINAPI <aclapi.h>
BuildTrusteeWithSidW(PTRUSTEE_W pTrustee,PSID pSid) WINADVAPI VOID WINAPI <aclapi.h>
BusContext(IN PVOID) IN PVOID <usbbusif.h>
Button_Enable(hwndCtl,fEnable)<windowsx.h>
Button_GetCheck(hwndCtl)<windowsx.h>
Button_GetIdealSize(hwnd,psize)<commctrl.h>
Button_GetImageList(hwnd,pbuttonImagelist)<commctrl.h>
Button_GetNote(hwnd, psz, pcc)<commctrl.h>
Button_GetSplitInfo(hwnd, pInfo)<commctrl.h>
Button_GetState(hwndCtl)<windowsx.h>
Button_GetText(hwndCtl,lpch,cchMax)<windowsx.h>
Button_GetTextLength(hwndCtl)<windowsx.h>
Button_GetTextMargin(hwnd,pmargin)<commctrl.h>
Button_SetCheck(hwndCtl,check)<windowsx.h>
Button_SetDropDownState(hwnd, fDropDown)<commctrl.h>
Button_SetElevationRequiredState(hwnd, fRequired)<commctrl.h>
Button_SetImageList(hwnd,pbuttonImagelist)<commctrl.h>
Button_SetNote(hwnd, psz)<commctrl.h>
Button_SetSplitInfo(hwnd, pInfo)<commctrl.h>
Button_SetState(hwndCtl,state)<windowsx.h>
Button_SetStyle(hwndCtl,style,fRedraw)<windowsx.h>
Button_SetText(hwndCtl,lpsz)<windowsx.h>
Button_SetTextMargin(hwnd,pmargin)<commctrl.h>
ButtonActivate(void)virtual HRESULT WINAPI <strmif.h>
ButtonSelectAndActivate(ULONG ulButton)virtual HRESULT WINAPI <strmif.h>
BYTE0(n)<wsdxml.h>
BYTE1(n)<wsdxml.h>
BYTE2(n)<wsdxml.h>
BYTE3(n)<wsdxml.h>
byte_array_from_ndr(Source,LowerIndex,UpperIndex,Target)<rpcndr.h>
byte_from_ndr(source,target)<rpcndr.h>
BYTE_OFFSET(Va)<wdm.h>
BYTES(n)<wsdxml.h>
BYTES_TO_PAGES(Size)<wdm.h>
BytesToUnicode(BYTE * lpMultiByteStr,UINT cchMultiByte,UINT * pcchLeftOverBytes,LPWSTR lpWideCharStr,UINT cchWideChar)STDAPI_<gb18030.h>
ByteToBinary(LPSTR string,DWORD ByteValue) DWORD WINAPI <netmon.h>
C_ASSERT(expr)<winnt.h>
CACHE_ACCESS_CHECK(PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE hClientToken,DWORD dwDesiredAccess,PGENERIC_MAPPING GenericMapping,PRIVILEGE_SET * PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus) typedef WINBOOL<filehc.h>
CACHE_DESTROY_CALLBACK(DWORD cb,LPBYTE lpb) typedef void<filehc.h>
CACHE_KEY_COMPARE(DWORD cbKey1,LPBYTE lpbKey1,DWORD cbKey2,LPBYTE lpbKey2) typedef int<filehc.h>
CACHE_KEY_HASH(LPBYTE lpbKey,DWORD cbKey) typedef DWORD<filehc.h>
CACHE_READ_CALLBACK(DWORD cb,LPBYTE lpb,LPVOID lpvContext) typedef WINBOOL<filehc.h>
CacheCreateFile(LPSTR lpstrName,FCACHE_CREATE_CALLBACK pfnCallBack,LPVOID lpv,WINBOOL fAsyncContext) FILEHC_EXPORT FIO_CONTEXT<filehc.h>
CachedBitmap()__inline__ ::~<gdiplusimpl.h>
CachedBitmap(Bitmap * bitmap,Graphics * graphics)__inline__ ::<gdiplusimpl.h>
CachedBitmap(const CachedBitmap &)	<gdiplusimpl.h>
CacheHint(int nStartIndex,int nEndIndex)virtual HRESULT WINAPI <mmc.h>
CacheLineFlush(Address)<winnt.h>
CacheOLEServer(IOleObject * pole)virtual HRESULT WINAPI <shdeprecated.h>
CacheRemoveFiles(LPSTR lpstrName,WINBOOL fAllPrefixes) FILEHC_EXPORT void WINAPI <filehc.h>
CacheRichCreateFile(LPSTR lpstrName,FCACHE_RICHCREATE_CALLBACK pfnCallBack,LPVOID lpv,WINBOOL fAsyncContext) FILEHC_EXPORT FIO_CONTEXT<filehc.h>
CADORecordBinding(const ADO_BINDING_ENTRY *,GetADOBindingEntries) STDMETHOD_<icrsint.h>
CalculatePopupWindowPosition(const POINT * anchorPoint,const SIZE * windowSize,UINT flags,RECT * excludeRect,RECT * popupWindowPosition) WINUSERAPI WINBOOL WINAPI <winuser.h>
Calibrate(HEVENT hEvent,LONG Mode,LONG * pStatus)virtual HRESULT WINAPI <strmif.h>
CALINFO_ENUMPROCA(LPSTR) typedef WINBOOL<winnls.h>
CALINFO_ENUMPROCEXA(LPSTR,CALID) typedef WINBOOL<winnls.h>
CALINFO_ENUMPROCEXEX(LPWSTR,CALID,LPWSTR,LPARAM) typedef WINBOOL<winnls.h>
CALINFO_ENUMPROCEXW(LPWSTR,CALID) typedef WINBOOL<winnls.h>
CALINFO_ENUMPROCW(LPWSTR) typedef WINBOOL<winnls.h>
CALLBACK(LPDCISURFACEINFO,LPVOID)void<wincrypt.h>
CALLBACK(LPOLECLIENT,OLE_NOTIFICATION,LPOLEOBJECT)int<wincrypt.h>
CALLBACK(LPOLEOBJECT,OLE_LPCSTR)void<wincrypt.h>
CALLBACK(LPVOID)void<wincrypt.h>
CALLBACK(struct _NCB *)void<wincrypt.h>
CallBackContext(IN PVOID) IN PVOID <hubbusif.h>
CallbackMayRunLong(PTP_CALLBACK_INSTANCE pci) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
CallbackRoutine(IN PVOID BusContext,IN PVOID CallbackContext,IN PRH_INIT_CALLBACK) IN PRH_INIT_CALLBACK <psdk>
CALLERRELEASE(ULONG ulCallerData,LPTABLEDATA lpTblData,LPMAPITABLE lpVue) typedef void<wabutil.h>
CallIndirect(HRESULT * phrReturn,ULONG iMethod,void * pvArgs,ULONG * cbArgs)virtual HRESULT WINAPI <callobj.h>
CallMgrReserved(PVOID)UCHAR <ndis.h>
CallMsgFilter(LPMSG lpMsg,int nCode) WINUSERAPI WINBOOL WINAPI <winuser.h>
CallMsgFilterA(LPMSG lpMsg,int nCode) WINUSERAPI WINBOOL WINAPI <winuser.h>
CallMsgFilterW(LPMSG lpMsg,int nCode) WINUSERAPI WINBOOL WINAPI <winuser.h>
CallNamedPipe(LPCSTR lpNamedPipeName,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,DWORD nTimeOut) WINBASEAPI WINBOOL WINAPI <winbase.h>
CallNamedPipeA(LPCSTR lpNamedPipeName,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,DWORD nTimeOut) WINBASEAPI WINBOOL WINAPI <winbase.h>
CallNamedPipeW(LPCWSTR lpNamedPipeName,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,DWORD nTimeOut) WINBASEAPI WINBOOL WINAPI <winbase.h>
CallNextHookEx(HHOOK hhk,int nCode,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CallNtPowerInformation(POWER_INFORMATION_LEVEL,PVOID,ULONG,PVOID,ULONG) NTSTATUS WINAPI <powrprof.h>
CallProcEx32W(DWORD,DWORD,DWORD,...) DWORD CDECL <wownt16.h>
CallRouterFindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,HANDLE hNotify,PPRINTER_NOTIFY_OPTIONS pPrinterNotifyOptions)DWORD WINAPI <winsplp.h>
CallWindowProc(FARPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CallWindowProc(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CallWindowProcA(FARPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CallWindowProcA(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CallWindowProcW(FARPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CallWindowProcW(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
CanBePooled(VARIANT_BOOL * pbPoolable)virtual HRESULT WINAPI <comsvcs.h>
CanBePooled(void)virtual WINBOOL WINAPI <comsvcs.h>
Cancel(BSTR EmailList,VARIANT_BOOL CleanupCalendar,BSTR UserName,BSTR Password,ICalendarMessage ** Request)virtual HRESULT WINAPI <resapi.h>
Cancel(void)virtual HRESULT WINAPI <resapi.h>
CancelAsyncCall(IWbemObjectSink * pSink)virtual HRESULT WINAPI <wmiatlprov.h>
CancelConnectNotify(LPNOTIFYINFO lpNotifyInfo,LPNOTIFYCANCEL lpCancelInfo)DWORD WINAPI <npapi.h>
CancelDC(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
CancelDefaultHandling(__LONG32 lEvCode)virtual HRESULT WINAPI <control.h>
CancelDeviceWakeupRequest(HANDLE hDevice) WINBASEAPI WINBOOL WINAPI <winbase.h>
CancelGroup(void)virtual HRESULT WINAPI <qmgr.h>
CancelIo(HANDLE hFile) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
CancelIoEx(HANDLE hFile,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
CancelIPChangeNotify(LPOVERLAPPED notifyOverlapped) WINBOOL WINAPI <iphlpapi.h>
CancelJob(void)virtual HRESULT WINAPI <qmgr.h>
CancelMibChangeNotify2(HANDLE NotificationHandle) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
CancelNtmsLibraryRequest(HANDLE hSession,LPNTMS_GUID lpRequestId) DWORD WINAPI <ntmsapi.h>
CancelNtmsOperatorRequest(HANDLE hSession,LPNTMS_GUID lpRequestId) DWORD WINAPI <ntmsapi.h>
CancelPendingIO(void)virtual HRESULT WINAPI <wia.h>
CancelShutdown(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
CancelStep(void)virtual HRESULT WINAPI <strmif.h>
CancelSynchronousIo(HANDLE hThread) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
CancelThreadpoolIo(PTP_IO pio) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CancelTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer) WINBASEAPI WINBOOL WINAPI <winbase.h>
CancelWaitableTimer(HANDLE hTimer) WINBASEAPI WINBOOL WINAPI <synchapi.h>
CanChange(__LONG32 * pB)virtual HRESULT WINAPI <tom.h>
CanConvert(DBTYPE wFromType,DBTYPE wToType,DBCONVERTFLAGS dwConvertFlags)virtual HRESULT WINAPI <oledb.h>
CanConvert(DBTYPE wSrcType,DBTYPE wDstType)virtual HRESULT WINAPI <oledb.h>
CanConvertData(__LONG32 vt1,__LONG32 vt2)virtual HRESULT WINAPI <simpdc.h>
CanEdit(__LONG32 * pbCanEdit)virtual HRESULT WINAPI <tom.h>
CanNavigateNow(void)virtual HRESULT WINAPI <shdeprecated.h>
CanNodeBeClustered(void)virtual HRESULT WINAPI <cluscfgserver.h>
CanonHex(UCHAR * pDest,UCHAR * pSource,int iLen,WINBOOL fOx) void WINAPI <netmon.h>
CanonicalizeHexString(LPSTR hex,LPSTR dest,DWORD len) VOID WINAPI <netmon.h>
CanPaste(VARIANT * pVar,__LONG32 Format,__LONG32 * pb)virtual HRESULT WINAPI <tom.h>
CanResourceBeDependent(HRESOURCE hResource,HRESOURCE hResourceDependent) WINBOOL WINAPI <msclus.h>
CanResourceBeDependent(ISClusResource * pResource,VARIANT * pvarDependent)virtual HRESULT WINAPI <msclus.h>
CanRoute(LONG OutputPinIndex,LONG InputPinIndex)virtual HRESULT WINAPI <strmif.h>
CanSeekBackward(LONG * pCanSeekBackward)virtual HRESULT WINAPI <control.h>
CanSeekForward(LONG * pCanSeekForward)virtual HRESULT WINAPI <control.h>
CanStep(LONG bMultiple,IUnknown * pStepObject)virtual HRESULT WINAPI <strmif.h>
CanUserWritePwrScheme(VOID) BOOLEAN WINAPI <powrprof.h>
capCaptureAbort(hwnd)<vfw.h>
capCaptureGetSetup(hwnd,s,wSize)<vfw.h>
capCaptureSequence(hwnd)<vfw.h>
capCaptureSequenceNoFile(hwnd)<vfw.h>
capCaptureSetSetup(hwnd,s,wSize)<vfw.h>
capCaptureSingleFrame(hwnd)<vfw.h>
capCaptureSingleFrameClose(hwnd)<vfw.h>
capCaptureSingleFrameOpen(hwnd)<vfw.h>
capCaptureStop(hwnd)<vfw.h>
CAPCONTROLCALLBACK(HWND hWnd,int nState) typedef LRESULT<vfw.h>
capCreateCaptureWindow(LPCSTR lpszWindowName,DWORD dwStyle,int x,int y,int nWidth,int nHeight,HWND hwndParent,int nID)<vfw.h>
capCreateCaptureWindowA(LPCSTR lpszWindowName,DWORD dwStyle,int x,int y,int nWidth,int nHeight,HWND hwndParent,int nID) HWND WINAPI <vfw.h>
capCreateCaptureWindowW(LPCWSTR lpszWindowName,DWORD dwStyle,int x,int y,int nWidth,int nHeight,HWND hwndParent,int nID) HWND WINAPI <vfw.h>
capDlgVideoCompression(hwnd)<vfw.h>
capDlgVideoDisplay(hwnd)<vfw.h>
capDlgVideoFormat(hwnd)<vfw.h>
capDlgVideoSource(hwnd)<vfw.h>
capDriverConnect(hwnd,i)<vfw.h>
capDriverDisconnect(hwnd)<vfw.h>
capDriverGetCaps(hwnd,s,wSize)<vfw.h>
capDriverGetName(hwnd,szName,wSize)<vfw.h>
capDriverGetVersion(hwnd,szVer,wSize)<vfw.h>
capEditCopy(hwnd)<vfw.h>
CAPERRORCALLBACKA(HWND hWnd,int nID,LPCSTR lpsz) typedef LRESULT<vfw.h>
CAPERRORCALLBACKW(HWND hWnd,int nID,LPCWSTR lpsz) typedef LRESULT<vfw.h>
capFileAlloc(hwnd,dwSize)<vfw.h>
capFileGetCaptureFile(hwnd,szName,wSize)<vfw.h>
capFileSaveAs(hwnd,szName)<vfw.h>
capFileSaveDIB(hwnd,szName)<vfw.h>
capFileSetCaptureFile(hwnd,szName)<vfw.h>
capFileSetInfoChunk(hwnd,lpInfoChunk)<vfw.h>
capGetAudioFormat(hwnd,s,wSize)<vfw.h>
capGetAudioFormatSize(hwnd)<vfw.h>
capGetDriverDescription(UINT wDriverIndex,LPSTR lpszName,int cbName,LPSTR lpszVer,int cbVer)<vfw.h>
capGetDriverDescriptionA(UINT wDriverIndex,LPSTR lpszName,int cbName,LPSTR lpszVer,int cbVer) WINBOOL WINAPI <vfw.h>
capGetDriverDescriptionW(UINT wDriverIndex,LPWSTR lpszName,int cbName,LPWSTR lpszVer,int cbVer) WINBOOL WINAPI <vfw.h>
capGetMCIDeviceName(hwnd,szName,wSize)<vfw.h>
capGetStatus(hwnd,s,wSize)<vfw.h>
capGetUserData(hwnd)<vfw.h>
capGetVideoFormat(hwnd,s,wSize)<vfw.h>
capGetVideoFormatSize(hwnd)<vfw.h>
capGrabFrame(hwnd)<vfw.h>
capGrabFrameNoStop(hwnd)<vfw.h>
capOverlay(hwnd,f)<vfw.h>
capPaletteAuto(hwnd,iFrames,iColors)<vfw.h>
capPaletteManual(hwnd,fGrab,iColors)<vfw.h>
capPaletteOpen(hwnd,szName)<vfw.h>
capPalettePaste(hwnd)<vfw.h>
capPaletteSave(hwnd,szName)<vfw.h>
capPreview(hwnd,f)<vfw.h>
capPreviewRate(hwnd,wMS)<vfw.h>
capPreviewScale(hwnd,f)<vfw.h>
capSetAudioFormat(hwnd,s,wSize)<vfw.h>
capSetCallbackOnCapControl(hwnd,fpProc)<vfw.h>
capSetCallbackOnError(hwnd,fpProc)<vfw.h>
capSetCallbackOnFrame(hwnd,fpProc)<vfw.h>
capSetCallbackOnStatus(hwnd,fpProc)<vfw.h>
capSetCallbackOnVideoStream(hwnd,fpProc)<vfw.h>
capSetCallbackOnWaveStream(hwnd,fpProc)<vfw.h>
capSetCallbackOnYield(hwnd,fpProc)<vfw.h>
capSetMCIDeviceName(hwnd,szName)<vfw.h>
capSetScrollPos(hwnd,lpP)<vfw.h>
capSetUserData(hwnd,lUser)<vfw.h>
capSetVideoFormat(hwnd,s,wSize)<vfw.h>
CAPSTATUSCALLBACKA(HWND hWnd,int nID,LPCSTR lpsz) typedef LRESULT<vfw.h>
CAPSTATUSCALLBACKW(HWND hWnd,int nID,LPCWSTR lpsz) typedef LRESULT<vfw.h>
CAPVIDEOCALLBACK(HWND hWnd,LPVIDEOHDR lpVHdr) typedef LRESULT<vfw.h>
CAPWAVECALLBACK(HWND hWnd,LPWAVEHDR lpWHdr) typedef LRESULT<vfw.h>
CAPYIELDCALLBACK(HWND hWnd) typedef LRESULT<vfw.h>
CardAcquireContext(PCARD_DATA pCardData,DWORD dwFlags)DWORD WINAPI <cardmod.h>
CardDeleteContainer(PCARD_DATA pCardData,BYTE bContainerIndex,DWORD dwReserved)DWORD WINAPI <cardmod.h>
CascadeWindows(HWND hwndParent,UINT wHow,CONST RECT * lpRect,UINT cKids,const HWND * lpKids) WINUSERAPI WORD WINAPI <winuser.h>
CAST_MIB_INFO(X,Y,Z)<iprtrmib.h>
CAudioCaptureTerminal() virtual ~<msptrmac.h>
CAudioCaptureTerminal(CComPtr<IMoniker> pMoniker,MSP_HANDLE htAddress,ITTerminal ** ppTerm) static HRESULT CreateTerminal<msptrmac.h>
CAudioCaptureTerminal(get_Balance) STDMETHOD<msptrmac.h>
CAudioCaptureTerminal(get_Volume) STDMETHOD<msptrmac.h>
CAudioCaptureTerminal(get_WaveId) STDMETHOD<msptrmac.h>
CAudioCaptureTerminal(IGraphBuilder * pGraph,DWORD dwReserved) STDMETHODIMP DisconnectTerminal<msptrmac.h>
CAudioCaptureTerminal(put_Balance) STDMETHOD<msptrmac.h>
CAudioCaptureTerminal(put_Volume) STDMETHOD<msptrmac.h>
CAudioCaptureTerminal(void) virtual DWORD GetSupportedMediaTypes<msptrmac.h>
CAudioRenderTerminal() virtual ~<msptrmar.h>
CAudioRenderTerminal(CComPtr<IMoniker> pMoniker,MSP_HANDLE htAddress,ITTerminal ** ppTerm) static HRESULT CreateTerminal<msptrmar.h>
CAudioRenderTerminal(get_Balance) STDMETHOD<msptrmar.h>
CAudioRenderTerminal(get_Volume) STDMETHOD<msptrmar.h>
CAudioRenderTerminal(get_WaveId) STDMETHOD<msptrmar.h>
CAudioRenderTerminal(IGraphBuilder * pGraph,DWORD dwReserved) STDMETHODIMP DisconnectTerminal<msptrmar.h>
CAudioRenderTerminal(put_Balance) STDMETHOD<msptrmar.h>
CAudioRenderTerminal(put_Volume) STDMETHOD<msptrmar.h>
CAudioRenderTerminal(void) virtual DWORD GetSupportedMediaTypes<msptrmar.h>
CBADMITRESULT(LPM_HANDLE LpmHandle,RHANDLE RequestHandle,ULONG ulPcmActionFlags,int LpmError,int PolicyDecisionsCount,POLICY_DECISION * pPolicyDecisions) typedef ULONG<lpmapi.h>
CbADRLIST(_lpadrlist)<wabdefs.h>
CBaseTerminal() virtual ~<mspterm.h>
CBaseTerminal(__LONG32 lMediaType) WINBOOL MediaTypeSupported<mspterm.h>
CBaseTerminal(CompleteConnectTerminal) STDMETHOD<mspterm.h>
CBaseTerminal(ConnectTerminal) STDMETHOD<mspterm.h>
CBaseTerminal(DisconnectTerminal) STDMETHOD<mspterm.h>
CBaseTerminal(get_AddressHandle) STDMETHOD<mspterm.h>
CBaseTerminal(get_Direction) STDMETHOD<mspterm.h>
CBaseTerminal(get_MediaType) STDMETHOD<mspterm.h>
CBaseTerminal(get_Name) STDMETHOD<mspterm.h>
CBaseTerminal(get_State) STDMETHOD<mspterm.h>
CBaseTerminal(get_TerminalClass) STDMETHOD<mspterm.h>
CBaseTerminal(get_TerminalType) STDMETHOD<mspterm.h>
CBaseTerminal(IGraphBuilder * pGraph,DWORD * pdwNumPins) virtual HRESULT GetNumExposedPins<mspterm.h>
CBaseTerminal(IID iidTerminalClass,DWORD dwMediaType,TERMINAL_DIRECTION Direction,MSP_HANDLE htAddress) virtual HRESULT Initialize<mspterm.h>
CBaseTerminal(IPin ** ppPins) virtual HRESULT GetExposedPins<mspterm.h>
CBaseTerminal(RunRenderFilter) STDMETHOD<mspterm.h>
CBaseTerminal(StopRenderFilter) STDMETHOD<mspterm.h>
CBaseTerminal(void) virtual DWORD GetSupportedMediaTypes<mspterm.h>
CBaseUnknown()COMDDKMETHOD virtual ~<kcom.h>
CBaseUnknown(IUnknown * UnknownOuter=NULL)COMDDKMETHOD <kcom.h>
CBaseUnknown(REFCLSID ClassId,IUnknown * UnknownOuter=NULL)COMDDKMETHOD <kcom.h>
CBaseUnknown(REFIID InterfaceId,PVOID * Interface)COMDDKMETHOD STDMETHODIMP NonDelegatedQueryInterface<kcom.h>
CBaseUnknown(ULONG)COMDDKMETHOD STDMETHODIMP_<kcom.h>
CbENTRYID(_cb)<wabdefs.h>
CbFLATENTRY(_lpentry)<wabdefs.h>
CbFLATENTRYLIST(_lplist)<wabdefs.h>
CbFLATMTSIDLIST(_lplist)<wabdefs.h>
CBGETRSVPOBJECTS(LPM_HANDLE LpmHandle,RHANDLE RequestHandle,int LpmError,int RsvpObjectsCount,RsvpObjHdr ** ppRsvpObjects) typedef ULONG<lpmapi.h>
CbMAPIFormInfoArray(	_c)<mapiform.h>
CbMAPIFormInfoArray(_c)<mapiform.h>
CbMAPIFormPropArray(	_c)<mapiform.h>
CbMAPIFormPropArray(_c)<mapiform.h>
CbMAPIVerbArray(	_c)<mapiform.h>
CbMAPIVerbArray(_c)<mapiform.h>
CbMessageClassArray(	_c)<mapiform.h>
CbMessageClassArray(_c)<mapiform.h>
CbMTSID(_lpentry)<wabdefs.h>
CbNewADRLIST(_centries)<wabdefs.h>
CbNewENTRYID(_cb)<wabdefs.h>
CbNewFLATENTRY(_cb)<wabdefs.h>
CbNewFLATENTRYLIST(_cb)<wabdefs.h>
CbNewFLATMTSIDLIST(_cb)<wabdefs.h>
CbNewMTSID(_cb)<wabdefs.h>
CbNewNOTIFKEY(_cb)<wabnot.h>
CbNewSPropAttrArray(	_cattr)<imessage.h>
CbNewSPropAttrArray(_cattr)<imessage.h>
CbNewSPropProblemArray(	_cprob)<wabdefs.h>
CbNewSPropProblemArray(_cprob)<wabdefs.h>
CbNewSPropTagArray(	_ctag)<wabdefs.h>
CbNewSPropTagArray(_ctag)<wabdefs.h>
CbNewSRowSet(	_crow)<wabdefs.h>
CbNewSRowSet(_crow)<wabdefs.h>
CbNewSSortOrderSet(	_csort)<wabdefs.h>
CbNewSSortOrderSet(_csort)<wabdefs.h>
CbNewSTnefProblemArray(	_cprob)<tnef.h>
CbNewSTnefProblemArray(_cprob)<tnef.h>
CbNOTIFKEY(_lpkey)<wabnot.h>
CbOfTrp(_p)<tnef.h>
CBPCLIPDATA(clipdata)<wtypes.h>
CbSPropAttrArray(	_lparray)<imessage.h>
CbSPropAttrArray(_lparray)<imessage.h>
CbSPropProblemArray(	_lparray)<wabdefs.h>
CbSPropProblemArray(_lparray)<wabdefs.h>
CbSPropTagArray(	_lparray)<wabdefs.h>
CbSPropTagArray(_lparray)<wabdefs.h>
CbSRowSet(	_lprowset)<wabdefs.h>
CbSRowSet(_lprowset)<wabdefs.h>
CbSSortOrderSet(	_lpset)<wabdefs.h>
CbSSortOrderSet(_lpset)<wabdefs.h>
CbSTnefProblemArray(	_lparray)<tnef.h>
CbSTnefProblemArray(_lparray)<tnef.h>
Cbtszsize(	_a)<mapiwin.h>
Cbtszsize(_a)<mapiwin.h>
CbtszsizeA(_a)<mapiwin.h>
CbtszsizeW(_a)<mapiwin.h>
cBytes() ULONG <winbase.h>
CcCanIWrite(IN PFILE_OBJECT FileObject,IN ULONG BytesToWrite,IN BOOLEAN Wait,IN BOOLEAN Retrying)<ntifs.h>
CcCoherencyFlushAndPurgeCache(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN PLARGE_INTEGER FileOffset OPTIONAL,IN ULONG Length,OUT PIO_STATUS_BLOCK IoStatus,IN ULONG Flags OPTIONAL)<ntifs.h>
CcCopyRead(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN BOOLEAN Wait,OUT PVOID Buffer,OUT PIO_STATUS_BLOCK IoStatus)<ntifs.h>
CcCopyWrite(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN BOOLEAN Wait,IN PVOID Buffer)<ntifs.h>
CcCopyWriteWontFlush(FO, FOFF, LEN)<ntifs.h>
CcCopyWriteWontFlush(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length)<ntifs.h>
CcDeferWrite(IN PFILE_OBJECT FileObject,IN PCC_POST_DEFERRED_WRITE PostRoutine,IN PVOID Context1,IN PVOID Context2,IN ULONG BytesToWrite,IN BOOLEAN Retrying)<ntifs.h>
CcFastCopyRead(IN PFILE_OBJECT FileObject,IN ULONG FileOffset,IN ULONG Length,IN ULONG PageCount,OUT PVOID Buffer,OUT PIO_STATUS_BLOCK IoStatus)<ntifs.h>
CcFastCopyWrite(IN PFILE_OBJECT FileObject,IN ULONG FileOffset,IN ULONG Length,IN PVOID Buffer)<ntifs.h>
CcFlushCache(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN PLARGE_INTEGER FileOffset OPTIONAL,IN ULONG Length,OUT PIO_STATUS_BLOCK IoStatus OPTIONAL)<ntifs.h>
CcGetDirtyPages(IN PVOID LogHandle,IN PDIRTY_PAGE_ROUTINE DirtyPageRoutine,IN PVOID Context1,IN PVOID Context2)<ntifs.h>
CcGetFileObjectFromBcb(IN PVOID Bcb)<ntifs.h>
CcGetFileObjectFromSectionPtrs(IN PSECTION_OBJECT_POINTERS SectionObjectPointer)<ntifs.h>
CcGetFileObjectFromSectionPtrsRef(IN PSECTION_OBJECT_POINTERS SectionObjectPointer)<ntifs.h>
CcGetFileSizePointer(FO)<ntifs.h>
CcGetFlushedValidData(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN BOOLEAN BcbListHeld)<ntifs.h>
CcGetLsnForFileObject(IN PFILE_OBJECT FileObject,OUT PLARGE_INTEGER OldestLsn OPTIONAL)<ntifs.h>
CCHeapAlloc(DWORD dwBytes,WINBOOL bZeroInit) LPVOID WINAPI <netmon.h>
CCHeapFree(LPVOID lpMem) WINBOOL WINAPI <netmon.h>
CCHeapReAlloc(LPVOID lpMem,DWORD dwBytes,WINBOOL bZeroInit) LPVOID WINAPI <netmon.h>
CCHeapSize(LPVOID lpMem) SIZE_T WINAPI <netmon.h>
CcInitializeCacheMap(IN PFILE_OBJECT FileObject,IN PCC_FILE_SIZES FileSizes,IN BOOLEAN PinAccess,IN PCACHE_MANAGER_CALLBACKS Callbacks,IN PVOID LazyWriteContext)<ntifs.h>
CcIsFileCached(FO)<ntifs.h>
CcIsThereDirtyData(IN PVPB Vpb)<ntifs.h>
CcIsThereDirtyDataEx(IN PVPB Vpb,IN PULONG NumberOfDirtyPages OPTIONAL)<ntifs.h>
CcMapData(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN BOOLEAN Wait,OUT PVOID * Bcb,OUT PVOID * Buffer)<ntifs.h>
CcMapData(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN ULONG Flags,OUT PVOID * Bcb,OUT PVOID * Buffer)<ntifs.h>
CcMdlRead(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,OUT PMDL * MdlChain,OUT PIO_STATUS_BLOCK IoStatus)<ntifs.h>
CcMdlReadComplete(IN PFILE_OBJECT FileObject,IN PMDL MdlChain)<ntifs.h>
CcMdlWriteAbort(IN PFILE_OBJECT FileObject,IN PMDL MdlChain)<ntifs.h>
CcMdlWriteComplete(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN PMDL MdlChain)<ntifs.h>
CcPinMappedData(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN ULONG Flags,IN OUT PVOID * Bcb)<ntifs.h>
CcPinRead(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN ULONG Flags,OUT PVOID * Bcb,OUT PVOID * Buffer)<ntifs.h>
CcPrepareMdlWrite(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,OUT PMDL * MdlChain,OUT PIO_STATUS_BLOCK IoStatus)<ntifs.h>
CcPreparePinWrite(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN BOOLEAN Zero,IN ULONG Flags,OUT PVOID * Bcb,OUT PVOID * Buffer)<ntifs.h>
CcPurgeCacheSection(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN PLARGE_INTEGER FileOffset OPTIONAL,IN ULONG Length,IN BOOLEAN UninitializeCacheMaps)<ntifs.h>
CcPurgeCacheSection(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN PLARGE_INTEGER FileOffset OPTIONAL,IN ULONG Length,IN ULONG Flags)<ntifs.h>
CcReadAhead(FO, FOFF, LEN)<ntifs.h>
CcRemapBcb(IN PVOID Bcb)<ntifs.h>
CcRepinBcb(IN PVOID Bcb)<ntifs.h>
CCritSec() ~<stllock.h>
CcScheduleReadAhead(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length)<ntifs.h>
CcSetAdditionalCacheAttributes(IN PFILE_OBJECT FileObject,IN BOOLEAN DisableReadAhead,IN BOOLEAN DisableWriteBehind)<ntifs.h>
CcSetBcbOwnerPointer(IN PVOID Bcb,IN PVOID OwnerPointer)<ntifs.h>
CcSetDirtyPageThreshold(IN PFILE_OBJECT FileObject,IN ULONG DirtyPageThreshold)<ntifs.h>
CcSetDirtyPinnedData(IN PVOID BcbVoid,IN PLARGE_INTEGER Lsn OPTIONAL)<ntifs.h>
CcSetFileSizes(IN PFILE_OBJECT FileObject,IN PCC_FILE_SIZES FileSizes)<ntifs.h>
CcSetFileSizesEx(IN PFILE_OBJECT FileObject,IN PCC_FILE_SIZES FileSizes)<ntifs.h>
CcSetLogHandleForFile(IN PFILE_OBJECT FileObject,IN PVOID LogHandle,IN PFLUSH_TO_LSN FlushToLsnRoutine)<ntifs.h>
CcSetParallelFlushFile(IN PFILE_OBJECT FileObject,IN BOOLEAN EnableParallelFlush)<ntifs.h>
CcSetReadAheadGranularity(IN PFILE_OBJECT FileObject,IN ULONG Granularity)<ntifs.h>
CCSIZEOF_STRUCT(structname,member)<prsht.h>
CCSLock() ~<msputils.h>
CCSLock(CRITICAL_SECTION * pCritSec) <msputils.h>
CcUninitializeCacheMap(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER TruncateSize OPTIONAL,IN PCACHE_UNINITIALIZE_EVENT UninitializeCompleteEvent OPTIONAL)<ntifs.h>
CcUnpinData(IN PVOID Bcb)<ntifs.h>
CcUnpinDataForThread(IN PVOID Bcb,IN ERESOURCE_THREAD ResourceThreadId)<ntifs.h>
CcUnpinRepinnedBcb(IN PVOID Bcb,IN BOOLEAN WriteThrough,OUT PIO_STATUS_BLOCK IoStatus)<ntifs.h>
CcWaitForCurrentLazyWriterActivity(VOID)<ntifs.h>
CcZeroData(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER StartOffset,IN PLARGE_INTEGER EndOffset,IN BOOLEAN Wait)<ntifs.h>
CD3D10_BUFFER_DESC()~<d3d10.h>
CD3D10_BUFFER_DESC(const D3D10_BUFFER_DESC & o)explicit <d3d10.h>
CD3D10_BUFFER_DESC(UINT byteWidth,UINT bindFlags,D3D10_USAGE usage=D3D10_USAGE_DEFAULT,UINT cpuaccessFlags=0,UINT miscFlags=0)explicit <d3d10.h>
CD3D10_TEXTURE1D_DESC()~<d3d10.h>
CD3D10_TEXTURE1D_DESC(const D3D10_TEXTURE1D_DESC & o)explicit <d3d10.h>
CD3D10_TEXTURE1D_DESC(DXGI_FORMAT format,UINT width,UINT arraySize=1,UINT mipLevels=0,UINT bindFlags=D3D10_BIND_SHADER_RESOURCE,D3D10_USAGE usage=D3D10_USAGE_DEFAULT,UINT cpuaccessFlags=0,UINT miscFlags=0)explicit <d3d10.h>
CD3D10_TEXTURE2D_DESC()~<d3d10.h>
CD3D10_TEXTURE2D_DESC(const D3D10_TEXTURE2D_DESC & o)explicit <d3d10.h>
CD3D10_TEXTURE2D_DESC(DXGI_FORMAT format,UINT width,UINT height,UINT arraySize=1,UINT mipLevels=0,UINT bindFlags=D3D10_BIND_SHADER_RESOURCE,D3D10_USAGE usage=D3D10_USAGE_DEFAULT,UINT cpuaccessFlags=0,UINT sampleCount=1,UINT sampleQuality=0,UINT miscFlags=0)explicit <d3d10.h>
CD3D11_BLEND_DESC()~<d3d11.h>
CD3D11_BLEND_DESC(CD3D11_DEFAULT)explicit <d3d11.h>
CD3D11_BLEND_DESC(const D3D11_BLEND_DESC & o)explicit <d3d11.h>
CD3D11_BUFFER_DESC()~<d3d11.h>
CD3D11_BUFFER_DESC(const D3D11_BUFFER_DESC & o)explicit <d3d11.h>
CD3D11_BUFFER_DESC(UINT byteWidth,UINT bindFlags,D3D11_USAGE usage=D3D11_USAGE_DEFAULT,UINT cpuaccessFlags=0,UINT miscFlags=0,UINT structureByteStride=0)explicit <d3d11.h>
CD3D11_QUERY_DESC()~<d3d11.h>
CD3D11_QUERY_DESC(const D3D11_QUERY_DESC & other)explicit <d3d11.h>
CD3D11_QUERY_DESC(D3D11_QUERY query,UINT misc_flags=0)explicit <d3d11.h>
CD3D11_RASTERIZER_DESC()~<d3d11.h>
CD3D11_RASTERIZER_DESC(CD3D11_DEFAULT)explicit <d3d11.h>
CD3D11_RASTERIZER_DESC(const D3D11_RASTERIZER_DESC & o)explicit <d3d11.h>
CD3D11_RASTERIZER_DESC(D3D11_FILL_MODE fillMode,D3D11_CULL_MODE cullMode,WINBOOL frontCounterClockwise,INT depthBias,FLOAT depthBiasClamp,FLOAT slopeScaledDepthBias,BOOL depthClipEnable,WINBOOL scissorEnable,WINBOOL multisampleEnable,WINBOOL antialiasedLineEnable)explicit <d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC()~<d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC(const D3D11_RENDER_TARGET_VIEW_DESC & other)explicit <d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC(D3D11_RTV_DIMENSION dim,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT mip_slice=0,UINT first_slice=0,UINT array_size=-1)explicit <d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC(ID3D11Buffer *,DXGI_FORMAT format,UINT first_elem,UINT elem_cnt)explicit <d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC(ID3D11Texture1D * texture,D3D11_RTV_DIMENSION dim,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT mip_slice=0,UINT first_slice=0,UINT array_size=-1)explicit <d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC(ID3D11Texture2D * texture,D3D11_RTV_DIMENSION dim,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT mip_slice=0,UINT first_slice=0,UINT array_size=-1)explicit <d3d11.h>
CD3D11_RENDER_TARGET_VIEW_DESC(ID3D11Texture3D * texture,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT mip_slice=0,UINT first_w_slice=0,UINT w_slice=-1)explicit <d3d11.h>
CD3D11_SAMPLER_DESC()~<d3d11.h>
CD3D11_SAMPLER_DESC(CD3D11_DEFAULT)explicit <d3d11.h>
CD3D11_SAMPLER_DESC(const D3D11_SAMPLER_DESC & o)explicit <d3d11.h>
CD3D11_SAMPLER_DESC(D3D11_FILTER filter,D3D11_TEXTURE_ADDRESS_MODE addressU,D3D11_TEXTURE_ADDRESS_MODE addressV,D3D11_TEXTURE_ADDRESS_MODE addressW,FLOAT mipLODBias,UINT maxAnisotropy,D3D11_COMPARISON_FUNC comparisonFunc,const FLOAT * borderColor,FLOAT minLOD,FLOAT maxLOD)explicit <d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC()~<d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC(const D3D11_SHADER_RESOURCE_VIEW_DESC & other)explicit <d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC(D3D11_SRV_DIMENSION dim,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT most_detailed_mip=0,UINT mip_levels=-1,UINT first_slice=0,UINT array_size=-1,UINT flags=0)explicit <d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC(ID3D11Buffer *,DXGI_FORMAT format,UINT first_elem,UINT elem_cnt,UINT flags=0)explicit <d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC(ID3D11Texture1D * texture,D3D11_SRV_DIMENSION dim,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT most_detailed_mip=0,UINT mip_levels=-1,UINT first_slice=0,UINT array_size=-1)explicit <d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC(ID3D11Texture2D * texture,D3D11_SRV_DIMENSION dim,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT most_detailed_mip=0,UINT mip_levels=-1,UINT first_slice=0,UINT array_size=-1)explicit <d3d11.h>
CD3D11_SHADER_RESOURCE_VIEW_DESC(ID3D11Texture3D * texture,DXGI_FORMAT format=DXGI_FORMAT_UNKNOWN,UINT most_detailed_mip=0,UINT mip_levels=-1)explicit <d3d11.h>
CD3D11_TEXTURE2D_DESC()~<d3d11.h>
CD3D11_TEXTURE2D_DESC(const D3D11_TEXTURE2D_DESC & o)explicit <d3d11.h>
CD3D11_TEXTURE2D_DESC(DXGI_FORMAT format,UINT width,UINT height,UINT arraySize=1,UINT mipLevels=0,UINT bindFlags=D3D11_BIND_SHADER_RESOURCE,D3D11_USAGE usage=D3D11_USAGE_DEFAULT,UINT cpuaccessFlags=0,UINT sampleCount=1,UINT sampleQuality=0,UINT miscFlags=0)explicit <d3d11.h>
CdbBSTR(BSTR=NULL) CONSTRUCTOR <_dbdao.h>
CdbBSTR(VOID) DESTRUCTOR ~<_dbdao.h>
CdbCollection(CdbObject & obj) virtual VOID ObAppend<_dbdao.h>
CdbCollection(LONG i) virtual CdbObject ObItem<_dbdao.h>
CdbCollection(LPCTSTR pstr) virtual CdbObject ObItem<_dbdao.h>
CdbCollection(VOID) virtual VOID Refresh<_dbdao.h>
CdbConnections() VOID CheckInterface<_dbdao.h>
CdbConnections(CdbConnections & Connections) CONSTRUCTOR <_dbdao.h>
CdbConnections(CdbConnections & o) <_dbdao.h>
CdbConnections(DAOWorkspace * pParent) VOID SetWorkspace<_dbdao.h>
CdbConnections(LONG i) CdbConnection operator<_dbdao.h>
CdbConnections(LPCTSTR pstr) CdbConnection operator<_dbdao.h>
CdbConnections(VOID) VOID Refresh<_dbdao.h>
CdbDynamicCollection(CdbObject & obj) VOID ObAppend<_dbdao.h>
CdbDynamicCollection(LONG i) CdbObject ObItem<_dbdao.h>
CdbDynamicCollection(LPCTSTR pstr) CdbObject ObItem<_dbdao.h>
CdbDynamicCollection(VOID) VOID Refresh<_dbdao.h>
CDBE_TYPE_ALL(int)<shobjidl.h>
CdbGetRowsEx(const CdbGetRowsEx &) <_dbdao.h>
CdbGetRowsEx(ICDAORecordset * pGetRows,WINBOOL bAddRef=FALSE) CONSTRUCTOR <_dbdao.h>
CdbGetRowsEx(VOID) VOID OnInterfaceChange<_dbdao.h>
CdbObject(LPCTSTR pstr) virtual VOID SetName<_dbdao.h>
CdbObject(LPUNKNOWN punk,WINBOOL bAddRef=FALSE) CONSTRUCTOR <_dbdao.h>
CdbObject(VOID) virtual CString GetName<_dbdao.h>
CdbOleObject(CdbOleObject & o) <_dbdao.h>
CdbOleObject(LPOLESTR pstrSource,LPOLESTR pstrDescription,LPOLESTR pstrHelpFile,ULONG ulHelpID) VOID SetRichErrorInfo<_dbdao.h>
CdbOleObject(LPUNKNOWN punk,WINBOOL bAddRef=FALSE) VOID SetInterface<_dbdao.h>
CdbOleObject(REFIID riidClass,REFIID riidInterface) VOID SetInterfaceLic<_dbdao.h>
CdbOleObject(VOID) virtual DESTRUCTOR ~<_dbdao.h>
CdbOleObject(WINBOOL bAddRef=FALSE,WINBOOL bThrowException=TRUE) LPUNKNOWN GetInterface<_dbdao.h>
CdbStaticCollection(CdbObject & obj) VOID ObAppend<_dbdao.h>
CdbStaticCollection(LONG i) CdbObject ObItem<_dbdao.h>
CdbStaticCollection(LPCTSTR pstr) CdbObject ObItem<_dbdao.h>
CdbStaticCollection(VOID) VOID Refresh<_dbdao.h>
CdbVariant(const int i)inline VOID ::operator<_dbdao.h>
CdbVariant(LONG l)inline VOID ::operator<_dbdao.h>
CdbVariant(LPCTSTR pstr)inline VOID ::operator<_dbdao.h>
CdbVariant(LPSAFEARRAY psa)inline CONSTRUCTOR ::<_dbdao.h>
CdbVariant(LPVARIANT pv)inline VOID ::operator<_dbdao.h>
CdbVariant(SHORT s)inline VOID ::operator<_dbdao.h>
CdbVariant(SHORT s,WINBOOL bIsBool)inline CONSTRUCTOR ::<_dbdao.h>
CdbVariant(SHORT s,WINBOOL bIsBool=FALSE) CONSTRUCTOR <_dbdao.h>
CdbVariant(VOID)inline CONSTRUCTOR ::<_dbdao.h>
CdbWide() DESTRUCTOR ~<_dbdao.h>
CdbWide(LPSTR pstr,unsigned int cb=0) CONSTRUCTOR <_dbdao.h>
CdbWideFromAnsi(LPSTR,unsigned int,BSTR *)HRESULT <_dbdao.h>
CdbWorkspaces() VOID GetDelayedInterface<_dbdao.h>
CdbWorkspaces(CdbWorkspace & o) VOID Append<_dbdao.h>
CdbWorkspaces(DAODBEngine * peng) VOID SetDBEngine<_dbdao.h>
CdbWorkspaces(LONG i) CdbWorkspace operator<_dbdao.h>
CdbWorkspaces(LPCTSTR pstr) CdbWorkspace operator<_dbdao.h>
CdbWorkspaces(VOID) CONSTRUCTOR <_dbdao.h>
CDefFolderMenu_Create2(PCIDLIST_ABSOLUTE pidlFolder,HWND hwnd,UINT cidl,PCUITEMID_CHILD_ARRAY apidl,IShellFolder * psf,LPFNDFMCALLBACK pfn,UINT nKeys,const HKEY * ahkeys,IContextMenu ** ppcm) SHSTDAPI <shlobj.h>
CDO(size_t) void<cdoex.h>
CDO(ULONG *,BSTR *)void __RPC_API BSTR_UserFree<cdoex.h>
CDO(ULONG *,ULONG,BSTR *)ULONG __RPC_API BSTR_UserSize<cdoex.h>
CDO(ULONG *,ULONG,VARIANT *)ULONG __RPC_API VARIANT_UserSize<cdoex.h>
CDO(ULONG *,unsigned char *,BSTR *)unsigned char<cdoex.h>
CDO(ULONG *,unsigned char *,VARIANT *)unsigned char<cdoex.h>
CdromCddaInfo(HDEVINFO HDevInfo,PSP_DEVINFO_DATA DevInfoData,PREDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO CddaInfo,PULONG BufferSize)DWORD <storprop.h>
CdromDisableDigitalPlayback(HDEVINFO DevInfo,PSP_DEVINFO_DATA DevInfoData)LONG <storprop.h>
CdromEnableDigitalPlayback(HDEVINFO DevInfo,PSP_DEVINFO_DATA DevInfoData,BOOLEAN ForceUnknown)LONG <storprop.h>
CdromIsDigitalPlaybackEnabled(HDEVINFO DevInfo,PSP_DEVINFO_DATA DevInfoData,PBOOLEAN Enabled)LONG <storprop.h>
CdromKnownGoodDigitalPlayback(HDEVINFO HDevInfo,PSP_DEVINFO_DATA DevInfoData)WINBOOL <storprop.h>
CDSIZEOF_STRUCT(structname,member)<commdlg.h>
CDXArray() ~<dxtmpl.h>
CDXArray(ARG_TYPE newElement)inline int <dxtmpl.h>
CDXArray(const CDXArray & src)void <dxtmpl.h>
CDXArray(const void * elem1,const void * elem2)))))))))))))))))void <dxtmpl.h>
CDXArray(int nIndex)inline TYPE <dxtmpl.h>
CDXArray(int nIndex,ARG_TYPE newElement)void <dxtmpl.h>
CDXArray(int nIndex,ARG_TYPE newElement,int nCount)void <dxtmpl.h>
CDXArray(int nIndex,ARG_TYPE newElement,int nCount=1) void InsertAt<dxtmpl.h>
CDXArray(int nIndex,int nCount)void <dxtmpl.h>
CDXArray(int nIndex,int nCount=1) void RemoveAt<dxtmpl.h>
CDXArray(int nNewSize,int nGrowBy)void <dxtmpl.h>
CDXArray(int nNewSize,int nGrowBy=-1) void SetSize<dxtmpl.h>
CDXArray(int nStartIndex,CDXArray * pNewArray)void <dxtmpl.h>
CDXList() ~<dxtmpl.h>
CDXList(ARG_TYPE newElement)DXLISTPOS <dxtmpl.h>
CDXList(ARG_TYPE searchValue,DXLISTPOS startAfter)DXLISTPOS <dxtmpl.h>
CDXList(ARG_TYPE searchValue,DXLISTPOS startAfter=NULL) DXLISTPOS Find<dxtmpl.h>
CDXList(CDXList * pNewList)void <dxtmpl.h>
CDXList(CNode * pNode)void <dxtmpl.h>
CDXList(CNode * pPrev,CNode * pNext)<dxtmpl.h>
CDXList(CNode *) void FreeNode<dxtmpl.h>
CDXList(CNode *,CNode *) CNode<dxtmpl.h>
CDXList(DXLISTPOS & rPosition)inline TYPE <dxtmpl.h>
CDXList(DXLISTPOS pos,ARG_TYPE newElement)inline void <dxtmpl.h>
CDXList(DXLISTPOS position)void <dxtmpl.h>
CDXList(DXLISTPOS position,ARG_TYPE newElement)DXLISTPOS <dxtmpl.h>
CDXList(int nBlockSize)<dxtmpl.h>
CDXList(int nBlockSize=10) <dxtmpl.h>
CDXList(int nIndex)DXLISTPOS <dxtmpl.h>
CDXMap() ~<dxtmpl.h>
CDXMap(ARG_KEY key)VALUE<dxtmpl.h>
CDXMap(ARG_KEY key,ARG_VALUE newValue)inline void <dxtmpl.h>
CDXMap(ARG_KEY key,UINT & nHash)<dxtmpl.h>
CDXMap(ARG_KEY key,VALUE & rValue)WINBOOL <dxtmpl.h>
CDXMap(ARG_KEY,UINT &) CAssoc<dxtmpl.h>
CDXMap(CAssoc * pAssoc)void <dxtmpl.h>
CDXMap(CAssoc *) void FreeAssoc<dxtmpl.h>
CDXMap(DXLISTPOS & rNextPosition,KEY & rKey,VALUE & rValue)void <dxtmpl.h>
CDXMap(int nBlockSize)<dxtmpl.h>
CDXMap(int nBlockSize=10) <dxtmpl.h>
CDXMap(UINT hashSize,WINBOOL bAllocNow=TRUE) void InitHashTable<dxtmpl.h>
CDXMap(UINT nHashSize,WINBOOL bAllocNow)void <dxtmpl.h>
CDXPlex() void<dxtmpl.h>
CDXPlex(CDXPlex * & pHead,UINT nMax,UINT cbElement) static <dxtmpl.h>
ceAddToFileTime(FILETIME * pft,LONGLONG ll)static __inline VOID <celib.h>
ceBuildPathAndExt(WCHAR const * pwszDir,WCHAR const * pwszFile,WCHAR const * pwszExt,WCHAR ** ppwszPath)HRESULT <celib.h>
ceConvertSzToBstr(BSTR * pbstr,CHAR const * pch,LONG cch)WINBOOL <celib.h>
ceConvertSzToWsz(WCHAR ** ppwsz,char const * pch,LONG cch)WINBOOL <celib.h>
ceConvertWszToBstr(BSTR * pbstr,WCHAR const * pwc,LONG cb)WINBOOL <celib.h>
ceConvertWszToSz(char ** ppsz,WCHAR const * pwc,LONG cb)WINBOOL <celib.h>
ceDateToFileTime(DATE const * pDate,FILETIME * pft)HRESULT <celib.h>
ceDbgPrintf(WINBOOL fDebug,char const * pszfmt,...)int WINAPIV <celib.h>
ceDecodeObject(DWORD dwEncodingType,LPCSTR lpszStructType,BYTE const * pbEncoded,DWORD cbEncoded,WINBOOL fCoTaskMemAlloc,VOID ** ppvStructInfo,DWORD * pcbStructInfo)WINBOOL <celib.h>
ceDispatchSetErrorInfo(HRESULT hrError,WCHAR const * pwszDescription,WCHAR const * pwszProgId,IID const * piid)HRESULT <celib.h>
ceDuplicateString(WCHAR const * pwsz)WCHAR<celib.h>
ceDupString(WCHAR const * pwszIn,WCHAR ** ppwszOut)HRESULT <celib.h>
ceEncodeObject(DWORD dwEncodingType,LPCSTR lpszStructType,VOID const * pvStructInfo,DWORD dwFlags,WINBOOL fCoTaskMemAlloc,BYTE ** ppbEncoded,DWORD * pcbEncoded)WINBOOL <celib.h>
ceErrorPrintLine(__FILE__,__LINE__,(pszMessage),NULL,(hr)),NULL,(hr)),NULL,(hr)),NULL,(hr)),NULL,(hr)),NULL,(hr)),NULL,(hr)),NULL,(hr))<celib.h>
ceErrorPrintLine(char const * pszFile,DWORD line,char const * pszMessage,WCHAR const * pwszData,HRESULT hr)VOID <celib.h>
ceERRORPRINTLINE(pszMessage,hr)<celib.h>
ceERRORPRINTLINESTR(pszMessage,pwszData,hr)<celib.h>
ceFileTimeToDate(FILETIME const * pft,DATE * pDate)HRESULT <celib.h>
ceFormatCertsrvStringArray(WINBOOL fURL,LPCWSTR pwszServerName_p1_2,LPCWSTR pwszSanitizedName_p3_7,DWORD iCert_p4,DWORD iCertTarget_p4,LPCWSTR pwszDomainDN_p5,LPCWSTR pwszConfigDN_p6,DWORD iCRL_p8,WINBOOL fDeltaCRL_p9,WINBOOL fDSAttrib_p10_11,DWORD cStrings,LPCWSTR * apwszStringsIn,LPWSTR * apwszStringsOut)HRESULT <celib.h>
ceFreeBstr(BSTR * pstr)VOID <celib.h>
ceGetErrorMessageText(HRESULT hr,WINBOOL fHResultString)WCHAR const<celib.h>
ceGetErrorMessageTextEx(HRESULT hr,WINBOOL fHResultString,WCHAR const * const * papwszInsertionText)WCHAR const<celib.h>
ceGetOIDName(char const * pszObjId)WCHAR const<celib.h>
ceGetOIDName(WCHAR const * pwszObjId)WCHAR const<celib.h>
ceGetOIDNameA(char const * pszObjId)WCHAR const<celib.h>
ceHError(HRESULT hr)HRESULT <celib.h>
ceHLastError(VOID)HRESULT <celib.h>
ceHResultToString(WCHAR * awchr,HRESULT hr)WCHAR const<celib.h>
ceInitErrorMessageText(HMODULE hMod,DWORD idsUnexpected,DWORD idsUnknownErrorCode)VOID <celib.h>
ceInternetCanonicalizeUrl(WCHAR const * pwszIn,WCHAR ** ppwszOut)HRESULT <celib.h>
ceIsConfigLocal(WCHAR const * pwszConfig,WCHAR ** ppwszMachine,WINBOOL * pfLocal)HRESULT <celib.h>
celstrcmpiL(WCHAR const * pwsz1,WCHAR const * pwsz2)int <celib.h>
ceMakeExprDate(DATE * pDate,LONG lDelta,enum ENUM_PERIOD enumPeriod)HRESULT <celib.h>
CertAddCertificateContextToStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pCertContext,DWORD dwAddDisposition,PCCERT_CONTEXT * ppStoreContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddCertificateLinkToStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pCertContext,DWORD dwAddDisposition,PCCERT_CONTEXT * ppStoreContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddCRLContextToStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pCrlContext,DWORD dwAddDisposition,PCCRL_CONTEXT * ppStoreContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddCRLLinkToStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pCrlContext,DWORD dwAddDisposition,PCCRL_CONTEXT * ppStoreContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddCTLContextToStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pCtlContext,DWORD dwAddDisposition,PCCTL_CONTEXT * ppStoreContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddCTLLinkToStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pCtlContext,DWORD dwAddDisposition,PCCTL_CONTEXT * ppStoreContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEncodedCertificateToStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,const BYTE * pbCertEncoded,DWORD cbCertEncoded,DWORD dwAddDisposition,PCCERT_CONTEXT * ppCertContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEncodedCertificateToSystemStore(LPCSTR szCertStoreName,const BYTE * pbCertEncoded,DWORD cbCertEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEncodedCertificateToSystemStoreA(LPCSTR szCertStoreName,const BYTE * pbCertEncoded,DWORD cbCertEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEncodedCertificateToSystemStoreW(LPCWSTR szCertStoreName,const BYTE * pbCertEncoded,DWORD cbCertEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEncodedCRLToStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,const BYTE * pbCrlEncoded,DWORD cbCrlEncoded,DWORD dwAddDisposition,PCCRL_CONTEXT * ppCrlContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEncodedCTLToStore(HCERTSTORE hCertStore,DWORD dwMsgAndCertEncodingType,const BYTE * pbCtlEncoded,DWORD cbCtlEncoded,DWORD dwAddDisposition,PCCTL_CONTEXT * ppCtlContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,LPCSTR pszUsageIdentifier) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddRefServerOcspResponse(HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse) WINIMPM VOID WINAPI <wincrypt.h>
CertAddRefServerOcspResponseContext(PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext) WINIMPM VOID WINAPI <wincrypt.h>
CertAddSerializedElementToStore(HCERTSTORE hCertStore,const BYTE * pbElement,DWORD cbElement,DWORD dwAddDisposition,DWORD dwFlags,DWORD dwContextTypeFlags,DWORD * pdwContextType,const void ** ppvContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAddStoreToCollection(HCERTSTORE hCollectionStore,HCERTSTORE hSiblingStore,DWORD dwUpdateFlags,DWORD dwPriority) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertAlgIdToOID(DWORD dwAlgId) WINIMPM LPCSTR WINAPI <wincrypt.h>
CertCloseServerOcspResponse(HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,DWORD dwFlags) WINIMPM VOID WINAPI <wincrypt.h>
CertCloseStore(HCERTSTORE hCertStore,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertCompareCertificate(DWORD dwCertEncodingType,PCERT_INFO pCertId1,PCERT_INFO pCertId2) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertCompareCertificateName(DWORD dwCertEncodingType,PCERT_NAME_BLOB pCertName1,PCERT_NAME_BLOB pCertName2) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB pInt1,PCRYPT_INTEGER_BLOB pInt2) WINBOOL WINAPI <wincrypt.h>
CertComparePublicKeyInfo(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPublicKey1,PCERT_PUBLIC_KEY_INFO pPublicKey2) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertControlStore(HCERTSTORE hCertStore,DWORD dwFlags,DWORD dwCtrlType,void const * pvCtrlPara) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG pConfig,HCERTCHAINENGINE * phChainEngine) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertCreateCertificateContext(DWORD dwCertEncodingType,const BYTE * pbCertEncoded,DWORD cbCertEncoded) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertCreateContext(DWORD dwContextType,DWORD dwEncodingType,const BYTE * pbEncoded,DWORD cbEncoded,DWORD dwFlags,PCERT_CREATE_CONTEXT_PARA pCreatePara) WINIMPM const void<wincrypt.h>
CertCreateCRLContext(DWORD dwCertEncodingType,const BYTE * pbCrlEncoded,DWORD cbCrlEncoded) WINIMPM PCCRL_CONTEXT WINAPI <wincrypt.h>
CertCreateCTLContext(DWORD dwMsgAndCertEncodingType,const BYTE * pbCtlEncoded,DWORD cbCtlEncoded) WINIMPM PCCTL_CONTEXT WINAPI <wincrypt.h>
CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT pCertContext,DWORD cOptAttr,PCRYPT_ATTRIBUTE rgOptAttr,DWORD dwFlags,void * pvReserved,PCTL_ENTRY pCtlEntry,DWORD * pcbCtlEntry) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertCreateSelfSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,PCERT_NAME_BLOB pSubjectIssuerBlob,DWORD dwFlags,PCRYPT_KEY_PROV_INFO pKeyProvInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,PSYSTEMTIME pStartTime,PSYSTEMTIME pEndTime,PCERT_EXTENSIONS pExtensions) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertDeleteCertificateFromStore(PCCERT_CONTEXT pCertContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertDeleteCRLFromStore(PCCRL_CONTEXT pCrlContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertDeleteCTLFromStore(PCCTL_CONTEXT pCtlContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext) WINIMPM PCCERT_CHAIN_CONTEXT WINAPI <wincrypt.h>
CertDuplicateCertificateContext(PCCERT_CONTEXT pCertContext) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertDuplicateCRLContext(PCCRL_CONTEXT pCrlContext) WINIMPM PCCRL_CONTEXT WINAPI <wincrypt.h>
CertDuplicateCTLContext(PCCTL_CONTEXT pCtlContext) WINIMPM PCCTL_CONTEXT WINAPI <wincrypt.h>
CertDuplicateStore(HCERTSTORE hCertStore) WINIMPM HCERTSTORE WINAPI <wincrypt.h>
CertEnumCertificateContextProperties(PCCERT_CONTEXT pCertContext,DWORD dwPropId) WINIMPM DWORD WINAPI <wincrypt.h>
CertEnumCertificatesInStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pPrevCertContext) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertEnumCRLContextProperties(PCCRL_CONTEXT pCrlContext,DWORD dwPropId) WINIMPM DWORD WINAPI <wincrypt.h>
CertEnumCRLsInStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pPrevCrlContext) WINIMPM PCCRL_CONTEXT WINAPI <wincrypt.h>
CertEnumCTLContextProperties(PCCTL_CONTEXT pCtlContext,DWORD dwPropId) WINIMPM DWORD WINAPI <wincrypt.h>
CertEnumCTLsInStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pPrevCtlContext) WINIMPM PCCTL_CONTEXT WINAPI <wincrypt.h>
CertEnumPhysicalStore(const void * pvSystemStore,DWORD dwFlags,void * pvArg,PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertEnumSubjectInSortedCTL(PCCTL_CONTEXT pCtlContext,void ** ppvNextSubject,PCRYPT_DER_BLOB pSubjectIdentifier,PCRYPT_DER_BLOB pEncodedAttributes) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertEnumSystemStore(DWORD dwFlags,void * pvSystemStoreLocationPara,void * pvArg,PFN_CERT_ENUM_SYSTEM_STORE pfnEnum) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertEnumSystemStoreLocation(DWORD dwFlags,void * pvArg,PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertFindAttribute(LPCSTR pszObjId,DWORD cAttr,CRYPT_ATTRIBUTE rgAttr[]) WINIMPM PCRYPT_ATTRIBUTE WINAPI <wincrypt.h>
CertFindCertificateInCRL(PCCERT_CONTEXT pCert,PCCRL_CONTEXT pCrlContext,DWORD dwFlags,void * pvReserved,PCRL_ENTRY * ppCrlEntry) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertFindCertificateInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void * pvFindPara,PCCERT_CONTEXT pPrevCertContext) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertFindChainInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void * pvFindPara,PCCERT_CHAIN_CONTEXT pPrevChainContext) WINIMPM PCCERT_CHAIN_CONTEXT WINAPI <wincrypt.h>
CertFindCRLInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void * pvFindPara,PCCRL_CONTEXT pPrevCrlContext) WINIMPM PCCRL_CONTEXT WINAPI <wincrypt.h>
CertFindCTLInStore(HCERTSTORE hCertStore,DWORD dwMsgAndCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void * pvFindPara,PCCTL_CONTEXT pPrevCtlContext) WINIMPM PCCTL_CONTEXT WINAPI <wincrypt.h>
CertFindExtension(LPCSTR pszObjId,DWORD cExtensions,CERT_EXTENSION rgExtensions[]) WINIMPM PCERT_EXTENSION WINAPI <wincrypt.h>
CertFindRDNAttr(LPCSTR pszObjId,PCERT_NAME_INFO pName) WINIMPM PCERT_RDN_ATTR WINAPI <wincrypt.h>
CertFindSubjectInCTL(DWORD dwEncodingType,DWORD dwSubjectType,void * pvSubject,PCCTL_CONTEXT pCtlContext,DWORD dwFlags) WINIMPM PCTL_ENTRY WINAPI <wincrypt.h>
CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB pSubjectIdentifier,PCCTL_CONTEXT pCtlContext,DWORD dwFlags,void * pvReserved,PCRYPT_DER_BLOB pEncodedAttributes) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext) WINIMPM VOID WINAPI <wincrypt.h>
CertFreeCertificateChainEngine(HCERTCHAINENGINE hChainEngine) WINIMPM VOID WINAPI <wincrypt.h>
CertFreeCertificateChainList(PCCERT_CHAIN_CONTEXT * prgpSelection) WINIMPM VOID WINAPI <wincrypt.h>
CertFreeCertificateContext(PCCERT_CONTEXT pCertContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertFreeCRLContext(PCCRL_CONTEXT pCrlContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertFreeCTLContext(PCCTL_CONTEXT pCtlContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertFreeServerOcspResponseContext(PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext) WINIMPM VOID WINAPI <wincrypt.h>
CertGetCertificateChain(HCERTCHAINENGINE hChainEngine,PCCERT_CONTEXT pCertContext,LPFILETIME pTime,HCERTSTORE hAdditionalStore,PCERT_CHAIN_PARA pChainPara,DWORD dwFlags,LPVOID pvReserved,PCCERT_CHAIN_CONTEXT * ppChainContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetCertificateContextProperty(PCCERT_CONTEXT pCertContext,DWORD dwPropId,void * pvData,DWORD * pcbData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetCRLContextProperty(PCCRL_CONTEXT pCrlContext,DWORD dwPropId,void * pvData,DWORD * pcbData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetCRLFromStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pIssuerContext,PCCRL_CONTEXT pPrevCrlContext,DWORD * pdwFlags) WINIMPM PCCRL_CONTEXT WINAPI <wincrypt.h>
CertGetCTLContextProperty(PCCTL_CONTEXT pCtlContext,DWORD dwPropId,void * pvData,DWORD * pcbData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,DWORD dwFlags,PCERT_ENHKEY_USAGE pUsage,DWORD * pcbUsage) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetIntendedKeyUsage(DWORD dwCertEncodingType,PCERT_INFO pCertInfo,BYTE * pbKeyUsage,DWORD cbKeyUsage) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetIssuerCertificateFromStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pSubjectContext,PCCERT_CONTEXT pPrevIssuerContext,DWORD * pdwFlags) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertGetNameString(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void * pvTypePara,LPSTR pszNameString,DWORD cchNameString) WINIMPM DWORD WINAPI <wincrypt.h>
CertGetNameStringA(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void * pvTypePara,LPSTR pszNameString,DWORD cchNameString) WINIMPM DWORD WINAPI <wincrypt.h>
CertGetNameStringW(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void * pvTypePara,LPWSTR pszNameString,DWORD cchNameString) WINIMPM DWORD WINAPI <wincrypt.h>
CertGetPublicKeyLength(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPublicKey) WINIMPM DWORD WINAPI <wincrypt.h>
CertGetServerOcspResponseContext(HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,DWORD dwFlags,LPVOID pvReserved) WINIMPM PCCERT_SERVER_OCSP_RESPONSE_CONTEXT WINAPI <wincrypt.h>
CertGetStoreProperty(HCERTSTORE hCertStore,DWORD dwPropId,void * pvData,DWORD * pcbData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertGetSubjectCertificateFromStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,PCERT_INFO pCertId) WINIMPM PCCERT_CONTEXT WINAPI <wincrypt.h>
CertGetValidUsages(DWORD cCerts,PCCERT_CONTEXT * rghCerts,int * cNumOIDs,LPSTR * rghOIDs,DWORD * pcbOIDs) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertIsRDNAttrsInCertificateName(DWORD dwCertEncodingType,DWORD dwFlags,PCERT_NAME_BLOB pCertName,PCERT_RDN pRDN) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertIsStrongHashToSign(PCCERT_STRONG_SIGN_PARA pStrongSignPara,LPCWSTR pwszCNGHashAlgid,PCCERT_CONTEXT pSigningCert) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertIsValidCRLForCertificate(PCCERT_CONTEXT pCert,PCCRL_CONTEXT pCrl,DWORD dwFlags,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertNameToStr(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPSTR psz,DWORD csz) WINIMPM DWORD WINAPI <wincrypt.h>
CertNameToStrA(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPSTR psz,DWORD csz) WINIMPM DWORD WINAPI <wincrypt.h>
CertNameToStrW(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPWSTR psz,DWORD csz) WINIMPM DWORD WINAPI <wincrypt.h>
CertOIDToAlgId(LPCSTR pszObjId) WINIMPM DWORD WINAPI <wincrypt.h>
CertOpenServerOcspResponse(PCCERT_CHAIN_CONTEXT pChainContext,DWORD dwFlags,LPVOID pvReserved) WINIMPM HCERT_SERVER_OCSP_RESPONSE WINAPI <wincrypt.h>
CertOpenStore(LPCSTR lpszStoreProvider,DWORD dwEncodingType,HCRYPTPROV_LEGACY hCryptProv,DWORD dwFlags,const void * pvPara)WINIMPM HCERTSTORE WINAPI <wincrypt.h>
CertOpenSystemStore(HCRYPTPROV_LEGACY hProv,LPCSTR szSubsystemProtocol) WINIMPM HCERTSTORE WINAPI <wincrypt.h>
CertOpenSystemStoreA(HCRYPTPROV_LEGACY hProv,LPCSTR szSubsystemProtocol) WINIMPM HCERTSTORE WINAPI <wincrypt.h>
CertOpenSystemStoreW(HCRYPTPROV_LEGACY hProv,LPCWSTR szSubsystemProtocol) WINIMPM HCERTSTORE WINAPI <wincrypt.h>
CertRDNValueToStr(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPSTR psz,DWORD csz) WINIMPM DWORD WINAPI <wincrypt.h>
CertRDNValueToStrA(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPSTR psz,DWORD csz) WINIMPM DWORD WINAPI <wincrypt.h>
CertRDNValueToStrW(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPWSTR psz,DWORD csz) WINIMPM DWORD WINAPI <wincrypt.h>
CertRegisterPhysicalStore(const void * pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName,PCERT_PHYSICAL_STORE_INFO pStoreInfo,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertRegisterSystemStore(const void * pvSystemStore,DWORD dwFlags,PCERT_SYSTEM_STORE_INFO pStoreInfo,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,LPCSTR pszUsageIdentifier) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertRemoveStoreFromCollection(HCERTSTORE hCollectionStore,HCERTSTORE hSiblingStore) WINIMPM void WINAPI <wincrypt.h>
CertResyncCertificateChainEngine(HCERTCHAINENGINE hChainEngine) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertRetrieveLogoOrBiometricInfo(PCCERT_CONTEXT pCertContext,LPCSTR lpszLogoOrBiometricType,DWORD dwRetrievalFlags,DWORD dwTimeout,DWORD dwFlags,void * pvReserved,BYTE ** ppbData,DWORD * pcbData,LPWSTR * ppwszMimeType) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSaveStore(HCERTSTORE hCertStore,DWORD dwEncodingType,DWORD dwSaveAs,DWORD dwSaveTo,void * pvSaveToPara,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSelectCertificateChains(LPCGUID pSelectionContext,DWORD dwFlags,PCCERT_SELECT_CHAIN_PARA pChainParameters,DWORD cCriteria,PCCERT_SELECT_CRITERIA rgpCriteria,HCERTSTORE hStore,PDWORD pcSelection,PCCERT_CHAIN_CONTEXT ** pprgpSelection) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSerializeCertificateStoreElement(PCCERT_CONTEXT pCertContext,DWORD dwFlags,BYTE * pbElement,DWORD * pcbElement) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSerializeCRLStoreElement(PCCRL_CONTEXT pCrlContext,DWORD dwFlags,BYTE * pbElement,DWORD * pcbElement) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSerializeCTLStoreElement(PCCTL_CONTEXT pCtlContext,DWORD dwFlags,BYTE * pbElement,DWORD * pcbElement) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT pCertContext,PCTL_ENTRY pCtlEntry,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSetCertificateContextProperty(PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,const void * pvData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSetCRLContextProperty(PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,const void * pvData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSetCTLContextProperty(PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,const void * pvData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,PCERT_ENHKEY_USAGE pUsage) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSetStoreProperty(HCERTSTORE hCertStore,DWORD dwPropId,DWORD dwFlags,const void * pvData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertSrvBackupClose(HCSBC hbc) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupEnd(HCSBC hbc) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupFree(VOID * pv) VOID CERTBCLI_API <certbcli.h>
CertSrvBackupGetBackupLogsW(HCSBC hbc,WCHAR ** ppwszzBackupLogFiles,DWORD * pcbSize) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupGetDatabaseNamesW(HCSBC hbc,WCHAR ** ppwszzAttachmentInformation,DWORD * pcbSize) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupGetDynamicFileListW(HCSBC hbc,WCHAR ** ppwszzFileList,DWORD * pcbSize) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupOpenFileW(HCSBC hbc,WCHAR const * pwszAttachmentName,DWORD cbReadHintSize,LARGE_INTEGER * pliFileSize) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupPrepareW(WCHAR const * pwszServerName,ULONG grbitJet,ULONG dwBackupFlags,HCSBC * phbc) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupRead(HCSBC hbc,VOID * pvBuffer,DWORD cbBuffer,DWORD * pcbRead) HRESULT CERTBCLI_API <certbcli.h>
CertSrvBackupTruncateLogs(HCSBC hbc) HRESULT CERTBCLI_API <certbcli.h>
CertSrvIsServerOnlineW(WCHAR const * pwszServerName,WINBOOL * pfServerOnline) HRESULT CERTBCLI_API <certbcli.h>
CertSrvRestoreEnd(HCSBC hbc) HRESULT CERTBCLI_API <certbcli.h>
CertSrvRestoreGetDatabaseLocationsW(HCSBC hbc,WCHAR ** ppwszzDatabaseLocationList,DWORD * pcbSize) HRESULT CERTBCLI_API <certbcli.h>
CertSrvRestorePrepareW(WCHAR const * pwszServerName,ULONG dwRestoreFlags,HCSBC * phbc) HRESULT CERTBCLI_API <certbcli.h>
CertSrvRestoreRegisterComplete(HCSBC hbc,HRESULT hrRestoreState) HRESULT CERTBCLI_API <certbcli.h>
CertSrvRestoreRegisterThroughFile(HCSBC hbc,WCHAR const * pwszCheckPointFilePath,WCHAR const * pwszLogPath,CSEDB_RSTMAPW rgrstmap[],LONG crstmap,WCHAR const * pwszBackupLogPath,ULONG genLow,ULONG genHigh) HRESULT CERTBCLI_API <certbcli.h>
CertSrvRestoreRegisterW(HCSBC hbc,WCHAR const * pwszCheckPointFilePath,WCHAR const * pwszLogPath,CSEDB_RSTMAPW rgrstmap[],LONG crstmap,WCHAR const * pwszBackupLogPath,ULONG genLow,ULONG genHigh) HRESULT CERTBCLI_API <certbcli.h>
CertSrvServerControlW(WCHAR const * pwszServerName,DWORD dwControlFlags,DWORD * pcbOut,BYTE ** ppbOut) HRESULT CERTBCLI_API <certbcli.h>
CertStrToName(DWORD dwCertEncodingType,LPCSTR pszX500,DWORD dwStrType,void * pvReserved,BYTE * pbEncoded,DWORD * pcbEncoded,LPCSTR * ppszError) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertStrToNameA(DWORD dwCertEncodingType,LPCSTR pszX500,DWORD dwStrType,void * pvReserved,BYTE * pbEncoded,DWORD * pcbEncoded,LPCSTR * ppszError) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertStrToNameW(DWORD dwCertEncodingType,LPCWSTR pszX500,DWORD dwStrType,void * pvReserved,BYTE * pbEncoded,DWORD * pcbEncoded,LPCWSTR * ppszError) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertUnregisterPhysicalStore(const void * pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertUnregisterSystemStore(const void * pvSystemStore,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertVerifyCertificateChainPolicy(LPCSTR pszPolicyOID,PCCERT_CHAIN_CONTEXT pChainContext,PCERT_CHAIN_POLICY_PARA pPolicyPara,PCERT_CHAIN_POLICY_STATUS pPolicyStatus) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertVerifyCRLRevocation(DWORD dwCertEncodingType,PCERT_INFO pCertId,DWORD cCrlInfo,PCRL_INFO rgpCrlInfo[]) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertVerifyCRLTimeValidity(LPFILETIME pTimeToVerify,PCRL_INFO pCrlInfo) WINIMPM LONG WINAPI <wincrypt.h>
CertVerifyCTLUsage(DWORD dwEncodingType,DWORD dwSubjectType,void * pvSubject,PCTL_USAGE pSubjectUsage,DWORD dwFlags,PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertVerifyRevocation(DWORD dwEncodingType,DWORD dwRevType,DWORD cContext,PVOID rgpvContext[],DWORD dwFlags,PCERT_REVOCATION_PARA pRevPara,PCERT_REVOCATION_STATUS pRevStatus) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertVerifySubjectCertificateContext(PCCERT_CONTEXT pSubject,PCCERT_CONTEXT pIssuer,DWORD * pdwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CertVerifyTimeValidity(LPFILETIME pTimeToVerify,PCERT_INFO pCertInfo) WINIMPM LONG WINAPI <wincrypt.h>
CertVerifyValidityNesting(PCERT_INFO pSubjectInfo,PCERT_INFO pIssuerInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
ceSubtractFileTimes(FILETIME const * pft1,FILETIME const * pft2)static __inline LONGLONG <celib.h>
ceTranslatePeriodUnits(WCHAR const * pwszPeriod,LONG lCount,enum ENUM_PERIOD * penumPeriod,LONG * plCount)HRESULT <celib.h>
ceVerifyAltNameString(LONG NameChoice,BSTR strName)HRESULT <celib.h>
ceVerifyObjId(char const * pszObjId)HRESULT <celib.h>
ceVerifyObjId(WCHAR const * pwszObjId)HRESULT <celib.h>
ceVerifyObjIdA(char const * pszObjId)HRESULT <celib.h>
ceWtoI(WCHAR const * pwszDigitString,WINBOOL * pfValid)int <celib.h>
CFGPROC(HWND hwnd,HBLOB SpecialBlob,PBLOB_TABLE * ppBlobTable) typedef DWORD<netmon.h>
CFIFOString() ~<parser.h>
CFIFOString(CHAR * sz) DWORD AddTail<parser.h>
CFIFOString(PZPSTR sz) DWORD GetTail<parser.h>
CHANGE_PROP_TYPE(ulPropTag,ulPropType)<wabdefs.h>
ChangeAccountPassword(SEC_WCHAR * pszPackageName,SEC_WCHAR * pszDomainName,SEC_WCHAR * pszAccountName,SEC_WCHAR * pszOldPassword,SEC_WCHAR * pszNewPassword,BOOLEAN bImpersonating,unsigned __LONG32 dwReserved,PSecBufferDesc pOutput) SECURITY_STATUS WINAPI <sspi.h>
ChangeCase(__LONG32 Type)virtual HRESULT WINAPI <tom.h>
ChangeClipboardChain(HWND hWndRemove,HWND hWndNewNext) WINUSERAPI WINBOOL WINAPI <winuser.h>
ChangeClusterResourceGroup(HRESOURCE hResource,HGROUP hGroup) DWORD WINAPI <clusapi.h>
ChangeDDrawDevice(LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor)virtual HRESULT WINAPI <strmif.h>
ChangedEventClass(COMEVENTSYSCHANGEINFO * pInfo)virtual HRESULT WINAPI <eventsys.h>
ChangedEventClass(EOC_ChangeType changeType,BSTR bstrEventClassID)virtual HRESULT WINAPI <eventsys.h>
ChangeDisplaySettingsEx(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam) WINUSERAPI LONG WINAPI <winuser.h>
ChangeDisplaySettingsExA(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam) WINUSERAPI LONG WINAPI <winuser.h>
ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName,LPDEVMODEW lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam) WINUSERAPI LONG WINAPI <winuser.h>
ChangeDisplaySettingsW(LPDEVMODEW lpDevMode,DWORD dwFlags) WINUSERAPI LONG WINAPI <winuser.h>
ChangedPublisher(EOC_ChangeType changeType,BSTR bstrPublisherID)virtual HRESULT WINAPI <eventsys.h>
ChangedSubscription(COMEVENTSYSCHANGEINFO * pInfo)virtual HRESULT WINAPI <eventsys.h>
ChangedSubscription(EOC_ChangeType changeType,BSTR bstrSubscriptionID)virtual HRESULT WINAPI <eventsys.h>
ChangeIdleRoutine(FTG ftg,PFNIDLE lpfnIdle,LPVOID lpvIdleParam,short priIdle,ULONG csecIdle,USHORT iroIdle,USHORT ircIdle) STDAPI_<wabutil.h>
ChangeMenu(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags) WINUSERAPI WINBOOL WINAPI <winuser.h>
ChangeMenuA(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags) WINUSERAPI WINBOOL WINAPI <winuser.h>
ChangeMenuW(HMENU hMenu,UINT cmd,LPCWSTR lpszNewItem,UINT cmdInsert,UINT flags) WINUSERAPI WINBOOL WINAPI <winuser.h>
ChangeName(LPCWSTR pcszNameIn)virtual HRESULT WINAPI <cluscfgserver.h>
ChangeNtmsMediaType(HANDLE hSession,LPNTMS_GUID lpMediaId,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
ChangePassword(BSTR bstrOldPassword,BSTR bstrNewPassword)virtual HRESULT WINAPI <iads.h>
ChangePermissions(METADATA_HANDLE hMDHandle,DWORD dwMDTimeOut,DWORD dwMDAccessRequested)virtual HRESULT WINAPI <iadmw.h>
ChangerClassAllocatePool(IN POOL_TYPE PoolType,IN ULONG NumberOfBytes)<mcd.h>
ChangerClassDebugPrint(ULONG DebugPrintLevel,PCCHAR DebugMessage,...)<mcd.h>
ChangerClassFreePool(IN PVOID PoolToFree)<mcd.h>
ChangerClassInitialize(IN PDRIVER_OBJECT DriverObject,IN PUNICODE_STRING RegistryPath,IN PMCD_INIT_DATA MCDInitData)<mcd.h>
ChangerClassSendSrbSynchronous(IN PDEVICE_OBJECT DeviceObject,IN PSCSI_REQUEST_BLOCK Srb,IN PVOID Buffer,IN ULONG BufferSize,IN BOOLEAN WriteToDevice)<mcd.h>
ChangeResourceGroup(ISClusResGroup * pResourceGroup)virtual HRESULT WINAPI <msclus.h>
ChangeServiceConfig(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName) WINADVAPI WINBOOL WINAPI <winsvc.h>
ChangeServiceConfig2(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo) WINADVAPI WINBOOL WINAPI <winsvc.h>
ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo) WINADVAPI WINBOOL WINAPI <winsvc.h>
ChangeServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo) WINADVAPI WINBOOL WINAPI <winsvc.h>
ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName) WINADVAPI WINBOOL WINAPI <winsvc.h>
ChangeServiceConfigW(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword,LPCWSTR lpDisplayName) WINADVAPI WINBOOL WINAPI <winsvc.h>
ChangeTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer,ULONG DueTime,ULONG Period) WINBASEAPI WINBOOL WINAPI <threadpoollegacyapiset.h>
ChangeType(VARTYPE vartype,const _variant_t * pSrc)inline void _variant_t::<ntsecpkg.h>
ChangeType(VARTYPE vartype,const _variant_t * pSrc=NULL) void <ntsecpkg.h>
ChangeType(VT_BOOL,this) varDest<ntsecpkg.h>
ChangeType(VT_BSTR,this) varDest<ntsecpkg.h>
ChangeType(VT_CY,this) varDest<ntsecpkg.h>
ChangeType(VT_DECIMAL,this) varDest<ntsecpkg.h>
ChangeType(VT_DISPATCH,this) varDest<ntsecpkg.h>
ChangeType(VT_I1,this) varDest<ntsecpkg.h>
ChangeType(VT_I2,this) varDest<ntsecpkg.h>
ChangeType(VT_I4,this) varDest<ntsecpkg.h>
ChangeType(VT_I8,this) varDest<ntsecpkg.h>
ChangeType(VT_INT,this) varDest<ntsecpkg.h>
ChangeType(VT_R4,this) varDest<ntsecpkg.h>
ChangeType(VT_R8,this) varDest<ntsecpkg.h>
ChangeType(VT_UI1,this) varDest<ntsecpkg.h>
ChangeType(VT_UI2,this) varDest<ntsecpkg.h>
ChangeType(VT_UI4,this) varDest<ntsecpkg.h>
ChangeType(VT_UI8,this) varDest<ntsecpkg.h>
ChangeType(VT_UINT,this) varDest<ntsecpkg.h>
ChangeType(VT_UNKNOWN,this) varDest<ntsecpkg.h>
ChangeWatchMode(HWATCHREGION hRegion,DBWATCHMODE dwWatchMode)virtual HRESULT WINAPI <oledbdep.h>
ChangeWindowMessageFilter(UINT message,DWORD dwFlag) WINUSERAPI WINBOOL WINAPI <winuser.h>
ChangeWindowMessageFilterEx(HWND hwnd,UINT message,DWORD action,PCHANGEFILTERSTRUCT pChangeFilterStruct) WINUSERAPI WINBOOL WINAPI <winuser.h>
ChannelMinMax(LONG * lChannelMin,LONG * lChannelMax)virtual HRESULT WINAPI <strmif.h>
ChapterPlay(ULONG ulTitle,ULONG ulChapter)virtual HRESULT WINAPI <strmif.h>
ChapterPlayAutoStop(ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay)virtual HRESULT WINAPI <strmif.h>
ChapterSearch(ULONG ulChapter)virtual HRESULT WINAPI <strmif.h>
Character(BSTR CharacterID,IAgentCtlCharacterEx ** ppidItem)virtual HRESULT WINAPI <agtctl.h>
CharacterRange()	<gdiplustypes.h>
CharacterRange(const CharacterRange & rhs)	<gdiplustypes.h>
CharacterRange(INT first,INT length)	<gdiplustypes.h>
CharacterToSymbol(LPSTR,int,LPSYV) int WINAPI <penwin.h>
CharLower(LPSTR lpsz) WINUSERAPI LPSTR WINAPI <winuser.h>
CharLowerA(LPSTR lpsz) WINUSERAPI LPSTR WINAPI <winuser.h>
CharLowerBuff(LPSTR lpsz,DWORD cchLength) WINUSERAPI DWORD WINAPI <winuser.h>
CharLowerBuffA(LPSTR lpsz,DWORD cchLength) WINUSERAPI DWORD WINAPI <winuser.h>
CharLowerBuffW(LPWSTR lpsz,DWORD cchLength) WINUSERAPI DWORD WINAPI <winuser.h>
CharLowerW(LPWSTR lpsz) WINUSERAPI LPWSTR WINAPI <winuser.h>
CharNext(LPCSTR lpsz) WINUSERAPI LPSTR WINAPI <winuser.h>
CharNextA(LPCSTR lpsz) WINUSERAPI LPSTR WINAPI <winuser.h>
CharNextEx(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags)
CharNextExA(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags) WINUSERAPI LPSTR WINAPI <winuser.h>
CharNextW(LPCWSTR lpsz) WINUSERAPI LPWSTR WINAPI <winuser.h>
CharPrev(LPCSTR lpszStart,LPCSTR lpszCurrent) WINUSERAPI LPSTR WINAPI <winuser.h>
CharPrevA(LPCSTR lpszStart,LPCSTR lpszCurrent) WINUSERAPI LPSTR WINAPI <winuser.h>
CharPrevEx(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags)
CharPrevExA(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags) WINUSERAPI LPSTR WINAPI <winuser.h>
CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent) WINUSERAPI LPWSTR WINAPI <winuser.h>
CharToOem(LPCSTR lpszSrc,LPSTR lpszDst) WINUSERAPI WINBOOL WINAPI <winuser.h>
CharToOemA(LPCSTR lpszSrc,LPSTR lpszDst) WINUSERAPI WINBOOL WINAPI <winuser.h>
CharToOemBuff(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
CharToOemBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
CharToOemBuffW(LPCWSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
CharToOemW(LPCWSTR lpszSrc,LPSTR lpszDst) WINUSERAPI WINBOOL WINAPI <winuser.h>
CharUpper(LPSTR lpsz) WINUSERAPI LPSTR WINAPI <winuser.h>
CharUpperA(LPSTR lpsz) WINUSERAPI LPSTR WINAPI <winuser.h>
CharUpperBuff(LPSTR lpsz,DWORD cchLength) WINUSERAPI DWORD WINAPI <winuser.h>
CharUpperBuffA(LPSTR lpsz,DWORD cchLength) WINUSERAPI DWORD WINAPI <winuser.h>
CharUpperBuffW(LPWSTR lpsz,DWORD cchLength) WINUSERAPI DWORD WINAPI <winuser.h>
CharUpperW(LPWSTR lpsz) WINUSERAPI LPWSTR WINAPI <winuser.h>
CheckBitmapBits(HTRANSFORM,PVOID,BMFORMAT,DWORD,DWORD,DWORD,PBYTE,PBMCALLBACKFN,LPARAM) WINBOOL WINAPI <icm.h>
CheckColors(HTRANSFORM,PCOLOR,DWORD,COLORTYPE,PBYTE) WINBOOL WINAPI <icm.h>
CheckColorsInGamut(HDC hdc,LPVOID lpRGBTriple,LPVOID dlpBuffer,DWORD nCount) WINGDIAPI WINBOOL WINAPI <wingdi.h>
CheckDefDlgRecursion(pfRecursion)<windowsx.h>
CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck) WINUSERAPI WINBOOL WINAPI <winuser.h>
CheckError(HRESULT hr) inline void <comutil.h>
CheckForCompareStates(WINBOOL * fCompareStates)virtual HRESULT WINAPI <txdtc.h>
CheckInstancePath(IClassFactory * pParserFactory,const BSTR ObjectPath,const BSTR ClassName,ULONGLONG ullTest)HRESULT WINAPI <wmiatlprov.h>
CheckInterface() VOID <_dbdao.h>
CheckMemory(const BYTE * pBuffer)virtual HRESULT WINAPI <strmif.h>
CheckMenuItem(HMENU hMenu,UINT uIDCheckItem,UINT uCheck) WINUSERAPI DWORD WINAPI <winuser.h>
CheckMenuRadioItem(HMENU hmenu,UINT first,UINT last,UINT check,UINT flags) WINUSERAPI WINBOOL WINAPI <winuser.h>
CheckName(BSTR Directory,BSTR UserName,BSTR Password,VARIANT_BOOL * pBRet)virtual HRESULT WINAPI <cdoex.h>
CheckNameLegalDOS8Dot3(LPCSTR lpName,LPSTR lpOemName,DWORD OemNameSize,PBOOL pbNameContainsSpaces,PBOOL pbNameLegal) WINBASEAPI WINBOOL WINAPI <winbase.h>
CheckNameLegalDOS8Dot3A(LPCSTR lpName,LPSTR lpOemName,DWORD OemNameSize,PBOOL pbNameContainsSpaces,PBOOL pbNameLegal) WINBASEAPI WINBOOL WINAPI <winbase.h>
CheckNameLegalDOS8Dot3W(LPCWSTR lpName,LPSTR lpOemName,DWORD OemNameSize,PBOOL pbNameContainsSpaces,PBOOL pbNameLegal) WINBASEAPI WINBOOL WINAPI <winbase.h>
CheckParameters(eMethod,First)<mapival.h>
CheckParameters(eMethod,ppThis)<mapival.h>
CheckParameters1(m,a1)<mapival.h>
CheckParameters10(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
CheckParameters11(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)<mapival.h>
CheckParameters12(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)<mapival.h>
CheckParameters13(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
CheckParameters14(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)<mapival.h>
CheckParameters15(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)<mapival.h>
CheckParameters16(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)<mapival.h>
CheckParameters2(m,a1,a2)<mapival.h>
CheckParameters3(m,a1,a2,a3)<mapival.h>
CheckParameters4(m,a1,a2,a3,a4)<mapival.h>
CheckParameters5(m,a1,a2,a3,a4,a5)<mapival.h>
CheckParameters6(m,a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters7(m,a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters8(m,a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
CheckParameters9(m,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
CheckParameters_IABContainer_CopyEntries(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IABContainer_CreateEntry(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IABContainer_DeleteEntries(a1,a2,a3)<mapival.h>
CheckParameters_IABContainer_ResolveNames(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IABLogon_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IABLogon_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IABLogon_GetLastError(a1,a2,a3,a4)<mapival.h>
CheckParameters_IABLogon_GetOneOffTable(a1,a2,a3)<mapival.h>
CheckParameters_IABLogon_Logoff(a1,a2)<mapival.h>
CheckParameters_IABLogon_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IABLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IABLogon_OpenTemplateID(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
CheckParameters_IABLogon_PrepareRecips(a1,a2,a3,a4)<mapival.h>
CheckParameters_IABLogon_Unadvise(a1,a2)<mapival.h>
CheckParameters_IABProvider_Logon(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
CheckParameters_IABProvider_Shutdown(a1,a2)<mapival.h>
CheckParameters_IDistList_CopyEntries(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IDistList_CreateEntry(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IDistList_DeleteEntries(a1,a2,a3)<mapival.h>
CheckParameters_IDistList_ResolveNames(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIAdviseSink_OnNotify(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIContainer_GetContentsTable(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIContainer_GetHierarchyTable(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIContainer_GetSearchCriteria(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIContainer_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMAPIContainer_SetSearchCriteria(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIControl_Activate(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIControl_GetLastError(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIControl_GetState(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIFolder_CopyFolder(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
CheckParameters_IMAPIFolder_CopyMessages(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMAPIFolder_CreateFolder(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMAPIFolder_CreateMessage(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIFolder_DeleteFolder(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMAPIFolder_DeleteMessages(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIFolder_EmptyFolder(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIFolder_GetMessageStatus(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIFolder_SaveContentsSort(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIFolder_SetMessageStatus(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMAPIFolder_SetReadFlags(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIProp_CopyProps(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
CheckParameters_IMAPIProp_CopyTo(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
CheckParameters_IMAPIProp_DeleteProps(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIProp_GetIDsFromNames(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIProp_GetLastError(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIProp_GetNamesFromIDs(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMAPIProp_GetPropList(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIProp_GetProps(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIProp_OpenProperty(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMAPIProp_SaveChanges(a1,a2)<mapival.h>
CheckParameters_IMAPIProp_SetProps(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIStatus_ChangePassword(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPIStatus_FlushQueues(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPIStatus_SettingsDialog(a1,a2,a3)<mapival.h>
CheckParameters_IMAPIStatus_ValidateState(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_Abort(a1)<mapival.h>
CheckParameters_IMAPITable_Advise(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPITable_CollapseRow(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPITable_CreateBookmark(a1,a2)<mapival.h>
CheckParameters_IMAPITable_ExpandRow(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMAPITable_FindRow(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPITable_FreeBookmark(a1,a2)<mapival.h>
CheckParameters_IMAPITable_GetCollapseState(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMAPITable_GetLastError(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPITable_GetRowCount(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_GetStatus(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_QueryColumns(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_QueryPosition(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPITable_QueryRows(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPITable_QuerySortOrder(a1,a2)<mapival.h>
CheckParameters_IMAPITable_Restrict(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_SeekRow(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMAPITable_SeekRowApprox(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_SetCollapseState(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMAPITable_SetColumns(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_SortTable(a1,a2,a3)<mapival.h>
CheckParameters_IMAPITable_Unadvise(a1,a2)<mapival.h>
CheckParameters_IMAPITable_WaitForCompletion(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMessage_CreateAttach(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMessage_DeleteAttach(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMessage_GetAttachmentTable(a1,a2,a3)<mapival.h>
CheckParameters_IMessage_GetRecipientTable(a1,a2,a3)<mapival.h>
CheckParameters_IMessage_ModifyRecipients(a1,a2,a3)<mapival.h>
CheckParameters_IMessage_OpenAttach(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMessage_SetReadFlag(a1,a2)<mapival.h>
CheckParameters_IMessage_SubmitMessage(a1,a2)<mapival.h>
CheckParameters_IMsgStore_AbortSubmit(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMsgStore_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMsgStore_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMsgStore_FinishedMsg(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMsgStore_GetOutgoingQueue(a1,a2,a3)<mapival.h>
CheckParameters_IMsgStore_GetReceiveFolder(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMsgStore_GetReceiveFolderTable(a1,a2,a3)<mapival.h>
CheckParameters_IMsgStore_NotifyNewMail(a1,a2)<mapival.h>
CheckParameters_IMsgStore_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMsgStore_SetLockState(a1,a2,a3)<mapival.h>
CheckParameters_IMsgStore_SetReceiveFolder(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMsgStore_StoreLogoff(a1,a2)<mapival.h>
CheckParameters_IMsgStore_Unadvise(a1,a2)<mapival.h>
CheckParameters_IMSLogon_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IMSLogon_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMSLogon_GetLastError(a1,a2,a3,a4)<mapival.h>
CheckParameters_IMSLogon_Logoff(a1,a2)<mapival.h>
CheckParameters_IMSLogon_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMSLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IMSLogon_Unadvise(a1,a2)<mapival.h>
CheckParameters_IMSProvider_CompareStoreIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParameters_IMSProvider_Logon(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
CheckParameters_IMSProvider_Shutdown(a1,a2)<mapival.h>
CheckParameters_IMSProvider_SpoolerLogon(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
CheckParameters_IStream_Clone(a1,a2)<mapival.h>
CheckParameters_IStream_Commit(a1,a2)<mapival.h>
CheckParameters_IStream_CopyTo(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IStream_LockRegion(a1,a2,a3,a4)<mapival.h>
CheckParameters_IStream_Read(a1,a2,a3,a4)<mapival.h>
CheckParameters_IStream_Revert(a1)<mapival.h>
CheckParameters_IStream_Seek(a1,a2,a3,a4)<mapival.h>
CheckParameters_IStream_SetSize(a1,a2)<mapival.h>
CheckParameters_IStream_Stat(a1,a2,a3)<mapival.h>
CheckParameters_IStream_UnlockRegion(a1,a2,a3,a4)<mapival.h>
CheckParameters_IStream_Write(a1,a2,a3,a4)<mapival.h>
CheckParameters_IUnknown_AddRef(a1)<mapival.h>
CheckParameters_IUnknown_QueryInterface(a1,a2,a3)<mapival.h>
CheckParameters_IUnknown_Release(a1)<mapival.h>
CheckParameters_IXPLogon_AddressTypes(a1,a2,a3,a4,a5,a6)<mapival.h>
CheckParameters_IXPLogon_EndMessage(a1,a2,a3)<mapival.h>
CheckParameters_IXPLogon_FlushQueues(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IXPLogon_Idle(a1,a2)<mapival.h>
CheckParameters_IXPLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IXPLogon_Poll(a1,a2)<mapival.h>
CheckParameters_IXPLogon_RegisterOptions(a1,a2,a3,a4)<mapival.h>
CheckParameters_IXPLogon_StartMessage(a1,a2,a3,a4)<mapival.h>
CheckParameters_IXPLogon_SubmitMessage(a1,a2,a3,a4,a5)<mapival.h>
CheckParameters_IXPLogon_TransportLogoff(a1,a2)<mapival.h>
CheckParameters_IXPLogon_TransportNotify(a1,a2,a3)<mapival.h>
CheckParameters_IXPLogon_ValidateState(a1,a2,a3)<mapival.h>
CheckParameters_IXPProvider_Shutdown(a1,a2)<mapival.h>
CheckParameters_IXPProvider_TransportLogon(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
CheckParms(x)<mapival.h>
CheckRadioButton(HWND hDlg,int nIDFirstButton,int nIDLastButton,int nIDCheckButton) WINUSERAPI WINBOOL WINAPI <winuser.h>
CheckRemoteDebuggerPresent(HANDLE hProcess,PBOOL pbDebuggerPresent) WINBASEAPI WINBOOL WINAPI <debugapi.h>
CheckSumMappedFile(PVOID BaseAddress,DWORD FileLength,PDWORD HeaderSum,PDWORD CheckSum) PIMAGE_NT_HEADERS IMAGEAPI <imagehlp.h>
CheckTextLimit(__LONG32 cch,__LONG32 * pcch)virtual HRESULT WINAPI <tom.h>
CheckTokenCapability(HANDLE TokenHandle,PSID CapabilitySidToCheck,PBOOL HasCapability) WINADVAPI WINBOOL APIENTRY <securitybaseapi.h>
CheckTokenMembership(HANDLE TokenHandle,PSID SidToCheck,PBOOL IsMember) WINADVAPI WINBOOL APIENTRY <securitybaseapi.h>
CheckTokenMembershipEx(HANDLE TokenHandle,PSID SidToCheck,DWORD Flags,PBOOL IsMember) WINADVAPI WINBOOL APIENTRY <securitybaseapi.h>
ChildWindowFromPoint(HWND hWndParent,POINT Point) WINUSERAPI HWND WINAPI <winuser.h>
ChildWindowFromPointEx(HWND hwnd,POINT pt,UINT flags) WINUSERAPI HWND WINAPI <winuser.h>
ChooseColorW(LPCHOOSECOLORW) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
ChooseConnection(NETCON_CHOOSECONN * pChooseConn,INetConnection ** ppCon)virtual HRESULT WINAPI <netcon.h>
ChooseFontW(LPCHOOSEFONTW) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
ChoosePixelFormat(HDC hdc,CONST PIXELFORMATDESCRIPTOR * ppfd) WINGDIAPI int WINAPI <wingdi.h>
Chord(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ChrCmpI(WORD w1,WORD w2) LWSTDAPI_<shlwapi.h>
ChrCmpIA(WORD w1,WORD w2) LWSTDAPI_<shlwapi.h>
ChrCmpIW(WCHAR w1,WCHAR w2) LWSTDAPI_<shlwapi.h>
ChSyvToAnsi(syv)<penwin.h>
CI_GETALPHA(ci)<d3dtypes.h>
CI_GETFRACTION(ci)<d3dtypes.h>
CI_GETINDEX(ci)<d3dtypes.h>
CI_MAKE()()()
CI_MAKE(a, i, f)<d3dtypes.h>
CI_MASKALPHA(ci)<d3dtypes.h>
CI_ROUNDINDEX(ci)<d3dtypes.h>
CIBuildQueryNode(WCHAR const * wcsProperty,DBCOMMANDOP dbOperator,PROPVARIANT const * pvarPropertyValue,DBCOMMANDTREE ** ppTree,ULONG cProperties,CIPROPERTYDEF const * pProperty,LCID LocaleID) STDAPI <ntquery.h>
CIBuildQueryTree(DBCOMMANDTREE const * pExistingTree,DBCOMMANDOP dbBoolOp,ULONG cSiblings,DBCOMMANDTREE const * const * ppSibsToCombine,DBCOMMANDTREE ** ppTree) STDAPI <ntquery.h>
CICreateCommand(IUnknown ** ppCommand,IUnknown * pUnkOuter,REFIID riid,WCHAR const * pwcsCatalog,WCHAR const * pwcsMachine) STDAPI <ntquery.h>
CIDLData_CreateFromIDArray(PCIDLIST_ABSOLUTE pidlFolder,UINT cidl,PCUIDLIST_RELATIVE_ARRAY apidl,IDataObject ** ppdtobj) SHSTDAPI <shlobj.h>
CIE4ConnectionPoint(DISPID dispid,LPCITEMIDLIST pidl,WINBOOL fCanCancel)virtual HRESULT DoInvokePIDLIE4<shdeprecated.h>
CIE4ConnectionPoint(WINBOOL * pf,void ** ppv,DISPID dispid,DISPPARAMS * pdispparams)virtual HRESULT DoInvokeIE4<shdeprecated.h>
CIMakeICommand(ICommand ** ppCommand,ULONG cScope,DWORD const * aDepths,WCHAR const * const * awcsScope,WCHAR const * const * awcsCatalogs,WCHAR const * const * awcsMachine) STDAPI <ntquery.h>
CImpersonateClientHelper()<wmiatlprov.h>
CInstanceProviderHelper(IWbemServices * pNamespace,IWbemContext * pCtx)<wmiatlprov.h>
CINTERFACE_PROXY_VTABLE(n)<rpcproxy.h>
CIntrinsicEventProviderHelper(IWbemServices * pNamespace,IWbemContext * pCtx)<wmiatlprov.h>
CIRestrictionToFullTree(DBCOMMANDTREE const * pTree,WCHAR const * pwszColumns,WCHAR const * pwszSortColumns,WCHAR const * pwszGroupings,DBCOMMANDTREE ** ppTree,ULONG cProperties,CIPROPERTYDEF * pReserved,LCID LocaleID) STDAPI <ntquery.h>
CIState(WCHAR const * pwcsCat,WCHAR const * pwcsMachine,CI_STATE * pCiState) STDAPI <ntquery.h>
CITextToFullTree(WCHAR const * pwszRestriction,WCHAR const * pwszColumns,WCHAR const * pwszSortColumns,WCHAR const * pwszGroupings,DBCOMMANDTREE ** ppTree,ULONG cProperties,CIPROPERTYDEF * pProperties,LCID LocaleID) STDAPI <ntquery.h>
CITextToFullTreeEx(WCHAR const * pwszRestriction,ULONG ulDialect,WCHAR const * pwszColumns,WCHAR const * pwszSortColumns,WCHAR const * pwszGroupings,DBCOMMANDTREE ** ppTree,ULONG cProperties,CIPROPERTYDEF * pProperties,LCID LocaleID) STDAPI <ntquery.h>
CITextToSelectTree(WCHAR const * pwszRestriction,DBCOMMANDTREE ** ppTree,ULONG cProperties,CIPROPERTYDEF * pProperties,LCID LocaleID) STDAPI <ntquery.h>
CITextToSelectTreeEx(WCHAR const * pwszRestriction,ULONG ulDialect,DBCOMMANDTREE ** ppTree,ULONG cProperties,CIPROPERTYDEF * pProperties,LCID LocaleID) STDAPI <ntquery.h>
CL_OPEN_AF_COMPLETE_HANDLER(IN NDIS_STATUS Status,IN NDIS_HANDLE ProtocolAfContext,IN NDIS_HANDLE NdisAfHandle)typedef VOID<ndis.h>
CLAIMMEDIALABEL(const BYTE * const pBuffer,const DWORD nBufferSize,MediaLabelInfo * const pLabelInfo)typedef DWORD<ntmsmli.h>
CLAIMMEDIALABELEX(const BYTE * const pBuffer,const DWORD nBufferSize,MediaLabelInfo * const pLabelInfo,GUID * LabelGuid)typedef DWORD<ntmsmli.h>
class_name() int <sql_1.h>
ClassAcquireChildLock(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassAcquireRemoveLockEx(PDEVICE_OBJECT DeviceObject,PVOID Tag,PCSTR File,ULONG Line)<classpnp.h>
ClassAsynchronousCompletion(PDEVICE_OBJECT DeviceObject,PIRP Irp,PVOID Event)<classpnp.h>
ClassBuildRequest(PDEVICE_OBJECT DeviceObject,PIRP Irp)<classpnp.h>
ClassCheckMediaState(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassCheckVerifyComplete(PDEVICE_OBJECT DeviceObject,PIRP Irp,PVOID Context)<classpnp.h>
ClassClaimDevice(PDEVICE_OBJECT LowerDeviceObject,BOOLEAN Release)<classpnp.h>
ClassCleanupMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassCompleteRequest(PDEVICE_OBJECT DeviceObject,PIRP Irp,CCHAR PriorityBoost)<classpnp.h>
ClassCreateDeviceObject(PDRIVER_OBJECT DriverObject,PCCHAR ObjectNameBuffer,PDEVICE_OBJECT LowerDeviceObject,BOOLEAN IsFdo,PDEVICE_OBJECT * DeviceObject)<classpnp.h>
ClassDebugPrint(CLASS_DEBUG_LEVEL DebugPrintLevel,PCCHAR DebugMessage,...)<classpnp.h>
ClassDeleteSrbLookasideList(PCOMMON_DEVICE_EXTENSION CommonExtension)<classpnp.h>
ClassDeviceControl(PDEVICE_OBJECT DeviceObject,PIRP Irp)<classpnp.h>
ClassDisableMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassEnableMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassFindModePage(PCHAR ModeSenseBuffer,ULONG Length,UCHAR PageMode,BOOLEAN Use6Byte)<classpnp.h>
ClassForwardIrpSynchronous(PCOMMON_DEVICE_EXTENSION CommonExtension,PIRP Irp)<classpnp.h>
ClassGetDescriptor(PDEVICE_OBJECT DeviceObject,PSTORAGE_PROPERTY_ID PropertyId,PSTORAGE_DESCRIPTOR_HEADER * Descriptor)<classpnp.h>
ClassGetDeviceParameter(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,PWSTR SubkeyName,PWSTR ParameterName,PULONG ParameterValue)<classpnp.h>
ClassGetDriverExtension(PDRIVER_OBJECT DriverObject)<classpnp.h>
ClassGetFsContext(PCOMMON_DEVICE_EXTENSION CommonExtension,PFILE_OBJECT FileObject)<classpnp.h>
ClassGetVpb(PDEVICE_OBJECT DeviceObject)<classpnp.h>
ClassInitialize(PVOID Argument1,PVOID Argument2,PCLASS_INIT_DATA InitializationData)<classpnp.h>
ClassInitializeEx(PDRIVER_OBJECT DriverObject,LPGUID Guid,PVOID Data)<classpnp.h>
ClassInitializeMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,PUCHAR EventPrefix)<classpnp.h>
ClassInitializeSrbLookasideList(PCOMMON_DEVICE_EXTENSION CommonExtension,ULONG NumberElements)<classpnp.h>
ClassInitializeTestUnitPolling(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,BOOLEAN AllowDriveToSleep)<classpnp.h>
ClassInternalIoControl(PDEVICE_OBJECT DeviceObject,PIRP Irp)<classpnp.h>
ClassInterpretSenseInfo(PDEVICE_OBJECT DeviceObject,PSCSI_REQUEST_BLOCK Srb,UCHAR MajorFunctionCode,ULONG IoDeviceCode,ULONG RetryCount,NTSTATUS * Status,ULONG * RetryInterval)<classpnp.h>
ClassInvalidateBusRelations(PDEVICE_OBJECT Fdo)<classpnp.h>
ClassIoComplete(PDEVICE_OBJECT DeviceObject,PIRP Irp,PVOID Context)<classpnp.h>
ClassIoCompleteAssociated(PDEVICE_OBJECT DeviceObject,PIRP Irp,PVOID Context)<classpnp.h>
ClassMarkChildMissing(PPHYSICAL_DEVICE_EXTENSION PdoExtension,BOOLEAN AcquireChildLock)<classpnp.h>
ClassMarkChildrenMissing(PFUNCTIONAL_DEVICE_EXTENSION Fdo)<classpnp.h>
ClassModeSense(PDEVICE_OBJECT DeviceObject,PCHAR ModeSenseBuffer,ULONG Length,UCHAR PageMode)<classpnp.h>
ClassNotifyFailurePredicted(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,PUCHAR Buffer,ULONG BufferSize,BOOLEAN LogError,ULONG UniqueErrorValue,UCHAR PathId,UCHAR TargetId,UCHAR Lun)<classpnp.h>
classoffset(base,derived)<icrsint.h>
ClassQueryTimeOutRegistryValue(PDEVICE_OBJECT DeviceObject)<classpnp.h>
ClassReadDriveCapacity(PDEVICE_OBJECT DeviceObject)<classpnp.h>
ClassReleaseChildLock(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassReleaseQueue(PDEVICE_OBJECT DeviceObject)<classpnp.h>
ClassReleaseRemoveLock(PDEVICE_OBJECT DeviceObject,PIRP Tag)<classpnp.h>
ClassRemoveDevice(PDEVICE_OBJECT DeviceObject,UCHAR RemoveType)<classpnp.h>
ClassResetMediaChangeTimer(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension)<classpnp.h>
ClassScanForSpecial(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,CLASSPNP_SCAN_FOR_SPECIAL_INFO DeviceList[],PCLASS_SCAN_FOR_SPECIAL_HANDLER Function)<classpnp.h>
ClassSendDeviceIoControlSynchronous(ULONG IoControlCode,PDEVICE_OBJECT TargetDeviceObject,PVOID Buffer,ULONG InputBufferLength,ULONG OutputBufferLength,BOOLEAN InternalDeviceIoControl,PIO_STATUS_BLOCK IoStatus)<classpnp.h>
ClassSendIrpSynchronous(PDEVICE_OBJECT TargetDeviceObject,PIRP Irp)<classpnp.h>
ClassSendNotification(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,const GUID * Guid,ULONG ExtraDataSize,PVOID ExtraData)<classpnp.h>
ClassSendSrbAsynchronous(PDEVICE_OBJECT DeviceObject,PSCSI_REQUEST_BLOCK Srb,PIRP Irp,PVOID BufferAddress,ULONG BufferLength,BOOLEAN WriteToDevice)<classpnp.h>
ClassSendSrbSynchronous(PDEVICE_OBJECT DeviceObject,PSCSI_REQUEST_BLOCK Srb,PVOID BufferAddress,ULONG BufferLength,BOOLEAN WriteToDevice)<classpnp.h>
ClassSendStartUnit(PDEVICE_OBJECT DeviceObject)<classpnp.h>
ClassSetDeviceParameter(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,PWSTR SubkeyName,PWSTR ParameterName,ULONG ParameterValue)<classpnp.h>
ClassSetFailurePredictionPoll(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,FAILURE_PREDICTION_METHOD FailurePredictionMethod,ULONG PollingPeriod)<classpnp.h>
ClassSetMediaChangeState(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,MEDIA_CHANGE_DETECTION_STATE State,BOOLEAN Wait)<classpnp.h>
ClassSignalCompletion(PDEVICE_OBJECT DeviceObject,PIRP Irp,PKEVENT Event)<classpnp.h>
ClassSpinDownPowerHandler(PDEVICE_OBJECT DeviceObject,PIRP Irp)<classpnp.h>
ClassSplitRequest(PDEVICE_OBJECT DeviceObject,PIRP Irp,ULONG MaximumBytes)<classpnp.h>
ClassStopUnitPowerHandler(PDEVICE_OBJECT DeviceObject,PIRP Irp)<classpnp.h>
ClassUpdateInformationInRegistry(PDEVICE_OBJECT Fdo,PCHAR DeviceName,ULONG DeviceNumber,PINQUIRYDATA InquiryData,ULONG InquiryDataLength)<classpnp.h>
ClassWmiCompleteRequest(PDEVICE_OBJECT DeviceObject,PIRP Irp,NTSTATUS Status,ULONG BufferUsed,CCHAR PriorityBoost)<classpnp.h>
ClassWmiFireEvent(PDEVICE_OBJECT DeviceObject,LPGUID Guid,ULONG InstanceIndex,ULONG EventDataSize,PVOID EventData)<classpnp.h>
CLCTL_ADD_CRYPTO_CHECKPOINT(43,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_ADD_DEPENDENCY(4,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_ADD_OWNER(6,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_ADD_REGISTRY_CHECKPOINT(40,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT(48,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT(47,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_CLUSTER_NAME_CHANGED(10,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_CLUSTER_VERSION_CHANGED(11,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_DELETE(1,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_DELETE_CRYPTO_CHECKPOINT(44,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_DELETE_REGISTRY_CHECKPOINT(41,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_ENUM_COMMON_PROPERTIES(20,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_ENUM_PRIVATE_PROPERTIES(30,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_EVICT_NODE(3,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_EXTERNAL_CODE(Function,Access,Modify)<clusapi.h>
CLCTL_FIXUP_ON_UPGRADE(12,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_FORCE_QUORUM(17,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_FSWITNESS_GET_EPOCH_INFO(23,CLUS_ACCESS_READ, CLUS_NO_MODIFY)<clusapi.h>
CLCTL_FSWITNESS_RELEASE_LOCK(25,CLUS_ACCESS_WRITE, CLUS_MODIFY)<clusapi.h>
CLCTL_FSWITNESS_SET_EPOCH_INFO(24,CLUS_ACCESS_WRITE, CLUS_MODIFY)<clusapi.h>
CLCTL_GET_CHARACTERISTICS(1,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_CLASS_INFO(3,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_COMMON_PROPERTIES(22,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_COMMON_PROPERTY_FMTS(25,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_CRYPTO_CHECKPOINTS(45,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_FLAGS(2,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_FQDN(15,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_ID(14,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_LOADBAL_PROCESS_LIST(50,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_NETWORK(13,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_NETWORK_NAME(90,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_PRIVATE_PROPERTIES(32,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_PRIVATE_PROPERTY_FMTS(35,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_REGISTRY_CHECKPOINTS(42,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_RO_COMMON_PROPERTIES(21,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_GET_RO_PRIVATE_PROPERTIES(31,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_HOLD_IO(15,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_INITIALIZE(18,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_INSTALL_NODE(2,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_INTERNAL_CODE(Function,Access,Modify)<clusapi.h>
CLCTL_JOINING_GROUP(22,CLUS_ACCESS_WRITE, CLUS_MODIFY)<clusapi.h>
CLCTL_LEAVING_GROUP(21,CLUS_ACCESS_WRITE, CLUS_MODIFY)<clusapi.h>
CLCTL_NETNAME_CREDS_NOTIFYCAM(26,CLUS_ACCESS_WRITE, CLUS_MODIFY)<clusapi.h>
CLCTL_NETNAME_CREDS_UPDATED(98,CLUS_ACCESS_WRITE,CLUS_MODIFY)<clusapi.h>
CLCTL_PROVIDER_STATE_CHANGE(20,CLUS_ACCESS_WRITE, CLUS_MODIFY)<clusapi.h>
CLCTL_QUERY_DELETE(110,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_QUERY_MAINTENANCE_MODE(120,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_REMOVE_DEPENDENCY(5,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_RESOURCE_UPGRADE_DLL(46,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_RESUME_IO(16,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_SET_COMMON_PROPERTIES(23,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_SET_MAINTENANCE_MODE(121,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_SET_NAME(9,CLUS_ACCESS_WRITE,CLUS_MODIFY)CLUS_MODIFY<msclus.h>
CLCTL_SET_PRIVATE_PROPERTIES(33,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_STARTING_PHASE1(13,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_STARTING_PHASE2(14,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_STATE_CHANGE_REASON(19,CLUS_ACCESS_WRITE,CLUS_MODIFY)<msclus.h>
CLCTL_STORAGE_GET_AVAILABLE_DISKS(101,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_STORAGE_GET_DISK_INFO(100,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_STORAGE_GET_DISK_NUMBER(27,CLUS_ACCESS_READ, CLUS_NO_MODIFY)<clusapi.h>
CLCTL_STORAGE_IS_PATH_VALID(102,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_UNKNOWN(0,CLUS_ACCESS_ANY,CLUS_NO_MODIFY)<msclus.h>
CLCTL_VALIDATE_COMMON_PROPERTIES(24,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
CLCTL_VALIDATE_PRIVATE_PROPERTIES(34,CLUS_ACCESS_READ,CLUS_NO_MODIFY)<msclus.h>
cldap_open(PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
cldap_openA(PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
cldap_openW(PWCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
CLEANLOCALSTORAGE_UserFree(ULONG *,CLEANLOCALSTORAGE *)void            __RPC_USER <oaidl.h>
CLEANLOCALSTORAGE_UserMarshal(ULONG *,unsigned char *,CLEANLOCALSTORAGE *)unsigned char<oaidl.h>
CLEANLOCALSTORAGE_UserSize(ULONG *,ULONG,CLEANLOCALSTORAGE *)ULONG           __RPC_USER <oaidl.h>
CLEANLOCALSTORAGE_UserUnmarshal(ULONG *,unsigned char *,CLEANLOCALSTORAGE *)unsigned char<oaidl.h>
CleanNtmsDrive(HANDLE hSession,LPNTMS_GUID lpDriveId) DWORD WINAPI <ntmsapi.h>
Cleanup() void <sql_1.h>
Cleanup(EClusCfgCleanupReason cccrReasonIn)virtual HRESULT WINAPI <sql_1.h>
CleanupLocalNode(DWORD dwDelayIn)virtual HRESULT WINAPI <cluscfgserver.h>
CleanupRemoteNode(const WCHAR * pcszEvictedNodeNameIn,DWORD dwDelayIn)virtual HRESULT WINAPI <cluscfgserver.h>
Clear()inline void _variant_t::<tapi3if.h>
Clear(const Color & color)	Status <tapi3if.h>
Clear(void)virtual HRESULT WINAPI <tapi3if.h>
CLEAR_FLAG()()()
CLEAR_FLAG(Flags, Bit)<classpnp.h>
ClearAllTabs(void)virtual HRESULT WINAPI <tom.h>
CLEARBIT(pb,i)<celib.h>
ClearBrushRemapTable()	Status <gdiplusimageattributes.h>
ClearColorKey(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearColorMatrices(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearColorMatrix(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearCommBreak(HANDLE hFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
ClearCommError(HANDLE hFile,LPDWORD lpErrors,LPCOMSTAT lpStat) WINBASEAPI WINBOOL WINAPI <winbase.h>
ClearCustData(LPCUSTDATA pCustData)WINOLEAUTAPI_<oleauto.h>
ClearDisplayText(HHILITER hhil) ERRORCODE WINAPI <ftsiface.h>
ClearEventLog(HANDLE hEventLog,LPCSTR lpBackupFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
ClearEventLogA(HANDLE hEventLog,LPCSTR lpBackupFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
ClearEventLogW(HANDLE hEventLog,LPCWSTR lpBackupFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
ClearFlag(_F,_SF)  <ntifs.h>
ClearGamma(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearHmenuProps(HMENU hmenu,DWORD idChild,const MSAAPROPID * paProps,int cProps)virtual HRESULT WINAPI <oleacc.h>
ClearHwndProps(HWND hwnd,DWORD idObject,DWORD idChild,const MSAAPROPID * paProps,int cProps)virtual HRESULT WINAPI <oleacc.h>
ClearMarkers()	Status <gdipluspath.h>
ClearNodeList(void)virtual HRESULT WINAPI <cluscfgwizard.h>
ClearNoOp(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearOutputChannel(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearOutputChannelColorProfile(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearPersistentiScsiDevices(void) HRESULT WINAPI <iscsidsc.h>
ClearProps(const BYTE * pIDString,DWORD dwIDStringLen,const MSAAPROPID * paProps,int cProps)virtual HRESULT WINAPI <oleacc.h>
ClearRemapTable(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
ClearRouteFlags(pRoute)<rtm.h>
ClearRouteValid(pRoute)<rtm.h>
ClearRowPosition(void)virtual HRESULT WINAPI <oledb.h>
ClearThreshold(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
CLFS_BLOCK_ALLOCATION(ULONG cbBufferSize,PVOID pvUserContext)typedef PVOID<clfsw32.h>
CLFS_BLOCK_DEALLOCATION(PVOID pvBuffer,PVOID pvUserContext)typedef void<clfsw32.h>
CLFS_PRINT_RECORD_ROUTINE(PFILE,CLFS_RECORD_TYPE,PVOID,ULONG)typedef ULONG<clfsw32.h>
Click(__LONG32 dwCharID,short fwKeys,__LONG32 x,__LONG32 y)virtual HRESULT WINAPI <agtsvr.h>
ClientToScreen(HWND hWnd,LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
Cling(WINBOOL * pfCling)virtual HRESULT WINAPI <mshtmlc.h>
ClipCursor(CONST RECT * lpRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
CLIPFORMAT_UserFree(ULONG *,CLIPFORMAT *)void            __RPC_USER <urlmon.h>
CLIPFORMAT_UserMarshal(ULONG *,unsigned char *,CLIPFORMAT *)unsigned char<urlmon.h>
CLIPFORMAT_UserSize(ULONG *,ULONG,CLIPFORMAT *)ULONG           __RPC_USER <urlmon.h>
CLIPFORMAT_UserUnmarshal(ULONG *,unsigned char *,CLIPFORMAT *)unsigned char<urlmon.h>
CLIPOBJ_bEnum(CLIPOBJ * pco,ULONG cj,ULONG * pv)<winddi.h>
CLIPOBJ_cEnumStart(CLIPOBJ * pco,WINBOOL bAll,ULONG iType,ULONG iDirection,ULONG cLimit)<winddi.h>
CLIPOBJ_ppoGetPath(CLIPOBJ * pco)<winddi.h>
CLock() ~<msputils.h>
CLock(CMSPCritSection & CriticalSection) <msputils.h>
Clone()	RectF<wia.h>
Clone(const Rect & rect,PixelFormat format)__inline__ Bitmap<wia.h>
Clone(const RectF & rect,PixelFormat format)__inline__ Bitmap<wia.h>
Clone(IEnumACDGroup ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumAddress ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumAgent ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumAgentHandler ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumAgentSession ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumBackgroundCopyFiles ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumBackgroundCopyGroups ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumBackgroundCopyJobs ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumBackgroundCopyJobs1 ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumBstr ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCall ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCallHub ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCallingCard ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCERTVIEWATTRIBUTE ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCERTVIEWCOLUMN ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCERTVIEWEXTENSION ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCERTVIEWROW ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumChannels ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumClusCfgIPAddresses ** ppEnumIPAddressesOut)virtual HRESULT WINAPI <wia.h>
Clone(IEnumClusCfgManagedResources ** ppEnumManagedResourcesOut)virtual HRESULT WINAPI <wia.h>
Clone(IEnumClusCfgNetworks ** ppEnumNetworksOut)virtual HRESULT WINAPI <wia.h>
Clone(IEnumClusCfgPartitions ** ppEnumPartitions)virtual HRESULT WINAPI <wia.h>
Clone(IEnumCodePage ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumDialableAddrs ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumDirectory ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumDirectoryObject ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumEventObject ** ppInterface)virtual HRESULT WINAPI <wia.h>
Clone(IEnumHLITEM ** ppienumhlitem)virtual HRESULT WINAPI <wia.h>
Clone(IEnumItemProperties ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumLocation ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumMcastScope ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumMedia ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumMsmConfigurableItem ** pemsmConfigurableItem)virtual HRESULT WINAPI <wia.h>
Clone(IEnumMsmDependency ** pemsmDependencies)virtual HRESULT WINAPI <wia.h>
Clone(IEnumMsmError ** pemsmErrors)virtual HRESULT WINAPI <wia.h>
Clone(IEnumMsmString ** pemsmStrings)virtual HRESULT WINAPI <wia.h>
Clone(IEnumNames ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumNetConnection ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumNetSharingEveryConnection ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumNetSharingPortMapping ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumNetSharingPrivateConnection ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumNetSharingPublicConnection ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumParticipant ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumPhone ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumPluggableSuperclassInfo ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumPluggableTerminalClassInfo ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumPStoreItems ** ppenum) virtual HRESULT WINAPI <wia.h>
Clone(IEnumPStoreProviders ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumPStoreTypes ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumQueue ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumRfc1766 ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumScript ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumStream ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumStreamIdMap ** ppIEnumStreamIdMap)virtual HRESULT WINAPI <wia.h>
Clone(IEnumSubscription ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumSubStream ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumTASK ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumTerminal ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumTerminalClass ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumTime ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumWIA_DEV_CAPS ** ppIEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumWIA_DEV_INFO ** ppIEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumWIA_FORMAT_INFO ** ppIEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumWiaItem ** ppIEnum)virtual HRESULT WINAPI <wia.h>
Clone(IEnumWorkItems ** ppEnumWorkItems)virtual HRESULT WINAPI <wia.h>
Clone(INT x,INT y,INT width,INT height,PixelFormat format)__inline__ Bitmap<wia.h>
Clone(IRTCEnumBuddies ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IRTCEnumGroups ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IRTCEnumParticipants ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IRTCEnumPresenceDevices ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IRTCEnumProfiles ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IRTCEnumUserSearchResults ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(IRTCEnumWatchers ** ppEnum)virtual HRESULT WINAPI <wia.h>
Clone(ISyncMgrEnumItems ** ppenum)virtual HRESULT WINAPI <wia.h>
Clone(ITravelLog ** pptl)virtual HRESULT WINAPI <wia.h>
Clone(IUnknown * piunkOuter,REFIID riid,IUnknown ** ppiunkObj)virtual HRESULT WINAPI <wia.h>
Clone(LPBYTEBUFFER * ppByteBuffer)virtual HRESULT WINAPI <wia.h>
Clone(REAL x,REAL y,REAL width,REAL height,PixelFormat format)__inline__ Bitmap<wia.h>
CloneElement(IHTMLElement * pElemCloneThis,IHTMLElement ** ppElementTheClone)virtual HRESULT WINAPI <mshtmlc.h>
CloneWithCommitDisabled(ITransaction ** ppITransaction)virtual HRESULT WINAPI <transact.h>
Close(DWORD reserved)virtual HRESULT WINAPI <tapi3if.h>
Close(void)virtual HRESULT WINAPI <tapi3if.h>
Close(WINBOOL i_fDoRecovery)virtual HRESULT WINAPI <tapi3if.h>
Close(WINBOOL SaveChanges)virtual HRESULT WINAPI <tapi3if.h>
CLOSE_ADAPTER_HANDLER(IN NDIS_HANDLE MacBindingHandle)typedef NDIS_STATUS<ndis.h>
CloseAllFigures()	Status <gdipluspath.h>
CloseAndResetLogFile(HANDLE hLog)WINBOOL WINAPI <clfsw32.h>
CloseApplication(BSTR bstrApplicationName,LONG lFlag)virtual HRESULT WINAPI <azroles.h>
CloseClipboard(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
CloseCluster(HCLUSTER hCluster) WINBOOL WINAPI <clusapi.h>
CloseClusterGroup(HGROUP hGroup) WINBOOL WINAPI <clusapi.h>
CloseClusterNetInterface(HNETINTERFACE hNetInterface) WINBOOL WINAPI <clusapi.h>
CloseClusterNetwork(HNETWORK hNetwork) WINBOOL WINAPI <clusapi.h>
CloseClusterNode(HNODE hNode) WINBOOL WINAPI <clusapi.h>
CloseClusterNotifyPort(HCHANGE hChange) WINBOOL WINAPI <clusapi.h>
CloseClusterResource(HRESOURCE hResource) WINBOOL WINAPI <clusapi.h>
CloseColorProfile(HPROFILE) WINBOOL WINAPI <icm.h>
CloseCompressor(COMPRESSOR_HANDLE CompressorHandle) WINBOOL WINAPI <compressapi.h>
CloseDatabase(const VARIANT_BOOL Commit)virtual HRESULT WINAPI <mergemod.h>
CloseDecompressor(DECOMPRESSOR_HANDLE DecompressorHandle) WINBOOL WINAPI <compressapi.h>
CloseDesktop(HDESK hDesktop) WINUSERAPI WINBOOL WINAPI <winuser.h>
CloseDriver(HDRVR hDriver,LPARAM lParam1,LPARAM lParam2) WINMMAPI LRESULT WINAPI <mmsystem.h>
CloseEncryptedFileRaw(PVOID pvContext) WINADVAPI VOID WINAPI <winbase.h>
CloseEnhMetaFile(HDC hdc) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
CloseEventLog(HANDLE hEventLog) WINADVAPI WINBOOL WINAPI <winbase.h>
CloseFigure()	Status <wingdi.h>
CloseFigure(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
CloseGestureInfoHandle(HGESTUREINFO hGestureInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
CloseHandle(HANDLE hObject) WINBASEAPI WINBOOL WINAPI <scesvc.h>
CloseHandle(SCESVC_HANDLE scesvcHandle)virtual HRESULT WINAPI <scesvc.h>
CloseIMsgSession(LPMSGSESS lpMsgSess) STDAPI_<imessage.h>
CloseINFEngine(HINF hInf) HRESULT WINAPI <advpub.h>
CloseItem(PST_KEY Key,const GUID * pItemType,const GUID * pItemSubtype,LPCWSTR szItemName,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
CloseKey(METADATA_HANDLE hMDHandle)virtual HRESULT WINAPI <iadmw.h>
CloseLog(void)virtual HRESULT WINAPI <mergemod.h>
CloseMetaFile(HDC hdc) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
CloseModule(void)virtual HRESULT WINAPI <mergemod.h>
CloseNonCachedFile(PFIO_CONTEXT) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
CloseNtmsNotification(HANDLE hNotification) DWORD WINAPI <ntmsapi.h>
CloseNtmsSession(HANDLE hSession) DWORD WINAPI <ntmsapi.h>
ClosePort(HANDLE hPort)<winsplp.h>
ClosePrinter(HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
ClosePrinterToken(HANDLE hToken)WINBOOL WINAPI <winsplp.h>
ClosePrintProcessor(HANDLE hPrintProcessor)<winsplp.h>
ClosePrivateNamespace(HANDLE Handle,ULONG Flags) WINBASEAPI BOOLEAN WINAPI <namespaceapi.h>
CloseRecognizer(VOID) VOID WINAPI <penwin.h>
CloseSearchHandle(ADS_SEARCH_HANDLE hSearchResult)virtual HRESULT WINAPI <iads.h>
CloseServiceHandle(SC_HANDLE hSCObject) WINADVAPI WINBOOL WINAPI <winsvc.h>
closesocket(SOCKET s) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
CloseSource(HSOURCE hSourceID)virtual HRESULT WINAPI <oledbdep.h>
CloseSpoolFileHandle(HANDLE hPrinter,HANDLE hSpoolFile)WINBOOL WINAPI <winspool.h>
CloseThemeData(HTHEME hTheme)THEMEAPI <uxtheme.h>
CloseThreadpool(PTP_POOL ptpp) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP ptpcg) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP ptpcg,WINBOOL fCancelPendingCallbacks,PVOID pvCleanupContext) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadpoolIo(PTP_IO pio) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadpoolTimer(PTP_TIMER pti) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadpoolWait(PTP_WAIT pwa) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadpoolWork(PTP_WORK pwk) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
CloseThreadWaitChainSession(HWCT WctHandle) VOID WINAPI <wct.h>
CloseTouchInputHandle(HTOUCHINPUT hTouchInput) WINUSERAPI WINBOOL WINAPI <winuser.h>
CloseTrace(TRACEHANDLE TraceHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
CloseWindow(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
CloseWindowStation(HWINSTA hWinSta) WINUSERAPI WINBOOL WINAPI <winuser.h>
CLRES_V1_FUNCTION_TABLE()()()
CLRES_V2_FUNCTION_TABLE_SET()()()
CLSCTX_PS_DLL(int)<wtypesbase.h>
CLSIDFromProgID(LPCOLESTR lpszProgID,LPCLSID lpclsid)WINOLEAPI <combaseapi.h>
CLSIDFromProgIDEx(LPCOLESTR lpszProgID,LPCLSID lpclsid)WINOLEAPI <objbase.h>
CLSIDFromString(LPCOLESTR lpsz,LPCLSID pclsid)WINOLEAPI <combaseapi.h>
CLspec_len(CtrlLoadFlowspec)<lpmapi.h>
CLUADMEX_OBJECT_TYPE(WINAPI * GetObjectType) <cluadmex.h>
CLUSCTL_CLUSTER_BATCH_BLOCK_KEY(CLCTL_BATCH_BLOCK_KEY)<clusapi.h>
CLUSCTL_CLUSTER_CHECK_VOTER_DOWN(CLCTL_CHECK_VOTER_DOWN)<clusapi.h>
CLUSCTL_CLUSTER_CODE(Function)<clusapi.h>
CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES(CLCTL_ENUM_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES(CLCTL_GET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_CLUSTER_GET_FQDN(CLCTL_GET_FQDN)<msclus.h>
CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES(CLCTL_GET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES(CLCTL_SET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES(CLCTL_SET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_CLUSTER_SHUTDOWN(CLCTL_SHUTDOWN)<clusapi.h>
CLUSCTL_CLUSTER_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_GET_ACCESS_MODE(ControlCode)<clusapi.h>
CLUSCTL_GET_CONTROL_FUNCTION(ControlCode)<clusapi.h>
CLUSCTL_GET_CONTROL_OBJECT(ControlCode)<clusapi.h>
CLUSCTL_GROUP_CODE(Function)<clusapi.h>
CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES(CLCTL_ENUM_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES(CLCTL_ENUM_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_GET_CHARACTERISTICS(CLCTL_GET_CHARACTERISTICS)<msclus.h>
CLUSCTL_GROUP_GET_COMMON_PROPERTIES(CLCTL_GET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS(CLCTL_GET_COMMON_PROPERTY_FMTS)<msclus.h>
CLUSCTL_GROUP_GET_FLAGS(CLCTL_GET_FLAGS)<msclus.h>
CLUSCTL_GROUP_GET_ID(CLCTL_GET_ID)<msclus.h>
CLUSCTL_GROUP_GET_NAME(CLCTL_GET_NAME)<msclus.h>
CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES(CLCTL_GET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES(CLCTL_GET_RO_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_QUERY_DELETE(CLCTL_QUERY_DELETE)<msclus.h>
CLUSCTL_GROUP_SET_COMMON_PROPERTIES(CLCTL_SET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES(CLCTL_SET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_GROUP_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_NETINTERFACE_CODE(Function)<clusapi.h>
CLUSCTL_NETINTERFACE_GET_FLAGS(CLCTL_GET_FLAGS)<msclus.h>
CLUSCTL_NETINTERFACE_GET_ID(CLCTL_GET_ID)<msclus.h>
CLUSCTL_NETINTERFACE_GET_NAME(CLCTL_GET_NAME)<msclus.h>
CLUSCTL_NETINTERFACE_GET_NETWORK(CLCTL_GET_NETWORK)<msclus.h>
CLUSCTL_NETINTERFACE_GET_NODE(CLCTL_GET_NODE)<msclus.h>
CLUSCTL_NETINTERFACE_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_NETWORK_CODE(Function)<clusapi.h>
CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES(CLCTL_ENUM_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NETWORK_GET_CHARACTERISTICS(CLCTL_GET_CHARACTERISTICS)<msclus.h>
CLUSCTL_NETWORK_GET_COMMON_PROPERTIES(CLCTL_GET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NETWORK_GET_FLAGS(CLCTL_GET_FLAGS)<msclus.h>
CLUSCTL_NETWORK_GET_ID(CLCTL_GET_ID)<msclus.h>
CLUSCTL_NETWORK_GET_NAME(CLCTL_GET_NAME)<msclus.h>
CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES(CLCTL_GET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_NETWORK_SET_COMMON_PROPERTIES(CLCTL_SET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES(CLCTL_SET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_NETWORK_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_NODE_CODE(Function)<clusapi.h>
CLUSCTL_NODE_ENUM_COMMON_PROPERTIES(CLCTL_ENUM_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES(CLCTL_ENUM_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_NODE_GET_CHARACTERISTICS(CLCTL_GET_CHARACTERISTICS)<msclus.h>
CLUSCTL_NODE_GET_COMMON_PROPERTIES(CLCTL_GET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS(CLCTL_GET_COMMON_PROPERTY_FMTS)<msclus.h>
CLUSCTL_NODE_GET_FLAGS(CLCTL_GET_FLAGS)<msclus.h>
CLUSCTL_NODE_GET_ID(CLCTL_GET_ID)<msclus.h>
CLUSCTL_NODE_GET_NAME(CLCTL_GET_NAME)<msclus.h>
CLUSCTL_NODE_GET_PRIVATE_PROPERTIES(CLCTL_GET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS(CLCTL_GET_PRIVATE_PROPERTY_FMTS)<msclus.h>
CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES(CLCTL_GET_RO_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES(CLCTL_GET_RO_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_NODE_SET_COMMON_PROPERTIES(CLCTL_SET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_NODE_SET_PRIVATE_PROPERTIES(CLCTL_SET_PRIVATE_PROPERTIES)<msclus.h>
CLUSCTL_NODE_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT(CLCTL_ADD_CRYPTO_CHECKPOINT)<msclus.h>
CLUSCTL_RESOURCE_ADD_DEPENDENCY(CLCTL_ADD_DEPENDENCY)<msclus.h>
CLUSCTL_RESOURCE_ADD_OWNER(CLCTL_ADD_OWNER)<msclus.h>
CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED(CLCTL_CLUSTER_NAME_CHANGED)<msclus.h>
CLUSCTL_RESOURCE_CODE(Function)<clusapi.h>
CLUSCTL_RESOURCE_DELETE(CLCTL_DELETE)<msclus.h>
CLUSCTL_RESOURCE_EVICT_NODE(CLCTL_EVICT_NODE)<msclus.h>
CLUSCTL_RESOURCE_FORCE_QUORUM(CLCTL_FORCE_QUORUM)<msclus.h>
CLUSCTL_RESOURCE_GET_CHARACTERISTICS(CLCTL_GET_CHARACTERISTICS)<msclus.h>
CLUSCTL_RESOURCE_GET_CLASS_INFO(CLCTL_GET_CLASS_INFO)<msclus.h>
CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES(CLCTL_GET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_RESOURCE_GET_FLAGS(CLCTL_GET_FLAGS)<msclus.h>
CLUSCTL_RESOURCE_GET_ID(CLCTL_GET_ID)<msclus.h>
CLUSCTL_RESOURCE_GET_NAME(CLCTL_GET_NAME)<msclus.h>
CLUSCTL_RESOURCE_GET_NETWORK_NAME(CLCTL_GET_NETWORK_NAME)<msclus.h>
CLUSCTL_RESOURCE_GET_RESOURCE_TYPE(CLCTL_GET_RESOURCE_TYPE)<msclus.h>
CLUSCTL_RESOURCE_INITIALIZE(CLCTL_INITIALIZE)<msclus.h>
CLUSCTL_RESOURCE_INSTALL_NODE(CLCTL_INSTALL_NODE)<msclus.h>
CLUSCTL_RESOURCE_JOINING_GROUP(CLCTL_JOINING_GROUP)<clusapi.h>
CLUSCTL_RESOURCE_LEAVING_GROUP(CLCTL_LEAVING_GROUP)<clusapi.h>
CLUSCTL_RESOURCE_NETNAME_CREDS_UPDATED(CLCTL_NETNAME_CREDS_UPDATED)<clusapi.h>
CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE(CLCTL_PROVIDER_STATE_CHANGE)<clusapi.h>
CLUSCTL_RESOURCE_QUERY_DELETE(CLCTL_QUERY_DELETE)<msclus.h>
CLUSCTL_RESOURCE_REMOVE_DEPENDENCY(CLCTL_REMOVE_DEPENDENCY)<msclus.h>
CLUSCTL_RESOURCE_REMOVE_OWNER(CLCTL_REMOVE_OWNER)<msclus.h>
CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES(CLCTL_SET_COMMON_PROPERTIES)<msclus.h>
CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE(CLCTL_SET_MAINTENANCE_MODE)<msclus.h>
CLUSCTL_RESOURCE_SET_NAME(CLCTL_SET_NAME)<msclus.h>
CLUSCTL_RESOURCE_STATE_CHANGE_REASON(CLCTL_STATE_CHANGE_REASON)<msclus.h>
CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO(CLCTL_STORAGE_GET_DISK_INFO)<msclus.h>
CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID(CLCTL_STORAGE_IS_PATH_VALID)<msclus.h>
CLUSCTL_RESOURCE_TYPE_CODE(Function)<clusapi.h>
CLUSCTL_RESOURCE_TYPE_EVICT_NODE(CLCTL_EVICT_NODE)<msclus.h>
CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE(CLCTL_FIXUP_ON_UPGRADE)<msclus.h>
CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT(CLCTL_GET_ARB_TIMEOUT)<msclus.h>
CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO(CLCTL_GET_CLASS_INFO)<msclus.h>
CLUSCTL_RESOURCE_TYPE_GET_FLAGS(CLCTL_GET_FLAGS)<msclus.h>
CLUSCTL_RESOURCE_TYPE_HOLD_IO(CLCTL_HOLD_IO)<msclus.h>
CLUSCTL_RESOURCE_TYPE_INSTALL_NODE(CLCTL_INSTALL_NODE)<msclus.h>
CLUSCTL_RESOURCE_TYPE_QUERY_DELETE(CLCTL_QUERY_DELETE)<msclus.h>
CLUSCTL_RESOURCE_TYPE_RESUME_IO(CLCTL_RESUME_IO)<msclus.h>
CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1(CLCTL_STARTING_PHASE1)<msclus.h>
CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2(CLCTL_STARTING_PHASE2)<msclus.h>
CLUSCTL_RESOURCE_TYPE_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_RESOURCE_UNKNOWN(CLCTL_UNKNOWN)<msclus.h>
CLUSCTL_RESOURCE_UPGRADE_DLL(CLCTL_RESOURCE_UPGRADE_DLL)<msclus.h>
CLUSCTL_USER_CODE(Function,Object)<clusapi.h>
CLUSPROP_BINARY_DECLARE(name,cb)<clusapi.h>
CLUSPROP_PROPERTY_NAME_DECLARE(name,cch)<clusapi.h>
CLUSPROP_SYNTAX_DISK_NUMBER(DWORD)<msclus.h>
CLUSPROP_SYNTAX_DISK_SERIALNUMBER(DWORD)<msclus.h>
CLUSPROP_SYNTAX_DISK_SIGNATURE(DWORD)<msclus.h>
CLUSPROP_SYNTAX_ENDMARK(CLUSPROP_TYPE_ENDMARK << 16 | CLUSPROP_FORMAT_UNKNOWN)<msclus.h>
CLUSPROP_SYNTAX_FTSET_INFO(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_BINARY(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_DWORD(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_LONG(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR(DWORD)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_SZ(CLUSPROP_TYPE_LIST_VALUE << 16 | CLUSPROP_FORMAT_SZ)<msclus.h>
CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER(DWORD)<msclus.h>
CLUSPROP_SYNTAX_NAME(CLUSPROP_TYPE_NAME << 16 | CLUSPROP_FORMAT_SZ)<msclus.h>
CLUSPROP_SYNTAX_NAME(CLUSPROP_TYPE_NAME,CLUSPROP_FORMAT_SZ)<msclus.h>
CLUSPROP_SYNTAX_PARTITION_INFO(DWORD)<msclus.h>
CLUSPROP_SYNTAX_RESCLASS(CLUSPROP_TYPE_RESCLASS << 16 | CLUSPROP_FORMAT_DWORD)<msclus.h>
CLUSPROP_SYNTAX_SCSI_ADDRESS(DWORD)<msclus.h>
CLUSPROP_SYNTAX_VALUE(type,format)<clusapi.h>
CLUSPROP_SZ_DECLARE(name,cch)<clusapi.h>
CLUSTER_GET_MAJOR_VERSION(_ver)<clusapi.h>
CLUSTER_GET_MINOR_VERSION(_ver)<clusapi.h>
CLUSTER_GROUP_ENUM_ALL(CLUSTER_GROUP_ENUM_CONTAINS | CLUSTER_GROUP_ENUM_NODES)<msclus.h>
CLUSTER_MAKE_VERSION(_maj,_min)<clusapi.h>
ClusterClearBackupStateForSharedVolume(LPCWSTR lpszVolumePathName) DWORD WINAPI <resapi.h>
ClusterCloseEnum(HCLUSENUM hEnum) DWORD WINAPI <clusapi.h>
ClusterControl(HCLUSTER hCluster,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterEnum(HCLUSENUM hEnum,DWORD dwIndex,LPDWORD lpdwType,LPWSTR lpszName,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
ClusterGetEnumCount(HCLUSENUM hEnum) DWORD WINAPI <clusapi.h>
ClusterGetVolumeNameForVolumeMountPoint(LPCWSTR lpszVolumeMountPoint,LPWSTR lpszVolumeName,DWORD cchBufferLength) WINBOOL WINAPI <resapi.h>
ClusterGetVolumePathName(LPCWSTR lpszFileName,LPWSTR lpszVolumePathName,DWORD cchBufferLength) WINBOOL WINAPI <resapi.h>
ClusterGroupCloseEnum(HGROUPENUM hGroupEnum) DWORD WINAPI <clusapi.h>
ClusterGroupControl(HGROUP hGroup,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterGroupEnum(HGROUPENUM hGroupEnum,DWORD dwIndex,LPDWORD lpdwType,LPWSTR lpszResourceName,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
ClusterGroupGetEnumCount(HGROUPENUM hGroupEnum) DWORD WINAPI <clusapi.h>
ClusterGroupOpenEnum(HGROUP hGroup,DWORD dwType) HGROUPENUM WINAPI <clusapi.h>
ClusterIsPathOnSharedVolume(LPCWSTR lpszPathName) WINBOOL WINAPI <resapi.h>
ClusterNetInterfaceControl(HNETINTERFACE hNetInterface,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterNetworkCloseEnum(HNETWORKENUM hNetworkEnum) DWORD WINAPI <clusapi.h>
ClusterNetworkControl(HNETWORK hNetwork,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterNetworkEnum(HNETWORKENUM hNetworkEnum,DWORD dwIndex,LPDWORD lpdwType,LPWSTR lpszName,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
ClusterNetworkGetEnumCount(HNETWORKENUM hNetworkEnum) DWORD WINAPI <clusapi.h>
ClusterNetworkOpenEnum(HNETWORK hNetwork,DWORD dwType) HNETWORKENUM WINAPI <clusapi.h>
ClusterNodeCloseEnum(HNODEENUM hNodeEnum) DWORD WINAPI <clusapi.h>
ClusterNodeControl(HNODE hNode,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterNodeEnum(HNODEENUM hNodeEnum,DWORD dwIndex,LPDWORD lpdwType,LPWSTR lpszName,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
ClusterNodeGetEnumCount(HNODEENUM hNodeEnum) DWORD WINAPI <clusapi.h>
ClusterNodeOpenEnum(HNODE hNode,DWORD dwType) HNODEENUM WINAPI <clusapi.h>
ClusterOpenEnum(HCLUSTER hCluster,DWORD dwType) HCLUSENUM WINAPI <clusapi.h>
ClusterPrepareSharedVolumeForBackup(LPCWSTR lpszFileName,LPWSTR lpszVolumePathName,LPDWORD lpcchVolumePathName,LPWSTR lpszVolumeName,LPDWORD lpcchVolumeName) DWORD WINAPI <resapi.h>
ClusterRegBatchAddCommand(HREGBATCH hRegBatch,CLUSTER_REG_COMMAND dwCommand,LPCWSTR wzName,DWORD dwOptions,VOID CONST * lpData,DWORD cbData)LONG <clusapi.h>
ClusterRegBatchCloseNotification(HREGBATCHNOTIFICATION hBatchNotification)LONG WINAPI <clusapi.h>
ClusterRegBatchReadCommand(HREGBATCHNOTIFICATION hBatchNotification,CLUSTER_BATCH_COMMAND * pBatchCommand)LONG WINAPI <clusapi.h>
ClusterRegCloseBatch(HREGBATCH hRegBatch,WINBOOL bCommit,INT * failedCommandNumber)LONG WINAPI <clusapi.h>
ClusterRegCloseBatchNotifyPort(HREGBATCHPORT hBatchNotifyPort)LONG WINAPI <clusapi.h>
ClusterRegCloseKey(HKEY hKey) LONG WINAPI <clusapi.h>
ClusterRegCreateBatch(HKEY hKey,HREGBATCH * pHREGBATCH)LONG WINAPI <clusapi.h>
ClusterRegCreateBatchNotifyPort(HKEY hKey,HREGBATCHPORT * phBatchNotifyPort)LONG WINAPI <clusapi.h>
ClusterRegCreateKey(HKEY hKey,LPCWSTR lpszSubKey,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition) LONG WINAPI <clusapi.h>
ClusterRegDeleteKey(HKEY hKey,LPCWSTR lpszSubKey) LONG WINAPI <clusapi.h>
ClusterRegDeleteValue(HKEY hKey,LPCWSTR lpszValueName) DWORD WINAPI <clusapi.h>
ClusterRegEnumKey(HKEY hKey,DWORD dwIndex,LPWSTR lpszName,LPDWORD lpcchName,PFILETIME lpftLastWriteTime) LONG WINAPI <clusapi.h>
ClusterRegEnumValue(HKEY hKey,DWORD dwIndex,LPWSTR lpszValueName,LPDWORD lpcchValueName,LPDWORD lpdwType,LPBYTE lpData,LPDWORD lpcbData) DWORD WINAPI <clusapi.h>
ClusterRegGetBatchNotification(HREGBATCHPORT hBatchNotify,HREGBATCHNOTIFICATION * phBatchNotification)LONG WINAPI <clusapi.h>
ClusterRegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor) LONG WINAPI <clusapi.h>
ClusterRegOpenKey(HKEY hKey,LPCWSTR lpszSubKey,REGSAM samDesired,PHKEY phkResult) LONG WINAPI <clusapi.h>
ClusterRegQueryInfoKey(HKEY hKey,LPDWORD lpcSubKeys,LPDWORD lpcchMaxSubKeyLen,LPDWORD lpcValues,LPDWORD lpcchMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime) LONG WINAPI <clusapi.h>
ClusterRegQueryValue(HKEY hKey,LPCWSTR lpszValueName,LPDWORD lpdwValueType,LPBYTE lpData,LPDWORD lpcbData) LONG WINAPI <clusapi.h>
ClusterRegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) LONG WINAPI <clusapi.h>
ClusterRegSetValue(HKEY hKey,LPCWSTR lpszValueName,DWORD dwType,CONST BYTE * lpData,DWORD cbData) DWORD WINAPI <clusapi.h>
ClusterResourceCannotComeOnlineOnAnyNode()<resapi.h>
ClusterResourceCannotComeOnlineOnThisNode()<resapi.h>
ClusterResourceCloseEnum(HRESENUM hResEnum) DWORD WINAPI <clusapi.h>
ClusterResourceControl(HRESOURCE hResource,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD cbInBufferSize,LPVOID lpOutBuffer,DWORD cbOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterResourceEnum(HRESENUM hResEnum,DWORD dwIndex,LPDWORD lpdwType,LPWSTR lpszName,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
ClusterResourceGetEnumCount(HRESENUM hResEnum) DWORD WINAPI <clusapi.h>
ClusterResourceOpenEnum(HRESOURCE hResource,DWORD dwType) HRESENUM WINAPI <clusapi.h>
ClusterResourceTypeCloseEnum(HRESTYPEENUM hResTypeEnum) DWORD WINAPI <clusapi.h>
ClusterResourceTypeControl(HCLUSTER hCluster,LPCWSTR lpszResourceTypeName,HNODE hHostNode,DWORD dwControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) DWORD WINAPI <clusapi.h>
ClusterResourceTypeEnum(HRESTYPEENUM hResTypeEnum,DWORD dwIndex,LPDWORD lpdwType,LPWSTR lpszName,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
ClusterResourceTypeGetEnumCount(HRESTYPEENUM hResTypeEnum) DWORD WINAPI <clusapi.h>
ClusterResourceTypeOpenEnum(HCLUSTER hCluster,LPCWSTR lpszResourceTypeName,DWORD dwType) HRESTYPEENUM WINAPI <clusapi.h>
ClusWorkerCheckTerminate(PCLUS_WORKER lpWorker) WINBOOL WINAPI <resapi.h>
ClusWorkerCreate(PCLUS_WORKER lpWorker,PWORKER_START_ROUTINE lpStartAddress,PVOID lpParameter) DWORD WINAPI <resapi.h>
ClusWorkerTerminate(PCLUS_WORKER lpWorker) VOID WINAPI <resapi.h>
CM_Add_Empty_Log_Conf_Ex(PLOG_CONF plcLogConf,DEVINST dnDevInst,PRIORITY Priority,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_ID(DEVINST dnDevInst,PSTR pszID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_ID_Ex(DEVINST dnDevInst,PSTR pszID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_ID_ExA(DEVINST dnDevInst,PSTR pszID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_ID_ExW(DEVINST dnDevInst,PWSTR pszID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_IDA(DEVINST dnDevInst,PSTR pszID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_IDW(DEVINST dnDevInst,PWSTR pszID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_Range(DWORDLONG ullStartValue,DWORDLONG ullEndValue,RANGE_LIST rlh,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_Res_Des(PRES_DES prdResDes,LOG_CONF lcLogConf,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Add_Res_Des_Ex(PRES_DES prdResDes,LOG_CONF lcLogConf,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Connect_Machine(PCSTR UNCServerName,PHMACHINE phMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Connect_MachineA(PCSTR UNCServerName,PHMACHINE phMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Connect_MachineW(PCWSTR UNCServerName,PHMACHINE phMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_DevNode(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,DEVINST dnParent,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_DevNode_Ex(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,DEVINST dnParent,ULONG ulFlags,HANDLE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_DevNode_ExA(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,DEVINST dnParent,ULONG ulFlags,HANDLE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_DevNode_ExW(PDEVINST pdnDevInst,DEVINSTID_W pDeviceID,DEVINST dnParent,ULONG ulFlags,HANDLE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_DevNodeA(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,DEVINST dnParent,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_DevNodeW(PDEVINST pdnDevInst,DEVINSTID_W pDeviceID,DEVINST dnParent,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Create_Range_List(PRANGE_LIST prlh,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Delete_Class_Key(LPGUID ClassGuid,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Delete_Class_Key_Ex(LPGUID ClassGuid,ULONG ulFlags,HANDLE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Delete_DevNode_Key(DEVNODE dnDevNode,ULONG ulHardwareProfile,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Delete_DevNode_Key_Ex(DEVNODE dnDevNode,ULONG ulHardwareProfile,ULONG ulFlags,HANDLE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Delete_Range(DWORDLONG ullStartValue,DWORDLONG ullEndValue,RANGE_LIST rlh,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Detect_Resource_Conflict(DEVINST dnDevInst,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,PBOOL pbConflictDetected,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Detect_Resource_Conflict_Ex(DEVINST dnDevInst,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,PBOOL pbConflictDetected,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Disable_DevNode(DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Disable_DevNode_Ex(DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Disconnect_Machine(HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Dup_Range_List(RANGE_LIST rlhOld,RANGE_LIST rlhNew,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enable_DevNode(DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enable_DevNode_Ex(DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_Classes(ULONG ulClassIndex,LPGUID ClassGuid,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_Classes_Ex(ULONG ulClassIndex,LPGUID ClassGuid,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_Enumerators(ULONG ulEnumIndex,PCHAR Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_Enumerators_Ex(ULONG ulEnumIndex,PCHAR Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_Enumerators_ExA(ULONG ulEnumIndex,PCHAR Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_Enumerators_ExW(ULONG ulEnumIndex,PWCHAR Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_EnumeratorsA(ULONG ulEnumIndex,PCHAR Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Enumerate_EnumeratorsW(ULONG ulEnumIndex,PWCHAR Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Find_Range(PDWORDLONG pullStart,DWORDLONG ullStart,ULONG ulLength,DWORDLONG ullAlignment,DWORDLONG ullEnd,RANGE_LIST rlh,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_First_Range(RANGE_LIST rlh,PDWORDLONG pullStart,PDWORDLONG pullEnd,PRANGE_ELEMENT preElement,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Log_Conf(LOG_CONF lcLogConfToBeFreed,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Log_Conf_Ex(LOG_CONF lcLogConfToBeFreed,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Log_Conf_Handle(LOG_CONF lcLogConf) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Range_List(RANGE_LIST rlh,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Res_Des(PRES_DES prdResDes,RES_DES rdResDes,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Res_Des_Ex(PRES_DES prdResDes,RES_DES rdResDes,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Res_Des_Handle(RES_DES rdResDes) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Free_Resource_Conflict_Handle(CONFLICT_LIST clConflictList) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Child(PDEVINST pdnDevInst,DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Child_Ex(PDEVINST pdnDevInst,DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Key_Name(LPGUID ClassGuid,LPSTR pszKeyName,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Key_Name_Ex(LPGUID ClassGuid,LPSTR pszKeyName,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Key_Name_ExA(LPGUID ClassGuid,LPSTR pszKeyName,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Key_Name_ExW(LPGUID ClassGuid,LPWSTR pszKeyName,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Key_NameA(LPGUID ClassGuid,LPSTR pszKeyName,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Key_NameW(LPGUID ClassGuid,LPWSTR pszKeyName,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Name(LPGUID ClassGuid,PCHAR Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Name_Ex(LPGUID ClassGuid,PCHAR Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Name_ExA(LPGUID ClassGuid,PCHAR Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Name_ExW(LPGUID ClassGuid,PWCHAR Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_NameA(LPGUID ClassGuid,PCHAR Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_NameW(LPGUID ClassGuid,PWCHAR Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Registry_Property(LPGUID ClassGUID,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Registry_PropertyA(LPGUID ClassGUID,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Class_Registry_PropertyW(LPGUID ClassGUID,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Depth(PULONG pulDepth,DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Depth_Ex(PULONG pulDepth,DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID(DEVINST dnDevInst,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_Ex(DEVINST dnDevInst,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_ExA(DEVINST dnDevInst,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_ExW(DEVINST dnDevInst,PWCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List(PCSTR pszFilter,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_Ex(PCSTR pszFilter,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_ExA(PCSTR pszFilter,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_ExW(PCWSTR pszFilter,PWCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_Size(PULONG pulLen,PCSTR pszFilter,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_Size_Ex(PULONG pulLen,PCSTR pszFilter,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_Size_ExA(PULONG pulLen,PCSTR pszFilter,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_Size_ExW(PULONG pulLen,PCWSTR pszFilter,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_SizeA(PULONG pulLen,PCSTR pszFilter,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_List_SizeW(PULONG pulLen,PCWSTR pszFilter,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_ListA(PCSTR pszFilter,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_ListW(PCWSTR pszFilter,PWCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_Size(PULONG pulLen,DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_ID_Size_Ex(PULONG pulLen,DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_IDA(DEVINST dnDevInst,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_IDW(DEVINST dnDevInst,PWCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_Alias(LPCSTR pszDeviceInterface,LPGUID AliasInterfaceGuid,LPSTR pszAliasDeviceInterface,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_Alias_Ex(LPCSTR pszDeviceInterface,LPGUID AliasInterfaceGuid,LPSTR pszAliasDeviceInterface,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_Alias_ExA(LPCSTR pszDeviceInterface,LPGUID AliasInterfaceGuid,LPSTR pszAliasDeviceInterface,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_Alias_ExW(LPCWSTR pszDeviceInterface,LPGUID AliasInterfaceGuid,LPWSTR pszAliasDeviceInterface,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_AliasA(LPCSTR pszDeviceInterface,LPGUID AliasInterfaceGuid,LPSTR pszAliasDeviceInterface,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_AliasW(LPCWSTR pszDeviceInterface,LPGUID AliasInterfaceGuid,LPWSTR pszAliasDeviceInterface,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List(LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_Ex(LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_ExA(LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_ExW(LPGUID InterfaceClassGuid,DEVINSTID_W pDeviceID,PWCHAR Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_Size(PULONG pulLen,LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_Size_Ex(PULONG pulLen,LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_Size_ExA(PULONG pulLen,LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_Size_ExW(PULONG pulLen,LPGUID InterfaceClassGuid,DEVINSTID_W pDeviceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_SizeA(PULONG pulLen,LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_List_SizeW(PULONG pulLen,LPGUID InterfaceClassGuid,DEVINSTID_W pDeviceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_ListA(LPGUID InterfaceClassGuid,DEVINSTID_A pDeviceID,PCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Device_Interface_ListW(LPGUID InterfaceClassGuid,DEVINSTID_W pDeviceID,PWCHAR Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Custom_Property(DEVINST dnDevInst,PCSTR pszCustomPropertyName,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Custom_Property_Ex(DEVINST dnDevInst,PCSTR pszCustomPropertyName,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Custom_Property_ExA(DEVINST dnDevInst,PCSTR pszCustomPropertyName,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Custom_Property_ExW(DEVINST dnDevInst,PCWSTR pszCustomPropertyName,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Custom_PropertyA(DEVINST dnDevInst,PCSTR pszCustomPropertyName,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Custom_PropertyW(DEVINST dnDevInst,PCWSTR pszCustomPropertyName,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Registry_Property(DEVINST dnDevInst,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Registry_Property_Ex(DEVINST dnDevInst,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Registry_Property_ExA(DEVINST dnDevInst,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Registry_Property_ExW(DEVINST dnDevInst,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Registry_PropertyA(DEVINST dnDevInst,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Registry_PropertyW(DEVINST dnDevInst,ULONG ulProperty,PULONG pulRegDataType,PVOID Buffer,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Status(PULONG pulStatus,PULONG pulProblemNumber,DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_DevNode_Status_Ex(PULONG pulStatus,PULONG pulProblemNumber,DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_First_Log_Conf(PLOG_CONF plcLogConf,DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_First_Log_Conf_Ex(PLOG_CONF plcLogConf,DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Global_State(PULONG pulState,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Global_State_Ex(PULONG pulState,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Hardware_Profile_Info(ULONG ulIndex,PHWPROFILEINFO_A pHWProfileInfo,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Hardware_Profile_Info_Ex(ULONG ulIndex,PHWPROFILEINFO_A pHWProfileInfo,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Hardware_Profile_Info_ExA(ULONG ulIndex,PHWPROFILEINFO_A pHWProfileInfo,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Hardware_Profile_Info_ExW(ULONG ulIndex,PHWPROFILEINFO_W pHWProfileInfo,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Hardware_Profile_InfoA(ULONG ulIndex,PHWPROFILEINFO_A pHWProfileInfo,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Hardware_Profile_InfoW(ULONG ulIndex,PHWPROFILEINFO_W pHWProfileInfo,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_HW_Prof_Flags(DEVINSTID_A szDevInstName,ULONG ulHardwareProfile,PULONG pulValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_HW_Prof_Flags_Ex(DEVINSTID_A szDevInstName,ULONG ulHardwareProfile,PULONG pulValue,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_HW_Prof_Flags_ExA(DEVINSTID_A szDevInstName,ULONG ulHardwareProfile,PULONG pulValue,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_HW_Prof_Flags_ExW(DEVINSTID_W szDevInstName,ULONG ulHardwareProfile,PULONG pulValue,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_HW_Prof_FlagsA(DEVINSTID_A szDevInstName,ULONG ulHardwareProfile,PULONG pulValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_HW_Prof_FlagsW(DEVINSTID_W szDevInstName,ULONG ulHardwareProfile,PULONG pulValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Log_Conf_Priority(LOG_CONF lcLogConf,PPRIORITY pPriority,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Log_Conf_Priority_Ex(LOG_CONF lcLogConf,PPRIORITY pPriority,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Next_Log_Conf(PLOG_CONF plcLogConf,LOG_CONF lcLogConf,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Next_Log_Conf_Ex(PLOG_CONF plcLogConf,LOG_CONF lcLogConf,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Next_Res_Des(PRES_DES prdResDes,RES_DES rdResDes,RESOURCEID ForResource,PRESOURCEID pResourceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Next_Res_Des_Ex(PRES_DES prdResDes,RES_DES rdResDes,RESOURCEID ForResource,PRESOURCEID pResourceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Parent(PDEVINST pdnDevInst,DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Parent_Ex(PDEVINST pdnDevInst,DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Res_Des_Data(RES_DES rdResDes,PVOID Buffer,ULONG BufferLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Res_Des_Data_Ex(RES_DES rdResDes,PVOID Buffer,ULONG BufferLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Res_Des_Data_Size(PULONG pulSize,RES_DES rdResDes,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Res_Des_Data_Size_Ex(PULONG pulSize,RES_DES rdResDes,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Resource_Conflict_Count(CONFLICT_LIST clConflictList,PULONG pulCount) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Resource_Conflict_Details(CONFLICT_LIST clConflictList,ULONG ulIndex,PCONFLICT_DETAILS_A pConflictDetails) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Resource_Conflict_DetailsA(CONFLICT_LIST clConflictList,ULONG ulIndex,PCONFLICT_DETAILS_A pConflictDetails) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Resource_Conflict_DetailsW(CONFLICT_LIST clConflictList,ULONG ulIndex,PCONFLICT_DETAILS_W pConflictDetails) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Sibling(PDEVINST pdnDevInst,DEVINST DevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Sibling_Ex(PDEVINST pdnDevInst,DEVINST DevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Get_Version(VOID) CMAPI WORD WINAPI <cfgmgr32.h>
CM_Get_Version_Ex(HMACHINE hMachine) CMAPI WORD WINAPI <cfgmgr32.h>
CM_Intersect_Range_List(RANGE_LIST rlhOld1,RANGE_LIST rlhOld2,RANGE_LIST rlhNew,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Invert_Range_List(RANGE_LIST rlhOld,RANGE_LIST rlhNew,DWORDLONG ullMaxValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Is_Dock_Station_Present(PBOOL pbPresent) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Is_Dock_Station_Present_Ex(PBOOL pbPresent,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Is_Version_Available(WORD wVersion) CMAPI WINBOOL WINAPI <cfgmgr32.h>
CM_Is_Version_Available_Ex(WORD wVersion,HMACHINE hMachine) CMAPI WINBOOL WINAPI <cfgmgr32.h>
CM_Locate_DevNode(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Locate_DevNode_Ex(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Locate_DevNode_ExA(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Locate_DevNode_ExW(PDEVINST pdnDevInst,DEVINSTID_W pDeviceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Locate_DevNodeA(PDEVINST pdnDevInst,DEVINSTID_A pDeviceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Locate_DevNodeW(PDEVINST pdnDevInst,DEVINSTID_W pDeviceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Merge_Range_List(RANGE_LIST rlhOld1,RANGE_LIST rlhOld2,RANGE_LIST rlhNew,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Modify_Res_Des(PRES_DES prdResDes,RES_DES rdResDes,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Modify_Res_Des_Ex(PRES_DES prdResDes,RES_DES rdResDes,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Move_DevNode(DEVINST dnFromDevInst,DEVINST dnToDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Move_DevNode_Ex(DEVINST dnFromDevInst,DEVINST dnToDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Next_Range(PRANGE_ELEMENT preElement,PDWORDLONG pullStart,PDWORDLONG pullEnd,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_Class_Key(LPGUID ClassGuid,LPCSTR pszClassName,REGSAM samDesired,REGDISPOSITION Disposition,PHKEY phkClass,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_Class_Key_Ex(LPGUID pszClassGuid,LPCSTR pszClassName,REGSAM samDesired,REGDISPOSITION Disposition,PHKEY phkClass,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_Class_Key_ExA(LPGUID pszClassGuid,LPCSTR pszClassName,REGSAM samDesired,REGDISPOSITION Disposition,PHKEY phkClass,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_Class_Key_ExW(LPGUID pszClassGuid,LPCWSTR pszClassName,REGSAM samDesired,REGDISPOSITION Disposition,PHKEY phkClass,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_Class_KeyA(LPGUID ClassGuid,LPCSTR pszClassName,REGSAM samDesired,REGDISPOSITION Disposition,PHKEY phkClass,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_Class_KeyW(LPGUID ClassGuid,LPCWSTR pszClassName,REGSAM samDesired,REGDISPOSITION Disposition,PHKEY phkClass,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_DevNode_Key(DEVINST dnDevNode,REGSAM samDesired,ULONG ulHardwareProfile,REGDISPOSITION Disposition,PHKEY phkDevice,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Open_DevNode_Key_Ex(DEVINST dnDevNode,REGSAM samDesired,ULONG ulHardwareProfile,REGDISPOSITION Disposition,PHKEY phkDevice,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_And_Remove_SubTree(DEVINST dnAncestor,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_And_Remove_SubTree_Ex(DEVINST dnAncestor,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_And_Remove_SubTree_ExA(DEVINST dnAncestor,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_And_Remove_SubTree_ExW(DEVINST dnAncestor,PPNP_VETO_TYPE pVetoType,LPWSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_And_Remove_SubTreeA(DEVINST dnAncestor,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_And_Remove_SubTreeW(DEVINST dnAncestor,PPNP_VETO_TYPE pVetoType,LPWSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Arbitrator_Free_Data(PVOID pData,ULONG DataLen,DEVINST dnDevInst,RESOURCEID ResourceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Arbitrator_Free_Data_Ex(PVOID pData,ULONG DataLen,DEVINST dnDevInst,RESOURCEID ResourceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Arbitrator_Free_Size(PULONG pulSize,DEVINST dnDevInst,RESOURCEID ResourceID,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Arbitrator_Free_Size_Ex(PULONG pulSize,DEVINST dnDevInst,RESOURCEID ResourceID,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Remove_SubTree(DEVINST dnAncestor,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Remove_SubTree_Ex(DEVINST dnAncestor,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Query_Resource_Conflict_List(PCONFLICT_LIST pclConflictList,DEVINST dnDevInst,RESOURCEID ResourceID,PCVOID ResourceData,ULONG ResourceLen,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Reenumerate_DevNode(DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Reenumerate_DevNode_Ex(DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_Driver(DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_Driver_Ex(DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_Interface(DEVINST dnDevInst,LPGUID InterfaceClassGuid,LPCSTR pszReference,LPSTR pszDeviceInterface,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_Interface_Ex(DEVINST dnDevInst,LPGUID InterfaceClassGuid,LPCSTR pszReference,LPSTR pszDeviceInterface,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_Interface_ExA(DEVINST dnDevInst,LPGUID InterfaceClassGuid,LPCSTR pszReference,LPSTR pszDeviceInterface,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_Interface_ExW(DEVINST dnDevInst,LPGUID InterfaceClassGuid,LPCWSTR pszReference,LPWSTR pszDeviceInterface,PULONG pulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_InterfaceA(DEVINST dnDevInst,LPGUID InterfaceClassGuid,LPCSTR pszReference,LPSTR pszDeviceInterface,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Register_Device_InterfaceW(DEVINST dnDevInst,LPGUID InterfaceClassGuid,LPCWSTR pszReference,LPWSTR pszDeviceInterface,PULONG pulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Remove_SubTree(DEVINST dnAncestor,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Remove_SubTree_Ex(DEVINST dnAncestor,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Device_Eject(DEVINST dnDevInst,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Device_Eject_Ex(DEVINST dnDevInst,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Device_Eject_ExA(DEVINST dnDevInst,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Device_Eject_ExW(DEVINST dnDevInst,PPNP_VETO_TYPE pVetoType,LPWSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Device_EjectA(DEVINST dnDevInst,PPNP_VETO_TYPE pVetoType,LPSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Device_EjectW(DEVINST dnDevInst,PPNP_VETO_TYPE pVetoType,LPWSTR pszVetoName,ULONG ulNameLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Eject_PC(VOID) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Request_Eject_PC_Ex(HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Run_Detection(ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Run_Detection_Ex(ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_Class_Registry_Property(LPGUID ClassGUID,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_Class_Registry_PropertyA(LPGUID ClassGUID,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_Class_Registry_PropertyW(LPGUID ClassGUID,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Problem(DEVINST dnDevInst,ULONG ulProblem,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Problem_Ex(DEVINST dnDevInst,ULONG ulProblem,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Registry_Property(DEVINST dnDevInst,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Registry_Property_Ex(DEVINST dnDevInst,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Registry_Property_ExA(DEVINST dnDevInst,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Registry_Property_ExW(DEVINST dnDevInst,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Registry_PropertyA(DEVINST dnDevInst,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_DevNode_Registry_PropertyW(DEVINST dnDevInst,ULONG ulProperty,PCVOID Buffer,ULONG ulLength,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof(ULONG ulHardwareProfile,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_Ex(ULONG ulHardwareProfile,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_Flags(DEVINSTID_A szDevInstName,ULONG ulConfig,ULONG ulValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_Flags_Ex(DEVINSTID_A szDevInstName,ULONG ulConfig,ULONG ulValue,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_Flags_ExA(DEVINSTID_A szDevInstName,ULONG ulConfig,ULONG ulValue,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_Flags_ExW(DEVINSTID_W szDevInstName,ULONG ulConfig,ULONG ulValue,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_FlagsA(DEVINSTID_A szDevInstName,ULONG ulConfig,ULONG ulValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Set_HW_Prof_FlagsW(DEVINSTID_W szDevInstName,ULONG ulConfig,ULONG ulValue,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Setup_DevNode(DEVINST dnDevInst,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Setup_DevNode_Ex(DEVINST dnDevInst,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Test_Range_Available(DWORDLONG ullStartValue,DWORDLONG ullEndValue,RANGE_LIST rlh,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Uninstall_DevNode(DEVNODE dnPhantom,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Uninstall_DevNode_Ex(DEVNODE dnPhantom,ULONG ulFlags,HANDLE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Unregister_Device_Interface(LPCSTR pszDeviceInterface,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Unregister_Device_Interface_Ex(LPCSTR pszDeviceInterface,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Unregister_Device_Interface_ExA(LPCSTR pszDeviceInterface,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Unregister_Device_Interface_ExW(LPCWSTR pszDeviceInterface,ULONG ulFlags,HMACHINE hMachine) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Unregister_Device_InterfaceA(LPCSTR pszDeviceInterface,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_Unregister_Device_InterfaceW(LPCWSTR pszDeviceInterface,ULONG ulFlags) CMAPI CONFIGRET WINAPI <cfgmgr32.h>
CM_WaitNoPendingInstallEvents(DWORD dwTimeout) DWORD WINAPI <cfgmgr32.h>
CmCallbackGetKeyObjectID(IN PLARGE_INTEGER Cookie,IN PVOID Object,OUT PULONG_PTR ObjectID OPTIONAL,OUT PCUNICODE_STRING * ObjectName OPTIONAL)<wdm.h>
CMCheckColors(HCMTRANSFORM hcmTransform,LPCOLOR lpaInputColors,DWORD nColors,COLORTYPE ctInput,LPBYTE lpaResult) WINBOOL WINAPI <icm.h>
CMCheckColorsInGamut(HCMTRANSFORM hcmTransform,RGBTRIPLE * lpaRGBTriple,LPBYTE lpaResult,UINT nCount) WINBOOL WINAPI <icm.h>
CMCheckRGBs(HCMTRANSFORM hcmTransform,LPVOID lpSrcBits,BMFORMAT bmInput,DWORD dwWidth,DWORD dwHeight,DWORD dwStride,LPBYTE lpaResult,PBMCALLBACKFN pfnCallback,LPARAM ulCallbackData) WINBOOL WINAPI <icm.h>
CMConvertColorNameToIndex(HPROFILE hProfile,PCOLOR_NAME paColorName,PDWORD paIndex,DWORD dwCount) WINBOOL WINAPI <icm.h>
CMConvertIndexToColorName(HPROFILE hProfile,PDWORD paIndex,PCOLOR_NAME paColorName,DWORD dwCount) WINBOOL WINAPI <icm.h>
CMCreateDeviceLinkProfile(PHPROFILE pahProfiles,DWORD nProfiles,PDWORD padwIntents,DWORD nIntents,DWORD dwFlags,LPBYTE * lpProfileData) WINBOOL WINAPI <icm.h>
CMCreateMultiProfileTransform(PHPROFILE pahProfiles,DWORD nProfiles,PDWORD padwIntents,DWORD nIntents,DWORD dwFlags) HCMTRANSFORM WINAPI <icm.h>
CMCreateProfile(LPLOGCOLORSPACEA lpColorSpace,LPDEVCHARACTER * lpProfileData) WINBOOL WINAPI <icm.h>
CMCreateProfileW(LPLOGCOLORSPACEW lpColorSpace,LPDEVCHARACTER * lpProfileData) WINBOOL WINAPI <icm.h>
CMCreateTransform(LPLOGCOLORSPACEA lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter) HCMTRANSFORM WINAPI <icm.h>
CMCreateTransformExt(LPLOGCOLORSPACEA lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter,DWORD dwFlags) HCMTRANSFORM WINAPI <icm.h>
CMCreateTransformExtW(LPLOGCOLORSPACEW lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter,DWORD dwFlags) HCMTRANSFORM WINAPI <icm.h>
CMCreateTransformW(LPLOGCOLORSPACEW lpColorSpace,LPDEVCHARACTER lpDevCharacter,LPDEVCHARACTER lpTargetDevCharacter) HCMTRANSFORM WINAPI <icm.h>
CMDeleteTransform(HCMTRANSFORM hcmTransform) WINBOOL WINAPI <icm.h>
CmGetBoundTransaction(IN PLARGE_INTEGER Cookie,IN PVOID Object)<wdm.h>
CmGetCallbackVersion(OUT PULONG Major OPTIONAL,OUT PULONG Minor OPTIONAL)<wdm.h>
CMGetInfo(DWORD dwInfo) DWORD WINAPI <icm.h>
CMGetNamedProfileInfo(HPROFILE hProfile,PNAMED_PROFILE_INFO pNamedProfileInfo) WINBOOL WINAPI <icm.h>
CMGetPS2ColorRenderingDictionary(HPROFILE hProfile,DWORD dwIntent,LPBYTE lpBuffer,LPDWORD lpcbSize,LPBOOL lpbBinary) WINBOOL WINAPI <icm.h>
CMGetPS2ColorRenderingIntent(HPROFILE hProfile,DWORD dwIntent,LPBYTE lpBuffer,LPDWORD lpcbSize) WINBOOL WINAPI <icm.h>
CMGetPS2ColorSpaceArray(HPROFILE hProfile,DWORD dwIntent,DWORD dwCSAType,LPBYTE lpBuffer,LPDWORD lpcbSize,LPBOOL lpbBinary) WINBOOL WINAPI <icm.h>
CMIsProfileValid(HPROFILE hProfile,LPBOOL lpbValid) WINBOOL WINAPI <icm.h>
CmRegisterCallback(IN PEX_CALLBACK_FUNCTION Function,IN PVOID Context OPTIONAL,OUT PLARGE_INTEGER Cookie)<wdm.h>
CmRegisterCallbackEx(PEX_CALLBACK_FUNCTION Function,PCUNICODE_STRING Altitude,PVOID Driver,PVOID Context,PLARGE_INTEGER Cookie,PVOID Reserved)<wdm.h>
CmSetCallbackObjectContext(IN OUT PVOID Object,IN PLARGE_INTEGER Cookie,IN PVOID NewContext,OUT PVOID * OldContext OPTIONAL)<wdm.h>
CMSPAddress() virtual ~<mspaddr.h>
CMSPAddress(CreateMSPCall) STDMETHOD<mspaddr.h>
CMSPAddress(CreateTerminal) STDMETHOD<mspaddr.h>
CMSPAddress(DWORD * pdwNumClasses,IID * pTerminalClasses) virtual HRESULT GetDynamicTerminalClasses<mspaddr.h>
CMSPAddress(DWORD * pdwNumTerminals,ITTerminal ** ppTerminals) virtual HRESULT GetStaticTerminals<mspaddr.h>
CMSPAddress(DWORD dwMediaType,DWORD dwMask) virtual WINBOOL IsValidSetOfMediaTypes<mspaddr.h>
CMSPAddress(EnumerateDynamicTerminalClasses) STDMETHOD<mspaddr.h>
CMSPAddress(EnumeratePluggableSuperclasses) STDMETHOD<mspaddr.h>
CMSPAddress(EnumeratePluggableTerminalClasses) STDMETHOD<mspaddr.h>
CMSPAddress(EnumerateStaticTerminals) STDMETHOD<mspaddr.h>
CMSPAddress(get_DynamicTerminalClasses) STDMETHOD<mspaddr.h>
CMSPAddress(get_PluggableSuperclasses) STDMETHOD<mspaddr.h>
CMSPAddress(get_PluggableTerminalClasses) STDMETHOD<mspaddr.h>
CMSPAddress(get_StaticTerminals) STDMETHOD<mspaddr.h>
CMSPAddress(GetDefaultStaticTerminal) STDMETHOD<mspaddr.h>
CMSPAddress(GetEvent) STDMETHOD<mspaddr.h>
CMSPAddress(IMoniker * pMoniker) virtual HRESULT IsMonikerInTerminalList<mspaddr.h>
CMSPAddress(Initialize) STDMETHOD<mspaddr.h>
CMSPAddress(ITMSPAddress)COM_INTERFACE_ENTRY<mspaddr.h>
CMSPAddress(MSPEVENTITEM * EventItem) virtual HRESULT PostEvent<mspaddr.h>
CMSPAddress(PBYTE pBuffer,DWORD dwSize) virtual HRESULT ReceiveTSPAddressData<mspaddr.h>
CMSPAddress(ReceiveTSPData) STDMETHOD<mspaddr.h>
CMSPAddress(Shutdown) STDMETHOD<mspaddr.h>
CMSPAddress(ShutdownMSPCall) STDMETHOD<mspaddr.h>
CMSPAddress(void) virtual HRESULT UpdateTerminalList<mspaddr.h>
CMSPAddress(WINBOOL bDeviceArrival) virtual HRESULT UpdateTerminalListForPnp<mspaddr.h>
CMSPArray() ~<msputils.h>
CMSPArray(int nIndex) T<msputils.h>
CMSPArray(int nIndex,T & t) void SetAtIndex<msputils.h>
CMSPArray(T & t) WINBOOL Remove<msputils.h>
CMSPCallBase() virtual ~<mspcall.h>
CMSPCallBase(CMSPAddress * pMSPAddress,MSP_HANDLE htCall,DWORD dwReserved,DWORD dwMediaType) virtual HRESULT Init<mspcall.h>
CMSPCallBase(CMSPCallBase) BEGIN_COM_MAP<mspcall.h>
CMSPCallBase(CreateStream) STDMETHOD<mspcall.h>
CMSPCallBase(DWORD dwMediaType,TERMINAL_DIRECTION Direction,IMediaEvent * pGraph,ITStream ** ppStream) virtual HRESULT CreateStreamObject<mspcall.h>
CMSPCallBase(DWORD dwMediaType,TERMINAL_DIRECTION Direction,ITStream ** ppStream) virtual HRESULT InternalCreateStream<mspcall.h>
CMSPCallBase(EnumerateStreams) STDMETHOD<mspcall.h>
CMSPCallBase(get_Streams) STDMETHOD<mspcall.h>
CMSPCallBase(MSPEVENTITEM * EventItem) HRESULT HandleStreamEvent<mspcall.h>
CMSPCallBase(PBYTE pBuffer,DWORD dwSize) virtual HRESULT ReceiveTSPCallData<mspcall.h>
CMSPCallBase(RemoveStream) STDMETHOD<mspcall.h>
CMSPCallBase(void) virtual ULONG MSPCallRelease<mspcall.h>
CMSPCallMultiGraph() virtual ~<mspcall.h>
CMSPCallMultiGraph(CMSPAddress * pMSPAddress,MSP_HANDLE htCall,DWORD dwReserved,DWORD dwMediaType) HRESULT Init<mspcall.h>
CMSPCallMultiGraph(DWORD dwMediaType,TERMINAL_DIRECTION Direction,ITStream ** ppStream) virtual HRESULT InternalCreateStream<mspcall.h>
CMSPCallMultiGraph(IMediaEvent * pIMediaEvent,ITStream * pITStream) HRESULT RegisterWaitEvent<mspcall.h>
CMSPCallMultiGraph(int index) HRESULT UnregisterWaitEvent<mspcall.h>
CMSPCallMultiGraph(ITStream * pITStream,__LONG32 lEventCode,LONG_PTR lParam1,LONG_PTR lParam2) virtual HRESULT ProcessGraphEvent<mspcall.h>
CMSPCallMultiGraph(MSPSTREAMCONTEXT * pContext) virtual VOID HandleGraphEvent<mspcall.h>
CMSPCallMultiGraph(RemoveStream) STDMETHOD<mspcall.h>
CMSPCallMultiGraph(struct _THREADPOOLWAITBLOCK & t)WINBOOL operator<mspcall.h>
CMSPCallMultiGraph(VOID * pContext,BOOLEAN bFlag) static VOID NTAPI DispatchGraphEvent<mspcall.h>
CMSPCritSection() ~<msputils.h>
CMSPObjectSafetyImpl() <msputils.h>
CMSPObjectSafetyImpl(GetInterfaceSafetyOptions) STDMETHOD<msputils.h>
CMSPObjectSafetyImpl(SetInterfaceSafetyOptions) STDMETHOD<msputils.h>
CMSPStream() ~<mspstrm.h>
CMSPStream(__LONG32 lEventCode,LONG_PTR lParam1,LONG_PTR lParam2) virtual HRESULT ProcessGraphEvent<mspstrm.h>
CMSPStream(BYTE * pData,DWORD dwSize) virtual HRESULT HandleTSPData<mspstrm.h>
CMSPStream(DWORD * pdwStatus) virtual HRESULT GetState<mspstrm.h>
CMSPStream(EnumerateTerminals) STDMETHOD<mspstrm.h>
CMSPStream(get_Direction) STDMETHOD<mspstrm.h>
CMSPStream(get_MediaType) STDMETHOD<mspstrm.h>
CMSPStream(get_Name) STDMETHOD<mspstrm.h>
CMSPStream(get_Terminals) STDMETHOD<mspstrm.h>
CMSPStream(HANDLE hAddress,CMSPCallBase * pMSPCall,IMediaEvent * pGraph,DWORD dwMediaType,TERMINAL_DIRECTION Direction) virtual HRESULT Init<mspstrm.h>
CMSPStream(IDispatch)COM_INTERFACE_ENTRY<mspstrm.h>
CMSPStream(ITTerminal * pTerminal) HRESULT UnregisterPluggableTerminalEventSink<mspstrm.h>
CMSPStream(MSPEVENTITEM * pEventItem) HRESULT HandleSinkEvent<mspstrm.h>
CMSPStream(PauseStream) STDMETHOD<mspstrm.h>
CMSPStream(SelectTerminal) STDMETHOD<mspstrm.h>
CMSPStream(StartStream) STDMETHOD<mspstrm.h>
CMSPStream(StopStream) STDMETHOD<mspstrm.h>
CMSPStream(UnselectTerminal) STDMETHOD<mspstrm.h>
CMSPThread() ~<mspthrd.h>
CMSPThread(CMSPAddress * pCMSPAddress) HRESULT UnregisterPnpNotification<mspthrd.h>
CMSPThread(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) static LRESULT CALLBACK NotifWndProc<mspthrd.h>
CMSPThread(LPTHREAD_START_ROUTINE Function,PVOID Context,WINBOOL fSynchronous) HRESULT QueueWorkItem<mspthrd.h>
CMTranslateColors(HCMTRANSFORM hcmTransform,LPCOLOR lpaInputColors,DWORD nColors,COLORTYPE ctInput,LPCOLOR lpaOutputColors,COLORTYPE ctOutput) WINBOOL WINAPI <icm.h>
CMTranslateRGB(HCMTRANSFORM hcmTransform,COLORREF ColorRef,LPCOLORREF lpColorRef,DWORD dwFlags) WINBOOL WINAPI <icm.h>
CMTranslateRGBs(HCMTRANSFORM hcmTransform,LPVOID lpSrcBits,BMFORMAT bmInput,DWORD dwWidth,DWORD dwHeight,DWORD dwStride,LPVOID lpDestBits,BMFORMAT bmOutput,DWORD dwTranslateDirection) WINBOOL WINAPI <icm.h>
CMTranslateRGBsExt(HCMTRANSFORM hcmTransform,LPVOID lpSrcBits,BMFORMAT bmInput,DWORD dwWidth,DWORD dwHeight,DWORD dwInputStride,LPVOID lpDestBits,BMFORMAT bmOutput,DWORD dwOutputStride,LPBMCALLBACKFN lpfnCallback,LPARAM ulCallbackData) WINBOOL WINAPI <icm.h>
CmUnRegisterCallback(IN LARGE_INTEGER Cookie)<wdm.h>
CMYK(c,m,y,k)<wingdi.h>
CoAddRefServerProcess(void)WINOLEAPI_<combaseapi.h>
CoAllowSetForegroundWindow(IUnknown * pUnk,LPVOID lpvReserved)WINOLEAPI <objbase.h>
CoAllowUnmarshalerCLSID(REFCLSID clsid)WINOLEAPI <combaseapi.h>
CoBuildVersion(VOID)WINOLEAPI_<objbase.h>
CoCancelCall(DWORD dwThreadId,ULONG ulTimeout)WINOLEAPI <combaseapi.h>
CoCopyProxy(IUnknown * pProxy,IUnknown ** ppCopy)WINOLEAPI <combaseapi.h>
CoCreateActivity(IUnknown * pIUnknown,REFIID riid,void ** ppObj) EXTERN_C HRESULT WINAPI <comsvcs.h>
CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter,LPUNKNOWN * ppunkMarshal)WINOLEAPI <combaseapi.h>
CoCreateGuid(GUID * pguid)WINOLEAPI <combaseapi.h>
CoCreateInstance(REFCLSID rclsid,LPUNKNOWN pUnkOuter,DWORD dwClsContext,REFIID riid,LPVOID * ppv)WINOLEAPI <combaseapi.h>
CoCreateInstanceEx(REFCLSID Clsid,IUnknown * punkOuter,DWORD dwClsCtx,COSERVERINFO * pServerInfo,DWORD dwCount,MULTI_QI * pResults)WINOLEAPI <combaseapi.h>
CoCreateInstanceFromApp(REFCLSID Clsid,IUnknown * punkOuter,DWORD dwClsCtx,PVOID reserved,DWORD dwCount,MULTI_QI * pResults)WINOLEAPI <combaseapi.h>
CoCreateStandardMalloc(DWORD memctx,IMalloc ** ppMalloc)WINOLEAPI <objbase.h>
CoDecodeProxy(DWORD dwClientPid,UINT64 ui64ProxyAddress,PServerInformation pServerInformation)WINOLEAPI <combaseapi.h>
CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)WINOLEAPI <combaseapi.h>
CODEPAGE_ENUMPROCA(LPSTR) typedef WINBOOL<winnls.h>
CODEPAGE_ENUMPROCW(LPWSTR) typedef WINBOOL<winnls.h>
CodePagesToCodePage(DWORD dwCodePages,UINT uDefaultCodePage,UINT * puCodePage)virtual HRESULT WINAPI <mlang.h>
CodePageToCodePages(UINT uCodePage,DWORD * pdwCodePages)virtual HRESULT WINAPI <mlang.h>
CodePageToScriptID(UINT uiCodePage,SCRIPT_ID * pSid)virtual HRESULT WINAPI <mlang.h>
CoDisableCallCancellation(LPVOID pReserved)WINOLEAPI <combaseapi.h>
CoDisconnectContext(DWORD dwTimeout)WINOLEAPI <combaseapi.h>
CoDisconnectObject(LPUNKNOWN pUnk,DWORD dwReserved)WINOLEAPI <combaseapi.h>
CoDosDateTimeToFileTime(WORD nDosDate,WORD nDosTime,FILETIME * lpFileTime)WINOLEAPI_<objbase.h>
CoEEShutDownCOM(void) STDAPI_<cor.h>
CoEnableCallCancellation(LPVOID pReserved)WINOLEAPI <combaseapi.h>
CoEnterServiceDomain(IUnknown * pConfigObject) EXTERN_C HRESULT WINAPI <comsvcs.h>
CoFileTimeNow(FILETIME * lpFileTime)WINOLEAPI <objbase.h>
CoFileTimeToDosDateTime(FILETIME * lpFileTime,LPWORD lpDosDate,LPWORD lpDosTime)WINOLEAPI_<objbase.h>
CoFreeAllLibraries(void)WINOLEAPI_<objbase.h>
CoFreeLibrary(HINSTANCE hInst)WINOLEAPI_<objbase.h>
CoFreeUnusedLibraries(void)WINOLEAPI_<combaseapi.h>
CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay,DWORD dwReserved)WINOLEAPI_<combaseapi.h>
CoGetApartmentType(APTTYPE * pAptType,APTTYPEQUALIFIER * pAptQualifier)WINOLEAPI <combaseapi.h>
CoGetCallContext(REFIID riid,void ** ppInterface)WINOLEAPI <combaseapi.h>
CoGetCallerTID(LPDWORD lpdwTID)WINOLEAPI <combaseapi.h>
CoGetCancelObject(DWORD dwThreadId,REFIID iid,void ** ppUnk)WINOLEAPI <combaseapi.h>
CoGetClassObject(REFCLSID rclsid,DWORD dwClsContext,LPVOID pvReserved,REFIID riid,LPVOID * ppv)WINOLEAPI <combaseapi.h>
CoGetClassObjectFromURL(REFCLSID rCLASSID,LPCWSTR szCODE,DWORD dwFileVersionMS,DWORD dwFileVersionLS,LPCWSTR szTYPE,LPBINDCTX pBindCtx,DWORD dwClsContext,LPVOID pvReserved,REFIID riid,LPVOID * ppv)STDAPI <urlmon.h>
CoGetContextToken(ULONG_PTR * pToken)WINOLEAPI <combaseapi.h>
CoGetCor(REFIID riid,void ** ppv) STDAPI <correg.h>
CoGetCurrentLogicalThreadId(GUID * pguid)WINOLEAPI <combaseapi.h>
CoGetCurrentProcess(void)WINOLEAPI_<combaseapi.h>
CoGetDefaultContext(APTTYPE aptType,REFIID riid,void ** ppv)WINOLEAPI <combaseapi.h>
CoGetInstanceFromFile(COSERVERINFO * pServerInfo,CLSID * pClsid,IUnknown * punkOuter,DWORD dwClsCtx,DWORD grfMode,OLECHAR * pwszName,DWORD dwCount,MULTI_QI * pResults)WINOLEAPI <objbase.h>
CoGetInstanceFromIStorage(COSERVERINFO * pServerInfo,CLSID * pClsid,IUnknown * punkOuter,DWORD dwClsCtx,struct IStorage * pstg,DWORD dwCount,MULTI_QI * pResults)WINOLEAPI <objbase.h>
CoGetInterceptor(REFIID iidIntercepted,IUnknown * punkOuter,REFIID iid,void ** ppv) HRESULT WINAPI <callobj.h>
CoGetInterceptorFromTypeInfo(REFIID iidIntercepted,IUnknown * punkOuter,ITypeInfo * typeInfo,REFIID iid,void ** ppv) HRESULT WINAPI <callobj.h>
CoGetInterfaceAndReleaseStream(LPSTREAM pStm,REFIID iid,LPVOID * ppv)WINOLEAPI <combaseapi.h>
CoGetMalloc(DWORD dwMemContext,LPMALLOC * ppMalloc)WINOLEAPI <combaseapi.h>
CoGetMarshalSizeMax(ULONG * pulSize,REFIID riid,LPUNKNOWN pUnk,DWORD dwDestContext,LPVOID pvDestContext,DWORD mshlflags)WINOLEAPI <combaseapi.h>
CoGetObject(LPCWSTR pszName,BIND_OPTS * pBindOptions,REFIID riid,void ** ppv)WINOLEAPI <objbase.h>
CoGetObjectContext(REFIID riid,LPVOID * ppv)WINOLEAPI <combaseapi.h>
CoGetPSClsid(REFIID riid,CLSID * pClsid)WINOLEAPI <combaseapi.h>
CoGetStandardMarshal(REFIID riid,LPUNKNOWN pUnk,DWORD dwDestContext,LPVOID pvDestContext,DWORD mshlflags,LPMARSHAL * ppMarshal)WINOLEAPI <combaseapi.h>
CoGetStdMarshalEx(LPUNKNOWN pUnkOuter,DWORD smexflags,LPUNKNOWN * ppUnkInner)WINOLEAPI <combaseapi.h>
CoGetSystemSecurityPermissions(COMSD comSDType,PSECURITY_DESCRIPTOR * ppSD)WINOLEAPI <objbase.h>
CoGetTreatAsClass(REFCLSID clsidOld,LPCLSID pClsidNew)WINOLEAPI <combaseapi.h>
CoImpersonateClient(void)WINOLEAPI <combaseapi.h>
CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE * pCookie)WINOLEAPI <combaseapi.h>
CoInitialize(LPVOID pvReserved)WINOLEAPI <objbase.h>
CoInitializeCor(DWORD fFlags) STDAPI <correg.h>
CoInitializeEE(DWORD fFlags) STDAPI <cor.h>
CoInitializeEx(LPVOID pvReserved,DWORD dwCoInit)WINOLEAPI <combaseapi.h>
CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc,LONG cAuthSvc,SOLE_AUTHENTICATION_SERVICE * asAuthSvc,void * pReserved1,DWORD dwAuthnLevel,DWORD dwImpLevel,void * pAuthList,DWORD dwCapabilities,void * pReserved3)WINOLEAPI <combaseapi.h>
CoInstall(IBindCtx * pbc,DWORD dwFlags,uCLSSPEC * pClassSpec,QUERYCONTEXT * pQuery,LPWSTR pszCodeBase)WINOLEAPI <objbase.h>
CoInternetCombineIUri(IUri * pBaseUri,IUri * pRelativeUri,DWORD dwCombineFlags,IUri ** ppCombinedUri,DWORD_PTR dwReserved)STDAPI <urlmon.h>
CoInternetCombineUrl(LPCWSTR pwzBaseUrl,LPCWSTR pwzRelativeUrl,DWORD dwCombineFlags,LPWSTR pszResult,DWORD cchResult,DWORD * pcchResult,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetCombineUrlEx(IUri * pBaseUri,LPCWSTR pwzRelativeUrl,DWORD dwCombineFlags,IUri ** ppCombinedUri,DWORD_PTR dwReserved)STDAPI <urlmon.h>
CoInternetCompareUrl(LPCWSTR pwzUrl1,LPCWSTR pwzUrl2,DWORD dwFlags)STDAPI <urlmon.h>
CoInternetCreateSecurityManager(IServiceProvider * pSP,IInternetSecurityManager ** ppSM,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetCreateZoneManager(IServiceProvider * pSP,IInternetZoneManager ** ppZM,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetGetProtocolFlags(LPCWSTR pwzUrl,DWORD * pdwFlags,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetGetSecurityUrl(LPCWSTR pwszUrl,LPWSTR * ppwszSecUrl,PSUACTION psuAction,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetGetSecurityUrlEx(IUri * pUri,IUri ** ppSecUri,PSUACTION psuAction,DWORD_PTR dwReserved)STDAPI <urlmon.h>
CoInternetGetSession(DWORD dwSessionMode,IInternetSession ** ppIInternetSession,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags)STDAPI <urlmon.h>
CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags,IUri * pIUri,IInternetSecurityManagerEx2 * pSecMgr)STDAPI <urlmon.h>
CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags,LPCWSTR szURL,IInternetSecurityManager * pSecMgr)STDAPI <urlmon.h>
CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL,LPCWSTR szToURL,IInternetSecurityManager * pSecMgr,DWORD dwFlags)STDAPI <urlmon.h>
CoInternetParseIUri(IUri * pIUri,PARSEACTION ParseAction,DWORD dwFlags,LPWSTR pwzResult,DWORD cchResult,DWORD * pcchResult,DWORD_PTR dwReserved)STDAPI <urlmon.h>
CoInternetParseUrl(LPCWSTR pwzUrl,PARSEACTION ParseAction,DWORD dwFlags,LPWSTR pszResult,DWORD cchResult,DWORD * pcchResult,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetQueryInfo(LPCWSTR pwzUrl,QUERYOPTION QueryOptions,DWORD dwQueryFlags,LPVOID pvBuffer,DWORD cbBuffer,DWORD * pcbBuffer,DWORD dwReserved)STDAPI <urlmon.h>
CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags,WINBOOL fEnable)STDAPI <urlmon.h>
CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)WINOLEAPI <combaseapi.h>
CoIsHandlerConnected(LPUNKNOWN pUnk)WINOLEAPI_<combaseapi.h>
CoIsOle1Class(REFCLSID rclsid)WINOLEAPI_<objbase.h>
CoLeaveServiceDomain(IUnknown * pUnkStatus) EXTERN_C void WINAPI <comsvcs.h>
Collapse(__LONG32 bStart)virtual HRESULT WINAPI <tom.h>
CoLoadLibrary(LPOLESTR lpszLibName,WINBOOL bAutoFree)WINOLEAPI_<objbase.h>
CoLockObjectExternal(LPUNKNOWN pUnk,WINBOOL fLock,WINBOOL fLastUnlockReleases)WINOLEAPI <combaseapi.h>
Color()	COLORREF ToCOLORREF<ksmedia.h>
Color(ARGB argb)	VOID SetValue<ksmedia.h>
Color(BYTE a,BYTE r,BYTE g,BYTE b)	static ARGB MakeARGB<ksmedia.h>
Color(BYTE r,BYTE g,BYTE b)	<ksmedia.h>
Color(COLORREF rgb)	VOID SetFromCOLORREF<ksmedia.h>
ColorAdjustLuma(COLORREF clrRGB,int n,WINBOOL fScale) LWSTDAPI_<shlwapi.h>
ColorCorrectPalette(HDC hdc,HPALETTE hPal,DWORD deFirst,DWORD num) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ColorF(Enum knownColor,FLOAT _a=1.0)D2D1FORCEINLINE <d2d1helper.h>
ColorF(FLOAT _r,FLOAT _g,FLOAT _b,FLOAT _a=1.0)D2D1FORCEINLINE <d2d1helper.h>
ColorF(UINT32 rgb,FLOAT _a=1.0)FORCEINLINE <d2d1helper.h>
ColorHLSToRGB(WORD wHue,WORD wLuminance,WORD wSaturation) LWSTDAPI_<shlwapi.h>
ColorMatchToTarget(HDC hdc,HDC hdcTarget,DWORD action) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ColorRGBToHLS(COLORREF clrRGB,WORD * pwHue,WORD * pwLuminance,WORD * pwSaturation) LWSTDAPI_<shlwapi.h>
COM_INTERFACE_ENTRY(IDispatch)<mspstrm.h>
COM_INTERFACE_ENTRY(ITMSPAddress)<mspstrm.h>
CoMarshalHresult(LPSTREAM pstm,HRESULT hresult)WINOLEAPI <combaseapi.h>
CoMarshalInterface(LPSTREAM pStm,REFIID riid,LPUNKNOWN pUnk,DWORD dwDestContext,LPVOID pvDestContext,DWORD mshlflags)WINOLEAPI <combaseapi.h>
CoMarshalInterThreadInterfaceInStream(REFIID riid,LPUNKNOWN pUnk,LPSTREAM * ppStm)WINOLEAPI <combaseapi.h>
CombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,int iMode) WINGDIAPI int WINAPI <wingdi.h>
CombineTransform(LPXFORM lpxfOut,CONST XFORM * lpxf1,CONST XFORM * lpxf2) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ComboBox_AddItemData(hwndCtl,data)<windowsx.h>
ComboBox_AddString(hwndCtl,lpsz)<windowsx.h>
ComboBox_DeleteString(hwndCtl,index)<windowsx.h>
ComboBox_Dir(hwndCtl,attrs,lpszFileSpec)<windowsx.h>
ComboBox_Enable(hwndCtl,fEnable)<windowsx.h>
ComboBox_FindItemData(hwndCtl,indexStart,data)<windowsx.h>
ComboBox_FindString(hwndCtl,indexStart,lpszFind)<windowsx.h>
ComboBox_FindStringExact(hwndCtl,indexStart,lpszFind)<windowsx.h>
ComboBox_GetCount(hwndCtl)<windowsx.h>
ComboBox_GetCueBannerText(hwnd, lpwText, cchText)<commctrl.h>
ComboBox_GetCurSel(hwndCtl)<windowsx.h>
ComboBox_GetDroppedControlRect(hwndCtl,lprc)<windowsx.h>
ComboBox_GetDroppedState(hwndCtl)<windowsx.h>
ComboBox_GetEditSel(hwndCtl)<windowsx.h>
ComboBox_GetExtendedUI(hwndCtl)<windowsx.h>
ComboBox_GetItemData(hwndCtl,index)<windowsx.h>
ComboBox_GetItemHeight(hwndCtl)<windowsx.h>
ComboBox_GetLBText(hwndCtl,index,lpszBuffer)<windowsx.h>
ComboBox_GetLBTextLen(hwndCtl,index)<windowsx.h>
ComboBox_GetMinVisible(hwnd)<commctrl.h>
ComboBox_GetText(hwndCtl,lpch,cchMax)<windowsx.h>
ComboBox_GetTextLength(hwndCtl)<windowsx.h>
ComboBox_InsertItemData(hwndCtl,index,data)<windowsx.h>
ComboBox_InsertString(hwndCtl,index,lpsz)<windowsx.h>
ComboBox_LimitText(hwndCtl,cchLimit)<windowsx.h>
ComboBox_ResetContent(hwndCtl)<windowsx.h>
ComboBox_SelectItemData(hwndCtl,indexStart,data)<windowsx.h>
ComboBox_SelectString(hwndCtl,indexStart,lpszSelect)<windowsx.h>
ComboBox_SetCueBannerText(hwnd, lpcwText)<commctrl.h>
ComboBox_SetCurSel(hwndCtl,index)<windowsx.h>
ComboBox_SetEditSel(hwndCtl,ichStart,ichEnd)<windowsx.h>
ComboBox_SetExtendedUI(hwndCtl,flags)<windowsx.h>
ComboBox_SetItemData(hwndCtl,index,data)<windowsx.h>
ComboBox_SetItemHeight(hwndCtl,cyItem)<windowsx.h>
ComboBox_SetItemHeight(hwndCtl,index,cyItem)<windowsx.h>
ComboBox_SetMinVisible(hwnd, iMinVisible)<commctrl.h>
ComboBox_SetText(hwndCtl,lpsz)<windowsx.h>
ComboBox_ShowDropdown(hwndCtl,fShow)<windowsx.h>
ComDBClaimNextFreePort(IN HCOMDB hComDB,OUT LPDWORD ComNumber)<msports.h>
ComDBClaimPort(IN HCOMDB hComDB,IN DWORD ComNumber,IN BOOL ForceClaim,OUT PBOOL Forced)<msports.h>
ComDBClose(IN HCOMDB hComDB)<msports.h>
ComDBGetCurrentPortUsage(IN HCOMDB hComDB,OUT PBYTE Buffer,IN DWORD BufferSize,IN DWORD ReportType,OUT LPDWORD MaxPortsReported)<msports.h>
ComDBOpen(OUT HCOMDB * phComDB)<msports.h>
ComDBReleasePort(IN HCOMDB hComDB,IN DWORD ComNumber)<msports.h>
ComDBResizeDatabase(IN HCOMDB hComDB,IN DWORD NewSize)<msports.h>
Command(__LONG32 dwCommandID,IUnknown * punkUserInput)virtual HRESULT WINAPI <poclass.h>
Command(__LONG32 lCommandID,LPDATAOBJECT piDataObject)virtual HRESULT WINAPI <poclass.h>
Command(BSTR Name,IAgentCtlCommandEx ** Item)virtual HRESULT WINAPI <poclass.h>
CommandLineFromMsiDescriptor(WCHAR * Descriptor,WCHAR * CommandLine,DWORD * CommandLineLength) DWORD WINAPI <appmgmt.h>
CommandLineToArgvW(LPCWSTR lpCmdLine,int * pNumArgs) SHSTDAPI_<shellapi.h>
CommConfigDialog(LPCSTR lpszName,HWND hWnd,LPCOMMCONFIG lpCC) WINBASEAPI WINBOOL WINAPI <winbase.h>
CommConfigDialogA(LPCSTR lpszName,HWND hWnd,LPCOMMCONFIG lpCC) WINBASEAPI WINBOOL WINAPI <winbase.h>
CommConfigDialogW(LPCWSTR lpszName,HWND hWnd,LPCOMMCONFIG lpCC) WINBASEAPI WINBOOL WINAPI <winbase.h>
CommDlg_OpenSave_GetFilePathA(_hdlg,_psz,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetFilePathW(_hdlg,_psz,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetFolderIDList(	_hdlg,_pidl,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetFolderIDList(_hdlg,_pidl,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetFolderPathA(_hdlg,_psz,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetFolderPathW(_hdlg,_psz,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetSpecA(_hdlg,_psz,_cbmax)<commdlg.h>
CommDlg_OpenSave_GetSpecW(_hdlg,_psz,_cbmax)<commdlg.h>
CommDlg_OpenSave_HideControl(	_hdlg,_id)<commdlg.h>
CommDlg_OpenSave_HideControl(_hdlg,_id)<commdlg.h>
CommDlg_OpenSave_SetControlText(	_hdlg,_id,_text)<commdlg.h>
CommDlg_OpenSave_SetControlText(_hdlg,_id,_text)<commdlg.h>
CommDlg_OpenSave_SetDefExt(	_hdlg,_pszext)<commdlg.h>
CommDlg_OpenSave_SetDefExt(_hdlg,_pszext)<commdlg.h>
CommDlgExtendedError(VOID) WINCOMMDLGAPI DWORD WINAPI <commdlg.h>
Commit(DWORD grfCommitFlags)virtual HRESULT WINAPI <wia.h>
Commit(LONG grfCommitFlags)virtual HRESULT WINAPI <wia.h>
Commit(VARIANT * fRetaining,VARIANT * grfTC,VARIANT * grfRM)virtual HRESULT WINAPI <wia.h>
Commit(void)virtual HRESULT WINAPI <wia.h>
Commit(WINBOOL fDone)virtual HRESULT WINAPI <wia.h>
Commit(WINBOOL fRetaining,DWORD grfTC,DWORD grfRM)virtual HRESULT WINAPI <wia.h>
CommitChanges(IUnknown * punkClusterInfoIn,IUnknown * punkResTypeServicesIn)virtual HRESULT WINAPI <cluscfgserver.h>
CommitComplete(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
CommitEnlistment(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
CommitRecord(CrmLogRecordRead crmLogRec,WINBOOL * pfForget)virtual HRESULT WINAPI <comsvcs.h>
CommitRecordVariants(VARIANT * pLogRecord,VARIANT_BOOL * pbForget)virtual HRESULT WINAPI <comsvcs.h>
CommitRequest(DWORD grfRM,XACTUOW * pNewUOW)virtual HRESULT WINAPI <txcoord.h>
CommitRequestDone(HRESULT hr)virtual HRESULT WINAPI <txcoord.h>
CommitSpoolData(HANDLE hPrinter,HANDLE hSpoolFile,DWORD cbCommit)HANDLE WINAPI <winspool.h>
Committed(void)virtual HRESULT WINAPI <txdtc.h>
Committed(WINBOOL fRetaining,XACTUOW * pNewUOW,HRESULT hr)virtual HRESULT WINAPI <txdtc.h>
CommitTransaction(HANDLE TransactionHandle) WINBOOL WINAPI <ktmw32.h>
CommitTransactionAsync(HANDLE TransactionHandle) WINBOOL WINAPI <ktmw32.h>
CommitUrlCacheEntry(LPCSTR lpszUrlName,LPCSTR lpszLocalFileName,FILETIME ExpireTime,FILETIME LastModifiedTime,DWORD CacheEntryType,LPBYTE lpHeaderInfo,DWORD dwHeaderSize,LPCSTR lpszFileExtension,LPCSTR lpszOriginalUrl) BOOLAPI <wininet.h>
CommitUrlCacheEntry(LPCSTR lpszUrlName,LPCSTR lpszLocalFileName,FILETIME ExpireTime,FILETIME LastModifiedTime,DWORD CacheEntryType,LPCSTR lpHeaderInfo,DWORD dwHeaderSize,LPCSTR lpszFileExtension,LPCSTR lpszOriginalUrl) <wininet.h>
CommitUrlCacheEntryA(LPCSTR lpszUrlName,LPCSTR lpszLocalFileName,FILETIME ExpireTime,FILETIME LastModifiedTime,DWORD CacheEntryType,LPBYTE lpHeaderInfo,DWORD dwHeaderSize,LPCSTR lpszFileExtension,LPCSTR lpszOriginalUrl) BOOLAPI <wininet.h>
CommitUrlCacheEntryA(LPCSTR lpszUrlName,LPCSTR lpszLocalFileName,FILETIME ExpireTime,FILETIME LastModifiedTime,DWORD CacheEntryType,LPCSTR lpHeaderInfo,DWORD dwHeaderSize,LPCSTR lpszFileExtension,LPCSTR lpszOriginalUrl) <wininet.h>
CommitUrlCacheEntryW(LPCWSTR lpszUrlName,LPCWSTR lpszLocalFileName,FILETIME ExpireTime,FILETIME LastModifiedTime,DWORD CacheEntryType,LPCWSTR lpHeaderInfo,DWORD dwHeaderSize,LPCWSTR lpszFileExtension,LPCWSTR lpszOriginalUrl) <wininet.h>
CommitUrlCacheEntryW(LPCWSTR lpszUrlName,LPCWSTR lpszLocalFileName,FILETIME ExpireTime,FILETIME LastModifiedTime,DWORD CacheEntryType,LPWSTR lpszHeaderInfo,DWORD dwHeaders,LPCWSTR lpszFileExtension,LPCWSTR lpszOriginalUrl) BOOLAPI <wininet.h>
CommonPropertySheetUI(HWND hWndOwner,PFNPROPSHEETUI pfnPropSheetUI,LPARAM lParam,LPDWORD pResult)<compstui.h>
CommonPropertySheetUIA(HWND hWndOwner,PFNPROPSHEETUI pfnPropSheetUI,LPARAM lParam,LPDWORD pResult)<compstui.h>
CommonPropertySheetUIW(HWND hWndOwner,PFNPROPSHEETUI pfnPropSheetUI,LPARAM lParam,LPDWORD pResult)<compstui.h>
comp_operator() int <sql_1.h>
CompactPenData(HPENDATA,UINT) HPENDATA WINAPI <penwin.h>
CompactVirtualDisk(HANDLE VirtualDiskHandle,COMPACT_VIRTUAL_DISK_FLAG Flags,PCOMPACT_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
Compare(const _bstr_t::Data_t & str)inline int _bstr_t::Data_t::<oledb.h>
Compare(const Data_t & str)int <oledb.h>
Compare(HCHAPTER hReserved,DBBKMARK cbBookmark1,const BYTE * pBookmark1,DBBKMARK cbBookmark2,const BYTE * pBookmark2,DBCOMPARE * pComparison)virtual HRESULT WINAPI <oledb.h>
Compare(LPARAM lUserParam,MMC_COOKIE cookieA,MMC_COOKIE cookieB,int * pnResult)virtual HRESULT WINAPI <oledb.h>
Compare(RDCOMPARE * prdc,int * pnResult)virtual HRESULT WINAPI <oledb.h>
CompareAddresses(LPADDRESS2 lpAddress1,LPADDRESS2 lpAddress2) int WINAPI <netmon.h>
CompareAssemblyIdentity(LPCWSTR,WINBOOL,LPCWSTR,WINBOOL,WINBOOL *,AssemblyComparisonResult *)HRESULT WINAPI <fusion.h>
CompareFileTime(CONST FILETIME * lpFileTime1,CONST FILETIME * lpFileTime2) WINBASEAPI LONG WINAPI <fileapi.h>
CompareFrameDestAddress(HFRAME hFrame,LPADDRESS2 lpAddress) WINBOOL WINAPI <netmon.h>
CompareFrameSourceAddress(HFRAME hFrame,LPADDRESS2 lpAddress) WINBOOL WINAPI <netmon.h>
CompareMoniker(IMoniker * pMoniker) virtual HRESULT <mspterm.h>
CompareObjects(LPDATAOBJECT lpDataObjectA,LPDATAOBJECT lpDataObjectB)virtual HRESULT WINAPI <mmc.h>
CompareSecurityIds(BYTE * pbSecurityId1,DWORD dwLen1,BYTE * pbSecurityId2,DWORD dwLen2,DWORD dwReserved)STDAPI <urlmon.h>
CompareString(LCID Locale,DWORD dwCmpFlags,PCNZCH lpString1,int cchCount1,PCNZCH lpString2,int cchCount2) WINBASEAPI int WINAPI <winnls.h>
CompareStringA(LCID Locale,DWORD dwCmpFlags,PCNZCH lpString1,int cchCount1,PCNZCH lpString2,int cchCount2) WINBASEAPI int WINAPI <winnls.h>
CompareStringEx(LPCWSTR lpLocaleName,DWORD dwCmpFlags,LPCWCH lpString1,int cchCount1,LPCWCH lpString2,int cchCount2,LPNLSVERSIONINFO lpVersionInformation,LPVOID lpReserved,LPARAM lParam) WINBASEAPI int WINAPI <stringapiset.h>
CompareStringOrdinal(LPCWCH lpString1,int cchCount1,LPCWCH lpString2,int cchCount2,WINBOOL bIgnoreCase) WINBASEAPI int WINAPI <stringapiset.h>
CompareStringW(LCID Locale,DWORD dwCmpFlags,PCNZWCH lpString1,int cchCount1,PCNZWCH lpString2,int cchCount2) WINBASEAPI int WINAPI <stringapiset.h>
CompareTrustees(TRUSTEE_W * pTrustee1,TRUSTEE_W * pTrustee2)virtual HRESULT WINAPI <oledb.h>
CompatFlagsFromClsid(CLSID * pclsid,LPDWORD pdwCompatFlags,LPDWORD pdwMiscStatusFlags)STDAPI <urlmon.h>
Compile(VARIANT * pvInputSource,BSTR strNamespacePath,LONG lClassFlags,LONG lInstanceFlags,WmiXMLCompilationTypeEnum iOperation,IDispatch * pCtx,VARIANT_BOOL * pStatus)virtual HRESULT WINAPI <xmltrnsf.h>
COMPILETIME_OR_2FLAGS()()()
COMPILETIME_OR_3FLAGS()()()
COMPILETIME_OR_4FLAGS()()()
COMPILETIME_OR_5FLAGS()()()
Complement(const GraphicsPath * path)__inline__ Status Region::<gdiplusimpl.h>
Complement(const Rect & rect)__inline__ Status Region::<gdiplusimpl.h>
Complement(const RectF & rect)__inline__ Status Region::<gdiplusimpl.h>
Complement(const Region * region)__inline__ Status Region::<gdiplusimpl.h>
Complete(void)virtual HRESULT WINAPI <bits.h>
COMPLETE_AUTH_TOKEN_FN(PCtxtHandle,PSecBufferDesc) typedef SECURITY_STATUS<sspi.h>
CompleteAuthToken(PCtxtHandle phContext,PSecBufferDesc pToken) SECURITY_STATUS WINAPI <sspi.h>
CompleteConnectTerminal(void)virtual HRESULT WINAPI <termmgr.h>
CompleteDotStuffingOnWrites(FIO_CONTEXT * pContext,WINBOOL fStripDots) FILEHC_EXPORT void WINAPI <filehc.h>
ComposeHmenuIdentityString(HMENU hmenu,DWORD idChild,BYTE ** ppIDString,DWORD * pdwIDStringLen)virtual HRESULT WINAPI <oleacc.h>
ComposeHwndIdentityString(HWND hwnd,DWORD idObject,DWORD idChild,BYTE ** ppIDString,DWORD * pdwIDStringLen)virtual HRESULT WINAPI <oleacc.h>
ComposePhrase(const WCHAR * pwcNoun,ULONG cwcNoun,const WCHAR * pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType,WCHAR * pwcPhrase,ULONG * pcwcPhrase)virtual HRESULT WINAPI <indexsrv.h>
CompositeImage(IUnknown * pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget,AM_MEDIA_TYPE * pmtRenderTarget,REFERENCE_TIME rtStart,REFERENCE_TIME rtEnd,DWORD dwClrBkGnd,VMRVIDEOSTREAMINFO * pVideoStreamInfo,UINT cStreams)virtual HRESULT WINAPI <strmif.h>
Compress(COMPRESSOR_HANDLE CompressorHandle,PVOID UncompressedData,SIZE_T UncompressedDataSize,PVOID CompressedBuffer,SIZE_T CompressedBufferSize,PSIZE_T CompressedDataSize) WINBOOL WINAPI <compressapi.h>
CompressionLevelFromTCOMP(tc)<fdi.h>
CompressionMemoryFromTCOMP(tc)<fdi.h>
CompressionTypeFromTCOMP(tc)<fdi.h>
CompressPenData(HPENDATA,UINT,DWORD) int WINAPI <penwin.h>
CompressText(HCOMPRESSOR hcmp,PBYTE pbText,UINT cbText,PBYTE * ppbCompressed,UINT iCharset) INT WINAPI <ftsiface.h>
ComPtr()       <client.h>
ComPtr(ComPtr && other)       <client.h>
ComPtr(ComPtr<U> && other)       <client.h>
ComPtr(const ComPtr & other)       <client.h>
ComPtr(const ComPtr<U> & other)       <client.h>
ComPtr(nullptr)))))))))))))))))       <client.h>
ComPtr(U * other)       template<client.h>
ComPtrRef(T * ptr)           <client.h>
COMPUTE_PAGES_SPANNED(Va, Size)<wdm.h>
ComTIIntrinsicsConfig(CSC_COMTIIntrinsicsConfig comtiIntrinsicsConfig)virtual HRESULT WINAPI <comsvcs.h>
Conference(ITBasicCallControl * pCall,VARIANT_BOOL fSync)virtual HRESULT WINAPI <tapi3if.h>
Confidence(LONG * pConfidence)virtual HRESULT WINAPI <sapi54.h>
ConfigDescriptorBufferLength(IN PVOID BusContext,IN OUT PUSB_DEVICE_HANDLE DeviceHandle,OUT PUCHAR DeviceDescriptorBuffer,IN OUT PULONG DeviceDescriptorBufferLength,OUT PUCHAR ConfigDescriptorBuffer,IN OUT PULONG) IN OUT PULONG <hubbusif.h>
ConfigDialog(HWND hwndOwner,BSTR pDeviceClass)virtual HRESULT WINAPI <tapi3if.h>
ConfigDialogEdit(HWND hwndOwner,BSTR pDeviceClass,DWORD dwSizeIn,BYTE * pDeviceConfigIn,DWORD * pdwSizeOut,BYTE ** ppDeviceConfigOut)virtual HRESULT WINAPI <tapi3if.h>
ConfigDriver(HWND hwndParent,WORD fRequest,LPCSTR lpszDriver,LPCSTR lpszArgs,LPSTR lpszMsg,WORD cbMsgMax,WORD * pcbMsgOut) WINBOOL WINAPI <odbcinst.h>
ConfigDriverW(HWND hwndParent,WORD fRequest,LPCWSTR lpszDriver,LPCWSTR lpszArgs,LPWSTR lpszMsg,WORD cbMsgMax,WORD * pcbMsgOut) WINBOOL WINAPI <odbcinst.h>
ConfigDSN(HWND hwndParent,WORD fRequest,LPCSTR lpszDriver,LPCSTR lpszAttributes) WINBOOL WINAPI <odbcinst.h>
ConfigDSNW(HWND hwndParent,WORD fRequest,LPCWSTR lpszDriver,LPCWSTR lpszAttributes) WINBOOL WINAPI <odbcinst.h>
ConfigHREC(HREC,UINT,WPARAM,LPARAM) int WINAPI <penwin.h>
ConfigRecognizer(UINT,WPARAM,LPARAM) UINT WINAPI <penwin.h>
ConfigTranslator(HWND hwndParent,DWORD * pvOption) WINBOOL WINAPI <odbcinst.h>
Configure(const BSTR strConfig,BSTR strStorageLocation,LONG Flags)virtual HRESULT WINAPI <rrascfg.h>
Configure(HBLOB hConfigurationBlob,HBLOB hErrorBlob)virtual HRESULT WINAPI <rrascfg.h>
Configure(ULONG_PTR uConnectionParam,HWND hWnd,DWORD dwFlags,ULONG_PTR uReserved1,ULONG_PTR uReserved2)virtual HRESULT WINAPI <rrascfg.h>
ConfigureBYOT(ITransaction * pITxByot)virtual HRESULT WINAPI <comsvcs.h>
ConfigureCardGuidSearch(LPSAFEARRAY pCardGuids,LPSAFEARRAY pGroupNames=0,BSTR bstrTitle=L"",LONG lFlags=1)virtual HRESULT WINAPI <scardssp.h>
ConfigureCardNameSearch(LPSAFEARRAY pCardNames,LPSAFEARRAY pGroupNames=0,BSTR bstrTitle=L"",LONG lFlags=1)virtual HRESULT WINAPI <scardssp.h>
ConfigureIMEA(HKL hKL,HWND hWnd,DWORD dwMode,REGISTERWORDA * pData)virtual HRESULT WINAPI <mshtmlc.h>
ConfigureIMEW(HKL hKL,HWND hWnd,DWORD dwMode,REGISTERWORDW * pData)virtual HRESULT WINAPI <mshtmlc.h>
ConfigurePort(LPSTR pName,HWND hWnd,LPSTR pPortName) WINBOOL WINAPI <winspool.h>
ConfigurePortA(LPSTR pName,HWND hWnd,LPSTR pPortName) WINBOOL WINAPI <winspool.h>
ConfigurePortUI(PCWSTR pszServer,HWND hWnd,PCWSTR pszPortName)<winsplp.h>
ConfigurePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName) WINBOOL WINAPI <winspool.h>
ConfigureSynchronization(CSC_SynchronizationConfig synchConfig)virtual HRESULT WINAPI <comsvcs.h>
ConfigureTransaction(CSC_TransactionConfig transactionConfig)virtual HRESULT WINAPI <comsvcs.h>
Connect(BSTR bstrConnectString,IDispatch ** ppCatalogCollection)virtual HRESULT WINAPI <tapi3if.h>
Connect(const BSTR Feature)virtual HRESULT WINAPI <tapi3if.h>
Connect(HBLOB hInputBlob,LPVOID StatusCallbackProc,LPVOID FramesCallbackProc,LPVOID UserContext,HBLOB hErrorBlob)virtual HRESULT WINAPI <tapi3if.h>
Connect(HBLOB hInputBlob,LPVOID StatusCallbackProc,LPVOID UserContext,HBLOB hErrorBlob)virtual HRESULT WINAPI <tapi3if.h>
Connect(HWND hwndParent,DWORD dwFlags)virtual HRESULT WINAPI <tapi3if.h>
Connect(IUnknown * pPin)virtual HRESULT WINAPI <tapi3if.h>
connect(SOCKET s,const struct sockaddr * name,int namelen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
Connect(VARIANT_BOOL fSecure)virtual HRESULT WINAPI <tapi3if.h>
Connect(VARIANT_BOOL fSync)virtual HRESULT WINAPI <tapi3if.h>
Connect(void)virtual HRESULT WINAPI <tapi3if.h>
ConnectAsAggregatee(IUnknown * pOuterUnknown)virtual HRESULT WINAPI <iads.h>
ConnectAsAggregator(IUnknown * pAggregatee)virtual HRESULT WINAPI <iads.h>
ConnectDirect(IUnknown * pPin)virtual HRESULT WINAPI <control.h>
ConnectFilters() virtual HRESULT <mspterm.h>
ConnectionLost(BSTR bstrConnection,ULONG ulType)virtual HRESULT WINAPI <sensevts.h>
ConnectionMade(BSTR bstrConnection,ULONG ulType,LPSENS_QOCINFO lpQOCInfo)virtual HRESULT WINAPI <sensevts.h>
ConnectionMadeNoQOCInfo(BSTR bstrConnection,ULONG ulType)virtual HRESULT WINAPI <sensevts.h>
ConnectNamedPipe(HANDLE hNamedPipe,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
ConnectTerminal(IGraphBuilder * pGraph,DWORD dwTerminalDirection,DWORD * pdwNumPins,IPin ** ppPins)virtual HRESULT WINAPI <termmgr.h>
ConnectTo(PAPPLICATION Application)virtual HRESULT WINAPI <mmcobj.h>
ConnectToPrinterDlg(HWND hwnd,DWORD Flags) HANDLE WINAPI <winspool.h>
ConnectWithType(IUnknown * pPin,IDispatch * pMediaType)virtual HRESULT WINAPI <control.h>
Construct(IDispatch * pCtorObj)virtual HRESULT WINAPI <comsvcs.h>
ConstructErrorObject(const ULONG ulStatusCode,const BSTR bstrDescription,const BSTR bstrOperation,const BSTR bstrParameter,const BSTR bstrProviderName,IWbemClassObject ** ppErrorObject)HRESULT WINAPI <wmiatlprov.h>
ContainerId(IN PVOID BusContext,IN USHORT PortNumber,IN LPGUID) IN LPGUID <hubbusif.h>
ContainerId(IN PVOID BusContext,IN USHORT PortNumber,OUT LPGUID) OUT LPGUID <hubbusif.h>
CONTAINING_RECORD()()()
CONTAINING_RECORD(address, type, field)<winnt.h>
CONTAINING_RECORD(address,type,field)<winnt.h>
ContainingContextTreatment(CSC_InheritanceConfig inheritanceConfig)virtual HRESULT WINAPI <comsvcs.h>
Contains(const Point & point)	BOOL <gdiplustypes.h>
Contains(const PointF & point)	BOOL <gdiplustypes.h>
Contains(const Rect & rect)	BOOL <gdiplustypes.h>
Contains(const RectF & rect)	BOOL <gdiplustypes.h>
Contains(INT x,INT y)	BOOL <gdiplustypes.h>
Contains(REAL x,REAL y)	BOOL <gdiplustypes.h>
Context(RPC_IF_HANDLE InterfaceUuid,void *) typedef RPC_STATUS RPC_ENTRY RPC_IF_CALLBACK_FN<winnt.h>
Context(ULONG32) ULONG32  <winnt.h>
Context(ULONG_PTR) ULONG_PTR  <winnt.h>
Context(void *) typedef void RPC_ENTRY RPC_SECURITY_CALLBACK_FN<winnt.h>
ContextCallback(PFNCONTEXTCALL pfnCallback,ComCallData * pParam,REFIID riid,int iMethod,IUnknown * pUnk)virtual HRESULT WINAPI <ctxtcall.h>
Continue(void)virtual HRESULT WINAPI <iads.h>
ContinueDebugEvent(DWORD dwProcessId,DWORD dwThreadId,DWORD dwContinueStatus) WINBASEAPI WINBOOL APIENTRY <debugapi.h>
ControlbarNotify(MMC_NOTIFY_TYPE event,LPARAM arg,LPARAM param)virtual HRESULT WINAPI <mmc.h>
ControlPrintProcessor(HANDLE hPrintProcessor,DWORD Command)<winsplp.h>
ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus) WINADVAPI WINBOOL WINAPI <winsvc.h>
ControlServiceEx(SC_HANDLE hService,DWORD dwControl,DWORD dwInfoLevel,PVOID pControlParams)WINADVAPI WINBOOL WINAPI <winsvc.h>
ControlServiceExA(SC_HANDLE hService,DWORD dwControl,DWORD dwInfoLevel,PVOID pControlParams)WINADVAPI WINBOOL WINAPI <winsvc.h>
ControlServiceExW(SC_HANDLE hService,DWORD dwControl,DWORD dwInfoLevel,PVOID pControlParams)WINADVAPI WINBOOL WINAPI <winsvc.h>
ControlTrace(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties,ULONG ControlCode) EXTERN_C ULONG WMIAPI <evntrace.h>
ControlTraceA(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties,ULONG ControlCode) EXTERN_C ULONG WMIAPI <evntrace.h>
ControlTraceW(TRACEHANDLE TraceHandle,LPCWSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties,ULONG ControlCode) EXTERN_C ULONG WMIAPI <evntrace.h>
ConversationLost(void)virtual HRESULT WINAPI <txdtc.h>
ConvertBSTRToString(BSTR pSrc) char<comutil.h>
ConvertByteArrayToByteBuffer(LPBYTE pbyArray,DWORD dwArraySize,LPBYTEBUFFER * ppbyBuffer)virtual HRESULT WINAPI <scardssp.h>
ConvertByteBufferToByteArray(LPBYTEBUFFER pbyBuffer,LPBYTEARRAY * ppArray)virtual HRESULT WINAPI <scardssp.h>
ConvertByteBufferToSafeArray(LPBYTEBUFFER pbyBuffer,LPSAFEARRAY * ppbyArray)virtual HRESULT WINAPI <scardssp.h>
ConvertColorNameToIndex(HPROFILE,PCOLOR_NAME,PDWORD,DWORD) WINBOOL WINAPI <icm.h>
ConvertData(VARIANT varSrc,__LONG32 vtDest,IUnknown * pUnknownElement,VARIANT * pvarDest)virtual HRESULT WINAPI <simpdc.h>
ConvertDefaultLocale(LCID Locale) WINBASEAPI LCID WINAPI <winnls.h>
ConvertFiberToThread(VOID) WINBASEAPI WINBOOL WINAPI <winbase.h>
ConvertFormat(PixelFormat format,DitherType ditherType,PaletteType paletteType,ColorPalette * palette,REAL alphaThresholdPercent)__inline__ Status Bitmap::<gdiplusimpl.h>
ConvertHexStringToWString(CHAR * psz,WCHAR ** ppwsz) DWORD __cdecl <netmon.h>
ConvertIndexToColorName(HPROFILE,PDWORD,PCOLOR_NAME,DWORD) WINBOOL WINAPI <icm.h>
ConvertINetMultiByteToUnicode(LPDWORD lpdwMode,DWORD dwEncoding,LPCSTR lpSrcStr,LPINT lpnMultiCharCount,LPWSTR lpDstStr,LPINT lpnWideCharCount) STDAPI <mlang.h>
ConvertINetString(LPDWORD lpdwMode,DWORD dwSrcEncoding,DWORD dwDstEncoding,LPCSTR lpSrcStr,LPINT lpnSrcSize,LPSTR lpDstStr,LPINT lpnDstSize) STDAPI <mlang.h>
ConvertINetUnicodeToMultiByte(LPDWORD lpdwMode,DWORD dwEncoding,LPCWSTR lpSrcStr,LPINT lpnWideCharCount,LPSTR lpDstStr,LPINT lpnMultiCharCount) STDAPI <mlang.h>
ConvertInterfaceAliasToLuid(CONST WCHAR * InterfaceAlias,PNET_LUID InterfaceLuid) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceGuidToLuid(CONST GUID * InterfaceGuid,PNET_LUID InterfaceLuid) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceIndexToLuid(NET_IFINDEX InterfaceIndex,PNET_LUID InterfaceLuid) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceLuidToAlias(CONST NET_LUID * InterfaceLuid,PWSTR InterfaceAlias,SIZE_T Length) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceLuidToGuid(CONST NET_LUID * InterfaceLuid,GUID * InterfaceGuid) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceLuidToIndex(CONST NET_LUID * InterfaceLuid,PNET_IFINDEX InterfaceIndex) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceLuidToName(CONST NET_LUID * InterfaceLuid,PSTR InterfaceName,SIZE_T Length)
ConvertInterfaceLuidToNameA(CONST NET_LUID * InterfaceLuid,PSTR InterfaceName,SIZE_T Length) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceLuidToNameW(CONST NET_LUID * InterfaceLuid,PWSTR InterfaceName,SIZE_T Length) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceNameToLuid(CONST CHAR * InterfaceName,NET_LUID * InterfaceLuid)
ConvertInterfaceNameToLuidA(CONST CHAR * InterfaceName,NET_LUID * InterfaceLuid) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertInterfaceNameToLuidW(CONST WCHAR * InterfaceName,NET_LUID * InterfaceLuid) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertIpv4MaskToLength(ULONG Mask,PUINT8 MaskLength) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertLengthToIpv4Mask(ULONG MaskLength,PULONG Mask) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ConvertSafeArrayToByteBuffer(LPSAFEARRAY pbyArray,LPBYTEBUFFER * ppbyBuff)virtual HRESULT WINAPI <scardssp.h>
ConvertSecurityDescriptor(VARIANT varSD,__LONG32 lDataFormat,__LONG32 lOutFormat,VARIANT * pResult)virtual HRESULT WINAPI <iads.h>
ConvertSecurityDescriptorToStringSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD RequestedStringSDRevision,SECURITY_INFORMATION SecurityInformation,LPSTR * StringSecurityDescriptor,PULONG StringSecurityDescriptorLen) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertSecurityDescriptorToStringSecurityDescriptorA(PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD RequestedStringSDRevision,SECURITY_INFORMATION SecurityInformation,LPSTR * StringSecurityDescriptor,PULONG StringSecurityDescriptorLen) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertSecurityDescriptorToStringSecurityDescriptorW(PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD RequestedStringSDRevision,SECURITY_INFORMATION SecurityInformation,LPWSTR * StringSecurityDescriptor,PULONG StringSecurityDescriptorLen) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertSidToStringSid(PSID Sid,LPSTR * StringSid) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertSidToStringSidA(PSID Sid,LPSTR * StringSid) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertSidToStringSidW(PSID Sid,LPWSTR * StringSid) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertString(DWORD * pdwMode,DWORD dwSrcEncoding,DWORD dwDstEncoding,BYTE * pSrcStr,UINT * pcSrcSize,BYTE * pDstStr,UINT * pcDstSize)virtual HRESULT WINAPI <mlang.h>
ConvertStringFromUnicode(DWORD * pdwMode,DWORD dwEncoding,WCHAR * pSrcStr,UINT * pcSrcSize,CHAR * pDstStr,UINT * pcDstSize)virtual HRESULT WINAPI <mlang.h>
ConvertStringFromUnicodeEx(DWORD * pdwMode,DWORD dwEncoding,WCHAR * pSrcStr,UINT * pcSrcSize,CHAR * pDstStr,UINT * pcDstSize,DWORD dwFlag,WCHAR * lpFallBack)virtual HRESULT WINAPI <mlang.h>
ConvertStringInIStream(DWORD * pdwMode,DWORD dwFlag,WCHAR * lpFallBack,DWORD dwSrcEncoding,DWORD dwDstEncoding,IStream * pstmIn,IStream * pstmOut)virtual HRESULT WINAPI <mlang.h>
ConvertStringReset(void)virtual HRESULT WINAPI <mlang.h>
ConvertStringSecurityDescriptorToSecurityDescriptor(LPCSTR StringSecurityDescriptor,DWORD StringSDRevision,PSECURITY_DESCRIPTOR * SecurityDescriptor,PULONG SecurityDescriptorSize) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertStringSecurityDescriptorToSecurityDescriptorA(LPCSTR StringSecurityDescriptor,DWORD StringSDRevision,PSECURITY_DESCRIPTOR * SecurityDescriptor,PULONG SecurityDescriptorSize) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertStringSecurityDescriptorToSecurityDescriptorW(LPCWSTR StringSecurityDescriptor,DWORD StringSDRevision,PSECURITY_DESCRIPTOR * SecurityDescriptor,PULONG SecurityDescriptorSize) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertStringSidToSid(LPCSTR StringSid,PSID * Sid) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertStringSidToSidA(LPCSTR StringSid,PSID * Sid) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertStringSidToSidW(LPCWSTR StringSid,PSID * Sid) WINADVAPI WINBOOL WINAPI <sddl.h>
ConvertStringToBSTR(const char * pSrc) BSTR WINAPI <comutil.h>
ConvertStringToUnicode(DWORD * pdwMode,DWORD dwEncoding,CHAR * pSrcStr,UINT * pcSrcSize,WCHAR * pDstStr,UINT * pcDstSize)virtual HRESULT WINAPI <mlang.h>
ConvertStringToUnicodeEx(DWORD * pdwMode,DWORD dwEncoding,CHAR * pSrcStr,UINT * pcSrcSize,WCHAR * pDstStr,UINT * pcDstSize,DWORD dwFlag,WCHAR * lpFallBack)virtual HRESULT WINAPI <mlang.h>
ConvertThreadToFiber(LPVOID lpParameter) WINBASEAPI LPVOID WINAPI <winbase.h>
ConvertThreadToFiberEx(LPVOID lpParameter,DWORD dwFlags) WINBASEAPI LPVOID WINAPI <winbase.h>
ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,PSECURITY_DESCRIPTOR * NewSecurityDescriptor,GUID * ObjectType,BOOLEAN IsDirectoryObject,PGENERIC_MAPPING GenericMapping) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
ConvertTridToXID(DWORD * pdwITrans,DWORD dwRMCookie,XID * pxid)virtual HRESULT WINAPI <oletx2xa.h>
ConvertWStringToHexString(const WCHAR * pwsz,char ** ppsz) DWORD __cdecl <netmon.h>
Copy()inline BSTR _bstr_t::Data_t::<tom.h>
Copy(CALLFRAME_COPY copyControl,ICallFrameWalker * pWalker,ICallFrame ** ppFrame)virtual HRESULT WINAPI <tom.h>
Copy(const CDXArray & src)void CDXArray<tom.h>
Copy(DBCOUNTITEM cRows,LPCOLESTR rgpwszSourceURLs[],LPCOLESTR rgpwszDestURLs[],DWORD dwCopyFlags,IAuthenticate * pAuthenticate,DBSTATUS rgdwStatus[],LPOLESTR rgpwszNewURLs[],OLECHAR ** ppStringsBuffer)virtual HRESULT WINAPI <tom.h>
Copy(IMarkupPointer * pPointerSourceStart,IMarkupPointer * pPointerSourceFinish,IMarkupPointer * pPointerTarget)virtual HRESULT WINAPI <tom.h>
Copy(VARIANT * pVar)virtual HRESULT WINAPI <tom.h>
CopyAcceleratorTable(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries) WINUSERAPI int WINAPI <winuser.h>
CopyAcceleratorTableA(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries) WINUSERAPI int WINAPI <winuser.h>
CopyAcceleratorTableW(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries) WINUSERAPI int WINAPI <winuser.h>
CopyAccessList(IDispatch ** ppAccessControlList)virtual HRESULT WINAPI <iads.h>
CopyAcl(IDispatch ** ppAcl)virtual HRESULT WINAPI <iads.h>
CopyBindInfo(const BINDINFO * pcbiSrc,BINDINFO * pbiDest)STDAPI <urlmon.h>
CopyByHROWS(HSOURCE hSourceID,HCHAPTER hReserved,DBROWCOUNT cRows,const HROW rghRows[],ULONG bFlags)virtual HRESULT WINAPI <oledbdep.h>
CopyContext(PCONTEXT Destination,DWORD ContextFlags,PCONTEXT Source) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyCursor(pcur)<winuser.h>
CopyData(METADATA_HANDLE hMDSourceHandle,LPCWSTR pszMDSourcePath,METADATA_HANDLE hMDDestHandle,LPCWSTR pszMDDestPath,DWORD dwMDAttributes,DWORD dwMDUserType,DWORD dwMDDataType,WINBOOL bMDCopyFlag)virtual HRESULT WINAPI <iadmw.h>
CopyData(PointF * points,BYTE * types,INT startIndex,INT endIndex)	INT <iadmw.h>
CopyEnhMetaFile(HENHMETAFILE hEnh,LPCSTR lpFileName) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
CopyEnhMetaFileA(HENHMETAFILE hEnh,LPCSTR lpFileName) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
CopyEnhMetaFileW(HENHMETAFILE hEnh,LPCWSTR lpFileName) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
CopyFile(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,WINBOOL bFailIfExists) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFile2(PCWSTR pwszExistingFileName,PCWSTR pwszNewFileName,COPYFILE2_EXTENDED_PARAMETERS * pExtendedParameters) WINBASEAPI HRESULT WINAPI <winbase.h>
CopyFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,WINBOOL bFailIfExists) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileEx(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileExA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileExW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileTransacted(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileTransactedA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileTransactedW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyFileW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,WINBOOL bFailIfExists) WINBASEAPI WINBOOL WINAPI <winbase.h>
CopyHere(BSTR SourceName,BSTR NewName,IDispatch ** ppObject)virtual HRESULT WINAPI <iads.h>
CopyIcon(HICON hIcon) WINUSERAPI HICON WINAPI <winuser.h>
CopyImage(HANDLE h,UINT type,int cx,int cy,UINT flags) WINUSERAPI HANDLE WINAPI <winuser.h>
CopyKey(METADATA_HANDLE hMDSourceHandle,LPCWSTR pszMDSourcePath,METADATA_HANDLE hMDDestHandle,LPCWSTR pszMDDestPath,WINBOOL bMDOverwriteFlag,WINBOOL bMDCopyFlag)virtual HRESULT WINAPI <iadmw.h>
CopyLZFile(INT,INT) LONG WINAPI <lzexpand.h>
CopyMemory(Destination, Source, Length)<minwinbase.h>
CopyMetaFile(HMETAFILE,LPCSTR) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
CopyMetaFileA(HMETAFILE,LPCSTR) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
CopyMetaFileW(HMETAFILE,LPCWSTR) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
CopyPath(IDispatch ** ppAdsPath)virtual HRESULT WINAPI <iads.h>
CopyRect(LPRECT lprcDst,CONST RECT * lprcSrc) WINUSERAPI WINBOOL WINAPI <winuser.h>
CopyRgn(hrgnDst,hrgnSrc)<windowsx.h>
CopyRows(HSOURCE hSourceID,HCHAPTER hReserved,DBROWCOUNT cRows,ULONG bFlags,DBCOUNTITEM * pcRowsCopied)virtual HRESULT WINAPI <oledbdep.h>
CopyScopeNode(VARIANT ScopeNode)virtual HRESULT WINAPI <mmcobj.h>
CopySecurityDescriptor(IDispatch ** ppSecurityDescriptor)virtual HRESULT WINAPI <iads.h>
CopySelection(void)virtual HRESULT WINAPI <mmcobj.h>
CopySid(DWORD nDestinationSidLength,PSID pDestinationSid,PSID pSourceSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
CopyStgMedium(const STGMEDIUM * pcstgmedSrc,STGMEDIUM * pstgmedDest)STDAPI <urlmon.h>
CopyTo(__LONG32 lFlags,IGPMDomain * pIGPMDomain,VARIANT * pvarNewDisplayName,VARIANT * pvarMigrationTable,VARIANT * pvarGPMProgress,VARIANT * pvarGPMCancel,IGPMResult ** ppIGPMResult)virtual HRESULT WINAPI <scardssp.h>
CopyTo(HSTRING * str)           HRESULT <scardssp.h>
CopyTo(InterfaceType ** ptr)       HRESULT <scardssp.h>
CopyTo(LPBYTEBUFFER * ppByteBuffer,LONG cb,LONG * pcbRead=0,LONG * pcbWritten=0)virtual HRESULT WINAPI <scardssp.h>
CopyTo(REFIID riid,void ** ptr)       HRESULT <scardssp.h>
CopyTo(U ** ptr)       HRESULT <scardssp.h>
CoQueryAuthenticationServices(DWORD * pcAuthSvc,SOLE_AUTHENTICATION_SERVICE ** asAuthSvc)WINOLEAPI <combaseapi.h>
CoQueryClientBlanket(DWORD * pAuthnSvc,DWORD * pAuthzSvc,LPOLESTR * pServerPrincName,DWORD * pAuthnLevel,DWORD * pImpLevel,RPC_AUTHZ_HANDLE * pPrivs,DWORD * pCapabilities)WINOLEAPI <combaseapi.h>
CoQueryProxyBlanket(IUnknown * pProxy,DWORD * pwAuthnSvc,DWORD * pAuthzSvc,LPOLESTR * pServerPrincName,DWORD * pAuthnLevel,DWORD * pImpLevel,RPC_AUTH_IDENTITY_HANDLE * pAuthInfo,DWORD * pCapabilites)WINOLEAPI <combaseapi.h>
COR_CLEAR_32BIT_PREFERRED(_FLAGS)<corhdr.h>
COR_CLEAR_32BIT_REQUIRED(_flagsfield)<corhdr.h>
COR_IS_32BIT_PREFERRED(_FLAGS)<corhdr.h>
COR_IS_32BIT_REQUIRED(_FLAGS)<corhdr.h>
COR_IS_METHOD_MANAGED_IL(flags)<corhdr.h>
COR_IS_METHOD_MANAGED_NATIVE(flags)<corhdr.h>
COR_IS_METHOD_MANAGED_OPTIL(flags)<corhdr.h>
COR_IS_METHOD_UNMANAGED_NATIVE(flags)<corhdr.h>
COR_SET_32BIT_PREFERRED(_FLAGS)<corhdr.h>
COR_SET_32BIT_REQUIRED(_FLAGS)<corhdr.h>
CorBindToRuntimeHost(LPCWSTR,LPCWSTR,LPCWSTR,VOID *,DWORD,REFCLSID,REFIID,LPVOID *)HRESULT     WINAPI <mscoree.h>
CoRegisterChannelHook(REFGUID ExtensionUuid,IChannelHook * pChannelHook)WINOLEAPI <objbase.h>
CoRegisterClassObject(REFCLSID rclsid,LPUNKNOWN pUnk,DWORD dwClsContext,DWORD flags,LPDWORD lpdwRegister)WINOLEAPI <combaseapi.h>
CoRegisterInitializeSpy(LPINITIALIZESPY pSpy,ULARGE_INTEGER * puliCookie)WINOLEAPI <objbase.h>
CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)WINOLEAPI <objbase.h>
CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter,LPMESSAGEFILTER * lplpMessageFilter)WINOLEAPI <objbase.h>
CoRegisterPSClsid(REFIID riid,REFCLSID rclsid)WINOLEAPI <combaseapi.h>
CoRegisterSurrogate(LPSURROGATE pSurrogate)WINOLEAPI <combaseapi.h>
CoReleaseMarshalData(LPSTREAM pStm)WINOLEAPI <combaseapi.h>
CoReleaseServerProcess(void)WINOLEAPI_<combaseapi.h>
CoResumeClassObjects(void)WINOLEAPI <combaseapi.h>
CoRevertToSelf(void)WINOLEAPI <combaseapi.h>
CoRevokeClassObject(DWORD dwRegister)WINOLEAPI <combaseapi.h>
CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)WINOLEAPI <objbase.h>
CoRevokeMallocSpy(void)WINOLEAPI <objbase.h>
CorExitProcess(int)void        WINAPI <mscoree.h>
CorIsModifierElementType(CorElementType et)FORCEINLINE int <cor.h>
CorIsPrimitiveType(CorElementType et)FORCEINLINE int <cor.h>
CorrectWriting(HWND,LPSTR,UINT,LPVOID,DWORD,DWORD) WINBOOL WINAPI <penwin.h>
CorrectWritingEx(HWND,LPSTR,UINT,LPCWX) int WINAPI <penwin.h>
CorSigCompressData(ULONG len,void * p)inline ULONG <cor.h>
CorSigCompressElementType(CorElementType et,void * d)inline ULONG <cor.h>
CorSigCompressPointer(void * p,void * d)inline ULONG <cor.h>
CorSigCompressSignedInt(int i,void * p)inline ULONG <cor.h>
CorSigCompressToken(mdToken tk,void * p)inline ULONG <cor.h>
CorSigUncompressBigData(PCCOR_SIGNATURE & d)inline ULONG <cor.h>
CorSigUncompressCallingConv(PCCOR_SIGNATURE & d)FORCEINLINE ULONG <cor.h>
CorSigUncompressCallingConv(PCCOR_SIGNATURE d,DWORD len,ULONG * pu)FORCEINLINE HRESULT <cor.h>
CorSigUncompressData(PCCOR_SIGNATURE & d)FORCEINLINE ULONG <cor.h>
CorSigUncompressData(PCCOR_SIGNATURE d,DWORD len,ULONG * po,ULONG * plen)inline HRESULT <cor.h>
CorSigUncompressData(PCCOR_SIGNATURE d,ULONG * po)inline ULONG <cor.h>
CorSigUncompressedDataSize(PCCOR_SIGNATURE d)FORCEINLINE ULONG <cor.h>
CorSigUncompressElementType(PCCOR_SIGNATURE & d)FORCEINLINE CorElementType <cor.h>
CorSigUncompressElementType(PCCOR_SIGNATURE d,CorElementType * et)inline ULONG <cor.h>
CorSigUncompressPointer(PCCOR_SIGNATURE d,void ** pptr)inline ULONG <cor.h>
CorSigUncompressSignedInt(PCCOR_SIGNATURE d,int * pi)inline ULONG <cor.h>
CorSigUncompressToken(PCCOR_SIGNATURE & d)inline mdToken <cor.h>
CorSigUncompressToken(PCCOR_SIGNATURE d,DWORD len,mdToken * t,DWORD * tlen)inline HRESULT <cor.h>
CorSigUncompressToken(PCCOR_SIGNATURE d,mdToken * ptok)inline ULONG <cor.h>
CoSetCancelObject(IUnknown * pUnk)WINOLEAPI <combaseapi.h>
CoSetProxyBlanket(IUnknown * pProxy,DWORD dwAuthnSvc,DWORD dwAuthzSvc,OLECHAR * pServerPrincName,DWORD dwAuthnLevel,DWORD dwImpLevel,RPC_AUTH_IDENTITY_HANDLE pAuthInfo,DWORD dwCapabilities)WINOLEAPI <combaseapi.h>
CoSuspendClassObjects(void)WINOLEAPI <combaseapi.h>
CoSwitchCallContext(IUnknown * pNewObject,IUnknown ** ppOldObject)WINOLEAPI <combaseapi.h>
CoTaskMemAlloc(SIZE_T cb)WINOLEAPI_<combaseapi.h>
CoTaskMemFree(LPVOID pv)WINOLEAPI_<combaseapi.h>
CoTaskMemRealloc(LPVOID pv,SIZE_T cb)WINOLEAPI_<combaseapi.h>
CoTestCancel(void)WINOLEAPI <combaseapi.h>
CoTreatAsClass(REFCLSID clsidOld,REFCLSID clsidNew)WINOLEAPI <objbase.h>
CoUninitialize(void)WINOLEAPI_<combaseapi.h>
CoUninitializeCor(void) STDAPI_<correg.h>
CoUninitializeEE(WINBOOL fFlags) STDAPI_<cor.h>
CoUnmarshalHresult(LPSTREAM pstm,HRESULT * phresult)WINOLEAPI <combaseapi.h>
CoUnmarshalInterface(LPSTREAM pStm,REFIID riid,LPVOID * ppv)WINOLEAPI <combaseapi.h>
Count(__LONG32 * plCount)virtual HRESULT WINAPI <winternl.h>
Count(DWORD * pcStreams)virtual HRESULT WINAPI <winternl.h>
Count(DWORD * pnCountOut)virtual HRESULT WINAPI <winternl.h>
Count(ULONG * pCount)virtual HRESULT WINAPI <winternl.h>
CountClipboardFormats(VOID) WINUSERAPI int WINAPI <winuser.h>
CountEntries(IUnknown * punk)virtual DWORD WINAPI <shdeprecated.h>
CounterPathCallBack(DWORD_PTR) typedef PDH_STATUS<pdh.h>
CountHilites(HHILITER hhil,int base,int limit) int WINAPI <ftsiface.h>
CountOfMediaTypes() virtual LONG <msptrmvc.h>
CountOfSetBitsUChar(UCHAR _X)static inline ULONG <classpnp.h>
CountOfSetBitsULong(ULONG _X)static inline ULONG <classpnp.h>
CountOfSetBitsULong32(ULONG32 _X)static inline ULONG <classpnp.h>
CountOfSetBitsULong64(ULONG64 _X)static inline ULONG <classpnp.h>
CountOfSetBitsUlongPtr(ULONG_PTR _X)static inline ULONG <classpnp.h>
CoWaitForMultipleHandles(DWORD dwFlags,DWORD dwTimeout,ULONG cHandles,LPHANDLE pHandles,LPDWORD lpdwindex)WINOLEAPI <combaseapi.h>
CoWaitForMultipleObjects(DWORD dwFlags,DWORD dwTimeout,ULONG cHandles,const HANDLE * pHandles,LPDWORD lpdwindex)WINOLEAPI <combaseapi.h>
CParseXML() ~<parser.h>
CParseXML(CHAR *) CHAR<parser.h>
CParseXML(const CHAR * szFile) DWORD Start<parser.h>
CParseXML(DWORD dw) DWORD SetError<parser.h>
CPlugTerminalClassInfo() ~<mspaddr.h>
CPlugTerminalClassInfo(get_CLSID) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(get_Company) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(get_Direction) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(get_MediaTypes) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(get_Name) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(get_TerminalClass) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(get_Version) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_CLSID) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_Company) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_Direction) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_MediaTypes) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_Name) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_TerminalClass) STDMETHOD<mspaddr.h>
CPlugTerminalClassInfo(put_Version) STDMETHOD<mspaddr.h>
CPlugTerminalSuperclassInfo() ~<mspaddr.h>
CPlugTerminalSuperclassInfo(get_CLSID) STDMETHOD<mspaddr.h>
CPlugTerminalSuperclassInfo(get_Name) STDMETHOD<mspaddr.h>
CPlugTerminalSuperclassInfo(put_CLSID) STDMETHOD<mspaddr.h>
CPlugTerminalSuperclassInfo(put_Name) STDMETHOD<mspaddr.h>
CProviderHelper(IWbemServices * pNamespace,IWbemContext * pCtx)<wmiatlprov.h>
CPTEventSink() ~<mspstrm.h>
CPTEventSink(CMSPStream * pStream) HRESULT SetSinkStream<mspstrm.h>
CPTEventSink(FireEvent) STDMETHOD<mspstrm.h>
CPTEventSink(LPVOID pEventStructure) static DWORD WINAPI FireEventCallBack<mspstrm.h>
CPUBLIC_LEAF_ENTRY(Name,i)<kxia64.h>
CPUBLIC_NESTED_ENTRY(Name,i)<kxia64.h>
Create(BSTR ClassName,BSTR RelativeName,IDispatch ** ppObject)virtual HRESULT WINAPI <winioctl.h>
Create(byte * pucLuPair,DWORD cbLuPair,IDtcLuRecovery ** ppRecovery)virtual HRESULT WINAPI <winioctl.h>
Create(CDXPlex * & pHead,UINT nMax,UINT cbElement) static CDXPlex<winioctl.h>
Create(char * pszDSN,char * pszClientDllName,GUID * pguidRm,IDtcToXaHelper ** ppXaHelper)virtual HRESULT WINAPI <winioctl.h>
Create(const WCHAR * pcszResTypeNameIn,const WCHAR * pcszResTypeDisplayNameIn,const WCHAR * pcszResDllNameIn,DWORD dwLooksAliveIntervalIn,DWORD dwIsAliveIntervalIn)virtual HRESULT WINAPI <winioctl.h>
Create(GUID * pguidRM,CHAR * pszRMName,IResourceManagerSink * pIResMgrSink,IResourceManager ** ppResMgr)virtual HRESULT WINAPI <winioctl.h>
Create(IElementNamespace * pNamespace)virtual HRESULT WINAPI <winioctl.h>
Create(ITransaction * pTransaction,ITransactionVoterNotifyAsync2 * pVoterNotify,ITransactionVoterBallotAsync2 ** ppVoterBallot)virtual HRESULT WINAPI <winioctl.h>
Create(ITransactionPhase0NotifyAsync * pPhase0Notify,ITransactionPhase0EnlistmentAsync ** ppPhase0Enlistment)virtual HRESULT WINAPI <winioctl.h>
Create(ITransactionReceiver ** ppReceiver)virtual HRESULT WINAPI <winioctl.h>
Create(ITransactionTransmitter ** ppTransmitter)virtual HRESULT WINAPI <winioctl.h>
Create(IUnknown * pSink,REFIID riidSink,IUnknown ** pMarshaledSink)virtual HRESULT WINAPI <winioctl.h>
Create(IUnknown * punkServicesIn)virtual HRESULT WINAPI <winioctl.h>
Create(LONG Index,ITMedia ** ppMedia)virtual HRESULT WINAPI <winioctl.h>
Create(LONG Index,ITTime ** ppTime)virtual HRESULT WINAPI <winioctl.h>
Create(MMC_CONTROL_TYPE nType,LPEXTENDCONTROLBAR pExtendControlbar,LPUNKNOWN * ppUnknown)virtual HRESULT WINAPI <winioctl.h>
Create(ULONG cbWhereabouts,byte * rgbWhereabouts,ITransactionExport ** ppExport)virtual HRESULT WINAPI <winioctl.h>
Create(unsigned char * pucLuPair,DWORD cbLuPair,ITransaction * pITransaction,unsigned char * pTransId,DWORD cbTransId,IDtcLuRmEnlistmentSink * pRmEnlistmentSink,IDtcLuRmEnlistment ** ppRmEnlistment)virtual HRESULT WINAPI <winioctl.h>
Create(unsigned char * pucLuPair,DWORD cbLuPair,IUnknown * punkTransactionOuter,ISOLEVEL isoLevel,ULONG isoFlags,ITransactionOptions * pOptions,ITransaction ** ppTransaction,unsigned char * pTransId,DWORD cbTransId,IDtcLuSubordinateDtcSink * pSubordinateDtcSink,IDtcLuSubordinateDtc ** ppSubordinateDtc)virtual HRESULT WINAPI <winioctl.h>
Create(VARIANT * IsTransactional,VARIANT * IsWorldReadable)virtual HRESULT WINAPI <winioctl.h>
CreateAcceleratorTable(LPACCEL paccel,int cAccel) WINUSERAPI HACCEL WINAPI <winuser.h>
CreateAcceleratorTableA(LPACCEL paccel,int cAccel) WINUSERAPI HACCEL WINAPI <winuser.h>
CreateAcceleratorTableW(LPACCEL paccel,int cAccel) WINUSERAPI HACCEL WINAPI <winuser.h>
CreateAccessor(DBACCESSORFLAGS dwAccessorFlags,DBCOUNTITEM cBindings,const DBBINDING rgBindings[],DBLENGTH cbRowSize,HACCESSOR * phAccessor,DBBINDSTATUS rgStatus[])virtual HRESULT WINAPI <oledb.h>
CreateActCtxW(PCACTCTXW pActCtx) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateAgent(ITAgent ** ppAgent)virtual HRESULT WINAPI <tapi3cc.h>
CreateAgentWithID(BSTR pID,BSTR pPIN,ITAgent ** ppAgent)virtual HRESULT WINAPI <tapi3cc.h>
CreateALink(REFIID riid,IUnknown ** ppInterface) HRESULT WINAPI <alink.h>
CreateAntiMoniker(LPMONIKER * ppmk)WINOLEAPI <objbase.h>
CreateAnycastIpAddressEntry(CONST MIB_ANYCASTIPADDRESS_ROW * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
CreateAppContainerProfile(PCWSTR pszAppContainerName,PCWSTR pszDisplayName,PCWSTR pszDescription,PSID_AND_ATTRIBUTES pCapabilities,DWORD dwCapabilityCount,PSID * ppSidAppContainerSid) USERENVAPI HRESULT WINAPI <userenv.h>
CreateApplication(BSTR bstrApplicationName,VARIANT varReserved,IAzApplication ** ppApplication)virtual HRESULT WINAPI <iwamreg.h>
CreateApplication(LPCWSTR szMDPath,DWORD dwAppMode,LPCWSTR szAppPoolId,WINBOOL fCreatePool)virtual HRESULT WINAPI <iwamreg.h>
CreateApplication2(BSTR bstrApplicationName,VARIANT varReserved,IAzApplication2 ** ppApplication)virtual HRESULT WINAPI <azroles.h>
CreateApplicationGroup(BSTR bstrGroupName,VARIANT varReserved,IAzApplicationGroup ** ppGroup)virtual HRESULT WINAPI <azroles.h>
CreateApplicationPool(LPCWSTR szPool)virtual HRESULT WINAPI <iwamreg.h>
CreateAssemblyCache(IAssemblyCache **,DWORD)HRESULT WINAPI <fusion.h>
CreateAssemblyEnum(IAssemblyEnum **,IUnknown *,IAssemblyName *,DWORD,LPVOID)HRESULT WINAPI <fusion.h>
CreateAssemblyNameObject(LPASSEMBLYNAME *,LPCWSTR,DWORD,LPVOID)HRESULT WINAPI <fusion.h>
CreateAsyncBindCtx(DWORD reserved,IBindStatusCallback * pBSCb,IEnumFORMATETC * pEFetc,IBindCtx ** ppBC)STDAPI <urlmon.h>
CreateAsyncBindCtxEx(IBindCtx * pbc,DWORD dwOptions,IBindStatusCallback * pBSCb,IEnumFORMATETC * pEnum,IBindCtx ** ppBC,DWORD reserved)STDAPI <urlmon.h>
CreateAttribute(ATTRIBUTEID Id,IDispatch ** ppAttributeObject)virtual HRESULT WINAPI <sdoias.h>
CreateAttributeDefinition(LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition)virtual HRESULT WINAPI <iads.h>
CreateBindCtx(DWORD reserved,LPBC * ppbc)WINOLEAPI <objbase.h>
CreateBitmap(int nWidth,int nHeight,UINT nPlanes,UINT nBitCount,CONST VOID * lpBits) WINGDIAPI HBITMAP WINAPI <wingdi.h>
CreateBitmapIndirect(CONST BITMAP * pbm) WINGDIAPI HBITMAP WINAPI <wingdi.h>
CreateBlob(HBLOB * phBlob) DWORD __cdecl <netmon.h>
CreateBoundaryDescriptor(LPCSTR Name,ULONG Flags) WINBASEAPI HANDLE APIENTRY <winbase.h>
CreateBoundaryDescriptorA(LPCSTR Name,ULONG Flags) WINBASEAPI HANDLE APIENTRY <winbase.h>
CreateBoundaryDescriptorW(LPCWSTR Name,ULONG Flags) WINBASEAPI HANDLE WINAPI <namespaceapi.h>
CreateBrowserPropSheetExt(REFIID riid,void ** ppv)virtual HRESULT WINAPI <shdeprecated.h>
CreateBrushIndirect(CONST LOGBRUSH * plbrush) WINGDIAPI HBRUSH WINAPI <wingdi.h>
CreateByteArray(DWORD dwAllocSize,LPBYTE * ppbyArray)virtual HRESULT WINAPI <scardssp.h>
CreateByteBuffer(DWORD dwAllocSize,LPBYTEBUFFER * ppbyBuff)virtual HRESULT WINAPI <scardssp.h>
CreateCall(BSTR pDestAddress,__LONG32 lAddressType,__LONG32 lMediaTypes,ITBasicCallControl ** ppCall)virtual HRESULT WINAPI <tapi3if.h>
CreateCaret(HWND hWnd,HBITMAP hBitmap,int nWidth,int nHeight) WINUSERAPI WINBOOL WINAPI <winuser.h>
CreateChangeLog(IHTMLChangeSink * pChangeSink,IHTMLChangeLog ** ppChangeLog,WINBOOL fForward,WINBOOL fBackward)virtual HRESULT WINAPI <mshtmlc.h>
CreateChildItem(LONG lFlags,BSTR bstrItemName,BSTR bstrFullItemName,IWiaItem ** ppIWiaItem)virtual HRESULT WINAPI <wia.h>
CreateClassDefinition(LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition)virtual HRESULT WINAPI <iads.h>
CreateClassEnum(const BSTR strSuperclass,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI <wmiatlprov.h>
CreateClassEnum(const BSTR Superclass,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI <wmiatlprov.h>
CreateClassEnumAsync(const BSTR Superclass,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI <wmiatlprov.h>
CreateClassMoniker(REFCLSID rclsid,LPMONIKER * ppmk)WINOLEAPI <objbase.h>
CreateClassPart(__LONG32 lFlags,LPCWSTR Name)virtual HRESULT WINAPI <wmiutils.h>
CreateCluster(PCREATE_CLUSTER_CONFIG pConfig,PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback,PVOID pvCallbackArg)HCLUSTER WINAPI <clusapi.h>
CreateClusterGroup(HCLUSTER hCluster,LPCWSTR lpszGroupName) HGROUP WINAPI <clusapi.h>
CreateClusterNotifyPort(HCHANGE hChange,HCLUSTER hCluster,DWORD dwFilter,DWORD_PTR dwNotifyKey) HCHANGE WINAPI <clusapi.h>
CreateClusterResource(HGROUP hGroup,LPCWSTR lpszResourceName,LPCWSTR lpszResourceType,DWORD dwFlags) HRESOURCE WINAPI <clusapi.h>
CreateClusterResourceType(HCLUSTER hCluster,LPCWSTR lpszResourceTypeName,LPCWSTR lpszDisplayName,LPCWSTR lpszResourceTypeDll,DWORD dwLooksAlivePollInterval,DWORD dwIsAlivePollInterval) DWORD WINAPI <clusapi.h>
CreateColorSpace(LPLOGCOLORSPACEA lplcs) WINGDIAPI HCOLORSPACE WINAPI <wingdi.h>
CreateColorSpaceA(LPLOGCOLORSPACEA lplcs) WINGDIAPI HCOLORSPACE WINAPI <wingdi.h>
CreateColorSpaceW(LPLOGCOLORSPACEW lplcs) WINGDIAPI HCOLORSPACE WINAPI <wingdi.h>
CreateColorTransform(LPLOGCOLORSPACEA,HPROFILE,HPROFILE,DWORD) HTRANSFORM WINAPI <icm.h>
CreateColorTransformA(LPLOGCOLORSPACEA,HPROFILE,HPROFILE,DWORD) HTRANSFORM WINAPI <icm.h>
CreateColorTransformW(LPLOGCOLORSPACEW,HPROFILE,HPROFILE,DWORD) HTRANSFORM WINAPI <icm.h>
CreateCommand(IUnknown * pUnkOuter,REFIID riid,IUnknown ** ppCommand)virtual HRESULT WINAPI <oledb.h>
CreateCompatibleBitmap(HDC hdc,int cx,int cy) WINGDIAPI HBITMAP WINAPI <wingdi.h>
CreateCompatibleDC(HDC hdc) WINGDIAPI HDC WINAPI <wingdi.h>
CreateCompatibleHRC(HRC,HREC) HRC WINAPI <penwin.h>
CreateComponent(LPCOMPONENT * ppComponent)virtual HRESULT WINAPI <mmc.h>
CreateCompressor(DWORD Algorithm,PCOMPRESS_ALLOCATION_ROUTINES AllocationRoutines,PCOMPRESSOR_HANDLE CompressorHandle) WINBOOL WINAPI <compressapi.h>
CreateConsoleScreenBuffer(DWORD dwDesiredAccess,DWORD dwShareMode,CONST SECURITY_ATTRIBUTES * lpSecurityAttributes,DWORD dwFlags,LPVOID lpScreenBufferData) WINBASEAPI HANDLE WINAPI <wincon.h>
CreateContact(BSTR bstrAlias,IDispatch ** ppContact)virtual HRESULT WINAPI <msimcsdk.h>
CreateContext(HIMC * phIMC)virtual HRESULT WINAPI <msimcsdk.h>
CreateContext(VARIANT Profile,VARIANT Flags,IDispatch ** ppInterface)virtual HRESULT WINAPI <msimcsdk.h>
CREATECONVERSATIONINDEX(ULONG cbParent,LPBYTE lpbParent,ULONG * lpcbConvIndex,LPBYTE * lppbConvIndex) typedef SCODE<wabutil.h>
CreateConvertCharset(UINT uiSrcCodePage,UINT uiDstCodePage,DWORD dwProperty,IMLangConvertCharset ** ppMLangConvertCharset)virtual HRESULT WINAPI <mlang.h>
CreateCursor(HINSTANCE hInst,int xHotSpot,int yHotSpot,int nWidth,int nHeight,CONST VOID * pvANDPlane,CONST VOID * pvXORPlane) WINUSERAPI HCURSOR WINAPI <winuser.h>
CreateCustomToneObject(ITCustomTone ** ppCustomTone)virtual HRESULT WINAPI <tapi3if.h>
CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder)WINOLEAPI <ole2.h>
CreateDataCache(LPUNKNOWN pUnkOuter,REFCLSID rclsid,REFIID iid,LPVOID * ppv)WINOLEAPI <objbase.h>
CreateDataSource(ULONG cPropertySets,DBPROPSET rgPropertySets[],IUnknown * pUnkOuter,REFIID riid,IUnknown ** ppDBSession)virtual HRESULT WINAPI <oledb.h>
CreateDBInstance(REFCLSID clsidProvider,IUnknown * pUnkOuter,DWORD dwClsCtx,LPOLESTR pwszReserved,REFIID riid,IUnknown ** ppDataSource)virtual HRESULT WINAPI <msdasc.h>
CreateDBInstanceEx(REFCLSID clsidProvider,IUnknown * pUnkOuter,DWORD dwClsCtx,LPOLESTR pwszReserved,COSERVERINFO * pServerInfo,ULONG cmq,MULTI_QI * rgmqResults)virtual HRESULT WINAPI <msdasc.h>
CreateDC(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,CONST DEVMODEA * pdm) WINGDIAPI HDC WINAPI <wingdi.h>
CreateDCA(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,CONST DEVMODEA * pdm) WINGDIAPI HDC WINAPI <wingdi.h>
CreateDCW(LPCWSTR pwszDriver,LPCWSTR pwszDevice,LPCWSTR pszPort,CONST DEVMODEW * pdm) WINGDIAPI HDC WINAPI <wingdi.h>
CreateDecompressor(DWORD Algorithm,PCOMPRESS_ALLOCATION_ROUTINES AllocationRoutines,PDECOMPRESSOR_HANDLE DecompressorHandle) WINBOOL WINAPI <compressapi.h>
CreateDesktop(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa) WINUSERAPI HDESK WINAPI <winuser.h>
CreateDesktopA(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa) WINUSERAPI HDESK WINAPI <winuser.h>
CreateDesktopEx(LPCSTR lpszDesktop,LPCSTR lpszDevice,DEVMODEA * pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa,ULONG ulHeapSize,PVOID pvoid) WINUSERAPI HDESK WINAPI <winuser.h>
CreateDesktopExA(LPCSTR lpszDesktop,LPCSTR lpszDevice,DEVMODEA * pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa,ULONG ulHeapSize,PVOID pvoid) WINUSERAPI HDESK WINAPI <winuser.h>
CreateDesktopExW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,DEVMODEW * pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa,ULONG ulHeapSize,PVOID pvoid) WINUSERAPI HDESK WINAPI <winuser.h>
CreateDesktopW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,LPDEVMODEW pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa) WINUSERAPI HDESK WINAPI <winuser.h>
CreateDetectToneObject(ITDetectTone ** ppDetectTone)virtual HRESULT WINAPI <tapi3if.h>
CreateDevice(BSTR bstrDeviceID,IWiaItem ** ppWiaItemRoot)virtual HRESULT WINAPI <wia.h>
CreateDeviceLinkProfile(PHPROFILE,DWORD,PDWORD,DWORD,DWORD,PBYTE *,DWORD) WINBOOL WINAPI <icm.h>
CreateDialogA(hInstance,lpName,hWndParent,lpDialogFunc)<winuser.h>
CreateDialogIndirectA(hInstance,lpTemplate,hWndParent,lpDialogFunc)<winuser.h>
CreateDialogIndirectParam(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateDialogIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateDialogIndirectW(hInstance,lpTemplate,hWndParent,lpDialogFunc)<winuser.h>
CreateDialogParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateDialogW(hInstance,lpName,hWndParent,lpDialogFunc)<winuser.h>
CreateDIBitmap(HDC hdc,CONST BITMAPINFOHEADER * pbmih,DWORD flInit,CONST VOID * pjBits,CONST BITMAPINFO * pbmi,UINT iUsage) WINGDIAPI HBITMAP WINAPI <wingdi.h>
CreateDIBPatternBrush(HGLOBAL h,UINT iUsage) WINGDIAPI HBRUSH WINAPI <wingdi.h>
CreateDIBPatternBrushPt(CONST VOID * lpPackedDIB,UINT iUsage) WINGDIAPI HBRUSH WINAPI <wingdi.h>
CreateDIBSection(HDC hdc,CONST BITMAPINFO * lpbmi,UINT usage,VOID ** ppvBits,HANDLE hSection,DWORD offset) WINGDIAPI HBITMAP WINAPI <wingdi.h>
CreateDirectory(DIRECTORY_TYPE DirectoryType,BSTR pName,ITDirectory ** ppDir)virtual HRESULT WINAPI <rend.h>
CreateDirectory(LPCSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <rend.h>
CreateDirectoryA(LPCSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
CreateDirectoryEx(LPCSTR lpTemplateDirectory,LPCSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateDirectoryExA(LPCSTR lpTemplateDirectory,LPCSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateDirectoryExW(LPCWSTR lpTemplateDirectory,LPCWSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateDirectoryObject(DIRECTORY_OBJECT_TYPE DirectoryObjectType,BSTR pName,ITDirectoryObject ** ppDirectoryObject)virtual HRESULT WINAPI <rend.h>
CreateDirectoryTransacted(LPCSTR lpTemplateDirectory,LPCSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateDirectoryTransactedA(LPCSTR lpTemplateDirectory,LPCSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateDirectoryTransactedW(LPCWSTR lpTemplateDirectory,LPCWSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateDirectoryW(LPCWSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
CreateDiscardableBitmap(HDC hdc,int cx,int cy) WINGDIAPI HBITMAP WINAPI <wingdi.h>
CreateDisplayPointer(IDisplayPointer ** ppDispPointer)virtual HRESULT WINAPI <mshtmlc.h>
CreateDispTypeInfo(INTERFACEDATA * pidata,LCID lcid,ITypeInfo ** pptinfo)WINOLEAUTAPI <oleauto.h>
CreateDSObject(LPWSTR pszRDNName,PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,IDispatch ** ppObject)virtual HRESULT WINAPI <iads.h>
CreateDXGIFactory(REFIID riid,void ** factory)HRESULT __stdcall  <dxgi.h>
CreateDXGIFactory1(REFIID riid,void ** factory)HRESULT __stdcall  <dxgi.h>
CreateDynamicTerminal(IUnknown * pOuterUnknown,IID iidTerminalClass,DWORD dwMediaType,TERMINAL_DIRECTION Direction,MSP_HANDLE htAddress,ITTerminal ** ppTerminal)virtual HRESULT WINAPI <termmgr.h>
CreateEditableStream(PAVISTREAM * ppsEditable,PAVISTREAM psSource) STDAPI <vfw.h>
CreateElement(ELEMENT_TAG_ID tagID,OLECHAR * pchAttributes,IHTMLElement ** ppElement)virtual HRESULT WINAPI <mshtmlc.h>
CreateEllipticRgn(int x1,int y1,int x2,int y2) WINGDIAPI HRGN WINAPI <wingdi.h>
CreateEllipticRgnIndirect(CONST RECT * lprect) WINGDIAPI HRGN WINAPI <wingdi.h>
CreateEmptyCollectionObject(ITCollection2 ** ppCollection)virtual HRESULT WINAPI <tapi3if.h>
CreateEnhMetaFile(HDC hdc,LPCSTR lpFilename,CONST RECT * lprc,LPCSTR lpDesc) WINGDIAPI HDC WINAPI <wingdi.h>
CreateEnhMetaFileA(HDC hdc,LPCSTR lpFilename,CONST RECT * lprc,LPCSTR lpDesc) WINGDIAPI HDC WINAPI <wingdi.h>
CreateEnhMetaFileW(HDC hdc,LPCWSTR lpFilename,CONST RECT * lprc,LPCWSTR lpDesc) WINGDIAPI HDC WINAPI <wingdi.h>
CreateEnlistment(LPSECURITY_ATTRIBUTES lpEnlistmentrAttributes,HANDLE ResourceManagerHandle,HANDLE TransactionHandle,NOTIFICATION_MASK NotificationMask,DWORD CreateOptions,PVOID EnlistmentKey) HANDLE WINAPI <ktmw32.h>
CreateEnvironmentBlock(LPVOID * lpEnvironment,HANDLE hToken,WINBOOL bInherit) WINBOOL WINAPI <userenv.h>
CreateErrorInfo(ICreateErrorInfo ** pperrinfo)WINOLEAUTAPI <oleauto.h>
CreateEvent(LPSECURITY_ATTRIBUTES lpEventAttributes,WINBOOL bManualReset,WINBOOL bInitialState,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes,WINBOOL bManualReset,WINBOOL bInitialState,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateEventEx(LPSECURITY_ATTRIBUTES lpEventAttributes,LPCSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateEventExA(LPSECURITY_ATTRIBUTES lpEventAttributes,LPCSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateEventExW(LPSECURITY_ATTRIBUTES lpEventAttributes,LPCWSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateEventObject(IHTMLEventObj ** ppEventObject)virtual HRESULT WINAPI <mshtmlc.h>
CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes,WINBOOL bManualReset,WINBOOL bInitialState,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateEx(GUID * pguidRM,CHAR * pszRMName,IResourceManagerSink * pIResMgrSink,REFIID riidRequested,void ** ppvResMgr)virtual HRESULT WINAPI <txdtc.h>
CreateFiber(SIZE_T dwStackSize,LPFIBER_START_ROUTINE lpStartAddress,LPVOID lpParameter) WINBASEAPI LPVOID WINAPI <winbase.h>
CreateFiberEx(SIZE_T dwStackCommitSize,SIZE_T dwStackReserveSize,DWORD dwFlags,LPFIBER_START_ROUTINE lpStartAddress,LPVOID lpParameter) WINBASEAPI LPVOID WINAPI <winbase.h>
CreateFile(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile) WINBASEAPI HANDLE WINAPI <fileapi.h>
CreateFile2(LPCWSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwCreationDisposition,LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams) WINBASEAPI HANDLE WINAPI <fileapi.h>
CreateFileA(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile) WINBASEAPI HANDLE WINAPI <fileapi.h>
CreateFileMapping(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileMappingA(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileMappingFromApp(HANDLE hFile,PSECURITY_ATTRIBUTES SecurityAttributes,ULONG PageProtection,ULONG64 MaximumSize,PCWSTR Name) WINBASEAPI HANDLE WINAPI <memoryapi.h>
CreateFileMappingNuma(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCSTR lpName,DWORD nndPreferred) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileMappingNumaA(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCSTR lpName,DWORD nndPreferred) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileMappingNumaW(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCWSTR lpName,DWORD nndPreferred) WINBASEAPI HANDLE WINAPI <memoryapi.h>
CreateFileMappingW(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <memoryapi.h>
CreateFileMoniker(LPCOLESTR lpszPathName,LPMONIKER * ppmk)WINOLEAPI <objbase.h>
CreateFileTransacted(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile,HANDLE hTransaction,PUSHORT pusMiniVersion,PVOID lpExtendedParameter) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileTransactedA(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile,HANDLE hTransaction,PUSHORT pusMiniVersion,PVOID lpExtendedParameter) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileTransactedW(LPCWSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile,HANDLE hTransaction,PUSHORT pusMiniVersion,PVOID lpExtendedParameter) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateFileW(LPCWSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile)WINBASEAPI HANDLE WINAPI <fileapi.h>
CreateFilter(VOID) HFILTER WINAPI <netmon.h>
CreateFilters() HRESULT <msptrmvc.h>
CreateFiltersIfRequired()inline HRESULT CAudioCaptureTerminal::<msptrmac.h>
CreateFont(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFontA(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFontIndirect(CONST LOGFONTA * lplf) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFontIndirectA(CONST LOGFONTA * lplf) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFontIndirectExW(CONST ENUMLOGFONTEXDVW *) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFontIndirectW(CONST LOGFONTW * lplf) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFontW(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCWSTR pszFaceName) WINGDIAPI HFONT WINAPI <wingdi.h>
CreateFormatEnumerator(UINT cfmtetc,FORMATETC * rgfmtetc,IEnumFORMATETC ** ppenumfmtetc)STDAPI <urlmon.h>
CreateForwardInfoObject(ITForwardInformation ** ppForwardInfo)virtual HRESULT WINAPI <tapi3if.h>
CreateGenericComposite(LPMONIKER pmkFirst,LPMONIKER pmkRest,LPMONIKER * ppmkComposite)WINOLEAPI <objbase.h>
CreateGPO(IGPMGPO ** ppNewGPO)virtual HRESULT WINAPI <gpmgmt.h>
CreateGPOLink(__LONG32 lLinkPos,IGPMGPO * pGPO,IGPMGPOLink ** ppNewGPOLink)virtual HRESULT WINAPI <gpmgmt.h>
CreateGPOLink(LPOLESTR lpGPO,LPOLESTR lpContainer,WINBOOL fHighPriority) GPEDITAPI HRESULT WINAPI <gpmgmt.h>
CreateGroup(GUID guidGroupID,IBackgroundCopyGroup ** ppGroup)virtual HRESULT WINAPI <qmgr.h>
CreateHalftonePalette(HDC hdc) WINGDIAPI HPALETTE WINAPI <wingdi.h>
CreateHandoffTable(LPSTR secName,LPSTR iniFile,LPHANDOFFTABLE * hTable,DWORD nMaxProtocolEntries,DWORD base) DWORD WINAPI <netmon.h>
CreateHardLink(LPCSTR lpFileName,LPCSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateHardLinkA(LPCSTR lpFileName,LPCSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateHardLinkTransacted(LPCSTR lpFileName,LPCSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateHardLinkTransactedA(LPCSTR lpFileName,LPCSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateHardLinkTransactedW(LPCWSTR lpFileName,LPCWSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateHardLinkW(LPCWSTR lpFileName,LPCWSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateHatchBrush(int iHatch,COLORREF color) WINGDIAPI HBRUSH WINAPI <wingdi.h>
CreateHTMLPropertyPage(IMoniker * pmk,IPropertyPage ** ppPP)STDAPI <mshtmhst.h>
CreateHWL(HREC,LPSTR,UINT,DWORD) HWL WINAPI <penwin.h>
CreateIC(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,CONST DEVMODEA * pdm) WINGDIAPI HDC WINAPI <wingdi.h>
CreateICA(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,CONST DEVMODEA * pdm) WINGDIAPI HDC WINAPI <wingdi.h>
CreateICommand(IUnknown ** ppIUnknown,IUnknown * pOuterUnk)virtual HRESULT WINAPI <indexsrv.h>
CreateIcon(HINSTANCE hInstance,int nWidth,int nHeight,BYTE cPlanes,BYTE cBitsPixel,CONST BYTE * lpbANDbits,CONST BYTE * lpbXORbits) WINUSERAPI HICON WINAPI <winuser.h>
CreateIconFromResource(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer) WINUSERAPI HICON WINAPI <winuser.h>
CreateIconFromResourceEx(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer,int cxDesired,int cyDesired,UINT Flags) WINUSERAPI HICON WINAPI <winuser.h>
CreateIconIndirect(PICONINFO piconinfo) WINUSERAPI HICON WINAPI <winuser.h>
CreateICW(LPCWSTR pszDriver,LPCWSTR pszDevice,LPCWSTR pszPort,CONST DEVMODEW * pdm) WINGDIAPI HDC WINAPI <wingdi.h>
CreateILockBytesOnHGlobal(HGLOBAL hGlobal,WINBOOL fDeleteOnRelease,LPLOCKBYTES * pplkbyt)WINOLEAPI <ole2.h>
CreateIMSession(VARIANT varIMContact,IDispatch ** ppIMSession)virtual HRESULT WINAPI <msimcsdk.h>
CreateIndex(DBID * pTableID,DBID * pIndexID,DBORDINAL cIndexColumnDescs,const DBINDEXCOLUMNDESC rgIndexColumnDescs[],ULONG cPropertySets,DBPROPSET rgPropertySets[],DBID ** ppIndexID)virtual HRESULT WINAPI <oledb.h>
CreateInkset(UINT) HINKSET WINAPI <penwin.h>
CreateInksetHRCRESULT(HRCRESULT,UINT,UINT) HINKSET WINAPI <penwin.h>
CreateInstallReferenceEnum(IInstallReferenceEnum **,IAssemblyName *,DWORD,LPVOID)HRESULT WINAPI <fusion.h>
CreateInstance(BSTR bstrProgID,VARIANT * pObject)virtual HRESULT WINAPI <comsvcs.h>
CreateInstance(BSTR bstrTipUrl,REFCLSID rclsid,REFIID riid,void ** pObject)virtual HRESULT WINAPI <comsvcs.h>
CreateInstance(BSTR pszProgId,VARIANT * pObject)virtual HRESULT WINAPI <comsvcs.h>
CreateInstance(const CLSID & rclsid,IUnknown * pOuter=NULL,DWORD dwClsContext=CLSCTX_ALL) HRESULT <comsvcs.h>
CreateInstance(ITransaction * pTransaction,REFCLSID rclsid,REFIID riid,void ** pObject)virtual HRESULT WINAPI <comsvcs.h>
CreateInstance(LPCSTR clsidStringA,IUnknown * pOuter=NULL,DWORD dwClsContext=CLSCTX_ALL) HRESULT <comsvcs.h>
CreateInstance(LPCWSTR clsidString,IUnknown * pOuter=NULL,DWORD dwClsContext=CLSCTX_ALL) HRESULT <comsvcs.h>
CreateInstance(REFCLSID rclsid,REFIID riid,LPVOID * ppv)virtual HRESULT WINAPI <comsvcs.h>
CreateInstance(REFCLSID rclsid,REFIID riid,void ** pObject)virtual HRESULT WINAPI <comsvcs.h>
CreateInstanceEnum(const BSTR Class,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI <wmiatlprov.h>
CreateInstanceEnum(const BSTR strClass,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI <wmiatlprov.h>
CreateInstanceEnumAsync(const BSTR strClass,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI <wmiatlprov.h>
CreateIoCompletionPort(HANDLE FileHandle,HANDLE ExistingCompletionPort,ULONG_PTR CompletionKey,DWORD NumberOfConcurrentThreads) WINBASEAPI HANDLE WINAPI <ioapiset.h>
CreateIpForwardEntry(PMIB_IPFORWARDROW pRoute) DWORD WINAPI <iphlpapi.h>
CreateIpForwardEntry2(CONST MIB_IPFORWARD_ROW2 * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
CreateIpNetEntry(PMIB_IPNETROW pArpEntry) DWORD WINAPI <iphlpapi.h>
CreateIpNetEntry2(CONST MIB_IPNET_ROW2 * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
CreateIProp(LPCIID lpInterface,ALLOCATEBUFFER * lpAllocateBuffer,ALLOCATEMORE * lpAllocateMore,FREEBUFFER * lpFreeBuffer,LPVOID lpvReserved,LPPROPDATA * lppPropData) STDAPI_<wabutil.h>
CreateItem(BSTR bstrName,VARIANT varValue,ISClusProperty ** pProperty)virtual HRESULT WINAPI <msclus.h>
CreateItem(BSTR bstrName,VARIANT varValue,ISClusPropertyValue ** ppPropertyValue)virtual HRESULT WINAPI <msclus.h>
CreateItem(BSTR bstrResourceGroupName,ISClusResGroup ** ppResourceGroup)virtual HRESULT WINAPI <msclus.h>
CreateItem(BSTR bstrResourceName,BSTR bstrGroupName,CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,ISClusResource ** ppClusterResource)virtual HRESULT WINAPI <msclus.h>
CreateItem(BSTR bstrResourceName,BSTR bstrResourceType,BSTR bstrGroupName,CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,ISClusResource ** ppClusterResource)virtual HRESULT WINAPI <msclus.h>
CreateItem(BSTR bstrResourceName,BSTR bstrResourceType,CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,ISClusResource ** ppClusterResource)virtual HRESULT WINAPI <msclus.h>
CreateItem(BSTR bstrResourceTypeName,BSTR bstrDisplayName,BSTR bstrResourceTypeDll,__LONG32 dwLooksAlivePollInterval,__LONG32 dwIsAlivePollInterval,ISClusResType ** ppResourceType)virtual HRESULT WINAPI <msclus.h>
CreateItem(VARIANT varValue,VARIANT * pvarData)virtual HRESULT WINAPI <msclus.h>
CreateItemMoniker(LPCOLESTR lpszDelim,LPCOLESTR lpszItem,LPMONIKER * ppmk)WINOLEAPI <objbase.h>
CreateIterator(ISegmentListIterator ** ppIIter)virtual HRESULT WINAPI <mshtmlc.h>
CreateIUriBuilder(IUri * pIUri,DWORD dwFlags,DWORD_PTR dwReserved,IUriBuilder ** ppIUriBuilder)STDAPI <urlmon.h>
CreateJob(GUID guidJobID,IBackgroundCopyJob1 ** ppJob)virtual HRESULT WINAPI <qmgr.h>
CreateJob(LPCWSTR DisplayName,BG_JOB_TYPE Type,GUID * pJobId,IBackgroundCopyJob ** ppJob)virtual HRESULT WINAPI <qmgr.h>
CreateJobObject(LPSECURITY_ATTRIBUTES lpJobAttributes,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateJobSet(ULONG NumJob,PJOB_SET_ARRAY UserJobSet,ULONG Flags) WINBASEAPI WINBOOL WINAPI <winbase.h>
CreateLeaseInfo(DATE LeaseStartTime,DATE LeaseStopTime,DWORD dwNumAddresses,LPWSTR * ppAddresses,LPWSTR pRequestID,LPWSTR pServerAddress,IMcastLeaseInfo ** ppReleaseRequest)virtual HRESULT WINAPI <mdhcp.h>
CreateLeaseInfoFromVariant(DATE LeaseStartTime,DATE LeaseStopTime,VARIANT vAddresses,BSTR pRequestID,BSTR pServerAddress,IMcastLeaseInfo ** ppReleaseRequest)virtual HRESULT WINAPI <mdhcp.h>
CreateLogContainerScanContext(HANDLE hLog,ULONG cFromContainer,ULONG cContainers,CLFS_SCAN_MODE eScanMode,PCLFS_SCAN_CONTEXT pcxScan,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
CreateLogFile(LPCWSTR pszLogFileName,ACCESS_MASK fDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES psaLogFile,ULONG fCreateDisposition,ULONG fFlagsAndAttributes)HANDLE WINAPI <clfsw32.h>
CreateLogMarshallingArea(HANDLE hLog,CLFS_BLOCK_ALLOCATION pfnAllocBuffer,CLFS_BLOCK_DEALLOCATION pfnFreeBuffer,PVOID pvBlockAllocContext,ULONG cbMarshallingBuffer,ULONG cMaxWriteBuffers,ULONG cMaxReadBuffers,PVOID * ppvMarshal)WINBOOL WINAPI <clfsw32.h>
CreateMailbox(BSTR HomeMDBURL)virtual HRESULT WINAPI <cdoexm.h>
CreateMailslot(LPCSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateMailslotA(LPCSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateMailslotW(LPCWSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateManagedStub(IManagedObjectInfo * pInfo,WINBOOL fDist)virtual HRESULT WINAPI <comsvcs.h>
CreateMappedBitmap(HINSTANCE hInstance,INT_PTR idBitmap,UINT wFlags,LPCOLORMAP lpColorMap,int iNumMaps) WINCOMMCTRLAPI HBITMAP WINAPI <commctrl.h>
CreateMapping(VARIANT vCert,BSTR bstrNtAcct,BSTR bstrNtPwd,BSTR bstrName,LONG lEnabled)virtual HRESULT WINAPI <iiisext.h>
CreateMarkupContainer(IMarkupContainer ** ppMarkupContainer)virtual HRESULT WINAPI <mshtmlc.h>
CreateMarkupPointer(IMarkupPointer ** ppPointer)virtual HRESULT WINAPI <mshtmlc.h>
CreateMD5SSOHash(PWSTR pszChallengeInfo,PWSTR pwszRealm,PWSTR pwszTarget,PBYTE pbHexHash) INTERNETAPI_<wininet.h>
CreateMDIWindow(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateMDIWindowA(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateMDIWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType) WINBASEAPI HANDLE WINAPI <memoryapi.h>
CreateMenu(VOID) WINUSERAPI HMENU WINAPI <winuser.h>
CreateMetaFile(LPCSTR pszFile) WINGDIAPI HDC WINAPI <wingdi.h>
CreateMetaFileA(LPCSTR pszFile) WINGDIAPI HDC WINAPI <wingdi.h>
CreateMetaFileW(LPCWSTR pszFile) WINGDIAPI HDC WINAPI <wingdi.h>
CreateMHTMLBody(BSTR URL,CdoMHTMLFlags Flags,BSTR UserName,BSTR Password)virtual HRESULT WINAPI <cdosys.h>
CreateMigrationTable(IGPMMigrationTable ** ppMigrationTable)virtual HRESULT WINAPI <gpmgmt.h>
CreateMSPCall(MSP_HANDLE hCall,DWORD dwReserved,DWORD dwMediaType,IUnknown * pOuterUnknown,IUnknown ** ppStreamControl)virtual HRESULT WINAPI <tapi3.h>
CreateMSPCallHelper(CMSPAddress * pCMSPAddress,MSP_HANDLE htCall,DWORD dwReserved,DWORD dwMediaType,IUnknown * pOuterUnknown,IUnknown ** ppMSPCall,T ** ppCMSPCall)template<mspaddr.h>
CreateMultiProfileTransform(PHPROFILE,DWORD,PDWORD,DWORD,DWORD,DWORD) HTRANSFORM WINAPI <icm.h>
CreateMutex(LPSECURITY_ATTRIBUTES lpMutexAttributes,WINBOOL bInitialOwner,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes,WINBOOL bInitialOwner,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateMutexEx(LPSECURITY_ATTRIBUTES lpMutexAttributes,LPCSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateMutexExA(LPSECURITY_ATTRIBUTES lpMutexAttributes,LPCSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateMutexExW(LPSECURITY_ATTRIBUTES lpMutexAttributes,LPCWSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes,WINBOOL bInitialOwner,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateNamedPipe(LPCSTR lpName,DWORD dwOpenMode,DWORD dwPipeMode,DWORD nMaxInstances,DWORD nOutBufferSize,DWORD nInBufferSize,DWORD nDefaultTimeOut,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateNamedPipeA(LPCSTR lpName,DWORD dwOpenMode,DWORD dwPipeMode,DWORD nMaxInstances,DWORD nOutBufferSize,DWORD nInBufferSize,DWORD nDefaultTimeOut,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateNamedPipeW(LPCWSTR lpName,DWORD dwOpenMode,DWORD dwPipeMode,DWORD nMaxInstances,DWORD nOutBufferSize,DWORD nInBufferSize,DWORD nDefaultTimeOut,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINBASEAPI HANDLE WINAPI <namedpipeapi.h>
CreateNamedPropertyStore(INamedPropertyStore ** ppStore)HRESULT WINAPI <mfidl.h>
CreateNewSite(BSTR bstrServerComment,VARIANT * pvServerBindings,BSTR bstrRootVDirPath,VARIANT vServerID,VARIANT * pvActualID)virtual HRESULT WINAPI <iiisext.h>
CreateNPPInterface(HBLOB hBlob,REFIID iid,void ** ppvObject) DWORD __cdecl <netmon.h>
CreateNtmsMedia(HANDLE hSession,LPNTMS_OBJECTINFORMATIONA lpMedia,LPNTMS_OBJECTINFORMATIONA lpList,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
CreateNtmsMediaA(HANDLE hSession,LPNTMS_OBJECTINFORMATIONA lpMedia,LPNTMS_OBJECTINFORMATIONA lpList,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
CreateNtmsMediaPool(HANDLE hSession,LPCSTR lpPoolName,LPNTMS_GUID lpMediaType,DWORD dwAction,LPSECURITY_ATTRIBUTES lpSecurityAttributes,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
CreateNtmsMediaPool(HANDLE hSession,LPCTSTR lpPoolName,LPNTMS_GUID lpMediaType,DWORD dwAction,LPSECURITY_ATTRIBUTES lpSecurityAttributes,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
CreateNtmsMediaPoolA(HANDLE hSession,LPCSTR lpPoolName,LPNTMS_GUID lpMediaType,DWORD dwAction,LPSECURITY_ATTRIBUTES lpSecurityAttributes,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
CreateNtmsMediaPoolW(HANDLE hSession,LPCWSTR lpPoolName,LPNTMS_GUID lpMediaType,DWORD dwAction,LPSECURITY_ATTRIBUTES lpSecurityAttributes,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
CreateNtmsMediaW(HANDLE hSession,LPNTMS_OBJECTINFORMATIONW lpMedia,LPNTMS_OBJECTINFORMATIONW lpList,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
CreateObject(BSTR bstrProgID,IDispatch ** ppDispObject)virtual HRESULT WINAPI <asptlb.h>
CreateObjectHeap(DWORD ObjectSize,OBJECTPROC ObjectProc) extern HOBJECTHEAP WINAPI <nmsupp.h>
CreateObjrefMoniker(LPUNKNOWN punk,LPMONIKER * ppmk)WINOLEAPI <objbase.h>
CreateOleAdviseHolder(LPOLEADVISEHOLDER * ppOAHolder)WINOLEAPI <ole2.h>
CreateOperation(BSTR bstrOperationName,VARIANT varReserved,IAzOperation ** ppOperation)virtual HRESULT WINAPI <azroles.h>
CreateOutputPin(AM_MEDIA_TYPE * pMediaType,LPWSTR pszPinName,IPin ** ppIPin)virtual HRESULT WINAPI <strmif.h>
CreatePalette(CONST LOGPALETTE * plpal) WINGDIAPI HPALETTE WINAPI <wingdi.h>
CreatePassword(LPSTR password) extern HPASSWORD WINAPI <nmsupp.h>
CreatePatchFile(LPCSTR OldFileName,LPCSTR NewFileName,LPCSTR PatchFileName,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileA(LPCSTR OldFileName,LPCSTR NewFileName,LPCSTR PatchFileName,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileByHandles(HANDLE OldFileHandle,HANDLE NewFileHandle,HANDLE PatchFileHandle,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileByHandlesEx(ULONG OldFileCount,PPATCH_OLD_FILE_INFO_H OldFileInfoArray,HANDLE NewFileHandle,HANDLE PatchFileHandle,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileEx(ULONG OldFileCount,PPATCH_OLD_FILE_INFO_A OldFileInfoArray,LPCSTR NewFileName,LPCSTR PatchFileName,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileExA(ULONG OldFileCount,PPATCH_OLD_FILE_INFO_A OldFileInfoArray,LPCSTR NewFileName,LPCSTR PatchFileName,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileExW(ULONG OldFileCount,PPATCH_OLD_FILE_INFO_W OldFileInfoArray,LPCWSTR NewFileName,LPCWSTR PatchFileName,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData,PPATCH_PROGRESS_CALLBACK ProgressCallback,PVOID CallbackContext) WINBOOL PATCHAPI <patchapi.h>
CreatePatchFileW(LPCWSTR OldFileName,LPCWSTR NewFileName,LPCWSTR PatchFileName,ULONG OptionFlags,PPATCH_OPTION_DATA OptionData) WINBOOL PATCHAPI <patchapi.h>
CreatePatternBrush(HBITMAP hbm) WINGDIAPI HBRUSH WINAPI <wingdi.h>
CreatePen(int iStyle,int cWidth,COLORREF color) WINGDIAPI HPEN WINAPI <wingdi.h>
CreatePenData(LPPENINFO,int,UINT,UINT) HPENDATA WINAPI <penwin.h>
CreatePenDataEx(LPPENINFO,UINT,UINT,UINT) HPENDATA WINAPI <penwin.h>
CreatePenDataHRC(HRC) HPENDATA WINAPI <penwin.h>
CreatePenDataRegion(HPENDATA,UINT) HRGN WINAPI <penwin.h>
CreatePenIndirect(CONST LOGPEN * plpen) WINGDIAPI HPEN WINAPI <wingdi.h>
CreatePermission(BSTR bstrTrustee,GPMPermissionType perm,VARIANT_BOOL bInheritable,IGPMPermission ** ppPerm)virtual HRESULT WINAPI <gpmgmt.h>
CreatePersistentTcpPortReservation(USHORT StartPort,USHORT NumberOfPorts,PULONG64 Token) ULONG WINAPI <iphlpapi.h>
CreatePersistentUdpPortReservation(USHORT StartPort,USHORT NumberOfPorts,PULONG64 Token) ULONG WINAPI <iphlpapi.h>
CreatePipe(PHANDLE hReadPipe,PHANDLE hWritePipe,LPSECURITY_ATTRIBUTES lpPipeAttributes,DWORD nSize) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
CreatePKCS7RequestFromRequest(PCRYPT_DATA_BLOB pRequest,PCCERT_CONTEXT pSigningCertContext,PCRYPT_DATA_BLOB pPkcs7Blob)virtual HRESULT WINAPI <xenroll.h>
CreatePointerMoniker(LPUNKNOWN punk,LPMONIKER * ppmk)WINOLEAPI <objbase.h>
CreatePolygonRgn(CONST POINT * pptl,int cPoint,int iMode) WINGDIAPI HRGN WINAPI <wingdi.h>
CreatePolyPolygonRgn(CONST POINT * pptl,CONST INT * pc,int cPoly,int iMode) WINGDIAPI HRGN WINAPI <wingdi.h>
CreatePopupMenu(VOID) WINUSERAPI HMENU WINAPI <winuser.h>
CreatePrintAsyncNotifyChannel(LPCWSTR pName,PrintAsyncNotificationType * pSchema,PrintAsyncNotifyUserFilter filter,PrintAsyncNotifyConversationStyle directionality,IPrintAsyncNotifyCallback * pCallback,IPrintAsyncNotifyChannel ** ppChannel)HRESULT <prnasnot.h>
CreatePrinterIC(HANDLE hPrinter,LPDEVMODEW pDevMode)HANDLE WINAPI <winsplp.h>
CreatePrivateNamespace(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,LPVOID lpBoundaryDescriptor,LPCSTR lpAliasPrefix) WINBASEAPI HANDLE WINAPI <winbase.h>
CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,LPVOID lpBoundaryDescriptor,LPCSTR lpAliasPrefix) WINBASEAPI HANDLE WINAPI <winbase.h>
CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,LPVOID lpBoundaryDescriptor,LPCWSTR lpAliasPrefix) WINBASEAPI HANDLE WINAPI <namespaceapi.h>
CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR * NewDescriptor,WINBOOL IsDirectoryObject,HANDLE Token,PGENERIC_MAPPING GenericMapping) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR * NewDescriptor,GUID * ObjectType,WINBOOL IsContainerObject,ULONG AutoInheritFlags,HANDLE Token,PGENERIC_MAPPING GenericMapping) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR * NewDescriptor,GUID ** ObjectTypes,ULONG GuidCount,WINBOOL IsContainerObject,ULONG AutoInheritFlags,HANDLE Token,PGENERIC_MAPPING GenericMapping) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
CreateProcess(LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
CreateProcessA(LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
CreateProcessAsUser(HANDLE hToken,LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINADVAPI WINBOOL WINAPI <winbase.h>
CreateProcessAsUserA(HANDLE hToken,LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINADVAPI WINBOOL WINAPI <winbase.h>
CreateProcessAsUserW(HANDLE hToken,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINADVAPI WINBOOL WINAPI <processthreadsapi.h>
CreateProcessW(LPCWSTR lpApplicationName,LPWSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
CreateProcessWithLogonW(LPCWSTR lpUsername,LPCWSTR lpDomain,LPCWSTR lpPassword,DWORD dwLogonFlags,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINADVAPI WINBOOL WINAPI <winbase.h>
CreateProcessWithTokenW(HANDLE hToken,DWORD dwLogonFlags,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation) WINADVAPI WINBOOL WINAPI <winbase.h>
CreateProfile(BSTR bstrProfile,IDispatch ** ppProfile)virtual HRESULT WINAPI <userenv.h>
CreateProfile(BSTR bstrProfileXML,IRTCProfile ** ppProfile)virtual HRESULT WINAPI <userenv.h>
CreateProfile(BSTR bstrXMLWirelessConfigProfile,BSTR bstrXMLConnectionConfigProfile,GUID * pAdapterInstanceGuid,ULONG * pulStatus)virtual HRESULT WINAPI <userenv.h>
CreateProfile(LPCWSTR pszUserSid,LPCWSTR pszUserName,LPWSTR pszProfilePath,DWORD cchProfilePath) USERENVAPI HRESULT WINAPI <userenv.h>
CreateProfileFromLogColorSpace(LPLOGCOLORSPACEA,PBYTE *) WINBOOL WINAPI <icm.h>
CreateProfileFromLogColorSpaceA(LPLOGCOLORSPACEA,PBYTE *) WINBOOL WINAPI <icm.h>
CreateProfileFromLogColorSpaceW(LPLOGCOLORSPACEW,PBYTE *) WINBOOL WINAPI <icm.h>
CreateProperties(PPPROPERTIES Properties)virtual HRESULT WINAPI <mmcobj.h>
CreateProperty(BSTR Name,VARIANT_BOOL * fExists,ISharedProperty ** ppProp)virtual HRESULT WINAPI <comsvcs.h>
CreatePropertyByPosition(int Index,VARIANT_BOOL * fExists,ISharedProperty ** ppProp)virtual HRESULT WINAPI <comsvcs.h>
CreatePropertyDatabase(HPROTOCOL hProtocol,DWORD nProperties) DWORD WINAPI <netmon.h>
CreatePropertyGroup(BSTR Name,LONG * dwIsoMode,LONG * dwRelMode,VARIANT_BOOL * fExists,ISharedPropertyGroup ** ppGroup)virtual HRESULT WINAPI <comsvcs.h>
CreatePropertyPages(LPPROPERTYSHEETCALLBACK lpProvider,LONG_PTR handle,LPDATAOBJECT lpIDataObject)virtual HRESULT WINAPI <mmc.h>
CreatePropertySheet(LPCWSTR title,boolean type,MMC_COOKIE cookie,LPDATAOBJECT pIDataObjectm,DWORD dwOptions)virtual HRESULT WINAPI <mmc.h>
CreatePropertySheetPage(LPCPROPSHEETPAGEA constPropSheetPagePointer) WINCOMMCTRLAPI HPROPSHEETPAGE WINAPI <prsht.h>
CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer) WINCOMMCTRLAPI HPROPSHEETPAGE WINAPI <prsht.h>
CreatePropertySheetPages(IUnknown * piData,IWCPropertySheetCallback * piCallback)virtual HRESULT WINAPI <cluadmex.h>
CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer) WINCOMMCTRLAPI HPROPSHEETPAGE WINAPI <prsht.h>
CreatePropertyStore(IPropertyStore ** ppStore)HRESULT WINAPI <mfidl.h>
CreateProtocol(LPSTR ProtocolName,LPENTRYPOINTS lpEntryPoints,DWORD cbEntryPoints) HPROTOCOL WINAPI <netmon.h>
CreateProxyArpEntry(DWORD dwAddress,DWORD dwMask,DWORD dwIfIndex) DWORD WINAPI <iphlpapi.h>
CreateQuery(IRTCUserSearchQuery ** ppQuery)virtual HRESULT WINAPI <rtccore.h>
CreateQueryResults(void)virtual HRESULT WINAPI <gpmgmt.h>
CreateRectRgn(int x1,int y1,int x2,int y2) WINGDIAPI HRGN WINAPI <wingdi.h>
CreateRectRgnIndirect(CONST RECT * lprect) WINGDIAPI HRGN WINAPI <wingdi.h>
CreateRemoteThread(HANDLE hProcess,LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
CreateRemoteThreadEx(HANDLE hProcess,LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,LPDWORD lpThreadId) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
CreateRequest(ICalendarMessage ** Request)virtual HRESULT WINAPI <cdoex.h>
CreateResource(const RESTYPID ResTypId,RESID * pResId,TIMEINSECS * pSecsFreeBeforeDestroy)virtual HRESULT WINAPI <comsvcs.h>
CreateResourceManager(LPSECURITY_ATTRIBUTES lpResourceManagerAttributes,LPGUID ResourceManagerID,DWORD CreateOptions,HANDLE TmHandle,LPWSTR Description) HANDLE WINAPI <ktmw32.h>
CreateRestrictedToken(HANDLE ExistingTokenHandle,DWORD Flags,DWORD DisableSidCount,PSID_AND_ATTRIBUTES SidsToDisable,DWORD DeletePrivilegeCount,PLUID_AND_ATTRIBUTES PrivilegesToDelete,DWORD RestrictedSidCount,PSID_AND_ATTRIBUTES SidsToRestrict,PHANDLE NewTokenHandle) WINADVAPI WINBOOL APIENTRY <securitybaseapi.h>
CreateRole(BSTR bstrRoleName,VARIANT varReserved,IAzRole ** ppRole)virtual HRESULT WINAPI <azroles.h>
CreateRoundRectRgn(int x1,int y1,int x2,int y2,int w,int h) WINGDIAPI HRGN WINAPI <wingdi.h>
CreateRow(IUnknown * pUnkOuter,LPCOLESTR pwszURL,DBBINDURLFLAG dwBindURLFlags,REFGUID rguid,REFIID riid,IAuthenticate * pAuthenticate,DBIMPLICITSESSION * pImplSession,DBBINDURLSTATUS * pdwBindStatus,LPOLESTR * ppwszNewURL,IUnknown ** ppUnk)virtual HRESULT WINAPI <oledb.h>
CreateSafeArray(UINT nAllocSize,LPSAFEARRAY * ppArray)virtual HRESULT WINAPI <scardssp.h>
CreateScalableFontResource(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath) WINGDIAPI WINBOOL WINAPI <wingdi.h>
CreateScalableFontResourceA(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath) WINGDIAPI WINBOOL WINAPI <wingdi.h>
CreateScalableFontResourceW(DWORD fdwHidden,LPCWSTR lpszFont,LPCWSTR lpszFile,LPCWSTR lpszPath) WINGDIAPI WINBOOL WINAPI <wingdi.h>
CreateScope(BSTR bstrScopeName,VARIANT varReserved,IAzScope ** ppScope)virtual HRESULT WINAPI <azroles.h>
CreateSearchCriteria(IGPMSearchCriteria ** ppIGPMSearchCriteria)virtual HRESULT WINAPI <gpmgmt.h>
CreateSecurityPage(LPSECURITYINFO psi) HPROPSHEETPAGE ACLUIAPI <aclui.h>
CreateSemaphore(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateSemaphoreEx(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateSemaphoreExA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateSemaphoreExW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCWSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateService(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
CreateServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPCWSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
CreateSession(ITACDGroup * pACDGroup,ITAddress * pAddress,ITAgentSession ** ppAgentSession)virtual HRESULT WINAPI <tapi3cc.h>
CreateSession(IUnknown * pUnkOuter,REFIID riid,IUnknown ** ppDBSession)virtual HRESULT WINAPI <tapi3cc.h>
CreateSession(RTC_SESSION_TYPE enType,BSTR bstrLocalPhoneURI,IRTCProfile * pProfile,__LONG32 lFlags,IRTCSession ** ppSession)virtual HRESULT WINAPI <tapi3cc.h>
CreateSessionWithDescription(BSTR bstrContentType,BSTR bstrSessionDescription,IRTCProfile * pProfile,__LONG32 lFlags,IRTCSession2 ** ppSession2)virtual HRESULT WINAPI <rtccore.h>
CreateSessionWithPIN(ITACDGroup * pACDGroup,ITAddress * pAddress,BSTR pPIN,ITAgentSession ** ppAgentSession)virtual HRESULT WINAPI <tapi3cc.h>
CreateSocketPort(USHORT Socket)HANDLE WINAPI <adptif.h>
CreateSolidBrush(COLORREF color) WINGDIAPI HBRUSH WINAPI <wingdi.h>
CreateSortedAddressPairs(const PSOCKADDR_IN6 SourceAddressList,ULONG SourceAddressCount,const PSOCKADDR_IN6 DestinationAddressList,ULONG DestinationAddressCount,ULONG AddressSortOptions,PSOCKADDR_IN6_PAIR * SortedAddressPairList,ULONG * SortedAddressPairCount) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
CreateSourceImage(const BSTR Path,VARIANT_BOOL fLongFileNames,IMsmStrings ** pFilePaths)virtual HRESULT WINAPI <mergemod.h>
CreateStatusWindow(LONG style,LPCSTR lpszText,HWND hwndParent,UINT wID) WINCOMMCTRLAPI HWND WINAPI <commctrl.h>
CreateStatusWindowA(LONG style,LPCSTR lpszText,HWND hwndParent,UINT wID) WINCOMMCTRLAPI HWND WINAPI <commctrl.h>
CreateStatusWindowW(LONG style,LPCWSTR lpszText,HWND hwndParent,UINT wID) WINCOMMCTRLAPI HWND WINAPI <commctrl.h>
CreateStdAccessibleObject(HWND hwnd,LONG idObject,REFIID riid,void ** ppvObject) STDAPI <oleacc.h>
CreateStdAccessibleProxy(HWND hwnd,LPCSTR pClassName,LONG idObject,REFIID riid,void ** ppvObject) STDAPI <oleacc.h>
CreateStdAccessibleProxyA(HWND hwnd,LPCSTR pClassName,LONG idObject,REFIID riid,void ** ppvObject) STDAPI <oleacc.h>
CreateStdAccessibleProxyW(HWND hwnd,LPCWSTR pClassName,LONG idObject,REFIID riid,void ** ppvObject) STDAPI <oleacc.h>
CreateStdDispatch(IUnknown * punkOuter,void * pvThis,ITypeInfo * ptinfo,IUnknown ** ppunkStdDisp)WINOLEAUTAPI <oleauto.h>
CreateStdProgressIndicator(HWND hwndParent,LPCOLESTR pszTitle,IBindStatusCallback * pIbscCaller,IBindStatusCallback ** ppIbsc)WINOLEAPI <objbase.h>
CreateStream(__LONG32 lMediaType,TERMINAL_DIRECTION td,ITStream ** ppStream)virtual HRESULT WINAPI <tapi3if.h>
CreateStreamObject(DWORD dwMediaType,TERMINAL_DIRECTION Direction,IMediaEvent * pGraph,ITStream ** ppStream) virtual HRESULT <mspcall.h>
CreateStreamOnHGlobal(HGLOBAL hGlobal,WINBOOL fDeleteOnRelease,LPSTREAM * ppstm)WINOLEAPI <combaseapi.h>
CreateSubscription(HWND hwnd,LPCWSTR pwszURL,LPCWSTR pwszFriendlyName,DWORD dwFlags,SUBSCRIPTIONTYPE subsType,SUBSCRIPTIONINFO * pInfo)virtual HRESULT WINAPI <subsmgr.h>
CreateSubStream(ITSubStream ** ppSubStream)virtual HRESULT WINAPI <tapi3if.h>
CreateSubtype(PST_KEY Key,const GUID * pType,const GUID * pSubtype,PPST_TYPEINFO pInfo,PPST_ACCESSRULESET pRules,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
CreateSymbolicLink(LPCSTR lpSymlinkFileName,LPCSTR lpTargetFileName,DWORD dwFlags) WINBASEAPI BOOLEAN APIENTRY <winbase.h>
CreateSymbolicLinkA(LPCSTR lpSymlinkFileName,LPCSTR lpTargetFileName,DWORD dwFlags) WINBASEAPI BOOLEAN APIENTRY <winbase.h>
CreateSymbolicLinkTransacted(LPCSTR lpSymlinkFileName,LPCSTR lpTargetFileName,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI BOOLEAN APIENTRY <winbase.h>
CreateSymbolicLinkTransactedA(LPCSTR lpSymlinkFileName,LPCSTR lpTargetFileName,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI BOOLEAN APIENTRY <winbase.h>
CreateSymbolicLinkTransactedW(LPCWSTR lpSymlinkFileName,LPCWSTR lpTargetFileName,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI BOOLEAN APIENTRY <winbase.h>
CreateSymbolicLinkW(LPCWSTR lpSymlinkFileName,LPCWSTR lpTargetFileName,DWORD dwFlags) WINBASEAPI BOOLEAN APIENTRY <winbase.h>
CreateTable(IUnknown * pUnkOuter,DBID * pTableID,DBORDINAL cColumnDescs,const DBCOLUMNDESC rgColumnDescs[],REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],DBID ** ppTableID,IUnknown ** ppRowset)virtual HRESULT WINAPI <wabutil.h>
CreateTable(LPCIID lpInterface,ALLOCATEBUFFER * lpAllocateBuffer,ALLOCATEMORE * lpAllocateMore,FREEBUFFER * lpFreeBuffer,LPVOID lpvReserved,ULONG ulTableType,ULONG ulPropTagIndexColumn,LPSPropTagArray lpSPropTagArrayColumns,LPTABLEDATA * lppTableData) STDAPI_<wabutil.h>
CreateTableWithConstraints(IUnknown * pUnkOuter,DBID * pTableID,DBORDINAL cColumnDescs,DBCOLUMNDESC rgColumnDescs[],ULONG cConstraintDescs,DBCONSTRAINTDESC rgConstraintDescs[],REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],DBID ** ppTableID,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
CreateTapePartition(HANDLE hDevice,DWORD dwPartitionMethod,DWORD dwCount,DWORD dwSize) WINBASEAPI DWORD WINAPI <winbase.h>
CreateTask(BSTR bstrTaskName,VARIANT varReserved,IAzTask ** ppTask)virtual HRESULT WINAPI <azroles.h>
CreateTerminal(BSTR pTerminalClass,__LONG32 lMediaType,TERMINAL_DIRECTION Direction,ITTerminal ** ppTerminal)virtual HRESULT WINAPI <tapi3if.h>
CreateTerminal(CComPtr<IMoniker> pMoniker,MSP_HANDLE htAddress,ITTerminal ** ppTerm) static HRESULT <tapi3if.h>
CreateTextServices(IUnknown * punkOuter,ITextHost * pITextHost,IUnknown ** ppUnk)STDAPI <textserv.h>
CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
CreateThreadpool(PVOID reserved) WINBASEAPI PTP_POOL WINAPI <threadpoolapiset.h>
CreateThreadpoolCleanupGroup(VOID) WINBASEAPI PTP_CLEANUP_GROUP WINAPI <threadpoolapiset.h>
CreateThreadpoolIo(HANDLE fl,PTP_WIN32_IO_CALLBACK pfnio,PVOID pv,PTP_CALLBACK_ENVIRON pcbe) WINBASEAPI PTP_IO WINAPI <threadpoolapiset.h>
CreateThreadpoolTimer(PTP_TIMER_CALLBACK pfnti,PVOID pv,PTP_CALLBACK_ENVIRON pcbe) WINBASEAPI PTP_TIMER WINAPI <threadpoolapiset.h>
CreateThreadpoolWait(PTP_WAIT_CALLBACK pfnwa,PVOID pv,PTP_CALLBACK_ENVIRON pcbe) WINBASEAPI PTP_WAIT WINAPI <threadpoolapiset.h>
CreateThreadpoolWork(PTP_WORK_CALLBACK pfnwk,PVOID pv,PTP_CALLBACK_ENVIRON pcbe) WINBASEAPI PTP_WORK WINAPI <threadpoolapiset.h>
CreateTimer(ITimer * pReferenceTimer,ITimer ** ppNewTimer)virtual HRESULT WINAPI <ocmm.h>
CreateTimerQueue(VOID) WINBASEAPI HANDLE WINAPI <threadpoollegacyapiset.h>
CreateTimerQueueTimer(PHANDLE phNewTimer,HANDLE TimerQueue,WAITORTIMERCALLBACK Callback,PVOID Parameter,DWORD DueTime,DWORD Period,ULONG Flags) WINBASEAPI WINBOOL WINAPI <threadpoollegacyapiset.h>
CreateToolbarEx(HWND hwnd,DWORD ws,UINT wID,int nBitmaps,HINSTANCE hBMInst,UINT_PTR wBMID,LPCTBBUTTON lpButtons,int iNumButtons,int dxButton,int dyButton,int dxBitmap,int dyBitmap,UINT uStructSize) WINCOMMCTRLAPI HWND WINAPI <commctrl.h>
CreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID) HANDLE WINAPI <tlhelp32.h>
CreateTraceInstanceId(HANDLE RegHandle,PEVENT_INSTANCE_INFO InstInfo) EXTERN_C ULONG WMIAPI <evntrace.h>
CreateTrackTerminal(__LONG32 MediaType,TERMINAL_DIRECTION TerminalDirection,ITTerminal ** ppTerminal)virtual HRESULT WINAPI <tapi3if.h>
CreateTransaction(LPSECURITY_ATTRIBUTES lpTransactionAttributes,LPGUID UOW,DWORD CreateOptions,DWORD IsolationLevel,DWORD IsolationFlags,DWORD Timeout,LPWSTR Description) HANDLE WINAPI <ktmw32.h>
CreateTransactionManager(LPSECURITY_ATTRIBUTES lpTransactionAttributes,LPWSTR LogFileName,ULONG CreateOptions,ULONG CommitStrength) HANDLE WINAPI <ktmw32.h>
CreateTrigger(WORD * piNewTrigger,ITaskTrigger ** ppTrigger)virtual HRESULT WINAPI <mstask.h>
CreateTrustee(BSTR bstrTrustee,IGPMTrustee ** ppIGPMTrustee)virtual HRESULT WINAPI <oledb.h>
CreateTrustee(TRUSTEE_W * pTrustee,ULONG cPropertySets,DBPROPSET rgPropertySets[])virtual HRESULT WINAPI <oledb.h>
CreateType(PST_KEY Key,const GUID * pType,PPST_TYPEINFO pInfo,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
CreateTypeLib(SYSKIND syskind,const OLECHAR * szFile,ICreateTypeLib ** ppctlib)WINOLEAUTAPI <oleauto.h>
CreateTypeLib2(SYSKIND syskind,LPCOLESTR szFile,ICreateTypeLib2 ** ppctlib)WINOLEAUTAPI <oleauto.h>
CreateUnicastIpAddressEntry(CONST MIB_UNICASTIPADDRESS_ROW * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
CreateUpDownControl(DWORD dwStyle,int x,int y,int cx,int cy,HWND hParent,int nID,HINSTANCE hInst,HWND hBuddy,int nUpper,int nLower,int nPos) WINCOMMCTRLAPI HWND WINAPI <commctrl.h>
CreateUri(LPCWSTR pwzURI,DWORD dwFlags,DWORD_PTR dwReserved,IUri ** ppURI)STDAPI <urlmon.h>
CreateUriFromMultiByteString(LPCSTR pszANSIInputUri,DWORD dwEncodingFlags,DWORD dwCodePage,DWORD dwCreateFlags,DWORD_PTR dwReserved,IUri ** ppUri)STDAPI <urlmon.h>
CreateUriWithFragment(LPCWSTR pwzURI,LPCWSTR pwzFragment,DWORD dwFlags,DWORD_PTR dwReserved,IUri ** ppURI)STDAPI <urlmon.h>
CreateURLBinding(LPCWSTR lpszUrl,IBindCtx * pbc,IBinding ** ppBdg)STDAPI <urlmon.h>
CreateUrlCacheEntryW(LPCWSTR lpszUrlName,DWORD dwExpectedFileSize,LPCWSTR lpszFileExtension,LPWSTR lpszFileName,DWORD dwReserved) BOOLAPI <wininet.h>
CreateUrlCacheGroup(DWORD dwFlags,LPVOID lpReserved) INTERNETAPI_<wininet.h>
CreateURLMoniker(LPMONIKER pMkCtx,LPCWSTR szURL,LPMONIKER * ppmk)STDAPI <urlmon.h>
CreateURLMonikerEx(LPMONIKER pMkCtx,LPCWSTR szURL,LPMONIKER * ppmk,DWORD dwFlags)STDAPI <urlmon.h>
CreateURLMonikerEx2(LPMONIKER pMkCtx,IUri * pUri,LPMONIKER * ppmk,DWORD dwFlags)STDAPI <urlmon.h>
CreateVideoByDevNum(UINT uiDeviceNumber,HWND hwndParent,WINBOOL bStretchToFitParent,WINBOOL bAutoBeginPlayback)virtual HRESULT WINAPI <wiavideo.h>
CreateVideoByName(BSTR bstrFriendlyName,HWND hwndParent,WINBOOL bStretchToFitParent,WINBOOL bAutoBeginPlayback)virtual HRESULT WINAPI <wiavideo.h>
CreateVideoByWiaDevID(BSTR bstrWiaDeviceID,HWND hwndParent,WINBOOL bStretchToFitParent,WINBOOL bAutoBeginPlayback)virtual HRESULT WINAPI <wiavideo.h>
CreateView(IUnknown * pUnkOuter,REFIID riid,IUnknown ** ppView)virtual HRESULT WINAPI <oledb.h>
CreateViewWindow(IShellView * psvNew,IShellView * psvOld,LPRECT prcView,HWND * phwnd)virtual HRESULT WINAPI <shdeprecated.h>
CreateVirtualDisk(PVIRTUAL_STORAGE_TYPE VirtualStorageType,PCWSTR Path,VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask,PSECURITY_DESCRIPTOR SecurityDescriptor,CREATE_VIRTUAL_DISK_FLAG Flags,ULONG ProviderSpecificFlags,PCREATE_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped,PHANDLE Handle)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
CreateVssBackupComponents(IVssBackupComponents ** ppBackup)HRESULT WINAPI <vsbackup.h>
CreateVssBackupComponentsInternal(IVssBackupComponents ** ppBackup)HRESULT WINAPI <vsbackup.h>
CreateVssExamineWriterMetadata(BSTR bstrXML,IVssExamineWriterMetadata ** ppMetadata)HRESULT WINAPI <vsbackup.h>
CreateVssExamineWriterMetadataInternal(BSTR bstrXML,IVssExamineWriterMetadata ** ppMetadata)HRESULT WINAPI <vsbackup.h>
CreateVssExpressWriter(IVssExpressWriter ** ppWriter)HRESULT WINAPI <vswriter.h>
CreateVssExpressWriterInternal(IVssExpressWriter ** ppWriter)HRESULT WINAPI <vswriter.h>
CreateWaitableTimer(LPSECURITY_ATTRIBUTES lpTimerAttributes,WINBOOL bManualReset,LPCSTR lpTimerName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes,WINBOOL bManualReset,LPCSTR lpTimerName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateWaitableTimerEx(LPSECURITY_ATTRIBUTES lpTimerAttributes,LPCSTR lpTimerName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES lpTimerAttributes,LPCSTR lpTimerName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateWaitableTimerExW(LPSECURITY_ATTRIBUTES lpTimerAttributes,LPCWSTR lpTimerName,DWORD dwFlags,DWORD dwDesiredAccess) WINBASEAPI HANDLE WINAPI <synchapi.h>
CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes,WINBOOL bManualReset,LPCWSTR lpTimerName) WINBASEAPI HANDLE WINAPI <winbase.h>
CreateWaitEvent(HANDLE pEvent OPT1_1,LPSECURITY_ATTRIBUTES lpEventAttributes OPT1_2,WINBOOL bManualReset,WINBOOL bInitialState,LPCTSTR lpName OPT1_2,WINBOOL bHighPriority,WORKERFUNCTION pFunction OPT2_1,PVOID pContext OPT2_1,DWORD dwContextSz OPT2_1,WINBOOL bRunInServerContext OPT2_1) PWT_EVENT_ENTRY WINAPI <rtutils.h>
CreateWaitEventBinding(PWT_EVENT_ENTRY pee,WORKERFUNCTION pFunction,PVOID pContext,DWORD dwContextSz,WINBOOL bRunInServerContext) PWT_EVENT_BINDING WINAPI <rtutils.h>
CreateWaitTimer(WORKERFUNCTION pFunction,PVOID pContext,DWORD dwContextSz,WINBOOL bRunInServerContext) PWT_TIMER_ENTRY WINAPI <rtutils.h>
CreateWatchRegion(DBWATCHMODE dwWatchMode,HWATCHREGION * phRegion)virtual HRESULT WINAPI <oledbdep.h>
CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType,PSID DomainSid,PSID pSid,DWORD * cbSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
CreateWindowA(lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam)<winuser.h>
CreateWindowEx(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateWindowExA(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateWindowExW(DWORD dwExStyle,LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam) WINUSERAPI HWND WINAPI <winuser.h>
CreateWindowStation(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa) WINUSERAPI HWINSTA WINAPI <winuser.h>
CreateWindowStationA(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa) WINUSERAPI HWINSTA WINAPI <winuser.h>
CreateWindowStationW(LPCWSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa) WINUSERAPI HWINSTA WINAPI <winuser.h>
CreateWindowW(lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam)<winuser.h>
CreateWithImplementation(IElementNamespace * pNamespace,BSTR bstrImplementation)virtual HRESULT WINAPI <mshtmlc.h>
CreateWizard97Pages(IUnknown * piData,IWCWizard97Callback * piCallback)virtual HRESULT WINAPI <cluadmex.h>
CreateWizardPages(IUnknown * piData,IWCWizardCallback * piCallback)virtual HRESULT WINAPI <cluadmex.h>
CreateXmlReader(REFIID riid,void ** ppvObject,IMalloc * pMalloc)STDAPI <xmllite.h>
CreateXmlReaderInputWithEncodingName(IUnknown * stream,IMalloc * pMalloc,LPCWSTR encoding,WINBOOL hint,LPCWSTR base_uri,IXmlReaderInput ** ppInput)STDAPI <xmllite.h>
CreateXmlWriter(REFIID riid,void ** ppvObject,IMalloc * pMalloc)STDAPI <xmllite.h>
CreateXmlWriterOutputWithEncodingCodePage(IUnknown * stream,IMalloc * pMalloc,UINT codepage,IXmlWriterOutput ** output)STDAPI <xmllite.h>
CreateXmlWriterOutputWithEncodingName(IUnknown * stream,IMalloc * pMalloc,LPCWSTR encoding,IXmlWriterOutput ** output)STDAPI <xmllite.h>
CredDelete(LPCSTR TargetName,DWORD Type,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredDeleteA(LPCSTR TargetName,DWORD Type,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredDeleteW(LPCWSTR TargetName,DWORD Type,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredEnumerate(LPCSTR Filter,DWORD Flags,DWORD * Count,PCREDENTIALA ** Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredEnumerateA(LPCSTR Filter,DWORD Flags,DWORD * Count,PCREDENTIALA ** Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredEnumerateW(LPCWSTR Filter,DWORD Flags,DWORD * Count,PCREDENTIALW ** Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredFindBestCredential(LPCSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIALA * Credential)WINADVAPI WINBOOL WINAPI <wincred.h>
CredFindBestCredentialA(LPCSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIALA * Credential)WINADVAPI WINBOOL WINAPI <wincred.h>
CredFindBestCredentialW(LPCWSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIALW * Credential)WINADVAPI WINBOOL WINAPI <wincred.h>
CredFree(PVOID Buffer) WINADVAPI VOID WINAPI <wincred.h>
CredFreeCredentialsFn(ULONG Count,PENCRYPTED_CREDENTIALW * Credentials) typedef VOID<ntsecpkg.h>
CredGetSessionTypes(DWORD MaximumPersistCount,LPDWORD MaximumPersist) WINADVAPI WINBOOL WINAPI <wincred.h>
CredGetTargetInfo(LPCSTR TargetName,DWORD Flags,PCREDENTIAL_TARGET_INFORMATIONA * TargetInfo) WINADVAPI WINBOOL WINAPI <wincred.h>
CredGetTargetInfoA(LPCSTR TargetName,DWORD Flags,PCREDENTIAL_TARGET_INFORMATIONA * TargetInfo) WINADVAPI WINBOOL WINAPI <wincred.h>
CredGetTargetInfoW(LPCWSTR TargetName,DWORD Flags,PCREDENTIAL_TARGET_INFORMATIONW * TargetInfo) WINADVAPI WINBOOL WINAPI <wincred.h>
CredIsMarshaledCredential(LPCSTR MarshaledCredential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredIsMarshaledCredentialA(LPCSTR MarshaledCredential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredIsMarshaledCredentialW(LPCWSTR MarshaledCredential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredIsProtected(LPSTR pszProtectedCredentials,CRED_PROTECTION_TYPE * pProtectionType)WINADVAPI WINBOOL WINAPI <wincred.h>
CredIsProtectedA(LPSTR pszProtectedCredentials,CRED_PROTECTION_TYPE * pProtectionType)WINADVAPI WINBOOL WINAPI <wincred.h>
CredIsProtectedW(LPWSTR pszProtectedCredentials,CRED_PROTECTION_TYPE * pProtectionType)WINADVAPI WINBOOL WINAPI <wincred.h>
CredMarshalCredential(CRED_MARSHAL_TYPE CredType,PVOID Credential,LPSTR * MarshaledCredential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredMarshalCredentialA(CRED_MARSHAL_TYPE CredType,PVOID Credential,LPSTR * MarshaledCredential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredMarshalCredentialW(CRED_MARSHAL_TYPE CredType,PVOID Credential,LPWSTR * MarshaledCredential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredMarshalTargetInfo(PCREDENTIAL_TARGET_INFORMATIONW InTargetInfo,PUSHORT * Buffer,PULONG BufferSize) NTSTATUS <ntsecpkg.h>
CredPackAuthenticationBuffer(DWORD dwFlags,LPSTR pszUserName,LPSTR pszPassword,PBYTE pPackedCredentials,DWORD * pcbPackedCredentials)CREDUIAPI WINBOOL WINAPI <wincred.h>
CredPackAuthenticationBufferA(DWORD dwFlags,LPSTR pszUserName,LPSTR pszPassword,PBYTE pPackedCredentials,DWORD * pcbPackedCredentials)CREDUIAPI WINBOOL WINAPI <wincred.h>
CredPackAuthenticationBufferW(DWORD dwFlags,LPWSTR pszUserName,LPWSTR pszPassword,PBYTE pPackedCredentials,DWORD * pcbPackedCredentials)CREDUIAPI WINBOOL WINAPI <wincred.h>
CredProtect(WINBOOL fAsSelf,LPSTR pszCredentials,DWORD cchCredentials,LPSTR pszProtectedCredentials,DWORD * pcchMaxChars,CRED_PROTECTION_TYPE * ProtectionType)WINADVAPI WINBOOL WINAPI <wincred.h>
CredProtectA(WINBOOL fAsSelf,LPSTR pszCredentials,DWORD cchCredentials,LPSTR pszProtectedCredentials,DWORD * pcchMaxChars,CRED_PROTECTION_TYPE * ProtectionType)WINADVAPI WINBOOL WINAPI <wincred.h>
CredProtectW(WINBOOL fAsSelf,LPWSTR pszCredentials,DWORD cchCredentials,LPWSTR pszProtectedCredentials,DWORD * pcchMaxChars,CRED_PROTECTION_TYPE * ProtectionType)WINADVAPI WINBOOL WINAPI <wincred.h>
CredRead(LPCSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIALA * Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredReadA(LPCSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIALA * Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredReadDomainCredentials(PCREDENTIAL_TARGET_INFORMATIONA TargetInfo,DWORD Flags,DWORD * Count,PCREDENTIALA ** Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredReadDomainCredentialsA(PCREDENTIAL_TARGET_INFORMATIONA TargetInfo,DWORD Flags,DWORD * Count,PCREDENTIALA ** Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredReadDomainCredentialsFn(PLUID LogonId,ULONG CredFlags,PCREDENTIAL_TARGET_INFORMATIONW TargetInfo,ULONG Flags,PULONG Count,PENCRYPTED_CREDENTIALW ** Credential) typedef NTSTATUS<ntsecpkg.h>
CredReadDomainCredentialsW(PCREDENTIAL_TARGET_INFORMATIONW TargetInfo,DWORD Flags,DWORD * Count,PCREDENTIALW ** Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredReadFn(PLUID LogonId,ULONG CredFlags,LPWSTR TargetName,ULONG Type,ULONG Flags,PENCRYPTED_CREDENTIALW * Credential) typedef NTSTATUS<ntsecpkg.h>
CredReadW(LPCWSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIALW * Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredRename(LPCSTR OldTargetName,LPCSTR NewTargetName,DWORD Type,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredRenameA(LPCSTR OldTargetName,LPCSTR NewTargetName,DWORD Type,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredRenameW(LPCWSTR OldTargetName,LPCWSTR NewTargetName,DWORD Type,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CREDUI_IS_AUTHENTICATION_ERROR(_Status)<wincred.h>
CREDUI_NO_PROMPT_AUTHENTICATION_ERROR(_Status)<wincred.h>
CredUICmdLinePromptForCredentials(PCSTR pszTargetName,PCtxtHandle pContext,DWORD dwAuthError,PSTR UserName,ULONG ulUserBufferSize,PSTR pszPassword,ULONG ulPasswordBufferSize,PBOOL pfSave,DWORD dwFlags) CREDUIAPI DWORD WINAPI <wincred.h>
CredUICmdLinePromptForCredentialsA(PCSTR pszTargetName,PCtxtHandle pContext,DWORD dwAuthError,PSTR UserName,ULONG ulUserBufferSize,PSTR pszPassword,ULONG ulPasswordBufferSize,PBOOL pfSave,DWORD dwFlags) CREDUIAPI DWORD WINAPI <wincred.h>
CredUICmdLinePromptForCredentialsW(PCWSTR pszTargetName,PCtxtHandle pContext,DWORD dwAuthError,PWSTR UserName,ULONG ulUserBufferSize,PWSTR pszPassword,ULONG ulPasswordBufferSize,PBOOL pfSave,DWORD dwFlags) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIConfirmCredentials(PCSTR pszTargetName,WINBOOL bConfirm) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIConfirmCredentialsA(PCSTR pszTargetName,WINBOOL bConfirm) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIConfirmCredentialsW(PCWSTR pszTargetName,WINBOOL bConfirm) CREDUIAPI DWORD WINAPI <wincred.h>
CREDUIP_IS_DOWNGRADE_ERROR(_Status)<wincred.h>
CREDUIP_IS_EXPIRED_ERROR(_Status)<wincred.h>
CREDUIP_IS_USER_PASSWORD_ERROR(_Status)<wincred.h>
CredUIParseUserName(CONST CHAR * userName,CHAR * user,ULONG userBufferSize,CHAR * domain,ULONG domainBufferSize) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIParseUserNameA(CONST CHAR * userName,CHAR * user,ULONG userBufferSize,CHAR * domain,ULONG domainBufferSize) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIParseUserNameW(CONST WCHAR * UserName,WCHAR * user,ULONG userBufferSize,WCHAR * domain,ULONG domainBufferSize) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIPromptForCredentials(PCREDUI_INFOA pUiInfo,PCSTR pszTargetName,PCtxtHandle pContext,DWORD dwAuthError,PSTR pszUserName,ULONG ulUserNameBufferSize,PSTR pszPassword,ULONG ulPasswordBufferSize,WINBOOL * save,DWORD dwFlags) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIPromptForCredentialsA(PCREDUI_INFOA pUiInfo,PCSTR pszTargetName,PCtxtHandle pContext,DWORD dwAuthError,PSTR pszUserName,ULONG ulUserNameBufferSize,PSTR pszPassword,ULONG ulPasswordBufferSize,WINBOOL * save,DWORD dwFlags) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIPromptForCredentialsW(PCREDUI_INFOW pUiInfo,PCWSTR pszTargetName,PCtxtHandle pContext,DWORD dwAuthError,PWSTR pszUserName,ULONG ulUserNameBufferSize,PWSTR pszPassword,ULONG ulPasswordBufferSize,WINBOOL * save,DWORD dwFlags) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIPromptForWindowsCredentials(PCREDUI_INFOA pUiInfo,DWORD dwAuthError,ULONG * pulAuthPackage,LPCVOID pvInAuthBuffer,ULONG ulInAuthBufferSize,LPVOID * ppvOutAuthBuffer,ULONG * pulOutAuthBufferSize,WINBOOL * pfSave,DWORD dwFlags)CREDUIAPI DWORD WINAPI <wincred.h>
CredUIPromptForWindowsCredentialsA(PCREDUI_INFOA pUiInfo,DWORD dwAuthError,ULONG * pulAuthPackage,LPCVOID pvInAuthBuffer,ULONG ulInAuthBufferSize,LPVOID * ppvOutAuthBuffer,ULONG * pulOutAuthBufferSize,WINBOOL * pfSave,DWORD dwFlags)CREDUIAPI DWORD WINAPI <wincred.h>
CredUIPromptForWindowsCredentialsW(PCREDUI_INFOW pUiInfo,DWORD dwAuthError,ULONG * pulAuthPackage,LPCVOID pvInAuthBuffer,ULONG ulInAuthBufferSize,LPVOID * ppvOutAuthBuffer,ULONG * pulOutAuthBufferSize,WINBOOL * pfSave,DWORD dwFlags)CREDUIAPI DWORD WINAPI <wincred.h>
CredUIReadSSOCredW(PCWSTR pszRealm,PWSTR * ppszUsername) CREDUIAPI DWORD WINAPI <wincred.h>
CredUIStoreSSOCredW(PCWSTR pszRealm,PCWSTR pszUsername,PCWSTR pszPassword,WINBOOL bPersist) CREDUIAPI DWORD WINAPI <wincred.h>
CredUnmarshalCredential(LPCSTR MarshaledCredential,PCRED_MARSHAL_TYPE CredType,PVOID * Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredUnmarshalCredentialA(LPCSTR MarshaledCredential,PCRED_MARSHAL_TYPE CredType,PVOID * Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredUnmarshalCredentialW(LPCWSTR MarshaledCredential,PCRED_MARSHAL_TYPE CredType,PVOID * Credential) WINADVAPI WINBOOL WINAPI <wincred.h>
CredUnmarshalTargetInfo(PUSHORT Buffer,ULONG BufferSize,PCREDENTIAL_TARGET_INFORMATIONW * RetTargetInfo,PULONG RetActualSize) NTSTATUS <ntsecpkg.h>
CredUnPackAuthenticationBuffer(DWORD dwFlags,PVOID pAuthBuffer,DWORD cbAuthBuffer,LPSTR pszUserName,DWORD * pcchMaxUserName,LPSTR pszDomainName,DWORD * pcchMaxDomainame,LPSTR pszPassword,DWORD * pcchMaxPassword)CREDUIAPI WINBOOL WINAPI <wincred.h>
CredUnPackAuthenticationBufferA(DWORD dwFlags,PVOID pAuthBuffer,DWORD cbAuthBuffer,LPSTR pszUserName,DWORD * pcchMaxUserName,LPSTR pszDomainName,DWORD * pcchMaxDomainame,LPSTR pszPassword,DWORD * pcchMaxPassword)CREDUIAPI WINBOOL WINAPI <wincred.h>
CredUnPackAuthenticationBufferW(DWORD dwFlags,PVOID pAuthBuffer,DWORD cbAuthBuffer,LPWSTR pszUserName,DWORD * pcchMaxUserName,LPWSTR pszDomainName,DWORD * pcchMaxDomainame,LPWSTR pszPassword,DWORD * pcchMaxPassword)CREDUIAPI WINBOOL WINAPI <wincred.h>
CredUnprotect(WINBOOL fAsSelf,LPSTR pszProtectedCredentials,DWORD cchCredentials,LPSTR pszCredentials,DWORD * pcchMaxChars)WINADVAPI WINBOOL WINAPI <wincred.h>
CredUnprotectA(WINBOOL fAsSelf,LPSTR pszProtectedCredentials,DWORD cchCredentials,LPSTR pszCredentials,DWORD * pcchMaxChars)WINADVAPI WINBOOL WINAPI <wincred.h>
CredUnprotectW(WINBOOL fAsSelf,LPWSTR pszProtectedCredentials,DWORD cchCredentials,LPWSTR pszCredentials,DWORD * pcchMaxChars)WINADVAPI WINBOOL WINAPI <wincred.h>
CredWrite(PCREDENTIALA Credential,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredWriteA(PCREDENTIALA Credential,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredWriteDomainCredentials(PCREDENTIAL_TARGET_INFORMATIONA TargetInfo,PCREDENTIALA Credential,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredWriteDomainCredentialsA(PCREDENTIAL_TARGET_INFORMATIONA TargetInfo,PCREDENTIALA Credential,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredWriteDomainCredentialsW(PCREDENTIAL_TARGET_INFORMATIONW TargetInfo,PCREDENTIALW Credential,DWORD Flags) WINADVAPI WINBOOL WINAPI <wincred.h>
CredWriteFn(PLUID LogonId,ULONG CredFlags,PENCRYPTED_CREDENTIALW Credential,ULONG Flags) typedef NTSTATUS<ntsecpkg.h>
CrossProduct(const _D3DVECTOR & v1,const _D3DVECTOR & v2)inline _D3DVECTOR <d3dtypes.h>
CRYPT_PASSWORD_CREDENTIALS(CRYPT_PASSWORD_CREDENTIALS) typedef __MINGW_NAME_AW<wincrypt.h>
CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT pCert,DWORD dwFlags,void * pvParameters,HCRYPTPROV_OR_NCRYPT_KEY_HANDLE * phCryptProvOrNCryptKey,DWORD * pdwKeySpec,WINBOOL * pfCallerFreeProvOrNCryptKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptAcquireContext(HCRYPTPROV * phProv,LPCSTR szContainer,LPCSTR szProvider,DWORD dwProvType,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptAcquireContextA(HCRYPTPROV * phProv,LPCSTR szContainer,LPCSTR szProvider,DWORD dwProvType,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptAcquireContextW(HCRYPTPROV * phProv,LPCWSTR szContainer,LPCWSTR szProvider,DWORD dwProvType,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptBinaryToString(CONST BYTE * pbBinary,DWORD cbBinary,DWORD dwFlags,LPSTR pszString,DWORD * pcchString) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptBinaryToStringA(CONST BYTE * pbBinary,DWORD cbBinary,DWORD dwFlags,LPSTR pszString,DWORD * pcchString) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptBinaryToStringW(CONST BYTE * pbBinary,DWORD cbBinary,DWORD dwFlags,LPWSTR pszString,DWORD * pcchString) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptCancelAsyncRetrieval(HCRYPTASYNC hAsyncRetrieval) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptCATAdminAcquireContext(HCATADMIN *,const GUID *,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATAdminAddCatalog(HCATADMIN,PWSTR,PWSTR,DWORD)HCATINFO  WINAPI <mscat.h>
CryptCATAdminCalcHashFromFileHandle(HANDLE,DWORD *,BYTE *,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATAdminEnumCatalogFromHash(HCATADMIN,BYTE *,DWORD,DWORD,HCATINFO *)HCATINFO  WINAPI <mscat.h>
CryptCATAdminReleaseCatalogContext(HCATADMIN,HCATINFO,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATAdminReleaseContext(HCATADMIN,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATAdminRemoveCatalog(HCATADMIN,LPCWSTR,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATAdminResolveCatalogPath(HCATADMIN,WCHAR *,CATALOG_INFO *,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATCatalogInfoFromContext(HCATINFO,CATALOG_INFO *,DWORD)WINBOOL   WINAPI <mscat.h>
CryptCATCDFClose(CRYPTCATCDF *)WINBOOL   WINAPI <mscat.h>
CryptCATCDFEnumCatAttributes(CRYPTCATCDF *,CRYPTCATATTRIBUTE *,PFN_CDF_PARSE_ERROR_CALLBACK)CRYPTCATATTRIBUTE<mscat.h>
CryptCATCDFEnumMembersByCDFTagEx(CRYPTCATCDF *,LPWSTR,PFN_CDF_PARSE_ERROR_CALLBACK,CRYPTCATMEMBER **,WINBOOL,LPVOID)LPWSTR              WINAPI <mscat.h>
CryptCATCDFOpen(LPWSTR,PFN_CDF_PARSE_ERROR_CALLBACK)CRYPTCATCDF<mscat.h>
CryptCATClose(HANDLE)WINBOOL             WINAPI <mscat.h>
CryptCATEnumerateAttr(HANDLE,CRYPTCATMEMBER *,CRYPTCATATTRIBUTE *)CRYPTCATATTRIBUTE<mscat.h>
CryptCATEnumerateCatAttr(HANDLE,CRYPTCATATTRIBUTE *)CRYPTCATATTRIBUTE<mscat.h>
CryptCATEnumerateMember(HANDLE,CRYPTCATMEMBER *)CRYPTCATMEMBER<mscat.h>
CryptCATGetAttrInfo(HANDLE,CRYPTCATMEMBER *,LPWSTR)CRYPTCATATTRIBUTE<mscat.h>
CryptCATGetCatAttrInfo(HANDLE,LPWSTR)CRYPTCATATTRIBUTE<mscat.h>
CryptCATGetMemberInfo(HANDLE,LPWSTR)CRYPTCATMEMBER<mscat.h>
CryptCATOpen(LPWSTR,DWORD,HCRYPTPROV,DWORD,DWORD)HANDLE    WINAPI <mscat.h>
CryptCloseAsyncHandle(HCRYPTASYNC hAsync) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptContextAddRef(HCRYPTPROV hProv,DWORD * pdwReserved,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptCreateAsyncHandle(DWORD dwFlags,PHCRYPTASYNC phAsync) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptCreateHash(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTKEY hKey,DWORD dwFlags,HCRYPTHASH * phHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptCreateKeyIdentifierFromCSP(DWORD dwCertEncodingType,LPCSTR pszPubKeyOID,const PUBLICKEYSTRUC * pPubKeyStruc,DWORD cbPubKeyStruc,DWORD dwFlags,void * pvReserved,BYTE * pbHash,DWORD * pcbHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDecodeMessage(DWORD dwMsgTypeFlags,PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE * pbEncodedBlob,DWORD cbEncodedBlob,DWORD dwPrevInnerContentType,DWORD * pdwMsgType,DWORD * pdwInnerContentType,BYTE * pbDecoded,DWORD * pcbDecoded,PCCERT_CONTEXT * ppXchgCert,PCCERT_CONTEXT * ppSignerCert) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDecodeObject(DWORD dwCertEncodingType,LPCSTR lpszStructType,const BYTE * pbEncoded,DWORD cbEncoded,DWORD dwFlags,void * pvStructInfo,DWORD * pcbStructInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDecodeObjectEx(DWORD dwCertEncodingType,LPCSTR lpszStructType,const BYTE * pbEncoded,DWORD cbEncoded,DWORD dwFlags,PCRYPT_DECODE_PARA pDecodePara,void * pvStructInfo,DWORD * pcbStructInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDecrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,WINBOOL Final,DWORD dwFlags,BYTE * pbData,DWORD * pdwDataLen) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE * pbEncryptedBlob,DWORD cbEncryptedBlob,BYTE * pbDecrypted,DWORD * pcbDecrypted,PCCERT_CONTEXT * ppXchgCert,PCCERT_CONTEXT * ppSignerCert) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,const BYTE * pbEncryptedBlob,DWORD cbEncryptedBlob,BYTE * pbDecrypted,DWORD * pcbDecrypted,PCCERT_CONTEXT * ppXchgCert) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDeriveKey(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTHASH hBaseData,DWORD dwFlags,HCRYPTKEY * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDestroyHash(HCRYPTHASH hHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDestroyKey(HCRYPTKEY hKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDuplicateHash(HCRYPTHASH hHash,DWORD * pdwReserved,DWORD dwFlags,HCRYPTHASH * phHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptDuplicateKey(HCRYPTKEY hKey,DWORD * pdwReserved,DWORD dwFlags,HCRYPTKEY * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEncodeObject(DWORD dwCertEncodingType,LPCSTR lpszStructType,const void * pvStructInfo,BYTE * pbEncoded,DWORD * pcbEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEncodeObjectEx(DWORD dwCertEncodingType,LPCSTR lpszStructType,const void * pvStructInfo,DWORD dwFlags,PCRYPT_ENCODE_PARA pEncodePara,void * pvEncoded,DWORD * pcbEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEncrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,WINBOOL Final,DWORD dwFlags,BYTE * pbData,DWORD * pdwDataLen,DWORD dwBufLen) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,DWORD cRecipientCert,PCCERT_CONTEXT rgpRecipientCert[],const BYTE * pbToBeEncrypted,DWORD cbToBeEncrypted,BYTE * pbEncryptedBlob,DWORD * pcbEncryptedBlob) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumKeyIdentifierProperties(const CRYPT_HASH_BLOB * pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void * pvReserved,void * pvArg,PFN_CRYPT_ENUM_KEYID_PROP pfnEnum) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,DWORD dwFlags,void * pvArg,PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumOIDInfo(DWORD dwGroupId,DWORD dwFlags,void * pvArg,PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumProviders(DWORD dwIndex,DWORD * pdwReserved,DWORD dwFlags,DWORD * pdwProvType,LPSTR szProvName,DWORD * pcbProvName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumProvidersA(DWORD dwIndex,DWORD * pdwReserved,DWORD dwFlags,DWORD * pdwProvType,LPSTR szProvName,DWORD * pcbProvName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumProvidersW(DWORD dwIndex,DWORD * pdwReserved,DWORD dwFlags,DWORD * pdwProvType,LPWSTR szProvName,DWORD * pcbProvName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumProviderTypes(DWORD dwIndex,DWORD * pdwReserved,DWORD dwFlags,DWORD * pdwProvType,LPSTR szTypeName,DWORD * pcbTypeName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumProviderTypesA(DWORD dwIndex,DWORD * pdwReserved,DWORD dwFlags,DWORD * pdwProvType,LPSTR szTypeName,DWORD * pcbTypeName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptEnumProviderTypesW(DWORD dwIndex,DWORD * pdwReserved,DWORD dwFlags,DWORD * pdwProvType,LPWSTR szTypeName,DWORD * pcbTypeName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptExportKey(HCRYPTKEY hKey,HCRYPTKEY hExpKey,DWORD dwBlobType,DWORD dwFlags,BYTE * pbData,DWORD * pdwDataLen) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptExportPKCS8(HCRYPTPROV hCryptProv,DWORD dwKeySpec,LPSTR pszPrivateKeyObjId,DWORD dwFlags,void * pvAuxInfo,BYTE * pbPrivateKeyBlob,DWORD * pcbPrivateKeyBlob) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS * psExportParams,DWORD dwFlags,void * pvAuxInfo,BYTE * pbPrivateKeyBlob,DWORD * pcbPrivateKeyBlob) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptExportPublicKeyInfo(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,DWORD dwKeySpec,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,DWORD * pcbInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptExportPublicKeyInfoEx(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,DWORD dwKeySpec,DWORD dwCertEncodingType,LPSTR pszPublicKeyObjId,DWORD dwFlags,void * pvAuxInfo,PCERT_PUBLIC_KEY_INFO pInfo,DWORD * pcbInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptExportPublicKeyInfoFromBCryptKeyHandle(BCRYPT_KEY_HANDLE hBCryptKey,DWORD dwCertEncodingType,LPSTR pszPublicKeyObjId,DWORD dwFlags,void * pvAuxInfo,PCERT_PUBLIC_KEY_INFO pInfo,DWORD * pcbInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT pCert,DWORD dwFlags,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptFindLocalizedName(LPCWSTR pwszCryptName) WINIMPM LPCWSTR WINAPI <wincrypt.h>
CryptFindOIDInfo(DWORD dwKeyType,void * pvKey,DWORD dwGroupId) WINIMPM PCCRYPT_OID_INFO WINAPI <wincrypt.h>
CryptFlushTimeValidObject(LPCSTR pszFlushTimeValidOid,LPVOID pvPara,PCCERT_CONTEXT pIssuer,DWORD dwFlags,LPVOID pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptFormatObject(DWORD dwCertEncodingType,DWORD dwFormatType,DWORD dwFormatStrType,void * pFormatStruct,LPCSTR lpszStructType,const BYTE * pbEncoded,DWORD cbEncoded,void * pbFormat,DWORD * pcbFormat) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR hFuncAddr,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGenKey(HCRYPTPROV hProv,ALG_ID Algid,DWORD dwFlags,HCRYPTKEY * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGenRandom(HCRYPTPROV hProv,DWORD dwLen,BYTE * pbBuffer) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetAsyncParam(HCRYPTASYNC hAsync,LPSTR pszParamOid,LPVOID * ppvParam,PFN_CRYPT_ASYNC_PARAM_FREE_FUNC * ppfnFree) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,WCHAR * pwszDllList,DWORD * pcchDllList) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPCWSTR pwszDll,DWORD dwFlags,void ** ppvFuncAddr,HCRYPTOIDFUNCADDR * phFuncAddr) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetDefaultProvider(DWORD dwProvType,DWORD * pdwReserved,DWORD dwFlags,LPSTR pszProvName,DWORD * pcbProvName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetDefaultProviderA(DWORD dwProvType,DWORD * pdwReserved,DWORD dwFlags,LPSTR pszProvName,DWORD * pcbProvName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetDefaultProviderW(DWORD dwProvType,DWORD * pdwReserved,DWORD dwFlags,LPWSTR pszProvName,DWORD * pcbProvName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetHashParam(HCRYPTHASH hHash,DWORD dwParam,BYTE * pbData,DWORD * pdwDataLen,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetKeyIdentifierProperty(const CRYPT_HASH_BLOB * pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void * pvReserved,void * pvData,DWORD * pcbData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetKeyParam(HCRYPTKEY hKey,DWORD dwParam,BYTE * pbData,DWORD * pdwDataLen,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetMessageCertificates(DWORD dwMsgAndCertEncodingType,HCRYPTPROV_LEGACY hCryptProv,DWORD dwFlags,const BYTE * pbSignedBlob,DWORD cbSignedBlob) WINIMPM HCERTSTORE WINAPI <wincrypt.h>
CryptGetMessageSignerCount(DWORD dwMsgEncodingType,const BYTE * pbSignedBlob,DWORD cbSignedBlob) WINIMPM LONG WINAPI <wincrypt.h>
CryptGetObjectUrl(LPCSTR pszUrlOid,LPVOID pvPara,DWORD dwFlags,PCRYPT_URL_ARRAY pUrlArray,DWORD * pcbUrlArray,PCRYPT_URL_INFO pUrlInfo,DWORD * pcbUrlInfo,LPVOID pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPCSTR pszOID,DWORD dwFlags,void ** ppvFuncAddr,HCRYPTOIDFUNCADDR * phFuncAddr) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetOIDFunctionValue(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszValueName,DWORD * pdwValueType,BYTE * pbValueData,DWORD * pcbValueData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetProvParam(HCRYPTPROV hProv,DWORD dwParam,BYTE * pbData,DWORD * pdwDataLen,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetTimeValidObject(LPCSTR pszTimeValidOid,LPVOID pvPara,PCCERT_CONTEXT pIssuer,LPFILETIME pftValidFor,DWORD dwFlags,DWORD dwTimeout,LPVOID * ppvObject,PCRYPT_CREDENTIALS pCredentials,PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptGetUserKey(HCRYPTPROV hProv,DWORD dwKeySpec,HCRYPTKEY * phUserKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashCertificate(HCRYPTPROV_LEGACY hCryptProv,ALG_ID Algid,DWORD dwFlags,const BYTE * pbEncoded,DWORD cbEncoded,BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashCertificate2(LPCWSTR pwszCNGHashAlgid,DWORD dwFlags,void * pvReserved,const BYTE * pbEncoded,DWORD cbEncoded,BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashData(HCRYPTHASH hHash,CONST BYTE * pbData,DWORD dwDataLen,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA pHashPara,WINBOOL fDetachedHash,DWORD cToBeHashed,const BYTE * rgpbToBeHashed[],DWORD rgcbToBeHashed[],BYTE * pbHashedBlob,DWORD * pcbHashedBlob,BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashPublicKeyInfo(HCRYPTPROV_LEGACY hCryptProv,ALG_ID Algid,DWORD dwFlags,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashSessionKey(HCRYPTHASH hHash,HCRYPTKEY hKey,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptHashToBeSigned(HCRYPTPROV_LEGACY hCryptProv,DWORD dwCertEncodingType,const BYTE * pbEncoded,DWORD cbEncoded,BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptImportKey(HCRYPTPROV hProv,CONST BYTE * pbData,DWORD dwDataLen,HCRYPTKEY hPubKey,DWORD dwFlags,HCRYPTKEY * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,DWORD dwFlags,HCRYPTPROV * phCryptProv,void * pvAuxInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptImportPublicKeyInfo(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,HCRYPTKEY * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptImportPublicKeyInfoEx(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,ALG_ID aiKeyAlg,DWORD dwFlags,void * pvAuxInfo,HCRYPTKEY * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptImportPublicKeyInfoEx2(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,DWORD dwFlags,void * pvAuxInfo,BCRYPT_KEY_HANDLE * phKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptInitOIDFunctionSet(LPCSTR pszFuncName,DWORD dwFlags) WINIMPM HCRYPTOIDFUNCSET WINAPI <wincrypt.h>
CryptInstallCancelRetrieval(PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,const void * pvArg,DWORD dwFlags,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptInstallDefaultContext(HCRYPTPROV hCryptProv,DWORD dwDefaultType,const void * pvDefaultPara,DWORD dwFlags,void * pvReserved,HCRYPTDEFAULTCONTEXT * phDefaultContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptInstallOIDFunctionAddress(HMODULE hModule,DWORD dwEncodingType,LPCSTR pszFuncName,DWORD cFuncEntry,const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMemAlloc(ULONG cbSize) WINIMPM LPVOID WINAPI <wincrypt.h>
CryptMemFree(LPVOID pv) WINIMPM VOID WINAPI <wincrypt.h>
CryptMemRealloc(LPVOID pv,ULONG cbSize) WINIMPM LPVOID WINAPI <wincrypt.h>
CryptMsgCalculateEncodedLength(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,void const * pvMsgEncodeInfo,LPSTR pszInnerContentObjID,DWORD cbData) WINIMPM DWORD WINAPI <wincrypt.h>
CryptMsgClose(HCRYPTMSG hCryptMsg) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgControl(HCRYPTMSG hCryptMsg,DWORD dwFlags,DWORD dwCtrlType,void const * pvCtrlPara) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgCountersign(HCRYPTMSG hCryptMsg,DWORD dwIndex,DWORD cCountersigners,PCMSG_SIGNER_ENCODE_INFO rgCountersigners) WINBOOL WINAPI <wincrypt.h>
CryptMsgCountersignEncoded(DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,DWORD cCountersigners,PCMSG_SIGNER_ENCODE_INFO rgCountersigners,PBYTE pbCountersignature,PDWORD pcbCountersignature) WINBOOL WINAPI <wincrypt.h>
CryptMsgDuplicate(HCRYPTMSG hCryptMsg) WINIMPM HCRYPTMSG WINAPI <wincrypt.h>
CryptMsgEncodeAndSignCTL(DWORD dwMsgEncodingType,PCTL_INFO pCtlInfo,PCMSG_SIGNED_ENCODE_INFO pSignInfo,DWORD dwFlags,BYTE * pbEncoded,DWORD * pcbEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgGetAndVerifySigner(HCRYPTMSG hCryptMsg,DWORD cSignerStore,HCERTSTORE * rghSignerStore,DWORD dwFlags,PCCERT_CONTEXT * ppSigner,DWORD * pdwSignerIndex) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgGetParam(HCRYPTMSG hCryptMsg,DWORD dwParamType,DWORD dwIndex,void * pvData,DWORD * pcbData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgOpenToDecode(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,HCRYPTPROV_LEGACY hCryptProv,PCERT_INFO pRecipientInfo,PCMSG_STREAM_INFO pStreamInfo) WINIMPM HCRYPTMSG WINAPI <wincrypt.h>
CryptMsgOpenToEncode(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,void const * pvMsgEncodeInfo,LPSTR pszInnerContentObjID,PCMSG_STREAM_INFO pStreamInfo) WINIMPM HCRYPTMSG WINAPI <wincrypt.h>
CryptMsgSignCTL(DWORD dwMsgEncodingType,BYTE * pbCtlContent,DWORD cbCtlContent,PCMSG_SIGNED_ENCODE_INFO pSignInfo,DWORD dwFlags,BYTE * pbEncoded,DWORD * pcbEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgUpdate(HCRYPTMSG hCryptMsg,const BYTE * pbData,DWORD cbData,WINBOOL fFinal) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV_LEGACY hCryptProv,DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,PBYTE pbSignerInfoCountersignature,DWORD cbSignerInfoCountersignature,PCERT_INFO pciCountersigner) WINBOOL WINAPI <wincrypt.h>
CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV_LEGACY hCryptProv,DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,PBYTE pbSignerInfoCountersignature,DWORD cbSignerInfoCountersignature,DWORD dwSignerType,void * pvSigner,DWORD dwFlags,void * pvExtra) WINBOOL WINAPI <wincrypt.h>
CryptProtectData(DATA_BLOB * pDataIn,LPCWSTR szDataDescr,DATA_BLOB * pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT * pPromptStruct,DWORD dwFlags,DATA_BLOB * pDataOut) DPAPI_IMP WINBOOL WINAPI <dpapi.h>
CryptProtectDataNoUI(DATA_BLOB * pDataIn,LPCWSTR szDataDescr,DATA_BLOB * pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT * pPromptStruct,DWORD dwFlags,const BYTE * pbOptionalPassword,DWORD cbOptionalPassword,DATA_BLOB * pDataOut) WINBOOL WINAPI <dpapi.h>
CryptProtectMemory(LPVOID pDataIn,DWORD cbDataIn,DWORD dwFlags)DPAPI_IMP WINBOOL WINAPI <dpapi.h>
CryptQueryObject(DWORD dwObjectType,const void * pvObject,DWORD dwExpectedContentTypeFlags,DWORD dwExpectedFormatTypeFlags,DWORD dwFlags,DWORD * pdwMsgAndCertEncodingType,DWORD * pdwContentType,DWORD * pdwFormatType,HCERTSTORE * phCertStore,HCRYPTMSG * phMsg,const void ** ppvContext) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRegisterDefaultOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,DWORD dwIndex,LPCWSTR pwszDll) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRegisterOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszDll,LPCSTR pszOverrideFuncName) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRegisterOIDInfo(PCCRYPT_OID_INFO pInfo,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptReleaseContext(HCRYPTPROV hProv,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRetrieveObjectByUrl(LPCSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID * ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRetrieveObjectByUrlA(LPCSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID * ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRetrieveObjectByUrlW(LPCWSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID * ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptRetrieveTimeStamp(LPCWSTR wszUrl,DWORD dwRetrievalFlags,DWORD dwTimeout,LPCSTR pszHashId,const CRYPT_TIMESTAMP_PARA * pPara,const BYTE * pbData,DWORD cbData,PCRYPT_TIMESTAMP_CONTEXT * ppTsContext,PCCERT_CONTEXT * ppTsSigner,HCERTSTORE * phStore) WINBOOL WINAPI <wincrypt.h>
CryptSetAsyncParam(HCRYPTASYNC hAsync,LPSTR pszParamOid,LPVOID pvParam,PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetHashParam(HCRYPTHASH hHash,DWORD dwParam,CONST BYTE * pbData,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetKeyIdentifierProperty(const CRYPT_HASH_BLOB * pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void * pvReserved,const void * pvData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetKeyParam(HCRYPTKEY hKey,DWORD dwParam,CONST BYTE * pbData,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetOIDFunctionValue(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszValueName,DWORD dwValueType,const BYTE * pbValueData,DWORD cbValueData) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProvider(LPCSTR pszProvName,DWORD dwProvType) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProviderA(LPCSTR pszProvName,DWORD dwProvType) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProviderEx(LPCSTR pszProvName,DWORD dwProvType,DWORD * pdwReserved,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProviderExA(LPCSTR pszProvName,DWORD dwProvType,DWORD * pdwReserved,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProviderExW(LPCWSTR pszProvName,DWORD dwProvType,DWORD * pdwReserved,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProviderW(LPCWSTR pszProvName,DWORD dwProvType) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSetProvParam(HCRYPTPROV hProv,DWORD dwParam,CONST BYTE * pbData,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignAndEncodeCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,DWORD dwKeySpec,DWORD dwCertEncodingType,LPCSTR lpszStructType,const void * pvStructInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,const void * pvHashAuxInfo,BYTE * pbEncoded,DWORD * pcbEncoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,DWORD cRecipientCert,PCCERT_CONTEXT rgpRecipientCert[],const BYTE * pbToBeSignedAndEncrypted,DWORD cbToBeSignedAndEncrypted,BYTE * pbSignedAndEncryptedBlob,DWORD * pcbSignedAndEncryptedBlob) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignCertificate(HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,DWORD dwKeySpec,DWORD dwCertEncodingType,const BYTE * pbEncodedToBeSigned,DWORD cbEncodedToBeSigned,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,const void * pvHashAuxInfo,BYTE * pbSignature,DWORD * pcbSignature) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignHash(HCRYPTHASH hHash,DWORD dwKeySpec,LPCSTR szDescription,DWORD dwFlags,BYTE * pbSignature,DWORD * pdwSigLen) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignHashA(HCRYPTHASH hHash,DWORD dwKeySpec,LPCSTR szDescription,DWORD dwFlags,BYTE * pbSignature,DWORD * pdwSigLen) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignHashW(HCRYPTHASH hHash,DWORD dwKeySpec,LPCWSTR szDescription,DWORD dwFlags,BYTE * pbSignature,DWORD * pdwSigLen) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,WINBOOL fDetachedSignature,DWORD cToBeSigned,const BYTE * rgpbToBeSigned[],DWORD rgcbToBeSigned[],BYTE * pbSignedBlob,DWORD * pcbSignedBlob) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,const BYTE * pbToBeSigned,DWORD cbToBeSigned,BYTE * pbSignedBlob,DWORD * pcbSignedBlob) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptSIPAddProvider(SIP_ADD_NEWPROVIDER * psNewProv) extern WINBOOL WINAPI <mssip.h>
CryptSIPCreateIndirectData(SIP_SUBJECTINFO * pSubjectInfo,DWORD * pcbIndirectData,SIP_INDIRECT_DATA * pIndirectData) extern WINBOOL WINAPI <mssip.h>
CryptSIPGetSignedDataMsg(SIP_SUBJECTINFO * pSubjectInfo,DWORD * pdwEncodingType,DWORD dwIndex,DWORD * pcbSignedDataMsg,BYTE * pbSignedDataMsg) extern WINBOOL WINAPI <mssip.h>
CryptSIPLoad(const GUID * pgSubject,DWORD dwFlags,SIP_DISPATCH_INFO * pSipDispatch) extern WINBOOL WINAPI <mssip.h>
CryptSIPPutSignedDataMsg(SIP_SUBJECTINFO * pSubjectInfo,DWORD dwEncodingType,DWORD * pdwIndex,DWORD cbSignedDataMsg,BYTE * pbSignedDataMsg) extern WINBOOL WINAPI <mssip.h>
CryptSIPRemoveProvider(GUID * pgProv) extern WINBOOL WINAPI <mssip.h>
CryptSIPRemoveSignedDataMsg(SIP_SUBJECTINFO * pSubjectInfo,DWORD dwIndex) extern WINBOOL WINAPI <mssip.h>
CryptSIPRetrieveSubjectGuid(LPCWSTR FileName,HANDLE hFileIn,GUID * pgSubject) extern WINBOOL WINAPI <mssip.h>
CryptSIPRetrieveSubjectGuidForCatalogFile(LPCWSTR FileName,HANDLE hFileIn,GUID * pgSubject) extern WINBOOL WINAPI <mssip.h>
CryptSIPVerifyIndirectData(SIP_SUBJECTINFO * pSubjectInfo,SIP_INDIRECT_DATA * pIndirectData) extern WINBOOL WINAPI <mssip.h>
CryptStringToBinary(LPCSTR pszString,DWORD cchString,DWORD dwFlags,BYTE * pbBinary,DWORD * pcbBinary,DWORD * pdwSkip,DWORD * pdwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptStringToBinaryA(LPCSTR pszString,DWORD cchString,DWORD dwFlags,BYTE * pbBinary,DWORD * pcbBinary,DWORD * pdwSkip,DWORD * pdwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptStringToBinaryW(LPCWSTR pszString,DWORD cchString,DWORD dwFlags,BYTE * pbBinary,DWORD * pcbBinary,DWORD * pdwSkip,DWORD * pdwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptUIDlgCertMgr(PCCRYPTUI_CERT_MGR_STRUCT pCryptUICertMgr) WINBOOL WINAPI <cryptuiapi.h>
CryptUIDlgSelectCertificateFromStore(HCERTSTORE hCertStore,HWND hwnd,LPCWSTR pwszTitle,LPCWSTR pwszDisplayString,DWORD dwDontUseColumn,DWORD dwFlags,void * pvReserved) PCCERT_CONTEXT WINAPI <cryptuiapi.h>
CryptUIDlgViewCertificate(PCCRYPTUI_VIEWCERTIFICATE_STRUCTA pCertViewInfo,WINBOOL * pfPropertiesChanged) WINBOOL WINAPI <cryptuiapi.h>
CryptUIDlgViewCertificateA(PCCRYPTUI_VIEWCERTIFICATE_STRUCTA pCertViewInfo,WINBOOL * pfPropertiesChanged) WINBOOL WINAPI <cryptuiapi.h>
CryptUIDlgViewCertificateW(PCCRYPTUI_VIEWCERTIFICATE_STRUCTW pCertViewInfo,WINBOOL * pfPropertiesChanged) WINBOOL WINAPI <cryptuiapi.h>
CryptUIDlgViewContext(DWORD dwContextType,const void * pvContext,HWND hwnd,LPCWSTR pwszTitle,DWORD dwFlags,void * pvReserved) WINBOOL WINAPI <cryptuiapi.h>
CryptUIWizDigitalSign(DWORD dwFlags,HWND hwndParent,LPCWSTR pwszWizardTitle,PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO pDigitalSignInfo,PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT * ppSignContext) WINBOOL WINAPI <cryptuiapi.h>
CryptUIWizExport(DWORD dwFlags,HWND hwndParent,LPCWSTR pwszWizardTitle,PCCRYPTUI_WIZ_EXPORT_INFO pExportInfo,void * pvoid) WINBOOL WINAPI <cryptuiapi.h>
CryptUIWizFreeDigitalSignContext(PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT pSignContext) WINBOOL WINAPI <cryptuiapi.h>
CryptUIWizImport(DWORD dwFlags,HWND hwndParent,LPCWSTR pwszWizardTitle,PCCRYPTUI_WIZ_IMPORT_SRC_INFO pImportSrc,HCERTSTORE hDestCertStore) WINBOOL WINAPI <cryptuiapi.h>
CryptUninstallCancelRetrieval(DWORD dwFlags,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT hDefaultContext,DWORD dwFlags,void * pvReserved) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptUnprotectData(DATA_BLOB * pDataIn,LPWSTR * ppszDataDescr,DATA_BLOB * pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT * pPromptStruct,DWORD dwFlags,DATA_BLOB * pDataOut) DPAPI_IMP WINBOOL WINAPI <dpapi.h>
CryptUnprotectDataNoUI(DATA_BLOB * pDataIn,LPWSTR * ppszDataDescr,DATA_BLOB * pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT * pPromptStruct,DWORD dwFlags,const BYTE * pbOptionalPassword,DWORD cbOptionalPassword,DATA_BLOB * pDataOut) WINBOOL WINAPI <dpapi.h>
CryptUnprotectMemory(LPVOID pDataIn,DWORD cbDataIn,DWORD dwFlags)DPAPI_IMP WINBOOL WINAPI <dpapi.h>
CryptUnregisterDefaultOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCWSTR pwszDll) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptUnregisterOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptUnregisterOIDInfo(PCCRYPT_OID_INFO pInfo) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptUpdateProtectedState(PSID pOldSid,LPCWSTR pwszOldPassword,DWORD dwFlags,DWORD * pdwSuccessCount,DWORD * pdwFailureCount) DPAPI_IMP WINBOOL WINAPI <dpapi.h>
CryptVerifyCertificateSignature(HCRYPTPROV_LEGACY hCryptProv,DWORD dwCertEncodingType,const BYTE * pbEncoded,DWORD cbEncoded,PCERT_PUBLIC_KEY_INFO pPublicKey) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyCertificateSignatureEx(HCRYPTPROV_LEGACY hCryptProv,DWORD dwCertEncodingType,DWORD dwSubjectType,void * pvSubject,DWORD dwIssuerType,void * pvIssuer,DWORD dwFlags,void * pvExtra) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,BYTE * pbDetachedHashBlob,DWORD cbDetachedHashBlob,DWORD cToBeHashed,const BYTE * rgpbToBeHashed[],DWORD rgcbToBeHashed[],BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE * pbDetachedSignBlob,DWORD cbDetachedSignBlob,DWORD cToBeSigned,const BYTE * rgpbToBeSigned[],DWORD rgcbToBeSigned[],PCCERT_CONTEXT * ppSignerCert) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,BYTE * pbHashedBlob,DWORD cbHashedBlob,BYTE * pbToBeHashed,DWORD * pcbToBeHashed,BYTE * pbComputedHash,DWORD * pcbComputedHash) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE * pbSignedBlob,DWORD cbSignedBlob,BYTE * pbDecoded,DWORD * pcbDecoded,PCCERT_CONTEXT * ppSignerCert) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,const BYTE * pbSignedBlob,DWORD cbSignedBlob,BYTE * pbDecoded,DWORD * pcbDecoded) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifySignature(HCRYPTHASH hHash,CONST BYTE * pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCSTR szDescription,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifySignatureA(HCRYPTHASH hHash,CONST BYTE * pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCSTR szDescription,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifySignatureW(HCRYPTHASH hHash,CONST BYTE * pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCWSTR szDescription,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
CryptVerifyTimeStampSignature(const BYTE * pbTSContentInfo,DWORD cbTSContentInfo,const BYTE * pbData,DWORD cbData,HCERTSTORE hAdditionalStore,PCRYPT_TIMESTAMP_CONTEXT * ppTsContext,PCCERT_CONTEXT * ppTsSigner,HCERTSTORE * phStore) WINBOOL WINAPI <wincrypt.h>
CryptXmlAddObject(HCRYPTXML hSignatureOrObject,DWORD dwFlags,const CRYPT_XML_PROPERTY * rgProperty,ULONG cProperty,const PCRYPT_XML_BLOB pEncoded,const CRYPT_XML_OBJECT ** ppObject)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlClose(HCRYPTXML hCryptXml)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlCreateReference(HCRYPTXML hCryptXml,DWORD dwFlags,LPCWSTR wszId,LPCWSTR wszURI,LPCWSTR wszType,const CRYPT_XML_ALGORITHM * pDigestMethod,ULONG cTransform,const CRYPT_XML_ALGORITHM * rgTransform,HCRYPTXML * phReference)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlDigestReference(HCRYPTXML hReference,DWORD dwFlags,CRYPT_XML_DATA_PROVIDER * pDataProviderIn)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlDllCloseDigest(CRYPT_XML_DIGEST hDigest)typedef HRESULT<cryptxml.h>
CryptXmlDllCreateDigest(const CRYPT_XML_ALGORITHM * pDigestMethod,ULONG * pcbSize,CRYPT_XML_DIGEST * phDigest)typedef HRESULT<cryptxml.h>
CryptXmlDllCreateKey(CRYPT_XML_BLOB * pEncoded,const BCRYPT_KEY_HANDLE * phKey)typedef HRESULT<cryptxml.h>
CryptXmlDllDigestData(CRYPT_XML_DIGEST hDigest,BYTE * pbData,ULONG cbDigest)typedef HRESULT<cryptxml.h>
CryptXmlDllEncodeAlgorithm(CRYPT_XML_ALGORITHM_INFO * pAlgInfo,CRYPT_XML_CHARSET dwCharset,void * pvCallbackState,PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite)typedef HRESULT<cryptxml.h>
CryptXmlDllEncodeKeyValue(NCRYPT_KEY_HANDLE hKey,CRYPT_XML_CHARSET dwCharset,void * pvCallbackState,PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite)typedef HRESULT<cryptxml.h>
CryptXmlDllFinalizeDigest(CRYPT_XML_DIGEST hDigest,BYTE * pbDigest,ULONG cbDigest)typedef HRESULT<cryptxml.h>
CryptXmlDllGetInterface(DWORD dwFlags,const CRYPT_XML_ALGORITHM_INFO * pMethod,CRYPT_XML_CRYPTOGRAPHIC_INTERFACE * pInterface)typedef HRESULT<cryptxml.h>
CryptXmlDllSignData(const CRYPT_XML_ALGORITHM * pSignatureMethod,HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,DWORD dwKeySpec,const BYTE * pbInput,ULONG cbInput,BYTE * pbOutput,ULONG cbOutput,ULONG * pcbResult)typedef HRESULT<cryptxml.h>
CryptXmlDllVerifySignature(const CRYPT_XML_ALGORITHM * pSignatureMethod,HCRYPTXML_PROV hCryptProv,HCRYPTXML_KEY hKey,const BYTE * pbInput,ULONG cbInput,const BYTE * pbSignature,ULONG cbSignature)typedef HRESULT<cryptxml.h>
CryptXmlEncode(HCRYPTXML hCryptXml,CRYPT_XML_CHARSET dwCharset,const CRYPT_XML_PROPERTY * rgProperty,ULONG cProperty,void * pvCallbackState,PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlGetAlgorithmInfo(const CRYPT_XML_ALGORITHM * pXmlAlgorithm,DWORD dwFlags,CRYPT_XML_ALGORITHM_INFO ** ppAlgInfo)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlGetDocContext(HCRYPTXML hCryptXml,const CRYPT_XML_DOC_CTXT ** ppStruct)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlGetReference(HCRYPTXML HCRYPTXML,const CRYPT_XML_REFERENCE ** ppStruct)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlGetSignature(HCRYPTXML hCryptXml,const PCRYPT_XML_SIGNATURE ** ppStruct)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlGetStatus(HCRYPTXML hCryptXml,CRYPT_XML_STATUS * pStatus)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlGetTransforms(PCRYPT_XML_TRANSFORM_CHAIN_CONFIG ** pConfig)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlImportPublicKey(DWORD dwFlags,CRYPT_XML_KEY_VALUE * pKeyValue,BCRYPT_KEY_HANDLE * phKey)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlOpenToDecode(CRYPT_XML_TRANSFORM_CHAIN_CONFIG * pConfig,DWORD dwFlags,const CRYPT_XML_PROPERTY * rgProperty,ULONG cProperty,const CRYPT_XML_BLOB * pEncoded,HCRYPTXML phCryptXml)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlOpenToEncode(CRYPT_XML_TRANSFORM_CHAIN_CONFIG * pConfig,DWORD dwFlags,LPCWSTR wszId,CRYPT_XML_PROPERTY * rgProperty,ULONG cProperty,CRYPT_XML_BLOB * pEncoded,HCRYPTXML * phSignature)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlSetHMACSecret(HCRYPTXML hSignature,const BYTE * pbSecret,ULONG cbSecret)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlSign(HCRYPTXML hSignature,HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hKey,DWORD dwKeySpec,DWORD dwFlags,CRYPT_XML_KEYINFO_SPEC dwKeyInfoSpec,const void pvKeyInfoSpec,const CRYPT_XML_ALGORITHM pSignatureMethod,const CRYPT_XML_ALGORITHM pCanonicalization)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CryptXmlVerifySignature(HCRYPTXML hSignature,BCRYPT_KEY_HANDLE hKey,DWORD dwFlags)CRYPTXMLAPI HRESULT WINAPI <cryptxml.h>
CS_TAG_GETTING_ROUTINE(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned __LONG32 * pulSendingTag,unsigned __LONG32 * pulDesiredReceivingTag,unsigned __LONG32 * pulReceivingTag,error_status_t * pStatus) typedef void<rpcndr.h>
CS_TYPE_FROM_NETCS_ROUTINE(RPC_BINDING_HANDLE hBinding,unsigned __LONG32 ulNetworkCodeSet,byte * pNetworkData,unsigned __LONG32 ulNetworkDataLength,unsigned __LONG32 ulLocalBufferSize,void * pLocalData,unsigned __LONG32 * pulLocalDataLength,error_status_t * pStatus) typedef void<rpcndr.h>
CS_TYPE_LOCAL_SIZE_ROUTINE(RPC_BINDING_HANDLE hBinding,unsigned __LONG32 ulNetworkCodeSet,unsigned __LONG32 ulNetworkBufferSize,IDL_CS_CONVERT * conversionType,unsigned __LONG32 * pulLocalBufferSize,error_status_t * pStatus) typedef void<rpcndr.h>
CS_TYPE_NET_SIZE_ROUTINE(RPC_BINDING_HANDLE hBinding,unsigned __LONG32 ulNetworkCodeSet,unsigned __LONG32 ulLocalBufferSize,IDL_CS_CONVERT * conversionType,unsigned __LONG32 * pulNetworkBufferSize,error_status_t * pStatus) typedef void<rpcndr.h>
CS_TYPE_TO_NETCS_ROUTINE(RPC_BINDING_HANDLE hBinding,unsigned __LONG32 ulNetworkCodeSet,void * pLocalData,unsigned __LONG32 ulLocalDataLength,byte * pNetworkData,unsigned __LONG32 * pulNetworkDataLength,error_status_t * pStatus) typedef void<rpcndr.h>
CSafeComEnum()IUnknown<mspenum.h>
CSafeComEnum(Clone) STDMETHOD<mspenum.h>
CSafeComEnum(Next) STDMETHOD<mspenum.h>
CSafeComEnum(void) void FinalRelease<mspenum.h>
CSingleFilterStaticTerminal(IMoniker * pMoniker) virtual HRESULT CompareMoniker<mspterm.h>
CSingleFilterTerminal() virtual HRESULT RemoveFiltersFromGraph<mspterm.h>
CSingleFilterTerminal(IGraphBuilder * pGraph,DWORD * pdwNumPins) virtual HRESULT GetNumExposedPins<mspterm.h>
CSingleFilterTerminal(IPin ** ppPins) virtual HRESULT GetExposedPins<mspterm.h>
CSingleFilterTerminal(RunRenderFilter) STDMETHOD<mspterm.h>
CSingleFilterTerminal(StopRenderFilter) STDMETHOD<mspterm.h>
CStdStubBuffer2_Release(IRpcStubBuffer * This) ULONG WINAPI <rpcproxy.h>
CSTDSTUBBUFFER2RELEASE()()()
CSTDSTUBBUFFER2RELEASE(pFactory)<rpcproxy.h>
CStdStubBuffer_AddRef(IRpcStubBuffer * This) ULONG WINAPI <rpcproxy.h>
CStdStubBuffer_Connect(IRpcStubBuffer * This,IUnknown * pUnkServer) HRESULT WINAPI <rpcproxy.h>
CStdStubBuffer_CountRefs(IRpcStubBuffer * This) ULONG WINAPI <rpcproxy.h>
CStdStubBuffer_DebugServerQueryInterface(IRpcStubBuffer * This,void ** ppv) HRESULT WINAPI <rpcproxy.h>
CStdStubBuffer_DebugServerRelease(IRpcStubBuffer * This,void * pv) void WINAPI <rpcproxy.h>
CStdStubBuffer_Disconnect(IRpcStubBuffer * This) void WINAPI <rpcproxy.h>
CStdStubBuffer_Invoke(IRpcStubBuffer * This,RPCOLEMESSAGE * pRpcMsg,IRpcChannelBuffer * pRpcChannelBuffer) HRESULT WINAPI <rpcproxy.h>
CStdStubBuffer_IsIIDSupported(IRpcStubBuffer * This,REFIID riid) IRpcStubBuffer<rpcproxy.h>
CStdStubBuffer_QueryInterface(IRpcStubBuffer * This,REFIID riid,void ** ppvObject) HRESULT WINAPI <rpcproxy.h>
CStdStubBuffer_Release(IRpcStubBuffer * This) ULONG WINAPI <rpcproxy.h>
CSTDSTUBBUFFERRELEASE(pFactory)<rpcproxy.h>
CSVER_BUILD_VERSION(major,minor)<certsrv.h>
CSVER_EXTRACT_MAJOR(version)<certsrv.h>
CSVER_EXTRACT_MINOR(version)<certsrv.h>
CTapiBstrCollection() void FinalRelease<mspcoll.h>
CTapiBstrCollection(DWORD dwSize,BSTR * pBegin,BSTR * pEnd) HRESULT WINAPI Initialize<mspcoll.h>
CTapiBstrCollection(get_Count) STDMETHOD<mspcoll.h>
CTapiBstrCollection(get_Item) STDMETHOD<mspcoll.h>
CTapiBstrCollection(IUnknown ** retval) HRESULT WINAPI get__NewEnum<mspcoll.h>
CTapiBstrCollection(void) <mspcoll.h>
CTapiIfCollection() void FinalRelease<mspcoll.h>
CTapiIfCollection(DWORD dwSize,T * pBegin,T * pEnd) HRESULT WINAPI Initialize<mspcoll.h>
CTapiIfCollection(get_Count) STDMETHOD<mspcoll.h>
CTapiIfCollection(get_Item) STDMETHOD<mspcoll.h>
CTapiIfCollection(IUnknown ** retval) HRESULT WINAPI get__NewEnum<mspcoll.h>
CTapiIfCollection(void) <mspcoll.h>
CTL_CODE()()()
CTL_CODE(DeviceType, Function, Method, Access)<winioctl.h>
CTL_CODE(DeviceType,Function,Method,Access)<winioctl.h>
Ctor(const _com_error & that)inline void _com_error::<comdef.h>
CUnknown()   virtual ~<stdunk.h>
CUnknown(PUNKNOWN pUnknownOuter)   <stdunk.h>
CUnknown(REFIID rIID,PVOID * ppVoid)   STDMETHODIMP_<stdunk.h>
Current(ISegment ** ppISegment)virtual HRESULT WINAPI <ntddmmc.h>
CurrentLine() int <sql_1.h>
CurrentScope(IHTMLElement ** ppElemCurrent)virtual HRESULT WINAPI <mshtmlc.h>
CurrentToken() LPWSTR <sql_1.h>
CUSTOM_CTL_SCODE(n)<olectl.h>
CustomLineCap()	virtual ~<gdiplusheaders.h>
CustomLineCap(const CustomLineCap &)	<gdiplusheaders.h>
CustomLineCap(const GraphicsPath * fillPath,const GraphicsPath * strokePath,LineCap baseCap,REAL baseInset)__inline__ ::<gdiplusheaders.h>
CustomLineCap(const GraphicsPath * fillPath,const GraphicsPath * strokePath,LineCap baseCap=LineCapFlat,REAL baseInset=0.0f)	<gdiplusheaders.h>
CustomLineCap(GpCustomLineCap * customLineCap,Status status)	<gdiplusheaders.h>
CustomLineCap(LineCap * startCap,LineCap * endCap)__inline__ Status ::GetStrokeCaps<gdiplusheaders.h>
CustomLineCap(LineCap baseCap)__inline__ Status ::SetBaseCap<gdiplusheaders.h>
CustomLineCap(LineCap startCap,LineCap endCap)__inline__ Status ::SetStrokeCaps<gdiplusheaders.h>
CustomLineCap(LineCap strokeCap)__inline__ Status ::SetStrokeCap<gdiplusheaders.h>
CustomLineCap(LineJoin lineJoin)__inline__ Status ::SetStrokeJoin<gdiplusheaders.h>
CustomLineCap(REAL inset)__inline__ Status ::SetBaseInset<gdiplusheaders.h>
CustomLineCap(REAL widthScale)__inline__ Status ::SetWidthScale<gdiplusheaders.h>
CustomLineCap(Status newStatus)	Status updateStatus<gdiplusheaders.h>
Cut(VARIANT * pVar)virtual HRESULT WINAPI <tom.h>
CVideoCaptureTerminal() virtual ~<msptrmvc.h>
CVideoCaptureTerminal(CComPtr<IMoniker> pMoniker,MSP_HANDLE htAddress,ITTerminal ** ppTerm) static HRESULT CreateTerminal<msptrmvc.h>
CVideoCaptureTerminal(CVideoCaptureTerminal) DECLARE_LOG_ADDREF_RELEASE<msptrmvc.h>
CVideoCaptureTerminal(void) virtual DWORD GetSupportedMediaTypes<msptrmvc.h>
CVssWriter()virtual __thiscall ~<vswriter.h>
CVssWriter(DWORD dwEventFlags)HRESULT WINAPI Subscribe<vswriter.h>
CVssWriter(HRESULT hr)HRESULT WINAPI SetWriterFailure<vswriter.h>
CVssWriter(IVssCreateWriterMetadata * pMetadata)virtual bool WINAPI OnIdentify<vswriter.h>
CVssWriter(IVssWriterComponents * pComponent)virtual bool WINAPI OnPrepareBackup<vswriter.h>
CVssWriter(LPCWSTR wszOriginalVolume,LPCWSTR * ppwszSnapshotDevice)HRESULT WINAPI GetSnapshotDeviceName<vswriter.h>
CVssWriter(LPCWSTR wszPath)bool WINAPI IsPathAffected<vswriter.h>
CVssWriter(VSS_ID _id1,VSS_ID _id2)HRESULT WINAPI InstallAlternateWriter<vswriter.h>
CVssWriter(VSS_ID SnapshotSetId)virtual bool WINAPI OnBackupShutdown<vswriter.h>
CVssWriter(VSS_ID WriterId,LPCWSTR WriterName,VSS_USAGE_TYPE UsageType,VSS_SOURCE_TYPE SourceType,VSS_APPLICATION_LEVEL AppLevel,DWORD dwTimeoutFreeze=60000,VSS_ALTERNATE_WRITER_STATE aws=VSS_AWS_NO_ALTERNATE_WRITER,bool bIOThrottlingOnly=false,LPCWSTR wszWriterInstanceName=NULL)HRESULT WINAPI Initialize<vswriter.h>
CVssWriter(VSS_PWSZ _vss_pwsz,VSS_ID _id1,VSS_ID _id2)virtual bool WINAPI OnContinueIOOnVolume<vswriter.h>
CVssWriterEx(DWORD dwUnsubscribeTimeout,DWORD dwEventFlags)HRESULT WINAPI SubscribeEx<vswriter.h>
CVssWriterEx(IVssCreateWriterMetadataEx * pMetadata)virtual bool WINAPI OnIdentifyEx<vswriter.h>
CVssWriterEx(IVssExamineWriterMetadata ** ppMetadata)HRESULT WINAPI GetIdentifyInformation<vswriter.h>
CVssWriterEx(VSS_ID WriterId,LPCWSTR wszWriterName,DWORD dwMajorVersion,DWORD dwMinorVersion,VSS_USAGE_TYPE ut,VSS_SOURCE_TYPE st,VSS_APPLICATION_LEVEL nLevel,DWORD dwTimeoutFreeze=60000,VSS_ALTERNATE_WRITER_STATE aws=VSS_AWS_NO_ALTERNATE_WRITER,bool bIOThrottlingOnly=false,LPCWSTR wszWriterInstanceName=NULL)HRESULT WINAPI InitializeEx<vswriter.h>
CVssWriterEx2()bool WINAPI IsWriterShuttingDown<vswriter.h>
CVssWriterEx2(HRESULT hrWriter,HRESULT hrApplication,LPCWSTR wszApplicationMessage)HRESULT WINAPI SetWriterFailureEx<vswriter.h>
CVssWriterEx2(VSS_ID * idSession)HRESULT WINAPI GetSessionId<vswriter.h>
D2D1()   inline Matrix5x4F<d2d1helper.h>
D2D1()))))))))))))))))static FORCEINLINE Matrix3x2F Skew<d2d1helper.h>
D2D1(),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT)FORCEINLINE _RENDER_TARGET_PROPERTIES RenderTargetProperties<d2d1helper.h>
D2D1(),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f)FORCEINLINE _BITMAP_PROPERTIES BitmapProperties<d2d1helper.h>
D2D1(),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL),FLOAT dpiX=96.0f,FLOAT dpiY=96.0f,ID2D1ColorContext * colorContext=NULL)FORCEINLINE _BITMAP_PROPERTIES1 BitmapProperties1<d2d1helper.h>
D2D1(),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE)FORCEINLINE _LAYER_PARAMETERS LayerParameters<d2d1helper.h>
D2D1(),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE)FORCEINLINE _LAYER_PARAMETERS1 LayerParameters1<d2d1helper.h>
D2D1(0)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)FORCEINLINE _HWND_RENDER_TARGET_PROPERTIES HwndRenderTargetProperties<d2d1helper.h>
D2D1(const D2D1_MATRIX_3X2_F * pMatrix)static inline const Matrix3x2F<d2d1helper.h>
D2D1(const D2D1_POINT_2F & center,const D2D1_POINT_2F & gradientOriginOffset,FLOAT radiusX,FLOAT radiusY)FORCEINLINE _RADIAL_GRADIENT_BRUSH_PROPERTIES RadialGradientBrushProperties<d2d1helper.h>
D2D1(const D2D1_POINT_2F & center,FLOAT radiusX,FLOAT radiusY)FORCEINLINE _ELLIPSE Ellipse<d2d1helper.h>
D2D1(const D2D1_POINT_2F & point,const D2D1_MATRIX_3X2_F & matrix)FORCEINLINE _POINT_2F operator<d2d1helper.h>
D2D1(const D2D1_POINT_2F & point,const D2D1_SIZE_F & size,const FLOAT rotationAngle,D2D1_SWEEP_DIRECTION sweepDirection,D2D1_ARC_SIZE arcSize)FORCEINLINE _ARC_SEGMENT ArcSegment<d2d1helper.h>
D2D1(const D2D1_POINT_2F & point1,const D2D1_POINT_2F & point2)FORCEINLINE _QUADRATIC_BEZIER_SEGMENT QuadraticBezierSegment<d2d1helper.h>
D2D1(const D2D1_POINT_2F & point1,const D2D1_POINT_2F & point2,const D2D1_POINT_2F & point3)FORCEINLINE _BEZIER_SEGMENT BezierSegment<d2d1helper.h>
D2D1(const D2D1_POINT_2F & startPoint,const D2D1_POINT_2F & endPoint)FORCEINLINE _LINEAR_GRADIENT_BRUSH_PROPERTIES LinearGradientBrushProperties<d2d1helper.h>
D2D1(const D2D1_RECT_F & rect,FLOAT radiusX,FLOAT radiusY)FORCEINLINE _ROUNDED_RECT RoundedRect<d2d1helper.h>
D2D1(const Matrix3x2F & a,const Matrix3x2F & b)inline void SetProduct<d2d1helper.h>
D2D1(const Matrix3x2F & matrix)FORCEINLINE Matrix3x2F operator<d2d1helper.h>
D2D1(D2D1_CAP_STYLE startCap=D2D1_CAP_STYLE_FLAT,D2D1_CAP_STYLE endCap=D2D1_CAP_STYLE_FLAT,D2D1_CAP_STYLE dashCap=D2D1_CAP_STYLE_FLAT,D2D1_LINE_JOIN lineJoin=D2D1_LINE_JOIN_MITER,FLOAT miterLimit=10.0f,D2D1_DASH_STYLE dashStyle=D2D1_DASH_STYLE_SOLID,FLOAT dashOffset=0.0f)FORCEINLINE _STROKE_STYLE_PROPERTIES StrokeStyleProperties<d2d1helper.h>
D2D1(D2D1_EXTEND_MODE extendModeX=D2D1_EXTEND_MODE_CLAMP,D2D1_EXTEND_MODE extendModeY=D2D1_EXTEND_MODE_CLAMP,D2D1_BITMAP_INTERPOLATION_MODE interpolationMode=D2D1_BITMAP_INTERPOLATION_MODE_LINEAR)FORCEINLINE _BITMAP_BRUSH_PROPERTIES BitmapBrushProperties<d2d1helper.h>
D2D1(D2D1_EXTEND_MODE extendmodeX=D2D1_EXTEND_MODE_CLAMP,D2D1_EXTEND_MODE extendmodeY=D2D1_EXTEND_MODE_CLAMP,D2D1_INTERPOLATION_MODE interpolationMode=D2D1_INTERPOLATION_MODE_LINEAR)FORCEINLINE _BITMAP_BRUSH_PROPERTIES1 BitmapBrushProperties1<d2d1helper.h>
D2D1(D2D1_MATRIX_3X2_F * pMatrix)static inline Matrix3x2F<d2d1helper.h>
D2D1(D2D1_POINT_2F point)FORCEINLINE _POINT_2F TransformPoint<d2d1helper.h>
D2D1(D2D1_RECT_F sourceRectangle,D2D1_EXTEND_MODE extendModeX=D2D1_EXTEND_MODE_CLAMP,D2D1_EXTEND_MODE extendModeY=D2D1_EXTEND_MODE_CLAMP,D2D1_INTERPOLATION_MODE interpolationMode=D2D1_INTERPOLATION_MODE_LINEAR)FORCEINLINE _IMAGE_BRUSH_PROPERTIES ImageBrushProperties<d2d1helper.h>
D2D1(D2D1_SIZE_F size)static FORCEINLINE Matrix3x2F Translation<d2d1helper.h>
D2D1(DXGI_FORMAT dxgiFormat=DXGI_FORMAT_UNKNOWN,D2D1_ALPHA_MODE alphaMode=D2D1_ALPHA_MODE_UNKNOWN)FORCEINLINE _PIXEL_FORMAT PixelFormat<d2d1helper.h>
D2D1(Enum knownColor,FLOAT _a=1.0)FORCEINLINE ColorF<d2d1helper.h>
D2D1(FLOAT __11,FLOAT __12,FLOAT __21,FLOAT __22,FLOAT __31,FLOAT __32)FORCEINLINE Matrix3x2F<d2d1helper.h>
D2D1(FLOAT _r,FLOAT _g,FLOAT _b,FLOAT _a=1.0)FORCEINLINE ColorF<d2d1helper.h>
D2D1(FLOAT left=0.0f,FLOAT top=0.0f,FLOAT right=0.0f,FLOAT bottom=0.0f)FORCEINLINE _RECT_F RectF<d2d1helper.h>
D2D1(FLOAT m11,FLOAT m12,FLOAT m13,FLOAT m14,FLOAT m21,FLOAT m22,FLOAT m23,FLOAT m24,FLOAT m31,FLOAT m32,FLOAT m33,FLOAT m34,FLOAT m41,FLOAT m42,FLOAT m43,FLOAT m44,FLOAT m51,FLOAT m52,FLOAT m53,FLOAT m54)   inline Matrix5x4F<d2d1helper.h>
D2D1(FLOAT position,const D2D1_COLOR_F & color)FORCEINLINE _GRADIENT_STOP GradientStop<d2d1helper.h>
D2D1(FLOAT width=0.0f,FLOAT height=0.0f)FORCEINLINE _SIZE_F SizeF<d2d1helper.h>
D2D1(FLOAT x,FLOAT y)static FORCEINLINE Matrix3x2F Translation<d2d1helper.h>
D2D1(FLOAT x=0.0f,FLOAT y=0.0f)FORCEINLINE _VECTOR_2F Vector2F<d2d1helper.h>
D2D1(FLOAT x=0.0f,FLOAT y=0.0f,FLOAT z=0.0f)FORCEINLINE _VECTOR_3F Vector3F<d2d1helper.h>
D2D1(FLOAT x=0.0f,FLOAT y=0.0f,FLOAT z=0.0f,FLOAT w=0.0f)FORCEINLINE _VECTOR_4F Vector4F<d2d1helper.h>
D2D1(FLOAT x=0.f,FLOAT y=0.f)FORCEINLINE _POINT_2F Point2F<d2d1helper.h>
D2D1(INT32 left=0.0f,INT32 top=0.0f,INT32 right=0.0f,INT32 bottom=0.0f)FORCEINLINE _RECT_L RectL<d2d1helper.h>
D2D1(INT32 x=0,INT32 y=0)FORCEINLINE _POINT_2L Point2L<d2d1helper.h>
D2D1(T left,T top,T right,T bottom)template<d2d1helper.h>
D2D1(T width,T height)template<d2d1helper.h>
D2D1(T x,T y)template<d2d1helper.h>
D2D1(UINT32 left=0,UINT32 top=0,UINT32 right=0,UINT32 bottom=0)FORCEINLINE _RECT_U RectU<d2d1helper.h>
D2D1(UINT32 rgb,FLOAT _a)FORCEINLINE void init<d2d1helper.h>
D2D1(UINT32 rgb,FLOAT _a=1.0)FORCEINLINE ColorF<d2d1helper.h>
D2D1(UINT32 width=0,UINT32 height=0)FORCEINLINE _SIZE_U SizeU<d2d1helper.h>
D2D1(UINT32 x=0,UINT32 y=0)FORCEINLINE _POINT_2U Point2U<d2d1helper.h>
D2D1_VALUE_TYPE_BINDING()()()
D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType,const D2D1_FACTORY_OPTIONS & factoryOptions,Factory ** factory)HRESULT <d2d1.h>
D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType,Factory ** factory)HRESULT <d2d1.h>
D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType,REFIID riid,const D2D1_FACTORY_OPTIONS * pFactoryOptions,void ** ppIFactory)HRESULT WINAPI <d2d1.h>
D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType,REFIID riid,void ** ppv)inline HRESULT <d2d1.h>
D2D1InvertMatrix(D2D1_MATRIX_3X2_F * matrix)WINBOOL WINAPI <d2d1.h>
D2D1IsMatrixInvertible(const D2D1_MATRIX_3X2_F * matrix)WINBOOL WINAPI <d2d1.h>
D2D1MakeRotateMatrix(FLOAT angle,D2D1_POINT_2F center,D2D1_MATRIX_3X2_F * matrix)void WINAPI <d2d1.h>
D2D1MakeSkewMatrix(FLOAT angleX,FLOAT angleY,D2D1_POINT_2F center,D2D1_MATRIX_3X2_F * matrix)void WINAPI <d2d1.h>
D3D10_BYTES_FROM_BITS(x)<d3d10effect.h>
D3D10CompileEffectFromMemory(void * data,SIZE_T data_size,const char * filename,const D3D10_SHADER_MACRO * defines,ID3D10Include * include,UINT hlsl_flags,UINT fx_flags,ID3D10Blob ** effect,ID3D10Blob ** errors)HRESULT WINAPI <d3d10effect.h>
D3D10CompileShader(const char * data,SIZE_T data_size,const char * filename,const D3D10_SHADER_MACRO * defines,ID3D10Include * include,const char * entrypoint,const char * profile,UINT flags,ID3D10Blob ** shader,ID3D10Blob ** error_messages)HRESULT WINAPI <d3d10shader.h>
D3D10CreateBlob(SIZE_T data_size,ID3D10Blob ** blob)HRESULT WINAPI <d3d10misc.h>
D3D10CreateDevice(IDXGIAdapter * adapter,D3D10_DRIVER_TYPE driver_type,HMODULE swrast,UINT flags,UINT sdk_version,ID3D10Device ** device)HRESULT WINAPI <d3d10misc.h>
D3D10CreateDevice1(IDXGIAdapter *,D3D10_DRIVER_TYPE,HMODULE,UINT,D3D10_FEATURE_LEVEL1,UINT,ID3D10Device1 **)HRESULT WINAPI <d3d10_1.h>
D3D10CreateDeviceAndSwapChain(IDXGIAdapter * adapter,D3D10_DRIVER_TYPE driver_type,HMODULE swrast,UINT flags,UINT sdk_version,DXGI_SWAP_CHAIN_DESC * swapchain_desc,IDXGISwapChain ** swapchain,ID3D10Device ** device)HRESULT WINAPI <d3d10misc.h>
D3D10CreateDeviceAndSwapChain1(IDXGIAdapter * adapter,enum D3D10_DRIVER_TYPE driver_type,HMODULE swrast,UINT flags,D3D10_FEATURE_LEVEL1 feature_level,UINT sdk_version,DXGI_SWAP_CHAIN_DESC * swapchain_desc,IDXGISwapChain ** swapchain,ID3D10Device1 ** device)HRESULT __stdcall  <d3d10_1.h>
D3D10CreateEffectFromMemory(void * data,SIZE_T data_size,UINT flags,ID3D10Device * device,ID3D10EffectPool * effect_pool,ID3D10Effect ** effect)HRESULT WINAPI <d3d10effect.h>
D3D10CreateEffectPoolFromMemory(void * data,SIZE_T data_size,UINT fx_flags,ID3D10Device * device,ID3D10EffectPool ** effect_pool)HRESULT WINAPI <d3d10effect.h>
D3D10CreateStateBlock(ID3D10Device * device,D3D10_STATE_BLOCK_MASK * mask,ID3D10StateBlock ** stateblock)HRESULT WINAPI <d3d10effect.h>
D3D10DisassembleShader(const void * data,SIZE_T data_size,WINBOOL color_code,const char * comments,ID3D10Blob ** disassembly)HRESULT WINAPI <d3d10shader.h>
D3D10GetGeometryShaderProfile(ID3D10Device * device)const char<d3d10shader.h>
D3D10GetInputAndOutputSignatureBlob(const void * data,SIZE_T data_size,ID3D10Blob ** blob)HRESULT WINAPI <d3d10shader.h>
D3D10GetInputSignatureBlob(const void * data,SIZE_T data_size,ID3D10Blob ** blob)HRESULT WINAPI <d3d10shader.h>
D3D10GetOutputSignatureBlob(const void * data,SIZE_T data_size,ID3D10Blob ** blob)HRESULT WINAPI <d3d10shader.h>
D3D10GetPixelShaderProfile(ID3D10Device * device)const char<d3d10shader.h>
D3D10GetShaderDebugInfo(const void * data,SIZE_T data_size,ID3D10Blob ** blob)HRESULT WINAPI <d3d10shader.h>
D3D10GetVertexShaderProfile(ID3D10Device * device)const char<d3d10shader.h>
D3D10ReflectShader(const void * data,SIZE_T data_size,ID3D10ShaderReflection ** reflector)HRESULT WINAPI <d3d10shader.h>
D3D10StateBlockMaskDifference(D3D10_STATE_BLOCK_MASK * mask_x,D3D10_STATE_BLOCK_MASK * mask_y,D3D10_STATE_BLOCK_MASK * result)HRESULT WINAPI <d3d10effect.h>
D3D10StateBlockMaskDisableAll(D3D10_STATE_BLOCK_MASK * mask)HRESULT WINAPI <d3d10effect.h>
D3D10StateBlockMaskDisableCapture(D3D10_STATE_BLOCK_MASK * mask,D3D10_DEVICE_STATE_TYPES state_type,UINT start_idx,UINT count)HRESULT WINAPI <d3d10effect.h>
D3D10StateBlockMaskEnableAll(D3D10_STATE_BLOCK_MASK * mask)HRESULT WINAPI <d3d10effect.h>
D3D10StateBlockMaskEnableCapture(D3D10_STATE_BLOCK_MASK * mask,D3D10_DEVICE_STATE_TYPES state_type,UINT start_idx,UINT count)HRESULT WINAPI <d3d10effect.h>
D3D10StateBlockMaskGetSetting(D3D10_STATE_BLOCK_MASK * mask,D3D10_DEVICE_STATE_TYPES state_type,UINT idx)WINBOOL WINAPI <d3d10effect.h>
D3D10StateBlockMaskIntersect(D3D10_STATE_BLOCK_MASK * mask_x,D3D10_STATE_BLOCK_MASK * mask_y,D3D10_STATE_BLOCK_MASK * result)HRESULT WINAPI <d3d10effect.h>
D3D10StateBlockMaskUnion(D3D10_STATE_BLOCK_MASK * mask_x,D3D10_STATE_BLOCK_MASK * mask_y,D3D10_STATE_BLOCK_MASK * result)HRESULT WINAPI <d3d10effect.h>
D3D11_DECODE_IS_ANISOTROPIC_FILTER()()()
D3D11_DECODE_IS_ANISOTROPIC_FILTER(d3d11Filter)<d3d11.h>
D3D11_DECODE_IS_COMPARISON_FILTER(d3d11Filter)<d3d11.h>
D3D11_DECODE_MAG_FILTER()()()
D3D11_DECODE_MAG_FILTER(d3d11Filter)<d3d11.h>
D3D11_DECODE_MIN_FILTER()()()
D3D11_DECODE_MIN_FILTER(d3d11Filter)<d3d11.h>
D3D11_DECODE_MIP_FILTER()()()
D3D11_DECODE_MIP_FILTER(d3d11Filter)<d3d11.h>
D3D11_ENCODE_ANISOTROPIC_FILTER()()()
D3D11_ENCODE_ANISOTROPIC_FILTER(bComparison)<d3d11.h>
D3D11_ENCODE_BASIC_FILTER()()()
D3D11CalcSubresource(UINT MipSlice,UINT ArraySlice,UINT MipLevels)inline UINT <d3d11.h>
D3D11CreateDevice(IDXGIAdapter *,D3D_DRIVER_TYPE,HMODULE,UINT,const D3D_FEATURE_LEVEL *,UINT,UINT,ID3D11Device **,D3D_FEATURE_LEVEL *,ID3D11DeviceContext **)HRESULT WINAPI <d3d11.h>
D3D11CreateDeviceAndSwapChain(IDXGIAdapter * adapter,D3D_DRIVER_TYPE driver_type,HMODULE swrast,UINT flags,const D3D_FEATURE_LEVEL * feature_levels,UINT levels,UINT sdk_version,const DXGI_SWAP_CHAIN_DESC * swapchain_desc,IDXGISwapChain ** swapchain,ID3D11Device ** device,D3D_FEATURE_LEVEL * obtained_feature_level,ID3D11DeviceContext ** immediate_context)HRESULT __stdcall  <d3d11.h>
D3DCOLOR_ARGB(a,r,g,b)<d3d9types.h>
D3DCOLOR_AYUV(a,y,u,v)<d3d9types.h>
D3DCOLOR_COLORVALUE(r,g,b,a)<d3d9types.h>
D3DCOLOR_RGBA(r,g,b,a)<d3d9types.h>
D3DCOLOR_XRGB(r,g,b)<d3d9types.h>
D3DCOLOR_XYUV(y,u,v)<d3d9types.h>
D3DCompile(const void * data,SIZE_T data_size,const char * filename,const D3D_SHADER_MACRO * defines,ID3DInclude * include,const char * entrypoint,const char * target,UINT sflags,UINT eflags,ID3DBlob ** shader,ID3DBlob ** error_messages)HRESULT WINAPI <d3dcompiler.h>
D3DCreateBlob(SIZE_T data_size,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DDECL_END()()()
D3DDisassemble(const void * data,SIZE_T data_size,UINT flags,const char * comments,ID3DBlob ** disassembly)HRESULT WINAPI <d3dcompiler.h>
D3DFMT_DXT1('D', 'X', 'T', '1')<d3d9types.h>
D3DFMT_DXT2('D', 'X', 'T', '2')<d3d9types.h>
D3DFMT_DXT3('D', 'X', 'T', '3')<d3d9types.h>
D3DFMT_DXT4('D', 'X', 'T', '4')<d3d9types.h>
D3DFMT_DXT5('D', 'X', 'T', '5')<d3d9types.h>
D3DFMT_G8R8_G8B8('G', 'R', 'G', 'B')<d3d9types.h>
D3DFMT_MULTI2_ARGB8('M', 'E', 'T', '1')<d3d9types.h>
D3DFMT_R8G8_B8G8('R', 'G', 'B', 'G')<d3d9types.h>
D3DFMT_UYVY('U', 'Y', 'V', 'Y')<d3d9types.h>
D3DFMT_YUY2('Y', 'U', 'Y', '2')<d3d9types.h>
D3DFVF_TEXCOORDSIZE1(CoordIndex)<d3dtypes.h>
D3DFVF_TEXCOORDSIZE2(CoordIndex)<d3dtypes.h>
D3DFVF_TEXCOORDSIZE3(CoordIndex)<d3dtypes.h>
D3DFVF_TEXCOORDSIZE4(CoordIndex)<d3dtypes.h>
D3DGDI_GET_GDI2_DATA(pData) <d3dhalex.h>
D3DGDI_GET_STEREOMODE_DATA(pData) <d3dhalex.h>
D3DGDI_IS_GDI2(pData)      <d3dhalex.h>
D3DGDI_IS_STEREOMODE(pData) <d3dhalex.h>
D3DGetBlobPart(const void * data,SIZE_T data_size,D3D_BLOB_PART part,UINT flags,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DGetDebugInfo(const void * data,SIZE_T data_size,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DGetInputAndOutputSignatureBlob(const void * data,SIZE_T data_size,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DGetInputSignatureBlob(const void * data,SIZE_T data_size,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DGetOutputSignatureBlob(const void * data,SIZE_T data_size,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DLoadModule(const void * data,SIZE_T size,ID3D11Module ** module)HRESULT WINAPI <d3dcompiler.h>
D3DPERF_BeginEvent(D3DCOLOR color,const WCHAR * name)int WINAPI <d3d9.h>
D3DPERF_EndEvent(void)int WINAPI <d3d9.h>
D3DPERF_GetStatus(void)DWORD WINAPI <d3d9.h>
D3DPERF_QueryRepeatFrame(void)WINBOOL WINAPI <d3d9.h>
D3DPERF_SetMarker(D3DCOLOR color,const WCHAR * name)void WINAPI <d3d9.h>
D3DPERF_SetOptions(DWORD options)void WINAPI <d3d9.h>
D3DPERF_SetRegion(D3DCOLOR color,const WCHAR * name)void WINAPI <d3d9.h>
D3DPreprocess(const void * data,SIZE_T size,const char * filename,const D3D_SHADER_MACRO * defines,ID3DInclude * include,ID3DBlob ** shader,ID3DBlob ** error_messages)HRESULT WINAPI <d3dcompiler.h>
D3DPS_END()()()
D3DPS_VERSION()()()
D3DReadFileToBlob(const WCHAR * filename,ID3DBlob ** contents)HRESULT WINAPI <d3dcompiler.h>
D3DReflect(const void * data,SIZE_T data_size,REFIID riid,void ** reflector)HRESULT WINAPI <d3dcompiler.h>
D3DRENDERSTATE_STIPPLEPATTERN(y)<d3dtypes.h>
D3DRGB()()()
D3DRGBA()()()
D3DRMColorGetAlpha(D3DCOLOR)D3DVALUE WINAPI <d3drmdef.h>
D3DRMColorGetBlue(D3DCOLOR)D3DVALUE WINAPI <d3drmdef.h>
D3DRMColorGetGreen(D3DCOLOR)D3DVALUE WINAPI <d3drmdef.h>
D3DRMColorGetRed(D3DCOLOR)D3DVALUE WINAPI <d3drmdef.h>
D3DRMCreateColorRGB(D3DVALUE,D3DVALUE,D3DVALUE)D3DCOLOR WINAPI <d3drmdef.h>
D3DRMCreateColorRGB(D3DVALUE,D3DVALUE,D3DVALUE,D3DVALUE)D3DCOLOR WINAPI <d3drmdef.h>
D3DRMCreateColorRGBA(D3DVALUE,D3DVALUE,D3DVALUE,D3DVALUE)D3DCOLOR WINAPI <d3drmdef.h>
D3DRMDEVICE3UPDATECALLBACK(struct IDirect3DRMDevice3 * device,void * ctx,int count,D3DRECT * rects)typedef void<d3drmobj.h>
D3DRMDOWNSAMPLECALLBACK(struct IDirect3DRMTexture3 * texture,void * ctx,IDirectDrawSurface * src_surface,IDirectDrawSurface * dst_surface)typedef HRESULT<d3drmobj.h>
D3DRMFRAME3MOVECALLBACK(struct IDirect3DRMFrame3 * frame,void * ctx,D3DVALUE delta)typedef void<d3drmobj.h>
D3DRMFRAMEMOVECALLBACK(struct IDirect3DRMFrame * frame,void * ctx,D3DVALUE delta)typedef void<d3drmobj.h>
D3DRMLOADCALLBACK(struct IDirect3DRMObject * object,REFIID objectguid,void * arg)typedef void<d3drmobj.h>
D3DRMLOADTEXTURE3CALLBACK(char * tex_name,void * arg,struct IDirect3DRMTexture3 ** texture)typedef HRESULT<d3drmobj.h>
D3DRMLOADTEXTURECALLBACK(char * tex_name,void * arg,struct IDirect3DRMTexture ** texture)typedef HRESULT<d3drmobj.h>
D3DRMMatrixFromQuaternion(D3DRMMATRIX4D m,D3DRMQUATERNION * q)void WINAPI <d3drmdef.h>
D3DRMOBJECTCALLBACK(struct IDirect3DRMObject * obj,void * arg)typedef void<d3drmobj.h>
D3DRMQuaternionFromRotation(D3DRMQUATERNION * x,D3DVECTOR * axis,D3DVALUE theta)D3DRMQUATERNION<d3drmdef.h>
D3DRMQuaternionMultiply(D3DRMQUATERNION * ret,D3DRMQUATERNION * x,D3DRMQUATERNION * y)D3DRMQUATERNION<d3drmdef.h>
D3DRMQuaternionSlerp(D3DRMQUATERNION * ret,D3DRMQUATERNION * x,D3DRMQUATERNION * y,D3DVALUE alpha)D3DRMQUATERNION<d3drmdef.h>
D3DRMUPDATECALLBACK(struct IDirect3DRMDevice * device,void * ctx,int count,D3DRECT * rects)typedef void<d3drmobj.h>
D3DRMUSERVISUALCALLBACK(struct IDirect3DRMUserVisual * visual,void * ctx,D3DRMUSERVISUALREASON reason,struct IDirect3DRMDevice * device,struct IDirect3DRMViewport * viewport)typedef int<d3drmobj.h>
D3DRMVALIDATIONCALLBACK(struct IDirect3DRMTexture3 * texture,void * ctx,DWORD flags,DWORD rect_count,RECT * rects)typedef HRESULT<d3drmobj.h>
D3DRMVectorAdd(D3DVECTOR * ret,D3DVECTOR * x,D3DVECTOR * y)D3DVECTOR<d3drmdef.h>
D3DRMVectorCrossProduct(D3DVECTOR * ret,D3DVECTOR * x,D3DVECTOR * y)D3DVECTOR<d3drmdef.h>
D3DRMVectorDotProduct(D3DVECTOR * x,D3DVECTOR * y)D3DVALUE WINAPI <d3drmdef.h>
D3DRMVectorModulus(D3DVECTOR * x)D3DVALUE WINAPI <d3drmdef.h>
D3DRMVectorNormalize(D3DVECTOR * x)D3DVECTOR<d3drmdef.h>
D3DRMVectorRandom(D3DVECTOR * ret)D3DVECTOR<d3drmdef.h>
D3DRMVectorReflect(D3DVECTOR * ret,D3DVECTOR * ray,D3DVECTOR * normal)D3DVECTOR<d3drmdef.h>
D3DRMVectorRotate(D3DVECTOR * ret,D3DVECTOR * x,D3DVECTOR * axis,D3DVALUE theta)D3DVECTOR<d3drmdef.h>
D3DRMVectorScale(D3DVECTOR * ret,D3DVECTOR * x,D3DVALUE scale)D3DVECTOR<d3drmdef.h>
D3DRMVectorSubtract(D3DVECTOR * ret,D3DVECTOR * x,D3DVECTOR * y)D3DVECTOR<d3drmdef.h>
D3DRMWRAPCALLBACK(D3DVECTOR * vec,int * u,int * v,D3DVECTOR * a,D3DVECTOR * b,void * ctx)typedef void<d3drmdef.h>
D3DSHADER_COMMENT()()()
D3DSHADER_COMMENT(commentSize)<d3d9types.h>
D3DSHADER_VERSION_MAJOR(version)<d3d9types.h>
D3DSHADER_VERSION_MINOR(version)<d3d9types.h>
D3DSTATE_OVERRIDE(type)<d3dtypes.h>
D3DStripShader(const void * data,SIZE_T data_size,UINT flags,ID3DBlob ** blob)HRESULT WINAPI <d3dcompiler.h>
D3DTRIFLAG_STARTFLAT(len)<d3dtypes.h>
D3DTS_WORLDMATRIX(index)<d3d9types.h>
D3DVAL(val)<d3dtypes.h>
D3DVALP()()()
D3DVS_END()()()
D3DVS_VERSION()()()
D3DVSD_CONST()()()
D3DVSD_END()()()
D3DVSD_MAKETOKENTYPE()()()
D3DVSD_MAKETOKENTYPE(TokenType)<d3d9types.h>
D3DVSD_NOP()()()
D3DVSD_REG()()()
D3DVSD_SKIP()()()
D3DVSD_SKIP(Count)<d3d9types.h>
D3DVSD_STREAM()()()
D3DVSD_STREAM(StreamNumber)<d3d9types.h>
D3DVSD_STREAM_TESS()()()
D3DVSD_TESSNORMAL()()()
D3DVSD_TESSUV()()()
D3DVSD_TESSUV(Register)<d3d9types.h>
D3DWriteBlobToFile(ID3DBlob * blob,const WCHAR * filename,WINBOOL overwrite)HRESULT WINAPI <d3dcompiler.h>
D3DX_SKIP_DDS_MIP_LEVELS()()()
D3DXAssembleShader(const char * data,UINT data_len,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXAssembleShaderFromFile(const char * filename,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXAssembleShaderFromFileA(const char * filename,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXAssembleShaderFromFileW(const WCHAR * filename,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXAssembleShaderFromResource(HMODULE module,const char * resource,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXAssembleShaderFromResourceA(HMODULE module,const char * resource,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXAssembleShaderFromResourceW(HMODULE module,const WCHAR * resource,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXBoxBoundProbe(const D3DXVECTOR3 * vmin,const D3DXVECTOR3 * vmax,const D3DXVECTOR3 * ray_pos,const D3DXVECTOR3 * ray_dir)WINBOOL WINAPI <d3dx9mesh.h>
D3DXCheckCubeTextureRequirements(struct IDirect3DDevice9 * device,UINT * size,UINT * miplevels,DWORD usage,D3DFORMAT * format,D3DPOOL pool)HRESULT WINAPI <d3dx9tex.h>
D3DXCheckTextureRequirements(struct IDirect3DDevice9 * device,UINT * width,UINT * height,UINT * miplevels,DWORD usage,D3DFORMAT * format,D3DPOOL pool)HRESULT WINAPI <d3dx9tex.h>
D3DXCheckVersion(UINT d3dsdkvers,UINT d3dxsdkvers)WINBOOL WINAPI <d3dx9core.h>
D3DXCheckVolumeTextureRequirements(struct IDirect3DDevice9 * device,UINT * width,UINT * height,UINT * depth,UINT * miplevels,DWORD usage,D3DFORMAT * format,D3DPOOL pool)HRESULT WINAPI <d3dx9tex.h>
D3DXCleanMesh(D3DXCLEANTYPE clean_type,ID3DXMesh * mesh_in,const DWORD * adjacency_in,ID3DXMesh ** mesh_out,DWORD * adjacency_out,ID3DXBuffer ** errors)HRESULT WINAPI <d3dx9mesh.h>
D3DXCOLOR()inline  ::operator<d3dx9math.h>
D3DXCOLOR(const D3DCOLORVALUE & col)inline ::<d3dx9math.h>
D3DXCOLOR(const D3DXCOLOR & col)inline WINBOOL ::operator<d3dx9math.h>
D3DXCOLOR(const D3DXCOLOR &)WINBOOL operator<d3dx9math.h>
D3DXCOLOR(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXCOLOR(DWORD col)inline ::<d3dx9math.h>
D3DXCOLOR(FLOAT f)inline <d3dx9math.h>
D3DXCOLOR(FLOAT fr,FLOAT fg,FLOAT fb,FLOAT fa)inline ::<d3dx9math.h>
D3DXCOLOR(FLOAT)<d3dx9math.h>
D3DXCOLOR(FLOAT,const D3DXCOLOR &)friend  operator<d3dx9math.h>
D3DXColorAdd(D3DXCOLOR * pout,const D3DXCOLOR * pc1,const D3DXCOLOR * pc2)static inline D3DXCOLOR<d3dx9math.inl>
D3DXColorAdjustContrast(D3DXCOLOR * pout,const D3DXCOLOR * pc,FLOAT s)D3DXCOLOR<d3dx9math.h>
D3DXColorAdjustSaturation(D3DXCOLOR * pout,const D3DXCOLOR * pc,FLOAT s)D3DXCOLOR<d3dx9math.h>
D3DXColorLerp(D3DXCOLOR * pout,const D3DXCOLOR * pc1,const D3DXCOLOR * pc2,FLOAT s)static inline D3DXCOLOR<d3dx9math.inl>
D3DXColorModulate(D3DXCOLOR * pout,const D3DXCOLOR * pc1,const D3DXCOLOR * pc2)static inline D3DXCOLOR<d3dx9math.inl>
D3DXColorNegative(D3DXCOLOR * pout,const D3DXCOLOR * pc)static inline D3DXCOLOR<d3dx9math.inl>
D3DXColorScale(D3DXCOLOR * pout,const D3DXCOLOR * pc,FLOAT s)static inline D3DXCOLOR<d3dx9math.inl>
D3DXColorSubtract(D3DXCOLOR * pout,const D3DXCOLOR * pc1,const D3DXCOLOR * pc2)static inline D3DXCOLOR<d3dx9math.inl>
D3DXCompileShader(const char * src_data,UINT data_len,const D3DXMACRO * defines,ID3DXInclude * include,const char * function_name,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXCompileShaderFromFile(const char * filename,const D3DXMACRO * defines,ID3DXInclude * include,const char * entrypoint,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXCompileShaderFromFileA(const char * filename,const D3DXMACRO * defines,ID3DXInclude * include,const char * entrypoint,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXCompileShaderFromFileW(const WCHAR * filename,const D3DXMACRO * defines,ID3DXInclude * include,const char * entrypoint,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXCompileShaderFromResource(HMODULE module,const char * resource,const D3DXMACRO * defines,ID3DXInclude * include,const char * entrypoint,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXCompileShaderFromResourceA(HMODULE module,const char * resource,const D3DXMACRO * defines,ID3DXInclude * include,const char * entrypoint,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXCompileShaderFromResourceW(HMODULE module,const WCHAR * resource,const D3DXMACRO * defines,ID3DXInclude * include,const char * entrypoint,const char * profile,DWORD flags,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXComputeBoundingBox(const D3DXVECTOR3 * first_pos,DWORD num_vertices,DWORD stride,D3DXVECTOR3 * vmin,D3DXVECTOR3 * vmax)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeBoundingSphere(const D3DXVECTOR3 * first_pos,DWORD num_vertices,DWORD stride,D3DXVECTOR3 * center,FLOAT * radius)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeIMTFromPerTexelSignal(ID3DXMesh * mesh,DWORD texture_idx,float * texel_signal,UINT width,UINT height,UINT signal_dimension,UINT component_count,DWORD flags,LPD3DXUVATLASCB cb,void * ctx,ID3DXBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeIMTFromPerVertexSignal(ID3DXMesh * mesh,const float * vertex_signal,UINT signal_dimension,UINT signal_stride,DWORD flags,LPD3DXUVATLASCB cb,void * ctx,ID3DXBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeIMTFromSignal(ID3DXMesh * mesh,DWORD texture_idx,UINT signal_dimension,float max_uv_distance,DWORD flags,LPD3DXIMTSIGNALCALLBACK signal_cb,void * signal_ctx,LPD3DXUVATLASCB status_cb,void * status_ctx,ID3DXBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeIMTFromTexture(struct ID3DXMesh * mesh,struct IDirect3DTexture9 * texture,DWORD texture_idx,DWORD options,LPD3DXUVATLASCB cb,void * ctx,struct ID3DXBuffer ** out)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeNormalMap(IDirect3DTexture9 * texture,IDirect3DTexture9 * srctexture,const PALETTEENTRY * srcpalette,DWORD flags,DWORD channel,float amplitude)HRESULT WINAPI <d3dx9tex.h>
D3DXComputeNormals(ID3DXBaseMesh * mesh,const DWORD * adjacency)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeTangent(ID3DXMesh * mesh,DWORD stage,DWORD tangent_idx,DWORD binorm_idx,DWORD wrap,const DWORD * adjacency)HRESULT WINAPI <d3dx9mesh.h>
D3DXComputeTangentFrameEx(ID3DXMesh * mesh_in,DWORD texture_in_semantic,DWORD texture_in_idx,DWORD u_partial_out_semantic,DWORD u_partial_out_idx,DWORD v_partial_out_semantic,DWORD v_partial_out_idx,DWORD normal_out_semantic,DWORD normal_out_idx,DWORD flags,const DWORD * adjacency,float partial_edge_threshold,float singular_point_threshold,float normal_edge_threshold,ID3DXMesh ** mesh_out,ID3DXBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXConcatenateMeshes(struct ID3DXMesh ** meshes,UINT mesh_count,DWORD flags,const D3DXMATRIX * geometry_matrices,const D3DXMATRIX * texture_matrices,const D3DVERTEXELEMENT9 * declaration,struct IDirect3DDevice9 * device,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXConvertMeshSubsetToSingleStrip(struct ID3DXBaseMesh * mesh_in,DWORD attribute_id,DWORD ib_flags,struct IDirect3DIndexBuffer9 ** index_buffer,DWORD * index_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXConvertMeshSubsetToStrips(struct ID3DXBaseMesh * mesh_in,DWORD attribute_id,DWORD ib_flags,struct IDirect3DIndexBuffer9 ** index_buffer,DWORD * index_count,struct ID3DXBuffer ** strip_lengths,DWORD * strip_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateAnimationController(UINT max_animation_output_count,UINT max_animation_set_count,UINT max_track_count,UINT max_event_count,ID3DXAnimationController ** animation_controller)HRESULT WINAPI <d3dx9anim.h>
D3DXCreateBox(struct IDirect3DDevice9 * device,float width,float height,float depth,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateBuffer(DWORD size,ID3DXBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateCompressedAnimationSet(const char * name,double ticks_per_second,D3DXPLAYBACK_TYPE playback_type,ID3DXBuffer * compressed_data,UINT callback_key_count,const D3DXKEY_CALLBACK * callback_keys,ID3DXCompressedAnimationSet ** animation_set)HRESULT WINAPI <d3dx9anim.h>
D3DXCreateCubeTexture(struct IDirect3DDevice9 * device,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFile(struct IDirect3DDevice9 * device,const char * srcfile,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileA(struct IDirect3DDevice9 * device,const char * srcfile,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileEx(struct IDirect3DDevice9 * device,const char * srcfile,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileExA(struct IDirect3DDevice9 * device,const char * srcfile,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileExW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileInMemory(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatasize,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileInMemoryEx(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatasize,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromFileW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromResource(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromResourceA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromResourceEx(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromResourceExA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromResourceExW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * resource,UINT size,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCubeTextureFromResourceW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * resource,struct IDirect3DCubeTexture9 ** cube)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateCylinder(struct IDirect3DDevice9 * device,float radius1,float radius2,float length,UINT slices,UINT stacks,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateEffect(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatalen,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompiler(const char * srcdata,UINT srcdatalen,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** compiler,ID3DXBuffer ** parse_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompilerFromFile(const char * srcfile,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** effectcompiler,ID3DXBuffer ** parseerrors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompilerFromFileA(const char * srcfile,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** effectcompiler,ID3DXBuffer ** parseerrors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompilerFromFileW(const WCHAR * srcfile,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** effectcompiler,ID3DXBuffer ** parseerrors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompilerFromResource(HMODULE srcmodule,const char * srcresource,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** effectcompiler,ID3DXBuffer ** parseerrors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompilerFromResourceA(HMODULE srcmodule,const char * srcresource,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** effectcompiler,ID3DXBuffer ** parseerrors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectCompilerFromResourceW(HMODULE srcmodule,const WCHAR * srcresource,const D3DXMACRO * defines,ID3DXInclude * include,DWORD flags,ID3DXEffectCompiler ** effectcompiler,ID3DXBuffer ** parseerrors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectEx(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatalen,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromFile(struct IDirect3DDevice9 * device,const char * srcfile,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromFileA(struct IDirect3DDevice9 * device,const char * srcfile,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromFileEx(struct IDirect3DDevice9 * device,const char * srcfile,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromFileExA(struct IDirect3DDevice9 * device,const char * srcfile,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromFileExW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromFileW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromResource(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * srcresource,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromResourceA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * srcresource,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromResourceEx(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * srcresource,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromResourceExA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * srcresource,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromResourceExW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * srcresource,const D3DXMACRO * defines,struct ID3DXInclude * include,const char * skip_constants,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectFromResourceW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * srcresource,const D3DXMACRO * defines,struct ID3DXInclude * include,DWORD flags,struct ID3DXEffectPool * pool,struct ID3DXEffect ** effect,struct ID3DXBuffer ** compilation_errors)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateEffectPool(ID3DXEffectPool ** pool)HRESULT WINAPI <d3dx9effect.h>
D3DXCreateFont(struct IDirect3DDevice9 * device,INT height,UINT width,UINT weight,UINT miplevels,WINBOOL italic,DWORD charset,DWORD precision,DWORD quality,DWORD pitchandfamily,const char * facename,struct ID3DXFont ** font)HRESULT WINAPI <d3dx9core.h>
D3DXCreateFontA(struct IDirect3DDevice9 * device,INT height,UINT width,UINT weight,UINT miplevels,WINBOOL italic,DWORD charset,DWORD precision,DWORD quality,DWORD pitchandfamily,const char * facename,struct ID3DXFont ** font)HRESULT WINAPI <d3dx9core.h>
D3DXCreateFontIndirect(struct IDirect3DDevice9 * device,const D3DXFONT_DESCA * desc,struct ID3DXFont ** font)HRESULT WINAPI <d3dx9core.h>
D3DXCreateFontIndirectA(struct IDirect3DDevice9 * device,const D3DXFONT_DESCA * desc,struct ID3DXFont ** font)HRESULT WINAPI <d3dx9core.h>
D3DXCreateFontIndirectW(struct IDirect3DDevice9 * device,const D3DXFONT_DESCW * desc,struct ID3DXFont ** font)HRESULT WINAPI <d3dx9core.h>
D3DXCreateFontW(struct IDirect3DDevice9 * device,INT height,UINT width,UINT weight,UINT miplevels,WINBOOL italic,DWORD charset,DWORD precision,DWORD quality,DWORD pitchandfamily,const WCHAR * facename,struct ID3DXFont ** font)HRESULT WINAPI <d3dx9core.h>
D3DXCreateFragmentLinker(IDirect3DDevice9 * device,UINT size,ID3DXFragmentLinker ** linker)HRESULT WINAPI <d3dx9shader.h>
D3DXCreateFragmentLinkerEx(IDirect3DDevice9 * device,UINT size,DWORD flags,ID3DXFragmentLinker ** linker)HRESULT WINAPI <d3dx9shader.h>
D3DXCreateKeyframedAnimationSet(const char * name,double ticks_per_second,D3DXPLAYBACK_TYPE playback_type,UINT animation_count,UINT callback_key_count,const D3DXKEY_CALLBACK * callback_keys,ID3DXKeyframedAnimationSet ** animation_set)HRESULT WINAPI <d3dx9anim.h>
D3DXCreateLine(struct IDirect3DDevice9 * device,struct ID3DXLine ** line)HRESULT WINAPI <d3dx9core.h>
D3DXCreateMatrixStack(DWORD flags,ID3DXMatrixStack ** stack)HRESULT WINAPI <d3dx9math.h>
D3DXCreateMesh(DWORD face_count,DWORD vertex_count,DWORD flags,const D3DVERTEXELEMENT9 * declaration,struct IDirect3DDevice9 * device,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateMeshFVF(DWORD face_count,DWORD vertex_count,DWORD flags,DWORD fvf,struct IDirect3DDevice9 * device,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreatePatchMesh(const D3DXPATCHINFO * patch_info,DWORD patch_count,DWORD vertex_count,DWORD flags,const D3DVERTEXELEMENT9 * declaration,struct IDirect3DDevice9 * device,struct ID3DXPatchMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreatePMeshFromStream(struct IStream * stream,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXPMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreatePolygon(struct IDirect3DDevice9 * device,float length,UINT sides,struct ID3DXMesh ** mesh,ID3DXBuffer ** adjacency)HRESULT WINAPI <d3dx9shape.h>
D3DXCreatePRTBuffer(UINT sample_count,UINT coeff_count,UINT channel_count,ID3DXPRTBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreatePRTBufferTex(UINT width,UINT height,UINT coeff_count,UINT channel_count,ID3DXPRTBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreatePRTCompBuffer(D3DXSHCOMPRESSQUALITYTYPE quality,UINT cluster_count,UINT pca_count,LPD3DXSHPRTSIMCB cb,void * ctx,ID3DXPRTBuffer * input,ID3DXPRTCompBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreatePRTEngine(ID3DXMesh * mesh,DWORD * adjacency,WINBOOL extract_uv,ID3DXMesh * blocker_mesh,ID3DXPRTEngine ** engine)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateRenderToEnvMap(struct IDirect3DDevice9 * device,UINT size,UINT miplevels,D3DFORMAT format,WINBOOL stencil,D3DFORMAT stencil_format,struct ID3DXRenderToEnvMap ** rtem)HRESULT WINAPI <d3dx9core.h>
D3DXCreateRenderToSurface(struct IDirect3DDevice9 * device,UINT width,UINT height,D3DFORMAT format,WINBOOL stencil,D3DFORMAT stencil_format,struct ID3DXRenderToSurface ** rts)HRESULT WINAPI <d3dx9core.h>
D3DXCreateSkinInfo(DWORD vertex_count,const D3DVERTEXELEMENT9 * declaration,DWORD bone_count,ID3DXSkinInfo ** skin_info)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateSkinInfoFromBlendedMesh(ID3DXBaseMesh * mesh,DWORD bone_count,const D3DXBONECOMBINATION * bone_combination_table,ID3DXSkinInfo ** skin_info)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateSkinInfoFVF(DWORD vertex_count,DWORD fvf,DWORD bone_count,ID3DXSkinInfo ** skin_info)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateSphere(struct IDirect3DDevice9 * device,float radius,UINT slices,UINT stacks,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateSPMesh(ID3DXMesh * mesh,const DWORD * adjacency,const D3DXATTRIBUTEWEIGHTS * attribute_weights,const float * vertex_weights,ID3DXSPMesh ** spmesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateSprite(struct IDirect3DDevice9 * device,struct ID3DXSprite ** sprite)HRESULT WINAPI <d3dx9core.h>
D3DXCreateTeapot(struct IDirect3DDevice9 * device,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateText(struct IDirect3DDevice9 * device,HDC hdc,const char * text,float deviation,float extrusion,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency,GLYPHMETRICSFLOAT * glyphmetrics)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateTextA(struct IDirect3DDevice9 * device,HDC hdc,const char * text,float deviation,float extrusion,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency,GLYPHMETRICSFLOAT * glyphmetrics)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateTexture(struct IDirect3DDevice9 * device,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFile(struct IDirect3DDevice9 * device,const char * srcfile,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileA(struct IDirect3DDevice9 * device,const char * srcfile,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileEx(struct IDirect3DDevice9 * device,const char * srcfile,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileExA(struct IDirect3DDevice9 * device,const char * srcfile,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileExW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileInMemory(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatasize,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileInMemoryEx(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatasize,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromFileW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromResource(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromResourceA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromResourceEx(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromResourceExA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromResourceExW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * resource,UINT width,UINT height,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureFromResourceW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * resource,struct IDirect3DTexture9 ** texture)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateTextureGutterHelper(UINT width,UINT height,ID3DXMesh * mesh,float gutter_size,ID3DXTextureGutterHelper ** gh)HRESULT WINAPI <d3dx9mesh.h>
D3DXCreateTextureShader(const DWORD * pFunction,ID3DXTextureShader ** ppTextureShader)HRESULT WINAPI <d3dx9shader.h>
D3DXCreateTextW(struct IDirect3DDevice9 * device,HDC hdc,const WCHAR * text,float deviation,FLOAT extrusion,struct ID3DXMesh ** mesh,struct ID3DXBuffer ** adjacency,GLYPHMETRICSFLOAT * glyphmetrics)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateTorus(struct IDirect3DDevice9 * device,float innerradius,float outerradius,UINT sides,UINT rings,struct ID3DXMesh ** mesh,ID3DXBuffer ** adjacency)HRESULT WINAPI <d3dx9shape.h>
D3DXCreateVolumeTexture(struct IDirect3DDevice9 * device,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFile(struct IDirect3DDevice9 * device,const char * srcfile,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileA(struct IDirect3DDevice9 * device,const char * srcfile,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileEx(struct IDirect3DDevice9 * device,const char * srcfile,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileExA(struct IDirect3DDevice9 * device,const char * srcfile,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileExW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileInMemory(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatasize,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileInMemoryEx(struct IDirect3DDevice9 * device,const void * srcdata,UINT srcdatasize,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromFileW(struct IDirect3DDevice9 * device,const WCHAR * srcfile,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromResource(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromResourceA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromResourceEx(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromResourceExA(struct IDirect3DDevice9 * device,HMODULE srcmodule,const char * resource,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromResourceExW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * resource,UINT width,UINT height,UINT depth,UINT miplevels,DWORD usage,D3DFORMAT format,D3DPOOL pool,DWORD filter,DWORD mipfilter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo,PALETTEENTRY * palette,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXCreateVolumeTextureFromResourceW(struct IDirect3DDevice9 * device,HMODULE srcmodule,const WCHAR * resource,struct IDirect3DVolumeTexture9 ** volume)HRESULT WINAPI <d3dx9tex.h>
D3DXDebugMute(WINBOOL mute)WINBOOL WINAPI <d3dx9core.h>
D3DXDeclaratorFromFVF(DWORD,D3DVERTEXELEMENT9[MAX_FVF_DECL_SIZE])HRESULT WINAPI <d3dx9mesh.h>
D3DXDisassembleEffect(ID3DXEffect * effect,WINBOOL enable_color_code,ID3DXBuffer ** disassembly)HRESULT WINAPI <d3dx9effect.h>
D3DXDisassembleShader(const DWORD * pShader,WINBOOL EnableColorCode,const char * pComments,struct ID3DXBuffer ** ppDisassembly)HRESULT WINAPI <d3dx9shader.h>
D3DXERR_CANNOTATTRSORT(2902)<d3dx9.h>
D3DXERR_CANNOTMODIFYINDEXBUFFER(2900)<d3dx9.h>
D3DXERR_CANNOTREMOVELASTITEM(2908)<d3dx9.h>
D3DXERR_DUPLICATENAMEDFRAGMENT(2907)<d3dx9.h>
D3DXERR_INVALIDDATA(2905)<d3dx9.h>
D3DXERR_INVALIDMESH(2901)<d3dx9.h>
D3DXERR_LOADEDMESHASNODATA(2906)<d3dx9.h>
D3DXERR_SKINNINGNOTSUPPORTED(2903)<d3dx9.h>
D3DXERR_TOOMANYINFLUENCES(2904)<d3dx9.h>
D3DXFileCreate(struct ID3DXFile ** file)STDAPI <d3dx9xof.h>
D3DXFillCubeTexture(struct IDirect3DCubeTexture9 * cube,LPD3DXFILL3D function,void * data)HRESULT WINAPI <d3dx9tex.h>
D3DXFillCubeTextureTX(struct IDirect3DCubeTexture9 * cube,ID3DXTextureShader * texture_shader)HRESULT WINAPI <d3dx9tex.h>
D3DXFillTexture(struct IDirect3DTexture9 * texture,LPD3DXFILL2D function,void * data)HRESULT WINAPI <d3dx9tex.h>
D3DXFillTextureTX(struct IDirect3DTexture9 * texture,ID3DXTextureShader * texture_shader)HRESULT WINAPI <d3dx9tex.h>
D3DXFillVolumeTexture(struct IDirect3DVolumeTexture9 * volume,LPD3DXFILL3D function,void * data)HRESULT WINAPI <d3dx9tex.h>
D3DXFillVolumeTextureTX(struct IDirect3DVolumeTexture9 * volume,ID3DXTextureShader * texture_shader)HRESULT WINAPI <d3dx9tex.h>
D3DXFilterTexture(struct IDirect3DBaseTexture9 * texture,const PALETTEENTRY * palette,UINT srclevel,DWORD filter)HRESULT WINAPI <d3dx9tex.h>
D3DXFindShaderComment(const DWORD * byte_code,DWORD fourcc,const void ** data,UINT * size)HRESULT WINAPI <d3dx9shader.h>
D3DXFLOAT16()inline ::<d3dx9math.h>
D3DXFLOAT16(const D3DXFLOAT16 & f)inline WINBOOL ::operator<d3dx9math.h>
D3DXFLOAT16(const D3DXFLOAT16 &)WINBOOL operator<d3dx9math.h>
D3DXFLOAT16(FLOAT f)inline ::<d3dx9math.h>
D3DXFloat16To32Array(FLOAT * pout,const D3DXFLOAT16 * pin,UINT n)FLOAT<d3dx9math.h>
D3DXFloat32To16Array(D3DXFLOAT16 * pout,const FLOAT * pin,UINT n)D3DXFLOAT16<d3dx9math.h>
D3DXFrameAppendChild(D3DXFRAME * parent,const D3DXFRAME * child)HRESULT WINAPI <d3dx9anim.h>
D3DXFrameCalculateBoundingSphere(const D3DXFRAME * frame_root,D3DXVECTOR3 * center,FLOAT * radius)HRESULT WINAPI <d3dx9anim.h>
D3DXFrameDestroy(D3DXFRAME * frame_root,ID3DXAllocateHierarchy * alloc)HRESULT WINAPI <d3dx9anim.h>
D3DXFrameFind(const D3DXFRAME * root,const char * name)D3DXFRAME<d3dx9anim.h>
D3DXFrameNumNamedMatrices(const D3DXFRAME * frame_root)UINT WINAPI <d3dx9anim.h>
D3DXFrameRegisterNamedMatrices(D3DXFRAME * frame_root,ID3DXAnimationController * animation_controller)HRESULT WINAPI <d3dx9anim.h>
D3DXFresnelTerm(FLOAT costheta,FLOAT refractionindex)FLOAT WINAPI <d3dx9math.h>
D3DXFVFFromDeclarator(const D3DVERTEXELEMENT9 * decl,DWORD * fvf)HRESULT WINAPI <d3dx9mesh.h>
D3DXGenerateOutputDecl(D3DVERTEXELEMENT9 * decl_out,const D3DVERTEXELEMENT9 * decl_in)HRESULT WINAPI <d3dx9mesh.h>
D3DXGeneratePMesh(ID3DXMesh * mesh,const DWORD * adjacency,const D3DXATTRIBUTEWEIGHTS * attribute_weights,const float * vertex_weights,DWORD min_value,DWORD flags,ID3DXPMesh ** pmesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXGetDeclLength(const D3DVERTEXELEMENT9 * decl)UINT    WINAPI <d3dx9mesh.h>
D3DXGetDeclVertexSize(const D3DVERTEXELEMENT9 * decl,DWORD stream_idx)UINT    WINAPI <d3dx9mesh.h>
D3DXGetDriverLevel(struct IDirect3DDevice9 * device)UINT WINAPI <d3dx9core.h>
D3DXGetFVFVertexSize(DWORD)UINT    WINAPI <d3dx9mesh.h>
D3DXGetImageInfoFromFile(const char * file,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetImageInfoFromFileA(const char * file,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetImageInfoFromFileInMemory(const void * data,UINT data_size,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetImageInfoFromFileW(const WCHAR * file,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetImageInfoFromResource(HMODULE module,const char * resource,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetImageInfoFromResourceA(HMODULE module,const char * resource,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetImageInfoFromResourceW(HMODULE module,const WCHAR * resource,D3DXIMAGE_INFO * info)HRESULT WINAPI <d3dx9tex.h>
D3DXGetPixelShaderProfile(struct IDirect3DDevice9 * device)const char<d3dx9shader.h>
D3DXGetShaderConstantTable(const DWORD * byte_code,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXGetShaderConstantTableEx(const DWORD * byte_code,DWORD flags,ID3DXConstantTable ** constant_table)HRESULT WINAPI <d3dx9shader.h>
D3DXGetShaderInputSemantics(const DWORD * pFunction,D3DXSEMANTIC * pSemantics,UINT * pCount)HRESULT WINAPI <d3dx9shader.h>
D3DXGetShaderOutputSemantics(const DWORD * pFunction,D3DXSEMANTIC * pSemantics,UINT * pCount)HRESULT WINAPI <d3dx9shader.h>
D3DXGetShaderSamplers(const DWORD * byte_code,const char ** samplers,UINT * count)HRESULT WINAPI <d3dx9shader.h>
D3DXGetShaderSize(const DWORD * byte_code)UINT WINAPI <d3dx9shader.h>
D3DXGetShaderVersion(const DWORD * byte_code)DWORD WINAPI <d3dx9shader.h>
D3DXGetVertexShaderProfile(struct IDirect3DDevice9 * device)const char<d3dx9shader.h>
D3DXIntersect(ID3DXBaseMesh * mesh,const D3DXVECTOR3 * ray_position,const D3DXVECTOR3 * ray_direction,WINBOOL * hit,DWORD * face_idx,float * u,float * v,float * distance,ID3DXBuffer ** hits,DWORD * hit_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXIntersectSubset(ID3DXBaseMesh * mesh,DWORD attribute_id,const D3DXVECTOR3 * ray_position,const D3DXVECTOR3 * ray_direction,WINBOOL * hit,DWORD * face_idx,float * u,float * v,float * distance,ID3DXBuffer ** hits,DWORD * hit_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXIntersectTri(const D3DXVECTOR3 * vtx0,const D3DXVECTOR3 * vtx1,const D3DXVECTOR3 * vtx2,const D3DXVECTOR3 * ray_pos,const D3DXVECTOR3 * ray_dir,FLOAT * u,FLOAT * v,FLOAT * dist)WINBOOL WINAPI <d3dx9mesh.h>
D3DXLoadMeshFromX(const char * filename,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadMeshFromXA(const char * filename,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadMeshFromXInMemory(const void * data,DWORD data_size,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadMeshFromXof(struct ID3DXFileData * file_data,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadMeshFromXResource(HMODULE module,const char * resource,const char * resource_type,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadMeshFromXW(const WCHAR * filename,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadMeshHierarchyFromX(const char * filename,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXAllocateHierarchy * alloc,struct ID3DXLoadUserData * user_data_loader,D3DXFRAME ** frame_hierarchy,struct ID3DXAnimationController ** animation_controller)HRESULT WINAPI <d3dx9anim.h>
D3DXLoadMeshHierarchyFromXA(const char * filename,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXAllocateHierarchy * alloc,struct ID3DXLoadUserData * user_data_loader,D3DXFRAME ** frame_hierarchy,struct ID3DXAnimationController ** animation_controller)HRESULT WINAPI <d3dx9anim.h>
D3DXLoadMeshHierarchyFromXInMemory(const void * data,DWORD data_size,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXAllocateHierarchy * alloc,struct ID3DXLoadUserData * user_data_loader,D3DXFRAME ** frame_hierarchy,struct ID3DXAnimationController ** animation_controller)HRESULT WINAPI <d3dx9anim.h>
D3DXLoadMeshHierarchyFromXW(const WCHAR * filename,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXAllocateHierarchy * alloc,struct ID3DXLoadUserData * user_data_loader,D3DXFRAME ** frame_hierarchy,struct ID3DXAnimationController ** animation_controller)HRESULT WINAPI <d3dx9anim.h>
D3DXLoadPatchMeshFromXof(struct ID3DXFileData * file_data,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXPatchMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadPRTBufferFromFile(const char * filename,ID3DXPRTBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadPRTBufferFromFileA(const char * filename,ID3DXPRTBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadPRTBufferFromFileW(const WCHAR * filename,ID3DXPRTBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadPRTCompBufferFromFile(const char * filename,ID3DXPRTCompBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadPRTCompBufferFromFileA(const char * filename,ID3DXPRTCompBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadPRTCompBufferFromFileW(const WCHAR * filename,ID3DXPRTCompBuffer ** buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadSkinMeshFromXof(struct ID3DXFileData * file_data,DWORD flags,struct IDirect3DDevice9 * device,struct ID3DXBuffer ** adjacency,struct ID3DXBuffer ** materials,struct ID3DXBuffer ** effect_instances,DWORD * material_count,struct ID3DXSkinInfo ** skin_info,struct ID3DXMesh ** mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXLoadSurfaceFromFile(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,const char * srcfile,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromFileA(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,const char * srcfile,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromFileInMemory(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,const void * srcdata,UINT srcdatasize,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromFileW(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,const WCHAR * srcfile,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromMemory(IDirect3DSurface9 * dst_surface,const PALETTEENTRY * dst_palette,const RECT * dst_rect,const void * src_memory,D3DFORMAT src_format,UINT src_pitch,const PALETTEENTRY * src_palette,const RECT * src_rect,DWORD filter,D3DCOLOR color_key)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromResource(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,HMODULE srcmodule,const char * resource,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromResourceA(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,HMODULE srcmodule,const char * resource,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromResourceW(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,HMODULE srcmodule,const WCHAR * resource,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadSurfaceFromSurface(struct IDirect3DSurface9 * destsurface,const PALETTEENTRY * destpalette,const RECT * destrect,struct IDirect3DSurface9 * srcsurface,const PALETTEENTRY * srcpalette,const RECT * srcrect,DWORD filter,D3DCOLOR colorkey)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromFile(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,const char * srcfile,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromFileA(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,const char * srcfile,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromFileInMemory(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,const void * srcdata,UINT srcdatasize,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromFileW(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,const WCHAR * srcfile,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromMemory(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,const void * srcmemory,D3DFORMAT srcformat,UINT srcrowpitch,UINT srcslicepitch,const PALETTEENTRY * srcpalette,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromResource(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,HMODULE srcmodule,const char * resource,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromResourceA(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,HMODULE srcmodule,const char * resource,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromResourceW(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,HMODULE srcmodule,const WCHAR * resource,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey,D3DXIMAGE_INFO * srcinfo)HRESULT WINAPI <d3dx9tex.h>
D3DXLoadVolumeFromVolume(struct IDirect3DVolume9 * destvolume,const PALETTEENTRY * destpalette,const D3DBOX * destbox,struct IDirect3DVolume9 * srcvolume,const PALETTEENTRY * srcpalette,const D3DBOX * srcbox,DWORD filter,D3DCOLOR colorkey)HRESULT WINAPI <d3dx9tex.h>
D3DXMATRIX()inline  ::operator<d3dx9math.h>
D3DXMATRIX(const D3DMATRIX & mat)inline ::<d3dx9math.h>
D3DXMATRIX(const D3DXMATRIX & mat)inline WINBOOL ::operator<d3dx9math.h>
D3DXMATRIX(const D3DXMATRIX &)WINBOOL operator<d3dx9math.h>
D3DXMATRIX(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXMATRIX(FLOAT f)inline <d3dx9math.h>
D3DXMATRIX(FLOAT f11,FLOAT f12,FLOAT f13,FLOAT f14,FLOAT f21,FLOAT f22,FLOAT f23,FLOAT f24,FLOAT f31,FLOAT f32,FLOAT f33,FLOAT f34,FLOAT f41,FLOAT f42,FLOAT f43,FLOAT f44)inline ::<d3dx9math.h>
D3DXMATRIX(FLOAT)<d3dx9math.h>
D3DXMATRIX(FLOAT,const D3DXMATRIX &)friend  operator<d3dx9math.h>
D3DXMATRIX(UINT row,UINT col)inline FLOAT<d3dx9math.h>
D3DXMatrixAffineTransformation(D3DXMATRIX * pout,FLOAT scaling,const D3DXVECTOR3 * rotationcenter,const D3DXQUATERNION * rotation,const D3DXVECTOR3 * translation)D3DXMATRIX<d3dx9math.h>
D3DXMatrixAffineTransformation2D(D3DXMATRIX * pout,FLOAT scaling,const D3DXVECTOR2 * protationcenter,FLOAT rotation,const D3DXVECTOR2 * ptranslation)D3DXMATRIX<d3dx9math.h>
D3DXMatrixDecompose(D3DXVECTOR3 * poutscale,D3DXQUATERNION * poutrotation,D3DXVECTOR3 * pouttranslation,const D3DXMATRIX * pm)HRESULT WINAPI <d3dx9math.h>
D3DXMatrixDeterminant(const D3DXMATRIX * pm)FLOAT WINAPI <d3dx9math.h>
D3DXMatrixIdentity(D3DXMATRIX * pout)static inline D3DXMATRIX<d3dx9math.inl>
D3DXMatrixInverse(D3DXMATRIX * pout,FLOAT * pdeterminant,const D3DXMATRIX * pm)D3DXMATRIX<d3dx9math.h>
D3DXMatrixIsIdentity(D3DXMATRIX * pm)static inline WINBOOL <d3dx9math.inl>
D3DXMatrixLookAtLH(D3DXMATRIX * pout,const D3DXVECTOR3 * peye,const D3DXVECTOR3 * pat,const D3DXVECTOR3 * pup)D3DXMATRIX<d3dx9math.h>
D3DXMatrixLookAtRH(D3DXMATRIX * pout,const D3DXVECTOR3 * peye,const D3DXVECTOR3 * pat,const D3DXVECTOR3 * pup)D3DXMATRIX<d3dx9math.h>
D3DXMatrixMultiply(D3DXMATRIX * pout,const D3DXMATRIX * pm1,const D3DXMATRIX * pm2)D3DXMATRIX<d3dx9math.h>
D3DXMatrixMultiplyTranspose(D3DXMATRIX * pout,const D3DXMATRIX * pm1,const D3DXMATRIX * pm2)D3DXMATRIX<d3dx9math.h>
D3DXMatrixOrthoLH(D3DXMATRIX * pout,FLOAT w,FLOAT h,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixOrthoOffCenterLH(D3DXMATRIX * pout,FLOAT l,FLOAT r,FLOAT b,FLOAT t,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixOrthoOffCenterRH(D3DXMATRIX * pout,FLOAT l,FLOAT r,FLOAT b,FLOAT t,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixOrthoRH(D3DXMATRIX * pout,FLOAT w,FLOAT h,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixPerspectiveFovLH(D3DXMATRIX * pout,FLOAT fovy,FLOAT aspect,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixPerspectiveFovRH(D3DXMATRIX * pout,FLOAT fovy,FLOAT aspect,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixPerspectiveLH(D3DXMATRIX * pout,FLOAT w,FLOAT h,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixPerspectiveOffCenterLH(D3DXMATRIX * pout,FLOAT l,FLOAT r,FLOAT b,FLOAT t,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixPerspectiveOffCenterRH(D3DXMATRIX * pout,FLOAT l,FLOAT r,FLOAT b,FLOAT t,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixPerspectiveRH(D3DXMATRIX * pout,FLOAT w,FLOAT h,FLOAT zn,FLOAT zf)D3DXMATRIX<d3dx9math.h>
D3DXMatrixReflect(D3DXMATRIX * pout,const D3DXPLANE * pplane)D3DXMATRIX<d3dx9math.h>
D3DXMatrixRotationAxis(D3DXMATRIX * pout,const D3DXVECTOR3 * pv,FLOAT angle)D3DXMATRIX<d3dx9math.h>
D3DXMatrixRotationQuaternion(D3DXMATRIX * pout,const D3DXQUATERNION * pq)D3DXMATRIX<d3dx9math.h>
D3DXMatrixRotationX(D3DXMATRIX * pout,FLOAT angle)D3DXMATRIX<d3dx9math.h>
D3DXMatrixRotationY(D3DXMATRIX * pout,FLOAT angle)D3DXMATRIX<d3dx9math.h>
D3DXMatrixRotationYawPitchRoll(D3DXMATRIX * pout,FLOAT yaw,FLOAT pitch,FLOAT roll)D3DXMATRIX<d3dx9math.h>
D3DXMatrixRotationZ(D3DXMATRIX * pout,FLOAT angle)D3DXMATRIX<d3dx9math.h>
D3DXMatrixScaling(D3DXMATRIX * pout,FLOAT sx,FLOAT sy,FLOAT sz)D3DXMATRIX<d3dx9math.h>
D3DXMatrixShadow(D3DXMATRIX * pout,const D3DXVECTOR4 * plight,const D3DXPLANE * pPlane)D3DXMATRIX<d3dx9math.h>
D3DXMatrixTransformation(D3DXMATRIX * pout,const D3DXVECTOR3 * pscalingcenter,const D3DXQUATERNION * pscalingrotation,const D3DXVECTOR3 * pscaling,const D3DXVECTOR3 * protationcenter,const D3DXQUATERNION * protation,const D3DXVECTOR3 * ptranslation)D3DXMATRIX<d3dx9math.h>
D3DXMatrixTransformation2D(D3DXMATRIX * pout,const D3DXVECTOR2 * pscalingcenter,FLOAT scalingrotation,const D3DXVECTOR2 * pscaling,const D3DXVECTOR2 * protationcenter,FLOAT rotation,const D3DXVECTOR2 * ptranslation)D3DXMATRIX<d3dx9math.h>
D3DXMatrixTranslation(D3DXMATRIX * pout,FLOAT x,FLOAT y,FLOAT z)D3DXMATRIX<d3dx9math.h>
D3DXMatrixTranspose(D3DXMATRIX * pout,const D3DXMATRIX * pm)D3DXMATRIX<d3dx9math.h>
D3DXOptimizeFaces(const void * indices,UINT face_count,UINT vertex_count,WINBOOL idx_32bit,DWORD * face_remap)HRESULT WINAPI <d3dx9mesh.h>
D3DXOptimizeVertices(const void * indices,UINT face_count,UINT vertex_count,WINBOOL idx_32bit,DWORD * vertex_remap)HRESULT WINAPI <d3dx9mesh.h>
D3DXPLANE()inline  ::operator<d3dx9math.h>
D3DXPLANE(const D3DXPLANE & pl)inline WINBOOL ::operator<d3dx9math.h>
D3DXPLANE(const D3DXPLANE &)WINBOOL operator<d3dx9math.h>
D3DXPLANE(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXPLANE(FLOAT fa,FLOAT fb,FLOAT fc,FLOAT fd)inline ::<d3dx9math.h>
D3DXPlaneDot(const D3DXPLANE * pp,const D3DXVECTOR4 * pv)static inline FLOAT <d3dx9math.inl>
D3DXPlaneDotCoord(const D3DXPLANE * pp,const D3DXVECTOR4 * pv)static inline FLOAT <d3dx9math.inl>
D3DXPlaneDotNormal(const D3DXPLANE * pp,const D3DXVECTOR4 * pv)static inline FLOAT <d3dx9math.inl>
D3DXPlaneFromPointNormal(D3DXPLANE * pout,const D3DXVECTOR3 * pvpoint,const D3DXVECTOR3 * pvnormal)D3DXPLANE<d3dx9math.h>
D3DXPlaneFromPoints(D3DXPLANE * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2,const D3DXVECTOR3 * pv3)D3DXPLANE<d3dx9math.h>
D3DXPlaneIntersectLine(D3DXVECTOR3 * pout,const D3DXPLANE * pp,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)D3DXVECTOR3<d3dx9math.h>
D3DXPlaneNormalize(D3DXPLANE * pout,const D3DXPLANE * pp)D3DXPLANE<d3dx9math.h>
D3DXPlaneTransform(D3DXPLANE * pout,const D3DXPLANE * pplane,const D3DXMATRIX * pm)D3DXPLANE<d3dx9math.h>
D3DXPlaneTransformArray(D3DXPLANE * pout,UINT outstride,const D3DXPLANE * pplane,UINT pstride,const D3DXMATRIX * pm,UINT n)D3DXPLANE<d3dx9math.h>
D3DXPreprocessShader(const char * data,UINT data_len,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXPreprocessShaderFromFile(const char * filename,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXPreprocessShaderFromFileA(const char * filename,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXPreprocessShaderFromFileW(const WCHAR * filename,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXPreprocessShaderFromResource(HMODULE module,const char * resource,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXPreprocessShaderFromResourceA(HMODULE module,const char * resource,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXPreprocessShaderFromResourceW(HMODULE module,const WCHAR * resource,const D3DXMACRO * defines,ID3DXInclude * include,ID3DXBuffer ** shader,ID3DXBuffer ** error_messages)HRESULT WINAPI <d3dx9shader.h>
D3DXQUATERNION()inline  ::operator<d3dx9math.h>
D3DXQUATERNION(const D3DXQUATERNION & quat)inline WINBOOL ::operator<d3dx9math.h>
D3DXQUATERNION(const D3DXQUATERNION &)WINBOOL operator<d3dx9math.h>
D3DXQUATERNION(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXQUATERNION(FLOAT f)inline <d3dx9math.h>
D3DXQUATERNION(FLOAT fx,FLOAT fy,FLOAT fz,FLOAT fw)inline ::<d3dx9math.h>
D3DXQUATERNION(FLOAT)<d3dx9math.h>
D3DXQUATERNION(FLOAT,const D3DXQUATERNION &)friend  operator<d3dx9math.h>
D3DXQuaternionBaryCentric(D3DXQUATERNION * pout,const D3DXQUATERNION * pq1,const D3DXQUATERNION * pq2,const D3DXQUATERNION * pq3,FLOAT f,FLOAT g)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionConjugate(D3DXQUATERNION * pout,const D3DXQUATERNION * pq)static inline D3DXQUATERNION<d3dx9math.inl>
D3DXQuaternionDot(const D3DXQUATERNION * pq1,const D3DXQUATERNION * pq2)static inline FLOAT <d3dx9math.inl>
D3DXQuaternionExp(D3DXQUATERNION * pout,const D3DXQUATERNION * pq)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionIdentity(D3DXQUATERNION * pout)static inline D3DXQUATERNION<d3dx9math.inl>
D3DXQuaternionInverse(D3DXQUATERNION * pout,const D3DXQUATERNION * pq)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionIsIdentity(D3DXQUATERNION * pq)static inline WINBOOL <d3dx9math.inl>
D3DXQuaternionLength(const D3DXQUATERNION * pq)static inline FLOAT <d3dx9math.inl>
D3DXQuaternionLengthSq(const D3DXQUATERNION * pq)static inline FLOAT <d3dx9math.inl>
D3DXQuaternionLn(D3DXQUATERNION * pout,const D3DXQUATERNION * pq)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionMultiply(D3DXQUATERNION * pout,const D3DXQUATERNION * pq1,const D3DXQUATERNION * pq2)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionNormalize(D3DXQUATERNION * pout,const D3DXQUATERNION * pq)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionRotationAxis(D3DXQUATERNION * pout,const D3DXVECTOR3 * pv,FLOAT angle)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionRotationMatrix(D3DXQUATERNION * pout,const D3DXMATRIX * pm)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionRotationYawPitchRoll(D3DXQUATERNION * pout,FLOAT yaw,FLOAT pitch,FLOAT roll)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionSlerp(D3DXQUATERNION * pout,const D3DXQUATERNION * pq1,const D3DXQUATERNION * pq2,FLOAT t)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionSquad(D3DXQUATERNION * pout,const D3DXQUATERNION * pq1,const D3DXQUATERNION * pq2,const D3DXQUATERNION * pq3,const D3DXQUATERNION * pq4,FLOAT t)D3DXQUATERNION<d3dx9math.h>
D3DXQuaternionSquadSetup(D3DXQUATERNION * paout,D3DXQUATERNION * pbout,D3DXQUATERNION * pcout,const D3DXQUATERNION * pq0,const D3DXQUATERNION * pq1,const D3DXQUATERNION * pq2,const D3DXQUATERNION * pq3)void WINAPI <d3dx9math.h>
D3DXQuaternionToAxisAngle(const D3DXQUATERNION * pq,D3DXVECTOR3 * paxis,FLOAT * pangle)void WINAPI <d3dx9math.h>
D3DXRectPatchSize(const FLOAT * segment_count,DWORD * num_triangles,DWORD * num_vertices)HRESULT WINAPI <d3dx9mesh.h>
D3DXSaveMeshHierarchyToFile(const char * filename,DWORD format,const D3DXFRAME * frame_root,ID3DXAnimationController * animation_controller,ID3DXSaveUserData * user_data_saver)HRESULT WINAPI <d3dx9anim.h>
D3DXSaveMeshHierarchyToFileA(const char * filename,DWORD format,const D3DXFRAME * frame_root,ID3DXAnimationController * animation_controller,ID3DXSaveUserData * user_data_saver)HRESULT WINAPI <d3dx9anim.h>
D3DXSaveMeshHierarchyToFileW(const WCHAR * filename,DWORD format,const D3DXFRAME * frame_root,ID3DXAnimationController * animation_controller,ID3DXSaveUserData * user_data_saver)HRESULT WINAPI <d3dx9anim.h>
D3DXSaveMeshToX(const char * filename,ID3DXMesh * mesh,const DWORD * adjacency,const D3DXMATERIAL * materials,const D3DXEFFECTINSTANCE * effect_instances,DWORD material_count,DWORD format)HRESULT WINAPI <d3dx9mesh.h>
D3DXSaveMeshToXA(const char * filename,ID3DXMesh * mesh,const DWORD * adjacency,const D3DXMATERIAL * materials,const D3DXEFFECTINSTANCE * effect_instances,DWORD material_count,DWORD format)HRESULT WINAPI <d3dx9mesh.h>
D3DXSaveMeshToXW(const WCHAR * filename,ID3DXMesh * mesh,const DWORD * adjacency,const D3DXMATERIAL * materials,const D3DXEFFECTINSTANCE * effect_instances,DWORD material_count,DWORD format)HRESULT WINAPI <d3dx9mesh.h>
D3DXSavePRTBufferToFile(const char * filename,ID3DXPRTBuffer * buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXSavePRTBufferToFileA(const char * filename,ID3DXPRTBuffer * buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXSavePRTBufferToFileW(const WCHAR * filename,ID3DXPRTBuffer * buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXSavePRTCompBufferToFile(const char * filename,ID3DXPRTCompBuffer * buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXSavePRTCompBufferToFileA(const char * filename,ID3DXPRTCompBuffer * buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXSavePRTCompBufferToFileW(const WCHAR * filename,ID3DXPRTCompBuffer * buffer)HRESULT WINAPI <d3dx9mesh.h>
D3DXSaveSurfaceToFile(const char * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DSurface9 * srcsurface,const PALETTEENTRY * srcpalette,const RECT * srcrect)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveSurfaceToFileA(const char * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DSurface9 * srcsurface,const PALETTEENTRY * srcpalette,const RECT * srcrect)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveSurfaceToFileInMemory(struct ID3DXBuffer ** destbuffer,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DSurface9 * srcsurface,const PALETTEENTRY * srcpalette,const RECT * srcrect)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveSurfaceToFileW(const WCHAR * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DSurface9 * srcsurface,const PALETTEENTRY * srcpalette,const RECT * srcrect)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveTextureToFile(const char * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DBaseTexture9 * srctexture,const PALETTEENTRY * srcpalette)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveTextureToFileA(const char * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DBaseTexture9 * srctexture,const PALETTEENTRY * srcpalette)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveTextureToFileInMemory(struct ID3DXBuffer ** destbuffer,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DBaseTexture9 * srctexture,const PALETTEENTRY * srcpalette)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveTextureToFileW(const WCHAR * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DBaseTexture9 * srctexture,const PALETTEENTRY * srcpalette)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveVolumeToFile(const char * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DVolume9 * srcvolume,const PALETTEENTRY * srcpalette,const D3DBOX * srcbox)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveVolumeToFileA(const char * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DVolume9 * srcvolume,const PALETTEENTRY * srcpalette,const D3DBOX * srcbox)HRESULT WINAPI <d3dx9tex.h>
D3DXSaveVolumeToFileW(const WCHAR * destfile,D3DXIMAGE_FILEFORMAT destformat,struct IDirect3DVolume9 * srcvolume,const PALETTEENTRY * srcpalette,const D3DBOX * srcbox)HRESULT WINAPI <d3dx9tex.h>
D3DXSHAdd(FLOAT * out,UINT order,const FLOAT * a,const FLOAT * b)FLOAT<d3dx9math.h>
D3DXSHDot(UINT order,const FLOAT * a,const FLOAT * b)FLOAT WINAPI <d3dx9math.h>
D3DXSHEvalConeLight(UINT order,const D3DXVECTOR3 * dir,FLOAT radius,FLOAT Rintensity,FLOAT Gintensity,FLOAT Bintensity,FLOAT * rout,FLOAT * gout,FLOAT * bout)HRESULT WINAPI <d3dx9math.h>
D3DXSHEvalDirection(FLOAT * out,UINT order,const D3DXVECTOR3 * dir)FLOAT<d3dx9math.h>
D3DXSHEvalDirectionalLight(UINT order,const D3DXVECTOR3 * dir,FLOAT Rintensity,FLOAT Gintensity,FLOAT Bintensity,FLOAT * rout,FLOAT * gout,FLOAT * bout)HRESULT WINAPI <d3dx9math.h>
D3DXSHEvalHemisphereLight(UINT order,const D3DXVECTOR3 * dir,D3DXCOLOR top,D3DXCOLOR bottom,FLOAT * rout,FLOAT * gout,FLOAT * bout)HRESULT WINAPI <d3dx9math.h>
D3DXSHEvalSphericalLight(UINT order,const D3DXVECTOR3 * dir,FLOAT radius,FLOAT Rintensity,FLOAT Gintensity,FLOAT Bintensity,FLOAT * rout,FLOAT * gout,FLOAT * bout)HRESULT WINAPI <d3dx9math.h>
D3DXSHMultiply2(FLOAT * out,const FLOAT * a,const FLOAT * b)FLOAT<d3dx9math.h>
D3DXSHMultiply3(FLOAT * out,const FLOAT * a,const FLOAT * b)FLOAT<d3dx9math.h>
D3DXSHMultiply4(FLOAT * out,const FLOAT * a,const FLOAT * b)FLOAT<d3dx9math.h>
D3DXSHPRTCompSplitMeshSC(UINT * cluster_idx,UINT vertex_count,UINT cluster_count,UINT * scluster_ids,UINT scluster_count,void * index_buffer_in,WINBOOL ib_in_32bit,UINT face_count,ID3DXBuffer ** index_buffer_out,UINT * index_buffer_size,WINBOOL ib_out_32bit,ID3DXBuffer ** face_remap,ID3DXBuffer ** vertex_data,UINT * vertex_data_length,UINT * sc_cluster_list,D3DXSHPRTSPLITMESHCLUSTERDATA * sc_data)HRESULT WINAPI <d3dx9mesh.h>
D3DXSHPRTCompSuperCluster(UINT * cluster_ids,ID3DXMesh * scene,UINT max_cluster_count,UINT cluster_count,UINT * scluster_ids,UINT * scluster_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXSHRotate(FLOAT * out,UINT order,const D3DXMATRIX * matrix,const FLOAT * in)FLOAT<d3dx9math.h>
D3DXSHRotateZ(FLOAT * out,UINT order,FLOAT angle,const FLOAT * in)FLOAT<d3dx9math.h>
D3DXSHScale(FLOAT * out,UINT order,const FLOAT * a,const FLOAT scale)FLOAT<d3dx9math.h>
D3DXSimplifyMesh(ID3DXMesh * mesh_in,const DWORD * adjacency,const D3DXATTRIBUTEWEIGHTS * attribute_weights,const float * vertex_weights,DWORD min_value,DWORD flags,ID3DXMesh ** mesh_out)HRESULT WINAPI <d3dx9mesh.h>
D3DXSphereBoundProbe(const D3DXVECTOR3 * center,FLOAT radius,const D3DXVECTOR3 * ray_pos,const D3DXVECTOR3 * ray_dir)WINBOOL WINAPI <d3dx9mesh.h>
D3DXSplitMesh(ID3DXMesh * mesh_in,const DWORD * adjacency_in,const DWORD max_size,const DWORD flags,DWORD * mesh_out_count,ID3DXBuffer ** mesh_out,ID3DXBuffer ** adjacency_out,ID3DXBuffer ** face_remap_out,ID3DXBuffer ** vertex_remap_out)HRESULT WINAPI <d3dx9mesh.h>
D3DXTessellateNPatches(ID3DXMesh * mesh_in,const DWORD * adjacency_in,float segment_count,WINBOOL quad_interp,ID3DXMesh ** mesh_out,ID3DXBuffer ** adjacency_out)HRESULT WINAPI <d3dx9mesh.h>
D3DXTessellateRectPatch(struct IDirect3DVertexBuffer9 * buffer,const float * segment_count,const D3DVERTEXELEMENT9 * declaration,const D3DRECTPATCH_INFO * patch_info,struct ID3DXMesh * mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXTessellateTriPatch(struct IDirect3DVertexBuffer9 * buffer,const float * segment_count,const D3DVERTEXELEMENT9 * declaration,const D3DTRIPATCH_INFO * patch_info,struct ID3DXMesh * mesh)HRESULT WINAPI <d3dx9mesh.h>
D3DXToDegree(radian)<d3dx9math.h>
D3DXToRadian(degree)<d3dx9math.h>
D3DXTriPatchSize(const FLOAT * segment_count,DWORD * num_triangles,DWORD * num_vertices)HRESULT WINAPI <d3dx9mesh.h>
D3DXUVAtlasCreate(ID3DXMesh * mesh_in,UINT max_chart_count,float max_stretch_in,UINT width,UINT height,float gutter,DWORD texture_idx,const DWORD * adjacency,const DWORD * false_edges,const float * imt_array,LPD3DXUVATLASCB cb,float cb_freq,void * ctx,DWORD flags,ID3DXMesh ** mesh_out,ID3DXBuffer ** face_partitioning_out,ID3DXBuffer ** vertex_remap_out,float * max_stretch_out,UINT * chart_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXUVAtlasPack(ID3DXMesh * mesh,UINT width,UINT height,float gutter,DWORD texture_idx,const DWORD * partition_result_adjacency,LPD3DXUVATLASCB cb,float cb_freq,void * ctx,DWORD flags,ID3DXBuffer * face_partitioning)HRESULT WINAPI <d3dx9mesh.h>
D3DXUVAtlasPartition(ID3DXMesh * mesh_in,UINT max_chart_count,float max_stretch_in,DWORD texture_idx,const DWORD * adjacency,const DWORD * false_edges,const float * imt_array,LPD3DXUVATLASCB cb,float cb_freq,void * ctx,DWORD flags,ID3DXMesh ** mesh_out,ID3DXBuffer ** face_partitioning_out,ID3DXBuffer ** vertex_remap_out,ID3DXBuffer ** adjacency_out,float * max_stretch_out,UINT * chart_count)HRESULT WINAPI <d3dx9mesh.h>
D3DXValidMesh(ID3DXMesh * mesh,const DWORD * adjacency,ID3DXBuffer ** errors)HRESULT WINAPI <d3dx9mesh.h>
D3DXValidPatchMesh(ID3DXPatchMesh * mesh,DWORD * degenerate_vertex_count,DWORD * degenerate_patch_count,ID3DXBuffer ** errors)HRESULT WINAPI <d3dx9mesh.h>
D3DXVec2Add(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2)static inline D3DXVECTOR2<d3dx9math.inl>
D3DXVec2BaryCentric(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2,const D3DXVECTOR2 * pv3,FLOAT f,FLOAT g)D3DXVECTOR2<d3dx9math.h>
D3DXVec2CatmullRom(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv0,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2,const D3DXVECTOR2 * pv3,FLOAT s)D3DXVECTOR2<d3dx9math.h>
D3DXVec2CCW(const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2)static inline FLOAT <d3dx9math.inl>
D3DXVec2Dot(const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2)static inline FLOAT <d3dx9math.inl>
D3DXVec2Hermite(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pt1,const D3DXVECTOR2 * pv2,const D3DXVECTOR2 * pt2,FLOAT s)D3DXVECTOR2<d3dx9math.h>
D3DXVec2Length(const D3DXVECTOR2 * pv)static inline FLOAT <d3dx9math.inl>
D3DXVec2LengthSq(const D3DXVECTOR2 * pv)static inline FLOAT <d3dx9math.inl>
D3DXVec2Lerp(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2,FLOAT s)static inline D3DXVECTOR2<d3dx9math.inl>
D3DXVec2Maximize(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2)static inline D3DXVECTOR2<d3dx9math.inl>
D3DXVec2Minimize(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2)static inline D3DXVECTOR2<d3dx9math.inl>
D3DXVec2Normalize(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv)D3DXVECTOR2<d3dx9math.h>
D3DXVec2Scale(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv,FLOAT s)static inline D3DXVECTOR2<d3dx9math.inl>
D3DXVec2Subtract(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv1,const D3DXVECTOR2 * pv2)static inline D3DXVECTOR2<d3dx9math.inl>
D3DXVec2Transform(D3DXVECTOR4 * pout,const D3DXVECTOR2 * pv,const D3DXMATRIX * pm)D3DXVECTOR4<d3dx9math.h>
D3DXVec2TransformArray(D3DXVECTOR4 * pout,UINT outstride,const D3DXVECTOR2 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR4<d3dx9math.h>
D3DXVec2TransformCoord(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv,const D3DXMATRIX * pm)D3DXVECTOR2<d3dx9math.h>
D3DXVec2TransformCoordArray(D3DXVECTOR2 * pout,UINT outstride,const D3DXVECTOR2 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR2<d3dx9math.h>
D3DXVec2TransformNormal(D3DXVECTOR2 * pout,const D3DXVECTOR2 * pv,const D3DXMATRIX * pm)D3DXVECTOR2<d3dx9math.h>
D3DXVec2TransformNormalArray(D3DXVECTOR2 * pout,UINT outstride,const D3DXVECTOR2 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR2<d3dx9math.h>
D3DXVec3Add(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3BaryCentric(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2,const D3DXVECTOR3 * pv3,FLOAT f,FLOAT g)D3DXVECTOR3<d3dx9math.h>
D3DXVec3CatmullRom(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv0,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2,const D3DXVECTOR3 * pv3,FLOAT s)D3DXVECTOR3<d3dx9math.h>
D3DXVec3Cross(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3Dot(const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)static inline FLOAT <d3dx9math.inl>
D3DXVec3Hermite(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pt1,const D3DXVECTOR3 * pv2,const D3DXVECTOR3 * pt2,FLOAT s)D3DXVECTOR3<d3dx9math.h>
D3DXVec3Length(const D3DXVECTOR3 * pv)static inline FLOAT <d3dx9math.inl>
D3DXVec3LengthSq(const D3DXVECTOR3 * pv)static inline FLOAT <d3dx9math.inl>
D3DXVec3Lerp(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2,FLOAT s)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3Maximize(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3Minimize(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3Normalize(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv)D3DXVECTOR3<d3dx9math.h>
D3DXVec3Project(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv,const D3DVIEWPORT9 * pviewport,const D3DXMATRIX * pprojection,const D3DXMATRIX * pview,const D3DXMATRIX * pworld)D3DXVECTOR3<d3dx9math.h>
D3DXVec3ProjectArray(D3DXVECTOR3 * pout,UINT outstride,const D3DXVECTOR3 * pv,UINT vstride,const D3DVIEWPORT9 * pviewport,const D3DXMATRIX * pprojection,const D3DXMATRIX * pview,const D3DXMATRIX * pworld,UINT n)D3DXVECTOR3<d3dx9math.h>
D3DXVec3Scale(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv,FLOAT s)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3Subtract(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv1,const D3DXVECTOR3 * pv2)static inline D3DXVECTOR3<d3dx9math.inl>
D3DXVec3Transform(D3DXVECTOR4 * pout,const D3DXVECTOR3 * pv,const D3DXMATRIX * pm)D3DXVECTOR4<d3dx9math.h>
D3DXVec3TransformArray(D3DXVECTOR4 * pout,UINT outstride,const D3DXVECTOR3 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR4<d3dx9math.h>
D3DXVec3TransformCoord(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv,const D3DXMATRIX * pm)D3DXVECTOR3<d3dx9math.h>
D3DXVec3TransformCoordArray(D3DXVECTOR3 * pout,UINT outstride,const D3DXVECTOR3 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR3<d3dx9math.h>
D3DXVec3TransformNormal(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv,const D3DXMATRIX * pm)D3DXVECTOR3<d3dx9math.h>
D3DXVec3TransformNormalArray(D3DXVECTOR3 * pout,UINT outstride,const D3DXVECTOR3 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR3<d3dx9math.h>
D3DXVec3Unproject(D3DXVECTOR3 * pout,const D3DXVECTOR3 * pv,const D3DVIEWPORT9 * pviewport,const D3DXMATRIX * pprojection,const D3DXMATRIX * pview,const D3DXMATRIX * pworld)D3DXVECTOR3<d3dx9math.h>
D3DXVec3UnprojectArray(D3DXVECTOR3 * pout,UINT outstride,const D3DXVECTOR3 * pv,UINT vstride,const D3DVIEWPORT9 * pviewport,const D3DXMATRIX * pprojection,const D3DXMATRIX * pview,const D3DXMATRIX * pworld,UINT n)D3DXVECTOR3<d3dx9math.h>
D3DXVec4Add(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2)static inline D3DXVECTOR4<d3dx9math.inl>
D3DXVec4BaryCentric(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2,const D3DXVECTOR4 * pv3,FLOAT f,FLOAT g)D3DXVECTOR4<d3dx9math.h>
D3DXVec4CatmullRom(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv0,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2,const D3DXVECTOR4 * pv3,FLOAT s)D3DXVECTOR4<d3dx9math.h>
D3DXVec4Cross(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2,const D3DXVECTOR4 * pv3)D3DXVECTOR4<d3dx9math.h>
D3DXVec4Dot(const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2)static inline FLOAT <d3dx9math.inl>
D3DXVec4Hermite(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pt1,const D3DXVECTOR4 * pv2,const D3DXVECTOR4 * pt2,FLOAT s)D3DXVECTOR4<d3dx9math.h>
D3DXVec4Length(const D3DXVECTOR4 * pv)static inline FLOAT <d3dx9math.inl>
D3DXVec4LengthSq(const D3DXVECTOR4 * pv)static inline FLOAT <d3dx9math.inl>
D3DXVec4Lerp(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2,FLOAT s)static inline D3DXVECTOR4<d3dx9math.inl>
D3DXVec4Maximize(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2)static inline D3DXVECTOR4<d3dx9math.inl>
D3DXVec4Minimize(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2)static inline D3DXVECTOR4<d3dx9math.inl>
D3DXVec4Normalize(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv)D3DXVECTOR4<d3dx9math.h>
D3DXVec4Scale(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv,FLOAT s)static inline D3DXVECTOR4<d3dx9math.inl>
D3DXVec4Subtract(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv1,const D3DXVECTOR4 * pv2)static inline D3DXVECTOR4<d3dx9math.inl>
D3DXVec4Transform(D3DXVECTOR4 * pout,const D3DXVECTOR4 * pv,const D3DXMATRIX * pm)D3DXVECTOR4<d3dx9math.h>
D3DXVec4TransformArray(D3DXVECTOR4 * pout,UINT outstride,const D3DXVECTOR4 * pv,UINT vstride,const D3DXMATRIX * pm,UINT n)D3DXVECTOR4<d3dx9math.h>
D3DXVECTOR2()inline  ::operator<d3dx9math.h>
D3DXVECTOR2(const D3DXVECTOR2 & v)inline WINBOOL ::operator<d3dx9math.h>
D3DXVECTOR2(const D3DXVECTOR2 &)WINBOOL operator<d3dx9math.h>
D3DXVECTOR2(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXVECTOR2(FLOAT f)inline <d3dx9math.h>
D3DXVECTOR2(FLOAT fx,FLOAT fy)inline ::<d3dx9math.h>
D3DXVECTOR2(FLOAT)<d3dx9math.h>
D3DXVECTOR2(FLOAT,const D3DXVECTOR2 &)friend  operator<d3dx9math.h>
D3DXVECTOR3()inline  ::operator<d3dx9math.h>
D3DXVECTOR3(const D3DVECTOR & v)inline ::<d3dx9math.h>
D3DXVECTOR3(const D3DXVECTOR3 & v)inline WINBOOL ::operator<d3dx9math.h>
D3DXVECTOR3(const D3DXVECTOR3 &)WINBOOL operator<d3dx9math.h>
D3DXVECTOR3(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXVECTOR3(FLOAT f)inline <d3dx9math.h>
D3DXVECTOR3(FLOAT fx,FLOAT fy,FLOAT fz)inline ::<d3dx9math.h>
D3DXVECTOR3(FLOAT)<d3dx9math.h>
D3DXVECTOR3(FLOAT,const struct D3DXVECTOR3 &)friend  operator<d3dx9math.h>
D3DXVECTOR4()inline  ::operator<d3dx9math.h>
D3DXVECTOR4(const D3DXVECTOR4 & v)inline WINBOOL ::operator<d3dx9math.h>
D3DXVECTOR4(const D3DXVECTOR4 &)WINBOOL operator<d3dx9math.h>
D3DXVECTOR4(const FLOAT * pf)inline ::<d3dx9math.h>
D3DXVECTOR4(FLOAT f)inline <d3dx9math.h>
D3DXVECTOR4(FLOAT fx,FLOAT fy,FLOAT fz,FLOAT fw)inline ::<d3dx9math.h>
D3DXVECTOR4(FLOAT)<d3dx9math.h>
D3DXVECTOR4(FLOAT,const D3DXVECTOR4 &)friend  operator<d3dx9math.h>
D3DXWeldVertices(ID3DXMesh * mesh,DWORD flags,const D3DXWELDEPSILONS * epsilons,const DWORD * adjacency_in,DWORD * adjacency_out,DWORD * face_remap_out,ID3DXBuffer ** vertex_remap_out)HRESULT WINAPI <d3dx9mesh.h>
DAD_AutoScroll(HWND hwnd,AUTO_SCROLL_DATA * pad,const POINT * pptNow) SHSTDAPI_<shlobj.h>
DAD_DragEnterEx(HWND hwndTarget,const POINT ptStart) SHSTDAPI_<shlobj.h>
DAD_DragEnterEx2(HWND hwndTarget,const POINT ptStart,IDataObject * pdtObject) SHSTDAPI_<shlobj.h>
DAD_DragLeave(void) SHSTDAPI_<shlobj.h>
DAD_DragMove(POINT pt) SHSTDAPI_<shlobj.h>
DAD_SetDragImage(HIMAGELIST him,POINT * pptOffset) SHSTDAPI_<shlobj.h>
DAD_ShowDragImage(WINBOOL fShow) SHSTDAPI_<shlobj.h>
DAOBINDINGFUNC(f)<daogetrw.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbFields,CdbField,DAOField)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbGroups,CdbGroup,DAOGroup)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbIndexes,CdbIndex,DAOIndex)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbProperties,CdbProperty,DAOProperty)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbQueryDefs,CdbQueryDef,DAOQueryDef)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbRelations,CdbRelation,DAORelation)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbTableDefs,CdbTableDef,DAOTableDef)<_dbdao.h>
DAOMFC_DYNAMIC_COLLECTION_DECL(CdbUsers,CdbUser,DAOUser)<_dbdao.h>
DAOMFC_STATIC_COLLECTION_DECL(CdbContainers,CdbContainer,DAOContainer)<_dbdao.h>
DAOMFC_STATIC_COLLECTION_DECL(CdbDatabases,CdbDatabase,DAODatabase)<_dbdao.h>
DAOMFC_STATIC_COLLECTION_DECL(CdbDocuments,CdbDocument,DAODocument)<_dbdao.h>
DAOMFC_STATIC_COLLECTION_DECL(CdbErrors,CdbError,DAOError)<_dbdao.h>
DAOMFC_STATIC_COLLECTION_DECL(CdbParameters,CdbParameter,DAOParameter)<_dbdao.h>
DAOMFC_STATIC_COLLECTION_DECL(CdbRecordsets,CdbRecordset,DAORecordset)<_dbdao.h>
data() void<xa.h>
Data(ULONG)UCHAR <wsdtypes.h>
Data_t()<comutil.h>
Data_t(BSTR bstr,bool fCopy)inline _bstr_t::::<comutil.h>
Data_t(const _bstr_t & s1,const _bstr_t & s2)inline _bstr_t::::<comutil.h>
Data_t(const char * s)inline _bstr_t::::<comutil.h>
Data_t(const Data_t & s)<comutil.h>
Data_t(const wchar_t * s)inline _bstr_t::::<comutil.h>
DataConvert(DBTYPE wSrcType,DBTYPE wDstType,DBLENGTH cbSrcLength,DBLENGTH * pcbDstLength,void * pSrc,void * pDst,DBLENGTH cbDstMaxLength,DBSTATUS dbsSrcStatus,DBSTATUS * pdbsStatus,BYTE bPrecision,BYTE bScale,DBDATACONVERT dwFlags)virtual HRESULT WINAPI <msdadc.h>
dataFlags(DWORD openHandle,UINT event,LPVOID pData,UINT32 dataLength,UINT32 totalLength,UINT32)typedef VOID _stdcall CHANNEL_OPEN_EVENT_FN<cchannel.h>
dataLength(LPVOID pInitHandle,UINT event,LPVOID pData,UINT)typedef VOID _stdcall CHANNEL_INIT_EVENT_FN<wsman.h>
DATEFMT_ENUMPROCA(LPSTR) typedef WINBOOL<winnls.h>
DATEFMT_ENUMPROCEXA(LPSTR,CALID) typedef WINBOOL<winnls.h>
DATEFMT_ENUMPROCEXEX(LPWSTR,CALID,LPARAM) typedef WINBOOL<winnls.h>
DATEFMT_ENUMPROCEXW(LPWSTR,CALID) typedef WINBOOL<winnls.h>
DATEFMT_ENUMPROCW(LPWSTR) typedef WINBOOL<winnls.h>
DateTime_CloseMonthCal(hdp)<commctrl.h>
DateTime_GetDateTimePickerInfo(hdp, pdtpi)<commctrl.h>
DateTime_GetIdealSize(hdp, psize)<commctrl.h>
DateTime_GetMonthCal(hdp)<commctrl.h>
DateTime_GetMonthCalColor(hdp,iColor)<commctrl.h>
DateTime_GetMonthCalFont(hdp)<commctrl.h>
DateTime_GetMonthCalStyle(hdp)<commctrl.h>
DateTime_GetRange(hdp,rgst)<commctrl.h>
DateTime_GetSystemtime(hdp,pst)<commctrl.h>
DateTime_SetFormat(hdp,sz)<commctrl.h>
DateTime_SetMonthCalColor(hdp,iColor,clr)<commctrl.h>
DateTime_SetMonthCalFont(hdp,hfont,fRedraw)<commctrl.h>
DateTime_SetMonthCalStyle(hdp, dwStyle)<commctrl.h>
DateTime_SetRange(hdp,gd,rgst)<commctrl.h>
DateTime_SetSystemtime(hdp,gd,pst)<commctrl.h>
DavAddConnection(HANDLE * ConnectionHandle,LPCWSTR RemoteName,LPCWSTR UserName,LPCWSTR Password,PBYTE ClientCert,DWORD CertSize)DWORD WINAPI <davclnt.h>
DavCancelConnectionsToServer(LPWSTR lpName,WINBOOL fForce)DWORD WINAPI <davclnt.h>
DavDeleteConnection(HANDLE ConnectionHandle)DWORD WINAPI <davclnt.h>
DavFlushFile(HANDLE hFile)DWORD WINAPI <davclnt.h>
DavGetExtendedError(HANDLE hFile,DWORD * ExtError,LPWSTR ExtErrorString,DWORD * cChSize)DWORD WINAPI <davclnt.h>
DavGetHTTPFromUNCPath(LPCWSTR UncPath,LPWSTR HttpPath,LPDWORD lpSize)DWORD WINAPI <davclnt.h>
DavGetTheLockOwnerOfTheFile(LPCWSTR FileName,PWSTR LockOwnerName,PULONG LockOwnerNameLengthInBytes)DWORD WINAPI <davclnt.h>
DavGetUNCFromHTTPPath(LPCWSTR HttpPath,LPWSTR UncPath,LPDWORD lpSize)DWORD WINAPI <davclnt.h>
DavInvalidateCache(LPWSTR URLName)DWORD WINAPI <davclnt.h>
DavRegisterAuthCallback(PFNDAVAUTHCALLBACK CallBack,ULONG Version)OPAQUE_HANDLE WINAPI <davclnt.h>
DavUnregisterAuthCallback(OPAQUE_HANDLE hCallback)VOID WINAPI <davclnt.h>
DBDAOERR(x)<dbdaoerr.h>
DbgBreakPoint()<wdm.h>
DbgBreakPoint(VOID)<wdm.h>
DbgBreakPointWithStatus(IN ULONG Status)<wdm.h>
DbgHelpCreateUserDump(LPCSTR FileName,PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,PVOID UserData) WINBOOL WINAPI <psdk>
DbgHelpCreateUserDumpW(LPCWSTR FileName,PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,PVOID UserData) WINBOOL WINAPI <psdk>
DBGMEM_CheckMemFn(void * pmalloc,int fReportOrphans)void EXPORTDBG __cdecl <mapidbg.h>
DBGMEM_Encapsulate(pmalloc,pszSubsys,fCheckOften)<mapidbg.h>
DBGMEM_EncapsulateFn(void * pmalloc,char * pszSubsys,int fCheckOften)void<mapidbg.h>
DBGMEM_LeakHook(FARPROC pfn)void EXPORTDBG __cdecl <mapidbg.h>
DBGMEM_NoLeakDetectFn(void * pmalloc,void * pv)void EXPORTDBG __cdecl <mapidbg.h>
DBGMEM_SetFailureAtFn(void * pmalloc,ULONG ulFailureAt)void EXPORTDBG __cdecl <mapidbg.h>
DBGMEM_Shutdown(pmalloc)<mapidbg.h>
DBGMEM_ShutdownFn(void * pmalloc)void EXPORTDBG __cdecl <mapidbg.h>
DBGPRINT(a)<winldap.h>
DbgPrint(IN PCSTR Format,IN...)<wdm.h>
DBGPRINT(PCH Format,...) typedef ULONG<winldap.h>
DbgPrintEx(IN ULONG ComponentId,IN ULONG Level,IN PCSTR Format,IN...)<wdm.h>
DbgPrintReturnControlC(IN PCCH Format,IN...)<wdm.h>
DbgPrompt(IN PCCH Prompt,OUT PCH Response,IN ULONG MaximumResponseLength)<ntddk.h>
DbgQueryDebugFilterState(IN ULONG ComponentId,IN ULONG Level)<wdm.h>
DbgRaiseAssertionFailure()<winnt.h>
DbgReportComplete(IN OUT PVIDEO_DEBUG_REPORT pReport) OUT VOID<video.h>
DbgReportCreate(IN PVOID HwDeviceExtension,IN ULONG ulCode,IN ULONG_PTR ulpArg1,IN ULONG_PTR ulpArg2,IN ULONG_PTR ulpArg3,IN ULONG_PTR ulpArg4) OUT PVIDEO_DEBUG_REPORT<video.h>
DbgReportSecondaryData(IN OUT PVIDEO_DEBUG_REPORT pReport,IN PVOID pvData,IN ULONG ulDataSize) OUT BOOLEAN<video.h>
DbgSetDebugFilterState(IN ULONG ComponentId,IN ULONG Level,IN BOOLEAN State)<wdm.h>
DbgSetDebugPrintCallback(IN PDEBUG_PRINT_CALLBACK DebugPrintCallback,IN BOOLEAN Enable)<wdm.h>
DblClick(__LONG32 dwCharID,short fwKeys,__LONG32 x,__LONG32 y)virtual HRESULT WINAPI <agtsvr.h>
dbprtype(INT)<odbcss.h>
dbprtypeA(INT) CHAR<odbcss.h>
dbprtypeW(INT) WCHAR<odbcss.h>
DceErrorInqText(RPC_STATUS RpcStatus,RPC_CSTR ErrorText) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
DceErrorInqTextA(RPC_STATUS RpcStatus,RPC_CSTR ErrorText) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
DceErrorInqTextW(RPC_STATUS RpcStatus,RPC_WSTR ErrorText) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
DCI_SUCCESS(error)<dciddi.h>
DCIBeginAccess(LPDCISURFACEINFO pdci,int x,int y,int dx,int dy) extern DCIRVAL WINAPI <dciman.h>
DCICloseProvider(HDC hdc) extern void WINAPI <dciman.h>
DCICreateOffscreen(HDC hdc,DWORD dwCompression,DWORD dwRedMask,DWORD dwGreenMask,DWORD dwBlueMask,DWORD dwWidth,DWORD dwHeight,DWORD dwDCICaps,DWORD dwBitCount,LPDCIOFFSCREEN * lplpSurface) extern int WINAPI <dciman.h>
DCICreateOverlay(HDC hdc,LPVOID lpOffscreenSurf,LPDCIOVERLAY * lplpSurface) extern int WINAPI <dciman.h>
DCICreatePrimary(HDC hdc,LPDCISURFACEINFO * lplpSurface) extern int WINAPI <dciman.h>
DCIDestroy(LPDCISURFACEINFO pdci) extern void WINAPI <dciman.h>
DCIDraw(LPDCIOFFSCREEN pdci) extern DCIRVAL WINAPI <dciman.h>
DCIEndAccess(LPDCISURFACEINFO pdci) extern void WINAPI <dciman.h>
DCIEnum(HDC hdc,LPRECT lprDst,LPRECT lprSrc,LPVOID lpFnCallback,LPVOID lpContext) extern int WINAPI <dciman.h>
DCIOpenProvider(void) extern HDC WINAPI <dciman.h>
DCIRVAL(CALLBACK * BeginAccess)<dciddi.h>
DCIRVAL(CALLBACK * Draw)<dciddi.h>
DCIRVAL(CALLBACK * SetClipList)<dciddi.h>
DCIRVAL(CALLBACK * SetDestination)<dciddi.h>
DCISetClipList(LPDCIOFFSCREEN pdci,LPRGNDATA prd) extern DCIRVAL WINAPI <dciman.h>
DCISetDestination(LPDCIOFFSCREEN pdci,LPRECT dst,LPRECT src) extern DCIRVAL WINAPI <dciman.h>
DCISetSrcDestClip(LPDCIOFFSCREEN pdci,LPRECT srcrc,LPRECT destrc,LPRGNDATA prd) extern DCIRVAL WINAPI <dciman.h>
DcomChannelSetHResult(LPVOID pvReserved,ULONG * pulReserved,HRESULT appsHR)WINOLEAPI <objbase.h>
DdAttachSurface(LPDDRAWI_DDRAWSURFACE_LCL pSurfaceFrom,LPDDRAWI_DDRAWSURFACE_LCL pSurfaceTo)WINBOOL WINAPI <ddrawgdi.h>
DdCreateDIBSection(HDC hdc,CONST BITMAPINFO * pbmi,UINT iUsage,VOID ** ppvBits,HANDLE hSectionApp,DWORD dwOffset)HBITMAP WINAPI <ddrawgdi.h>
DdCreateDirectDrawObject(LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal,HDC hdc)WINBOOL WINAPI <ddrawgdi.h>
DdCreateSurfaceObject(LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal,WINBOOL bPrimarySurface)WINBOOL WINAPI <ddrawgdi.h>
DdDeleteDirectDrawObject(LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal)WINBOOL WINAPI <ddrawgdi.h>
DdDeleteSurfaceObject(LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal)WINBOOL WINAPI <ddrawgdi.h>
DdeAbandonTransaction(DWORD idInst,HCONV hConv,DWORD idTransaction) WINBOOL WINAPI <ddeml.h>
DdeAccessData(HDDEDATA hData,LPDWORD pcbDataSize) LPBYTE WINAPI <ddeml.h>
DdeAddData(HDDEDATA hData,LPBYTE pSrc,DWORD cb,DWORD cbOff) HDDEDATA WINAPI <ddeml.h>
DdeClientTransaction(LPBYTE pData,DWORD cbData,HCONV hConv,HSZ hszItem,UINT wFmt,UINT wType,DWORD dwTimeout,LPDWORD pdwResult) HDDEDATA WINAPI <ddeml.h>
DdeCmpStringHandles(HSZ hsz1,HSZ hsz2) int WINAPI <ddeml.h>
DdeConnect(DWORD idInst,HSZ hszService,HSZ hszTopic,PCONVCONTEXT pCC) HCONV WINAPI <ddeml.h>
DdeConnectList(DWORD idInst,HSZ hszService,HSZ hszTopic,HCONVLIST hConvList,PCONVCONTEXT pCC) HCONVLIST WINAPI <ddeml.h>
DdeCreateDataHandle(DWORD idInst,LPBYTE pSrc,DWORD cb,DWORD cbOff,HSZ hszItem,UINT wFmt,UINT afCmd) HDDEDATA WINAPI <ddeml.h>
DdeCreateStringHandle(DWORD idInst,LPCSTR psz,int iCodePage) HSZ WINAPI <ddeml.h>
DdeCreateStringHandleA(DWORD idInst,LPCSTR psz,int iCodePage) HSZ WINAPI <ddeml.h>
DdeCreateStringHandleW(DWORD idInst,LPCWSTR psz,int iCodePage) HSZ WINAPI <ddeml.h>
DdeDisconnect(HCONV hConv) WINBOOL WINAPI <ddeml.h>
DdeDisconnectList(HCONVLIST hConvList) WINBOOL WINAPI <ddeml.h>
DdeEnableCallback(DWORD idInst,HCONV hConv,UINT wCmd) WINBOOL WINAPI <ddeml.h>
DdeFreeDataHandle(HDDEDATA hData) WINBOOL WINAPI <ddeml.h>
DdeFreeStringHandle(DWORD idInst,HSZ hsz) WINBOOL WINAPI <ddeml.h>
DdeGetData(HDDEDATA hData,LPBYTE pDst,DWORD cbMax,DWORD cbOff) DWORD WINAPI <ddeml.h>
DdeGetLastError(DWORD idInst) UINT WINAPI <ddeml.h>
DdeImpersonateClient(HCONV hConv) WINBOOL WINAPI <ddeml.h>
DdeInitialize(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes) UINT WINAPI <ddeml.h>
DdeInitializeA(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes) UINT WINAPI <ddeml.h>
DdeInitializeW(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes) UINT WINAPI <ddeml.h>
DdeKeepStringHandle(DWORD idInst,HSZ hsz) WINBOOL WINAPI <ddeml.h>
DdeNameService(DWORD idInst,HSZ hsz1,HSZ hsz2,UINT afCmd) HDDEDATA WINAPI <ddeml.h>
DdePostAdvise(DWORD idInst,HSZ hszTopic,HSZ hszItem) WINBOOL WINAPI <ddeml.h>
DdeQueryConvInfo(HCONV hConv,DWORD idTransaction,PCONVINFO pConvInfo) UINT WINAPI <ddeml.h>
DdeQueryNextServer(HCONVLIST hConvList,HCONV hConvPrev) HCONV WINAPI <ddeml.h>
DdeQueryString(DWORD idInst,HSZ hsz,LPSTR psz,DWORD cchMax,int iCodePage) DWORD WINAPI <ddeml.h>
DdeQueryStringA(DWORD idInst,HSZ hsz,LPSTR psz,DWORD cchMax,int iCodePage) DWORD WINAPI <ddeml.h>
DdeQueryStringW(DWORD idInst,HSZ hsz,LPWSTR psz,DWORD cchMax,int iCodePage) DWORD WINAPI <ddeml.h>
DdeReconnect(HCONV hConv) HCONV WINAPI <ddeml.h>
DdeSetQualityOfService(HWND hwndClient,CONST SECURITY_QUALITY_OF_SERVICE * pqosNew,PSECURITY_QUALITY_OF_SERVICE pqosPrev) WINBOOL WINAPI <dde.h>
DdeSetUserHandle(HCONV hConv,DWORD id,DWORD_PTR hUser) WINBOOL WINAPI <ddeml.h>
DdeUnaccessData(HDDEDATA hData) WINBOOL WINAPI <ddeml.h>
DdeUninitialize(DWORD idInst) WINBOOL WINAPI <ddeml.h>
DdGetDC(LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal,LPPALETTEENTRY pColorTable)HDC WINAPI <ddrawgdi.h>
DdGetDxHandle(LPDDRAWI_DIRECTDRAW_LCL pDDraw,LPDDRAWI_DDRAWSURFACE_LCL pSurface,WINBOOL bRelease)HANDLE WINAPI <ddrawgdi.h>
DdQueryDirectDrawObject(LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal,LPDDHALINFO pHalInfo,LPDDHAL_DDCALLBACKS pDDCallbacks,LPDDHAL_DDSURFACECALLBACKS pDDSurfaceCallbacks,LPDDHAL_DDPALETTECALLBACKS pDDPaletteCallbacks,LPD3DHAL_CALLBACKS pD3dCallbacks,LPD3DHAL_GLOBALDRIVERDATA pD3dDriverData,LPDDHAL_DDEXEBUFCALLBACKS pD3dBufferCallbacks,LPDDSURFACEDESC pD3dTextureFormats,LPDWORD pdwFourCC,LPVIDMEM pvmList)WINBOOL WINAPI <ddrawgdi.h>
DdQueryDisplaySettingsUniqueness(VOID)ULONG WINAPI <ddrawgdi.h>
DDRAWMARSHCALLBACKMARSHAL(HGDIOBJ hGdiObj,LPVOID pGdiRef,LPVOID * ppDDrawRef) typedef HRESULT<wingdi.h>
DDRAWMARSHCALLBACKRELEASE(LPVOID pDDrawRef) typedef HRESULT<wingdi.h>
DDRAWMARSHCALLBACKUNMARSHAL(LPVOID pData,HDC * phdc,LPVOID * ppDDrawRef) typedef HRESULT<wingdi.h>
DdReenableDirectDrawObject(LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal,WINBOOL * pbNewMode)WINBOOL WINAPI <ddrawgdi.h>
DdReleaseDC(LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal)WINBOOL WINAPI <ddrawgdi.h>
DdResetVisrgn(LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal,HWND hWnd)WINBOOL WINAPI <ddrawgdi.h>
DdSetGammaRamp(LPDDRAWI_DIRECTDRAW_LCL pDDraw,HDC hdc,LPVOID lpGammaRamp)WINBOOL WINAPI <ddrawgdi.h>
DdSwapTextureHandles(LPDDRAWI_DIRECTDRAW_LCL pDDraw,LPDDRAWI_DDRAWSURFACE_LCL pDDSLcl1,LPDDRAWI_DDRAWSURFACE_LCL pDDSLcl2)DWORD WINAPI <ddrawgdi.h>
DdUnattachSurface(LPDDRAWI_DDRAWSURFACE_LCL pSurface,LPDDRAWI_DDRAWSURFACE_LCL pSurfaceAttached)VOID WINAPI <ddrawgdi.h>
Deactivate(DWORD * pdwFlags)virtual HRESULT WINAPI <rrascfg.h>
Deactivate(ULONG_PTR uConnectionParam,ULONG_PTR uReserved1,ULONG_PTR uReserved2)virtual HRESULT WINAPI <rrascfg.h>
Deactivate(void)virtual HRESULT WINAPI <rrascfg.h>
DeactivateActCtx(DWORD dwFlags,ULONG_PTR ulCookie) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeallocateNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
DEBUG_BREAKPOINT() <strmini.h>
DEBUG_EXTEND64(Addr)<dbgeng.h>
DEBUG_EXTENSION_VERSION(Major,Minor)<dbgeng.h>
DEBUG_OUTTYPE_RECURSION_LEVEL(Max)<dbgeng.h>
DebugActiveProcess(DWORD dwProcessId) WINBASEAPI WINBOOL APIENTRY <debugapi.h>
DebugActiveProcessStop(DWORD dwProcessId) WINBASEAPI WINBOOL APIENTRY <debugapi.h>
DebugBaseEventCallbacks(Breakpoint) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(ChangeDebuggeeState) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(ChangeEngineState) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(ChangeSymbolState) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(CreateProcess) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(CreateThread) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(Exception) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(ExitProcess) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(ExitThread) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(LoadModule) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(QueryInterface) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(SessionStatus) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(SystemError) STDMETHOD<dbgeng.h>
DebugBaseEventCallbacks(UnloadModule) STDMETHOD<dbgeng.h>
DebugBreak(VOID) WINBASEAPI VOID WINAPI <debugapi.h>
DebugBreakProcess(HANDLE Process) WINBASEAPI WINBOOL WINAPI <winbase.h>
DebugCommandException(ULONG Command,ULONG ArgSize,PVOID Arg) __CRT_INLINE void <dbgeng.h>
DebugConnect(PCSTR RemoteOptions,REFIID InterfaceId,PVOID * Interface) STDAPI <dbgeng.h>
DebugCreate(REFIID InterfaceId,PVOID * Interface) STDAPI <dbgeng.h>
DEBUGEVENTPROC(LPDEBUG_EVENT,LPVOID) typedef DWORD<vdmdbg.h>
DebugPrintWaitWorkerThreads(DWORD dwDebugLevel) VOID WINAPI <rtutils.h>
DebugSetProcessKillOnExit(WINBOOL KillOnExit) WINBASEAPI WINBOOL WINAPI <winbase.h>
DebugTraceArg(f,s)<mapidbg.h>
DebugTraceFn(char * pszFormat,...)int EXPORTDBG __cdecl <mapidbg.h>
DebugTraceProblems(sz,rgprob)<mapidbg.h>
DebugTraceProblemsFn(char * sz,void * rgprob)void EXPORTDBG __cdecl <mapidbg.h>
DebugTraceResult(f,hr)<mapidbg.h>
DebugTraceSc(f,sc)<mapidbg.h>
DebugTrapFn(int fFatal,char * pszFile,int iLine,char * pszFormat,...)int EXPORTDBG __cdecl <mapidbg.h>
DECIMAL_SETZERO(dec)<wtypes.h>
DECLARE_EVENTGUID_STRING(Name,Value)<smtpguid.h>
DECLARE_HANDLE(n)<winuser.h>
DECLARE_HANDLE(name)<winuser.h>
DECLARE_HANDLE32()()()
DECLARE_HANDLE32(HRC) <windowsx.h>
DECLARE_HANDLE32(HRCRESULT) <windowsx.h>
DECLARE_HANDLE32(HRECHOOK) <windowsx.h>
DECLARE_HANDLE32(HTRG) <windowsx.h>
DECLARE_HANDLE32(HWL) <windowsx.h>
DECLARE_HANDLE32(name)<windowsx.h>
DECLARE_INTERFACE(iface)<unknown.h>
DECLARE_INTERFACE()()()
DECLARE_INTERFACE(iface, baseiface)<winsync.h>
DECLARE_LOG_ADDREF_RELEASE(x)<msptrmvc.h>
DECLARE_MAPI_INTERFACE(iface)<wabdefs.h>
DECLARE_MAPI_INTERFACE(iface,baseiface)<wabutil.h>
DECLARE_MAPI_INTERFACE_PTR(iface,piface)<wabutil.h>
DECLARE_OPAQUE(name)<tspi.h>
DECLARE_OPAQUE32()()()
DECLARE_OPAQUE32(HAGENT) <tspi.h>
DECLARE_OPAQUE32(HAGENTSESSION) <tspi.h>
DECLARE_OPAQUE32(HCALL) <tspi.h>
DECLARE_OPAQUE32(HCALLHUB) <tspi.h>
DECLARE_OPAQUE32(HLINE) <tspi.h>
DECLARE_OPAQUE32(HLINEAPP) <tspi.h>
DECLARE_OPAQUE32(HPHONE) <tspi.h>
DECLARE_OPAQUE32(HPHONEAPP) <tspi.h>
DECLARE_OPAQUE32(HPRIVATECHANNEL) <tspi.h>
DECLARE_OPAQUE32(HTAPIDIALOGINSTANCE) <tspi.h>
DECLARE_OPAQUE32(HTAPIMSPLINE) <tspi.h>
DECLARE_OPAQUE32(name)<tspi.h>
DECLARE_SIMPLE_FRAMING_EX(FramingExName,MemoryType,Flags,Frames,Alignment,MinFrameSize,MaxFrameSize)<ks.h>
DECLARE_STD_UNKNOWN()<stdunk.h>
DeclareIAccountingProviderConfigMembers(IPURE)<rrascfg.h>
DeclareIAuthenticationProviderConfigMembers(IPURE)<rrascfg.h>
DeclareIEAPProviderConfigMembers(IPURE)<rrascfg.h>
DeclareIRouterProtocolConfigMembers(IPURE)<rrascfg.h>
Decline(VARIANT_BOOL CleanupCalendar,BSTR UserName,BSTR Password,ICalendarMessage ** Response)virtual HRESULT WINAPI <cdoex.h>
DECLSPEC_ALIGN(x)<winnt.h>
DECLSPEC_UUID(x)<xpsobjectmodel.h>
Decode(const BSTR strBinary)virtual HRESULT WINAPI <certenc.h>
DecodePointer(PVOID Ptr) WINBASEAPI PVOID WINAPI <utilapiset.h>
DecodeSystemPointer(PVOID Ptr) WINBASEAPI PVOID WINAPI <utilapiset.h>
DecommissionNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId) DWORD WINAPI <ntmsapi.h>
DecomposeHmenuIdentityString(const BYTE * pIDString,DWORD dwIDStringLen,HMENU * phmenu,DWORD * pidChild)virtual HRESULT WINAPI <oleacc.h>
DecomposeHwndIdentityString(const BYTE * pIDString,DWORD dwIDStringLen,HWND * phwnd,DWORD * pidObject,DWORD * pidChild)virtual HRESULT WINAPI <oleacc.h>
Decompress(DECOMPRESSOR_HANDLE DecompressorHandle,PVOID CompressedData,SIZE_T CompressedDataSize,PVOID UncompressedBuffer,SIZE_T UncompressedBufferSize,PSIZE_T UncompressedDataSize) WINBOOL WINAPI <compressapi.h>
DecompressText(HCOMPRESSOR hcmp,PBYTE pbCompressed,UINT cbCompressed,PBYTE pbText) INT WINAPI <ftsiface.h>
DECREF(x)<winnt.h>
DecryptFile(LPCSTR lpFileName,DWORD dwReserved) WINADVAPI WINBOOL WINAPI <winbase.h>
DecryptFileA(LPCSTR lpFileName,DWORD dwReserved) WINADVAPI WINBOOL WINAPI <winbase.h>
DecryptFileW(LPCWSTR lpFileName,DWORD dwReserved) WINADVAPI WINBOOL WINAPI <winbase.h>
DecryptMessage(PCtxtHandle phContext,PSecBufferDesc pMessage,unsigned __LONG32 MessageSeqNo,unsigned __LONG32 * pfQOP) SECURITY_STATUS WINAPI <sspi.h>
DeducingValueGetter()const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)const,const I * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)HRESULT <d2d1effecthelpers.h>
DeducingValueSetter(P),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize),I * effect,const BYTE * data,UINT32 dataSize)HRESULT <d2d1effecthelpers.h>
DefaultCharacterChange(BSTR bszGUID)virtual HRESULT WINAPI <agtsvr.h>
DefDlgProc(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefDlgProcA(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefDlgProcEx(hwnd,msg,wParam,lParam,pfRecursion)<windowsx.h>
DefDlgProcW(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefDriverProc(DWORD_PTR dwDriverIdentifier,HDRVR hdrvr,UINT uMsg,LPARAM lParam1,LPARAM lParam2) WINMMAPI LRESULT WINAPI <mmsystem.h>
DeferWindowPos(HDWP hWinPosInfo,HWND hWnd,HWND hWndInsertAfter,int x,int y,int cx,int cy,UINT uFlags) WINUSERAPI HDWP WINAPI <winuser.h>
DefFrameProc(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefFrameProcA(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefFrameProcW(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefHookProc(nCode, wParam, lParam, phhk)<winuser.h>
DEFINE_ABSTRACT_DMACHANNEL()<portcls.h>
DEFINE_ABSTRACT_DMACHANNELSLAVE()<portcls.h>
DEFINE_ABSTRACT_DRMPORT()<portcls.h>
DEFINE_ABSTRACT_IMXF()()
DEFINE_ABSTRACT_IMXF()()()
DEFINE_ABSTRACT_MINIPORT()<portcls.h>
DEFINE_ABSTRACT_MINIPORTWAVERTSTREAM()<portcls.h>
DEFINE_ABSTRACT_PORT()<portcls.h>
DEFINE_ABSTRACT_UNKNOWN()<ks.h>
DEFINE_AVIGUID(name,l,w1,w2)<vfw.h>
DEFINE_DAOGUID(name,l)<dbdaoid.h>
DEFINE_DEVPROPKEY()()()
DEFINE_DEVPROPKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid)<devpropdef.h>
DEFINE_EXCHFORMGUID(name,b)<exchform.h>
DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)<guiddef.h>
DEFINE_GUIDEX(name)<mmreg.h>
DEFINE_GUIDNAMED(n)<mmreg.h>
DEFINE_GUIDSTRUCT()()()
DEFINE_GUIDSTRUCT(g, n)<mmreg.h>
DEFINE_GUIDSTRUCT(g,n)<mmreg.h>
DEFINE_KNOWN_FOLDER()()()
DEFINE_KNOWN_FOLDER(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)<knownfolders.h>
DEFINE_KSAUTOMATION_EVENTS(table)<ks.h>
DEFINE_KSAUTOMATION_METHODS(table)<ks.h>
DEFINE_KSAUTOMATION_PROPERTIES(table)<ks.h>
DEFINE_KSAUTOMATION_TABLE(table)<ks.h>
DEFINE_KSCREATE_DISPATCH_TABLE( tablename )<ks.h>
DEFINE_KSCREATE_DISPATCH_TABLE()()()
DEFINE_KSCREATE_ITEM(DispatchCreate,TypeName,Context)<ks.h>
DEFINE_KSCREATE_ITEMEX(DispatchCreate,TypeName,Context,Flags)<ks.h>
DEFINE_KSCREATE_ITEMNULL(DispatchCreate,Context)<ks.h>
DEFINE_KSDISPATCH_TABLE(tablename,DeviceIoControl,Read,Write,Flush,Close,QuerySecurity,SetSecurity,FastDeviceIoControl,FastRead,FastWrite)<ks.h>
DEFINE_KSEVENT_ITEM(EventId,DataInput,ExtraEntryData,AddHandler,RemoveHandler,SupportHandler)<ks.h>
DEFINE_KSEVENT_SET(Set,EventsCount,EventItem)<ks.h>
DEFINE_KSEVENT_SET_TABLE(tablename)<ks.h>
DEFINE_KSEVENT_TABLE(tablename)<ks.h>
DEFINE_KSFASTMETHOD_ITEM(MethodId,MethodHandler)<ks.h>
DEFINE_KSFASTPROPERTY_ITEM()()()
DEFINE_KSFASTPROPERTY_ITEM(PropertyId, GetHandler, SetHandler)<ks.h>
DEFINE_KSFILTER_CATEGORIES(table)<ks.h>
DEFINE_KSFILTER_CATEGORY(category)<ks.h>
DEFINE_KSFILTER_CONNECTIONS(table)<ks.h>
DEFINE_KSFILTER_DESCRIPTOR(descriptor)<ks.h>
DEFINE_KSFILTER_DESCRIPTOR_TABLE(table)<ks.h>
DEFINE_KSFILTER_NODE_DESCRIPTORS(table)<ks.h>
DEFINE_KSFILTER_PIN_DESCRIPTORS(table)<ks.h>
DEFINE_KSMETHOD_ALLOCATORSET(AllocatorSet,MethodAlloc,MethodFree)<ks.h>
DEFINE_KSMETHOD_ITEM(MethodId,Flags,MethodHandler,MinMethod,MinData,SupportHandler)<ks.h>
DEFINE_KSMETHOD_ITEM_BDA_CHECK_CHANGES()()()
DEFINE_KSMETHOD_ITEM_BDA_CHECK_CHANGES(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_BDA_COMMIT_CHANGES()()()
DEFINE_KSMETHOD_ITEM_BDA_COMMIT_CHANGES(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_BDA_CREATE_PIN_FACTORY()()()
DEFINE_KSMETHOD_ITEM_BDA_CREATE_PIN_FACTORY(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_BDA_CREATE_TOPOLOGY()()()
DEFINE_KSMETHOD_ITEM_BDA_CREATE_TOPOLOGY(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_BDA_DELETE_PIN_FACTORY()()()
DEFINE_KSMETHOD_ITEM_BDA_DELETE_PIN_FACTORY(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_BDA_GET_CHANGE_STATE()()()
DEFINE_KSMETHOD_ITEM_BDA_GET_CHANGE_STATE(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_BDA_START_CHANGES()()()
DEFINE_KSMETHOD_ITEM_BDA_START_CHANGES(MethodHandler, SupportHandler)<bdamedia.h>
DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_ALLOC(Handler)<ks.h>
DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_FREE(Handler)<ks.h>
DEFINE_KSMETHOD_ITEM_STREAMIO_READ(Handler)<ks.h>
DEFINE_KSMETHOD_ITEM_STREAMIO_WRITE(Handler)<ks.h>
DEFINE_KSMETHOD_SET(Set,MethodsCount,MethodItem,FastIoCount,FastIoTable)<ks.h>
DEFINE_KSMETHOD_SET_TABLE(tablename)<ks.h>
DEFINE_KSMETHOD_TABLE(tablename)<ks.h>
DEFINE_KSPIN_DESCRIPTOR_ITEM()()()
DEFINE_KSPIN_DESCRIPTOR_ITEM(InterfacesCount,Interfaces,MediumsCount, Mediums,DataRangesCount,DataRanges,DataFlow,Communication)<ks.h>
DEFINE_KSPIN_DESCRIPTOR_ITEMEX(InterfacesCount,Interfaces,MediumsCount,Mediums,DataRangesCount,DataRanges,DataFlow,Communication,Category,Name)<ks.h>
DEFINE_KSPIN_DESCRIPTOR_TABLE(tablename)<ks.h>
DEFINE_KSPIN_INTERFACE_ITEM(guid,_interFace)<ks.h>
DEFINE_KSPIN_INTERFACE_TABLE(tablename)<ks.h>
DEFINE_KSPIN_MEDIUM_ITEM(guid,medium)<ks.h>
DEFINE_KSPIN_MEDIUM_TABLE(tablename)<ks.h>
DEFINE_KSPROPERTY_ALLOCATORSET(AllocatorSet,PropFunctionTable,PropStatus)<ks.h>
DEFINE_KSPROPERTY_CLOCKSET(ClockSet,PropTime,PropPhysicalTime,PropCorrelatedTime,PropCorrelatedPhysicalTime,PropResolution,PropState,PropFunctionTable)<ks.h>
DEFINE_KSPROPERTY_CURRENT_CAPTURE_SURFACE(GetHandler,SetHandler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM(PropertyId,GetHandler,MinProperty,MinData,SetHandler,Values,RelationsCount,Relations,SupportHandler,SerializedSize)<ks.h>
DEFINE_KSPROPERTY_ITEM_BDA_CONTROLLING_PIN_ID()()()
DEFINE_KSPROPERTY_ITEM_BDA_CONTROLLING_PIN_ID(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_NODE_DESCRIPTORS()()()
DEFINE_KSPROPERTY_ITEM_BDA_NODE_DESCRIPTORS(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_NODE_EVENTS()()()
DEFINE_KSPROPERTY_ITEM_BDA_NODE_EVENTS(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_NODE_METHODS()()()
DEFINE_KSPROPERTY_ITEM_BDA_NODE_METHODS(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_NODE_PROPERTIES()()()
DEFINE_KSPROPERTY_ITEM_BDA_NODE_PROPERTIES(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_NODE_TYPES()()()
DEFINE_KSPROPERTY_ITEM_BDA_NODE_TYPES(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_PIN_ID()()()
DEFINE_KSPROPERTY_ITEM_BDA_PIN_ID(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_PIN_TYPE()()()
DEFINE_KSPROPERTY_ITEM_BDA_PIN_TYPE(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_PIN_TYPES()()()
DEFINE_KSPROPERTY_ITEM_BDA_PIN_TYPES(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_BDA_TEMPLATE_CONNECTIONS()()()
DEFINE_KSPROPERTY_ITEM_BDA_TEMPLATE_CONNECTIONS(GetHandler, SetHandler)<bdamedia.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDPHYSICALTIME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDTIME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_FUNCTIONTABLE(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_PHYSICALTIME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_RESOLUTION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_STATE(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CLOCK_TIME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_ACQUIREORDERING(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_ALLOCATORFRAMING(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_ALLOCATORFRAMING_EX(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_DATAFORMAT(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_PRIORITY(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_PROPOSEDATAFORMAT(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_STARTAT(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_CONNECTION_STATE(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_DISPLAY_ADAPTER_GUID(GetHandler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_GENERAL_COMPONENTID(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_AVAILABLE(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_CAPABILITIES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_CONVERTTIMEFORMAT(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_DURATION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_FORMATS(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_POSITION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_POSITIONS(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_PREROLL(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_STOPPOSITION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_TIMEFORMAT(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_MEMORY_TRANSPORT(SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_CLIPLIST(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_COLORKEY(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_COLORREF(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_DISPLAYCHANGE(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_INTERESTS(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_PALETTE(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_OVERLAYUPDATE_VIDEOPOSITION(Handler)<ksmedia.h>
DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_CONSTRAINEDDATARANGES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_GLOBALCINSTANCES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_NAME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_NECESSARYINSTANCES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_PHYSICALCONNECTION(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_PIN_PROPOSEDATAFORMAT(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_QUALITY_ERROR(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_QUALITY_REPORT(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_ALLOCATOR(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_DEGRADATION(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_FRAMETIME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_MASTERCLOCK(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_PIPE_ID(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_PRESENTATIONEXTENT(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_PRESENTATIONTIME(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_QUALITY(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_RATE(GetHandler,SetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_RATECAPABILITY(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAM_TIMEFORMAT(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_FUNCTIONTABLE(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_STATUS(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_STREAMINTERFACE_HEADERSIZE(GetHandler)<ks.h>
DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CATEGORIES(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CONNECTIONS(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NAME(Handler)<ks.h>
DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NODES(Handler)<ks.h>
DEFINE_KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS(GetHandler)<ksmedia.h>
DEFINE_KSPROPERTY_PINSET(PinSet,PropGeneral,PropInstances,PropIntersection)<ks.h>
DEFINE_KSPROPERTY_PINSETCONSTRAINED(PinSet,PropGeneral,PropInstances,PropIntersection)<ks.h>
DEFINE_KSPROPERTY_PREFERRED_CAPTURE_SURFACE(GetHandler)<ksmedia.h>
DEFINE_KSPROPERTY_SET(Set,PropertiesCount,PropertyItem,FastIoCount,FastIoTable)<ks.h>
DEFINE_KSPROPERTY_SET_TABLE(tablename)<ks.h>
DEFINE_KSPROPERTY_STREAMINTERFACESET(StreamInterfaceSet,HeaderSizeHandler)<ks.h>
DEFINE_KSPROPERTY_TABLE(tablename)<ks.h>
DEFINE_KSPROPERTY_TOPOLOGYSET(TopologySet,Handler)<ks.h>
DEFINE_MEDIATYPE_GUID()()()
DEFINE_MEDIATYPE_GUID(name, format)<mfapi.h>
DEFINE_MIB_BUFFER(X,Y,Z)<iprtrmib.h>
DEFINE_MMREG_MID_GUID(id)<mmreg.h>
DEFINE_MMREG_PID_GUID(id)<mmreg.h>
DEFINE_NODE_DESCRIPTOR(automation,type,name)<ks.h>
DEFINE_NWF_GUID()()()
DEFINE_NWF_GUID(NAME, ORD)<windot11.h>
DEFINE_OID(SubIdArray)<snmp.h>
DEFINE_OID_1()()()
DEFINE_OID_1(name,b0,b1)<mapioid.h>
DEFINE_OID_2()()()
DEFINE_OID_2(name,b0,b1,b2)<mapioid.h>
DEFINE_OID_3()()()
DEFINE_OID_3(name,b0,b1,b2,b3)<mapioid.h>
DEFINE_OID_4()()()
DEFINE_OID_4(name,b0,b1,b2,b3,b4)<mapioid.h>
DEFINE_OLEGUID()()()
DEFINE_OLEGUID(name, l, w1, w2)<guiddef.h>
DEFINE_PCAUTOMATION_TABLE_PROP(AutomationTable,PropertyTable)<portcls.h>
DEFINE_PCI_DEVICE_DEVPKEY()()()
DEFINE_PCI_DEVICE_DEVPKEY(_DPKNAME, _PID)<pciprop.h>
DEFINE_PCI_ROOT_BUS_DEVPKEY()()()
DEFINE_PCI_ROOT_BUS_DEVPKEY(_DPKNAME, _PID)<pciprop.h>
DEFINE_PROPERTYKEY()()()
DEFINE_PROPERTYKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid)<propkeydef.h>
DEFINE_SIZEOF(Array)<snmp.h>
DEFINE_STD_CONSTRUCTOR(classname)<stdunk.h>
DEFINE_TRACE_MOF_FIELD()()()
DEFINE_TRACE_MOF_FIELD(M, P, LEN, TYP)<evntrace.h>
DEFINE_USB_TERMINAL_GUID(id)<ksmedia.h>
DEFINE_USBAUDIO_MID_GUID(id)<ksmedia.h>
DEFINE_USBAUDIO_PID_GUID(id)<ksmedia.h>
DEFINE_USBAUDIO_PRODUCT_NAME(vid,pid,strIndex)<ksmedia.h>
DEFINE_WAVEFORMATEX_GUID(x)<mmreg.h>
DefineDosDevice(DWORD dwFlags,LPCSTR lpDeviceName,LPCSTR lpTargetPath) WINBASEAPI WINBOOL WINAPI <winbase.h>
DefineDosDeviceA(DWORD dwFlags,LPCSTR lpDeviceName,LPCSTR lpTargetPath) WINBASEAPI WINBOOL WINAPI <winbase.h>
DefineDosDeviceW(DWORD dwFlags,LPCWSTR lpDeviceName,LPCWSTR lpTargetPath) WINBASEAPI WINBOOL WINAPI <fileapi.h>
DefineHandleTable(w)<winbase.h>
DefineSource(const IRowset * pRowsetSource,const DBORDINAL cColIds,const DB_LORDINAL rgSourceColumns[],const DB_LORDINAL rgTargetColumns[],HSOURCE * phSourceID)virtual HRESULT WINAPI <oledbdep.h>
DefMDIChildProc(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefMDIChildProcA(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefMDIChildProcW(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefPenWindowProc(HWND,UINT,WPARAM,LPARAM) LRESULT CALLBACK <penwin.h>
DefRawInputProc(PRAWINPUT * paRawInput,INT nInput,UINT cbSizeHeader) WINUSERAPI LRESULT WINAPI <winuser.h>
DefScreenSaverProc(HWND hWnd,UINT msg,WPARAM wParam,LPARAM lParam) LRESULT WINAPI <scrnsave.h>
DefSubclassProc(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam) LRESULT WINAPI <commctrl.h>
DefWindowProc(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefWindowProcA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DefWindowProcW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
DegaussMonitor(HANDLE hMonitor) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
DeinitMapiUtil(VOID) STDAPI_<wabutil.h>
DelegateCommit(DWORD grfRM)virtual HRESULT WINAPI <txcoord.h>
DelegateSecurityContext(PCtxtHandle phContext,PSECURITY_STRING pTarget,SecDelegationType DelegationType,PTimeStamp pExpiry,PSecBuffer pPackageParameters,PSecBufferDesc pOutput) SECURITY_STATUS WINAPI <sspi.h>
Delete(__LONG32 * Value)virtual HRESULT WINAPI <windns.h>
Delete(__LONG32 cchOffset,__LONG32 cchDelete)virtual HRESULT WINAPI <windns.h>
Delete(__LONG32 Index)virtual HRESULT WINAPI <windns.h>
Delete(__LONG32 Unit,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <windns.h>
Delete(BSTR * Member)virtual HRESULT WINAPI <windns.h>
Delete(BSTR bstrClassName,BSTR bstrRelativeName)virtual HRESULT WINAPI <windns.h>
Delete(BSTR bstrSuperclass)virtual HRESULT WINAPI <windns.h>
Delete(byte * pucLuPair,DWORD cbLuPair)virtual HRESULT WINAPI <windns.h>
Delete(DBCOUNTITEM cRows,LPCOLESTR rgpwszURLs[],DWORD dwDeleteFlags,DBSTATUS rgdwStatus[])virtual HRESULT WINAPI <windns.h>
Delete(LONG Index)virtual HRESULT WINAPI <windns.h>
Delete(LPCTSTR pstr) virtual VOID <windns.h>
Delete(LPCWSTR pwszName)virtual HRESULT WINAPI <windns.h>
Delete(VARIANT * Value)virtual HRESULT WINAPI <windns.h>
Delete(VARIANT varBP)virtual HRESULT WINAPI <windns.h>
Delete(VARIANT varReserved)virtual HRESULT WINAPI <windns.h>
Delete(void)virtual HRESULT WINAPI <windns.h>
DeleteAce(PACL pAcl,DWORD dwAceIndex) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
DeleteAll(void)virtual HRESULT WINAPI <cdosys.h>
DeleteAllData(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD dwMDUserType,DWORD dwMDDataType)virtual HRESULT WINAPI <iadmw.h>
DeleteAllGPOLinks(LPOLESTR lpContainer) GPEDITAPI HRESULT WINAPI <gpedit.h>
DeleteAllRsltItems(void)virtual HRESULT WINAPI <mmc.h>
DeleteAllStrings(void)virtual HRESULT WINAPI <mmc.h>
DeleteAnycastIpAddressEntry(CONST MIB_ANYCASTIPADDRESS_ROW * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
DeleteAppContainerProfile(PCWSTR pszAppContainerName) USERENVAPI HRESULT WINAPI <userenv.h>
DeleteApplication(BSTR bstrApplicationName,VARIANT varReserved)virtual HRESULT WINAPI <iwamreg.h>
DeleteApplication(LPCWSTR szMDPath,WINBOOL fRecursive)virtual HRESULT WINAPI <iwamreg.h>
DeleteApplicationGroup(BSTR bstrGroupName,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteApplicationPool(LPCWSTR szPool)virtual HRESULT WINAPI <iwamreg.h>
DeleteAppMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteAppNonMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteAtom(ATOM nAtom) WINBASEAPI ATOM WINAPI <winbase.h>
DeleteAttributeDefinition(LPWSTR pszAttributeName)virtual HRESULT WINAPI <iads.h>
DeleteBackup(BSTR bstrLocation,LONG lVersion)virtual HRESULT WINAPI <iiisext.h>
DeleteBackup(LPCWSTR pszMDBackupLocation,DWORD dwMDVersion)virtual HRESULT WINAPI <iiisext.h>
DeleteBitmap(hbm)<windowsx.h>
DeleteBoundaryDescriptor(HANDLE BoundaryDescriptor) WINBASEAPI VOID WINAPI <namespaceapi.h>
DeleteBrush(hbr)<windowsx.h>
DeleteButton(int nIndex)virtual HRESULT WINAPI <mmc.h>
DeleteCategory(LPWSTR pszTitle)virtual HRESULT WINAPI <chanmgr.h>
DeleteChannelShortcut(LPWSTR pszTitle)virtual HRESULT WINAPI <chanmgr.h>
DeleteChildKeys(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath)virtual HRESULT WINAPI <iadmw.h>
DeleteClass(const BSTR Class,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)HRESULT WINAPI <wmiatlprov.h>
DeleteClass(const BSTR strClass,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI <wmiatlprov.h>
DeleteClassAsync(const BSTR Class,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI <wmiatlprov.h>
DeleteClassDefinition(LPWSTR pszClassName)virtual HRESULT WINAPI <iads.h>
DeleteClassPart(__LONG32 lFlags)virtual HRESULT WINAPI <wmiutils.h>
DeleteClusterGroup(HGROUP hGroup) DWORD WINAPI <clusapi.h>
DeleteClusterResource(HRESOURCE hResource) DWORD WINAPI <clusapi.h>
DeleteClusterResourceType(HCLUSTER hCluster,LPCWSTR lpszResourceTypeName) DWORD WINAPI <clusapi.h>
DeleteColorSpace(HCOLORSPACE hcs) WINGDIAPI WINBOOL WINAPI <wingdi.h>
DeleteColorTransform(HTRANSFORM) WINBOOL WINAPI <icm.h>
DeleteColumn(int nCol)virtual HRESULT WINAPI <mmc.h>
DeleteColumns(DBORDINAL cColumns,const DBID rgColumnIDs[],DBSTATUS rgdwStatus[])virtual HRESULT WINAPI <oledb.h>
DeleteCommand(DBID * pCommandID)virtual HRESULT WINAPI <oledb.h>
DeleteCompressor(HCOMPRESSOR hcmp) ERRORCODE WINAPI <ftsiface.h>
DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection) WINBASEAPI VOID WINAPI <synchapi.h>
DeleteData(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD dwMDIdentifier,DWORD dwMDDataType)virtual HRESULT WINAPI <iadmw.h>
DeleteDC(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
DeleteDelegatedPolicyUser(BSTR bstrDelegatedPolicyUser,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteDelegatedPolicyUserName(BSTR bstrDelegatedPolicyUser,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteDirectoryObject(ITDirectoryObject * pDirectoryObject)virtual HRESULT WINAPI <rend.h>
DeleteDSObject(LPWSTR pszRDNName)virtual HRESULT WINAPI <iads.h>
DeleteEnhMetaFile(HENHMETAFILE hmf) WINGDIAPI WINBOOL WINAPI <wingdi.h>
DeleteEntry(BSTR bstrSource)virtual HRESULT WINAPI <gpmgmt.h>
DeleteExtensionFileRecord(BSTR bstrExtensionFile)virtual HRESULT WINAPI <iiisext.h>
DeleteFiber(LPVOID lpFiber) WINBASEAPI VOID WINAPI <winbase.h>
DeleteFile(LPCSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteFileA(LPCSTR lpFileName) WINBASEAPI WINBOOL WINAPI <fileapi.h>
DeleteFileTransacted(LPCSTR lpFileName,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteFileTransactedA(LPCSTR lpFileName,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteFileTransactedW(LPCWSTR lpFileName,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteFileW(LPCWSTR lpFileName) WINBASEAPI WINBOOL WINAPI <fileapi.h>
DeleteFont(hfont)<windowsx.h>
DeleteForm(HANDLE hPrinter,LPSTR pFormName) WINBOOL WINAPI <winspool.h>
DeleteFormA(HANDLE hPrinter,LPSTR pFormName) WINBOOL WINAPI <winspool.h>
DeleteFormW(HANDLE hPrinter,LPWSTR pFormName) WINBOOL WINAPI <winspool.h>
DeleteGPOLink(LPOLESTR lpGPO,LPOLESTR lpContainer) GPEDITAPI HRESULT WINAPI <gpedit.h>
DeleteHiliter(HHILITER hhil) ERRORCODE WINAPI <ftsiface.h>
DeleteIE3Cache(HWND,HINSTANCE,LPSTR,int)DWORD       WINAPI <winineti.h>
DeleteIndex(HINDEX hinx) ERRORCODE WINAPI <ftsiface.h>
DeleteInstance(const BSTR ObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)HRESULT WINAPI <wmiatlprov.h>
DeleteInstance(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI <wmiatlprov.h>
DeleteInstanceAsync(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI <wmiatlprov.h>
DeleteIPAddress(ULONG NTEContext) DWORD WINAPI <iphlpapi.h>
DeleteIpForwardEntry(PMIB_IPFORWARDROW pRoute) DWORD WINAPI <iphlpapi.h>
DeleteIpForwardEntry2(CONST MIB_IPFORWARD_ROW2 * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
DeleteIpNetEntry(PMIB_IPNETROW pArpEntry) DWORD WINAPI <iphlpapi.h>
DeleteIpNetEntry2(CONST MIB_IPNET_ROW2 * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
DeleteItem(HRESULTITEM itemID,int nCol)virtual HRESULT WINAPI <wia.h>
DeleteItem(HSCOPEITEM hItem,__LONG32 fDeleteThis)virtual HRESULT WINAPI <wia.h>
DeleteItem(LONG lFlags)virtual HRESULT WINAPI <wia.h>
DeleteItem(PST_KEY Key,const GUID * pItemType,const GUID * pItemSubtype,LPCWSTR szItemName,PPST_PROMPTINFO pPromptInfo,DWORD dwFlags)virtual HRESULT WINAPI <wia.h>
DeleteItem(VARIANT varIndex)virtual HRESULT WINAPI <wia.h>
DeleteKey(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath)virtual HRESULT WINAPI <iadmw.h>
DeleteLogByHandle(HANDLE hLog)WINBOOL WINAPI <clfsw32.h>
DeleteLogError(REFSYNCMGRERRORID ErrorID,DWORD dwReserved)virtual HRESULT WINAPI <mobsync.h>
DeleteLogFile(LPCWSTR pszLogFileName,PVOID pvReserved)WINBOOL WINAPI <clfsw32.h>
DeleteLogMarshallingArea(PVOID pvMarshal)WINBOOL WINAPI <clfsw32.h>
DeleteMailbox(void)virtual HRESULT WINAPI <cdoexm.h>
DeleteMapping(LONG lMethod,VARIANT vKey)virtual HRESULT WINAPI <iiisext.h>
DeleteMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <oledb.h>
DeleteMember(TRUSTEE_W * pMembershipTrustee,TRUSTEE_W * pMemberTrustee)virtual HRESULT WINAPI <oledb.h>
DeleteMemberName(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteMenu(HMENU hMenu,UINT uPosition,UINT uFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DeleteMetaFile(HMETAFILE hmf) WINGDIAPI WINBOOL WINAPI <wingdi.h>
DeleteMonitor(LPSTR pName,LPSTR pEnvironment,LPSTR pMonitorName) WINBOOL WINAPI <winspool.h>
DeleteMonitorA(LPSTR pName,LPSTR pEnvironment,LPSTR pMonitorName) WINBOOL WINAPI <winspool.h>
DeleteMonitorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pMonitorName) WINBOOL WINAPI <winspool.h>
DeleteMultiple(ULONG cpspec,const PROPSPEC rgpspec[])virtual HRESULT WINAPI <wia.h>
DeleteNonMember(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteNonMemberName(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteNtmsDrive(HANDLE hSession,LPNTMS_GUID lpDriveId) DWORD WINAPI <ntmsapi.h>
DeleteNtmsLibrary(HANDLE hSession,LPNTMS_GUID lpLibraryId) DWORD WINAPI <ntmsapi.h>
DeleteNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId) DWORD WINAPI <ntmsapi.h>
DeleteNtmsMediaPool(HANDLE hSession,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
DeleteNtmsMediaType(HANDLE hSession,LPNTMS_GUID lpMediaTypeId,LPNTMS_GUID lpLibId) DWORD WINAPI <ntmsapi.h>
DeleteNtmsRequests(HANDLE hSession,LPNTMS_GUID lpRequestId,DWORD dwType,DWORD dwCount) DWORD WINAPI <ntmsapi.h>
DeleteObject(__LONG32 lnFlags)virtual HRESULT WINAPI <wingdi.h>
DeleteObject(HGDIOBJ ho) WINGDIAPI WINBOOL WINAPI <wingdi.h>
DeleteOperation(BSTR bstrOp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteOperation(BSTR bstrOperationName,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteOperation(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteOutputPin(LPWSTR pszPinName)virtual HRESULT WINAPI <strmif.h>
DeletePalette(hpal)<windowsx.h>
DeletePen(hpen)<windowsx.h>
DeletePersistentTcpPortReservation(USHORT StartPort,USHORT NumberOfPorts) ULONG WINAPI <iphlpapi.h>
DeletePersistentUdpPortReservation(USHORT StartPort,USHORT NumberOfPorts) ULONG WINAPI <iphlpapi.h>
DeletePolicyAdministrator(BSTR bstrAdmin,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeletePolicyAdministratorName(BSTR bstrAdmin,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeletePolicyReader(BSTR bstrReader,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeletePolicyReaderName(BSTR bstrReader,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeletePort(LPSTR pName,HWND hWnd,LPSTR pPortName) WINBOOL WINAPI <winspool.h>
DeletePortA(LPSTR pName,HWND hWnd,LPSTR pPortName) WINBOOL WINAPI <winspool.h>
DeletePortUI(PCWSTR pszServer,HWND hWnd,PCWSTR pszPortName)<winsplp.h>
DeletePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName) WINBOOL WINAPI <winspool.h>
DeletePrinter(HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
DeletePrinterConnection(LPSTR pName) WINBOOL WINAPI <winspool.h>
DeletePrinterConnectionA(LPSTR pName) WINBOOL WINAPI <winspool.h>
DeletePrinterConnectionW(LPWSTR pName) WINBOOL WINAPI <winspool.h>
DeletePrinterData(HANDLE hPrinter,LPSTR pValueName) DWORD WINAPI <winspool.h>
DeletePrinterDataA(HANDLE hPrinter,LPSTR pValueName) DWORD WINAPI <winspool.h>
DeletePrinterDataEx(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName) DWORD WINAPI <winspool.h>
DeletePrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName) DWORD WINAPI <winspool.h>
DeletePrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName) DWORD WINAPI <winspool.h>
DeletePrinterDataW(HANDLE hPrinter,LPWSTR pValueName) DWORD WINAPI <winspool.h>
DeletePrinterDriver(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName) WINBOOL WINAPI <winspool.h>
DeletePrinterDriverA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName) WINBOOL WINAPI <winspool.h>
DeletePrinterDriverEx(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag) WINBOOL WINAPI <winspool.h>
DeletePrinterDriverExA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag) WINBOOL WINAPI <winspool.h>
DeletePrinterDriverExW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag) WINBOOL WINAPI <winspool.h>
DeletePrinterDriverPackage(LPCSTR pszServer,LPCSTR pszInfPath,LPCSTR pszEnvironment)HRESULT WINAPI <winspool.h>
DeletePrinterDriverPackageA(LPCSTR pszServer,LPCSTR pszInfPath,LPCSTR pszEnvironment)HRESULT WINAPI <winspool.h>
DeletePrinterDriverPackageW(LPCWSTR pszServer,LPCWSTR pszInfPath,LPCWSTR pszEnvironment)HRESULT WINAPI <winspool.h>
DeletePrinterDriverW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName) WINBOOL WINAPI <winspool.h>
DeletePrinterIC(HANDLE hPrinterIC)WINBOOL WINAPI <winsplp.h>
DeletePrinterKey(HANDLE hPrinter,LPCSTR pKeyName) DWORD WINAPI <winspool.h>
DeletePrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName) DWORD WINAPI <winspool.h>
DeletePrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName) DWORD WINAPI <winspool.h>
DeletePrintProcessor(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProcessorName) WINBOOL WINAPI <winspool.h>
DeletePrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProcessorName) WINBOOL WINAPI <winspool.h>
DeletePrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProcessorName) WINBOOL WINAPI <winspool.h>
DeletePrintProvidor(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProvidorName) WINBOOL WINAPI <winspool.h>
DeletePrintProvidorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProvidorName) WINBOOL WINAPI <winspool.h>
DeletePrintProvidorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProvidorName) WINBOOL WINAPI <winspool.h>
DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList) WINBASEAPI VOID WINAPI <processthreadsapi.h>
DeleteProfile(LPCSTR lpSidString,LPCSTR lpProfilePath,LPCSTR lpComputerName) USERENVAPI WINBOOL WINAPI <userenv.h>
DeleteProfileA(LPCSTR lpSidString,LPCSTR lpProfilePath,LPCSTR lpComputerName) USERENVAPI WINBOOL WINAPI <userenv.h>
DeleteProfileW(LPCWSTR lpSidString,LPCWSTR lpProfilePath,LPCWSTR lpComputerName) USERENVAPI WINBOOL WINAPI <userenv.h>
DeletePropertyItem(LONG lPropId,VARIANT varProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeletePropertyNames(ULONG cpropid,const PROPID rgpropid[])virtual HRESULT WINAPI <wia.h>
DeleteProxyArpEntry(DWORD dwAddress,DWORD dwMask,DWORD dwIfIndex) DWORD WINAPI <iphlpapi.h>
DeletePwrScheme(UINT) BOOLEAN WINAPI <powrprof.h>
DeleteRgn(hrgn)<windowsx.h>
DeleteRole(BSTR bstrRoleName,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteRow(const BSTR strConfig,LONG Flags,DATE Date,LONG Table,LONG RowId,LONG * pcDeleted)virtual HRESULT WINAPI <certadm.h>
DeleteRows(HCHAPTER hReserved,DBCOUNTITEM cRows,const HROW rghRows[],DBROWSTATUS rgRowStatus[])virtual HRESULT WINAPI <oledb.h>
DeleteScope(BSTR bstrScopeName,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteScopeNode(VARIANT ScopeNode)virtual HRESULT WINAPI <mmcobj.h>
DeleteSearcher(HSEARCHER hsrch) ERRORCODE WINAPI <ftsiface.h>
DeleteSecurityContext(PCtxtHandle phContext) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
DeleteSecurityPackage(SEC_CHAR * pszPackageName) SECURITY_STATUS WINAPI <sspi.h>
DeleteSecurityPackageA(SEC_CHAR * pszPackageName) SECURITY_STATUS WINAPI <sspi.h>
DeleteSecurityPackageW(SEC_WCHAR * pszPackageName) SECURITY_STATUS WINAPI <sspi.h>
DeleteSelection(void)virtual HRESULT WINAPI <mmcobj.h>
DeleteService(SC_HANDLE hService) WINADVAPI WINBOOL WINAPI <winsvc.h>
DeleteSnapshotVhdSet(HANDLE VirtualDiskHandle,const PDELETE_SNAPSHOT_VHDSET_PARAMETERS Parameters,DELETE_SNAPSHOT_VHDSET_FLAG Flags)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
DeleteSocketPort(HANDLE Handle)DWORD WINAPI <adptif.h>
DeleteString(MMC_STRING_ID StringID)virtual HRESULT WINAPI <mmc.h>
DeleteSubscription(LPCWSTR pwszURL,HWND hwnd)virtual HRESULT WINAPI <subsmgr.h>
DeleteSubtype(PST_KEY Key,const GUID * pType,const GUID * pSubtype,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
DeleteSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier) WINBOOL WINAPI <synchapi.h>
DeleteTab(float tbPos)virtual HRESULT WINAPI <tom.h>
DeleteTask(BSTR bstrProp,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteTask(BSTR bstrTask,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteTask(BSTR bstrTaskName,VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
DeleteTimerQueue(HANDLE TimerQueue) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteTimerQueueEx(HANDLE TimerQueue,HANDLE CompletionEvent) WINBASEAPI WINBOOL WINAPI <threadpoollegacyapiset.h>
DeleteTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer,HANDLE CompletionEvent) WINBASEAPI WINBOOL WINAPI <threadpoollegacyapiset.h>
DeleteTrigger(WORD iTrigger)virtual HRESULT WINAPI <mstask.h>
DeleteTrustee(TRUSTEE_W * pTrustee)virtual HRESULT WINAPI <oledb.h>
DeleteType(PST_KEY Key,const GUID * pType,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
DeleteUnicastIpAddressEntry(CONST MIB_UNICASTIPADDRESS_ROW * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
DeleteUrlCacheEntry(LPCSTR lpszUrlName) BOOLAPI <wininet.h>
DeleteUrlCacheEntryA(LPCSTR lpszUrlName) BOOLAPI <wininet.h>
DeleteUrlCacheEntryW(LPCWSTR lpszUrlName) BOOLAPI <wininet.h>
DeleteUrlCacheGroup(GROUPID GroupId,DWORD dwFlags,LPVOID lpReserved) BOOLAPI <wininet.h>
DeleteVirtualDiskMetadata(HANDLE VirtualDiskHandle,LPGUID Item)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
DeleteVolumeMountPoint(LPCSTR lpszVolumeMountPoint) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint) WINBASEAPI WINBOOL WINAPI <winbase.h>
DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint) WINBASEAPI WINBOOL WINAPI <fileapi.h>
DeleteWatchRegion(HWATCHREGION hRegion)virtual HRESULT WINAPI <oledbdep.h>
DelNode(LPCSTR pszFileOrDirName,DWORD dwFlags) HRESULT WINAPI <advpub.h>
DELNODERUNDLL32(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow) typedef HRESULT<advpub.h>
DelNodeRunDLL32(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow) HRESULT WINAPI <advpub.h>
DENY_USERMODE_ACCESS(pIrp,CompleteRequest)<ks.h>
DenyRequest(const BSTR strConfig,LONG RequestId)virtual HRESULT WINAPI <certadm.h>
DeregisterEventSource(HANDLE hEventLog) WINADVAPI WINBOOL WINAPI <winbase.h>
DeregisterIdleRoutine(FTG ftg) STDAPI_<wabutil.h>
DeregisterManageableLogClient(HANDLE hLog)WINBOOL WINAPI <clfsw32.h>
DeRegisterOpRegionHandler(IN PDEVICE_OBJECT DeviceObject,IN PVOID OperationRegionObject)<oprghdlr.h>
DeregisterShellHookWindow(HWND hwnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
DeRegisterWaitEventBinding(PWT_EVENT_BINDING pwiWorkItem) DWORD WINAPI <rtutils.h>
DeRegisterWaitEventBindingSelf(PWT_EVENT_BINDING pwiWorkItem) DWORD WINAPI <rtutils.h>
DeRegisterWaitEventsTimers(PLIST_ENTRY pLEvents,PLIST_ENTRY pLTimers) DWORD WINAPI <rtutils.h>
DeRegisterWaitEventsTimersSelf(PLIST_ENTRY pLEvents,PLIST_ENTRY pLTimers) DWORD WINAPI <rtutils.h>
DeriveAppContainerSidFromAppContainerName(PCWSTR pszAppContainerName,PSID * ppsidAppContainerSid) USERENVAPI HRESULT WINAPI <userenv.h>
DescribePixelFormat(HDC hdc,int iPixelFormat,UINT nBytes,LPPIXELFORMATDESCRIPTOR ppfd) WINGDIAPI int WINAPI <wingdi.h>
Description()inline _bstr_t _com_error::<winsafer.h>
Description(VARIANT Index,LPVARIANT pItem)virtual HRESULT WINAPI <winsafer.h>
Deselect(PNODE Node)virtual HRESULT WINAPI <mmcobj.h>
DeSerialize(DWORD dwBufferSize,unsigned char * pbBuffer)virtual HRESULT WINAPI <admex.h>
DestinationReachable(BSTR bstrDestination,BSTR bstrConnection,ULONG ulType,LPSENS_QOCINFO lpQOCInfo)virtual HRESULT WINAPI <sensevts.h>
DestinationReachableNoQOCInfo(BSTR bstrDestination,BSTR bstrConnection,ULONG ulType)virtual HRESULT WINAPI <sensevts.h>
Destroy(MMC_COOKIE cookie)virtual HRESULT WINAPI <mmc.h>
Destroy(void)virtual HRESULT WINAPI <mmc.h>
DestroyAcceleratorTable(HACCEL hAccel) WINUSERAPI WINBOOL WINAPI <winuser.h>
DestroyBlob(HBLOB hBlob) DWORD __cdecl <netmon.h>
DestroyCaret(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
DestroyCluster(HCLUSTER hCluster,PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback,PVOID pvCallbackArg,WINBOOL fdeleteVirtualComputerObjects)DWORD WINAPI <clusapi.h>
DestroyClusterGroup(HGROUP hGroup)DWORD <clusapi.h>
DestroyContext(HIMC hIME)virtual HRESULT WINAPI <mshtmlc.h>
DestroyCursor(HCURSOR hCursor) WINUSERAPI WINBOOL WINAPI <winuser.h>
DestroyDataSource(void)virtual HRESULT WINAPI <oledb.h>
DestroyEnvironmentBlock(LPVOID lpEnvironment) WINBOOL WINAPI <userenv.h>
DestroyFilter(HFILTER hFilter) DWORD WINAPI <netmon.h>
DestroyHandoffTable(LPHANDOFFTABLE hTable) VOID WINAPI <netmon.h>
DestroyHRC(HRC) int WINAPI <penwin.h>
DestroyHRCRESULT(HRCRESULT) int WINAPI <penwin.h>
DestroyHWL(HWL) int WINAPI <penwin.h>
DestroyIcon(HICON hIcon) WINUSERAPI WINBOOL WINAPI <winuser.h>
DestroyInkset(HINKSET) WINBOOL WINAPI <penwin.h>
DestroyManagedStub(IManagedObjectInfo * pInfo)virtual HRESULT WINAPI <comsvcs.h>
DestroyMenu(HMENU hMenu) WINUSERAPI WINBOOL WINAPI <winuser.h>
DestroyObjectHeap(HOBJECTHEAP hObjectHeap) extern HOBJECTHEAP WINAPI <nmsupp.h>
DestroyPassword(HPASSWORD hPassword) extern VOID WINAPI <nmsupp.h>
DestroyPenData(HPENDATA) WINBOOL WINAPI <penwin.h>
DestroyPhysicalMonitor(HANDLE hMonitor) _BOOL WINAPI <physicalmonitorenumerationapi.h>
DestroyPhysicalMonitors(DWORD dwPhysicalMonitorArraySize,LPPHYSICAL_MONITOR pPhysicalMonitorArray) _BOOL WINAPI <physicalmonitorenumerationapi.h>
DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR * ObjectDescriptor) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
DestroyPropertyDatabase(HPROTOCOL hProtocol) DWORD WINAPI <netmon.h>
DestroyPropertySheetPage(HPROPSHEETPAGE) WINCOMMCTRLAPI WINBOOL WINAPI <prsht.h>
DestroyProtocol(HPROTOCOL hProtocol) VOID WINAPI <netmon.h>
DestroyResource(const RESID ResId)virtual HRESULT WINAPI <comsvcs.h>
DestroyResourceS(constSRESID ResId)virtual HRESULT WINAPI <comsvcs.h>
DestroyVideo(void)virtual HRESULT WINAPI <wiavideo.h>
DestroyWindow(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
Detach()       InterfaceType<scardssp.h>
Detach(LPUNKNOWN lpUnknown)virtual HRESULT WINAPI <scardssp.h>
Detach(SCARD_DISPOSITIONS Disposition=LEAVE)virtual HRESULT WINAPI <scardssp.h>
Detach(void)virtual HRESULT WINAPI <scardssp.h>
DetachVirtualDisk(HANDLE VirtualDiskHandle,DETACH_VIRTUAL_DISK_FLAG Flags,ULONG ProviderSpecificFlags)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
DetectAutoProxyUrl(LPSTR lpszAutoProxyUrl,DWORD dwAutoProxyUrlLength,DWORD dwDetectFlags) INTERNETAPI_<wininet.h>
DetectCodepageInIStream(DWORD dwFlag,DWORD dwPrefWinCodePage,IStream * pstmIn,DetectEncodingInfo * lpEncoding,INT * pnScores)virtual HRESULT WINAPI <mlang.h>
DetectDigits(TAPI_DIGITMODE DigitMode)virtual HRESULT WINAPI <tapi3if.h>
DetectInputCodepage(DWORD dwFlag,DWORD dwPrefWinCodePage,CHAR * pSrcStr,INT * pcSrcSize,DetectEncodingInfo * lpEncoding,INT * pnScores)virtual HRESULT WINAPI <mlang.h>
DetectOutboundCodePage(DWORD dwFlags,LPCWSTR lpWideCharStr,UINT cchWideChar,UINT * puiPreferredCodePages,UINT nPreferredCodePages,UINT * puiDetectedCodePages,UINT * pnDetectedCodePages,WCHAR * lpSpecialChar)virtual HRESULT WINAPI <mlang.h>
DetectOutboundCodePageInIStream(DWORD dwFlags,IStream * pStrIn,UINT * puiPreferredCodePages,UINT nPreferredCodePages,UINT * puiDetectedCodePages,UINT * pnDetectedCodePages,WCHAR * lpSpecialChar)virtual HRESULT WINAPI <mlang.h>
DetectTones(TAPI_DETECTTONE * pToneList,__LONG32 lNumTones)virtual HRESULT WINAPI <tapi3if.h>
DetectTonesByCollection(ITCollection2 * pDetectToneCollection)virtual HRESULT WINAPI <tapi3if.h>
Determinant()inline FLOAT <d2d1helper.h>
DEVICE_TYPE_FROM_CTL_CODE(ctl)<winioctl.h>
DEVICE_TYPE_FROM_CTL_CODE(ctrlCode)<winioctl.h>
DeviceAddress(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE DeviceHandle,OUT PUSHORT) OUT PUSHORT <windot11.h>
DeviceCapabilities(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,CONST DEVMODEA * pDevMode) WINSPOOLAPI int WINAPI <wingdi.h>
DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,CONST DEVMODEA * pDevMode) WINSPOOLAPI int WINAPI <wingdi.h>
DeviceCapabilitiesW(LPCWSTR pDevice,LPCWSTR pPort,WORD fwCapability,LPWSTR pOutput,CONST DEVMODEW * pDevMode) WINSPOOLAPI int WINAPI <wingdi.h>
DeviceCommand(LONG lFlags,const GUID * pCmdGUID,IWiaItem ** pIWiaItem)virtual HRESULT WINAPI <wia.h>
DeviceDialog(PDEVICEDIALOGDATA pDeviceDialogData) HRESULT WINAPI <wiadevd.h>
DeviceDialogFunction(PDEVICEDIALOGDATA) typedef HRESULT<wiadevd.h>
DeviceDlg(HWND hwndParent,LONG lFlags,LONG lIntent,LONG * plItemCount,IWiaItem *** ppIWiaItem)virtual HRESULT WINAPI <wia.h>
DeviceErrataFlag(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE DeviceHandle,IN ULONG) IN ULONG <hubbusif.h>
DeviceHandle(IN PVOID BusContext,IN OUT PUSB_DEVICE_HANDLE) IN OUT PUSB_DEVICE_HANDLE  <hubbusif.h>
DeviceHandle(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE) IN PUSB_DEVICE_HANDLE <hubbusif.h>
DeviceHandle(IN PVOID BusContext,IN PVOID) IN PVOID <hubbusif.h>
DeviceHandle(IN PVOID HubBusContext,IN PVOID) IN PVOID <hubbusif.h>
DeviceInfo(CLSID * pclsidInterfaceClass,WCHAR ** pwszSymbolicLink)virtual HRESULT WINAPI <strmif.h>
DeviceIoControl(HANDLE hDevice,DWORD dwIoControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <ks.h>
DeviceObject(IN PVOID BusContext,IN PVOID) IN PVOID <ntddscsi.h>
DevicePowerClose(void)BOOLEAN WINAPI <powrprof.h>
DevicePowerEnumDevices(ULONG QueryIndex,ULONG QueryInterpretationFlags,ULONG QueryFlags,PBYTE pReturnBuffer,PULONG pBufferSize)BOOLEAN WINAPI <powrprof.h>
DevicePowerOpen(ULONG Flags)BOOLEAN WINAPI <powrprof.h>
DevicePowerSetDeviceState(LPCWSTR DeviceDescription,ULONG SetFlags,LPCVOID SetData)DWORD WINAPI <powrprof.h>
DeviceSpecific(BYTE * pParams,DWORD dwSize)virtual HRESULT WINAPI <winioctl.h>
DeviceSpecific(ITCallInfo * pCall,BYTE * pParams,DWORD dwSize)virtual HRESULT WINAPI <winioctl.h>
DeviceSpecificVariant(ITCallInfo * pCall,VARIANT varDevSpecificByteArray)virtual HRESULT WINAPI <tapi3if.h>
DeviceSpecificVariant(VARIANT varDevSpecificByteArray)virtual HRESULT WINAPI <tapi3if.h>
DeviceSpeed(IN PVOID BusContext,IN PUSBD_PIPE_INFORMATION PipeInfo,IN USB_DEVICE_SPEED) IN USB_DEVICE_SPEED <usbioctl.h>
DevProp_PciDevice_32BitPrefetchable_MemoryBarCount(_PD)<pciprop.h>
DevProp_PciDevice_64BitPrefetchable_MemoryBarCount(_PD)<pciprop.h>
DevProp_PciDevice_IoBarCount(_PD)<pciprop.h>
DevProp_PciDevice_NonPrefetchable_MemoryBarCount(_PD)<pciprop.h>
DevQueryPrint(HANDLE hPrinter,LPDEVMODEW pDevMode,DWORD * pResID)WINBOOL WINAPI <winsplp.h>
DhcpAddSubnetElementV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,LDHCP_SUBNET_ELEMENT_DATA_V6 * AddElementInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpCApiCleanup(VOID) VOID WINAPI <dhcpcsdk.h>
DhcpCApiInitialize(LPDWORD Version) DWORD WINAPI <dhcpcsdk.h>
DhcpCreateClientInfo(DHCP_CONST WCHAR * ServerIpAddress,DHCP_CONST DHCP_CLIENT_INFO * ClientInfo)DWORD WINAPI <dhcpsapi.h>
DhcpCreateOptionV6(LPWSTR ServerIpAddress,DWORD Flags,DHCP_OPTION_ID OptionId,WCHAR * ClassName,WCHAR * VendorName,LPDHCP_OPTION OptionInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpCreateSubnetV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,LDHCP_SUBNET_INFO_V6 * SubnetInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpDeleteClientInfo(DHCP_CONST WCHAR * ServerIpAddress,DHCP_CONST DHCP_SEARCH_INFO * ClientInfo)DWORD WINAPI <dhcpsapi.h>
DhcpDeleteSubnetV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,DHCP_FORCE_FLAG ForceFlag)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpDeRegisterParamChange(DWORD Flags,LPVOID Reserved,LPVOID Event) DWORD WINAPI <dhcpcsdk.h>
DhcpEnumOptionsV6(LPWSTR ServerIpAddress,DWORD Flags,WCHAR * ClassName,WCHAR * VendorName,DHCP_RESUME_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCP_OPTION_ARRAY * Options,DWORD * OptionsRead,DWORD * OptionsTotal)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpEnumOptionValuesV6(LPWSTR ServerIpAddress,DWORD Flags,WCHAR * ClassName,WCHAR * VendorName,DHCP_OPTION_SCOPE_INFO6 ScopeInfo,DHCP_RESUME_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCP_OPTION_VALUE_ARRAY * OptionValues,DWORD * OptionsRead,DWORD * OptionsTotal)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpEnumSubnetClients(DHCP_CONST WCHAR * ServerIpAddress,DHCP_IP_ADDRESS SubnetAddress,DHCP_RESUME_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCP_CLIENT_INFO_ARRAY * ClientInfo,DWORD * ClientsRead,DWORD * ClientsTotal)DWORD WINAPI <dhcpsapi.h>
DhcpEnumSubnetClientsV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,DHCP_RESUME_IPV6_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCP_CLIENT_INFO_ARRAY_V6 * ClientInfo,DWORD * ClientsRead,DWORD * ClientsTotal)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpEnumSubnetElementsV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,DHCP_SUBNET_ELEMENT_TYPE_V6 EnumElementType,DHCP_RESUME_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 * EnumElementInfo,DWORD * ElementsRead,DWORD * ElementsTotal)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpEnumSubnets(DHCP_CONST WCHAR * ServerIpAddress,DHCP_RESUME_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCP_IP_ARRAY * EnumInfo,DWORD * ElementsRead,DWORD * ElementsTotal)DWORD WINAPI <dhcpsapi.h>
DhcpEnumSubnetsV6(LPWSTR ServerIpAddress,DHCP_RESUME_HANDLE * ResumeHandle,DWORD PreferredMaximum,LPDHCPV6_IP_ARRAY * EnumInfo,DWORD * ElementsRead,DWORD * ElementsTotal)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpGetAllOptionsV6(LPWSTR ServerIpAddress,DWORD Flags,LPDHCP_ALL_OPTIONS * OptionStruct)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpGetAllOptionValuesV6(LPWSTR ServerIpAddress,DWORD Flags,LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo,LPDHCP_ALL_OPTION_VALUES * Values)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpGetClientInfo(DHCP_CONST WCHAR * ServerIpAddress,DHCP_CONST DHCP_SEARCH_INFO * SearchInfo,LPDHCP_CLIENT_INFO * ClientInfo)DWORD WINAPI <dhcpsapi.h>
DhcpGetOptionInfoV6(LPWSTR ServerIpAddress,DWORD Flags,DHCP_OPTION_ID OptionID,WCHAR * ClassName,WCHAR * VendorName,LPDHCP_OPTION * OptionInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpGetOptionValue(DHCP_CONST WCHAR * ServerIpAddress,DHCP_OPTION_ID OptionID,DHCP_CONST DHCP_OPTION_SCOPE_INFO * ScopeInfo,LPDHCP_OPTION_VALUE * OptionValue)DWORD WINAPI <dhcpsapi.h>
DhcpGetServerBindingInfo(DHCP_CONST WCHAR * ServerIpAddress,ULONG Flags,LPDHCP_BIND_ELEMENT_ARRAY * BindElementsInfo)DWORD WINAPI <dhcpsapi.h>
DhcpGetSubnetInfo(DHCP_CONST WCHAR * ServerIpAddress,DHCP_IP_ADDRESS SubnetAddress,LPDHCP_SUBNET_INFO * SubnetInfo)DWORD WINAPI <dhcpsapi.h>
DhcpGetSubnetInfoV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,LPDHCP_SUBNET_INFO_V6 * SubnetInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpGetVersion(LPWSTR ServerIpAddress,LPDWORD MajorVersion,LPDWORD MinorVersion)DWORD WINAPI <dhcpsapi.h>
DhcpRegisterParamChange(DWORD Flags,LPVOID Reserved,LPWSTR AdapterName,LPDHCPCAPI_CLASSID ClassId,DHCPCAPI_PARAMS_ARRAY Params,LPVOID Handle) DWORD WINAPI <dhcpcsdk.h>
DhcpRemoveDNSRegistrations(VOID) DWORD WINAPI <dhcpcsdk.h>
DhcpRemoveOptionV6(LPWSTR ServerIpAddress,DWORD Flags,DHCP_OPTION_ID OptionID,WCHAR * ClassName,WCHAR * VendorName)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpRemoveOptionValueV6(LPWSTR ServerIpAddress,DWORD Flags,DHCP_OPTION_ID OptionID,WCHAR * ClassName,WCHAR * VendorName,DHCP_OPTION_SCOPE_INFO6 ScopeInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpRemoveSubnetElementV6(LPWSTR ServerIpAddress,DHCP_IPV6_ADDRESS SubnetAddress,LDHCP_SUBNET_ELEMENT_DATA_V6 RemoveElementInfo,DHCP_FORCE_FLAG ForceFlag)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpRequestParams(DWORD Flags,LPVOID Reserved,LPWSTR AdapterName,LPDHCPCAPI_CLASSID ClassId,DHCPCAPI_PARAMS_ARRAY SendParams,DHCPCAPI_PARAMS_ARRAY RecdParams,LPBYTE Buffer,LPDWORD pSize,LPWSTR RequestIdStr) DWORD WINAPI <dhcpcsdk.h>
DhcpRpcFreeMemory(PVOID BufferPointer)VOID WINAPI <dhcpsapi.h>
DhcpSetClientInfo(DHCP_CONST WCHAR * ServerIpAddress,DHCP_CONST DHCP_CLIENT_INFO * ClientInfo)DWORD WINAPI <dhcpsapi.h>
DhcpSetOptionInfoV6(LPWSTR ServerIpAddress,DWORD Flags,DHCP_OPTION_ID OptionID,WCHAR * ClassName,WCHAR * VendorName,LPDHCP_OPTION OptionInfo)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpSetOptionValueV6(LPWSTR ServerIpAddress,DWORD Flags,DHCP_OPTION_ID OptionId,WCHAR * ClassName,WCHAR * VendorName,LDHCP_OPTION_SCOPE_INFO6 ScopeInfo,LDHCP_OPTION_DATA OptionValue)DWORD DHCP_API_FUNCTION <dhcpsapi.h>
DhcpSetServerBindingInfo(DHCP_CONST WCHAR * ServerIpAddress,ULONG Flags,LPDHCP_BIND_ELEMENT_ARRAY BindElementInfo)DWORD WINAPI <dhcpsapi.h>
DhcpUndoRequestParams(DWORD Flags,LPVOID Reserved,LPWSTR AdapterName,LPWSTR RequestIdStr) DWORD WINAPI <dhcpcsdk.h>
Dhcpv6CApiCleanup(void)VOID APIENTRY <dhcpv6csdk.h>
Dhcpv6CApiInitialize(LPDWORD Version)DWORD APIENTRY <dhcpv6csdk.h>
Dhcpv6RenewPrefix(LPWSTR adapterName,LPDHCPV6CAPI_CLASSID classId,LPDHCPV6CAPIPrefixLeaseInformation prefixleaseInfo)DWORD APIENTRY <dhcpv6csdk.h>
Dhcpv6RenewPrefix(LPWSTR adapterName,LPDHCPV6CAPI_CLASSID classId,LPDHCPV6PrefixLeaseInformation prefixleaseInfo,DWORD pdwTimeToWait,DWORD bValidatePrefix)DWORD APIENTRY <dhcpv6csdk.h>
Dhcpv6RequestPrefix(LPWSTR adapterName,LPDHCPV6CAPI_CLASSID classId,LPDHCPV6PrefixLeaseInformation prefixleaseInfo,DWORD pdwTimeToWait)DWORD APIENTRY <dhcpv6csdk.h>
Diagnostic(ULONG ulSize,BYTE * pBuffer)virtual HRESULT WINAPI <wia.h>
Dial(BSTR pDestAddress)virtual HRESULT WINAPI <tapi3if.h>
Dial(void)virtual HRESULT WINAPI <tapi3if.h>
DialogBoxA(hInstance,lpTemplate,hWndParent,lpDialogFunc)<winuser.h>
DialogBoxIndirectA(hInstance,lpTemplate,hWndParent,lpDialogFunc)<winuser.h>
DialogBoxIndirectParam(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI INT_PTR WINAPI <winuser.h>
DialogBoxIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI INT_PTR WINAPI <winuser.h>
DialogBoxIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI INT_PTR WINAPI <winuser.h>
DialogBoxIndirectW(hInstance,lpTemplate,hWndParent,lpDialogFunc)<winuser.h>
DialogBoxParam(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI INT_PTR WINAPI <winuser.h>
DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI INT_PTR WINAPI <winuser.h>
DialogBoxParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam) WINUSERAPI INT_PTR WINAPI <winuser.h>
DialogBoxW(hInstance,lpTemplate,hWndParent,lpDialogFunc)<winuser.h>
DIBINDEX(n)<mmsystem.h>
DictionarySearch(LPRC,LPSYE,int,LPSYV,int) WINBOOL WINAPI <penwin.h>
DIDFT_ENUMCOLLECTION(n)<dinput.h>
DIDFT_GETINSTANCE(n)<dinput.h>
DIDFT_GETTYPE(n)<dinput.h>
DIDFT_MAKEINSTANCE(n)<dinput.h>
DIEFT_GETTYPE(n)<dinput.h>
DiInstallDevice(HWND hwndParent OPTIONAL,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA DriverInfoData OPTIONAL,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
DiInstallDriver(HWND hwndParent OPTIONAL,LPCSTR InfPath,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
DiInstallDriverA(HWND hwndParent OPTIONAL,LPCSTR InfPath,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
DiInstallDriverW(HWND hwndParent OPTIONAL,LPCWSTR InfPath,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
DIJOFS_BUTTON(n)<dinput.h>
DIJOFS_POV(n)<dinput.h>
DIJOFS_SLIDER(n)<dinput.h>
DIMAKEUSAGEDWORD()()()
DIMAKEUSAGEDWORD(UsagePage, Usage)<dinput.h>
dimensionof(a)<mapidbg.h>
Direct3DCreate8(UINT SDKVersion)IDirect3D8<d3d8.h>
Direct3DCreate9(UINT SDKVersion)IDirect3D9<d3d9.h>
Direct3DCreate9Ex(UINT SDKVersion,IDirect3D9Ex **)HRESULT WINAPI <d3d9.h>
Direct3DRMCreate(struct IDirect3DRM ** d3drm)HRESULT WINAPI <d3drm.h>
DirectDrawCreate(GUID *,LPDIRECTDRAW *,IUnknown *)HRESULT WINAPI <ddraw.h>
DirectDrawCreateClipper(DWORD,LPDIRECTDRAWCLIPPER *,IUnknown *)HRESULT WINAPI <ddraw.h>
DirectDrawCreateEx(GUID *,LPVOID *,REFIID,IUnknown *)HRESULT WINAPI <ddraw.h>
DirectDrawEnumerateEx(LPDDENUMCALLBACKEXA lpCallback,LPVOID lpContext,DWORD dwFlags)HRESULT WINAPI <ddraw.h>
DirectDrawEnumerateExA(LPDDENUMCALLBACKEXA lpCallback,LPVOID lpContext,DWORD dwFlags)HRESULT WINAPI <ddraw.h>
DirectDrawEnumerateExW(LPDDENUMCALLBACKEXW lpCallback,LPVOID lpContext,DWORD dwFlags)HRESULT WINAPI <ddraw.h>
DirectDrawEnumerateW(LPDDENUMCALLBACKW,LPVOID)HRESULT WINAPI <ddraw.h>
DirectInput8Create(HINSTANCE,DWORD,REFIID,LPVOID *,LPUNKNOWN)HRESULT WINAPI <dinput.h>
DirectPlay8AddressCreate(const GUID * pcIID,LPVOID * ppvInterface,IUnknown * pUnknown)HRESULT WINAPI <dpaddr.h>
DirectPlay8Create(const CLSID * pcIID,LPVOID * ppvInterface,IUnknown * pUnknown)HRESULT WINAPI <dplay8.h>
DirectPlay8LobbyCreate(const GUID * pcIID,LPVOID * ppvInterface,IUnknown * pUnknown)HRESULT WINAPI <dplobby8.h>
DirectPlayCreate(LPGUID lpGUID,LPDIRECTPLAY * lplpDP,IUnknown * pUnk)extern HRESULT WINAPI <dplay.h>
DirectPlayEnumerateA(LPDPENUMDPCALLBACKA,LPVOID)extern HRESULT WINAPI <dplay.h>
DirectPlayEnumerateW(LPDPENUMDPCALLBACKW,LPVOID)extern HRESULT WINAPI <dplay.h>
DirectPlayLobbyCreate(LPGUID,LPDIRECTPLAYLOBBYA *,IUnknown *,LPVOID,DWORD)extern HRESULT WINAPI <dplobby.h>
DirectPlayLobbyCreateA(LPGUID,LPDIRECTPLAYLOBBYA *,IUnknown *,LPVOID,DWORD)extern HRESULT WINAPI <dplobby.h>
DirectPlayLobbyCreateW(LPGUID,LPDIRECTPLAYLOBBY *,IUnknown *,LPVOID,DWORD)extern HRESULT WINAPI <dplobby.h>
DirectPlayNATHelpCreate(LPCGUID pIID,LPVOID * ppvInterface)HRESULT <dpnathlp.h>
DirectSoundCaptureCreate(LPCGUID lpGUID,LPDIRECTSOUNDCAPTURE * ppDSC,LPUNKNOWN pUnkOuter)extern HRESULT WINAPI <dsound.h>
DirectSoundCaptureCreate8(LPCGUID lpGUID,LPDIRECTSOUNDCAPTURE8 * ppDSC8,LPUNKNOWN pUnkOuter)extern HRESULT WINAPI <dsound.h>
DirectSoundCaptureEnumerate(LPDSENUMCALLBACKA,LPVOID)extern HRESULT WINAPI <dsound.h>
DirectSoundCaptureEnumerateA(LPDSENUMCALLBACKA,LPVOID)extern HRESULT WINAPI <dsound.h>
DirectSoundCaptureEnumerateW(LPDSENUMCALLBACKW,LPVOID)extern HRESULT WINAPI <dsound.h>
DirectSoundCreate8(LPCGUID lpGUID,LPDIRECTSOUND8 * ppDS8,LPUNKNOWN pUnkOuter)extern HRESULT WINAPI <dsound.h>
DirectSoundEnumerate(LPDSENUMCALLBACKA,LPVOID)extern HRESULT WINAPI <dsound.h>
DirectSoundEnumerateA(LPDSENUMCALLBACKA,LPVOID)extern HRESULT WINAPI <dsound.h>
DirectSoundEnumerateW(LPDSENUMCALLBACKW,LPVOID)extern HRESULT WINAPI <dsound.h>
DirectSoundFullDuplexCreate(LPCGUID pcGuidCaptureDevice,LPCGUID pcGuidRenderDevice,LPCDSCBUFFERDESC pcDSCBufferDesc,LPCDSBUFFERDESC pcDSBufferDesc,HWND hWnd,DWORD dwLevel,LPDIRECTSOUNDFULLDUPLEX * ppDSFD,LPDIRECTSOUNDCAPTUREBUFFER8 * ppDSCBuffer8,LPDIRECTSOUNDBUFFER8 * ppDSBuffer8,LPUNKNOWN pUnkOuter)extern HRESULT WINAPI <dsound.h>
DirectXFileCreate(LPDIRECTXFILE * lplpDirectXFile)STDAPI <dxfile.h>
DiRollbackDriver(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,HWND hwndParent OPTIONAL,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
Disable(ULONG ulDisableTimeout)virtual HRESULT WINAPI <winioctl.h>
Disable(void)virtual HRESULT WINAPI <winioctl.h>
DISABLE_INTERRUPTS(reg)<kxia64.h>
DISABLE_THREAD_LIBRARY_CALLS(x)<rpcproxy.h>
DisableBITSUploads(void)virtual HRESULT WINAPI <bitscfg.h>
DisableCommit(void)virtual HRESULT WINAPI <comsvcs.h>
DisableExtensionFile(BSTR bstrExtensionFile)virtual HRESULT WINAPI <iiisext.h>
DisableIME(DWORD idThread)virtual HRESULT WINAPI <mshtmlc.h>
DisableInternetFirewall(void)virtual HRESULT WINAPI <netcon.h>
DisableMediaSense(HANDLE * pHandle,OVERLAPPED * pOverLapped) DWORD WINAPI <iphlpapi.h>
DisableNtmsObject(HANDLE hSession,DWORD dwType,LPNTMS_GUID lpObjectId) DWORD WINAPI <ntmsapi.h>
DisableParserFilter(HFILTER hFilter,HPARSER hParser) DWORD WINAPI <netmon.h>
DisablePresence(void)virtual HRESULT WINAPI <rtccore.h>
DisableProcessWindowsGhosting(VOID) WINUSERAPI VOID WINAPI <winuser.h>
DisableProfile(IRTCProfile * pProfile)virtual HRESULT WINAPI <rtccore.h>
DisableSharing(void)virtual HRESULT WINAPI <netcon.h>
DisableThreadLibraryCalls(HMODULE hLibModule) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
DisableThreadProfiling(HANDLE PerformanceDataHandle) WINBASEAPI DWORD APIENTRY <winbase.h>
DisableWebServiceExtension(BSTR bstrExtension)virtual HRESULT WINAPI <iiisext.h>
Disassociate(void)virtual HRESULT WINAPI <strmif.h>
DisassociateColorProfileFromDevice(PCSTR,PCSTR,PCSTR) WINBOOL WINAPI <icm.h>
DisassociateColorProfileFromDeviceA(PCSTR,PCSTR,PCSTR) WINBOOL WINAPI <icm.h>
DisassociateColorProfileFromDeviceW(PCWSTR,PCWSTR,PCWSTR) WINBOOL WINAPI <icm.h>
DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE pci) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
DiscardAlternateVideoFrames(int nDiscard)virtual HRESULT WINAPI <strmif.h>
DiscardIndex(HSEARCHER hsrch,INT iIndex) ERRORCODE WINAPI <ftsiface.h>
DiscardVirtualMemory(PVOID VirtualAddress,SIZE_T Size) WINBASEAPI DWORD WINAPI <memoryapi.h>
Disconnect(DISCONNECT_CODE code)virtual HRESULT WINAPI <tapi3if.h>
Disconnect(HWND hwndParent,DWORD dwFlags)virtual HRESULT WINAPI <tapi3if.h>
Disconnect(void)virtual HRESULT WINAPI <tapi3if.h>
DisconnectAsAggregatee(void)virtual HRESULT WINAPI <iads.h>
DisconnectAsAggregator(void)virtual HRESULT WINAPI <iads.h>
DisconnectNamedPipe(HANDLE hNamedPipe) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
DisconnectTerminal(IGraphBuilder * pGraph,DWORD dwReserved)virtual HRESULT WINAPI <termmgr.h>
DISEQUENCE_COMPARE(dwSq1,cmp,dwSq2)<dinput.h>
DiShowUpdateDevice(HWND hwndParent OPTIONAL,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
DiskGeometryGetDetect(Geometry)<winioctl.h>
DiskGeometryGetPartition(Geometry)<winioctl.h>
DISKQUOTA_FILE_INCOMPLETE(s)<dskquota.h>
DISKQUOTA_FILE_REBUILDING(s)<dskquota.h>
DISKQUOTA_IS_DISABLED(s)<dskquota.h>
DISKQUOTA_IS_ENFORCED(s)<dskquota.h>
DISKQUOTA_IS_LOGGED_USER_LIMIT(f)<dskquota.h>
DISKQUOTA_IS_LOGGED_USER_THRESHOLD(f)<dskquota.h>
DISKQUOTA_IS_TRACKED(s)<dskquota.h>
DISKQUOTA_SET_DISABLED(s)<dskquota.h>
DISKQUOTA_SET_ENFORCED(s)<dskquota.h>
DISKQUOTA_SET_LOG_USER_LIMIT(f,yn)<dskquota.h>
DISKQUOTA_SET_LOG_USER_THRESHOLD(f,yn)<dskquota.h>
DISKQUOTA_SET_TRACKED(s)<dskquota.h>
Dismount(__LONG32 Timeout)virtual HRESULT WINAPI <emostore.h>
DismountNtmsDrive(HANDLE hSession,LPNTMS_GUID lpDriveId) DWORD WINAPI <ntmsapi.h>
DismountNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId,DWORD dwCount,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
DispatcherContext(struct _EXCEPTION_RECORD * ExceptionRecord,PVOID EstablisherFrame,struct _CONTEXT * ContextRecord,PVOID)typedef EXCEPTION_DISPOSITION NTAPI EXCEPTION_ROUTINE<winnt.h>
DispatchGraphEvent(VOID * pContext,BOOLEAN bFlag) static VOID NTAPI <mspcall.h>
DispatchMessage(CONST MSG * lpMsg) WINUSERAPI LRESULT WINAPI <winuser.h>
DispatchMessageA(CONST MSG * lpMsg) WINUSERAPI LRESULT WINAPI <winuser.h>
DispatchMessageW(CONST MSG * lpMsg) WINUSERAPI LRESULT WINAPI <winuser.h>
DispCallFunc(void * pvInstance,ULONG_PTR oVft,CALLCONV cc,VARTYPE vtReturn,UINT cActuals,VARTYPE * prgvt,VARIANTARG ** prgpvarg,VARIANT * pvargResult)WINOLEAUTAPI <oleauto.h>
DispGetIDsOfNames(ITypeInfo * ptinfo,OLECHAR ** rgszNames,UINT cNames,DISPID * rgdispid)WINOLEAUTAPI <oleauto.h>
DispGetParam(DISPPARAMS * pdispparams,UINT position,VARTYPE vtTarg,VARIANT * pvarResult,UINT * puArgErr)WINOLEAUTAPI <oleauto.h>
DispInvoke(void * _this,ITypeInfo * ptinfo,DISPID dispidMember,WORD wFlags,DISPPARAMS * pparams,VARIANT * pvarResult,EXCEPINFO * pexcepinfo,UINT * puArgErr)WINOLEAUTAPI <oleauto.h>
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32(int)<wingdi.h>
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15(int)<wingdi.h>
DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER * requestPacket) WINUSERAPI LONG WINAPI <winuser.h>
DisplayConfigSetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER * setPacket) WINUSERAPI LONG WINAPI <winuser.h>
DisplayDibWindowBegin(hwnd)<dispdib.h>
DisplayDibWindowBeginEx(hwnd)<dispdib.h>
DisplayDibWindowBeginEx(hwnd,f)<dispdib.h>
DisplayDibWindowClose(hwnd)<dispdib.h>
DisplayDibWindowCreate(hwndP,hInstance)<dispdib.h>
DisplayDibWindowCreateEx(HWND hwndParent,HINSTANCE hInstance,DWORD dwStyle)static __inline HWND <dispdib.h>
DisplayDibWindowDraw(hwnd,flags,bits,size)<dispdib.h>
DisplayDibWindowEnd(hwnd)<dispdib.h>
DisplayDibWindowEndEx(hwnd)<dispdib.h>
DisplayDibWindowMessage(HWND hwnd,UINT msg,WPARAM wParam,LPARAM lParam,DWORD cbSize)static __inline UINT <dispdib.h>
DisplayDibWindowSetFmt(hwnd,lpbi)<dispdib.h>
DisplayLock(BSTR bstrUserName)virtual HRESULT WINAPI <sensevts.h>
DisplayModeChanged(void)virtual HRESULT WINAPI <strmif.h>
DisplayParseError(HRESULT hres,LPCWSTR pwszPath)virtual HRESULT WINAPI <shdeprecated.h>
DisplayScopeNodePropertySheet(VARIANT ScopeNode)virtual HRESULT WINAPI <mmcobj.h>
DisplaySelectionPropertySheet(void)virtual HRESULT WINAPI <mmcobj.h>
DisplayUnlock(BSTR bstrUserName)virtual HRESULT WINAPI <sensevts.h>
DiUninstallDevice(HWND hwndParent,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Flags,PBOOL NeedReboot OPTIONAL)<newdev.h>
DlgDirList(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType) WINUSERAPI int WINAPI <winuser.h>
DlgDirListA(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType) WINUSERAPI int WINAPI <winuser.h>
DlgDirListComboBox(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype) WINUSERAPI int WINAPI <winuser.h>
DlgDirListComboBoxA(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype) WINUSERAPI int WINAPI <winuser.h>
DlgDirListComboBoxW(HWND hDlg,LPWSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype) WINUSERAPI int WINAPI <winuser.h>
DlgDirListW(HWND hDlg,LPWSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType) WINUSERAPI int WINAPI <winuser.h>
DlgDirSelectComboBoxEx(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox) WINUSERAPI WINBOOL WINAPI <winuser.h>
DlgDirSelectComboBoxExA(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox) WINUSERAPI WINBOOL WINAPI <winuser.h>
DlgDirSelectComboBoxExW(HWND hwndDlg,LPWSTR lpString,int cchOut,int idComboBox) WINUSERAPI WINBOOL WINAPI <winuser.h>
DlgDirSelectEx(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox) WINUSERAPI WINBOOL WINAPI <winuser.h>
DlgDirSelectExA(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox) WINUSERAPI WINBOOL WINAPI <winuser.h>
DlgDirSelectExW(HWND hwndDlg,LPWSTR lpString,int chCount,int idListBox) WINUSERAPI WINBOOL WINAPI <winuser.h>
DLLCANUNLOADNOW(pFactory)<rpcproxy.h>
DllCanUnloadNow(void)STDAPI <combaseapi.h>
DLLDATA_GETPROXYDLLINFO(pPFList,pClsid)<rpcproxy.h>
DLLDATA_ROUTINES(pProxyFileList,pClsID)<rpcproxy.h>
DllExports(size_t)VOID<gdiplusflat.h>
DllGetClassObject(REFCLSID rclsid,REFIID riid,LPVOID * ppv)STDAPI <combaseapi.h>
DllInstall(WINBOOL bInstall,LPCWSTR pszCmdLine) STDAPI <shlwapi.h>
DllMain(HANDLE _HDllHandle,DWORD _Reason,LPVOID _Reserved) WINBOOL WINAPI <process.h>
DllMain(void * _HDllHandle,unsigned _Reason,void * _Reserved) int __stdcall <process.h>
DllRegisterServer(void)STDAPI <olectl.h>
DLLREGISTRY_ROUTINES(pProxyFileList,pClsID)<rpcproxy.h>
DllUnregisterServer(void)STDAPI <olectl.h>
DMOEnum(REFGUID,DWORD,DWORD,const DMO_PARTIAL_MEDIATYPE *,DWORD,const DMO_PARTIAL_MEDIATYPE *,IEnumDMO **)HRESULT WINAPI <dmoreg.h>
DMOGetName(REFCLSID,WCHAR[80])HRESULT WINAPI <dmoreg.h>
DMOGetTypes(REFCLSID,ULONG,ULONG *,DMO_PARTIAL_MEDIATYPE *,ULONG,ULONG *,DMO_PARTIAL_MEDIATYPE *)HRESULT WINAPI <dmoreg.h>
DMORegister(LPCWSTR,REFCLSID,REFGUID,DWORD,DWORD,const DMO_PARTIAL_MEDIATYPE *,DWORD,const DMO_PARTIAL_MEDIATYPE *)HRESULT WINAPI <dmoreg.h>
DMOUnregister(REFCLSID,REFGUID)HRESULT WINAPI <dmoreg.h>
DMUS_EVENT_SIZE(cb)<dmusbuff.h>
DNS_ANSWER_FROM_QUESTION(_pQuestion_)<windns.h>
DNS_BYTE_FLIP_HEADER_COUNTS(pHeader)<windns.h>
DNS_HEADER_FLAGS(pHead)<windns.h>
DNS_NULL_RECORD_LENGTH(ByteCount)<windns.h>
DNS_QUESTION_NAME_FROM_HEADER(_pHeader_)<windns.h>
DNS_RRSET_ADD(rrset,pnewRR)<windns.h>
DNS_RRSET_INIT(rrset)<windns.h>
DNS_RRSET_TERMINATE(rrset)<windns.h>
DNS_TEXT_RECORD_LENGTH(StringCount)<windns.h>
DNS_WINS_RECORD_LENGTH(IpCount)<windns.h>
DNS_WKS_RECORD_LENGTH(ByteCount)<windns.h>
DnsAcquireContextHandle(DWORD CredentialFlags,PVOID pCredentials,PHANDLE pContextHandle)
DnsAcquireContextHandle_A(DWORD CredentialFlags,PVOID pCredentials,PHANDLE pContextHandle) DNS_STATUS WINAPI <windns.h>
DnsAcquireContextHandle_W(DWORD CredentialFlags,PVOID pCredentials,PHANDLE pContextHandle) DNS_STATUS WINAPI <windns.h>
DnsExtractRecordsFromMessage_UTF8(PDNS_MESSAGE_BUFFER pDnsBuffer,WORD wMessageLength,PDNS_RECORDA * ppRecord) DNS_STATUS WINAPI <windns.h>
DnsExtractRecordsFromMessage_W(PDNS_MESSAGE_BUFFER pDnsBuffer,WORD wMessageLength,PDNS_RECORD * ppRecord) DNS_STATUS WINAPI <windns.h>
DnsFree(PVOID pData,DNS_FREE_TYPE FreeType) VOID WINAPI <windns.h>
DnsHostnameToComputerName(LPCSTR Hostname,LPSTR ComputerName,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
DnsHostnameToComputerNameA(LPCSTR Hostname,LPSTR ComputerName,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
DnsHostnameToComputerNameW(LPCWSTR Hostname,LPWSTR ComputerName,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
DnsModifyRecordsInSet(PDNS_RECORD pAddRecords,PDNS_RECORD pDeleteRecords,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved)
DnsModifyRecordsInSet_A(PDNS_RECORD pAddRecords,PDNS_RECORD pDeleteRecords,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsModifyRecordsInSet_UTF8(PDNS_RECORDA pAddRecords,PDNS_RECORDA pDeleteRecords,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsModifyRecordsInSet_W(PDNS_RECORD pAddRecords,PDNS_RECORD pDeleteRecords,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsNameCompare(n1,n2)<windns.h>
DnsNameCompare(LPSTR pName1,LPSTR pName2)
DnsNameCompare_A(LPSTR pName1,LPSTR pName2) WINBOOL WINAPI <windns.h>
DnsNameCompare_W(LPWSTR pName1,LPWSTR pName2) WINBOOL WINAPI <windns.h>
DnsQuery(PCSTR pszName,WORD wType,DWORD Options,PIP4_ARRAY aipServers,PDNS_RECORD * ppQueryResults,PVOID * pReserved)
DnsQuery_A(PCSTR pszName,WORD wType,DWORD Options,PIP4_ARRAY aipServers,PDNS_RECORD * ppQueryResults,PVOID * pReserved) DNS_STATUS WINAPI <windns.h>
DnsQuery_UTF8(PCSTR pszName,WORD wType,DWORD Options,PIP4_ARRAY aipServers,PDNS_RECORDA * ppQueryResults,PVOID * pReserved) DNS_STATUS WINAPI <windns.h>
DnsQuery_W(PCWSTR pszName,WORD wType,DWORD Options,PIP4_ARRAY aipServers,PDNS_RECORD * ppQueryResults,PVOID * pReserved) DNS_STATUS WINAPI <windns.h>
DnsQueryConfig(DNS_CONFIG_TYPE Config,DWORD Flag,PWSTR pwsAdapterName,PVOID pReserved,PVOID pBuffer,PDWORD pBufferLength) DNS_STATUS WINAPI <windns.h>
DnsRecordCompare(PDNS_RECORD pRecord1,PDNS_RECORD pRecord2) WINBOOL WINAPI <windns.h>
DnsRecordCopy(pRR)<windns.h>
DnsRecordCopyEx(PDNS_RECORD pRecord,DNS_CHARSET CharSetIn,DNS_CHARSET CharSetOut) PDNS_RECORD WINAPI <windns.h>
DnsRecordListFree(p,t)<windns.h>
DnsRecordListFree(PDNS_RECORD pRecordList,DNS_FREE_TYPE FreeType) VOID WINAPI <windns.h>
DnsRecordSetCompare(PDNS_RECORD pRR1,PDNS_RECORD pRR2,PDNS_RECORD * ppDiff1,PDNS_RECORD * ppDiff2) WINBOOL WINAPI <windns.h>
DnsRecordSetCopy(pRR)<windns.h>
DnsRecordSetCopyEx(PDNS_RECORD pRecordSet,DNS_CHARSET CharSetIn,DNS_CHARSET CharSetOut) PDNS_RECORD WINAPI <windns.h>
DnsRecordSetDetach(PDNS_RECORD pRecordList) PDNS_RECORD <windns.h>
DnsReleaseContextHandle(HANDLE hContext) VOID WINAPI <windns.h>
DnsReplaceRecordSet(PDNS_RECORD pNewSet,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsReplaceRecordSetA(PDNS_RECORD pNewSet,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsReplaceRecordSetUTF8(PDNS_RECORDA pNewSet,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsReplaceRecordSetW(PDNS_RECORD pNewSet,DWORD Options,HANDLE hContext,PIP4_ARRAY pServerList,PVOID pReserved) DNS_STATUS WINAPI <windns.h>
DnsValidateName(p,f)<windns.h>
DnsValidateName(LPCSTR pszName,DNS_NAME_FORMAT Format)
DnsValidateName_A(LPCSTR pszName,DNS_NAME_FORMAT Format) DNS_STATUS <windns.h>
DnsValidateName_UTF8(LPCSTR pszName,DNS_NAME_FORMAT Format) DNS_STATUS <windns.h>
DnsValidateName_W(LPCWSTR pwszName,DNS_NAME_FORMAT Format) DNS_STATUS <windns.h>
DnsWriteQuestionToBuffer_UTF8(PDNS_MESSAGE_BUFFER pDnsBuffer,LPDWORD pdwBufferSize,LPSTR pszName,WORD wType,WORD Xid,WINBOOL fRecursionDesired) WINBOOL WINAPI <windns.h>
DnsWriteQuestionToBuffer_W(PDNS_MESSAGE_BUFFER pDnsBuffer,PDWORD pdwBufferSize,LPWSTR pszName,WORD wType,WORD Xid,WINBOOL fRecursionDesired) WINBOOL WINAPI <windns.h>
DO_MCD(fdoExtension)<classpnp.h>
DoCallback(void * pv),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool)virtual HRESULT WINAPI <comsvcs.h>
DoConversion(BYTE * pSrcStr,UINT * pcSrcSize,BYTE * pDstStr,UINT * pcDstSize)virtual HRESULT WINAPI <mlang.h>
DoConversionFromUnicode(WCHAR * pSrcStr,UINT * pcSrcSize,CHAR * pDstStr,UINT * pcDstSize)virtual HRESULT WINAPI <mlang.h>
DoConversionToUnicode(CHAR * pSrcStr,UINT * pcSrcSize,WCHAR * pDstStr,UINT * pcDstSize)virtual HRESULT WINAPI <mlang.h>
DocumentEvent(HANDLE hPrinter,HDC hdc,INT iEsc,ULONG cbIn,PVOID pvIn,ULONG cbOut,PVOID pvOut)HRESULT <winspool.h>
DOCUMENTEVENT_EVENT(iX)<winddiui.h>
DOCUMENTEVENT_FLAGS(iX)<winddiui.h>
DocumentEventA(HANDLE hPrinter,HDC hdc,INT iEsc,ULONG cbIn,PVOID pvIn,ULONG cbOut,PVOID pvOut)HRESULT <winspool.h>
DocumentEventW(HANDLE hPrinter,HDC hdc,INT iEsc,ULONG cbIn,PVOID pvIn,ULONG cbOut,PVOID pvOut)HRESULT <winspool.h>
DocumentProperties(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput,DWORD fMode) LONG WINAPI <winspool.h>
DocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput,DWORD fMode) LONG WINAPI <winspool.h>
DocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput,DWORD fMode) LONG WINAPI <winspool.h>
DoDefaultPenInput(HWND,UINT) int WINAPI <penwin.h>
DoDragDrop(LPDATAOBJECT pDataObj,LPDROPSOURCE pDropSource,DWORD dwOKEffects,LPDWORD pdwEffect)WINOLEAPI <ole2.h>
DoEnvironmentSubst(LPSTR pszSrc,UINT cchSrc) SHSTDAPI_<shellapi.h>
DoEnvironmentSubstA(LPSTR pszSrc,UINT cchSrc) SHSTDAPI_<shellapi.h>
DoEnvironmentSubstW(LPWSTR pszSrc,UINT cchSrc) SHSTDAPI_<shellapi.h>
DoInvokeIE4(WINBOOL * pf,void ** ppv,DISPID dispid,DISPPARAMS * pdispparams)virtual HRESULT <shdeprecated.h>
DoInvokePIDLIE4(DISPID dispid,LPCITEMIDLIST pidl,WINBOOL fCanCancel)virtual HRESULT <shdeprecated.h>
DoPrivacyDlg(HWND hwndOwner,PCWSTR pszUrl,IEnumPrivacyRecords * pPrivacyEnum,WINBOOL fReportAllSites) SHDOCAPI <shlobj.h>
DosDateTimeToFileTime(WORD wFatDate,WORD wFatTime,LPFILETIME lpFileTime) WINBASEAPI WINBOOL WINAPI <winbase.h>
DosDateTimeToVariantTime(USHORT wDosDate,USHORT wDosTime,DOUBLE * pvtime)WINOLEAUTAPI_<oleauto.h>
DOT11_SIZEOF_OFFLOAD_NETWORK_LIST_INFO_REVISION_1(UNOE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_ALL_IE_SIZE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_BEACON_IE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_BEACON_IE_END(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_BEACON_IE_SIZE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_HEADER_END(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_HEADER_SIZE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_PROBE_REQUEST_IE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_PROBE_REQUEST_IE_SIZE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_PROBE_RESPONSE_IE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_PROBE_RESPONSE_IE_END(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_PROBE_RESPONSE_IE_SIZE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_GET_TOTAL_SIZE(ADDIE)<windot11.h>
DOT11_WFD_ADDITIONAL_IE_SET_BEACON_IE()()()
DOT11_WFD_ADDITIONAL_IE_SET_BEACON_IE_SIZE()()()
DOT11_WFD_ADDITIONAL_IE_SET_PROBE_REQUEST_IE()()()
DOT11_WFD_ADDITIONAL_IE_SET_PROBE_REQUEST_IE_SIZE()()()
DOT11_WFD_ADDITIONAL_IE_SET_PROBE_RESPONSE_IE()()()
DOT11_WFD_ADDITIONAL_IE_SET_PROBE_RESPONSE_IE_SIZE()()()
DOT11_WFD_DEVICE_ENTRY_GET_DEVICE_SIZE(DEV)<windot11.h>
DotProduct(const _D3DVECTOR & v1,const _D3DVECTOR & v2)inline D3DVALUE <d3dtypes.h>
DPA_AppendPtr(hdpa, pitem)<commctrl.h>
DPA_Clone(const HDPA hdpa,HDPA hdpaNew) WINCOMMCTRLAPI HDPA WINAPI <commctrl.h>
DPA_Create(int cItemGrow) WINCOMMCTRLAPI HDPA WINAPI <commctrl.h>
DPA_CreateEx(int cpGrow,HANDLE hheap) WINCOMMCTRLAPI HDPA WINAPI <commctrl.h>
DPA_DeleteAllPtrs(HDPA hdpa) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DPA_DeletePtr(HDPA hdpa,int i) WINCOMMCTRLAPI PVOID WINAPI <commctrl.h>
DPA_Destroy(HDPA hdpa) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DPA_DestroyCallback(HDPA hdpa,PFNDAENUMCALLBACK pfnCB,void * pData) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DPA_DestroyCallback(HDPA hdpa,PFNDAENUMCALLBACKCONST pfnCB,void * pData) extern<commctrl.h>
DPA_EnumCallback(HDPA hdpa,PFNDAENUMCALLBACK pfnCB,void * pData) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DPA_EnumCallback(HDPA hdpa,PFNDAENUMCALLBACKCONST pfnCB,void * pData) extern<commctrl.h>
DPA_FastDeleteLastPtr(hdpa)<commctrl.h>
DPA_FastGetPtr(hdpa, i)<commctrl.h>
DPA_GetPtr(HDPA hdpa,INT_PTR i) WINCOMMCTRLAPI PVOID WINAPI <commctrl.h>
DPA_GetPtrCount(hdpa)<commctrl.h>
DPA_GetPtrIndex(HDPA hdpa,const void * p) WINCOMMCTRLAPI int WINAPI <commctrl.h>
DPA_GetPtrPtr(hdpa)<commctrl.h>
DPA_GetSize(HDPA hdpa) WINCOMMCTRLAPI ULONGLONG WINAPI <commctrl.h>
DPA_Grow(HDPA pdpa,int cp) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DPA_InsertPtr(HDPA hdpa,int i,void * p) WINCOMMCTRLAPI int WINAPI <commctrl.h>
DPA_LoadStream(HDPA * phdpa,PFNDPASTREAM pfn,struct IStream * pstream,void * pvInstData) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
DPA_Merge(HDPA hdpaDest,HDPA hdpaSrc,DWORD dwFlags,PFNDACOMPARE pfnCompare,PFNDPAMERGE pfnMerge,LPARAM lParam) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DPA_Merge(HDPA hdpaDest,HDPA hdpaSrc,DWORD dwFlags,PFNDACOMPARECONST pfnCompare,PFNDPAMERGECONST pfnMerge,LPARAM lParam) extern<commctrl.h>
DPA_SaveStream(HDPA hdpa,PFNDPASTREAM pfn,struct IStream * pstream,void * pvInstData) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
DPA_Search(HDPA hdpa,const void * pFind,int iStart,PFNDACOMPARECONST pfnCompare,LPARAM lParam,UINT options) extern<commctrl.h>
DPA_Search(HDPA hdpa,void * pFind,int iStart,PFNDACOMPARE pfnCompare,LPARAM lParam,UINT options) WINCOMMCTRLAPI int WINAPI <commctrl.h>
DPA_SetPtr(HDPA hdpa,int i,void * p) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DPA_SetPtrCount(hdpa, cItems)<commctrl.h>
DPA_Sort(HDPA hdpa,PFNDACOMPARE pfnCompare,LPARAM lParam) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DPA_Sort(HDPA hdpa,PFNDACOMPARECONST pfnCompare,LPARAM lParam) extern<commctrl.h>
DPA_SortedInsertPtr(hdpa, pFind, iStart, pfnCompare, lParam, options, pitem)<commctrl.h>
DPtoLP(HDC hdc,LPPOINT lppt,int c) WINGDIAPI WINBOOL WINAPI <wingdi.h>
DPtoTP(LPPOINT,int) WINBOOL WINAPI <penwin.h>
DragAcceptFiles(HWND hWnd,WINBOOL fAccept) SHSTDAPI_<shellapi.h>
DragComplete(__LONG32 dwCharID,short fwKeys,__LONG32 x,__LONG32 y)virtual HRESULT WINAPI <agtsvr.h>
DragDetect(HWND hwnd,POINT pt) WINUSERAPI WINBOOL WINAPI <winuser.h>
DragFinish(HDROP hDrop) SHSTDAPI_<shellapi.h>
DragObject(HWND hwndParent,HWND hwndFrom,UINT fmt,ULONG_PTR data,HCURSOR hcur) WINUSERAPI DWORD WINAPI <winuser.h>
DragQueryFile(HDROP hDrop,UINT iFile,LPSTR lpszFile,UINT cch) SHSTDAPI_<shellapi.h>
DragQueryFileA(HDROP hDrop,UINT iFile,LPSTR lpszFile,UINT cch) SHSTDAPI_<shellapi.h>
DragQueryFileW(HDROP hDrop,UINT iFile,LPWSTR lpszFile,UINT cch) SHSTDAPI_<shellapi.h>
DragQueryPoint(HDROP hDrop,POINT * ppt) SHSTDAPI_<shellapi.h>
DragStart(__LONG32 dwCharID,short fwKeys,__LONG32 x,__LONG32 y)virtual HRESULT WINAPI <agtsvr.h>
Draw(HDC hdc,LONG lLayer,RECT * pRect,IUnknown * pReserved)virtual HRESULT WINAPI <mshtmlc.h>
Draw(RECT rcBounds,RECT rcUpdate,LONG lDrawFlags,HDC hdc,LPVOID pvDrawObject)virtual HRESULT WINAPI <mshtmlc.h>
DrawAnimatedRects(HWND hwnd,int idAni,CONST RECT * lprcFrom,CONST RECT * lprcTo) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawArc(const Pen * pen,const Rect & rect,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawArc(const Pen * pen,const RectF & rect,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawArc(const Pen * pen,INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawArc(const Pen * pen,REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawBezier(const Pen * pen,const Point & pt1,const Point & pt2,const Point & pt3,const Point & pt4)	Status <gdiplusgraphics.h>
DrawBezier(const Pen * pen,const PointF & pt1,const PointF & pt2,const PointF & pt3,const PointF & pt4)	Status <gdiplusgraphics.h>
DrawBezier(const Pen * pen,INT x1,INT y1,INT x2,INT y2,INT x3,INT y3,INT x4,INT y4)	Status <gdiplusgraphics.h>
DrawBezier(const Pen * pen,REAL x1,REAL y1,REAL x2,REAL y2,REAL x3,REAL y3,REAL x4,REAL y4)	Status <gdiplusgraphics.h>
DrawBeziers(const Pen * pen,const Point * points,INT count)	Status <gdiplusgraphics.h>
DrawBeziers(const Pen * pen,const PointF * points,INT count)	Status <gdiplusgraphics.h>
DrawCachedBitmap(CachedBitmap * cb,INT x,INT y)	Status <gdiplusgraphics.h>
DrawCaption(HWND hwnd,HDC hdc,CONST RECT * lprect,UINT flags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawClosedCurve(const Pen * pen,const Point * points,INT count)	Status <gdiplusgraphics.h>
DrawClosedCurve(const Pen * pen,const Point * points,INT count,REAL tension)	Status <gdiplusgraphics.h>
DrawClosedCurve(const Pen * pen,const PointF * points,INT count)	Status <gdiplusgraphics.h>
DrawClosedCurve(const Pen * pen,const PointF * points,INT count,REAL tension)	Status <gdiplusgraphics.h>
DrawCurve(const Pen * pen,const Point * points,INT count)	Status <gdiplusgraphics.h>
DrawCurve(const Pen * pen,const Point * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status <gdiplusgraphics.h>
DrawCurve(const Pen * pen,const Point * points,INT count,REAL tension)	Status <gdiplusgraphics.h>
DrawCurve(const Pen * pen,const PointF * points,INT count)	Status <gdiplusgraphics.h>
DrawCurve(const Pen * pen,const PointF * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status <gdiplusgraphics.h>
DrawCurve(const Pen * pen,const PointF * points,INT count,REAL tension)	Status <gdiplusgraphics.h>
DrawDibBegin(HDRAWDIB hdd,HDC hdc,int dxDst,int dyDst,LPBITMAPINFOHEADER lpbi,int dxSrc,int dySrc,UINT wFlags) extern WINBOOL WINAPI <vfw.h>
DrawDibChangePalette(HDRAWDIB hdd,int iStart,int iLen,LPPALETTEENTRY lppe) extern WINBOOL WINAPI <vfw.h>
DrawDibClose(HDRAWDIB hdd) extern WINBOOL WINAPI <vfw.h>
DrawDibDraw(HDRAWDIB hdd,HDC hdc,int xDst,int yDst,int dxDst,int dyDst,LPBITMAPINFOHEADER lpbi,LPVOID lpBits,int xSrc,int ySrc,int dxSrc,int dySrc,UINT wFlags) extern WINBOOL WINAPI <vfw.h>
DrawDibEnd(HDRAWDIB hdd) extern WINBOOL WINAPI <vfw.h>
DrawDibError(HDRAWDIB hdd) extern UINT WINAPI <vfw.h>
DrawDibGetBuffer(HDRAWDIB hdd,LPBITMAPINFOHEADER lpbi,DWORD dwSize,DWORD dwFlags) extern LPVOID WINAPI <vfw.h>
DrawDibGetPalette(HDRAWDIB hdd) extern HPALETTE WINAPI <vfw.h>
DrawDibInit(void) extern WINBOOL WINAPI <vfw.h>
DrawDibOpen(void) extern HDRAWDIB WINAPI <vfw.h>
DrawDibProfileDisplay(LPBITMAPINFOHEADER lpbi) LRESULT WINAPI <vfw.h>
DrawDibRealize(HDRAWDIB hdd,HDC hdc,WINBOOL fBackground) extern UINT WINAPI <vfw.h>
DrawDibSetPalette(HDRAWDIB hdd,HPALETTE hpal) extern WINBOOL WINAPI <vfw.h>
DrawDibStart(HDRAWDIB hdd,DWORD rate) extern WINBOOL WINAPI <vfw.h>
DrawDibStop(HDRAWDIB hdd) extern WINBOOL WINAPI <vfw.h>
DrawDibTime(HDRAWDIB hdd,LPDRAWDIBTIME lpddtime) WINBOOL WINAPI <vfw.h>
DrawDibUpdate(hdd,hdc,x,y)<vfw.h>
DrawDragFeedback(RECT * pRect)virtual HRESULT WINAPI <triedit.h>
DrawDriverString(const UINT16 * text,INT length,const Font * font,const Brush * brush,const PointF * positions,INT flags,const Matrix * matrix)	Status <gdiplusgraphics.h>
DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawEllipse(const Pen * pen,const Rect & rect)	Status <gdiplusgraphics.h>
DrawEllipse(const Pen * pen,const RectF & rect)	Status <gdiplusgraphics.h>
DrawEllipse(const Pen * pen,INT x,INT y,INT width,INT height)	Status <gdiplusgraphics.h>
DrawEllipse(const Pen * pen,REAL x,REAL y,REAL width,REAL height)	Status <gdiplusgraphics.h>
DrawEscape(HDC hdc,int iEscape,int cjIn,LPCSTR lpIn) WINGDIAPI int WINAPI <wingdi.h>
DrawFocusRect(HDC hDC,CONST RECT * lprc) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawFrameControl(HDC,LPRECT,UINT,UINT) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawIcon(HDC hDC,int X,int Y,HICON hIcon) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawIconEx(HDC hdc,int xLeft,int yTop,HICON hIcon,int cxWidth,int cyWidth,UINT istepIfAniCur,HBRUSH hbrFlickerFreeDraw,UINT diFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawImage(Image * image,const Point & point)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const Point * destPoints,INT count)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const Point * destPoints,INT count,INT srcx,INT srcy,INT srcwidth,INT srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const PointF & point)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const PointF * destPoints,INT count)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const PointF * destPoints,INT count,REAL srcx,REAL srcy,REAL srcwidth,REAL srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const Rect & destRect,INT srcx,INT srcy,INT srcwidth,INT srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const Rect & rect)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const RectF & destRect,const RectF & sourceRect,Unit srcUnit,const ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const RectF & destRect,REAL srcx,REAL srcy,REAL srcwidth,REAL srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status <gdiplusgraphics.h>
DrawImage(Image * image,const RectF & rect)	Status <gdiplusgraphics.h>
DrawImage(Image * image,INT x,INT y)	Status <gdiplusgraphics.h>
DrawImage(Image * image,INT x,INT y,INT srcx,INT srcy,INT srcwidth,INT srcheight,Unit srcUnit)	Status <gdiplusgraphics.h>
DrawImage(Image * image,INT x,INT y,INT width,INT height)	Status <gdiplusgraphics.h>
DrawImage(Image * image,REAL x,REAL y)	Status <gdiplusgraphics.h>
DrawImage(Image * image,REAL x,REAL y,REAL srcx,REAL srcy,REAL srcwidth,REAL srcheight,Unit srcUnit)	Status <gdiplusgraphics.h>
DrawImage(Image * image,REAL x,REAL y,REAL width,REAL height)	Status <gdiplusgraphics.h>
DrawingStateDescription()))))))))))))))))D2D1FORCEINLINE D2D1_DRAWING_STATE_DESCRIPTION <d2d1helper.h>
DrawInsert(HWND handParent,HWND hLB,int nItem) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DrawLine(const Pen * pen,const Point & pt1,const Point & pt2)	Status <gdiplusgraphics.h>
DrawLine(const Pen * pen,const PointF & pt1,const PointF & pt2)	Status <gdiplusgraphics.h>
DrawLine(const Pen * pen,INT x1,INT y1,INT x2,INT y2)	Status <gdiplusgraphics.h>
DrawLine(const Pen * pen,REAL x1,REAL y1,REAL x2,REAL y2)	Status <gdiplusgraphics.h>
DrawLines(const Pen * pen,const Point * points,INT count)	Status <gdiplusgraphics.h>
DrawLines(const Pen * pen,const PointF * points,INT count)	Status <gdiplusgraphics.h>
DrawMenuBar(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawPath(const Pen * pen,const GraphicsPath * path)	Status <gdiplusgraphics.h>
DrawPenData(HDC,LPRECT,HPENDATA) VOID WINAPI <penwin.h>
DrawPenDataEx(HDC,LPRECT,HPENDATA,UINT,UINT,UINT,UINT,ANIMATEPROC,LPANIMATEINFO,UINT) int WINAPI <penwin.h>
DrawPenDataFmt(hdc,lprect,hpndt)<penwin.h>
DrawPie(const Pen * pen,const Rect & rect,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawPie(const Pen * pen,const RectF & rect,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawPie(const Pen * pen,INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawPie(const Pen * pen,REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
DrawPolygon(const Pen * pen,const Point * points,INT count)	Status <gdiplusgraphics.h>
DrawPolygon(const Pen * pen,const PointF * points,INT count)	Status <gdiplusgraphics.h>
DrawRectangle(const Pen * pen,const Rect & rect)	Status <gdiplusgraphics.h>
DrawRectangle(const Pen * pen,const RectF & rect)	Status <gdiplusgraphics.h>
DrawRectangle(const Pen * pen,INT x,INT y,INT width,INT height)	Status <gdiplusgraphics.h>
DrawRectangle(const Pen * pen,REAL x,REAL y,REAL width,REAL height)	Status <gdiplusgraphics.h>
DrawRectangles(const Pen * pen,const Rect * rects,INT count)	Status <gdiplusgraphics.h>
DrawRectangles(const Pen * pen,const RectF * rects,INT count)	Status <gdiplusgraphics.h>
DrawShadowText(HDC hdc,LPCWSTR pszText,UINT cch,RECT * prc,DWORD dwFlags,COLORREF crText,COLORREF crShadow,int ixOffset,int iyOffset) int WINAPI <commctrl.h>
DrawState(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawStateA(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawStateW(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
DrawStatusText(HDC hDC,LPCRECT lprc,LPCSTR pszText,UINT uFlags) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DrawStatusTextA(HDC hDC,LPCRECT lprc,LPCSTR pszText,UINT uFlags) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DrawStatusTextW(HDC hDC,LPCRECT lprc,LPCWSTR pszText,UINT uFlags) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DrawString(const WCHAR * string,INT length,const Font * font,const PointF & origin,const Brush * brush)	Status <gdiplusgraphics.h>
DrawString(const WCHAR * string,INT length,const Font * font,const PointF & origin,const StringFormat * stringFormat,const Brush * brush)	Status <gdiplusgraphics.h>
DrawString(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,const StringFormat * stringFormat,const Brush * brush)	Status <gdiplusgraphics.h>
DrawText(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format) WINUSERAPI int WINAPI <winuser.h>
DrawTextA(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format) WINUSERAPI int WINAPI <winuser.h>
DrawTextEx(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp) WINUSERAPI int WINAPI <winuser.h>
DrawTextExA(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp) WINUSERAPI int WINAPI <winuser.h>
DrawTextExW(HDC hdc,LPWSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp) WINUSERAPI int WINAPI <winuser.h>
DrawTextW(HDC hdc,LPCWSTR lpchText,int cchText,LPRECT lprc,UINT format) WINUSERAPI int WINAPI <winuser.h>
DrawThemeBackground(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pRect,const RECT * pClipRect)THEMEAPI <uxtheme.h>
DrawThemeBackgroundEx(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pRect,const DTBGOPTS * pOptions)THEMEAPI <uxtheme.h>
DrawThemeEdge(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pDestRect,UINT uEdge,UINT uFlags,RECT * pContentRect)THEMEAPI <uxtheme.h>
DrawThemeIcon(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pRect,HIMAGELIST himl,int iImageIndex)THEMEAPI <uxtheme.h>
DrawThemeParentBackground(HWND hwnd,HDC hdc,RECT * prc)THEMEAPI <uxtheme.h>
DrawThemeParentBackgroundEx(HWND hwnd,HDC hdc,DWORD dwFlags,const RECT * prc)THEMEAPI <uxtheme.h>
DrawThemeText(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,LPCWSTR pszText,int iCharCount,DWORD dwTextFlags,DWORD dwTextFlags2,const RECT * pRect)THEMEAPI <uxtheme.h>
DrawThemeTextEx(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,LPCWSTR pszText,int iCharCount,DWORD dwFlags,LPRECT pRect,const DTTOPTS * pOptions)THEMEAPI <uxtheme.h>
DrawToDC(HDC hDC)virtual HRESULT WINAPI <mshtmlc.h>
DrawVideoImageBegin(void)virtual HRESULT WINAPI <strmif.h>
DrawVideoImageDraw(HDC hdc,LPRECT lprcSrc,LPRECT lprcDst)virtual HRESULT WINAPI <strmif.h>
DrawVideoImageEnd(void)virtual HRESULT WINAPI <strmif.h>
DriverEntry(PVOID Context1,PVOID Context2)<video.h>
DriveType(int iDrive) SHSTDAPI_<shlobj.h>
DRMAcquireAdvisories(DRMHSESSION hLicenseStorage,PWSTR wszLicense,PWSTR wszURL,VOID * pvContext)HRESULT WINAPI <msdrm.h>
DRMAcquireIssuanceLicenseTemplate(DRMHSESSION hClient,UINT uFlags,VOID * pvReserved,UINT cReserved,PWSTR * pwszReserved,PWSTR wszURL,VOID * pvContext)HRESULT WINAPI <msdrm.h>
DRMAcquireLicense(DRMHSESSION hSession,UINT uFlags,PWSTR wszGroupIdentityCredential,PWSTR wszRequestedRights,PWSTR wszCustomData,PWSTR wszURL,VOID * pvContext)HRESULT WINAPI <msdrm.h>
DRMActivate(DRMHSESSION hClient,UINT uFlags,UINT uLangID,DRM_ACTSERV_INFO * pActServInfo,VOID * pvContext,HWND hParentWnd)HRESULT WINAPI <msdrm.h>
DrmAddContentHandlers(IN ULONG ContentId,IN PVOID * paHandlers,IN ULONG NumHandlers)<drmk.h>
DRMAddLicense(DRMHSESSION hLicenseStorage,UINT uFlags,PWSTR wszLicense)HRESULT WINAPI <msdrm.h>
DRMAddRightWithUser(DRMPUBHANDLE hIssuanceLicense,DRMPUBHANDLE hRight,DRMPUBHANDLE hUser)HRESULT WINAPI <msdrm.h>
DRMAttest(DRMHANDLE hEnablingPrincipal,PWSTR wszData,DRMATTESTTYPE eType,UINT * pcStrLen,PWSTR wszAttestedBlob)HRESULT WINAPI <msdrm.h>
DRMCheckSecurity(DRMENVHANDLE hEnv,UINT cLevel)HRESULT WINAPI <msdrm.h>
DRMClearAllRights(DRMPUBHANDLE hIssuanceLicense)HRESULT WINAPI <msdrm.h>
DRMCloseEnvironmentHandle(DRMENVHANDLE hEnv)HRESULT WINAPI <msdrm.h>
DRMCloseHandle(DRMHANDLE handle)HRESULT WINAPI <msdrm.h>
DRMClosePubHandle(DRMPUBHANDLE hPub)HRESULT WINAPI <msdrm.h>
DRMCloseQueryHandle(DRMQUERYHANDLE hQuery)HRESULT WINAPI <msdrm.h>
DRMCloseSession(DRMHSESSION hSession)HRESULT WINAPI <msdrm.h>
DRMConstructCertificateChain(UINT cCertificates,PWSTR * rgwszCertificates,UINT * pcChain,PWSTR wszChain)HRESULT WINAPI <msdrm.h>
DRMCreateBoundLicense(DRMENVHANDLE hEnv,DRMBOUNDLICENSEPARAMS * pParams,PWSTR wszLicenseChain,DRMHANDLE * phBoundLicense,DRMHANDLE * phErrorLog)HRESULT WINAPI <msdrm.h>
DRMCreateClientSession(DRMCALLBACK pfnCallback,UINT uCallbackVersion,PWSTR wszGroupIDProviderType,PWSTR wszGroupID,DRMHSESSION * phClient)HRESULT WINAPI <msdrm.h>
DrmCreateContentMixed(IN PULONG paContentId,IN ULONG cContentId,OUT PULONG pMixedContentId)<drmk.h>
DRMCreateEnablingBitsDecryptor(DRMHANDLE hBoundLicense,PWSTR wszRight,DRMHANDLE hAuxLib,PWSTR wszAuxPlug,DRMHANDLE * phDecryptor)HRESULT WINAPI <msdrm.h>
DRMCreateEnablingBitsEncryptor(DRMHANDLE hBoundLicense,PWSTR wszRight,DRMHANDLE hAuxLib,PWSTR wszAuxPlug,DRMHANDLE * phEncryptor)HRESULT WINAPI <msdrm.h>
DRMCreateEnablingPrincipal(DRMENVHANDLE hEnv,DRMHANDLE hLibrary,PWSTR wszObject,DRMID * pidPrincipal,PWSTR wszCredentials,DRMHANDLE * pHEnablingPrincipal)HRESULT WINAPI <msdrm.h>
DRMCreateIssuanceLicense(SYSTEMTIME * pstTimeFrom,SYSTEMTIME * pstTimeUntil,PWSTR wszReferralInfoName,PWSTR wszReferralInfoURL,DRMPUBHANDLE hOwner,PWSTR wszIssuanceLicense,DRMHANDLE hBoundLicense,DRMPUBHANDLE * phIssuanceLicense)HRESULT WINAPI <msdrm.h>
DRMCreateLicenseStorageSession(DRMENVHANDLE hEnv,DRMHANDLE hDefaultLibrary,DRMHSESSION hClient,UINT uFlags,PWSTR wszIssuanceLicense,DRMHSESSION * phLicenseStorage)HRESULT WINAPI <msdrm.h>
DRMCreateRight(PWSTR wszRightName,SYSTEMTIME * pstFrom,SYSTEMTIME * pstUntil,UINT cExtendedInfo,PWSTR * pwszExtendedInfoName,PWSTR * pwszExtendedInfoValue,DRMPUBHANDLE * phRight)HRESULT WINAPI <msdrm.h>
DRMCreateUser(PWSTR wszUserName,PWSTR wszUserId,PWSTR wszUserIdType,DRMPUBHANDLE * phUser)HRESULT WINAPI <msdrm.h>
DRMDecode(PWSTR wszAlgID,PWSTR wszEncodedString,UINT * puDecodedDataLen,BYTE * pbDecodedData)HRESULT WINAPI <msdrm.h>
DRMDeconstructCertificateChain(PWSTR wszChain,UINT iWhich,UINT * pcCert,PWSTR wszCert)HRESULT WINAPI <msdrm.h>
DRMDecrypt(DRMHANDLE hCryptoProvider,UINT iPosition,UINT cNumInBytes,BYTE * pbInData,UINT * pcNumOutBytes,BYTE * pbOutData)HRESULT WINAPI <msdrm.h>
DRMDeleteLicense(DRMHSESSION hSession,PWSTR wszLicenseId)HRESULT WINAPI <msdrm.h>
DrmDestroyContent(IN ULONG ContentId)<drmk.h>
DRMDuplicateEnvironmentHandle(DRMENVHANDLE hToCopy,DRMENVHANDLE * phCopy)HRESULT WINAPI <msdrm.h>
DRMDuplicateHandle(DRMHANDLE hToCopy,DRMHANDLE * phCopy)HRESULT WINAPI <msdrm.h>
DRMDuplicatePubHandle(DRMPUBHANDLE hPubIn,DRMPUBHANDLE * phPubOut)HRESULT WINAPI <msdrm.h>
DRMDuplicateSession(DRMHSESSION hSessionIn,DRMHSESSION * phSessionOut)HRESULT WINAPI <msdrm.h>
DRMEncode(PWSTR wszAlgID,UINT uDataLen,BYTE * pbDecodedData,UINT * puEncodedStringLen,PWSTR wszEncodedString)HRESULT WINAPI <msdrm.h>
DRMEncrypt(DRMHANDLE hCryptoProvider,UINT iPosition,UINT cNumInBytes,BYTE * pbInData,UINT * pcNumOutBytes,BYTE * pbOutData)HRESULT WINAPI <msdrm.h>
DRMEnumerateLicense(DRMHSESSION hSession,UINT uFlags,UINT uIndex,WINBOOL * pfSharedFlag,UINT * puCertificateDataLen,PWSTR wszCertificateData)HRESULT WINAPI <msdrm.h>
DrmForwardContentToDeviceObject(IN ULONG ContentId,IN PVOID Reserved,IN PCDRMFORWARD DrmForward)<drmk.h>
DrmForwardContentToFileObject(IN ULONG ContentId,IN PFILE_OBJECT FileObject)<drmk.h>
DrmForwardContentToInterface(IN ULONG ContentId,IN PUNKNOWN pUnknown,IN ULONG NumMethods)<drmk.h>
DRMGetApplicationSpecificData(DRMPUBHANDLE hIssuanceLicense,UINT uIndex,UINT * puNameLength,PWSTR wszName,UINT * puValueLength,PWSTR wszValue)HRESULT WINAPI <msdrm.h>
DRMGetBoundLicenseAttribute(DRMHANDLE hQueryRoot,PWSTR wszAttribute,UINT iWhich,DRMENCODINGTYPE * peEncoding,UINT * pcBuffer,BYTE * pbBuffer)HRESULT WINAPI <msdrm.h>
DRMGetBoundLicenseAttributeCount(DRMHANDLE hQueryRoot,PWSTR wszAttribute,UINT * pcAttributes)HRESULT WINAPI <msdrm.h>
DRMGetBoundLicenseObject(DRMHANDLE hQueryRoot,PWSTR wszSubObjectType,UINT iWhich,DRMHANDLE * phSubObject)HRESULT WINAPI <msdrm.h>
DRMGetBoundLicenseObjectCount(DRMHANDLE hQueryRoot,PWSTR wszSubObjectType,UINT * pcSubObject)HRESULT WINAPI <msdrm.h>
DRMGetCertificateChainCount(PWSTR wszChain,UINT * pcCertCount)HRESULT WINAPI <msdrm.h>
DRMGetClientVersion(DRM_CLIENT_VERSION_INFO * pDRMClientVersionInfo)HRESULT WINAPI <msdrm.h>
DrmGetContentRights(IN ULONG ContentId,OUT PDRMRIGHTS DrmRights)<drmk.h>
DRMGetEnvironmentInfo(DRMENVHANDLE handle,PWSTR wszAttribute,DRMENCODINGTYPE * peEncoding,UINT * pcBuffer,BYTE * pbBuffer)HRESULT WINAPI <msdrm.h>
DRMGetInfo(DRMHANDLE handle,PWSTR wszAttribute,DRMENCODINGTYPE * peEncoding,UINT * pcBuffer,BYTE * pbBuffer)HRESULT WINAPI <msdrm.h>
DRMGetIntervalTime(DRMPUBHANDLE hIssuanceLicense,UINT * pcDays)HRESULT WINAPI <msdrm.h>
DRMGetIssuanceLicenseInfo(DRMPUBHANDLE hIssuanceLicense,SYSTEMTIME * pstTimeFrom,SYSTEMTIME * pstTimeUntil,UINT uFlags,UINT * puDistributionPointNameLength,PWSTR wszDistributionPointName,UINT * puDistributionPointURLLength,PWSTR wszDistributionPointURL,DRMPUBHANDLE * phOwner,WINBOOL * pfOfficial)HRESULT WINAPI <msdrm.h>
DRMGetIssuanceLicenseTemplate(DRMPUBHANDLE hIssuanceLicense,UINT * puIssuanceLicenseTemplateLength,PWSTR wszIssuanceLicenseTemplate)HRESULT WINAPI <msdrm.h>
DRMGetMetaData(DRMPUBHANDLE hIssuanceLicense,UINT * puContentIdLength,PWSTR wszContentId,UINT * puContentIdTypeLength,PWSTR wszContentIdType,UINT * puSKUIdLength,PWSTR wszSKUId,UINT * puSKUIdTypeLength,PWSTR wszSKUIdType,UINT * puContentTypeLength,PWSTR wszContentType,UINT * puContentNameLength,PWSTR wszContentName)HRESULT WINAPI <msdrm.h>
DRMGetNameAndDescription(DRMPUBHANDLE hIssuanceLicense,UINT uIndex,UINT * pulcid,UINT * puNameLength,PWSTR wszName,UINT * puDescriptionLength,PWSTR wszDescription)HRESULT WINAPI <msdrm.h>
DRMGetOwnerLicense(DRMPUBHANDLE hIssuanceLicense,UINT * puLength,PWSTR wszOwnerLicense)HRESULT WINAPI <msdrm.h>
DRMGetProcAddress(DRMHANDLE hLibrary,PWSTR wszProcName,FARPROC * ppfnProcAddress)HRESULT WINAPI <msdrm.h>
DRMGetRevocationPoint(DRMPUBHANDLE hIssuanceLicense,UINT * puIdLength,PWSTR wszId,UINT * puIdTypeLength,PWSTR wszIdType,UINT * puURLLength,PWSTR wszURL,SYSTEMTIME * pstFrequency,UINT * puNameLength,PWSTR wszName,UINT * puPublicKeyLength,PWSTR wszPublicKey)HRESULT WINAPI <msdrm.h>
DRMGetRightExtendedInfo(DRMPUBHANDLE hRight,UINT uIndex,UINT * puExtendedInfoNameLength,PWSTR wszExtendedInfoName,UINT * puExtendedInfoValueLength,PWSTR wszExtendedInfoValue)HRESULT WINAPI <msdrm.h>
DRMGetRightInfo(DRMPUBHANDLE hRight,UINT * puRightNameLength,PWSTR wszRightName,SYSTEMTIME * pstFrom,SYSTEMTIME * pstUntil)HRESULT WINAPI <msdrm.h>
DRMGetSecurityProvider(UINT uFlags,UINT * puTypeLen,PWSTR wszType,UINT * puPathLen,PWSTR wszPath)HRESULT WINAPI <msdrm.h>
DRMGetServiceLocation(DRMHSESSION hClient,UINT uServiceType,UINT uServiceLocation,PWSTR wszIssuanceLicense,UINT * puServiceURLLength,PWSTR wszServiceURL)HRESULT WINAPI <msdrm.h>
DRMGetSignedIssuanceLicense(DRMENVHANDLE hEnv,DRMPUBHANDLE hIssuanceLicense,UINT uFlags,BYTE * pbSymKey,UINT cbSymKey,PWSTR wszSymKeyType,PWSTR wszClientLicensorCertificate,DRMCALLBACK pfnCallback,PWSTR wszURL,VOID * pvContext)HRESULT WINAPI <msdrm.h>
DRMGetSignedIssuanceLicenseEx(DRMENVHANDLE hEnv,DRMPUBHANDLE hIssuanceLicense,UINT uFlags,BYTE * pbSymKey,UINT cbSymKey,PWSTR wszSymKeyType,VOID * pvReserved,DRMHANDLE hEnablingPrincipal,DRMHANDLE hBoundLicense,DRMCALLBACK pfnCallback,VOID * pvContext)HRESULT WINAPI <msdrm.h>
DRMGetTime(DRMENVHANDLE hEnv,DRMTIMETYPE eTimerIdType,SYSTEMTIME * poTimeObject)HRESULT WINAPI <msdrm.h>
DRMGetUnboundLicenseAttribute(DRMQUERYHANDLE hQueryRoot,PWSTR wszAttributeType,UINT iWhich,DRMENCODINGTYPE * peEncoding,UINT * pcBuffer,BYTE * pbBuffer)HRESULT WINAPI <msdrm.h>
DRMGetUnboundLicenseAttributeCount(DRMQUERYHANDLE hQueryRoot,PWSTR wszAttributeType,UINT * pcAttributes)HRESULT WINAPI <msdrm.h>
DRMGetUnboundLicenseObject(DRMQUERYHANDLE hQueryRoot,PWSTR wszSubObjectType,UINT iIndex,DRMQUERYHANDLE * phSubQuery)HRESULT WINAPI <msdrm.h>
DRMGetUnboundLicenseObjectCount(DRMQUERYHANDLE hQueryRoot,PWSTR wszSubObjectType,UINT * pcSubObjects)HRESULT WINAPI <msdrm.h>
DRMGetUsagePolicy(DRMPUBHANDLE hIssuanceLicense,UINT uIndex,DRM_USAGEPOLICY_TYPE * peUsagePolicyType,WINBOOL * pfExclusion,UINT * puNameLength,PWSTR wszName,UINT * puMinVersionLength,PWSTR wszMinVersion,UINT * puMaxVersionLength,PWSTR wszMaxVersion,UINT * puPublicKeyLength,PWSTR wszPublicKey,UINT * puDigestAlgorithmLength,PWSTR wszDigestAlgorithm,UINT * pcbDigest,BYTE * pbDigest)HRESULT WINAPI <msdrm.h>
DRMGetUserInfo(DRMPUBHANDLE hUser,UINT * puUserNameLength,PWSTR wszUserName,UINT * puUserIdLength,PWSTR wszUserId,UINT * puUserIdTypeLength,PWSTR wszUserIdType)HRESULT WINAPI <msdrm.h>
DRMGetUserRights(DRMPUBHANDLE hIssuanceLicense,DRMPUBHANDLE hUser,UINT uIndex,DRMPUBHANDLE * phRight)HRESULT WINAPI <msdrm.h>
DRMGetUsers(DRMPUBHANDLE hIssuanceLicense,UINT uIndex,DRMPUBHANDLE * phUser)HRESULT WINAPI <msdrm.h>
DRMInitEnvironment(DRMSECURITYPROVIDERTYPE eSecurityProviderType,DRMSPECTYPE eSpecification,PWSTR wszSecurityProvider,PWSTR wszManifestCredentials,PWSTR wszMachineCredentials,DRMENVHANDLE * phEnv,DRMHANDLE * phDefaultLibrary)HRESULT WINAPI <msdrm.h>
DRMIsActivated(DRMHSESSION hClient,UINT uFlags,DRM_ACTSERV_INFO * pActServInfo)HRESULT WINAPI <msdrm.h>
DRMIsWindowProtected(HWND hwnd,WINBOOL * pfProtected)HRESULT WINAPI <msdrm.h>
DRMLoadLibrary(DRMENVHANDLE hEnv,DRMSPECTYPE eSpecification,PWSTR wszLibraryProvider,PWSTR wszCredentials,DRMHANDLE * phLibrary)HRESULT WINAPI <msdrm.h>
DRMParseUnboundLicense(PWSTR wszCertificate,DRMQUERYHANDLE * phQueryRoot)HRESULT WINAPI <msdrm.h>
DRMRegisterContent(WINBOOL fRegister)HRESULT WINAPI <msdrm.h>
DRMRegisterProtectedWindow(DRMENVHANDLE hEnv,HWND hwnd)HRESULT WINAPI <msdrm.h>
DRMRegisterRevocationList(DRMENVHANDLE hEnv,PWSTR wszRevocationList)HRESULT WINAPI <msdrm.h>
DRMRepair(void)HRESULT WINAPI <msdrm.h>
DRMSetApplicationSpecificData(DRMPUBHANDLE hIssuanceLicense,WINBOOL fDelete,PWSTR wszName,PWSTR wszValue)HRESULT WINAPI <msdrm.h>
DRMSetGlobalOptions(DRMGLOBALOPTIONS eGlobalOptions,LPVOID pvdata,DWORD dwlen)HRESULT WINAPI <msdrm.h>
DRMSetIntervalTime(DRMPUBHANDLE hIssuanceLicense,UINT cDays)HRESULT WINAPI <msdrm.h>
DRMSetMetaData(DRMPUBHANDLE hIssuanceLicense,PWSTR wszContentId,PWSTR wszContentIdType,PWSTR wszSKUId,PWSTR wszSKUIdType,PWSTR wszContentType,PWSTR wszContentName)HRESULT WINAPI <msdrm.h>
DRMSetNameAndDescription(DRMPUBHANDLE hIssuanceLicense,WINBOOL fDelete,UINT lcid,PWSTR wszName,PWSTR wszDescription)HRESULT WINAPI <msdrm.h>
DRMSetRevocationPoint(DRMPUBHANDLE hIssuanceLicense,WINBOOL fDelete,PWSTR wszId,PWSTR wszIdType,PWSTR wszURL,SYSTEMTIME * pstFrequency,PWSTR wszName,PWSTR wszPublicKey)HRESULT WINAPI <msdrm.h>
DRMSetUsagePolicy(DRMPUBHANDLE hIssuanceLicense,DRM_USAGEPOLICY_TYPE eUsagePolicyType,WINBOOL fDelete,WINBOOL fExclusion,PWSTR wszName,PWSTR wszMinVersion,PWSTR wszMaxVersion,PWSTR wszPublicKey,PWSTR wszDigestAlgorithm,BYTE * pbDigest,UINT cbDigest)HRESULT WINAPI <msdrm.h>
DRMVerify(PWSTR wszData,UINT * pcStrLenAttestedData,PWSTR wszAttestedData,DRMATTESTTYPE * peType,UINT * pcPrincipalChain,PWSTR wszPrincipalChain,UINT * pcManifestChain,PWSTR wszManifestChain)HRESULT WINAPI <msdrm.h>
DropColumn(DBID * pTableID,DBID * pColumnID)virtual HRESULT WINAPI <oledb.h>
DropConstraint(DBID * pTableID,DBID * pConstraintID)virtual HRESULT WINAPI <oledb.h>
DropIndex(DBID * pTableID,DBID * pIndexID)virtual HRESULT WINAPI <oledb.h>
DropTable(DBID * pTableID)virtual HRESULT WINAPI <oledb.h>
DrvAlphaBlend(SURFOBJ * psoDest,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDest,RECTL * prclSrc,BLENDOBJ * pBlendObj)<winddi.h>
DrvAssertMode(DHPDEV dhpdev,WINBOOL bEnable)<winddi.h>
DrvBitBlt(SURFOBJ * psoTrg,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclTrg,POINTL * pptlSrc,POINTL * pptlMask,BRUSHOBJ * pbo,POINTL * pptlBrush,ROP4 rop4)<winddi.h>
DrvCompletePDEV(DHPDEV dhpdev,HDEV hdev)<winddi.h>
DrvCopyBits(SURFOBJ * psoDest,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDest,POINTL * pptlSrc)<winddi.h>
DrvCreateDeviceBitmap(DHPDEV dhpdev,SIZEL sizl,ULONG iFormat)<winddi.h>
DrvDeleteDeviceBitmap(DHSURF dhsurf)<winddi.h>
DrvDeriveSurface(DD_DIRECTDRAW_GLOBAL * pDirectDraw,DD_SURFACE_LOCAL * pSurface)<winddi.h>
DrvDescribePixelFormat(DHPDEV dhpdev,LONG iPixelFormat,ULONG cjpfd,PIXELFORMATDESCRIPTOR * ppfd)<winddi.h>
DrvDestroyFont(FONTOBJ * pfo)<winddi.h>
DrvDisableDirectDraw(DHPDEV dhpdev)<winddi.h>
DrvDisableDriver(VOID)<winddi.h>
DrvDisablePDEV(DHPDEV dhpdev)<winddi.h>
DrvDisableSurface(DHPDEV dhpdev)<winddi.h>
DrvDitherColor(DHPDEV dhpdev,ULONG iMode,ULONG rgb,ULONG * pul)<winddi.h>
DrvDocumentEvent(HANDLE,HDC,int,ULONG,PVOID,ULONG,PVOID)int WINAPI <winddiui.h>
DrvDrawEscape(SURFOBJ * pso,ULONG iEsc,CLIPOBJ * pco,RECTL * prcl,ULONG cjIn,PVOID pvIn)<winddi.h>
DrvDriverEvent(DWORD,DWORD,LPBYTE,LPARAM)WINBOOL WINAPI <winddiui.h>
DrvEnableDirectDraw(DHPDEV dhpdev,DD_CALLBACKS * pCallBacks,DD_SURFACECALLBACKS * pSurfaceCallBacks,DD_PALETTECALLBACKS * pPaletteCallBacks)<winddi.h>
DrvEnableDriver(ULONG iEngineVersion,ULONG cj,DRVENABLEDATA * pded)<winddi.h>
DrvEnablePDEV(DEVMODEW * pdm,LPWSTR pwszLogAddress,ULONG cPat,HSURF * phsurfPatterns,ULONG cjCaps,ULONG * pdevcaps,ULONG cjDevInfo,DEVINFO * pdi,HDEV hdev,LPWSTR pwszDeviceName,HANDLE hDriver)<winddi.h>
DrvEnableSurface(DHPDEV dhpdev)<winddi.h>
DrvEndDoc(SURFOBJ * pso,FLONG fl)<winddi.h>
DrvEscape(SURFOBJ * pso,ULONG iEsc,ULONG cjIn,PVOID pvIn,ULONG cjOut,PVOID pvOut)<winddi.h>
DrvFillPath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,MIX mix,FLONG flOptions)<winddi.h>
DrvFontManagement(SURFOBJ * pso,FONTOBJ * pfo,ULONG iMode,ULONG cjIn,PVOID pvIn,ULONG cjOut,PVOID pvOut)<winddi.h>
DrvFree(PVOID pv,ULONG_PTR id)<winddi.h>
DrvGetDirectDrawInfo(DHPDEV dhpdev,DD_HALINFO * pHalInfo,DWORD * pdwNumHeaps,VIDEOMEMORY * pvmList,DWORD * pdwNumFourCCCodes,DWORD * pdwFourCC)<winddi.h>
DrvGetGlyphMode(DHPDEV dhpdev,FONTOBJ * pfo)<winddi.h>
DrvGetModes(HANDLE hDriver,ULONG cjSize,DEVMODEW * pdm)<winddi.h>
DrvGetModuleHandle(HDRVR hDriver) WINMMAPI HMODULE WINAPI <mmsystem.h>
DrvGetTrueTypeFile(ULONG_PTR iFile,ULONG * pcj)<winddi.h>
DrvGradientFill(SURFOBJ * psoDest,CLIPOBJ * pco,XLATEOBJ * pxlo,TRIVERTEX * pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,RECTL * prclExtents,POINTL * pptlDitherOrg,ULONG ulMode)<winddi.h>
DrvIcmCheckBitmapBits(DHPDEV dhpdev,HANDLE hColorTransform,SURFOBJ * pso,PBYTE paResults)<winddi.h>
DrvIcmCreateColorTransform(DHPDEV dhpdev,LPLOGCOLORSPACEW pLogColorSpace,PVOID pvSourceProfile,ULONG cjSourceProfile,PVOID pvDestProfile,ULONG cjDestProfile,PVOID pvTargetProfile,ULONG cjTargetProfile,DWORD dwReserved)<winddi.h>
DrvIcmDeleteColorTransform(DHPDEV dhpdev,HANDLE hcmXform)<winddi.h>
DrvIcmSetDeviceGammaRamp(DHPDEV dhpdev,ULONG iFormat,LPVOID lpRamp)<winddi.h>
DrvLineTo(SURFOBJ * pso,CLIPOBJ * pco,BRUSHOBJ * pbo,LONG x1,LONG y1,LONG x2,LONG y2,RECTL * prclBounds,MIX mix)<winddi.h>
DrvLoadFontFile(ULONG cFiles,ULONG_PTR * piFile,PVOID * ppvView,ULONG * pcjView,DESIGNVECTOR * pdv,ULONG ulLangID,ULONG ulFastCheckSum)<winddi.h>
DrvMovePointer(SURFOBJ * pso,LONG x,LONG y,RECTL * prcl)<winddi.h>
DrvNextBand(SURFOBJ * pso,POINTL * pptl)<winddi.h>
DrvNotify(SURFOBJ * pso,ULONG iType,PVOID pvData)<winddi.h>
DrvOffset(SURFOBJ * pso,LONG x,LONG y,FLONG flReserved)<winddi.h>
DrvPaint(SURFOBJ * pso,CLIPOBJ * pco,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,MIX mix)<winddi.h>
DrvPlgBlt(SURFOBJ * psoTrg,SURFOBJ * psoSrc,SURFOBJ * psoMsk,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlBrushOrg,POINTFIX * pptfx,RECTL * prcl,POINTL * pptl,ULONG iMode)<winddi.h>
DrvPrinterEvent(LPWSTR,INT,DWORD,LPARAM)WINBOOL WINAPI <winddiui.h>
DrvQueryAdvanceWidths(DHPDEV dhpdev,FONTOBJ * pfo,ULONG iMode,HGLYPH * phg,PVOID pvWidths,ULONG cGlyphs)<winddi.h>
DrvQueryDeviceSupport(SURFOBJ * pso,XLATEOBJ * pxlo,XFORMOBJ * pxo,ULONG iType,ULONG cjIn,PVOID pvIn,ULONG cjOut,PVOID pvOut)<winddi.h>
DrvQueryDriverInfo(DWORD dwMode,PVOID pBuffer,DWORD cbBuf,PDWORD pcbNeeded)<winddi.h>
DrvQueryFont(DHPDEV dhpdev,ULONG_PTR iFile,ULONG iFace,ULONG_PTR * pid)<winddi.h>
DrvQueryFontCaps(ULONG culCaps,ULONG * pulCaps)<winddi.h>
DrvQueryFontData(DHPDEV dhpdev,FONTOBJ * pfo,ULONG iMode,HGLYPH hg,GLYPHDATA * pgd,PVOID pv,ULONG cjSize)<winddi.h>
DrvQueryFontFile(ULONG_PTR iFile,ULONG ulMode,ULONG cjBuf,ULONG * pulBuf)<winddi.h>
DrvQueryFontTree(DHPDEV dhpdev,ULONG_PTR iFile,ULONG iFace,ULONG iMode,ULONG_PTR * pid)<winddi.h>
DrvQueryGlyphAttrs(FONTOBJ * pfo,ULONG iMode)<winddi.h>
DrvQueryPerBandInfo(SURFOBJ * pso,PERBANDINFO * pbi)<winddi.h>
DrvQuerySpoolType(DHPDEV dhpdev,LPWSTR pwchType)<winddi.h>
DrvQueryTrueTypeOutline(DHPDEV dhpdev,FONTOBJ * pfo,HGLYPH hglyph,WINBOOL bMetricsOnly,GLYPHDATA * pgldt,ULONG cjBuf,TTPOLYGONHEADER * ppoly)<winddi.h>
DrvQueryTrueTypeTable(ULONG_PTR iFile,ULONG ulFont,ULONG ulTag,PTRDIFF dpStart,ULONG cjBuf,BYTE * pjBuf,PBYTE * ppjTable,ULONG * pcjTable)<winddi.h>
DrvRealizeBrush(BRUSHOBJ * pbo,SURFOBJ * psoTarget,SURFOBJ * psoPattern,SURFOBJ * psoMask,XLATEOBJ * pxlo,ULONG iHatch)<winddi.h>
DrvResetDevice(DHPDEV dhpdev,PVOID Reserved)<winddi.h>
DrvResetPDEV(DHPDEV dhpdevOld,DHPDEV dhpdevNew)<winddi.h>
DrvSaveScreenBits(SURFOBJ * pso,ULONG iMode,ULONG_PTR ident,RECTL * prcl)<winddi.h>
DrvSendPage(SURFOBJ * pso)<winddi.h>
DrvSetPalette(DHPDEV dhpdev,PALOBJ * ppalo,FLONG fl,ULONG iStart,ULONG cColors)<winddi.h>
DrvSetPixelFormat(SURFOBJ * pso,LONG iPixelFormat,HWND hwnd)<winddi.h>
DrvSetPointerShape(SURFOBJ * pso,SURFOBJ * psoMask,SURFOBJ * psoColor,XLATEOBJ * pxlo,LONG xHot,LONG yHot,LONG x,LONG y,RECTL * prcl,FLONG fl)<winddi.h>
DrvStartBanding(SURFOBJ * pso,POINTL * pptl)<winddi.h>
DrvStartDoc(SURFOBJ * pso,LPWSTR pwszDocName,DWORD dwJobId)<winddi.h>
DrvStartPage(SURFOBJ * pso)<winddi.h>
DrvStretchBlt(SURFOBJ * psoDest,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlHTOrg,RECTL * prclDest,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode)<winddi.h>
DrvStretchBltROP(SURFOBJ * psoDest,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlHTOrg,RECTL * prclDest,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode,BRUSHOBJ * pbo,DWORD rop4)<winddi.h>
DrvStrokeAndFillPath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,XFORMOBJ * pxo,BRUSHOBJ * pboStroke,LINEATTRS * plineattrs,BRUSHOBJ * pboFill,POINTL * pptlBrushOrg,MIX mixFill,FLONG flOptions)<winddi.h>
DrvStrokePath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,XFORMOBJ * pxo,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,LINEATTRS * plineattrs,MIX mix)<winddi.h>
DrvSwapBuffers(SURFOBJ * pso,WNDOBJ * pwo)<winddi.h>
DrvSynchronize(DHPDEV dhpdev,RECTL * prcl)<winddi.h>
DrvSynchronizeSurface(SURFOBJ * pso,RECTL * prcl,FLONG fl)<winddi.h>
DrvTextOut(SURFOBJ * pso,STROBJ * pstro,FONTOBJ * pfo,CLIPOBJ * pco,RECTL * prclExtra,RECTL * prclOpaque,BRUSHOBJ * pboFore,BRUSHOBJ * pboOpaque,POINTL * pptlOrg,MIX mix)<winddi.h>
DrvTransparentBlt(SURFOBJ * psoDst,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDst,RECTL * prclSrc,ULONG iTransColor,ULONG ulReserved)<winddi.h>
DrvUnloadFontFile(ULONG_PTR iFile)<winddi.h>
DSA_AppendItem(hdsa, pitem)<commctrl.h>
DSA_Clone(HDSA hdsa) WINCOMMCTRLAPI HDSA WINAPI <commctrl.h>
DSA_Create(int cbItem,int cItemGrow) WINCOMMCTRLAPI HDSA WINAPI <commctrl.h>
DSA_DeleteAllItems(HDSA hdsa) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DSA_DeleteItem(HDSA hdsa,int i) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DSA_Destroy(HDSA hdsa) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DSA_DestroyCallback(HDSA hdsa,PFNDAENUMCALLBACK pfnCB,void * pData) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DSA_DestroyCallback(HDSA hdsa,PFNDAENUMCALLBACKCONST pfnCB,void * pData) extern<commctrl.h>
DSA_EnumCallback(HDSA hdsa,PFNDAENUMCALLBACK pfnCB,void * pData) WINCOMMCTRLAPI void WINAPI <commctrl.h>
DSA_EnumCallback(HDSA hdsa,PFNDAENUMCALLBACKCONST pfnCB,void * pData) extern<commctrl.h>
DSA_GetItem(HDSA hdsa,int i,void * pitem) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DSA_GetItemCount(hdsa)<commctrl.h>
DSA_GetItemPtr(HDSA hdsa,int i) WINCOMMCTRLAPI PVOID WINAPI <commctrl.h>
DSA_GetSize(HDSA hdsa) WINCOMMCTRLAPI ULONGLONG WINAPI <commctrl.h>
DSA_InsertItem(HDSA hdsa,int i,const void * pitem) WINCOMMCTRLAPI int WINAPI <commctrl.h>
DSA_SetItem(HDSA hdsa,int i,const void * pitem) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DSA_Sort(HDSA hdsa,PFNDACOMPARECONST pfnCompare,LPARAM lParam) extern<commctrl.h>
DSA_Sort(HDSA pdsa,PFNDACOMPARE pfnCompare,LPARAM lParam) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
DsAddressToSiteNames(LPCSTR ComputerName,DWORD EntryCount,PSOCKET_ADDRESS SocketAddresses,LPSTR ** SiteNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsAddressToSiteNamesA(LPCSTR ComputerName,DWORD EntryCount,PSOCKET_ADDRESS SocketAddresses,LPSTR ** SiteNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsAddressToSiteNamesEx(LPCSTR ComputerName,DWORD EntryCount,PSOCKET_ADDRESS SocketAddresses,LPSTR ** SiteNames,LPSTR ** SubnetNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsAddressToSiteNamesExA(LPCSTR ComputerName,DWORD EntryCount,PSOCKET_ADDRESS SocketAddresses,LPSTR ** SiteNames,LPSTR ** SubnetNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsAddressToSiteNamesExW(LPCWSTR ComputerName,DWORD EntryCount,PSOCKET_ADDRESS SocketAddresses,LPWSTR ** SiteNames,LPWSTR ** SubnetNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsAddressToSiteNamesW(LPCWSTR ComputerName,DWORD EntryCount,PSOCKET_ADDRESS SocketAddresses,LPWSTR ** SiteNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsAddSidHistory(HANDLE hDS,DWORD Flags,LPCSTR SrcDomain,LPCSTR SrcPrincipal,LPCSTR SrcDomainController,RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds,LPCSTR DstDomain,LPCSTR DstPrincipal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsAddSidHistoryA(HANDLE hDS,DWORD Flags,LPCSTR SrcDomain,LPCSTR SrcPrincipal,LPCSTR SrcDomainController,RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds,LPCSTR DstDomain,LPCSTR DstPrincipal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsAddSidHistoryW(HANDLE hDS,DWORD Flags,LPCWSTR SrcDomain,LPCWSTR SrcPrincipal,LPCWSTR SrcDomainController,RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds,LPCWSTR DstDomain,LPCWSTR DstPrincipal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBackupClose(HBC hbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupEnd(HBC hbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupFree(PVOID pvBuffer) VOID NTDSBCLI_API <ntdsbcli.h>
DsBackupGetBackupLogs(HBC hbc,LPSTR * pszBackupLogFiles,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupGetBackupLogsA(HBC hbc,LPSTR * pszBackupLogFiles,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupGetBackupLogsW(HBC hbc,LPWSTR * pszBackupLogFiles,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupGetDatabaseNames(HBC hbc,LPSTR * pszAttachmentInfo,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupGetDatabaseNamesA(HBC hbc,LPSTR * pszAttachmentInfo,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupGetDatabaseNamesW(HBC hbc,LPWSTR * pszAttachmentInfo,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupOpenFile(HBC hbc,LPCSTR szAttachmentName,DWORD cbReadHintSize,LARGE_INTEGER * pliFileSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupOpenFileA(HBC hbc,LPCSTR szAttachmentName,DWORD cbReadHintSize,LARGE_INTEGER * pliFileSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupOpenFileW(HBC hbc,LPCWSTR szAttachmentName,DWORD cbReadHintSize,LARGE_INTEGER * pliFileSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupPrepare(LPCSTR szBackupServer,ULONG grbit,ULONG btFlag,PVOID * ppvExpiryToken,LPDWORD pcbExpiryTokenSize,HBC * phbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupPrepareA(LPCSTR szBackupServer,ULONG grbit,ULONG btFlag,PVOID * ppvExpiryToken,LPDWORD pcbExpiryTokenSize,HBC * phbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupPrepareW(LPCWSTR szBackupServer,ULONG grbit,ULONG btFlag,PVOID * ppvExpiryToken,LPDWORD pcbExpiryTokenSize,HBC * phbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupRead(HBC hbc,PVOID pvBuffer,DWORD cbBuffer,PDWORD pcbRead) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBackupTruncateLogs(HBC hbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsBind(LPCSTR DomainControllerName,LPCSTR DnsDomainName,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindA(LPCSTR DomainControllerName,LPCSTR DnsDomainName,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindingSetTimeout(HANDLE hDS,ULONG cTimeoutSecs) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindToISTG(LPCSTR SiteName,HANDLE * phDS) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindToISTGA(LPCSTR SiteName,HANDLE * phDS) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindToISTGW(LPCWSTR SiteName,HANDLE * phDS) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindW(LPCWSTR DomainControllerName,LPCWSTR DnsDomainName,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindWithCred(LPCSTR DomainControllerName,LPCSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindWithCredA(LPCSTR DomainControllerName,LPCSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindWithCredW(LPCWSTR DomainControllerName,LPCWSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindWithSpn(LPCSTR DomainControllerName,LPCSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,LPCSTR ServicePrincipalName,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindWithSpnA(LPCSTR DomainControllerName,LPCSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,LPCSTR ServicePrincipalName,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBindWithSpnEx(LPCSTR DomainControllerName,LPCSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,LPCSTR ServicePrincipalName,DWORD BindFlags,HANDLE * phDS) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindWithSpnExA(LPCSTR DomainControllerName,LPCSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,LPCSTR ServicePrincipalName,DWORD BindFlags,HANDLE * phDS) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindWithSpnExW(LPCWSTR DomainControllerName,LPCWSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,LPCWSTR ServicePrincipalName,DWORD BindFlags,HANDLE * phDS) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsBindWithSpnW(LPCWSTR DomainControllerName,LPCWSTR DnsDomainName,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,LPCWSTR ServicePrincipalName,HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsBrowseForContainer(PDSBROWSEINFOA pInfo)STDAPI_<dsclient.h>
DsBrowseForContainerA(PDSBROWSEINFOA pInfo)STDAPI_<dsclient.h>
DsBrowseForContainerW(PDSBROWSEINFOW pInfo)STDAPI_<dsclient.h>
DSBUSID_IS_SPKR_LOC(id)<dmusicc.h>
DsClientMakeSpnForTargetServer(LPCSTR ServiceClass,LPCSTR ServiceName,DWORD * pcSpnLength,LPSTR pszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsClientMakeSpnForTargetServerA(LPCSTR ServiceClass,LPCSTR ServiceName,DWORD * pcSpnLength,LPSTR pszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsClientMakeSpnForTargetServerW(LPCWSTR ServiceClass,LPCWSTR ServiceName,DWORD * pcSpnLength,LPWSTR pszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackNames(HANDLE hDS,DS_NAME_FLAGS flags,DS_NAME_FORMAT formatOffered,DS_NAME_FORMAT formatDesired,DWORD cNames,const LPCSTR * rpNames,PDS_NAME_RESULTA * ppResult) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackNamesA(HANDLE hDS,DS_NAME_FLAGS flags,DS_NAME_FORMAT formatOffered,DS_NAME_FORMAT formatDesired,DWORD cNames,const LPCSTR * rpNames,PDS_NAME_RESULTA * ppResult) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackNamesW(HANDLE hDS,DS_NAME_FLAGS flags,DS_NAME_FORMAT formatOffered,DS_NAME_FORMAT formatDesired,DWORD cNames,const LPCWSTR * rpNames,PDS_NAME_RESULTW * ppResult) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackSpn(LPCSTR pszSpn,LPDWORD pcServiceClass,LPSTR ServiceClass,LPDWORD pcServiceName,LPSTR ServiceName,LPDWORD pcInstanceName,LPSTR InstanceName,USHORT * pInstancePort) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackSpnA(LPCSTR pszSpn,LPDWORD pcServiceClass,LPSTR ServiceClass,LPDWORD pcServiceName,LPSTR ServiceName,LPDWORD pcInstanceName,LPSTR InstanceName,USHORT * pInstancePort) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackSpnW(LPCWSTR pszSpn,DWORD * pcServiceClass,LPWSTR ServiceClass,DWORD * pcServiceName,LPWSTR ServiceName,DWORD * pcInstanceName,LPWSTR InstanceName,USHORT * pInstancePort) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsCrackUnquotedMangledRdn(LPCSTR pszRDN,DWORD cchRDN,GUID * pGuid,DS_MANGLE_FOR * peDsMangleFor) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsCrackUnquotedMangledRdnA(LPCSTR pszRDN,DWORD cchRDN,GUID * pGuid,DS_MANGLE_FOR * peDsMangleFor) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsCrackUnquotedMangledRdnW(LPCWSTR pszRDN,DWORD cchRDN,GUID * pGuid,DS_MANGLE_FOR * peDsMangleFor) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DSCreateISecurityInfoObject(LPCWSTR pwszObjectPath,LPCWSTR pwszObjectClass,DWORD dwFlags,LPSECURITYINFO * ppSI,PFNREADOBJECTSECURITY pfnReadSD,PFNWRITEOBJECTSECURITY pfnWriteSD,LPARAM lpContext)HRESULT WINAPI <dssec.h>
DSCreateISecurityInfoObjectEx(LPCWSTR pwszObjectPath,LPCWSTR pwszObjectClass,LPCWSTR pwszServer,LPCWSTR pwszUserName,LPCWSTR pwszPassword,DWORD dwFlags,LPSECURITYINFO * ppSI,PFNREADOBJECTSECURITY pfnReadSD,PFNWRITEOBJECTSECURITY pfnWriteSD,LPARAM lpContext)HRESULT WINAPI <dssec.h>
DsDeregisterDnsHostRecords(LPSTR ServerName,LPSTR DnsDomainName,GUID * DomainGuid,GUID * DsaGuid,LPSTR DnsHostName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsDeregisterDnsHostRecordsA(LPSTR ServerName,LPSTR DnsDomainName,GUID * DomainGuid,GUID * DsaGuid,LPSTR DnsHostName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsDeregisterDnsHostRecordsW(LPWSTR ServerName,LPWSTR DnsDomainName,GUID * DomainGuid,GUID * DsaGuid,LPWSTR DnsHostName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DSEditSecurity(HWND hwndOwner,LPCWSTR pwszObjectPath,LPCWSTR pwszObjectClass,DWORD dwFlags,LPCWSTR * pwszCaption,PFNREADOBJECTSECURITY pfnReadSD,PFNWRITEOBJECTSECURITY pfnWriteSD,LPARAM lpContext)HRESULT WINAPI <dssec.h>
DsEnumerateDomainTrusts(LPSTR ServerName,ULONG Flags,PDS_DOMAIN_TRUSTSA * Domains,PULONG DomainCount) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsEnumerateDomainTrustsA(LPSTR ServerName,ULONG Flags,PDS_DOMAIN_TRUSTSA * Domains,PULONG DomainCount) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsEnumerateDomainTrustsW(LPWSTR ServerName,ULONG Flags,PDS_DOMAIN_TRUSTSW * Domains,PULONG DomainCount) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsFreeDomainControllerInfo(DWORD InfoLevel,DWORD cInfo,VOID * pInfo) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeDomainControllerInfoA(DWORD InfoLevel,DWORD cInfo,VOID * pInfo) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeDomainControllerInfoW(DWORD InfoLevel,DWORD cInfo,VOID * pInfo) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeNameResult(DS_NAME_RESULTA * pResult) NTDSAPI void WINAPI <ntdsapi.h>
DsFreeNameResultA(DS_NAME_RESULTA * pResult) NTDSAPI void WINAPI <ntdsapi.h>
DsFreeNameResultW(DS_NAME_RESULTW * pResult) NTDSAPI void WINAPI <ntdsapi.h>
DsFreePasswordCredentials(RPC_AUTH_IDENTITY_HANDLE AuthIdentity) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeSchemaGuidMap(PDS_SCHEMA_GUID_MAPA pGuidMap) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeSchemaGuidMapA(PDS_SCHEMA_GUID_MAPA pGuidMap) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeSchemaGuidMapW(PDS_SCHEMA_GUID_MAPW pGuidMap) NTDSAPI VOID WINAPI <ntdsapi.h>
DsFreeSpnArray(DWORD cSpn,LPSTR * rpszSpn) NTDSAPI void WINAPI <ntdsapi.h>
DsFreeSpnArrayA(DWORD cSpn,LPSTR * rpszSpn) NTDSAPI void WINAPI <ntdsapi.h>
DsFreeSpnArrayW(DWORD cSpn,LPWSTR * rpszSpn) NTDSAPI void WINAPI <ntdsapi.h>
DsGetDcCloseW(HANDLE GetDcContextHandle) DSGETDCAPI VOID WINAPI <dsgetdc.h>
DsGetDcName(LPCSTR ComputerName,LPCSTR DomainName,GUID * DomainGuid,LPCSTR SiteName,ULONG Flags,PDOMAIN_CONTROLLER_INFOA * DomainControllerInfo) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcNameA(LPCSTR ComputerName,LPCSTR DomainName,GUID * DomainGuid,LPCSTR SiteName,ULONG Flags,PDOMAIN_CONTROLLER_INFOA * DomainControllerInfo) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcNameW(LPCWSTR ComputerName,LPCWSTR DomainName,GUID * DomainGuid,LPCWSTR SiteName,ULONG Flags,PDOMAIN_CONTROLLER_INFOW * DomainControllerInfo) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcNext(HANDLE GetDcContextHandle,PULONG SockAddressCount,LPSOCKET_ADDRESS * SockAddresses,LPSTR * DnsHostName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcNextA(HANDLE GetDcContextHandle,PULONG SockAddressCount,LPSOCKET_ADDRESS * SockAddresses,LPSTR * DnsHostName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcNextW(HANDLE GetDcContextHandle,PULONG SockAddressCount,LPSOCKET_ADDRESS * SockAddresses,LPWSTR * DnsHostName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcOpen(LPCSTR DnsName,ULONG OptionFlags,LPCSTR SiteName,GUID * DomainGuid,LPCSTR DnsForestName,ULONG DcFlags,PHANDLE RetGetDcContext) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcOpenA(LPCSTR DnsName,ULONG OptionFlags,LPCSTR SiteName,GUID * DomainGuid,LPCSTR DnsForestName,ULONG DcFlags,PHANDLE RetGetDcContext) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcOpenW(LPCWSTR DnsName,ULONG OptionFlags,LPCWSTR SiteName,GUID * DomainGuid,LPCWSTR DnsForestName,ULONG DcFlags,PHANDLE RetGetDcContext) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcSiteCoverage(LPCSTR ServerName,PULONG EntryCount,LPSTR ** SiteNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcSiteCoverageA(LPCSTR ServerName,PULONG EntryCount,LPSTR ** SiteNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDcSiteCoverageW(LPCWSTR ServerName,PULONG EntryCount,LPWSTR ** SiteNames) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetDomainControllerInfo(HANDLE hDs,LPCSTR DomainName,DWORD InfoLevel,DWORD * pcOut,VOID ** ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsGetDomainControllerInfoA(HANDLE hDs,LPCSTR DomainName,DWORD InfoLevel,DWORD * pcOut,VOID ** ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsGetDomainControllerInfoW(HANDLE hDs,LPCWSTR DomainName,DWORD InfoLevel,DWORD * pcOut,VOID ** ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsGetForestTrustInformationW(LPCWSTR ServerName,LPCWSTR TrustedDomainName,DWORD Flags,PLSA_FOREST_TRUST_INFORMATION * ForestTrustInfo) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetFriendlyClassName(LPWSTR pszObjectClass,LPWSTR pszBuffer,UINT cchBuffer)STDAPI <dsclient.h>
DsGetIcon(DWORD dwFlags,LPWSTR pszObjectClass,INT cxImage,INT cyImage)STDAPI_<dsclient.h>
DsGetRdnW(LPCWCH * ppDN,DWORD * pcDN,LPCWCH * ppKey,DWORD * pcKey,LPCWCH * ppVal,DWORD * pcVal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsGetSiteName(LPCSTR ComputerName,LPSTR * SiteName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetSiteNameA(LPCSTR ComputerName,LPSTR * SiteName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetSiteNameW(LPCWSTR ComputerName,LPWSTR * SiteName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsGetSpn(DS_SPN_NAME_TYPE ServiceType,LPCSTR ServiceClass,LPCSTR ServiceName,USHORT InstancePort,USHORT cInstanceNames,LPCSTR * pInstanceNames,const USHORT * pInstancePorts,DWORD * pcSpn,LPSTR ** prpszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsGetSpnA(DS_SPN_NAME_TYPE ServiceType,LPCSTR ServiceClass,LPCSTR ServiceName,USHORT InstancePort,USHORT cInstanceNames,LPCSTR * pInstanceNames,const USHORT * pInstancePorts,DWORD * pcSpn,LPSTR ** prpszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsGetSpnW(DS_SPN_NAME_TYPE ServiceType,LPCWSTR ServiceClass,LPCWSTR ServiceName,USHORT InstancePort,USHORT cInstanceNames,LPCWSTR * pInstanceNames,const USHORT * pInstancePorts,DWORD * pcSpn,LPWSTR ** prpszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DSIGN(x)<xmath.h>
DsInheritSecurityIdentity(HANDLE hDS,DWORD Flags,LPCSTR SrcPrincipal,LPCSTR DstPrincipal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsInheritSecurityIdentityA(HANDLE hDS,DWORD Flags,LPCSTR SrcPrincipal,LPCSTR DstPrincipal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsInheritSecurityIdentityW(HANDLE hDS,DWORD Flags,LPCWSTR SrcPrincipal,LPCWSTR DstPrincipal) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsIsMangledDn(LPCSTR pszDn,DS_MANGLE_FOR eDsMangleFor) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsIsMangledDnA(LPCSTR pszDn,DS_MANGLE_FOR eDsMangleFor) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsIsMangledDnW(LPCWSTR pszDn,DS_MANGLE_FOR eDsMangleFor) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsIsMangledRdnValue(LPCSTR pszRdn,DWORD cRdn,DS_MANGLE_FOR eDsMangleForDesired) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsIsMangledRdnValueA(LPCSTR pszRdn,DWORD cRdn,DS_MANGLE_FOR eDsMangleForDesired) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsIsMangledRdnValueW(LPCWSTR pszRdn,DWORD cRdn,DS_MANGLE_FOR eDsMangleForDesired) NTDSAPI WINBOOL WINAPI <ntdsapi.h>
DsIsNTDSOnline(LPCSTR szServerName,WINBOOL * pfNTDSOnline) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsIsNTDSOnlineA(LPCSTR szServerName,WINBOOL * pfNTDSOnline) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsIsNTDSOnlineW(LPCWSTR szServerName,WINBOOL * pfNTDSOnline) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsListDomainsInSite(HANDLE hDs,LPCSTR site,PDS_NAME_RESULTA * ppDomains) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListDomainsInSiteA(HANDLE hDs,LPCSTR site,PDS_NAME_RESULTA * ppDomains) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListDomainsInSiteW(HANDLE hDs,LPCWSTR site,PDS_NAME_RESULTW * ppDomains) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListInfoForServer(HANDLE hDs,LPCSTR server,PDS_NAME_RESULTA * ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListInfoForServerA(HANDLE hDs,LPCSTR server,PDS_NAME_RESULTA * ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListInfoForServerW(HANDLE hDs,LPCWSTR server,PDS_NAME_RESULTW * ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListRoles(HANDLE hDs,PDS_NAME_RESULTA * ppRoles) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListRolesA(HANDLE hDs,PDS_NAME_RESULTA * ppRoles) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListRolesW(HANDLE hDs,PDS_NAME_RESULTW * ppRoles) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListServersForDomainInSite(HANDLE hDs,LPCSTR domain,LPCSTR site,PDS_NAME_RESULTA * ppServers) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListServersForDomainInSiteA(HANDLE hDs,LPCSTR domain,LPCSTR site,PDS_NAME_RESULTA * ppServers) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListServersForDomainInSiteW(HANDLE hDs,LPCWSTR domain,LPCWSTR site,PDS_NAME_RESULTW * ppServers) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListServersInSite(HANDLE hDs,LPCSTR site,PDS_NAME_RESULTA * ppServers) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListServersInSiteA(HANDLE hDs,LPCSTR site,PDS_NAME_RESULTA * ppServers) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListServersInSiteW(HANDLE hDs,LPCWSTR site,PDS_NAME_RESULTW * ppServers) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListSites(HANDLE hDs,PDS_NAME_RESULTA * ppSites) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListSitesA(HANDLE hDs,PDS_NAME_RESULTA * ppSites) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsListSitesW(HANDLE hDs,PDS_NAME_RESULTW * ppSites) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMakePasswordCredentials(LPCSTR User,LPCSTR Domain,LPCSTR Password,RPC_AUTH_IDENTITY_HANDLE * pAuthIdentity) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMakePasswordCredentialsA(LPCSTR User,LPCSTR Domain,LPCSTR Password,RPC_AUTH_IDENTITY_HANDLE * pAuthIdentity) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMakePasswordCredentialsW(LPCWSTR User,LPCWSTR Domain,LPCWSTR Password,RPC_AUTH_IDENTITY_HANDLE * pAuthIdentity) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMakeSpn(LPCSTR ServiceClass,LPCSTR ServiceName,LPCSTR InstanceName,USHORT InstancePort,LPCSTR Referrer,DWORD * pcSpnLength,LPSTR pszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMakeSpnA(LPCSTR ServiceClass,LPCSTR ServiceName,LPCSTR InstanceName,USHORT InstancePort,LPCSTR Referrer,DWORD * pcSpnLength,LPSTR pszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMakeSpnW(LPCWSTR ServiceClass,LPCWSTR ServiceName,LPCWSTR InstanceName,USHORT InstancePort,LPCWSTR Referrer,DWORD * pcSpnLength,LPWSTR pszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMapSchemaGuids(HANDLE hDs,DWORD cGuids,GUID * rGuids,DS_SCHEMA_GUID_MAPA ** ppGuidMap) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMapSchemaGuidsA(HANDLE hDs,DWORD cGuids,GUID * rGuids,DS_SCHEMA_GUID_MAPA ** ppGuidMap) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMapSchemaGuidsW(HANDLE hDs,DWORD cGuids,GUID * rGuids,DS_SCHEMA_GUID_MAPW ** ppGuidMap) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsMergeForestTrustInformationW(LPCWSTR DomainName,PLSA_FOREST_TRUST_INFORMATION NewForestTrustInfo,PLSA_FOREST_TRUST_INFORMATION OldForestTrustInfo,PLSA_FOREST_TRUST_INFORMATION * MergedForestTrustInfo) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsQuerySitesByCost(HANDLE hDS,LPSTR pwszFromSite,LPSTR * rgwszToSites,DWORD cToSites,DWORD dwFlags,PDS_SITE_COST_INFO * prgSiteInfo) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsQuerySitesByCostA(HANDLE hDS,LPSTR pwszFromSite,LPSTR * rgwszToSites,DWORD cToSites,DWORD dwFlags,PDS_SITE_COST_INFO * prgSiteInfo) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsQuerySitesByCostW(HANDLE hDS,LPWSTR pwszFromSite,LPWSTR * rgwszToSites,DWORD cToSites,DWORD dwFlags,PDS_SITE_COST_INFO * prgSiteInfo) NTDSAPI_POSTXP DWORD WINAPI <ntdsapi.h>
DsQuerySitesFree(PDS_SITE_COST_INFO rgSiteInfo) VOID <ntdsapi.h>
DsQuoteRdnValue(DWORD cUnquotedRdnValueLength,LPCCH psUnquotedRdnValue,DWORD * pcQuotedRdnValueLength,LPCH psQuotedRdnValue) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsQuoteRdnValueA(DWORD cUnquotedRdnValueLength,LPCCH psUnquotedRdnValue,DWORD * pcQuotedRdnValueLength,LPCH psQuotedRdnValue) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsQuoteRdnValueW(DWORD cUnquotedRdnValueLength,LPCWCH psUnquotedRdnValue,DWORD * pcQuotedRdnValueLength,LPWCH psQuotedRdnValue) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRemoveDsDomain(HANDLE hDs,LPSTR DomainDN) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRemoveDsDomainA(HANDLE hDs,LPSTR DomainDN) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRemoveDsDomainW(HANDLE hDs,LPWSTR DomainDN) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRemoveDsServer(HANDLE hDs,LPSTR ServerDN,LPSTR DomainDN,WINBOOL * fLastDcInDomain,WINBOOL fCommit) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRemoveDsServerA(HANDLE hDs,LPSTR ServerDN,LPSTR DomainDN,WINBOOL * fLastDcInDomain,WINBOOL fCommit) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRemoveDsServerW(HANDLE hDs,LPWSTR ServerDN,LPWSTR DomainDN,WINBOOL * fLastDcInDomain,WINBOOL fCommit) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaAdd(HANDLE hDS,LPCSTR NameContext,LPCSTR SourceDsaDn,LPCSTR TransportDn,LPCSTR SourceDsaAddress,const PSCHEDULE pSchedule,DWORD Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaAddA(HANDLE hDS,LPCSTR NameContext,LPCSTR SourceDsaDn,LPCSTR TransportDn,LPCSTR SourceDsaAddress,const PSCHEDULE pSchedule,DWORD Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaAddW(HANDLE hDS,LPCWSTR NameContext,LPCWSTR SourceDsaDn,LPCWSTR TransportDn,LPCWSTR SourceDsaAddress,const PSCHEDULE pSchedule,DWORD Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaConsistencyCheck(HANDLE hDS,DS_KCC_TASKID TaskID,DWORD dwFlags) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaDel(HANDLE hDS,LPCSTR NameContext,LPCSTR DsaSrc,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaDelA(HANDLE hDS,LPCSTR NameContext,LPCSTR DsaSrc,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaDelW(HANDLE hDS,LPCWSTR NameContext,LPCWSTR DsaSrc,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaFreeInfo(DS_REPL_INFO_TYPE InfoType,VOID * pInfo) NTDSAPI void WINAPI <ntdsapi.h>
DsReplicaGetInfo2W(HANDLE hDS,DS_REPL_INFO_TYPE InfoType,LPCWSTR pszObject,UUID * puuidForSourceDsaObjGuid,LPCWSTR pszAttributeName,LPCWSTR pszValue,DWORD dwFlags,DWORD dwEnumerationContext,VOID ** ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaGetInfoW(HANDLE hDS,DS_REPL_INFO_TYPE InfoType,LPCWSTR pszObject,UUID * puuidForSourceDsaObjGuid,VOID ** ppInfo) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaModify(HANDLE hDS,LPCSTR NameContext,const UUID * pUuidSourceDsa,LPCSTR TransportDn,LPCSTR SourceDsaAddress,const PSCHEDULE pSchedule,DWORD ReplicaFlags,DWORD ModifyFields,DWORD Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaModifyA(HANDLE hDS,LPCSTR NameContext,const UUID * pUuidSourceDsa,LPCSTR TransportDn,LPCSTR SourceDsaAddress,const PSCHEDULE pSchedule,DWORD ReplicaFlags,DWORD ModifyFields,DWORD Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaModifyW(HANDLE hDS,LPCWSTR NameContext,const UUID * pUuidSourceDsa,LPCWSTR TransportDn,LPCWSTR SourceDsaAddress,const PSCHEDULE pSchedule,DWORD ReplicaFlags,DWORD ModifyFields,DWORD Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaSync(HANDLE hDS,LPCSTR NameContext,const UUID * pUuidDsaSrc,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaSyncA(HANDLE hDS,LPCSTR NameContext,const UUID * pUuidDsaSrc,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaSyncAll(LPVOID,PDS_REPSYNCALL_UPDATEA),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaSyncAllA(LPVOID,PDS_REPSYNCALL_UPDATEA),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOA ** pErrors) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaSyncAllW(LPVOID,PDS_REPSYNCALL_UPDATEW),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors),LPVOID pCallbackData,PDS_REPSYNCALL_ERRINFOW ** pErrors) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaSyncW(HANDLE hDS,LPCWSTR NameContext,const UUID * pUuidDsaSrc,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaUpdateRefs(HANDLE hDS,LPCSTR NameContext,LPCSTR DsaDest,const UUID * pUuidDsaDest,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaUpdateRefsA(HANDLE hDS,LPCSTR NameContext,LPCSTR DsaDest,const UUID * pUuidDsaDest,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaUpdateRefsW(HANDLE hDS,LPCWSTR NameContext,LPCWSTR DsaDest,const UUID * pUuidDsaDest,ULONG Options) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaVerifyObjects(HANDLE hDS,LPCSTR NameContext,const UUID * pUuidDsaSrc,ULONG ulOptions) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaVerifyObjectsA(HANDLE hDS,LPCSTR NameContext,const UUID * pUuidDsaSrc,ULONG ulOptions) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsReplicaVerifyObjectsW(HANDLE hDS,LPCWSTR NameContext,const UUID * pUuidDsaSrc,ULONG ulOptions) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsRestoreEnd(HBC hbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreGetDatabaseLocations(HBC hbc,LPSTR * pszDatabaseLocationList,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreGetDatabaseLocationsA(HBC hbc,LPSTR * pszDatabaseLocationList,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreGetDatabaseLocationsW(HBC hbc,LPWSTR * pszDatabaseLocationList,LPDWORD pcbSize) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestorePrepare(LPCSTR szServerName,ULONG rtFlag,PVOID pvExpiryToken,DWORD cbExpiryTokenSize,HBC * phbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestorePrepareA(LPCSTR szServerName,ULONG rtFlag,PVOID pvExpiryToken,DWORD cbExpiryTokenSize,HBC * phbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestorePrepareW(LPCWSTR szServerName,ULONG rtFlag,PVOID pvExpiryToken,DWORD cbExpiryTokenSize,HBC * phbc) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreRegister(HBC hbc,LPCSTR szCheckPointFilePath,LPCSTR szLogPath,EDB_RSTMAPA rgrstmap[],LONG crstmap,LPCSTR szBackupLogPath,ULONG genLow,ULONG genHigh) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreRegisterA(HBC hbc,LPCSTR szCheckPointFilePath,LPCSTR szLogPath,EDB_RSTMAPA rgrstmap[],LONG crstmap,LPCSTR szBackupLogPath,ULONG genLow,ULONG genHigh) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreRegisterComplete(HBC hbc,HRESULT hrRestoreState) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRestoreRegisterW(HBC hbc,LPCWSTR szCheckPointFilePath,LPCWSTR szLogPath,EDB_RSTMAPW rgrstmap[],LONG crstmap,LPCWSTR szBackupLogPath,ULONG genLow,ULONG genHigh) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsRoleFreeMemory(PVOID Buffer) VOID WINAPI <dsrole.h>
DsRoleGetPrimaryDomainInformation(LPCWSTR lpServer,DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel,PBYTE * Buffer) DWORD WINAPI <dsrole.h>
DsServerRegisterSpn(DS_SPN_WRITE_OP Operation,LPCSTR ServiceClass,LPCSTR UserObjectDN) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsServerRegisterSpnA(DS_SPN_WRITE_OP Operation,LPCSTR ServiceClass,LPCSTR UserObjectDN) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsServerRegisterSpnW(DS_SPN_WRITE_OP Operation,LPCWSTR ServiceClass,LPCWSTR UserObjectDN) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsSetAuthIdentity(LPCSTR szUserName,LPCSTR szDomainName,LPCSTR szPassword) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsSetAuthIdentityA(LPCSTR szUserName,LPCSTR szDomainName,LPCSTR szPassword) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsSetAuthIdentityW(LPCWSTR szUserName,LPCWSTR szDomainName,LPCWSTR szPassword) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsSetCurrentBackupLog(LPCSTR szServerName,DWORD dwCurrentLog) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsSetCurrentBackupLogA(LPCSTR szServerName,DWORD dwCurrentLog) HRESULT NTDSBCLI_API <ntdsbcli.h>
DsSetCurrentBackupLogW(LPCWSTR szServerName,DWORD dwCurrentLog) HRESULT NTDSBCLI_API <ntdsbcli.h>
DSSPEAKER_COMBINED()()()
DSSPEAKER_COMBINED(c, g)<dsound.h>
DSSPEAKER_CONFIG(a)<dsound.h>
DSSPEAKER_GEOMETRY(a)<dsound.h>
DsUnBind(HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsUnBindA(HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsUnBindW(HANDLE * phDS) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsUnquoteRdnValue(DWORD cQuotedRdnValueLength,LPCCH psQuotedRdnValue,DWORD * pcUnquotedRdnValueLength,LPCH psUnquotedRdnValue) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsUnquoteRdnValueA(DWORD cQuotedRdnValueLength,LPCCH psQuotedRdnValue,DWORD * pcUnquotedRdnValueLength,LPCH psUnquotedRdnValue) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsUnquoteRdnValueW(DWORD cQuotedRdnValueLength,LPCWCH psQuotedRdnValue,DWORD * pcUnquotedRdnValueLength,LPWCH psUnquotedRdnValue) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsValidateSubnetName(LPCSTR SubnetName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsValidateSubnetNameA(LPCSTR SubnetName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsValidateSubnetNameW(LPCWSTR SubnetName) DSGETDCAPI DWORD WINAPI <dsgetdc.h>
DsWriteAccountSpn(HANDLE hDS,DS_SPN_WRITE_OP Operation,LPCSTR pszAccount,DWORD cSpn,LPCSTR * rpszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsWriteAccountSpnA(HANDLE hDS,DS_SPN_WRITE_OP Operation,LPCSTR pszAccount,DWORD cSpn,LPCSTR * rpszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DsWriteAccountSpnW(HANDLE hDS,DS_SPN_WRITE_OP Operation,LPCWSTR pszAccount,DWORD cSpn,LPCWSTR * rpszSpn) NTDSAPI DWORD WINAPI <ntdsapi.h>
DtcGetTransactionManager(char * i_pszHost,char * i_pszTmName,REFIID i_riid,DWORD i_dwReserved1,WORD i_wcbReserved2,void * i_pvReserved2,void ** o_ppvObject)EXPORTAPI __cdecl <xolehlp.h>
DtcGetTransactionManagerC(char * i_pszHost,char * i_pszTmName,REFIID i_riid,DWORD i_dwReserved1,WORD i_wcbReserved2,void * i_pvReserved2,void ** o_ppvObject)EXTERN_C HRESULT __cdecl <xolehlp.h>
DtcGetTransactionManagerEx(char * i_pszHost,char * i_pszTmName,REFIID i_riid,DWORD i_grfOptions,void * i_pvConfigParams,void ** o_ppvObject)EXTERN_C EXPORTAPI __cdecl <xolehlp.h>
DtcGetTransactionManagerExA(char * i_pszHost,char * i_pszTmName,REFIID i_riid,DWORD i_grfOptions,void * i_pvConfigParams,void ** o_ppvObject)EXTERN_C EXPORTAPI __cdecl <xolehlp.h>
DtcGetTransactionManagerExW(WCHAR * i_pwszHost,WCHAR * i_pwszTmName,REFIID i_riid,DWORD i_grfOptions,void * i_pvConfigParams,void ** o_ppvObject)EXTERN_C EXPORTAPI __cdecl <xolehlp.h>
DtcInstallClient(LPTSTR i_pszRemoteTmHostName,DWORD i_dwProtocol,DWORD i_dwOverwrite) HRESULT __cdecl <dtchelp.h>
Dtor()inline void _com_error::<comdef.h>
Dump(const char * pszTextFile) void <sql_1.h>
Dump(FILE *) void <sql_1.h>
DumpDrvItemData(BSTR * bstrData)virtual HRESULT WINAPI <wia.h>
DumpItemData(BSTR * bstrData)virtual HRESULT WINAPI <wia.h>
DumpLogRecords(PWSTR pwszLogFileName,CLFS_RECORD_TYPE fRecordType,PCLFS_LSN plsnStart,PCLFS_LSN plsnEnd,PFILE pstrmOut,CLFS_PRINT_RECORD_ROUTINE pfnPrintRecord,CLFS_BLOCK_ALLOCATION pfnAllocBlock,CLFS_BLOCK_DEALLOCATION pfnFreeBlock,PVOID pvBlockAllocContext,ULONG cbBlock,ULONG cMaxBlocks)WINBOOL WINAPI <clfsw32.h>
DumpTreeItemData(BSTR * bstrData)virtual HRESULT WINAPI <wia.h>
Duplicate(LPCWSTR pszwDuplicateName,INetConnection ** ppCon)virtual HRESULT WINAPI <netcon.h>
DuplicateBlob(HBLOB hSrcBlob,HBLOB * hBlobThatWillBeCreated) DWORD __cdecl <netmon.h>
DuplicateEncryptionInfoFile(LPCWSTR SrcFileName,LPCWSTR DstFileName,DWORD dwCreationDistribution,DWORD dwAttributes,CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINADVAPI DWORD WINAPI <winefs.h>
DuplicateHandle(HANDLE hSourceProcessHandle,HANDLE hSourceHandle,HANDLE hTargetProcessHandle,LPHANDLE lpTargetHandle,DWORD dwDesiredAccess,WINBOOL bInheritHandle,DWORD dwOptions) WINBASEAPI WINBOOL WINAPI <ntsecpkg.h>
DuplicateIcon(HINSTANCE hInst,HICON hIcon) SHSTDAPI_<shellapi.h>
DuplicatePenData(HPENDATA,UINT) HPENDATA WINAPI <penwin.h>
DuplicateToken(HANDLE ExistingTokenHandle,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,PHANDLE DuplicateTokenHandle) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
DuplicateTokenEx(HANDLE hExistingToken,DWORD dwDesiredAccess,LPSECURITY_ATTRIBUTES lpTokenAttributes,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,TOKEN_TYPE TokenType,PHANDLE phNewToken) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
DW3(x)<vdmdbg.h>
DW4(x)<vdmdbg.h>
dwData2(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR) typedef HDDEDATA CALLBACK FNCALLBACK<ddeml.h>
dwDiffAT(at1,at2)<penwin.h>
dwDurInterval(lpi)<penwin.h>
dwFourCC(FOURCC code)DWORD	<vmr9.h>
DWMAPI(type)<dwmapi.h>
DwmAttachMilContent(HWND hwnd) HRESULT WINAPI <dwmapi.h>
DwmDefWindowProc(HWND hWnd,UINT msg,WPARAM wParam,LPARAM lParam,LRESULT * plResult) WINBOOL WINAPI <dwmapi.h>
DwmDetachMilContent(HWND hwnd) HRESULT WINAPI <dwmapi.h>
DwmEnableBlurBehindWindow(HWND hWnd,const DWM_BLURBEHIND * pBlurBehind) HRESULT WINAPI <dwmapi.h>
DwmEnableComposition(UINT uCompositionAction) HRESULT WINAPI <dwmapi.h>
DwmEnableMMCSS(WINBOOL fEnableMMCSS) HRESULT WINAPI <dwmapi.h>
DwmExtendFrameIntoClientArea(HWND hWnd,const MARGINS * pMarInset) HRESULT WINAPI <dwmapi.h>
DwmFlush() HRESULT WINAPI <dwmapi.h>
DwmGetColorizationColor(DWORD * pcrColorization,WINBOOL * pfOpaqueBlend) HRESULT WINAPI <dwmapi.h>
DwmGetCompositionTimingInfo(HWND hwnd,DWM_TIMING_INFO * pTimingInfo) HRESULT WINAPI <dwmapi.h>
DwmGetGraphicsStreamClient(UINT uIndex,UUID * pClientUuid) HRESULT WINAPI <dwmapi.h>
DwmGetGraphicsStreamTransformHint(UINT uIndex,MilMatrix3x2D * pTransform) HRESULT WINAPI <dwmapi.h>
DwmGetTransportAttributes(WINBOOL * pfIsRemoting,WINBOOL * pfIsConnected,DWORD * pDwGeneration) HRESULT WINAPI <dwmapi.h>
DwmGetWindowAttribute(HWND hwnd,DWORD dwAttribute,PVOID pvAttribute,DWORD cbAttribute) HRESULT WINAPI <dwmapi.h>
DwmInvalidateIconicBitmaps(HWND hwnd) HRESULT WINAPI <dwmapi.h>
DwmIsCompositionEnabled(WINBOOL * pfEnabled) HRESULT WINAPI <dwmapi.h>
DwmModifyPreviousDxFrameDuration(HWND hwnd,INT cRefreshes,WINBOOL fRelative) HRESULT WINAPI <dwmapi.h>
DwmQueryThumbnailSourceSize(HTHUMBNAIL hThumbnail,PSIZE pSize) HRESULT WINAPI <dwmapi.h>
DwmRegisterThumbnail(HWND hwndDestination,HWND hwndSource,PHTHUMBNAIL phThumbnailId) HRESULT WINAPI <dwmapi.h>
DwmRenderGesture(enum GESTURE_TYPE gt,UINT cContacts,const DWORD * pdwPointerID,const POINT * pPoints) HRESULT WINAPI <dwmapi.h>
DwmSetDxFrameDuration(HWND hwnd,INT cRefreshes) HRESULT WINAPI <dwmapi.h>
DwmSetIconicLivePreviewBitmap(HWND hwnd,HBITMAP hbmp,POINT * pptClient,DWORD dwSITFlags) HRESULT WINAPI <dwmapi.h>
DwmSetIconicThumbnail(HWND hwnd,HBITMAP hbmp,DWORD dwSITFlags) HRESULT WINAPI <dwmapi.h>
DwmSetPresentParameters(HWND hwnd,DWM_PRESENT_PARAMETERS * pPresentParams) HRESULT WINAPI <dwmapi.h>
DwmSetWindowAttribute(HWND hwnd,DWORD dwAttribute,LPCVOID pvAttribute,DWORD cbAttribute) HRESULT WINAPI <dwmapi.h>
DwmShowContact(DWORD dwPointerID,enum DWM_SHOWCONTACT eShowContact) HRESULT WINAPI <dwmapi.h>
DwmTetherContact(DWORD dwPointerID,WINBOOL fEnable,POINT ptTether) HRESULT WINAPI <dwmapi.h>
DwmTransitionOwnedWindow(HWND hwnd,enum DWMTRANSITION_OWNEDWINDOW_TARGET target) HRESULT WINAPI <dwmapi.h>
DwmUnregisterThumbnail(HTHUMBNAIL hThumbnailId) HRESULT WINAPI <dwmapi.h>
DwmUpdateThumbnailProperties(HTHUMBNAIL hThumbnailId,const DWM_THUMBNAIL_PROPERTIES * ptnProperties) HRESULT WINAPI <dwmapi.h>
DWORD_ALIGN(type,field)<rtm.h>
DwordToBinary(LPSTR string,DWORD DwordValue) DWORD WINAPI <netmon.h>
DWRITE_MAKE_OPENTYPE_TAG(a,b,c,d)<dwrite.h>
DWriteCreateFactory(DWRITE_FACTORY_TYPE factoryType,REFIID iid,IUnknown ** factory)DWRITEAPI HRESULT WINAPI <dwrite.h>
DxApi(IN ULONG dwFunctionNum,IN PVOID lpvInBuffer,IN ULONG cbInBuffer,IN PVOID lpvOutBuffer,IN ULONG cbOutBuffer)<dxapi.h>
DxApiGetVersion(void)<dxapi.h>
DXASSERT_VALID(pObj)<dxtmpl.h>
DXCHG(x)<netmon.h>
DXCompareElements(const TYPE * pElement1,const ARG_TYPE * pElement2)WINBOOL <dxtmpl.h>
DXConstructElements(TYPE * pElements,int nCount)inline void <dxtmpl.h>
DXCopyElements(TYPE * pDest,const TYPE * pSrc,int nCount)inline void <dxtmpl.h>
DXDestructElements(m_pData,m_nSize)<dxtmpl.h>
DXDestructElements(TYPE * pElements,int nCount)inline void <dxtmpl.h>
DXGetErrorDescription8(HRESULT hr)const char<dxerr8.h>
DXGetErrorDescription8A(HRESULT hr)const char<dxerr8.h>
DXGetErrorDescription8W(HRESULT hr)const WCHAR<dxerr8.h>
DXGetErrorDescription9(HRESULT hr)const char<dxerr9.h>
DXGetErrorDescription9A(HRESULT hr)const char<dxerr9.h>
DXGetErrorDescription9W(HRESULT hr)const WCHAR<dxerr9.h>
DXGetErrorString8(HRESULT hr)const char<dxerr8.h>
DXGetErrorString8A(HRESULT hr)const char<dxerr8.h>
DXGetErrorString8W(HRESULT hr)const WCHAR<dxerr8.h>
DXGetErrorString9(HRESULT hr)const char<dxerr9.h>
DXGetErrorString9A(HRESULT hr)const char<dxerr9.h>
DXGetErrorString9W(HRESULT hr)const WCHAR<dxerr9.h>
DXHashKey(ARG_KEY key)inline UINT <dxtmpl.h>
DXIsValidAddress(const void * lp,UINT nBytes,WINBOOL bReadWrite)__CRT_INLINE WINBOOL <dxtmpl.h>
DXTrace(const char * strFile,DWORD dwLine,HRESULT hr,const char * strMsg,WINBOOL bPopMsgBox)HRESULT WINAPI <dxerr9.h>
DXTRACE_ERR(str,hr)<dxerr9.h>
DXTRACE_ERR_NOMSGBOX(str,hr)<dxerr9.h>
DXTRACE_MSG(str)<dxerr9.h>
DXTraceA(const char * strFile,DWORD dwLine,HRESULT hr,const char * strMsg,WINBOOL bPopMsgBox)HRESULT WINAPI <dxerr9.h>
DXTraceW(const char * strFile,DWORD dwLine,HRESULT hr,const WCHAR * strMsg,WINBOOL bPopMsgBox)HRESULT WINAPI <dxerr9.h>
DXVA2_Fixed32OpaqueAlpha(void)__forceinline const DXVA2_Fixed32 <dxva2api.h>
DXVA2_Fixed32TransparentAlpha(void)__forceinline const DXVA2_Fixed32 <dxva2api.h>
DXVA2CreateDirect3DDeviceManager9(UINT * pResetToken,IDirect3DDeviceManager9 ** ppDXVAManager)HRESULT WINAPI <dxva2api.h>
DXVA2CreateVideoService(IDirect3DDevice9 * pDD,REFIID riid,void ** ppService)HRESULT WINAPI <dxva2api.h>
DXVA2FixedToFloat(const DXVA2_Fixed32 f32)__forceinline float <dxva2api.h>
DXVA2FloatToFixed(const float f)__forceinline DXVA2_Fixed32 <dxva2api.h>
DXVAHD_CreateDevice(IDirect3DDevice9Ex * pD3DDevice,const DXVAHD_CONTENT_DESC * pContentDesc,DXVAHD_DEVICE_USAGE Usage,PDXVAHDSW_Plugin pPlugin,IDXVAHD_Device ** ppDevice)HRESULT <dxvahd.h>
DynamicDisconnect(void)virtual HRESULT WINAPI <strmif.h>
DynamicQueryAccept(const AM_MEDIA_TYPE * pmt)virtual HRESULT WINAPI <strmif.h>
EapHostPeerBeginSession(DWORD dwFlags,EAP_METHOD_TYPE eapType,const EapAttributes * pAttributeArray,HANDLE hTokenImpersonateUser,DWORD dwSizeOfConnectionData,const BYTE * pConnectionData,DWORD dwSizeOfUserData,const BYTE * pUserData,DWORD dwMaxSendPacketSize,const GUID * pConnectionId,NotificationHandler func,VOID * pContextData,EAP_SESSIONID * pSessionId,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerClearConnection(GUID * pConnectionId,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerConfigBlob2Xml(DWORD dwFlags,EAP_METHOD_TYPE eapMethodType,DWORD dwSizeOfConfigIn,BYTE * pConfigIn,IXMLDOMDocument2 ** ppConfigDoc,EAP_ERROR ** ppEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerConfigXml2Blob(DWORD dwFlags,IXMLDOMNode * pConfigDoc,DWORD * pdwSizeOfConfigOut,BYTE ** ppConfigOut,EAP_METHOD_TYPE * pEapMethodType,EAP_ERROR ** ppEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerCredentialsXml2Blob(DWORD dwFlags,IXMLDOMNode * pCredentialsDoc,DWORD dwSizeOfConfigIn,BYTE * pConfigIn,DWORD * pdwSizeofCredentialsOut,BYTE ** ppCredentialsOut,EAP_METHOD_TYPE * pEapMethodType,EAP_ERROR ** ppEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerEndSession(EAP_SESSIONID sessionHandle,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerFreeEapError(EAP_ERROR * ppEapError)VOID APIENTRY <eappapis.h>
EapHostPeerFreeErrorMemory(EAP_ERROR * pEapError)VOID WINAPI <eaphostpeerconfigapis.h>
EapHostPeerFreeMemory(BYTE * pData)VOID WINAPI <eaphostpeerconfigapis.h>
EapHostPeerFreeRuntimeMemory(BYTE * pData)VOID WINAPI  <eappapis.h>
EapHostPeerGetAuthStatus(EAP_SESSIONID sessionHandle,EapHostPeerAuthParams authParam,DWORD * pcbAuthData,BYTE ** ppAuthData,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerGetIdentity(DWORD dwVersion,DWORD dwFlags,EAP_METHOD_TYPE eapMethodType,DWORD dwSizeofConnectionData,const BYTE * pConnectionData,DWORD dwSizeofUserData,const BYTE * pUserData,HANDLE hTokenImpersonateUser,WINBOOL * pfInvokeUI,DWORD * pdwSizeofUserDataOut,BYTE ** ppUserDataOut,LPWSTR * ppwszIdentity,EAP_ERROR ** ppEapError,BYTE ** ppvReserved)DWORD WINAPI <eappapis.h>
EapHostPeerGetMethods(EAP_METHOD_INFO_ARRAY * pEapMethodInfoArray,EAP_ERROR ** ppEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerGetResponseAttributes(EAP_SESSIONID sessionHandle,EapAttributes * pAttribs,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerGetResult(EAP_SESSIONID sessionHandle,EapHostPeerMethodResultReason reason,EapHostPeerMethodResult * ppResult,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerGetSendPacket(EAP_SESSIONID sessionHandle,DWORD * pcbSendPacket,BYTE ** ppSendPacket,EAP_ERROR ** ppEapError)DWORD WINAPI <eappapis.h>
EapHostPeerGetUIContext(EAP_SESSIONID sessionHandle,DWORD * pdwSizeOfUIContextData,BYTE ** ppUIContextData,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerInitialize(void)DWORD WINAPI <eappapis.h>
EapHostPeerInvokeConfigUI(HWND hwndParent,DWORD dwFlags,EAP_METHOD_TYPE eapMethodType,DWORD dwSizeOfConfigIn,const BYTE * pConfigIn,DWORD * pdwSizeOfConfigOut,BYTE ** ppConfigOut,EAP_ERROR ** pEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerInvokeIdentityUI(DWORD dwVersion,EAP_METHOD_TYPE eapMethodType,DWORD dwFlags,HWND hwndParent,DWORD dwSizeofConnectionData,const BYTE * pConnectionData,DWORD dwSizeofUserData,const BYTE * pUserData,DWORD * pdwSizeofUserDataOut,BYTE ** ppUserDataOut,LPWSTR * ppwszIdentity,EAP_ERROR ** ppEapError,LPVOID * ppvReserved)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerInvokeInteractiveUI(HWND hwndParent,DWORD dwSizeofUIContextData,const BYTE * pUIContextData,DWORD * pdwSizeofDataFromInteractiveUI,BYTE ** ppDataFromInteractiveUI,EAP_ERROR ** ppEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerProcessReceivedPacket(EAP_SESSIONID sessionHandle,DWORD cbReceivePacket,const BYTE * pReceivePacket,EapHostPeerResponseAction * pEapOutput,EAP_ERROR ** ppEapError)DWORD WINAPI <eappapis.h>
EapHostPeerQueryCredentialInputFields(HANDLE hUserImpersonationToken,EAP_METHOD_TYPE eapMethodType,DWORD dwFlags,DWORD dwEapConnDataSize,const BYTE * pbEapConnData,EAP_CONFIG_INPUT_FIELD_ARRAY * pEapConfigInputFieldArray,EAP_ERROR ** pEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerQueryInteractiveUIInputFields(DWORD dwVersion,DWORD dwFlags,DWORD dwSizeofUIContextData,const BYTE * pUIContextData,EAP_INTERACTIVE_UI_DATA * pEapInteractiveUIData,EAP_ERROR ** ppEapError,LPVOID * ppvReserved)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerQueryUIBlobFromInteractiveUIInputFields(DWORD dwVersion,DWORD dwFlags,DWORD dwSizeofUIContextData,const BYTE * pUIContextData,const EAP_INTERACTIVE_UI_DATA * pEapInteractiveUIData,DWORD * pdwSizeOfDataFromInteractiveUI,BYTE ** ppDataFromInteractiveUI,EAP_ERROR ** ppEapError,LPVOID * ppvReserved)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerQueryUserBlobFromCredentialInputFields(HANDLE hUserImpersonationToken,EAP_METHOD_TYPE eapMethodType,DWORD dwFlags,DWORD dwEapConnDataSize,const BYTE * pbEapConnData,const EAP_CONFIG_INPUT_FIELD_ARRAY * pEapConfigInputFieldArray,DWORD * pdwUserBlobSize,BYTE ** ppbUserBlob,EAP_ERROR ** pEapError)DWORD WINAPI <eaphostpeerconfigapis.h>
EapHostPeerSetResponseAttributes(EAP_SESSIONID sessionHandle,const EapAttributes * pAttribs,EapHostPeerResponseAction * pEapOutput,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerSetUIContext(EAP_SESSIONID sessionHandle,DWORD dwSizeOfUIContextData,const BYTE * pUIContextData,EapHostPeerResponseAction * pEapOutput,EAP_ERROR ** ppEapError)DWORD APIENTRY <eappapis.h>
EapHostPeerUninitialize(void)void WINAPI <eappapis.h>
EapMethodAuthenticatorBeginSession(DWORD dwFlags,LPCWSTR pwszIdentity,const EapAttributes * pAttributeArray,DWORD dwSizeOfConnectionData,const BYTE * pConnectionData,DWORD dwMaxSendPacketSize,EAP_SESSION_HANDLE * pSessionHandle,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorEndSession(EAP_SESSION_HANDLE sessionHandle,EAP_ERROR ** ppEapError)DWORD <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorFreeErrorMemory(EAP_ERROR * ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorFreeMemory(void * pUIContextData)VOID WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorGetAttributes(EAP_SESSION_HANDLE sessionHandle,EapAttributes * pAttribs,EAP_ERROR ** ppEapError)DWORD <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorGetInfo(EAP_METHOD_TYPE * pEapType,EAP_AUTHENTICATOR_METHOD_ROUTINES * pEapInfo,EAP_ERROR ** ppEapError)DWORD <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorGetResult(EAP_SESSION_HANDLE sessionHandle,EAP_METHOD_AUTHENTICATOR_RESULT * pResult,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorInitialize(EAP_METHOD_TYPE * pEapType,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorInvokeConfigUI(EAP_METHOD_TYPE * pEapMethodType,HWND hwndParent,DWORD dwFlags,LPCWSTR pwszMachineName,DWORD dwSizeOfConfigIn,BYTE * pConfigIn,DWORD * pdwSizeOfConfigOut,BYTE ** ppConfigOut,EAP_ERROR ** pEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorReceivePacket(EAP_SESSION_HANDLE sessionHandle,DWORD cbReceivePacket,const EapPacket * pReceivePacket,EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION * pEapOutput,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorSendPacket(EAP_SESSION_HANDLE sessionHandle,BYTE bPacketId,DWORD * pcbSendPacket,EapPacket * pSendPacket,EAP_AUTHENTICATOR_SEND_TIMEOUT * pTimeout,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorSetAttributes(EAP_SESSION_HANDLE sessionHandle,const EapAttributes * pAttribs,EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION * pEapOutput,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorShutdown(EAP_METHOD_TYPE * peapType,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapMethodAuthenticatorUpdateInnerMethodParams(EAP_SESSION_HANDLE sessionHandle,DWORD dwFlags,const WCHAR * pwszIdentity,const EapAttributes * pAttributeArray,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodauthenticatorapis.h>
EapPeerBeginSession(DWORD dwFlags,const EapAttributes * pAttributeArray,HANDLE hTokenImpersonateUser,DWORD dwSizeofConnectionData,BYTE * pConnectionData,DWORD dwSizeofUserData,BYTE * pUserData,DWORD dwMaxSendPacketSize,EAP_SESSION_HANDLE * pSessionHandle,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerConfigBlob2Xml(DWORD dwFlags,EAP_METHOD_TYPE eapMethodType,const BYTE * pConfigIn,DWORD dwSizeOfConfigIn,IXMLDOMDocument2 ** ppConfigDoc,EAP_ERROR ** pEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerConfigXml2Blob(DWORD dwFlags,EAP_METHOD_TYPE eapMethodType,IXMLDOMDocument2 * pConfigDoc,BYTE ** ppConfigOut,DWORD * pdwSizeOfConfigOut,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerCredentialsXml2Blob(DWORD dwFlags,EAP_METHOD_TYPE eapMethodType,IXMLDOMDocument2 * pCredentialsDoc,const BYTE * pConfigIn,DWORD dwSizeOfConfigIn,BYTE ** ppCredentialsOut,DWORD * pdwSizeofCredentialsOut,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerEndSession(EAP_SESSION_HANDLE sessionHandle,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerFreeErrorMemory(EAP_ERROR * ppEapError)VOID WINAPI <eapmethodauthenticatorapis.h>
EapPeerFreeMemory(void * pUIContextData)VOID WINAPI <eapmethodpeerapis.h>
EapPeerGetIdentity(DWORD dwflags,DWORD dwSizeofConnectionData,const BYTE * pConnectionData,DWORD dwSizeOfUserData,const BYTE * pUserData,HANDLE hTokenImpersonateUser,WINBOOL * pfInvokeUI,DWORD * pdwSizeOfUserDataOut,BYTE ** ppUserDataOut,LPWSTR * ppwszIdentity,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerGetInfo(EAP_TYPE * pEapType,EAP_PEER_METHOD_ROUTINES * pEapInfo,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerGetResponseAttributes(EAP_SESSION_HANDLE sessionHandle,EapAttributes * pAttribs,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerGetResponsePacket(EAP_SESSION_HANDLE sessionHandle,DWORD * pcbSendPacket,EapPacket * pSendPacket,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerGetResult(EAP_SESSION_HANDLE sessionHandle,EapPeerMethodResultReason reason,EapPeerMethodResult * ppResult,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerGetUIContext(EAP_SESSION_HANDLE sessionHandle,DWORD * pdwSizeOfUIContextData,BYTE ** ppUIContextData,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerInitialize(EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerInvokeConfigUI(EAP_METHOD_TYPE * pEapType,HWND hwndParent,DWORD dwFlags,DWORD dwSizeOfConnectionDataIn,BYTE * pConnectionDataIn,DWORD * dwSizeOfConnectionDataOut,BYTE ** ppConnectionDataOut,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerInvokeIdentityUI(EAP_METHOD_TYPE * pEapType,DWORD dwflags,HWND hwndParent,DWORD dwSizeOfConnectionData,const BYTE * pConnectionData,DWORD dwSizeOfUserData,const BYTE * pUserData,DWORD * pdwSizeOfUserDataOut,BYTE ** ppUserDataOut,LPWSTR * ppwszIdentity,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerInvokeInteractiveUI(EAP_METHOD_TYPE * pEapType,HWND hwndParent,DWORD dwSizeofUIContextData,BYTE * pUIContextData,DWORD * pdwSizeOfDataFromInteractiveUI,BYTE ** ppDataFromInteractiveUI,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerProcessRequestPacket(EAP_SESSION_HANDLE sessionHandle,DWORD cbReceivedPacket,EapPacket * pReceivedPacket,EapPeerMethodOutput * pEapOutput,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerQueryCredentialInputFields(HANDLE hUserImpersonationToken,EAP_METHOD_TYPE eapMethodType,DWORD dwFlags,DWORD dwEapConnDataSize,BYTE * pbEapConnData,EAP_CONFIG_INPUT_FIELD_ARRAY * pEapConfigInputFieldsArray,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerQueryInteractiveUIInputFields(DWORD dwVersion,DWORD dwFlags,DWORD dwSizeofUIContextData,const BYTE * pUIContextData,EAP_INTERACTIVE_UI_DATA * pEapInteractiveUIData,EAP_ERROR ** ppEapError,LPVOID * pvReserved)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerQueryUIBlobFromInteractiveUIInputFields(DWORD dwVersion,DWORD dwFlags,DWORD dwSizeofUIContextData,const BYTE * pUIContextData,const EAP_INTERACTIVE_UI_DATA * pEapInteractiveUIData,DWORD * pdwSizeOfDataFromInteractiveUI,BYTE ** ppDataFromInteractiveUI,EAP_ERROR ** ppEapError,LPVOID * ppvReserved)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerQueryUserBlobFromCredentialInputFields(HANDLE hUserImpersonationToken,EAP_METHOD_TYPE eapMethodType,DWORD dwFlags,DWORD dwEapConnDataSize,BYTE * pbEapConnData,const EAP_CONFIG_INPUT_FIELD_ARRAY * pEapConfigInputFieldArray,DWORD * pdwUsersBlobSize,BYTE ** ppUserBlob,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerSetCredentials(EAP_SESSION_HANDLE sessionHandle,LPWSTR pwszIdentity,LPWSTR pwszPassword,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerSetResponseAttributes(EAP_SESSION_HANDLE sessionHandle,EapAttributes * pAttribs,EapPeerMethodOutput * pEapOutput,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerSetUIContext(EAP_SESSION_HANDLE sessionHandle,DWORD dwSizeOfUIContextData,const BYTE * pUIContextData,EapPeerMethodOutput * pEapOutput,EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EapPeerShutdown(EAP_ERROR ** ppEapError)DWORD WINAPI <eapmethodpeerapis.h>
EarlyStartDisplaySystem()STDAPI <mshtmhst.h>
EcClose(EC_HANDLE Object)WINBOOL WINAPI <evcoll.h>
EcDeleteSubscription(LPCWSTR SubscriptionName,DWORD Flags)WINBOOL WINAPI <evcoll.h>
EcEnumNextSubscription(EC_HANDLE SubscriptionEnum,DWORD SubscriptionNameBufferSize,LPWSTR SubscriptionNameBuffer,PDWORD SubscriptionNameBufferUsed)WINBOOL WINAPI <evcoll.h>
EcGetObjectArrayProperty(EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,EC_SUBSCRIPTION_PROPERTY_ID PropertyId,DWORD ArrayIndex,DWORD Flags,DWORD PropertyValueBufferSize,PEC_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <evcoll.h>
EcGetObjectArraySize(EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,PDWORD ObjectArraySize)WINBOOL WINAPI <evcoll.h>
EcGetSubscriptionProperty(EC_HANDLE Subscription,EC_SUBSCRIPTION_PROPERTY_ID PropertyId,DWORD Flags,DWORD PropertyValueBufferSize,PEC_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <evcoll.h>
EcGetSubscriptionRunTimeStatus(LPCWSTR SubscriptionName,EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID StatusInfoId,LPCWSTR EventSourceName,DWORD Flags,DWORD StatusValueBufferSize,PEC_VARIANT StatusValueBuffer,PDWORD StatusValueBufferUsed)WINBOOL WINAPI <evcoll.h>
EcInsertObjectArrayElement(EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,DWORD ArrayIndex)WINBOOL WINAPI <evcoll.h>
EcOpenSubscription(LPCWSTR SubscriptionName,DWORD AccessMask,DWORD Flags)EC_HANDLE WINAPI <evcoll.h>
EcOpenSubscriptionEnum(DWORD Flags)EC_HANDLE WINAPI <evcoll.h>
EcRemoveObjectArrayElement(EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,DWORD ArrayIndex)WINBOOL WINAPI <evcoll.h>
EcRetrySubscription(LPCWSTR SubscriptionName,LPCWSTR EventSourceName,DWORD Flags)WINBOOL WINAPI <evcoll.h>
EcSaveSubscription(EC_HANDLE Subscription,DWORD Flags)WINBOOL WINAPI <evcoll.h>
EcSetObjectArrayProperty(EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,EC_SUBSCRIPTION_PROPERTY_ID PropertyId,DWORD ArrayIndex,DWORD Flags,PEC_VARIANT PropertyValue)WINBOOL WINAPI <evcoll.h>
EcSetSubscriptionProperty(EC_HANDLE Subscription,EC_SUBSCRIPTION_PROPERTY_ID PropertyId,DWORD Flags,PEC_VARIANT PropertyValue)WINBOOL WINAPI <evcoll.h>
Edit_CanUndo(hwndCtl)<windowsx.h>
Edit_EmptyUndoBuffer(hwndCtl)<windowsx.h>
Edit_Enable(hwndCtl,fEnable)<windowsx.h>
Edit_FmtLines(hwndCtl,fAddEOL)<windowsx.h>
Edit_GetCueBannerText(hwnd,lpwText,cchText)<commctrl.h>
Edit_GetFirstVisibleLine(hwndCtl)<windowsx.h>
Edit_GetHandle(hwndCtl)<windowsx.h>
Edit_GetHilite(hwndCtl)<commctrl.h>
Edit_GetLine(hwndCtl,line,lpch,cchMax)<windowsx.h>
Edit_GetLineCount(hwndCtl)<windowsx.h>
Edit_GetModify(hwndCtl)<windowsx.h>
Edit_GetPasswordChar(hwndCtl)<windowsx.h>
Edit_GetRect(hwndCtl,lprc)<windowsx.h>
Edit_GetSel(hwndCtl)<windowsx.h>
Edit_GetText(hwndCtl,lpch,cchMax)<windowsx.h>
Edit_GetTextLength(hwndCtl)<windowsx.h>
Edit_GetWordBreakProc(hwndCtl)<windowsx.h>
Edit_HideBalloonTip(hwnd)<commctrl.h>
Edit_LimitText(hwndCtl,cchMax)<windowsx.h>
Edit_LineFromChar(hwndCtl,ich)<windowsx.h>
Edit_LineIndex(hwndCtl,line)<windowsx.h>
Edit_LineLength(hwndCtl,line)<windowsx.h>
Edit_NoSetFocus(hwndCtl)<commctrl.h>
Edit_ReplaceSel(hwndCtl,lpszReplace)<windowsx.h>
Edit_Scroll(hwndCtl,dv,dh)<windowsx.h>
Edit_ScrollCaret(hwndCtl)<windowsx.h>
Edit_SetCueBannerText(hwnd,lpcwText)<commctrl.h>
Edit_SetHandle(hwndCtl,h)<windowsx.h>
Edit_SetHilite(hwndCtl, ichStart, ichEnd)<commctrl.h>
Edit_SetModify(hwndCtl,fModified)<windowsx.h>
Edit_SetPasswordChar(hwndCtl,ch)<windowsx.h>
Edit_SetReadOnly(hwndCtl,fReadOnly)<windowsx.h>
Edit_SetRect(hwndCtl,lprc)<windowsx.h>
Edit_SetRectNoPaint(hwndCtl,lprc)<windowsx.h>
Edit_SetSel(hwndCtl,ichStart,ichEnd)<windowsx.h>
Edit_SetTabStops(hwndCtl,cTabs,lpTabs)<windowsx.h>
Edit_SetText(hwndCtl,lpsz)<windowsx.h>
Edit_SetWordBreakProc(hwndCtl,lpfnWordBreak)<windowsx.h>
Edit_ShowBalloonTip(hwnd,peditballoontip)<commctrl.h>
Edit_TakeFocus(hwndCtl)<commctrl.h>
Edit_Undo(hwndCtl)<windowsx.h>
EditSecurity(HWND hwndOwner,LPSECURITYINFO psi) WINBOOL ACLUIAPI <aclui.h>
EditSecurityAdvanced(HWND hwndOwner,LPSECURITYINFO psi,SI_PAGE_TYPE uSIPage) HRESULT ACLUIAPI <aclui.h>
EditStreamClone(PAVISTREAM pavi,PAVISTREAM * ppResult) STDAPI <vfw.h>
EditStreamCopy(PAVISTREAM pavi,LONG * plStart,LONG * plLength,PAVISTREAM * ppResult) STDAPI <vfw.h>
EditStreamCut(PAVISTREAM pavi,LONG * plStart,LONG * plLength,PAVISTREAM * ppResult) STDAPI <vfw.h>
EditStreamPaste(PAVISTREAM pavi,LONG * plPos,LONG * plLength,PAVISTREAM pstream,LONG lStart,LONG lEnd) STDAPI <vfw.h>
EditStreamSetInfo(PAVISTREAM pavi,LPAVISTREAMINFOA lpInfo,LONG cbInfo) STDAPI <vfw.h>
EditStreamSetInfoA(PAVISTREAM pavi,LPAVISTREAMINFOA lpInfo,LONG cbInfo) STDAPI <vfw.h>
EditStreamSetInfoW(PAVISTREAM pavi,LPAVISTREAMINFOW lpInfo,LONG cbInfo) STDAPI <vfw.h>
EditStreamSetName(PAVISTREAM pavi,LPCSTR lpszName) STDAPI <vfw.h>
EditStreamSetNameA(PAVISTREAM pavi,LPCSTR lpszName) STDAPI <vfw.h>
EditStreamSetNameW(PAVISTREAM pavi,LPCWSTR lpszName) STDAPI <vfw.h>
EditWorkItem(HWND hParent,DWORD dwReserved)virtual HRESULT WINAPI <mstask.h>
EIRESID(x)<shellapi.h>
EjectDiskFromSADrive(LPCSTR lpComputerName,LPCSTR lpAppName,LPCSTR lpDeviceName,HWND hWnd,LPCSTR lpTitle,LPCSTR lpMessage,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
EjectDiskFromSADriveA(LPCSTR lpComputerName,LPCSTR lpAppName,LPCSTR lpDeviceName,HWND hWnd,LPCSTR lpTitle,LPCSTR lpMessage,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
EjectDiskFromSADriveW(LPCWSTR lpComputerName,LPCWSTR lpAppName,LPCWSTR lpDeviceName,HWND hWnd,LPCWSTR lpTitle,LPCWSTR lpMessage,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
EjectNtmsCleaner(HANDLE hSession,LPNTMS_GUID lpLibrary,LPNTMS_GUID lpEjectOperation,DWORD dwAction) DWORD WINAPI <ntmsapi.h>
EjectNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId,LPNTMS_GUID lpEjectOperation,DWORD dwAction) DWORD WINAPI <ntmsapi.h>
ElementAt(int nIndex)inline TYPE<dxtmpl.h>
Ellipse(const D2D1_POINT_2F & center,FLOAT radiusX,FLOAT radiusY)D2D1FORCEINLINE D2D1_ELLIPSE <wingdi.h>
Ellipse(HDC hdc,int left,int top,int right,int bottom) WINGDIAPI WINBOOL WINAPI <wingdi.h>
EMail(__LONG32 lRow)virtual HRESULT WINAPI <msimcntl.h>
EMailSelected(void)virtual HRESULT WINAPI <msimcntl.h>
EMAKEHR(val)<corerror.h>
EmfToWmfBits(HENHMETAFILE hEmf,UINT cbData16,LPBYTE pData16,INT iMapMode=MM_ANISOTROPIC,EmfToWmfBitsFlags eFlags=EmfToWmfBitsFlagsDefault)	static UINT <gdiplusmetafile.h>
Empty()	BOOL <wmiutils.h>
Empty(void)virtual HRESULT WINAPI <wmiutils.h>
EmptyClipboard(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
EmptyMenuList(void)virtual HRESULT WINAPI <mmc.h>
EmptyWorkingSet(HANDLE hProcess) WINBOOL WINAPI <psapi.h>
Emulate_GetDiskFreeSpaceEx(LPCTSTR ptszRoot,PULARGE_INTEGER pliQuota,PULARGE_INTEGER pliTotal,PULARGE_INTEGER pliFree) static WINBOOL WINAPI <newapis.h>
Emulate_GetFileAttributesEx(LPCTSTR ptszFile,GET_FILEEX_INFO_LEVELS level,LPVOID pv) static WINBOOL WINAPI <newapis.h>
Emulate_GetLongPathName(LPCTSTR ptszShort,LPTSTR ptszLong,DWORD ctchBuf) static DWORD WINAPI <newapis.h>
Emulate_IsDebuggerPresent(VOID) static WINBOOL WINAPI <newapis.h>
EmulatePen(WINBOOL) VOID WINAPI <penwin.h>
Enable(IN PVOID BusContext,IN BOOLEAN) IN BOOLEAN <winnt.h>
Enable(LONG lIndex,DWORD dwFlags)virtual HRESULT WINAPI <winnt.h>
Enable(void)virtual HRESULT WINAPI <winnt.h>
Enable(WINBOOL Enable)virtual HRESULT WINAPI <winnt.h>
EnableAllExtensions(void)virtual HRESULT WINAPI <mmcobj.h>
EnableAllExtensions(WINBOOL Enable)virtual HRESULT WINAPI <mmcobj.h>
EnableApplication(BSTR bstrAppName)virtual HRESULT WINAPI <iiisext.h>
EnableAutoRefresh(VARIANT_BOOL fEnable)virtual HRESULT WINAPI <rend.h>
EnableBITSUploads(void)virtual HRESULT WINAPI <bitscfg.h>
EnableCommit(void)virtual HRESULT WINAPI <comsvcs.h>
EnableDefaultMappings(WINBOOL bEnable)virtual HRESULT WINAPI <ocmm.h>
EnableExtensionFile(BSTR bstrExtensionFile)virtual HRESULT WINAPI <iiisext.h>
EnableGestureSetHRC(HRC,SYV,WINBOOL) int WINAPI <penwin.h>
EnableIdleRoutine(FTG ftg,WINBOOL fEnable) STDAPI_<wabutil.h>
EnableInternetFirewall(void)virtual HRESULT WINAPI <netcon.h>
EnableMenuItem(HMENU hMenu,UINT uIDEnableItem,UINT uEnable) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnableModeless(WINBOOL fEnable)virtual HRESULT WINAPI <shobjidl.h>
EnableMouseInPointer(WINBOOL fEnable) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnableNext(LONG * hpage,WINBOOL bEnable)virtual HRESULT WINAPI <cluadmex.h>
EnableNotification(IMSMQEvent * Event,VARIANT * Cursor,VARIANT * ReceiveTimeout)virtual HRESULT WINAPI <mqoai.h>
EnableNotification(IMSMQEvent2 * Event,VARIANT * Cursor,VARIANT * ReceiveTimeout)virtual HRESULT WINAPI <mqoai.h>
EnableNotification(IMSMQEvent3 * Event,VARIANT * Cursor,VARIANT * ReceiveTimeout)virtual HRESULT WINAPI <mqoai.h>
EnableNtmsObject(HANDLE hSession,DWORD dwType,LPNTMS_GUID lpObjectId) DWORD WINAPI <ntmsapi.h>
EnableParserFilter(HFILTER hFilter,HPARSER hParser) DWORD WINAPI <netmon.h>
EnablePresence(VARIANT_BOOL fUseStorage,VARIANT varStorage)virtual HRESULT WINAPI <rtccore.h>
EnablePresenceEx(IRTCProfile * pProfile,VARIANT varStorage,__LONG32 lFlags)virtual HRESULT WINAPI <rtccore.h>
EnableProfile(IRTCProfile * pProfile,__LONG32 lRegisterFlags)virtual HRESULT WINAPI <rtccore.h>
EnableProfileEx(IRTCProfile * pProfile,__LONG32 lRegisterFlags,__LONG32 lRoamingFlags)virtual HRESULT WINAPI <rtccore.h>
EnableRouter(HANDLE * pHandle,OVERLAPPED * pOverlapped) DWORD WINAPI <iphlpapi.h>
EnableScrollBar(HWND hWnd,UINT wSBflags,UINT wArrows) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnableSharing(SHARINGCONNECTIONTYPE Type)virtual HRESULT WINAPI <netcon.h>
EnableSystemDictionaryHRC(HRC,WINBOOL) int WINAPI <penwin.h>
EnableThemeDialogTexture(HWND hwnd,DWORD dwFlags)THEMEAPI <uxtheme.h>
EnableTheming(WINBOOL fEnable)THEMEAPI <uxtheme.h>
EnableThreadProfiling(HANDLE ThreadHandle,DWORD Flags,DWORD64 HardwareCounters,HANDLE * PerformanceDataHandle) WINBASEAPI DWORD APIENTRY <winbase.h>
EnableTrace(ULONG Enable,ULONG EnableFlag,ULONG EnableLevel,LPCGUID ControlGuid,TRACEHANDLE TraceHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
EnableTraceEx(LPCGUID ProviderId,LPCGUID SourceId,TRACEHANDLE TraceHandle,ULONG IsEnabled,UCHAR Level,ULONGLONG MatchAnyKeyword,ULONGLONG MatchAllKeyword,ULONG EnableProperty,PEVENT_FILTER_DESCRIPTOR EnableFilterDesc) EXTERN_C ULONG WMIAPI <evntrace.h>
EnableTraceEx2(TRACEHANDLE TraceHandle,LPCGUID ProviderId,ULONG ControlCode,UCHAR Level,ULONGLONG MatchAnyKeyword,ULONGLONG MatchAllKeyword,ULONG Timeout,PENABLE_TRACE_PARAMETERS EnableParameters) EXTERN_C ULONG WMIAPI <evntrace.h>
EnableWebServiceExtension(BSTR bstrExtension)virtual HRESULT WINAPI <iiisext.h>
EnableWindow(HWND hWnd,WINBOOL bEnable) WINUSERAPI WINBOOL WINAPI <winuser.h>
Encapsulate(LPBYTEBUFFER pApdu,ISO_APDU_TYPE ApduType)virtual HRESULT WINAPI <scardssp.h>
Encode(BSTR * pstrBinary)virtual HRESULT WINAPI <certenc.h>
Encode(LONG BitCount,BSTR strBitString,BSTR * pstrBinary)virtual HRESULT WINAPI <certenc.h>
EncodePointer(PVOID Ptr) WINBASEAPI PVOID WINAPI <utilapiset.h>
EncodeSystemPointer(PVOID Ptr) WINBASEAPI PVOID WINAPI <utilapiset.h>
EncryptFile(LPCSTR lpFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
EncryptFileA(LPCSTR lpFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
EncryptFileW(LPCWSTR lpFileName) WINADVAPI WINBOOL WINAPI <winbase.h>
EncryptionDisable(LPCWSTR DirPath,WINBOOL Disable) WINADVAPI WINBOOL WINAPI <winefs.h>
EncryptMessage(PCtxtHandle phContext,unsigned __LONG32 fQOP,PSecBufferDesc pMessage,unsigned __LONG32 MessageSeqNo) SECURITY_STATUS WINAPI <sspi.h>
End() void <winioctl.h>
End(void)virtual HRESULT WINAPI <winioctl.h>
END_TM_SCHEMA(name)<schemadef.h>
EndAbort(void)virtual HRESULT WINAPI <comsvcs.h>
EndAbortVariants(void)virtual HRESULT WINAPI <comsvcs.h>
EndAltPhrase(void)virtual HRESULT WINAPI <indexsrv.h>
EndBufferedAnimation(HANIMATIONBUFFER hbpAnimation,WINBOOL fUpdateTarget)THEMEAPI <uxtheme.h>
EndBufferedPaint(HPAINTBUFFER hBufferedPaint,WINBOOL fUpdateTarget)THEMEAPI_<uxtheme.h>
EndCommit(void)virtual HRESULT WINAPI <comsvcs.h>
EndCommitVariants(void)virtual HRESULT WINAPI <comsvcs.h>
EndContainer(GraphicsContainer state)	Status <gdiplusgraphics.h>
EndDeferWindowPos(HDWP hWinPosInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
EndDialog(HWND hDlg,INT_PTR nResult) WINUSERAPI WINBOOL WINAPI <winuser.h>
EndDoc(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
EndDocPrinter(HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
EndEditCollection(void)virtual HRESULT WINAPI <tom.h>
EndEnumStrokes(HPENDATA) LPPENDATA WINAPI <penwin.h>
EndKey(__LONG32 Unit,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
EndMenu(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
EndNtmsDeviceChangeDetection(HANDLE hSession,HANDLE DetectHandle) DWORD WINAPI <ntmsapi.h>
EndOf(__LONG32 Unit,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
EndPage(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
EndPagePrinter(HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
EndPaint(HWND hWnd,CONST PAINTSTRUCT * lpPaint) WINUSERAPI WINBOOL WINAPI <winuser.h>
EndPanningFeedback(HWND hwnd,WINBOOL fAnimateBack)WINBOOL WINAPI <uxtheme.h>
EndPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
EndPenCollection(REC) WINBOOL WINAPI <penwin.h>
EndPenInputHRC(HRC) int WINAPI <penwin.h>
EndPrepare(WINBOOL * pfOkToPrepare)virtual HRESULT WINAPI <comsvcs.h>
EndPrepareVariants(VARIANT_BOOL * pbOkToPrepare)virtual HRESULT WINAPI <comsvcs.h>
EndSelectionUndo(void)virtual HRESULT WINAPI <mshtmlc.h>
EndSession(void)virtual HRESULT WINAPI <msimcntl.h>
EndTask(HWND hWnd,WINBOOL fShutDown,WINBOOL fForce) WINUSERAPI WINBOOL WINAPI <winuser.h>
EndUndoUnit(void)virtual HRESULT WINAPI <mshtmlc.h>
EndUpdateResource(HANDLE hUpdate,WINBOOL fDiscard) WINBASEAPI WINBOOL WINAPI <winbase.h>
EndUpdateResourceA(HANDLE hUpdate,WINBOOL fDiscard) WINBASEAPI WINBOOL WINAPI <winbase.h>
EndUpdateResourceW(HANDLE hUpdate,WINBOOL fDiscard) WINBASEAPI WINBOOL WINAPI <winbase.h>
EngAcquireSemaphore(HSEMAPHORE hsem)<winddi.h>
EngAllocMem(ULONG Flags,ULONG MemSize,ULONG Tag)<winddi.h>
EngAllocPrivateUserMem(PDD_SURFACE_LOCAL psl,SIZE_T cj,ULONG tag)<winddi.h>
EngAllocUserMem(SIZE_T cj,ULONG tag)<winddi.h>
EngAlphaBlend(SURFOBJ * psoDest,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDest,RECTL * prclSrc,BLENDOBJ * pBlendObj)<winddi.h>
EngAssociateSurface(HSURF hsurf,HDEV hdev,FLONG flHooks)<winddi.h>
EngBitBlt(SURFOBJ * psoTrg,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclTrg,POINTL * pptlSrc,POINTL * pptlMask,BRUSHOBJ * pbo,POINTL * pptlBrush,ROP4 rop4)<winddi.h>
EngCheckAbort(SURFOBJ * pso)<winddi.h>
EngClearEvent(PEVENT pEvent)<winddi.h>
EngComputeGlyphSet(INT nCodePage,INT nFirstChar,INT cChars)<winddi.h>
EngControlSprites(WNDOBJ * pwo,FLONG fl)<winddi.h>
EngCopyBits(SURFOBJ * psoDest,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDest,POINTL * pptlSrc)<winddi.h>
EngCreateBitmap(SIZEL sizl,LONG lWidth,ULONG iFormat,FLONG fl,PVOID pvBits)<winddi.h>
EngCreateClip(VOID)<winddi.h>
EngCreateDeviceBitmap(DHSURF dhsurf,SIZEL sizl,ULONG iFormatCompat)<winddi.h>
EngCreateDeviceSurface(DHSURF dhsurf,SIZEL sizl,ULONG iFormatCompat)<winddi.h>
EngCreateEvent(PEVENT * ppEvent)<winddi.h>
EngCreatePalette(ULONG iMode,ULONG cColors,ULONG * pulColors,FLONG flRed,FLONG flGreen,FLONG flBlue)<winddi.h>
EngCreatePath(VOID)<winddi.h>
EngCreateSemaphore(VOID)<winddi.h>
EngCreateWnd(SURFOBJ * pso,HWND hwnd,WNDOBJCHANGEPROC pfn,FLONG fl,int iPixelFormat)<winddi.h>
EngDebugBreak(VOID)<winddi.h>
EngDebugPrint(PCHAR StandardPrefix,PCHAR DebugMessage,va_list ap)<winddi.h>
EngDeleteClip(CLIPOBJ * pco)<winddi.h>
EngDeleteDriverObj(HDRVOBJ hdo,WINBOOL bCallBack,WINBOOL bLocked)<winddi.h>
EngDeleteEvent(PEVENT pEvent)<winddi.h>
EngDeleteFile(LPWSTR pwszFileName)<winddi.h>
EngDeletePalette(HPALETTE hpal)<winddi.h>
EngDeletePath(PATHOBJ * ppo)<winddi.h>
EngDeleteSafeSemaphore(ENGSAFESEMAPHORE * pssem)<winddi.h>
EngDeleteSemaphore(HSEMAPHORE hsem)<winddi.h>
EngDeleteSurface(HSURF hsurf)<winddi.h>
EngDeleteWnd(WNDOBJ * pwo)<winddi.h>
EngDeviceIoControl(HANDLE hDevice,DWORD dwIoControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned)<winddi.h>
EngDitherColor(HDEV hdev,ULONG iMode,ULONG rgb,ULONG * pul)<winddi.h>
EngEnumForms(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned)<winddi.h>
EngEraseSurface(SURFOBJ * pso,RECTL * prcl,ULONG iColor)<winddi.h>
EngFillPath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,MIX mix,FLONG flOptions)<winddi.h>
EngFindImageProcAddress(HANDLE hModule,LPSTR lpProcName)<winddi.h>
EngFindResource(HANDLE h,int iName,int iType,PULONG pulSize)<winddi.h>
EngFntCacheAlloc(ULONG FastCheckSum,ULONG ulSize)<winddi.h>
EngFntCacheFault(ULONG ulFastCheckSum,ULONG iFaultMode)<winddi.h>
EngFntCacheLookUp(ULONG FastCheckSum,ULONG * pulSize)<winddi.h>
EngFreeMem(PVOID Mem)<winddi.h>
EngFreeModule(HANDLE h)<winddi.h>
EngFreePrivateUserMem(PDD_SURFACE_LOCAL psl,PVOID pv)<winddi.h>
EngFreeUserMem(PVOID pv)<winddi.h>
EngGetCurrentCodePage(PUSHORT OemCodePage,PUSHORT AnsiCodePage)<winddi.h>
EngGetCurrentProcessId(VOID)<winddi.h>
EngGetCurrentThreadId(VOID)<winddi.h>
EngGetDriverName(HDEV hdev)<winddi.h>
EngGetFileChangeTime(HANDLE h,LARGE_INTEGER * pChangeTime)<winddi.h>
EngGetFilePath(* pDest)[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])[MAX_PATH+1])<winddi.h>
EngGetForm(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded)<winddi.h>
EngGetLastError(VOID)<winddi.h>
EngGetPrinter(HANDLE hPrinter,DWORD dwLevel,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded)<winddi.h>
EngGetPrinterData(HANDLE hPrinter,LPWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded)<winddi.h>
EngGetPrinterDataFileName(HDEV hdev)<winddi.h>
EngGetPrinterDriver(HANDLE hPrinter,LPWSTR pEnvironment,DWORD dwLevel,BYTE * lpbDrvInfo,DWORD cbBuf,DWORD * pcbNeeded)<winddi.h>
EngGetProcessHandle(VOID)<winddi.h>
EngGetType1FontList(HDEV hdev,TYPE1_FONT * pType1Buffer,ULONG cjType1Buffer,PULONG pulLocalFonts,PULONG pulRemoteFonts,LARGE_INTEGER * pLastModified)<winddi.h>
EngGradientFill(SURFOBJ * psoDest,CLIPOBJ * pco,XLATEOBJ * pxlo,TRIVERTEX * pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,RECTL * prclExtents,POINTL * pptlDitherOrg,ULONG ulMode)<winddi.h>
EngHangNotification(HDEV hDev,PVOID Reserved)<winddi.h>
EngineDefined(BSTR bstrPropName,VARIANT * varPropValue,BSTR bstrClsidEng)virtual HRESULT WINAPI <comsvcs.h>
EngInitializeSafeSemaphore(ENGSAFESEMAPHORE * pssem)<winddi.h>
EngIsSemaphoreOwned(HSEMAPHORE hsem)<winddi.h>
EngIsSemaphoreOwnedByCurrentThread(HSEMAPHORE hsem)<winddi.h>
EngLineTo(SURFOBJ * pso,CLIPOBJ * pco,BRUSHOBJ * pbo,LONG x1,LONG y1,LONG x2,LONG y2,RECTL * prclBounds,MIX mix)<winddi.h>
EngLoadImage(LPWSTR pwszDriver)<winddi.h>
EngLoadModule(LPWSTR pwsz)<winddi.h>
EngLoadModuleForWrite(LPWSTR pwsz,ULONG cjSizeOfModule)<winddi.h>
EngLockDirectDrawSurface(HANDLE hSurface)<winddi.h>
EngLockDriverObj(HDRVOBJ hdo)<winddi.h>
EngLockSurface(HSURF hsurf)<winddi.h>
EngLpkInstalled(VOID)<winddi.h>
EngMapEvent(HDEV hDev,HANDLE hUserObject,PVOID Reserved1,PVOID Reserved2,PVOID Reserved3)<winddi.h>
EngMapFile(LPWSTR pwsz,ULONG cjSize,ULONG_PTR * piFile)<winddi.h>
EngMapFontFile(ULONG_PTR iFile,PULONG * ppjBuf,ULONG * pcjBuf)<winddi.h>
EngMapFontFileFD(ULONG_PTR iFile,PULONG * ppjBuf,ULONG * pcjBuf)<winddi.h>
EngMapModule(HANDLE h,PULONG pSize)<winddi.h>
EngMarkBandingSurface(HSURF hsurf)<winddi.h>
EngModifySurface(HSURF hsurf,HDEV hdev,FLONG flHooks,FLONG flSurface,DHSURF dhsurf,VOID * pvScan0,LONG lDelta,VOID * pvReserved)<winddi.h>
EngMovePointer(SURFOBJ * pso,LONG x,LONG y,RECTL * prcl)<winddi.h>
EngMulDiv(int a,int b,int c)<winddi.h>
EngMultiByteToUnicodeN(LPWSTR UnicodeString,ULONG MaxBytesInUnicodeString,PULONG BytesInUnicodeString,PCHAR MultiByteString,ULONG BytesInMultiByteString)<winddi.h>
EngMultiByteToWideChar(UINT CodePage,LPWSTR WideCharString,INT BytesInWideCharString,LPSTR MultiByteString,INT BytesInMultiByteString)<winddi.h>
EngPaint(SURFOBJ * pso,CLIPOBJ * pco,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,MIX mix)<winddi.h>
EngPlgBlt(SURFOBJ * psoTrg,SURFOBJ * psoSrc,SURFOBJ * psoMsk,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlBrushOrg,POINTFIX * pptfx,RECTL * prcl,POINTL * pptl,ULONG iMode)<winddi.h>
EngProbeForRead(PVOID Address,ULONG Length,ULONG Alignment)<winddi.h>
EngProbeForReadAndWrite(PVOID Address,ULONG Length,ULONG Alignment)<winddi.h>
EngQueryDeviceAttribute(HDEV hdev,ENG_DEVICE_ATTRIBUTE devAttr,VOID * pvIn,ULONG ulInSize,VOID * pvOut,ULONG ulOutSize)<winddi.h>
EngQueryFileTimeStamp(LPWSTR pwsz)<winddi.h>
EngQueryLocalTime(PENG_TIME_FIELDS ptf)<winddi.h>
EngQueryPalette(HPALETTE hPal,ULONG * piMode,ULONG cColors,ULONG * pulColors)<winddi.h>
EngQueryPerformanceCounter(LONGLONG * pPerformanceCount)<winddi.h>
EngQueryPerformanceFrequency(LONGLONG * pFrequency)<winddi.h>
EngQuerySystemAttribute(ENG_SYSTEM_ATTRIBUTE CapNum,PDWORD pCapability)<winddi.h>
EngReadStateEvent(PEVENT pEvent)<winddi.h>
EngReleaseSemaphore(HSEMAPHORE hsem)<winddi.h>
EngRestoreFloatingPointState(VOID * pBuffer)<winddi.h>
EngSaveFloatingPointState(VOID * pBuffer,ULONG cjBufferSize)<winddi.h>
EngSecureMem(PVOID Address,ULONG Length)<winddi.h>
EngSetEvent(PEVENT pEvent)<winddi.h>
EngSetLastError(ULONG iError)<winddi.h>
EngSetPointerShape(SURFOBJ * pso,SURFOBJ * psoMask,SURFOBJ * psoColor,XLATEOBJ * pxlo,LONG xHot,LONG yHot,LONG x,LONG y,RECTL * prcl,FLONG fl)<winddi.h>
EngSetPointerTag(HDEV hdev,SURFOBJ * psoMask,SURFOBJ * psoColor,XLATEOBJ * pxlo,FLONG fl)<winddi.h>
EngSetPrinterData(HANDLE hPrinter,LPWSTR pType,DWORD dwType,LPBYTE lpbPrinterData,DWORD cjPrinterData)<winddi.h>
EngSort(PBYTE pjBuf,ULONG c,ULONG cjElem,SORTCOMP pfnComp)<winddi.h>
EngStretchBlt(SURFOBJ * psoDest,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlHTOrg,RECTL * prclDest,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode)<winddi.h>
EngStretchBltROP(SURFOBJ * psoDest,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlHTOrg,RECTL * prclDest,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode,BRUSHOBJ * pbo,DWORD rop4)<winddi.h>
EngStrokeAndFillPath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,XFORMOBJ * pxo,BRUSHOBJ * pboStroke,LINEATTRS * plineattrs,BRUSHOBJ * pboFill,POINTL * pptlBrushOrg,MIX mixFill,FLONG flOptions)<winddi.h>
EngStrokePath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,XFORMOBJ * pxo,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,LINEATTRS * plineattrs,MIX mix)<winddi.h>
EngTextOut(SURFOBJ * pso,STROBJ * pstro,FONTOBJ * pfo,CLIPOBJ * pco,RECTL * prclExtra,RECTL * prclOpaque,BRUSHOBJ * pboFore,BRUSHOBJ * pboOpaque,POINTL * pptlOrg,MIX mix)<winddi.h>
EngTransparentBlt(SURFOBJ * psoDst,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDst,RECTL * prclSrc,ULONG iTransColor,ULONG ulReserved)<winddi.h>
EngUnicodeToMultiByteN(PCHAR MultiByteString,ULONG MaxBytesInMultiByteString,PULONG BytesInMultiByteString,PWSTR UnicodeString,ULONG BytesInUnicodeString)<winddi.h>
EngUnloadImage(HANDLE hModule)<winddi.h>
EngUnlockDirectDrawSurface(PDD_SURFACE_LOCAL pSurface)<winddi.h>
EngUnlockDriverObj(HDRVOBJ hdo)<winddi.h>
EngUnlockSurface(SURFOBJ * pso)<winddi.h>
EngUnmapEvent(PEVENT pEvent)<winddi.h>
EngUnmapFile(ULONG_PTR iFile)<winddi.h>
EngUnmapFontFile(ULONG_PTR iFile)<winddi.h>
EngUnmapFontFileFD(ULONG_PTR iFile)<winddi.h>
EngUnsecureMem(HANDLE hSecure)<winddi.h>
EngWaitForSingleObject(PEVENT pEvent,PLARGE_INTEGER pTimeOut)<winddi.h>
EngWideCharToMultiByte(UINT CodePage,LPWSTR WideCharString,INT BytesInWideCharString,LPSTR MultiByteString,INT BytesInMultiByteString)<winddi.h>
EngWritePrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten)<winddi.h>
ENHANCED_KEYBOARD(Id)<ntddkbd.h>
Enlist(ITransaction * pTransaction,ITransactionResourceAsync * pRes,XACTUOW * pUOW,LONG * pisoLevel,ITransactionEnlistmentAsync ** ppEnlist)virtual HRESULT WINAPI <txdtc.h>
Enlist2(ITransaction * pTransaction,ITransactionResourceAsync * pResAsync,XACTUOW * pUOW,LONG * pisoLevel,XID * pXid,ITransactionEnlistmentAsync ** ppEnlist)virtual HRESULT WINAPI <txdtc.h>
EnlistCompleted(HRESULT status)virtual HRESULT WINAPI <txdtc.h>
EnlistResource(const RESID ResId,const TRANSID TransId)virtual HRESULT WINAPI <comsvcs.h>
EnlistResourceManager(DWORD dwRMCookie,DWORD * pdwITransaction)virtual HRESULT WINAPI <oletx2xa.h>
EnlistWithRM(DWORD dwRMCookie,ITransaction * i_pITransaction,ITransactionResourceAsync * i_pITransRes,ITransactionEnlistmentAsync ** o_ppITransEnslitment)virtual HRESULT WINAPI <oletx2xa.h>
Enter() void <stllock.h>
EnterCriticalPolicySection(WINBOOL bMachine) USERENVAPI HANDLE WINAPI <userenv.h>
EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection) WINBASEAPI VOID WINAPI <synchapi.h>
EnterSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier,DWORD dwFlags) WINBOOL WINAPI <synchapi.h>
Enum(IEnumSTATPROPSTG ** ppenum)virtual HRESULT WINAPI <wia.h>
Enum(IEnumWorkItems ** ppEnumWorkItems)virtual HRESULT WINAPI <wia.h>
EnumAlgs(LONG dwIndex,LONG algClass,LONG * pdwAlgID)virtual HRESULT WINAPI <xenroll.h>
EnumApps(GUID * pAppCategoryId,IEnumPublishedApps ** ppepa)virtual HRESULT WINAPI <shappmgr.h>
EnumAppsInPool(VARIANT * bstrBuffer)virtual HRESULT WINAPI <iiisext.h>
EnumAttributes(LPWSTR * ppszAttrNames,DWORD dwNumAttributes,PADS_ATTR_DEF * ppAttrDefinition,DWORD * pdwNumAttributes)virtual HRESULT WINAPI <sdoias.h>
EnumAttributes(VARIANT * Id,VARIANT * pValues)virtual HRESULT WINAPI <sdoias.h>
EnumAttributeValues(ATTRIBUTEID Id,VARIANT * pValueIds,VARIANT * pValuesDesc)virtual HRESULT WINAPI <sdoias.h>
EnumBackups(BSTR bstrLocation,LONG lIndex,VARIANT * pvVersion,VARIANT * pvLocations,VARIANT * pvDate)virtual HRESULT WINAPI <iiisext.h>
EnumBackups(LPWSTR pszMDBackupLocation,DWORD * pdwMDVersion,PFILETIME pftMDBackupTime,DWORD dwMDEnumIndex)virtual HRESULT WINAPI <iiisext.h>
EnumCacheFilter(IEnumFilters ** pEnum)virtual HRESULT WINAPI <strmif.h>
EnumCalendarInfo(CALINFO_ENUMPROCA lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCalendarInfoEx(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,LCID Locale,CALID Calendar,CALTYPE CalType) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,LCID Locale,CALID Calendar,CALTYPE CalType) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,LPCWSTR lpLocaleName,CALID Calendar,LPCWSTR lpReserved,CALTYPE CalType,LPARAM lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,LCID Locale,CALID Calendar,CALTYPE CalType) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumCertViewAttribute(LONG Flags,IEnumCERTVIEWATTRIBUTE ** ppenum)virtual HRESULT WINAPI <certview.h>
EnumCertViewColumn(IEnumCERTVIEWCOLUMN ** ppenum)virtual HRESULT WINAPI <certview.h>
EnumCertViewColumn(LONG fResultColumn,IEnumCERTVIEWCOLUMN ** ppenum)virtual HRESULT WINAPI <certview.h>
EnumCertViewExtension(LONG Flags,IEnumCERTVIEWEXTENSION ** ppenum)virtual HRESULT WINAPI <certview.h>
EnumChannels(DWORD dwEnumFlags,LPCWSTR pszURL,IEnumChannels ** pIEnumChannels)virtual HRESULT WINAPI <chanmgr.h>
EnumChildItems(IEnumWiaItem ** ppIEnumWiaItem)virtual HRESULT WINAPI <wia.h>
EnumChildWindows(HWND hWndParent,WNDENUMPROC lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumClasses(BSTR strSuperClassPath,VARIANT_BOOL bDeep,IDispatch * pCtx,ISWbemXMLDocumentSet ** ppXMLDocumentSet)virtual HRESULT WINAPI <xmltrnsf.h>
EnumClasses(LPWSTR * ppszClassNames,DWORD dwNumClasses,PADS_CLASS_DEF * ppClassDefinition,DWORD * pdwNumClasses)virtual HRESULT WINAPI <xmltrnsf.h>
EnumClassNames(BSTR strSuperClassPath,VARIANT_BOOL bDeep,IDispatch * pCtx,ISWbemXMLDocumentSet ** ppXMLDocumentSet)virtual HRESULT WINAPI <xmltrnsf.h>
EnumClipboardFormats(UINT format) WINUSERAPI UINT WINAPI <winuser.h>
EnumCodePages(DWORD grfFlags,IEnumCodePage ** ppEnumCodePage)virtual HRESULT WINAPI <mlang.h>
EnumCodePages(DWORD grfFlags,LANGID LangId,IEnumCodePage ** ppEnumCodePage)virtual HRESULT WINAPI <mlang.h>
EnumColorProfiles(PCSTR,PENUMTYPEA,PBYTE,PDWORD,PDWORD) WINBOOL WINAPI <icm.h>
EnumColorProfilesA(PCSTR,PENUMTYPEA,PBYTE,PDWORD,PDWORD) WINBOOL WINAPI <icm.h>
EnumColorProfilesW(PCWSTR,PENUMTYPEW,PBYTE,PDWORD,PDWORD) WINBOOL WINAPI <icm.h>
EnumConnections(NETCONMGR_ENUM_FLAGS Flags,IEnumNetConnection ** ppEnum)virtual HRESULT WINAPI <netcon.h>
EnumData(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,PMETADATA_RECORD pmdrMDData,DWORD dwMDEnumDataIndex,DWORD * pdwMDRequiredDataLen)virtual HRESULT WINAPI <iadmw.h>
EnumDateFormats(DATEFMT_ENUMPROCA lpDateFmtEnumProc,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDateFormatsEx(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,LPCWSTR lpLocaleName,DWORD dwFlags,LPARAM lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumDcomCLSIDs(CLSID * pclsidDcom,DWORD dwEnumIndex) virtual HRESULT WINAPI <iadmext.h>
EnumDependentServices(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumDependentServicesW(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumDesktops(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDesktopsA(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDesktopsW(HWINSTA hwinsta,DESKTOPENUMPROCW lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDeviceCapabilities(LONG lFlags,IEnumWIA_DEV_CAPS ** ppIEnumWIA_DEV_CAPS)virtual HRESULT WINAPI <wia.h>
EnumDeviceDrivers(LPVOID * lpImageBase,DWORD cb,LPDWORD lpcbNeeded) WINBOOL WINAPI <psapi.h>
EnumDeviceInfo(LONG lFlag,IEnumWIA_DEV_INFO ** ppIEnum)virtual HRESULT WINAPI <wia.h>
EnumDirTree(HANDLE hProcess,PSTR RootPath,PSTR InputPathName,PSTR OutputPathBuffer,PENUMDIRTREE_CALLBACK Callback,PVOID CallbackData) WINBOOL IMAGEAPI <psdk>
EnumDisplayDevices(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplayDevicesA(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplayDevicesW(LPCWSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEW lpDisplayDevice,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplayMonitors(HDC hdc,LPCRECT lprcClip,MONITORENUMPROC lpfnEnum,LPARAM dwData) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplaySettings(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplaySettingsEx(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplaySettingsExA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplaySettingsExW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDisplaySettingsW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumDynamicTimeZoneInformation(CONST DWORD dwIndex,PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation) WINBASEAPI DWORD WINAPI <timezoneapi.h>
EnumEnhMetaFile(HDC hdc,HENHMETAFILE hmf,ENHMFENUMPROC lpProc,LPVOID lpParam,CONST RECT * lpRect) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Enumerate(IEnumString ** ppEnum)virtual HRESULT WINAPI <mmc.h>
Enumerate(PointF * points,BYTE * types,INT count)	INT <mmc.h>
EnumerateACDGroups(IEnumACDGroup ** ppEnumACDGroup)virtual HRESULT WINAPI <tapi3cc.h>
EnumerateAddresses(IEnumAddress ** ppEnumAddress)virtual HRESULT WINAPI <tapi3if.h>
EnumerateAddresses(IEnumBstr ** ppEnumAddresses)virtual HRESULT WINAPI <tapi3if.h>
EnumerateAgentHandlers(IEnumAgentHandler ** ppEnumHandler)virtual HRESULT WINAPI <tapi3cc.h>
EnumerateAgentSessions(IEnumAgentSession ** ppEnumAgentSession)virtual HRESULT WINAPI <tapi3cc.h>
EnumerateApplicationsInPool(LPCWSTR szPool,BSTR * bstrBuffer)virtual HRESULT WINAPI <iwamreg.h>
EnumerateAttributes(BSTR * pstrAttributeName)virtual HRESULT WINAPI <certif.h>
EnumerateAttributesClose(void)virtual HRESULT WINAPI <certif.h>
EnumerateAttributesSetup(LONG Flags)virtual HRESULT WINAPI <certif.h>
EnumerateBuddies(IRTCEnumBuddies ** ppEnum)virtual HRESULT WINAPI <rtccore.h>
EnumerateCallHubs(IEnumCallHub ** ppEnumCallHub)virtual HRESULT WINAPI <tapi3if.h>
EnumerateCallingCards(IEnumCallingCard ** ppEnumCallingCard)virtual HRESULT WINAPI <tapi3if.h>
EnumerateCalls(IEnumCall ** ppCallEnum)virtual HRESULT WINAPI <tapi3if.h>
EnumerateCalls(IEnumCall ** ppEnumCall)virtual HRESULT WINAPI <tapi3if.h>
EnumerateCallTreatments(IEnumBstr ** ppEnumCallTreatment)virtual HRESULT WINAPI <tapi3if.h>
EnumerateCompletionMessages(IEnumBstr ** ppEnumCompletionMessage)virtual HRESULT WINAPI <tapi3if.h>
EnumerateDefaultDirectories(IEnumDirectory ** ppEnumDirectory)virtual HRESULT WINAPI <rend.h>
EnumerateDeviceClasses(IEnumBstr ** ppEnumDeviceClass)virtual HRESULT WINAPI <tapi3if.h>
EnumerateDialableAddrs(DWORD dwAddressType,IEnumDialableAddrs ** ppEnumDialableAddrs)virtual HRESULT WINAPI <rend.h>
EnumerateDirectoryObjects(DIRECTORY_OBJECT_TYPE DirectoryObjectType,BSTR pName,IEnumDirectoryObject ** ppEnumObject)virtual HRESULT WINAPI <rend.h>
EnumerateDynamicTerminalClasses(IEnumTerminalClass ** ppTerminalClassEnumerator)virtual HRESULT WINAPI <tapi3if.h>
EnumerateExtensions(BSTR * pstrExtensionName)virtual HRESULT WINAPI <certif.h>
EnumerateExtensionsClose(void)virtual HRESULT WINAPI <certif.h>
EnumerateExtensionsSetup(LONG Flags)virtual HRESULT WINAPI <certif.h>
EnumerateGroups(IRTCEnumGroups ** ppEnum)virtual HRESULT WINAPI <rtccore.h>
EnumerateLoadedModules(HANDLE hProcess,PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
EnumerateLoadedModules64(HANDLE hProcess,PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
EnumerateLoadedModulesEx(HANDLE hProcess,PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,PVOID UserContext)WINBOOL WINAPI <psdk>
EnumerateLoadedModulesExW(HANDLE hProcess,PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,PVOID UserContext)WINBOOL WINAPI <psdk>
EnumerateLoadedModulesW64(HANDLE hProcess,PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
EnumerateLocations(IEnumLocation ** ppEnumLocation)virtual HRESULT WINAPI <tapi3if.h>
EnumerateMetafile(const Metafile * metafile,const Point & destPoint,const Rect & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const Point & destPoint,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const Point * destPoints,INT count,const Rect & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const Point * destPoints,INT count,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const PointF & destPoint,const RectF & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const PointF & destPoint,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const PointF * destPoints,INT count,const RectF & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const PointF * destPoints,INT count,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const Rect & destRect,const Rect & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const Rect & destRect,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const RectF & destRect,const RectF & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafile(const Metafile * metafile,const RectF & destRect,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status <gdiplusgraphics.h>
EnumerateMetafileProc(EmfPlusRecordType,UINT,UINT,const BYTE *,VOID *)typedef BOOL CALLBACK<gdiplustypes.h>
EnumerateNtmsObject(HANDLE hSession,const LPNTMS_GUID lpContainerId,LPNTMS_GUID lpList,LPDWORD lpdwListSize,DWORD dwType,DWORD dwOptions) DWORD WINAPI <ntmsapi.h>
EnumerateParticipants(IEnumParticipant ** ppEnumParticipants)virtual HRESULT WINAPI <rtccore.h>
EnumerateParticipants(IRTCEnumParticipants ** ppEnum)virtual HRESULT WINAPI <rtccore.h>
EnumeratePathsInFile(LPCWSTR pszFileName,LPCWSTR pszKeyType,DWORD dwMDBufferSize,WCHAR * pszBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <iadmw.h>
EnumeratePhones(IEnumPhone ** ppEnumPhone)virtual HRESULT WINAPI <tapi3if.h>
EnumeratePluggableSuperclasses(IEnumPluggableSuperclassInfo ** ppSuperclassEnumerator)virtual HRESULT WINAPI <tapi3if.h>
EnumeratePluggableTerminalClasses(CLSID iidTerminalSuperclass,__LONG32 lMediaType,IEnumPluggableTerminalClassInfo ** ppClassEnumerator)virtual HRESULT WINAPI <tapi3if.h>
EnumeratePreferredAddresses(IEnumAddress ** ppEnumAddress)virtual HRESULT WINAPI <tapi3if.h>
EnumeratePreferredPhones(IEnumPhone ** ppEnumPhone)virtual HRESULT WINAPI <tapi3if.h>
EnumeratePresenceDevices(IRTCEnumPresenceDevices ** ppEnumDevices)virtual HRESULT WINAPI <rtccore.h>
EnumeratePrivateTAPIObjects(IEnumUnknown ** ppEnumUnknown)virtual HRESULT WINAPI <tapi3if.h>
EnumerateProfiles(IRTCEnumProfiles ** ppEnum)virtual HRESULT WINAPI <rtccore.h>
EnumerateQueues(IEnumQueue ** ppEnumQueue)virtual HRESULT WINAPI <tapi3cc.h>
EnumerateResults(IRTCEnumUserSearchResults ** ppEnum)virtual HRESULT WINAPI <rtccore.h>
EnumerateScopes(IEnumMcastScope ** ppEnumMcastScope)virtual HRESULT WINAPI <mdhcp.h>
EnumerateSecurityPackages(unsigned __LONG32 * pcPackages,PSecPkgInfoA * ppPackageInfo) SECURITY_STATUS WINAPI <sspi.h>
EnumerateSecurityPackagesA(unsigned __LONG32 * pcPackages,PSecPkgInfoA * ppPackageInfo) SECURITY_STATUS WINAPI <sspi.h>
EnumerateSecurityPackagesW(unsigned __LONG32 * pcPackages,PSecPkgInfoW * ppPackageInfo) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
EnumerateSelectedCalls(IEnumCall ** ppCallEnum)virtual HRESULT WINAPI <tapi3if.h>
EnumerateStaticTerminals(IEnumTerminal ** ppTerminalEnumerator)virtual HRESULT WINAPI <tapi3if.h>
EnumerateStreams(IEnumStream ** ppEnumStream)virtual HRESULT WINAPI <tapi3if.h>
EnumerateSubStreams(IEnumSubStream ** ppEnumSubStream)virtual HRESULT WINAPI <tapi3if.h>
EnumerateTerminalClasses(IEnumTerminalClass ** ppTerminals)virtual HRESULT WINAPI <termmgr.h>
EnumerateTerminals(IEnumTerminal ** ppEnumTerminal)virtual HRESULT WINAPI <tapi3if.h>
EnumerateTerminals(ITAddress * pAddress,IEnumTerminal ** ppEnumTerminal)virtual HRESULT WINAPI <tapi3if.h>
EnumerateTraceGuids(PTRACE_GUID_PROPERTIES * GuidPropertiesArray,ULONG PropertyArrayCount,PULONG GuidCount) EXTERN_C ULONG WMIAPI <evntrace.h>
EnumerateTraceGuidsEx(TRACE_QUERY_INFO_CLASS TraceQueryInfoClass,PVOID InBuffer,ULONG InBufferSize,PVOID OutBuffer,ULONG OutBufferSize,PULONG ReturnLength) EXTERN_C ULONG WMIAPI <evntrace.h>
EnumerateTrackTerminals(IEnumTerminal ** ppEnumTerminal)virtual HRESULT WINAPI <tapi3if.h>
EnumerateUsableAddresses(IEnumAddress ** ppEnumAddress)virtual HRESULT WINAPI <tapi3cc.h>
EnumerateVirtualDiskMetadata(HANDLE VirtualDiskHandle,PULONG NumberOfItems,GUID * Items)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
EnumerateWatchers(IRTCEnumWatchers ** ppEnum)virtual HRESULT WINAPI <rtccore.h>
EnumFiles(IEnumBackgroundCopyFiles ** pEnum)virtual HRESULT WINAPI <bits.h>
EnumFontFamilies(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumFontFamiliesA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumFontFamiliesEx(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags) WINGDIAPI int WINAPI <wingdi.h>
EnumFontFamiliesExA(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags) WINGDIAPI int WINAPI <wingdi.h>
EnumFontFamiliesExW(HDC hdc,LPLOGFONTW lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam,DWORD dwFlags) WINGDIAPI int WINAPI <wingdi.h>
EnumFontFamiliesW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumFonts(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumFontsA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumFontsW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumForms(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumFormsA(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumFormsW(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumGroups(DWORD dwFlags,IEnumBackgroundCopyGroups ** ppEnumGroups)virtual HRESULT WINAPI <qmgr.h>
EnumHistory(LPWSTR pszMDHistoryLocation,DWORD * pdwMDMajorVersion,DWORD * pdwMDMinorVersion,PFILETIME pftMDHistoryTime,DWORD dwMDEnumIndex)virtual HRESULT WINAPI <iadmw.h>
EnumICMProfiles(HDC hdc,ICMENUMPROCA lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumICMProfilesA(HDC hdc,ICMENUMPROCA lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumICMProfilesW(HDC hdc,ICMENUMPROCW lpProc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumInputContext(DWORD idThread,IEnumInputContext ** ppEnum)virtual HRESULT WINAPI <mshtmlc.h>
EnumInstanceNames(BSTR strClassPath,IDispatch * pCtx,ISWbemXMLDocumentSet ** ppXMLDocumentSet)virtual HRESULT WINAPI <xmltrnsf.h>
EnumInstances(BSTR strClassPath,VARIANT_BOOL bDeep,IDispatch * pCtx,ISWbemXMLDocumentSet ** ppXMLDocumentSet)virtual HRESULT WINAPI <xmltrnsf.h>
EnumItems(PST_KEY Key,const GUID * pItemType,const GUID * pItemSubtype,DWORD dwFlags,IEnumPStoreItems ** ppenum)virtual HRESULT WINAPI <pstore.h>
EnumJobs(DWORD dwFlags,IEnumBackgroundCopyJobs ** ppEnum)virtual HRESULT WINAPI <winspool.h>
EnumJobs(DWORD dwFlags,IEnumBackgroundCopyJobs1 ** ppEnumJobs)virtual HRESULT WINAPI <winspool.h>
EnumJobs(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumJobsA(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumJobsW(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumKeys(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,LPWSTR pszMDName,DWORD dwMDEnumObjectIndex)virtual HRESULT WINAPI <iadmw.h>
EnumLanguageGroupLocales(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,LGRPID LanguageGroup,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,LGRPID LanguageGroup,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,LGRPID LanguageGroup,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumMetaFile(HDC hdc,HMETAFILE hmf,MFENUMPROC lpProc,LPARAM lParam) WINGDIAPI WINBOOL WINAPI <wingdi.h>
EnumMonitors(LPSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumMonitorsA(LPSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumMonitorsW(LPWSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumNames(IEnumNames ** ppenum)virtual HRESULT WINAPI <comsvcs.h>
EnumNavigationStack(DWORD dwReserved,DWORD grfHLFNAMEF,IEnumHLITEM ** ppienumhlitem)virtual HRESULT WINAPI <hlink.h>
EnumObjects(HDC hdc,int nType,GOBJENUMPROC lpFunc,LPARAM lParam) WINGDIAPI int WINAPI <wingdi.h>
EnumPageFiles(PENUM_PAGE_FILE_CALLBACKA pCallBackRoutine,LPVOID pContext) WINBOOL WINAPI <psapi.h>
EnumPageFilesA(PENUM_PAGE_FILE_CALLBACKA pCallBackRoutine,LPVOID pContext) WINBOOL WINAPI <psapi.h>
EnumPageFilesW(PENUM_PAGE_FILE_CALLBACKW pCallBackRoutine,LPVOID pContext) WINBOOL WINAPI <psapi.h>
EnumPorts(LPSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPortsA(LPSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPortsW(LPWSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrinterData(HANDLE hPrinter,DWORD dwIndex,LPSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData) DWORD WINAPI <winspool.h>
EnumPrinterDataA(HANDLE hPrinter,DWORD dwIndex,LPSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData) DWORD WINAPI <winspool.h>
EnumPrinterDataEx(HANDLE hPrinter,LPCSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues) DWORD WINAPI <winspool.h>
EnumPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues) DWORD WINAPI <winspool.h>
EnumPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues) DWORD WINAPI <winspool.h>
EnumPrinterDataW(HANDLE hPrinter,DWORD dwIndex,LPWSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData) DWORD WINAPI <winspool.h>
EnumPrinterDrivers(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrinterDriversA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrinterDriversW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrinterKey(HANDLE hPrinter,LPCSTR pKeyName,LPSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey) DWORD WINAPI <winspool.h>
EnumPrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName,LPSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey) DWORD WINAPI <winspool.h>
EnumPrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName,LPWSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey) DWORD WINAPI <winspool.h>
EnumPrintersW(DWORD Flags,LPWSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrintProcessorDatatypes(LPSTR pName,LPSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrintProcessorDatatypesA(LPSTR pName,LPSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrintProcessorDatatypesW(LPWSTR pName,LPWSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrintProcessors(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrintProcessorsA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumPrintProcessorsW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned) WINBOOL WINAPI <winspool.h>
EnumProcesses(DWORD * lpidProcess,DWORD cb,DWORD * cbNeeded) WINBOOL WINAPI <psapi.h>
EnumProcessModules(HANDLE hProcess,HMODULE * lphModule,DWORD cb,LPDWORD lpcbNeeded) WINBOOL WINAPI <psapi.h>
EnumProcessModulesEx(HANDLE hProcess,HMODULE * lphModule,DWORD cb,LPDWORD lpcbNeeded,DWORD dwFilterFlag)WINBOOL WINAPI <psapi.h>
EnumProperties(IEnumItemProperties ** ppEnumItemProperties)virtual HRESULT WINAPI <subsmgr.h>
EnumPropInfo(ULONG iEntry,const WCHAR ** pwcsName,DBID ** ppPropId,DBTYPE * pPropType,unsigned int * puiWidth)virtual HRESULT WINAPI <indexsrv.h>
EnumProps(HWND hWnd,PROPENUMPROCA lpEnumFunc) WINUSERAPI int WINAPI <winuser.h>
EnumPropsA(HWND hWnd,PROPENUMPROCA lpEnumFunc) WINUSERAPI int WINAPI <winuser.h>
EnumPropsEx(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam) WINUSERAPI int WINAPI <winuser.h>
EnumPropsExA(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam) WINUSERAPI int WINAPI <winuser.h>
EnumPropsExW(HWND hWnd,PROPENUMPROCEXW lpEnumFunc,LPARAM lParam) WINUSERAPI int WINAPI <winuser.h>
EnumPropsW(HWND hWnd,PROPENUMPROCW lpEnumFunc) WINUSERAPI int WINAPI <winuser.h>
EnumProtocols(LPINT lpiProtocols,LPVOID lpProtocolBuffer,LPDWORD lpdwBufferLength) INT WINAPI <nspapi.h>
EnumProtocolsA(LPINT lpiProtocols,LPVOID lpProtocolBuffer,LPDWORD lpdwBufferLength) INT WINAPI <nspapi.h>
EnumProtocolsW(LPINT lpiProtocols,LPVOID lpProtocolBuffer,LPDWORD lpdwBufferLength) INT WINAPI <nspapi.h>
EnumPwrSchemes(PWRSCHEMESENUMPROC,LPARAM) BOOLEAN WINAPI <powrprof.h>
EnumRegisterEventInfo(LONG lFlags,const GUID * pEventGUID,IEnumWIA_DEV_CAPS ** ppIEnum)virtual HRESULT WINAPI <wia.h>
EnumRegisterWordA(HKL hKL,LPSTR szReading,DWORD dwStyle,LPSTR szRegister,LPVOID pData,IEnumRegisterWordA ** pEnum)virtual HRESULT WINAPI <mshtmlc.h>
EnumRegisterWordW(HKL hKL,LPWSTR szReading,DWORD dwStyle,LPWSTR szRegister,LPVOID pData,IEnumRegisterWordW ** pEnum)virtual HRESULT WINAPI <mshtmlc.h>
EnumResourceLanguages(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceLanguagesA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceLanguagesEx(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL APIENTRY <libloaderapi.h>
EnumResourceLanguagesExA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL APIENTRY <libloaderapi.h>
EnumResourceLanguagesExW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,ENUMRESLANGPROCW lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL APIENTRY <libloaderapi.h>
EnumResourceLanguagesW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,ENUMRESLANGPROCW lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceNames(HMODULE hModule,LPCSTR lpType,ENUMRESNAMEPROCA lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceNamesA(HMODULE hModule,LPCSTR lpType,ENUMRESNAMEPROCA lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceNamesEx(HMODULE hModule,LPCSTR lpType,ENUMRESNAMEPROCA lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
EnumResourceNamesExA(HMODULE hModule,LPCSTR lpType,ENUMRESNAMEPROCA lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
EnumResourceNamesExW(HMODULE hModule,LPCWSTR lpType,ENUMRESNAMEPROCW lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
EnumResourceNamesW(HMODULE hModule,LPCWSTR lpType,ENUMRESNAMEPROCW lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceTypes(HMODULE hModule,ENUMRESTYPEPROCA lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceTypesA(HMODULE hModule,ENUMRESTYPEPROCA lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumResourceTypesEx(HMODULE hModule,ENUMRESTYPEPROCA lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
EnumResourceTypesExA(HMODULE hModule,ENUMRESTYPEPROCA lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
EnumResourceTypesExW(HMODULE hModule,ENUMRESTYPEPROCW lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
EnumResourceTypesW(HMODULE hModule,ENUMRESTYPEPROCW lpEnumFunc,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winbase.h>
EnumRfc1766(IEnumRfc1766 ** ppEnumRfc1766)virtual HRESULT WINAPI <mlang.h>
EnumRfc1766(LANGID LangId,IEnumRfc1766 ** ppEnumRfc1766)virtual HRESULT WINAPI <mlang.h>
EnumScripts(DWORD dwFlags,LANGID LangId,IEnumScript ** ppEnumScript)virtual HRESULT WINAPI <mlang.h>
EnumServicesStatus(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumServicesStatusA(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumServicesStatusEx(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumServicesStatusW(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle) WINADVAPI WINBOOL WINAPI <winsvc.h>
EnumStreamIdMap(IEnumStreamIdMap ** ppIEnumStreamIdMap)virtual HRESULT WINAPI <strmif.h>
EnumSubscriptions(DWORD dwFlags,IEnumSubscription ** ppEnumSubscriptions)virtual HRESULT WINAPI <subsmgr.h>
EnumSubtypes(PST_KEY Key,const GUID * pType,DWORD dwFlags,IEnumPStoreTypes ** ppenum)virtual HRESULT WINAPI <pstore.h>
EnumSymbols(LPSYG,UINT,ENUMPROC,LPVOID) UINT WINAPI <penwin.h>
EnumSyncMgrItems(ISyncMgrEnumItems ** ppSyncMgrEnumItems)virtual HRESULT WINAPI <mobsync.h>
EnumSystemCodePages(CODEPAGE_ENUMPROCA lpCodePageEnumProc,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature,PVOID pFirmwareTableEnumBuffer,DWORD BufferSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
EnumSystemGeoID(GEOCLASS GeoClass,GEOID ParentGeoId,GEO_ENUMPROC lpGeoEnumProc) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLanguageGroups(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLocales(LOCALE_ENUMPROCA lpLocaleEnumProc,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLocalesEx(LOCALE_ENUMPROCEX lpLocaleEnumProcEx,DWORD dwFlags,LPARAM lParam,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumTasks(IDataObject * pdo,LPOLESTR szTaskGroup,IEnumTASK ** ppEnumTASK)virtual HRESULT WINAPI <mmc.h>
EnumTaskWindows(hTask,lpfn,lParam)<winuser.h>
EnumThreadWindows(DWORD dwThreadId,WNDENUMPROC lpfn,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumTimeFormats(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,LPCWSTR lpLocaleName,DWORD dwFlags,LPARAM lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumTraceGuid(LONG * plCntGuids,BSTR * pbstrGuidList)virtual HRESULT WINAPI <comsvcs.h>
EnumTypes(PST_KEY Key,DWORD dwFlags,IEnumPStoreTypes ** ppenum)virtual HRESULT WINAPI <pstore.h>
EnumUILanguages(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,DWORD dwFlags,LONG_PTR lParam) WINBASEAPI WINBOOL WINAPI <winnls.h>
EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumWindowStations(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
EodGetReceiveInfo(VARIANT * pvCollection)virtual HRESULT WINAPI <mqoai.h>
EodGetSendInfo(IMSMQCollection ** ppCollection)virtual HRESULT WINAPI <mqoai.h>
EodResend(void)virtual HRESULT WINAPI <mqoai.h>
EqualDomainSid(PSID pSid1,PSID pSid2,WINBOOL * pfEqual) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
EqualPrefixSid(PSID pSid1,PSID pSid2) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
EqualRect(CONST RECT * lprc1,CONST RECT * lprc2) WINUSERAPI WINBOOL WINAPI <winuser.h>
EqualRgn(HRGN hrgn1,HRGN hrgn2) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Equals(const Matrix * matrix)	BOOL <gdiplustypes.h>
Equals(const Point & point)	BOOL <gdiplustypes.h>
Equals(const PointF & point)	BOOL <gdiplustypes.h>
Equals(const Rect & rect)	BOOL <gdiplustypes.h>
Equals(const RectF & rect)	BOOL <gdiplustypes.h>
Equals(const Region * region,const Graphics * graphics)__inline__ BOOL Region::<gdiplustypes.h>
Equals(const Size & size)	BOOL <gdiplustypes.h>
Equals(const SizeF & size)	BOOL <gdiplustypes.h>
EqualSid(PSID pSid1,PSID pSid2) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
equiv_operator() int <sql_1.h>
EraseBinary(BYTE byP1,BYTE byP2,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
EraseTape(HANDLE hDevice,DWORD dwEraseType,WINBOOL bImmediate) WINBASEAPI DWORD WINAPI <winbase.h>
Error_Usage(x)<lpmapi.h>
ErrorCode(void)virtual HRESULT WINAPI <gpmgmt.h>
ErrorInfo()inline I<comdef.h>
ErrorMessage()inline const TCHAR<comdef.h>
Escape(DWORD dwEscapeCode,BYTE * lpInData,DWORD cbInDataSize,BYTE * pOutData,DWORD dwOutDataSize,DWORD * pdwActualDataSize)virtual HRESULT WINAPI <wingdi.h>
Escape(HDC hdc,int iEscape,int cjIn,LPCSTR pvIn,LPVOID pvOut) WINGDIAPI int WINAPI <wingdi.h>
Escape(HKL hKL,HIMC hIMC,UINT uEscape,LPVOID pData,LRESULT * plResult)virtual HRESULT WINAPI <wingdi.h>
EscapeA(HKL hKL,HIMC hIMC,UINT uEscape,LPVOID pData,LRESULT * plResult)virtual HRESULT WINAPI <mshtmlc.h>
EscapeCommFunction(HANDLE hFile,DWORD dwFunc) WINBASEAPI WINBOOL WINAPI <winbase.h>
EscapeW(HKL hKL,HIMC hIMC,UINT uEscape,LPVOID pData,LRESULT * plResult)virtual HRESULT WINAPI <mshtmlc.h>
EstablishConnection(LPCWSTR lpwszConnection,DWORD dwReserved)virtual HRESULT WINAPI <mobsync.h>
ETH_COMPARE_NETWORK_ADDRESSES(_A, _B, _Result)<xfilter.h>
ETH_COMPARE_NETWORK_ADDRESSES_EQ(_A,_B, _Result)<xfilter.h>
ETH_COPY_NETWORK_ADDRESS(_D, _S)<xfilter.h>
ETH_IS_BROADCAST(Address)<xfilter.h>
ETH_IS_MULTICAST(Address)<xfilter.h>
EtwActivityIdControl(IN ULONG ControlCode,IN OUT LPGUID ActivityId)<wdm.h>
EtwEventEnabled(IN REGHANDLE RegHandle,IN PCEVENT_DESCRIPTOR EventDescriptor)<wdm.h>
EtwProviderEnabled(IN REGHANDLE RegHandle,IN UCHAR Level,IN ULONGLONG Keyword)<wdm.h>
EtwRegister(IN LPCGUID ProviderId,IN PETWENABLECALLBACK EnableCallback OPTIONAL,IN PVOID CallbackContext OPTIONAL,OUT PREGHANDLE RegHandle)<wdm.h>
EtwUnregister(IN REGHANDLE RegHandle)<wdm.h>
EtwWrite(IN REGHANDLE RegHandle,IN PCEVENT_DESCRIPTOR EventDescriptor,IN LPCGUID ActivityId OPTIONAL,IN ULONG UserDataCount,IN PEVENT_DATA_DESCRIPTOR UserData OPTIONAL)<wdm.h>
EtwWriteEx(IN REGHANDLE RegHandle,IN PCEVENT_DESCRIPTOR EventDescriptor,IN ULONG64 Filter,IN ULONG Flags,IN LPCGUID ActivityId OPTIONAL,IN LPCGUID RelatedActivityId OPTIONAL,IN ULONG UserDataCount,IN PEVENT_DATA_DESCRIPTOR UserData OPTIONAL)<wdm.h>
EtwWriteString(IN REGHANDLE RegHandle,IN UCHAR Level,IN ULONGLONG Keyword,IN LPCGUID ActivityId OPTIONAL,IN PCWSTR String)<wdm.h>
EtwWriteTransfer(IN REGHANDLE RegHandle,IN PCEVENT_DESCRIPTOR EventDescriptor,IN LPCGUID ActivityId OPTIONAL,IN LPCGUID RelatedActivityId OPTIONAL,IN ULONG UserDataCount,IN PEVENT_DATA_DESCRIPTOR UserData OPTIONAL)<wdm.h>
EvaluateProximityToPolygon(UINT32 numVertices,const POINT * controlPolygon,const TOUCH_HIT_TESTING_INPUT * pHitTestingInput,TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval) WINUSERAPI WINBOOL WINAPI <winuser.h>
EvaluateProximityToRect(const RECT * controlBoundingBox,const TOUCH_HIT_TESTING_INPUT * pHitTestingInput,TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval) WINUSERAPI WINBOOL WINAPI <winuser.h>
EvaluateSessionDescription(BSTR bstrContentType,BSTR bstrSessionDescription,VARIANT_BOOL * pfApplicationSession)virtual HRESULT WINAPI <rtccore.h>
Event(RTC_EVENT RTCEvent,IDispatch * pEvent)virtual HRESULT WINAPI <winsock2.h>
Event(struct _RPC_ASYNC_STATE * pAsync,void * Context,RPC_ASYNC_EVENT) typedef void RPC_ENTRY RPCNOTIFICATION_ROUTINE<winsock2.h>
Event(TAPI_EVENT TapiEvent,IDispatch * pEvent)virtual HRESULT WINAPI <winsock2.h>
EventAccessControl(LPGUID Guid,ULONG Operation,PSID Sid,ULONG Rights,BOOLEAN AllowOrDeny) ULONG EVNTAPI <evntcons.h>
EventAccessQuery(LPGUID Guid,PSECURITY_DESCRIPTOR Buffer,PULONG BufferSize) ULONG EVNTAPI <evntcons.h>
EventAccessRemove(LPGUID Guid) ULONG EVNTAPI <evntcons.h>
EventActivityIdControl(ULONG ControlCode,LPGUID ActivityId) ULONG EVNTAPI <evntprov.h>
EventDataDescCreate(PEVENT_DATA_DESCRIPTOR evp,const VOID * d,ULONG sz) FORCEINLINE VOID <evntprov.h>
EventDescCreate(PEVENT_DESCRIPTOR ev,USHORT Id,UCHAR ver,UCHAR ch,UCHAR lvl,USHORT t,UCHAR opc,ULONGLONG keyw) FORCEINLINE VOID <evntprov.h>
EventDescGetChannel(PCEVENT_DESCRIPTOR ev) FORCEINLINE UCHAR <evntprov.h>
EventDescGetId(PCEVENT_DESCRIPTOR ev) FORCEINLINE USHORT <evntprov.h>
EventDescGetKeyword(PCEVENT_DESCRIPTOR ev) FORCEINLINE ULONGLONG <evntprov.h>
EventDescGetLevel(PCEVENT_DESCRIPTOR ev) FORCEINLINE UCHAR <evntprov.h>
EventDescGetOpcode(PCEVENT_DESCRIPTOR ev) FORCEINLINE UCHAR <evntprov.h>
EventDescGetTask(PCEVENT_DESCRIPTOR ev) FORCEINLINE USHORT <evntprov.h>
EventDescGetVersion(PCEVENT_DESCRIPTOR ev) FORCEINLINE UCHAR <evntprov.h>
EventDescOrKeyword(PEVENT_DESCRIPTOR ev,ULONGLONG keyw) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetChannel(PEVENT_DESCRIPTOR ev,UCHAR ch) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetId(PEVENT_DESCRIPTOR ev,USHORT Id) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetKeyword(PEVENT_DESCRIPTOR ev,ULONGLONG keyw) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetLevel(PEVENT_DESCRIPTOR ev,UCHAR lvl) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetOpcode(PEVENT_DESCRIPTOR ev,UCHAR opc) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetTask(PEVENT_DESCRIPTOR ev,USHORT t) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescSetVersion(PEVENT_DESCRIPTOR ev,UCHAR ver) FORCEINLINE PEVENT_DESCRIPTOR <evntprov.h>
EventDescZero(PEVENT_DESCRIPTOR ev) FORCEINLINE VOID <evntprov.h>
EventEnabled(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor) BOOLEAN EVNTAPI <evntprov.h>
EventHandler(void *) typedef int<tdi.h>
EventProviderEnabled(REGHANDLE RegHandle,UCHAR Level,ULONGLONG Keyword) BOOLEAN EVNTAPI <evntprov.h>
EventRefFromWpLp(wp,lp)<penwin.h>
EventRegister(LPCGUID ProviderId,PENABLECALLBACK EnableCallback,PVOID CallbackContext,PREGHANDLE RegHandle) ULONG EVNTAPI <evntprov.h>
EventSetInformation(REGHANDLE RegHandle,EVENT_INFO_CLASS InformationClass,PVOID EventInformation,ULONG InformationLength) ULONG EVNTAPI <evntprov.h>
EventUnregister(REGHANDLE RegHandle) ULONG EVNTAPI <evntprov.h>
EventWrite(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor,ULONG UserDataCount,PEVENT_DATA_DESCRIPTOR UserData) ULONG EVNTAPI <evntprov.h>
EventWriteEx(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor,ULONG64 Filter,ULONG Flags,LPCGUID ActivityId,LPCGUID RelatedActivityId,ULONG UserDataCount,PEVENT_DATA_DESCRIPTOR UserData) ULONG EVNTAPI <evntprov.h>
EventWriteString(REGHANDLE RegHandle,UCHAR Level,ULONGLONG Keyword,PCWSTR String) ULONG EVNTAPI <evntprov.h>
EventWriteTransfer(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor,LPCGUID ActivityId,LPCGUID RelatedActivityId,ULONG UserDataCount,PEVENT_DATA_DESCRIPTOR UserData) ULONG EVNTAPI <evntprov.h>
Evict(IUnknown * punkServicesIn)virtual HRESULT WINAPI <msclus.h>
Evict(void)virtual HRESULT WINAPI <msclus.h>
EvictClusterNode(HNODE hNode) DWORD WINAPI <clusapi.h>
EvictClusterNodeEx(HNODE hNode,DWORD dwTimeOut,HRESULT * phrCleanupStatus) DWORD WINAPI <clusapi.h>
EvictNotify(LPCWSTR pcszNodeNameIn)virtual HRESULT WINAPI <cluscfgserver.h>
EvtArchiveExportedLog(EVT_HANDLE Session,LPCWSTR LogFilePath,LCID Locale,DWORD Flags)WINBOOL WINAPI <winevt.h>
EvtCancel(EVT_HANDLE Object)WINBOOL WINAPI <winevt.h>
EvtClearLog(EVT_HANDLE Session,LPCWSTR ChannelPath,LPCWSTR TargetFilePath,DWORD Flags)WINBOOL WINAPI <winevt.h>
EvtClose(EVT_HANDLE Object)WINBOOL WINAPI <winevt.h>
EvtCreateBookmark(LPCWSTR BookmarkXml)EVT_HANDLE WINAPI <winevt.h>
EvtCreateRenderContext(DWORD ValuePathsCount,LPCWSTR * ValuePaths,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtExportLog(EVT_HANDLE Session,LPCWSTR Path,LPCWSTR Query,LPCWSTR TargetFilePath,DWORD Flags)WINBOOL WINAPI <winevt.h>
EvtFormatMessage(EVT_HANDLE PublisherMetadata,EVT_HANDLE Event,DWORD MessageId,DWORD ValueCount,PEVT_VARIANT Values,DWORD Flags,DWORD BufferSize,LPWSTR Buffer,PDWORD BufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetChannelConfigProperty(EVT_HANDLE ChannelConfig,EVT_CHANNEL_CONFIG_PROPERTY_ID PropertyId,DWORD Flags,DWORD PropertyValueBufferSize,PEVT_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetEventInfo(EVT_HANDLE Event,EVT_EVENT_PROPERTY_ID PropertyId,DWORD PropertyValueBufferSize,PEVT_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetEventMetadataProperty(EVT_HANDLE EventMetadata,EVT_EVENT_METADATA_PROPERTY_ID PropertyId,DWORD Flags,DWORD EventMetadataPropertyBufferSize,PEVT_VARIANT EventMetadataPropertyBuffer,PDWORD EventMetadataPropertyBufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetExtendedStatus(DWORD BufferSize,LPWSTR Buffer,PDWORD BufferUsed)DWORD WINAPI <winevt.h>
EvtGetLogInfo(EVT_HANDLE Log,EVT_LOG_PROPERTY_ID PropertyId,DWORD PropertyValueBufferSize,PEVT_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetObjectArrayProperty(EVT_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,DWORD PropertyId,DWORD ArrayIndex,DWORD Flags,DWORD PropertyValueBufferSize,PEVT_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetObjectArraySize(EVT_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray,PDWORD ObjectArraySize)WINBOOL WINAPI <winevt.h>
EvtGetPublisherMetadataProperty(EVT_HANDLE PublisherMetadata,EVT_PUBLISHER_METADATA_PROPERTY_ID PropertyId,DWORD Flags,DWORD PublisherMetadataPropertyBufferSize,PEVT_VARIANT PublisherMetadataPropertyBuffer,PDWORD PublisherMetadataPropertyBufferUsed)WINBOOL WINAPI <winevt.h>
EvtGetQueryInfo(EVT_HANDLE QueryOrSubscription,EVT_QUERY_PROPERTY_ID PropertyId,DWORD PropertyValueBufferSize,PEVT_VARIANT PropertyValueBuffer,PDWORD PropertyValueBufferUsed)WINBOOL WINAPI <winevt.h>
EvtNext(EVT_HANDLE ResultSet,DWORD EventArraySize,EVT_HANDLE * EventArray,DWORD Timeout,DWORD Flags,PDWORD Returned)WINBOOL WINAPI <winevt.h>
EvtNextChannelPath(EVT_HANDLE ChannelEnum,DWORD ChannelPathBufferSize,LPWSTR ChannelPathBuffer,PDWORD ChannelPathBufferUsed)WINBOOL WINAPI <winevt.h>
EvtNextEventMetadata(EVT_HANDLE EventMetadataEnum,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtNextPublisherId(EVT_HANDLE PublisherEnum,DWORD PublisherIdBufferSize,LPWSTR PublisherIdBuffer,PDWORD PublisherIdBufferUsed)WINBOOL WINAPI <winevt.h>
EvtOpenChannelConfig(EVT_HANDLE Session,LPCWSTR ChannelPath,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtOpenChannelEnum(EVT_HANDLE Session,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtOpenEventMetadataEnum(EVT_HANDLE PublisherMetadata,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtOpenLog(EVT_HANDLE Session,LPCWSTR Path,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtOpenPublisherEnum(EVT_HANDLE Session,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtOpenPublisherMetadata(EVT_HANDLE Session,LPCWSTR PublisherIdentity,LPCWSTR LogFilePath,LCID Locale,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtOpenSession(EVT_LOGIN_CLASS LoginClass,PVOID Login,DWORD Timeout,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtQuery(EVT_HANDLE Session,LPCWSTR Path,LPCWSTR Query,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtRender(EVT_HANDLE Context,EVT_HANDLE Fragment,DWORD Flags,DWORD BufferSize,PVOID Buffer,PDWORD BufferUsed,PDWORD PropertyCount)WINBOOL WINAPI <winevt.h>
EvtSaveChannelConfig(EVT_HANDLE ChannelConfig,DWORD Flags)WINBOOL WINAPI <winevt.h>
EvtSeek(EVT_HANDLE ResultSet,LONGLONG Position,EVT_HANDLE Bookmark,DWORD Timeout,DWORD Flags)WINBOOL WINAPI <winevt.h>
EvtSetChannelConfigProperty(EVT_HANDLE ChannelConfig,EVT_CHANNEL_CONFIG_PROPERTY_ID PropertyId,DWORD Flags,PEVT_VARIANT PropertyValue)WINBOOL WINAPI <winevt.h>
EvtSubscribe(EVT_HANDLE Session,HANDLE SignalEvent,LPCWSTR ChannelPath,LPCWSTR Query,EVT_HANDLE Bookmark,PVOID context,EVT_SUBSCRIBE_CALLBACK Callback,DWORD Flags)EVT_HANDLE WINAPI <winevt.h>
EvtUpdateBookmark(EVT_HANDLE Bookmark,EVT_HANDLE Event)WINBOOL WINAPI <winevt.h>
EX_INIT_BITS(Flags, Bit)<ntddk.h>
EX_TEST_CLEAR_BIT(Flags, Bit)<ntddk.h>
EX_TEST_SET_BIT(Flags, Bit)<ntddk.h>
ExAcquireFastMutex(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExAcquireFastMutexUnsafe(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExAcquireResourceExclusiveLite(IN OUT PERESOURCE Resource,IN BOOLEAN Wait)<wdm.h>
ExAcquireResourceSharedLite(IN OUT PERESOURCE Resource,IN BOOLEAN Wait)<wdm.h>
ExAcquireRundownProtection(IN OUT PEX_RUNDOWN_REF RunRef)<wdm.h>
ExAcquireRundownProtectionCacheAware(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware)<wdm.h>
ExAcquireRundownProtectionCacheAwareEx(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware,IN ULONG Count)<wdm.h>
ExAcquireRundownProtectionEx(IN OUT PEX_RUNDOWN_REF RunRef,IN ULONG Count)<wdm.h>
ExAcquireSharedStarveExclusive(IN OUT PERESOURCE Resource,IN BOOLEAN Wait)<wdm.h>
ExAcquireSharedWaitForExclusive(IN OUT PERESOURCE Resource,IN BOOLEAN Wait)<wdm.h>
ExAcquireSpinLock(Lock, OldIrql) <wdm.h>
ExAcquireSpinLockAtDpcLevel(Lock)<wdm.h>
ExAdjustLookasideDepth(VOID)<ntifs.h>
ExAllocateCacheAwareRundownProtection(IN POOL_TYPE PoolType,IN ULONG PoolTag)<wdm.h>
ExAllocateFromLookasideListEx(IN OUT PLOOKASIDE_LIST_EX Lookaside)<wdm.h>
ExAllocateFromNPagedLookasideList(IN OUT PNPAGED_LOOKASIDE_LIST Lookaside)<wdm.h>
ExAllocateFromPagedLookasideList(IN OUT PPAGED_LOOKASIDE_LIST Lookaside)<wdm.h>
ExAllocateFromZone(IN PZONE_HEADER Zone)<ntddk.h>
ExAllocatePool(IN POOL_TYPE PoolType,IN SIZE_T NumberOfBytes)<wdm.h>
ExAllocatePoolWithQuota(IN POOL_TYPE PoolType,IN SIZE_T NumberOfBytes)<wdm.h>
ExAllocatePoolWithQuotaTag(a,b,c) <wdm.h>
ExAllocatePoolWithQuotaTag(IN POOL_TYPE PoolType,IN SIZE_T NumberOfBytes,IN ULONG Tag)<wdm.h>
ExAllocatePoolWithTag(a,b,c) <wdm.h>
ExAllocatePoolWithTag(IN POOL_TYPE PoolType,IN SIZE_T NumberOfBytes,IN ULONG Tag)<wdm.h>
ExAllocatePoolWithTagPriority(IN POOL_TYPE PoolType,IN SIZE_T NumberOfBytes,IN ULONG Tag,IN EX_POOL_PRIORITY Priority)<wdm.h>
Exclude(const GraphicsPath * path)__inline__ Status Region::<gdiplusimpl.h>
Exclude(const Rect & rect)__inline__ Status Region::<gdiplusimpl.h>
Exclude(const RectF & rect)__inline__ Status Region::<gdiplusimpl.h>
Exclude(const Region * region)__inline__ Status Region::<gdiplusimpl.h>
ExcludeClip(const Rect & rect)	Status <gdiplusgraphics.h>
ExcludeClip(const RectF & rect)	Status <gdiplusgraphics.h>
ExcludeClip(const Region * region)	Status <gdiplusgraphics.h>
ExcludeClipRect(HDC hdc,int left,int top,int right,int bottom) WINGDIAPI int WINAPI <wingdi.h>
ExcludeUpdateRgn(HDC hDC,HWND hWnd) WINUSERAPI int WINAPI <winuser.h>
ExConvertExclusiveToSharedLite(IN OUT PERESOURCE Resource)<wdm.h>
ExCreateCallback(OUT PCALLBACK_OBJECT * CallbackObject,IN POBJECT_ATTRIBUTES ObjectAttributes,IN BOOLEAN Create,IN BOOLEAN AllowMultipleCallbacks)<wdm.h>
ExDeleteLookasideListEx(IN OUT PLOOKASIDE_LIST_EX Lookaside)<wdm.h>
ExDeleteNPagedLookasideList(IN OUT PNPAGED_LOOKASIDE_LIST Lookaside)<wdm.h>
ExDeletePagedLookasideList(IN PPAGED_LOOKASIDE_LIST Lookaside)<wdm.h>
ExDeleteResourceLite(IN OUT PERESOURCE Resource)<wdm.h>
ExDisableResourceBoostLite(IN PERESOURCE Resource)<ntifs.h>
ExecChange(BYTE * pbRecord,WINBOOL fForward)virtual HRESULT WINAPI <mshtmlc.h>
ExecCommand(DHTMLEDITCMDID cmdID,OLECMDEXECOPT cmdexecopt,VARIANT * pInVar,VARIANT * pOutVar)virtual HRESULT WINAPI <dhtmled.h>
ExecMethod(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject * pInParams,IWbemClassObject ** ppOutParams,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI <wmiatlprov.h>
ExecMethodAsync(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject * pInParams,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI <wmiatlprov.h>
ExecNotificationQuery(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI <wmiatlprov.h>
ExecNotificationQuery(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI <wmiatlprov.h>
ExecNotificationQueryAsync(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI <wmiatlprov.h>
ExecNotificationQueryAsync(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI <wmiatlprov.h>
ExecQuery(BSTR strNamespacePath,BSTR strQuery,BSTR strQueryLanguage,IDispatch * pCtx,ISWbemXMLDocumentSet ** ppXMLDocumentSet)virtual HRESULT WINAPI <xmltrnsf.h>
ExecQuery(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)HRESULT WINAPI <xmltrnsf.h>
ExecQuery(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext * pCtx,IEnumWbemClassObject ** ppEnum)virtual HRESULT WINAPI <xmltrnsf.h>
Execute(BSTR bstrLogicalPath)virtual HRESULT WINAPI <oledb.h>
Execute(IUnknown * pUnkOuter,REFIID riid,DBPARAMS * pParams,DBROWCOUNT * pcRowsAffected,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
Execute(void)virtual HRESULT WINAPI <oledb.h>
ExecuteCab(HWND hwnd,PCABINFO pCab,LPVOID pReserved) HRESULT WINAPI <advpub.h>
ExecuteGesture(HWND,SYV,LPRCRESULT) WINBOOL WINAPI <penwin.h>
ExecuteScopeNodeMenuItem(BSTR MenuItemPath,VARIANT ScopeNode)virtual HRESULT WINAPI <mmcobj.h>
ExecuteSearch(IRTCUserSearchQuery * pQuery,IRTCProfile * pProfile,LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
ExecuteSearch(LPWSTR pszSearchFilter,LPWSTR * pAttributeNames,DWORD dwNumberAttributes,PADS_SEARCH_HANDLE phSearchResult)virtual HRESULT WINAPI <rtccore.h>
ExecuteSelectionMenuItem(BSTR MenuItemPath)virtual HRESULT WINAPI <mmcobj.h>
ExecuteShellCommand(BSTR Command,BSTR Directory,BSTR Parameters,BSTR WindowState)virtual HRESULT WINAPI <mmcobj.h>
ExEnterCriticalRegionAndAcquireResourceExclusive(IN OUT PERESOURCE Resource)<wdm.h>
ExEnterCriticalRegionAndAcquireResourceShared(IN OUT PERESOURCE Resource)<wdm.h>
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive(IN OUT PERESOURCE Resource)<wdm.h>
ExExtendZone(IN OUT PZONE_HEADER Zone,IN OUT PVOID Segment,IN ULONG SegmentSize)<ntddk.h>
Exfi386InterlockedDecrementLong(IN PLONG Addend)<ntddk.h>
Exfi386InterlockedExchangeUlong(IN PULONG Target,IN ULONG Value)<ntddk.h>
Exfi386InterlockedIncrementLong(IN OUT LONG volatile * Addend)<ntddk.h>
ExfInterlockedCompareExchange64(IN OUT LONGLONG volatile * Destination,IN PLONGLONG Exchange,IN PLONGLONG Comperand)<wdm.h>
ExFlushLookasideListEx(IN OUT PLOOKASIDE_LIST_EX Lookaside)<wdm.h>
ExFreeCacheAwareRundownProtection(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware)<wdm.h>
ExFreePool(IN PVOID P)<wdm.h>
ExFreePoolWithTag(IN PVOID P,IN ULONG Tag)<wdm.h>
ExFreeToLookasideListEx(IN OUT PLOOKASIDE_LIST_EX Lookaside,IN PVOID Entry)<wdm.h>
ExFreeToNPagedLookasideList(IN OUT PNPAGED_LOOKASIDE_LIST Lookaside,IN PVOID Entry)<wdm.h>
ExFreeToPagedLookasideList(IN OUT PPAGED_LOOKASIDE_LIST Lookaside,IN PVOID Entry)<wdm.h>
ExFreeToZone(IN PZONE_HEADER Zone,IN PVOID Block)<ntddk.h>
ExGetCurrentResourceThread() <wdm.h>
ExGetExclusiveWaiterCount(IN PERESOURCE Resource)<wdm.h>
ExGetPreviousMode(VOID)<wdm.h>
ExGetSharedWaiterCount(IN PERESOURCE Resource)<wdm.h>
ExiAcquireFastMutex(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExInitializeFastMutex(OUT PFAST_MUTEX FastMutex)<wdm.h>
ExInitializeLookasideListEx(OUT PLOOKASIDE_LIST_EX Lookaside,IN PALLOCATE_FUNCTION_EX Allocate OPTIONAL,IN PFREE_FUNCTION_EX Free OPTIONAL,IN POOL_TYPE PoolType,IN ULONG Flags,IN SIZE_T Size,IN ULONG Tag,IN USHORT Depth)<wdm.h>
ExInitializeNPagedLookasideList(IN PNPAGED_LOOKASIDE_LIST Lookaside,IN PALLOCATE_FUNCTION Allocate OPTIONAL,IN PFREE_FUNCTION Free OPTIONAL,IN ULONG Flags,IN SIZE_T Size,IN ULONG Tag,IN USHORT Depth)<wdm.h>
ExInitializePagedLookasideList(IN PPAGED_LOOKASIDE_LIST Lookaside,IN PALLOCATE_FUNCTION Allocate OPTIONAL,IN PFREE_FUNCTION Free OPTIONAL,IN ULONG Flags,IN SIZE_T Size,IN ULONG Tag,IN USHORT Depth)<wdm.h>
ExInitializePushLock(OUT PEX_PUSH_LOCK PushLock)<ntifs.h>
ExInitializeResourceLite(OUT PERESOURCE Resource)<wdm.h>
ExInitializeRundownProtection(OUT PEX_RUNDOWN_REF RunRef)<wdm.h>
ExInitializeRundownProtectionCacheAware(OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware,IN SIZE_T RunRefSize)<wdm.h>
ExInitializeWorkItem(Item, Routine, Context)<wdm.h>
ExInitializeZone(OUT PZONE_HEADER Zone,IN ULONG BlockSize,IN OUT PVOID InitialSegment,IN ULONG InitialSegmentSize)<ntddk.h>
ExInterlockedAddLargeInteger(IN PLARGE_INTEGER Addend,IN LARGE_INTEGER Increment,IN PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedAddLargeStatistic(Addend, Increment)<wdm.h>
ExInterlockedAddUlong(IN PULONG Addend,IN ULONG Increment,IN OUT PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedAllocateFromZone(Zone, Lock)<ntddk.h>
ExInterlockedCompareExchange64(Destination, Exchange, Comperand, Lock)<wdm.h>
ExInterlockedCompareExchange64(IN OUT LONGLONG volatile * Destination,IN PLONGLONG Exchange,IN PLONGLONG Comparand,IN PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedDecrementLong(Addend,Lock)<wdm.h>
ExInterlockedExchangeUlong(Target, Value, Lock)<wdm.h>
ExInterlockedExtendZone(IN OUT PZONE_HEADER Zone,IN OUT PVOID Segment,IN ULONG SegmentSize,IN OUT PKSPIN_LOCK Lock)<ntddk.h>
ExInterlockedFlushSList(Head)<wdm.h>
ExInterlockedFlushSList(IN OUT PSLIST_HEADER ListHead)<wdm.h>
ExInterlockedFreeToZone(Zone, Block, Lock)<ntddk.h>
ExInterlockedIncrementLong(Addend,Lock) <wdm.h>
ExInterlockedInsertHeadList(IN OUT PLIST_ENTRY ListHead,IN OUT PLIST_ENTRY ListEntry,IN OUT PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedInsertTailList(IN OUT PLIST_ENTRY ListHead,IN OUT PLIST_ENTRY ListEntry,IN OUT PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedPopEntryList(IN OUT PSINGLE_LIST_ENTRY ListHead,IN OUT PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedPopEntrySList(_ListHead, _Lock)<wdm.h>
ExInterlockedPopEntrySList(Head, Lock)<wdm.h>
ExInterlockedPopEntrySList(IN PSLIST_HEADER ListHead,IN PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedPushEntryList(IN OUT PSINGLE_LIST_ENTRY ListHead,IN OUT PSINGLE_LIST_ENTRY ListEntry,IN OUT PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedPushEntrySList(_ListHead, _ListEntry, _Lock)<wdm.h>
ExInterlockedPushEntrySList(Head, Entry, Lock)<wdm.h>
ExInterlockedPushEntrySList(IN PSLIST_HEADER ListHead,IN PSINGLE_LIST_ENTRY ListEntry,IN PKSPIN_LOCK Lock)<wdm.h>
ExInterlockedRemoveHeadList(IN OUT PLIST_ENTRY ListHead,IN OUT PKSPIN_LOCK Lock)<wdm.h>
ExiReleaseFastMutex(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExIsFullZone(Zone)<ntddk.h>
ExIsObjectInFirstZoneSegment(Zone,Object)<ntddk.h>
ExIsProcessorFeaturePresent(IN ULONG ProcessorFeature)<wdm.h>
ExIsResourceAcquiredExclusiveLite(IN PERESOURCE Resource)<wdm.h>
ExIsResourceAcquiredSharedLite(IN PERESOURCE Resource)<wdm.h>
Exists(VOID) WINBOOL <_dbdao.h>
ExitProcess(UINT uExitCode) WINBASEAPI DECLSPEC_NORETURN VOID WINAPI <processthreadsapi.h>
ExiTryToAcquireFastMutex(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExitThread(DWORD dwExitCode) WINBASEAPI DECLSPEC_NORETURN VOID WINAPI <processthreadsapi.h>
ExitWindows(dwReserved,Code)<winuser.h>
ExitWindowsEx(UINT uFlags,DWORD dwReason) WINUSERAPI WINBOOL WINAPI <winuser.h>
ExLocalTimeToSystemTime(IN PLARGE_INTEGER LocalTime,OUT PLARGE_INTEGER SystemTime)<wdm.h>
ExNotifyCallback(IN PCALLBACK_OBJECT CallbackObject,IN PVOID Argument1 OPTIONAL,IN PVOID Argument2 OPTIONAL)<wdm.h>
Expand(__LONG32 Unit,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
Expand(HSCOPEITEM hItem)virtual HRESULT WINAPI <tom.h>
Expand(HSCOPEITEM hItem,WINBOOL bExpand)virtual HRESULT WINAPI <tom.h>
Expand(PNODE Node)virtual HRESULT WINAPI <tom.h>
ExpandEnvironmentStrings(LPCSTR lpSrc,LPSTR lpDst,DWORD nSize) WINBASEAPI DWORD WINAPI <processenv.h>
ExpandEnvironmentStringsA(LPCSTR lpSrc,LPSTR lpDst,DWORD nSize) WINBASEAPI DWORD WINAPI <processenv.h>
ExpandEnvironmentStringsForUser(HANDLE hToken,LPCSTR lpSrc,LPSTR lpDest,DWORD dwSize) USERENVAPI WINBOOL WINAPI <userenv.h>
ExpandEnvironmentStringsForUserA(HANDLE hToken,LPCSTR lpSrc,LPSTR lpDest,DWORD dwSize) USERENVAPI WINBOOL WINAPI <userenv.h>
ExpandEnvironmentStringsForUserW(HANDLE hToken,LPCWSTR lpSrc,LPWSTR lpDest,DWORD dwSize) USERENVAPI WINBOOL WINAPI <userenv.h>
ExpandEnvironmentStringsW(LPCWSTR lpSrc,LPWSTR lpDst,DWORD nSize) WINBASEAPI DWORD WINAPI <processenv.h>
ExpandVirtualDisk(HANDLE VirtualDiskHandle,EXPAND_VIRTUAL_DISK_FLAG Flags,PEXPAND_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
ExpertAllocMemory(HEXPERTKEY hExpertKey,SIZE_T nBytes,DWORD * pError) LPVOID WINAPI <netmon.h>
ExpertFreeMemory(HEXPERTKEY hExpertKey,LPVOID pOriginalMemory) DWORD WINAPI <netmon.h>
ExpertGetFrame(HEXPERTKEY hExpertKey,DWORD Direction,DWORD RequestFlags,DWORD RequestedFrameNumber,HFILTER hFilter,LPEXPERTFRAMEDESCRIPTOR pEFrameDescriptor) DWORD WINAPI <netmon.h>
ExpertGetStartupInfo(HEXPERTKEY hExpertKey,PEXPERTSTARTUPINFO pExpertStartupInfo) DWORD WINAPI <netmon.h>
ExpertIndicateStatus(HEXPERTKEY hExpertKey,EXPERTSTATUSENUMERATION Status,DWORD SubStatus,const char * szText,LONG PercentDone) DWORD WINAPI <netmon.h>
ExpertMemorySize(HEXPERTKEY hExpertKey,LPVOID pOriginalMemory) SIZE_T WINAPI <netmon.h>
ExpertReallocMemory(HEXPERTKEY hExpertKey,LPVOID pOriginalMemory,SIZE_T nBytes,DWORD * pError) LPVOID WINAPI <netmon.h>
ExpertSubmitEvent(HEXPERTKEY hExpertKey,PNMEVENTDATA pExpertEvent) DWORD WINAPI <netmon.h>
ExpInterlockedFlushSList(PSLIST_HEADER ListHead)<wdm.h>
ExpInterlockedPopEntrySList(PSLIST_HEADER ListHead)<wdm.h>
ExpInterlockedPushEntrySList(PSLIST_HEADER ListHead,PSLIST_ENTRY ListEntry)<wdm.h>
Export(BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,LONG lFlags)virtual HRESULT WINAPI <txcoord.h>
Export(IUnknown * punkTransaction,ULONG * pcbTransactionCookie)virtual HRESULT WINAPI <txcoord.h>
Export(LPCWSTR pszPasswd,LPCWSTR pszFileName,LPCWSTR pszSourcePath,DWORD dwMDFlags)virtual HRESULT WINAPI <txcoord.h>
Export(VARIANT varStorage)virtual HRESULT WINAPI <txcoord.h>
ExportList(BSTR File,EXPORTLISTOPTIONS exportoptions=ExportListOptions_Default)virtual HRESULT WINAPI <mmcobj.h>
ExportNtmsDatabase(HANDLE hSession) DWORD WINAPI <ntmsapi.h>
ExportPackage(BSTR bstrPackageID,BSTR bstrPackageFile,__LONG32 lOptions)virtual HRESULT WINAPI <mtxadmin.h>
ExportRSoPData(LPOLESTR lpNameSpace,LPOLESTR lpFileName) GPEDITAPI HRESULT WINAPI <gpedit.h>
ExportSecurityContext(PCtxtHandle phContext,ULONG fFlags,PSecBuffer pPackedContext,void ** pToken) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
expr() int <sql_1.h>
expr2() int <sql_1.h>
ExQueryDepthSList(IN PSLIST_HEADER ListHead)<wdm.h>
ExQueryDepthSList(listhead)<wdm.h>
ExQueryPoolBlockSize(IN PVOID PoolBlock,OUT PBOOLEAN QuotaCharged)<ntifs.h>
ExQueueWorkItem(IN OUT PWORK_QUEUE_ITEM WorkItem,IN WORK_QUEUE_TYPE QueueType)<wdm.h>
ExRaiseAccessViolation(VOID)<ntddk.h>
ExRaiseDatatypeMisalignment(VOID)<ntddk.h>
ExRaiseStatus(IN NTSTATUS Status)<wdm.h>
ExRegisterCallback(IN PCALLBACK_OBJECT CallbackObject,IN PCALLBACK_FUNCTION CallbackFunction,IN PVOID CallbackContext OPTIONAL)<wdm.h>
ExReinitializeResourceLite(IN OUT PERESOURCE Resource)<wdm.h>
ExReInitializeRundownProtection(IN OUT PEX_RUNDOWN_REF RunRef)<wdm.h>
ExReInitializeRundownProtectionCacheAware(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware)<wdm.h>
ExReleaseFastMutex(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExReleaseFastMutexUnsafe(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExReleaseResource(R) <wdm.h>
ExReleaseResourceAndLeaveCriticalRegion(IN OUT PERESOURCE Resource)<wdm.h>
ExReleaseResourceForThreadLite(IN OUT PERESOURCE Resource,IN ERESOURCE_THREAD ResourceThreadId)<wdm.h>
ExReleaseResourceLite(IN OUT PERESOURCE Resource)<wdm.h>
ExReleaseRundownProtection(IN OUT PEX_RUNDOWN_REF RunRef)<wdm.h>
ExReleaseRundownProtectionCacheAware(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware)<wdm.h>
ExReleaseRundownProtectionCacheAwareEx(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRef,IN ULONG Count)<wdm.h>
ExReleaseRundownProtectionEx(IN OUT PEX_RUNDOWN_REF RunRef,IN ULONG Count)<wdm.h>
ExReleaseSpinLock(Lock, OldIrql) <wdm.h>
ExReleaseSpinLockFromDpcLevel(Lock)<wdm.h>
ExRundownCompleted(OUT PEX_RUNDOWN_REF RunRef)<wdm.h>
ExRundownCompletedCacheAware(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware)<wdm.h>
ExSetResourceOwnerPointer(IN OUT PERESOURCE Resource,IN PVOID OwnerPointer)<wdm.h>
ExSetResourceOwnerPointerEx(IN OUT PERESOURCE Resource,IN PVOID OwnerPointer,IN ULONG Flags)<wdm.h>
ExSetTimerResolution(IN ULONG DesiredTime,IN BOOLEAN SetResolution)<wdm.h>
ExSizeOfRundownProtectionCacheAware(VOID)<wdm.h>
ExSystemTimeToLocalTime(IN PLARGE_INTEGER SystemTime,OUT PLARGE_INTEGER LocalTime)<wdm.h>
EXT_IMM64(Value,Address,Size,InstPos,ValPos)<winnt.h>
ExtCreatePen(DWORD iPenStyle,DWORD cWidth,CONST LOGBRUSH * plbrush,DWORD cStyle,CONST DWORD * pstyle) WINGDIAPI HPEN WINAPI <wingdi.h>
ExtCreateRegion(CONST XFORM * lpx,DWORD nCount,CONST RGNDATA * lpData) WINGDIAPI HRGN WINAPI <wingdi.h>
ExtDeviceMode(HWND hWnd,HANDLE hInst,LPDEVMODEA pDevModeOutput,LPSTR pDeviceName,LPSTR pPort,LPDEVMODEA pDevModeInput,LPSTR pProfile,DWORD fMode) LONG <winspool.h>
EXTERN_GUID(g,l1,s1,s2,c1,c2,c3,c4,c5,c6,c7,c8)<xolehlp.h>
EXTERN_GUID(itf,l1,s1,s2,c1,c2,c3,c4,c5,c6,c7,c8)<xolehlp.h>
EXTERN_PROXY_FILE(name)<rpcproxy.h>
ExternalAuthenticate(BYTE byAlgorithmRef,BYTE bySecretRef,LPBYTEBUFFER pChallenge,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
ExtEscape(HDC hdc,int iEscape,int cjInput,LPCSTR lpInData,int cjOutput,LPSTR lpOutData) WINGDIAPI int WINAPI <wingdi.h>
ExtFloodFill(HDC hdc,int x,int y,COLORREF color,UINT type) WINGDIAPI WINBOOL WINAPI <wingdi.h>
EXTRACT_MMREG_MID(guid)<mmreg.h>
EXTRACT_MMREG_PID(guid)<mmreg.h>
EXTRACT_USB_TERMINAL(guid)<ksmedia.h>
EXTRACT_USBAUDIO_MID(guid)<ksmedia.h>
EXTRACT_USBAUDIO_PID(guid)<ksmedia.h>
EXTRACT_WAVEFORMATEX_ID(Guid)<mmreg.h>
ExtractAssociatedIcon(HINSTANCE hInst,LPSTR pszIconPath,WORD * piIcon) SHSTDAPI_<shellapi.h>
ExtractAssociatedIconA(HINSTANCE hInst,LPSTR pszIconPath,WORD * piIcon) SHSTDAPI_<shellapi.h>
ExtractAssociatedIconEx(HINSTANCE hInst,LPSTR pszIconPath,WORD * piIconIndex,WORD * piIconId) SHSTDAPI_<shellapi.h>
ExtractAssociatedIconExA(HINSTANCE hInst,LPSTR pszIconPath,WORD * piIconIndex,WORD * piIconId) SHSTDAPI_<shellapi.h>
ExtractAssociatedIconExW(HINSTANCE hInst,LPWSTR pszIconPath,WORD * piIconIndex,WORD * piIconId) SHSTDAPI_<shellapi.h>
ExtractAssociatedIconW(HINSTANCE hInst,LPWSTR pszIconPath,WORD * piIcon) SHSTDAPI_<shellapi.h>
ExtractCAB(const BSTR FileName)virtual HRESULT WINAPI <mergemod.h>
ExtractFiles(const BSTR Path)virtual HRESULT WINAPI <mergemod.h>
ExtractFiles(LPCSTR pszCabName,LPCSTR pszExpandDir,DWORD dwFlags,LPCSTR pszFileList,LPVOID lpReserved,DWORD dwReserved) HRESULT WINAPI <mergemod.h>
ExtractFilesEx(const BSTR Path,VARIANT_BOOL fLongFileNames,IMsmStrings ** pFilePaths)virtual HRESULT WINAPI <mergemod.h>
ExtractIcon(HINSTANCE hInst,LPCSTR pszExeFileName,UINT nIconIndex) SHSTDAPI_<shellapi.h>
ExtractIconA(HINSTANCE hInst,LPCSTR pszExeFileName,UINT nIconIndex) SHSTDAPI_<shellapi.h>
ExtractIconEx(LPCSTR lpszFile,int nIconIndex,HICON * phiconLarge,HICON * phiconSmall,UINT nIcons) SHSTDAPI_<shellapi.h>
ExtractIconExA(LPCSTR lpszFile,int nIconIndex,HICON * phiconLarge,HICON * phiconSmall,UINT nIcons) SHSTDAPI_<shellapi.h>
ExtractIconExW(LPCWSTR lpszFile,int nIconIndex,HICON * phiconLarge,HICON * phiconSmall,UINT nIcons) SHSTDAPI_<shellapi.h>
ExtractIconW(HINSTANCE hInst,LPCWSTR pszExeFileName,UINT nIconIndex) SHSTDAPI_<shellapi.h>
ExtractPatchHeaderToFile(LPCSTR PatchFileName,LPCSTR PatchHeaderFileName) WINBOOL PATCHAPI <patchapi.h>
ExtractPatchHeaderToFileA(LPCSTR PatchFileName,LPCSTR PatchHeaderFileName) WINBOOL PATCHAPI <patchapi.h>
ExtractPatchHeaderToFileByHandles(HANDLE PatchFileHandle,HANDLE PatchHeaderFileHandle) WINBOOL PATCHAPI <patchapi.h>
ExtractPatchHeaderToFileW(LPCWSTR PatchFileName,LPCWSTR PatchHeaderFileName) WINBOOL PATCHAPI <patchapi.h>
ExtractPenDataPoints(HPENDATA,UINT,UINT,UINT,LPPOINT,LPVOID,UINT) int WINAPI <penwin.h>
ExtractPenDataStrokes(HPENDATA,UINT,LPARAM,LPHPENDATA,UINT) int WINAPI <penwin.h>
ExTryToAcquireFastMutex(IN OUT PFAST_MUTEX FastMutex)<wdm.h>
ExtSelectClipRgn(HDC hdc,HRGN hrgn,int mode) WINGDIAPI int WINAPI <wingdi.h>
ExtTextOut(HDC hdc,int x,int y,UINT options,CONST RECT * lprect,LPCSTR lpString,UINT c,CONST INT * lpDx) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ExtTextOutA(HDC hdc,int x,int y,UINT options,CONST RECT * lprect,LPCSTR lpString,UINT c,CONST INT * lpDx) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ExtTextOutW(HDC hdc,int x,int y,UINT options,CONST RECT * lprect,LPCWSTR lpString,UINT c,CONST INT * lpDx) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ExUnregisterCallback(IN OUT PVOID CbRegistration)<wdm.h>
ExUuidCreate(OUT UUID * Uuid)<ntddk.h>
ExVerifySuite(IN SUITE_TYPE SuiteType)<wdm.h>
ExWaitForRundownProtectionRelease(IN OUT PEX_RUNDOWN_REF RunRef)<wdm.h>
ExWaitForRundownProtectionReleaseCacheAware(IN OUT PEX_RUNDOWN_REF_CACHE_AWARE RunRef)<wdm.h>
F32vec1() <fvec.h>
F32vec1(__m128 m) <fvec.h>
F32vec1(const F32vec1 & a) friend  sqrt<fvec.h>
F32vec1(const F32vec1 & a,const F32vec1 & b) friend  simd_max<fvec.h>
F32vec1(double d) EXPLICIT <fvec.h>
F32vec1(F32vec1 & a) <fvec.h>
F32vec1(float f) EXPLICIT <fvec.h>
F32vec1(int i) <fvec.h>
F32vec1(lt)Fvec32s1_COMP<fvec.h>
F32vec1(std::ostream & os,const F32vec1 & a) friend std::ostream<fvec.h>
F32vec4() <fvec.h>
F32vec4(__m128 m) <fvec.h>
F32vec4(const __m128 & avec) <fvec.h>
F32vec4(const F32vec4 & a) friend  sqrt<fvec.h>
F32vec4(const F32vec4 & a,const F32vec4 & b) friend  simd_max<fvec.h>
F32vec4(double d) <fvec.h>
F32vec4(F32vec4 & a) <fvec.h>
F32vec4(float f) <fvec.h>
F32vec4(float f3,float f2,float f1,float f0) <fvec.h>
F32vec4(int i) float<fvec.h>
F32vec4(lt)Fvec32s4_COMP<fvec.h>
F32vec4(std::ostream & os,const F32vec4 & a) friend std::ostream<fvec.h>
F32vec4ToF64vec2(const F32vec4 & a)inline F64vec2 <dvec.h>
F64vec2() <dvec.h>
F64vec2(__m128d m) <dvec.h>
F64vec2(const F64vec2 & a) friend  sqrt<dvec.h>
F64vec2(const F64vec2 & a,const F64vec2 & b) friend  simd_max<dvec.h>
F64vec2(double d) EXPLICIT <dvec.h>
F64vec2(double d1,double d0) <dvec.h>
F64vec2(double*)double<dvec.h>
F64vec2(F64vec2 & a) <dvec.h>
F64vec2(int i) double<dvec.h>
F64vec2(lt)_COMP<dvec.h>
F64vec2_COMI(op)<dvec.h>
F64vec2_COMP(lt)<dvec.h>
F64vec2_COMP(op)<dvec.h>
F64vec2_SELECT(lt)<dvec.h>
F64vec2_SELECT(op)<dvec.h>
F64vec2_UCOMI(op)<dvec.h>
F64vec2ToF32vec4(const F64vec2 & a)inline F32vec4 <dvec.h>
FAbsTimeInInterval(at,lpi)<penwin.h>
Fail(void)virtual HRESULT WINAPI <msclus.h>
FailClusterResource(HRESOURCE hResource) DWORD WINAPI <clusapi.h>
FAILED(hr)<winerror.h>
FAREAST_KEYBOARD(Id)<ntddkbd.h>
FatalAppExit(UINT uAction,LPCSTR lpMessageText) WINBASEAPI VOID WINAPI <winbase.h>
FatalAppExitA(UINT uAction,LPCSTR lpMessageText) WINBASEAPI VOID WINAPI <winbase.h>
FatalAppExitW(UINT uAction,LPCWSTR lpMessageText) WINBASEAPI VOID WINAPI <winbase.h>
FatalExit(int ExitCode) WINBASEAPI VOID WINAPI <winbase.h>
FaultInIEFeature(HWND hWnd,uCLSSPEC * pClassSpec,QUERYCONTEXT * pQuery,DWORD dwFlags)STDAPI <urlmon.h>
FBadAddRef(lpObj)<mapival.h>
FBadAdrList(lpAdrList)<mapival.h>
FBadColumnSet(LPSPropTagArray lpptaCols) STDAPI_<mapival.h>
FBadCopyProps(lpIPDAT,lpPropTagArray ,ulUIParam,lpProgress,lpInterface,lpDestObj ,ulFlags,lppProblems)<mapival.h>
FBadCopyTo(lpIPDAT,ciidExclude,rgiidExclude,lpExcludeProps ,ulUIParam,lpProgress,lpInterface,lpDestObj ,ulFlags,lppProblems)<mapival.h>
FBadDeleteProps(lpObj,lpPTagA,lppProblems)<mapival.h>
FBadEntryList(LPENTRYLIST lpEntryList) STDAPI_<mapival.h>
FBadGetIDsFromNames(lpIPDAT,cPropNames,lppPropNames,ulFlags ,lppPropTags)<mapival.h>
FBadGetLastError(lpObj,hResult,ulFlags,lppMAPIError)<mapival.h>
FBadGetNamesFromIDs(lpIPDAT,lppPropTags,lpPropSetGuid,ulFlags,lpcPropNames,lpppPropNames)<mapival.h>
FBadGetPropList(lpObj,lppPTagA)<mapival.h>
FBadGetProps(lpObj,lpPTagA,lpcValues,lppPropArray)<mapival.h>
FBadOpenProperty(lpObj,ulPropTag,lpiid,ulInterfaceOptions,ulFlags ,lppUnk)<mapival.h>
FBadProp(LPSPropValue lpprop) STDAPI_<mapival.h>
FBadPropTag(ULONG ulPropTag) STDAPI_<mapival.h>
FBadPropVal(lpPropVal)<mapival.h>
FBadQueryInterface(lpObj,riid,ppvObj)<mapival.h>
FBadRelease(lpObj)<mapival.h>
FBadRestriction(LPSRestriction lpres) STDAPI_<mapival.h>
FBadRglpNameID(LPMAPINAMEID * lppNameId,ULONG cNames) STDAPI_<mapival.h>
FBadRglpszW(LPWSTR * lppszW,ULONG cStrings) STDAPI_<mapival.h>
FBadRgPropVal(lpPropVal,cValues)<mapival.h>
FBadRow(LPSRow lprow) STDAPI_<mapival.h>
FBadRowSet(LPSRowSet lpRowSet) STDAPI_<mapival.h>
FBadSaveChanges(lpObj,ulFlags)<mapival.h>
FBadSetProps(lpObj,cValues,lpPropArray,lppProblems)<mapival.h>
FBadSortOrderSet(LPSSortOrderSet lpsos) STDAPI_<mapival.h>
FBadUnknown(lpObj)<mapival.h>
FBinFromHex(LPTSTR lpsz,LPBYTE lpb) STDAPI_<mapiutil.h>
FCanonicalAcl(PACL pacl)WINBOOL ROLDLLEXP ROLEAPI <mdbrole.h>
FCanonicalAcl(PSECURITY_DESCRIPTOR pntsd)WINBOOL ROLDLLEXP ROLEAPI <mdbrole.h>
FCC(ch4)<mfapi.h>
FCIAddFile(HFCI hfci,char * pszSourceFile,char * pszFileName,WINBOOL fExecute,PFNFCIGETNEXTCABINET pfnfcignc,PFNFCISTATUS pfnfcis,PFNFCIGETOPENINFO pfnfcigoi,TCOMP typeCompress) WINBOOL DIAMONDAPI <fci.h>
FCICreate(PERF perf,PFNFCIFILEPLACED pfnfcifp,PFNFCIALLOC pfna,PFNFCIFREE pfnf,PFNFCIOPEN pfnopen,PFNFCIREAD pfnread,PFNFCIWRITE pfnwrite,PFNFCICLOSE pfnclose,PFNFCISEEK pfnseek,PFNFCIDELETE pfndelete,PFNFCIGETTEMPFILE pfnfcigtf,PCCAB pccab,void * pv) HFCI DIAMONDAPI <fci.h>
FCIDestroy(HFCI hfci) WINBOOL DIAMONDAPI <fci.h>
FCIFlushCabinet(HFCI hfci,WINBOOL fGetNextCab,PFNFCIGETNEXTCABINET pfnfcignc,PFNFCISTATUS pfnfcis) WINBOOL DIAMONDAPI <fci.h>
FCIFlushFolder(HFCI hfci,PFNFCIGETNEXTCABINET pfnfcignc,PFNFCISTATUS pfnfcis) WINBOOL DIAMONDAPI <fci.h>
FD_CLR(fd,set)<psdk>
FD_ISSET(fd,set)<psdk>
FD_SET(fd,set)<psdk>
FD_ZERO(set)<psdk>
FDDI_COMPARE_NETWORK_ADDRESSES(_A, _B, _Length, _Result)<xfilter.h>
FDDI_COMPARE_NETWORK_ADDRESSES_EQ(_A, _B, _Length, _Result)<xfilter.h>
FDDI_COPY_NETWORK_ADDRESS(D, S, AddressLength)<xfilter.h>
FDDI_IS_BROADCAST(Address, AddressLength, Result)<xfilter.h>
FDDI_IS_MULTICAST(Address, AddressLength, Result)<xfilter.h>
FDDI_IS_SMT(FcByte, Result)<xfilter.h>
FDICopy(HFDI hfdi,char * pszCabinet,char * pszCabPath,int flags,PFNFDINOTIFY pfnfdin,PFNFDIDECRYPT pfnfdid,void * pvUser) WINBOOL DIAMONDAPI <fdi.h>
FDICreate(PFNALLOC pfnalloc,PFNFREE pfnfree,PFNOPEN pfnopen,PFNREAD pfnread,PFNWRITE pfnwrite,PFNCLOSE pfnclose,PFNSEEK pfnseek,int cpuType,PERF perf) HFDI DIAMONDAPI <fdi.h>
FDIDestroy(HFDI hfdi) WINBOOL DIAMONDAPI <fdi.h>
FDIIsCabinet(HFDI hfdi,INT_PTR hf,PFDICABINETINFO pfdici) WINBOOL DIAMONDAPI <fdi.h>
FDITruncateCabinet(HFDI hfdi,char * pszCabinetName,USHORT iFolderToDelete) WINBOOL DIAMONDAPI <fdi.h>
FEQAbsTime(at1,at2)<penwin.h>
FEqualNames(LPMAPINAMEID lpName1,LPMAPINAMEID lpName2) STDAPI_<wabutil.h>
FExecuteInAppDomainCallback(void * cookie)typedef HRESULT<mscoree.h>
FIELD_OFFSET()()()
FIELD_OFFSET(type, field)<winnt.h>
FIELD_OFFSET(Type, Field)<winnt.h>
FIELD_SIZE(type, field) <wdm.h>
FileEncryptionStatus(LPCSTR lpFileName,LPDWORD lpStatus) WINADVAPI WINBOOL WINAPI <winbase.h>
FileEncryptionStatusA(LPCSTR lpFileName,LPDWORD lpStatus) WINADVAPI WINBOOL WINAPI <winbase.h>
FileEncryptionStatusW(LPCWSTR lpFileName,LPDWORD lpStatus) WINADVAPI WINBOOL WINAPI <winbase.h>
FILEMUIINFO_GET_CULTURE(pInfo)<winnls.h>
FILEMUIINFO_GET_MAIN_TYPEID()()()
FILEMUIINFO_GET_MAIN_TYPEID(pInfo, iType)<winnls.h>
FILEMUIINFO_GET_MAIN_TYPEIDS(pInfo)<winnls.h>
FILEMUIINFO_GET_MAIN_TYPENAMES(pInfo)<winnls.h>
FILEMUIINFO_GET_MUI_TYPEID()()()
FILEMUIINFO_GET_MUI_TYPEID(pInfo, iType)<winnls.h>
FILEMUIINFO_GET_MUI_TYPEIDS(pInfo)<winnls.h>
FILEMUIINFO_GET_MUI_TYPENAMES(pInfo)<winnls.h>
FileSaveMarkNotExist(LPSTR lpFileList,LPSTR lpDir,LPSTR lpBaseName) HRESULT WINAPI <advpub.h>
FileSaveRestore(HWND hDlg,LPSTR lpFileList,LPSTR lpDir,LPSTR lpBaseName,DWORD dwFlags) HRESULT WINAPI <advpub.h>
FileSaveRestoreOnINF(HWND hWnd,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,PCSTR pszBackupDir,PCSTR pszBaseBackupFile,DWORD dwFlags) HRESULT WINAPI <advpub.h>
FileTimeToDosDateTime(CONST FILETIME * lpFileTime,LPWORD lpFatDate,LPWORD lpFatTime) WINBASEAPI WINBOOL WINAPI <winbase.h>
FileTimeToLocalFileTime(CONST FILETIME * lpFileTime,LPFILETIME lpLocalFileTime) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FileTimeToSystemTime(CONST FILETIME * lpFileTime,LPSYSTEMTIME lpSystemTime) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
FillClosedCurve(const Brush * brush,const Point * points,INT count)	Status <gdiplusgraphics.h>
FillClosedCurve(const Brush * brush,const Point * points,INT count,FillMode fillMode,REAL tension=0.5f)	Status <gdiplusgraphics.h>
FillClosedCurve(const Brush * brush,const PointF * points,INT count)	Status <gdiplusgraphics.h>
FillClosedCurve(const Brush * brush,const PointF * points,INT count,FillMode fillMode,REAL tension=0.5f)	Status <gdiplusgraphics.h>
FillConsoleOutputAttribute(HANDLE hConsoleOutput,WORD wAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
FillConsoleOutputCharacter(HANDLE hConsoleOutput,CHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
FillConsoleOutputCharacterA(HANDLE hConsoleOutput,CHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
FillConsoleOutputCharacterW(HANDLE hConsoleOutput,WCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
FillEllipse(const Brush * brush,const Rect & rect)	Status <gdiplusgraphics.h>
FillEllipse(const Brush * brush,const RectF & rect)	Status <gdiplusgraphics.h>
FillEllipse(const Brush * brush,INT x,INT y,INT width,INT height)	Status <gdiplusgraphics.h>
FillEllipse(const Brush * brush,REAL x,REAL y,REAL width,REAL height)	Status <gdiplusgraphics.h>
FillMemory(Destination, Length, Fill) <minwinbase.h>
FillPath(const Brush * brush,const GraphicsPath * path)	Status <wingdi.h>
FillPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
FillPie(const Brush * brush,const Rect & rect,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
FillPie(const Brush * brush,const RectF & rect,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
FillPie(const Brush * brush,INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
FillPie(const Brush * brush,REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status <gdiplusgraphics.h>
FillPolygon(const Brush * brush,const Point * points,INT count)	Status <gdiplusgraphics.h>
FillPolygon(const Brush * brush,const Point * points,INT count,FillMode fillMode)	Status <gdiplusgraphics.h>
FillPolygon(const Brush * brush,const PointF * points,INT count)	Status <gdiplusgraphics.h>
FillPolygon(const Brush * brush,const PointF * points,INT count,FillMode fillMode)	Status <gdiplusgraphics.h>
FillRect(HDC hDC,CONST RECT * lprc,HBRUSH hbr) WINUSERAPI int WINAPI <winuser.h>
FillRectangle(const Brush * brush,const Rect & rect)	Status <gdiplusgraphics.h>
FillRectangle(const Brush * brush,const RectF & rect)	Status <gdiplusgraphics.h>
FillRectangle(const Brush * brush,INT x,INT y,INT width,INT height)	Status <gdiplusgraphics.h>
FillRectangle(const Brush * brush,REAL x,REAL y,REAL width,REAL height)	Status <gdiplusgraphics.h>
FillRectangles(const Brush * brush,const Rect * rects,INT count)	Status <gdiplusgraphics.h>
FillRectangles(const Brush * brush,const RectF * rects,INT count)	Status <gdiplusgraphics.h>
FillRegion(const Brush * brush,const Region * region)	Status <gdiplusgraphics.h>
FillRgn(HDC hdc,HRGN hrgn,HBRUSH hbr) WINGDIAPI WINBOOL WINAPI <wingdi.h>
FILTER_HRESULT_FROM_FLT_NTSTATUS(x)<fltwinerror.h>
FILTER_PROTO(ProtoId)<fltdefs.h>
FilterAddObject(HFILTER hFilter,LPFILTEROBJECT2 lpFilterObject) DWORD WINAPI <netmon.h>
FilterAttach(LPCWSTR lpFilterName,LPCWSTR lpVolumeName,LPCWSTR lpInstanceName,DWORD dwCreatedInstanceNameLength,LPWSTR lpCreatedInstanceName)HRESULT WINAPI <fltuser.h>
FilterAttachAtAltitude(LPCWSTR lpFilterName,LPCWSTR lpVolumeName,LPCWSTR lpAltitude,LPCWSTR lpInstanceName,DWORD dwCreatedInstanceNameLength,LPWSTR lpCreatedInstanceName)HRESULT WINAPI <fltuser.h>
FilterAttachesProperties(HFILTER hFilter) WINBOOL WINAPI <netmon.h>
FilterClientWindows(ATOM * aaClassList,UINT uSize)virtual HRESULT WINAPI <mshtmlc.h>
FilterClose(HFILTER hFilter)HRESULT WINAPI <fltuser.h>
FilterConnectCommunicationPort(LPCWSTR lpPortName,DWORD dwOptions,LPCVOID lpContext,WORD wSizeOfContext,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE * hPort)HRESULT WINAPI <fltuser.h>
FilterCreate(LPCWSTR lpFilterName,HFILTER * hFilter)HRESULT WINAPI <fltuser.h>
FilterDetach(LPCWSTR lpFilterName,LPCWSTR lpVolumeName,LPCWSTR lpInstanceName)HRESULT WINAPI <fltuser.h>
FilterDuplicate(HFILTER hFilter) HFILTER WINAPI <netmon.h>
FilterFindClose(HANDLE hFilterFind)HRESULT WINAPI <fltuser.h>
FilterFindFirst(FILTER_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned,LPHANDLE lpFilterFind)HRESULT WINAPI <fltuser.h>
FilterFindFrame(HFILTER hFilter,HCAPTURE hCapture,DWORD nFrame,STATUSPROC StatusProc,LPVOID UIInstance,DWORD TimeDelta,WINBOOL FilterDirection) DWORD WINAPI <netmon.h>
FilterFindNext(HANDLE hFilterFind,FILTER_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FilterFindPropertyInstance(HFRAME hFrame,HFILTER hMasterFilter,HCAPTURE hCapture,HFILTER hInstanceFilter,LPPROPERTYINST * lpPropRestartKey,STATUSPROC StatusProc,LPVOID UIInstance,DWORD TimeDelta,WINBOOL FilterForward) HFRAME <netmon.h>
FilterFlushBits(HFILTER hFilter) VOID WINAPI <netmon.h>
FilterFrame(HFRAME hFrame,HFILTER hFilter,HCAPTURE hCapture) DWORD WINAPI <netmon.h>
FilterGetDosName(LPCWSTR lpVolumeName,LPWSTR lpDosName,DWORD dwDosNameBufferSize)HRESULT WINAPI <fltuser.h>
FilterGetInformation(HFILTER hFilter,FILTER_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FilterGetMessage(HANDLE hPort,PFILTER_MESSAGE_HEADER lpMessageBuffer,DWORD dwMessageBufferSize,LPOVERLAPPED lpOverlapped)HRESULT WINAPI <fltuser.h>
FilterGetUIInstanceData(hfilt)<netmon.h>
FilterIn(IUnknown * pStmOld,IUnknown ** ppStmNew,DWORD dwFlags,BSTR bstrBaseURL)virtual HRESULT WINAPI <triedit.h>
FilterInstanceClose(HFILTER_INSTANCE hInstance)HRESULT WINAPI <fltuser.h>
FilterInstanceCreate(LPCWSTR lpFilterName,LPCWSTR lpVolumeName,LPCWSTR lpInstanceName,HFILTER_INSTANCE * hInstance)HRESULT WINAPI <fltuser.h>
FilterInstanceFindClose(HANDLE hFilterInstanceFind)HRESULT WINAPI <fltuser.h>
FilterInstanceFindFirst(LPCWSTR lpFilterName,INSTANCE_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned,LPHANDLE lpFilterInstanceFind)HRESULT WINAPI <fltuser.h>
FilterInstanceFindNext(HANDLE hFilterInstanceFind,INSTANCE_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FilterInstanceGetInformation(HFILTER_INSTANCE hInstance,INSTANCE_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FilterLoad(LPCWSTR lpFilterName)HRESULT WINAPI <fltuser.h>
FilterNPPBlob(HBLOB hBlob,HBLOB FilterBlob) WINBOOL __cdecl <netmon.h>
FilterOut(IUnknown * pStmOld,IUnknown ** ppStmNew,DWORD dwFlags,BSTR bstrBaseURL)virtual HRESULT WINAPI <triedit.h>
FilterReplyMessage(HANDLE hPort,PFILTER_REPLY_HEADER lpReplyBuffer,DWORD dwReplyBufferSize)HRESULT WINAPI <fltuser.h>
FilterSendMessage(HANDLE hPort,LPVOID lpInBuffer,DWORD dwInBufferSize,LPVOID lpOutBuffer,DWORD dwOutBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FilterSetUIInstanceData(hfilt,inst)<netmon.h>
FilterSourceCode(BSTR sourceCodeIn,BSTR * sourceCodeOut)virtual HRESULT WINAPI <dhtmled.h>
FilterUnload(LPCWSTR lpFilterName)HRESULT WINAPI <fltuser.h>
FilterVolumeFindClose(HANDLE hVolumeFind)HRESULT WINAPI <fltuser.h>
FilterVolumeFindFirst(FILTER_VOLUME_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned,PHANDLE lpVolumeFind)HRESULT WINAPI <fltuser.h>
FilterVolumeFindNext(HANDLE hVolumeFind,FILTER_VOLUME_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FilterVolumeInstanceFindClose(HANDLE hVolumeInstanceFind)HRESULT WINAPI <fltuser.h>
FilterVolumeInstanceFindFirst(LPCWSTR lpVolumeName,INSTANCE_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned,LPHANDLE lpVolumeInstanceFind)HRESULT WINAPI <fltuser.h>
FilterVolumeInstanceFindNext(HANDLE hVolumeInstanceFind,INSTANCE_INFORMATION_CLASS dwInformationClass,LPVOID lpBuffer,DWORD dwBufferSize,LPDWORD lpBytesReturned)HRESULT WINAPI <fltuser.h>
FinalClientRetry(void)virtual HRESULT WINAPI <comsvcs.h>
finalize() int <sql_1.h>
FinalRelease() virtual void <mspstrm.h>
FinalRelease(void) void <mspstrm.h>
FinalServerRetry(void)virtual HRESULT WINAPI <comsvcs.h>
Find(ARG_TYPE searchValue,DXLISTPOS startAfter)DXLISTPOS CDXList<msputils.h>
Find(ARG_TYPE searchValue,DXLISTPOS startAfter=NULL) DXLISTPOS <msputils.h>
Find(T & t) int <msputils.h>
FindActCtxSectionGuid(DWORD dwFlags,const GUID * lpExtensionGuid,ULONG ulSectionId,const GUID * lpGuidToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindActCtxSectionString(DWORD dwFlags,const GUID * lpExtensionGuid,ULONG ulSectionId,LPCSTR lpStringToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindActCtxSectionStringA(DWORD dwFlags,const GUID * lpExtensionGuid,ULONG ulSectionId,LPCSTR lpStringToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindActCtxSectionStringW(DWORD dwFlags,const GUID * lpExtensionGuid,ULONG ulSectionId,LPCWSTR lpStringToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindAtom(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
FindAtomA(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
FindAtomW(LPCWSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
FindBehavior(BSTR bstrBehavior,BSTR bstrBehaviorUrl,IElementBehaviorSite * pSite,IElementBehavior ** ppBehavior)virtual HRESULT WINAPI <mshtmlc.h>
FindBrowserByIndex(DWORD dwID,IUnknown ** ppunkBrowser)virtual HRESULT WINAPI <htiface.h>
FindCapturePin() HRESULT <msptrmvc.h>
FindCard(SCARD_SHARE_MODES ShareMode,SCARD_PROTOCOLS Protocols,LONG lFlags,LPSCARDINFO * ppCardInfo)virtual HRESULT WINAPI <scardssp.h>
FindCell(DBORDINAL ulStartingOrdinal,DBCOUNTITEM cMembers,LPCOLESTR * rgpwszMember,DBORDINAL * pulCellOrdinal)virtual HRESULT WINAPI <oledb.h>
FindCertsByIssuer(PCERT_CHAIN pCertChains,DWORD * pcbCertChains,DWORD * pcCertChains,BYTE * pbEncodedIssuerName,DWORD cbEncodedIssuerName,LPCWSTR pwszPurpose,DWORD dwKeySpec) HRESULT WINAPI <wincrypt.h>
FindCIE4ConnectionPoint(REFIID riid,CIE4ConnectionPoint ** ppccp)virtual HRESULT WINAPI <shdeprecated.h>
FindClose(HANDLE hFindFile) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindCloseChangeNotification(HANDLE hChangeHandle) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindClosePrinterChangeNotification(HANDLE hChange) WINBOOL WINAPI <winspool.h>
FindCloseUrlCache(HANDLE hEnumHandle) BOOLAPI <wininet.h>
FindContact(BSTR bstrFirstName,BSTR bstrLastName,BSTR bstrAlias,BSTR bstrCity,BSTR bstrState,BSTR bstrCountry,LONG * plCookie)virtual HRESULT WINAPI <msimcsdk.h>
FindContextFromName(PNAME_CACHE_CONTEXT pNameCache,LPBYTE lpbName,DWORD cbName,CACHE_READ_CALLBACK pfnCallback,LPVOID lpvClientContext,HANDLE hToken,ACCESS_MASK accessMask,FIO_CONTEXT ** ppContext) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FindDebugInfoFile(PCSTR FileName,PCSTR SymbolPath,PSTR DebugFilePath) HANDLE IMAGEAPI <psdk>
FindDebugInfoFileEx(PCSTR FileName,PCSTR SymbolPath,PSTR DebugFilePath,PFIND_DEBUG_FILE_CALLBACK Callback,PVOID CallerData) HANDLE IMAGEAPI <psdk>
FindDebugInfoFileExW(PCWSTR FileName,PCWSTR SymbolPath,PWSTR DebugFilePath,PFIND_DEBUG_FILE_CALLBACKW Callback,PVOID CallerData) HANDLE IMAGEAPI <psdk>
FindErrorNodes(const DBCOMMANDTREE * pRoot,ULONG * pcErrorNodes,DBCOMMANDTREE *** prgErrorNodes)virtual HRESULT WINAPI <cmdtree.h>
FindExecutable(LPCSTR lpFile,LPCSTR lpDirectory,LPSTR lpResult) SHSTDAPI_<shellapi.h>
FindExecutableA(LPCSTR lpFile,LPCSTR lpDirectory,LPSTR lpResult) SHSTDAPI_<shellapi.h>
FindExecutableImage(PCSTR FileName,PCSTR SymbolPath,PSTR ImageFilePath) HANDLE IMAGEAPI <psdk>
FindExecutableImageEx(PCSTR FileName,PCSTR SymbolPath,PSTR ImageFilePath,PFIND_EXE_FILE_CALLBACK Callback,PVOID CallerData) HANDLE IMAGEAPI <psdk>
FindExecutableImageExW(PCWSTR FileName,PCWSTR SymbolPath,PWSTR ImageFilePath,PFIND_EXE_FILE_CALLBACKW Callback,PVOID CallerData) HANDLE IMAGEAPI <psdk>
FindExecutableW(LPCWSTR lpFile,LPCWSTR lpDirectory,LPWSTR lpResult) SHSTDAPI_<shellapi.h>
FindFileInPath(HANDLE hprocess,PCSTR SearchPath,PCSTR FileName,PVOID id,DWORD two,DWORD three,DWORD flags,PSTR FilePath) DBHLP_DEPRECIATED WINBOOL IMAGEAPI <psdk>
FindFileInSearchPath(HANDLE hprocess,PCSTR SearchPath,PCSTR FileName,DWORD one,DWORD two,DWORD three,PSTR FilePath) DBHLP_DEPRECIATED WINBOOL IMAGEAPI <psdk>
FindFirstChangeNotification(LPCSTR lpPathName,WINBOOL bWatchSubtree,DWORD dwNotifyFilter) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstChangeNotificationA(LPCSTR lpPathName,WINBOOL bWatchSubtree,DWORD dwNotifyFilter) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstChangeNotificationW(LPCWSTR lpPathName,WINBOOL bWatchSubtree,DWORD dwNotifyFilter) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFile(LPCSTR lpFileName,LPWIN32_FIND_DATAA lpFindFileData) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFileA(LPCSTR lpFileName,LPWIN32_FIND_DATAA lpFindFileData) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFileEx(LPCSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFileExA(LPCSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFileExW(LPCWSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFileNameTransactedW(LPCWSTR lpFileName,DWORD dwFlags,LPDWORD StringLength,PWSTR LinkName,HANDLE hTransaction) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstFileNameW(LPCWSTR lpFileName,DWORD dwFlags,LPDWORD StringLength,PWSTR LinkName) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstFileTransacted(LPCSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags,HANDLE hTransaction) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstFileTransactedA(LPCSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags,HANDLE hTransaction) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstFileTransactedW(LPCWSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags,HANDLE hTransaction) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstFileW(LPCWSTR lpFileName,LPWIN32_FIND_DATAW lpFindFileData) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFirstFreeAce(PACL pAcl,LPVOID * pAce) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
FindFirstItem(ImageItemData * item)__inline__ Status Image::<gdiplusimpl.h>
FindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,LPVOID pPrinterNotifyOptions) HANDLE WINAPI <winspool.h>
FindFirstStreamTransactedW(LPCWSTR lpFileName,STREAM_INFO_LEVELS InfoLevel,LPVOID lpFindStreamData,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstStreamW(LPCWSTR lpFileName,STREAM_INFO_LEVELS InfoLevel,LPVOID lpFindStreamData,DWORD dwFlags) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstUrlCacheEntry(LPCSTR lpszUrlSearchPattern,LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) INTERNETAPI_<wininet.h>
FindFirstUrlCacheEntryA(LPCSTR lpszUrlSearchPattern,LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) INTERNETAPI_<wininet.h>
FindFirstUrlCacheEntryEx(LPCSTR lpszUrlSearchPattern,DWORD dwFlags,DWORD dwFilter,GROUPID GroupId,LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,LPDWORD lpcbEntryInfo,LPVOID lpGroupAttributes,LPDWORD lpcbGroupAttributes,LPVOID lpReserved) INTERNETAPI_<wininet.h>
FindFirstUrlCacheEntryExA(LPCSTR lpszUrlSearchPattern,DWORD dwFlags,DWORD dwFilter,GROUPID GroupId,LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,LPDWORD lpcbEntryInfo,LPVOID lpGroupAttributes,LPDWORD lpcbGroupAttributes,LPVOID lpReserved) INTERNETAPI_<wininet.h>
FindFirstUrlCacheEntryExW(LPCWSTR lpszUrlSearchPattern,DWORD dwFlags,DWORD dwFilter,GROUPID GroupId,LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,LPDWORD lpcbEntryInfo,LPVOID lpGroupAttributes,LPDWORD lpcbGroupAttributes,LPVOID lpReserved) INTERNETAPI_<wininet.h>
FindFirstUrlCacheEntryW(LPCWSTR lpszUrlSearchPattern,LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) INTERNETAPI_<wininet.h>
FindFirstUrlCacheGroup(DWORD dwFlags,DWORD dwFilter,LPVOID lpSearchCondition,DWORD dwSearchCondition,GROUPID * lpGroupId,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
FindFirstVolume(LPSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstVolumeA(LPSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstVolumeMountPoint(LPCSTR lpszRootPathName,LPSTR lpszVolumeMountPoint,DWORD cchBufferLength) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstVolumeMountPointA(LPCSTR lpszRootPathName,LPSTR lpszVolumeMountPoint,DWORD cchBufferLength) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName,LPWSTR lpszVolumeMountPoint,DWORD cchBufferLength) WINBASEAPI HANDLE WINAPI <winbase.h>
FindFirstVolumeW(LPWSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI HANDLE WINAPI <fileapi.h>
FindFrame(LPCWSTR pszTargetName,DWORD dwFlags,IUnknown ** ppunkTargetFrame)virtual HRESULT WINAPI <htiframe.h>
FindFrame(LPCWSTR pszTargetName,IUnknown * ppunkContextFrame,DWORD dwFlags,IUnknown ** ppunkTargetFrame)virtual HRESULT WINAPI <htiframe.h>
FindFrameDownwards(LPCWSTR pszTargetName,DWORD dwFlags,IUnknown ** ppunkTargetFrame)virtual HRESULT WINAPI <htiface.h>
FindFrameInContext(LPCWSTR pszTargetName,IUnknown * punkContextFrame,DWORD dwFlags,IUnknown ** ppunkTargetFrame)virtual HRESULT WINAPI <htiface.h>
FindIndex(int nIndex)DXLISTPOS CDXList<dxtmpl.h>
FindItem(LPRESULTFINDINFO pFindInfo,int * pnFoundIndex)virtual HRESULT WINAPI <mmc.h>
FindItemByLParam(LPARAM lParam,HRESULTITEM * pItemID)virtual HRESULT WINAPI <mmc.h>
FindItemByName(LONG lFlags,BSTR bstrFullItemName,IWiaItem ** ppIWiaItem)virtual HRESULT WINAPI <wia.h>
FindMediaType(LPCSTR rgszTypes,CLIPFORMAT * rgcfTypes)STDAPI <urlmon.h>
FindMediaTypeClass(LPBC pBC,LPCSTR szType,CLSID * pclsID,DWORD reserved)STDAPI <urlmon.h>
FindMimeFromData(LPBC pBC,LPCWSTR pwzUrl,LPVOID pBuffer,DWORD cbSize,LPCWSTR pwzMimeProposed,DWORD dwMimeFlags,LPWSTR * ppwzMimeOut,DWORD dwReserved)STDAPI <urlmon.h>
FindNextChangeNotification(HANDLE hChangeHandle) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindNextFile(HANDLE hFindFile,LPWIN32_FIND_DATAA lpFindFileData) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindNextFileA(HANDLE hFindFile,LPWIN32_FIND_DATAA lpFindFileData) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindNextFileNameW(HANDLE hFindStream,LPDWORD StringLength,PWSTR LinkName) WINBASEAPI WINBOOL APIENTRY <winbase.h>
FindNextFileW(HANDLE hFindFile,LPWIN32_FIND_DATAW lpFindFileData) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindNextFrame(HFRAME hCurrentFrame,LPSTR ProtocolName,LPADDRESS2 lpDestAddress,LPADDRESS2 lpSrcAddress,LPWORD ProtocolOffset,DWORD OriginalFrameNumber,DWORD nHighestFrame) HFRAME WINAPI <netmon.h>
FindNextItem(ImageItemData * item)__inline__ Status Image::<gdiplusimpl.h>
FindNextPrinterChangeNotification(HANDLE hChange,PDWORD pdwChange,LPVOID pPrinterNotifyOptions,LPVOID * ppPrinterNotifyInfo) WINBOOL WINAPI <winspool.h>
FindNextRow(HCHAPTER hChapter,HACCESSOR hAccessor,void * pFindValue,DBCOMPAREOP CompareOp,DBBKMARK cbBookmark,const BYTE * pBookmark,DBROWOFFSET lRowsOffset,DBROWCOUNT cRows,DBCOUNTITEM * pcRowsObtained,HROW ** prghRows)virtual HRESULT WINAPI <oledb.h>
FindNextStreamW(HANDLE hFindStream,LPVOID lpFindStreamData) WINBASEAPI WINBOOL APIENTRY <winbase.h>
FindNextUrlCacheEntry(HANDLE hEnumHandle,LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) BOOLAPI <wininet.h>
FindNextUrlCacheEntryA(HANDLE hEnumHandle,LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) BOOLAPI <wininet.h>
FindNextUrlCacheEntryEx(HANDLE hEnumHandle,LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,LPDWORD lpcbEntryInfo,LPVOID lpGroupAttributes,LPDWORD lpcbGroupAttributes,LPVOID lpReserved) BOOLAPI <wininet.h>
FindNextUrlCacheEntryExA(HANDLE hEnumHandle,LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,LPDWORD lpcbEntryInfo,LPVOID lpGroupAttributes,LPDWORD lpcbGroupAttributes,LPVOID lpReserved) BOOLAPI <wininet.h>
FindNextUrlCacheEntryExW(HANDLE hEnumHandle,LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo,LPDWORD lpcbEntryInfo,LPVOID lpGroupAttributes,LPDWORD lpcbGroupAttributes,LPVOID lpReserved) BOOLAPI <wininet.h>
FindNextUrlCacheEntryW(HANDLE hEnumHandle,LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) BOOLAPI <wininet.h>
FindNextUrlCacheGroup(HANDLE hFind,GROUPID * lpGroupId,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
FindNextVolume(HANDLE hFindVolume,LPSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindNextVolumeA(HANDLE hFindVolume,LPSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindNextVolumeMountPoint(HANDLE hFindVolumeMountPoint,LPSTR lpszVolumeMountPoint,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint,LPSTR lpszVolumeMountPoint,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint,LPWSTR lpszVolumeMountPoint,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindNextVolumeW(HANDLE hFindVolume,LPWSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindNLSString(LCID Locale,DWORD dwFindNLSStringFlags,LPCWSTR lpStringSource,int cchSource,LPCWSTR lpStringValue,int cchValue,LPINT pcchFound) WINBASEAPI int WINAPI <winnls.h>
FindNLSStringEx(LPCWSTR lpLocaleName,DWORD dwFindNLSStringFlags,LPCWSTR lpStringSource,int cchSource,LPCWSTR lpStringValue,int cchValue,LPINT pcchFound,LPNLSVERSIONINFO lpVersionInformation,LPVOID lpReserved,LPARAM sortHandle) WINBASEAPI int WINAPI <winnls.h>
FindOneOf(LPCSTR p1,LPCSTR p2) LPCSTR __cdecl <netmon.h>
FindOrCreateNameCache(LPSTR lpstrName,CACHE_KEY_COMPARE pfnKeyCompare,CACHE_KEY_HASH pfnKeyHash,CACHE_DESTROY_CALLBACK pfnKeyDestroy,CACHE_DESTROY_CALLBACK pfnDataDestroy) FILEHC_EXPORT PNAME_CACHE_CONTEXT WINAPI <filehc.h>
FindPin(BSTR strPinID,IDispatch ** ppUnk)virtual HRESULT WINAPI <control.h>
FindPreviousFrame(HFRAME hCurrentFrame,LPSTR ProtocolName,LPADDRESS2 lpDstAddress,LPADDRESS2 lpSrcAddress,LPWORD ProtocolOffset,DWORD OriginalFrameNumber,DWORD nLowestFrame) HFRAME WINAPI <netmon.h>
FindPropertyInstance(HFRAME hFrame,HPROPERTY hProperty) LPPROPERTYINST WINAPI <netmon.h>
FindPropertyInstanceRestart(HFRAME hFrame,HPROPERTY hProperty,LPPROPERTYINST * lpRestartKey,WINBOOL DirForward) LPPROPERTYINST WINAPI <netmon.h>
FindPropertySheet(MMC_COOKIE cookie,LPCOMPONENT lpComponent,LPDATAOBJECT lpDataObject)virtual HRESULT WINAPI <mmc.h>
FindResource(HMODULE hModule,LPCSTR lpName,LPCSTR lpType) WINBASEAPI HRSRC WINAPI <winbase.h>
FindResourceA(HMODULE hModule,LPCSTR lpName,LPCSTR lpType) WINBASEAPI HRSRC WINAPI <winbase.h>
FindResourceEx(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,WORD wLanguage) WINBASEAPI HRSRC WINAPI <winbase.h>
FindResourceExA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,WORD wLanguage) WINBASEAPI HRSRC WINAPI <winbase.h>
FindResourceExW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,WORD wLanguage) WINBASEAPI HRSRC WINAPI <libloaderapi.h>
FindResourceW(HMODULE hModule,LPCWSTR lpName,LPCWSTR lpType) WINBASEAPI HRSRC WINAPI <winbase.h>
FindString(LPCOLESTR pszFind,MMC_STRING_ID * pStringID)virtual HRESULT WINAPI <mmc.h>
FindStringOrdinal(DWORD dwFindStringOrdinalFlags,LPCWSTR lpStringSource,int cchSource,LPCWSTR lpStringValue,int cchValue,WINBOOL bIgnoreCase) WINBASEAPI int WINAPI <libloaderapi.h>
FindSyncContextFromName(PNAME_CACHE_CONTEXT pNameCache,LPBYTE lpbName,DWORD cbName,CACHE_READ_CALLBACK pfnCallback,LPVOID lpvClientContext,HANDLE hToken,ACCESS_MASK accessMask,FIO_CONTEXT ** ppContext) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FindTerminalPin() HRESULT <msptrmar.h>
FindText(BSTR bstr,__LONG32 cch,__LONG32 Flags,__LONG32 * pLength)virtual HRESULT WINAPI <tom.h>
FindText(OLECHAR * pchFindText,DWORD dwFlags,IMarkupPointer * pIEndMatch,IMarkupPointer * pIEndSearch)virtual HRESULT WINAPI <tom.h>
FindTextEnd(BSTR bstr,__LONG32 cch,__LONG32 Flags,__LONG32 * pLength)virtual HRESULT WINAPI <tom.h>
FindTextFragFromMarkupPointer(IMarkupPointer * pPointerFind,__LONG32 * piFrag,WINBOOL * pfFragFound)virtual HRESULT WINAPI <mshtmlc.h>
FindTextStart(BSTR bstr,__LONG32 cch,__LONG32 Flags,__LONG32 * pLength)virtual HRESULT WINAPI <tom.h>
FindTextW(LPFINDREPLACEW) WINCOMMDLGAPI HWND WINAPI <commdlg.h>
FindTranslatedAssignedResource(n)<portcls.h>
FindTranslatedBusNumber(n)<portcls.h>
FindTranslatedDevicePrivate(n)<portcls.h>
FindTranslatedDeviceSpecific(n)<portcls.h>
FindTranslatedDma(n)<portcls.h>
FindTranslatedInterrupt(n)<portcls.h>
FindTranslatedMemory(n)<portcls.h>
FindTranslatedPort(n)<portcls.h>
FindTranslatedSubAllocateFrom(n)<portcls.h>
FindTravelEntry(IUnknown * punk,LPCITEMIDLIST pidl,ITravelEntry ** ppte)virtual HRESULT WINAPI <shdeprecated.h>
FindTuple(ULONG ulAxisIdentifier,DBORDINAL ulStartingOrdinal,DBCOUNTITEM cMembers,LPCOLESTR * rgpwszMember,ULONG * pulTupleOrdinal)virtual HRESULT WINAPI <oledb.h>
FindUnknownBlobCategories(HBLOB hBlob,const char * pOwnerName,const char * pKnownCategoriesTable[],HBLOB hUnknownCategoriesBlob) DWORD __cdecl <netmon.h>
FindUnknownBlobTags(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pKnownTagsTable[],HBLOB hUnknownTagsBlob) DWORD __cdecl <netmon.h>
FindUntranslatedAssignedResource(n)<portcls.h>
FindUntranslatedBusNumber(n)<portcls.h>
FindUntranslatedDevicePrivate(n)<portcls.h>
FindUntranslatedDeviceSpecific(n)<portcls.h>
FindUntranslatedDma(n)<portcls.h>
FindUntranslatedInterrupt(n)<portcls.h>
FindUntranslatedMemory(n)<portcls.h>
FindUntranslatedPort(n)<portcls.h>
FindUntranslatedSubAllocateFrom(n)<portcls.h>
FindUpstreamInterface(IPin * pPin,REFIID riid,void ** ppvInterface,DWORD dwFlags)virtual HRESULT WINAPI <strmif.h>
FindVolumeClose(HANDLE hFindVolume) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint) WINBASEAPI WINBOOL WINAPI <winbase.h>
FindWindow(LPCSTR lpClassName,LPCSTR lpWindowName) WINUSERAPI HWND WINAPI <winuser.h>
FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName) WINUSERAPI HWND WINAPI <winuser.h>
FindWindowEx(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow) WINUSERAPI HWND WINAPI <winuser.h>
FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow) WINUSERAPI HWND WINAPI <winuser.h>
FindWindowExW(HWND hWndParent,HWND hWndChildAfter,LPCWSTR lpszClass,LPCWSTR lpszWindow) WINUSERAPI HWND WINAPI <winuser.h>
FindWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName) WINUSERAPI HWND WINAPI <winuser.h>
Finish(FINISH_MODE finishMode)virtual HRESULT WINAPI <tapi3if.h>
Finish_AssignFrom(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_AssignTo(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_CleanupLocalNode(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_CleanupRemoteNode(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Clone(IEnumClusCfgIPAddresses ** ppEnumIPAddressesOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Clone(IEnumClusCfgManagedResources ** ppEnumManagedResourcesOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Clone(IEnumClusCfgNetworks ** ppEnumNetworksOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Clone(IEnumClusCfgPartitions ** ppEnumPartitions)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_CommitChanges(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Count(DWORD * pnCountOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Create(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_EvictNotify(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetBindingString(BSTR * pbstrBindingStringOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetClusterConfigInfo(IClusCfgClusterInfo ** ppClusCfgClusterInfoOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetClusterServiceAccountCredentials(IClusCfgCredentials ** ppicccCredentialsOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetClusterVersion(DWORD * pdwNodeHighestVersion,DWORD * pdwNodeLowestVersion)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetCommitMode(ECommitMode * pecmCurrentModeOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetCredentials(BSTR * pbstrUserOut,BSTR * pbstrDomainOut,BSTR * pbstrPasswordOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetDescription(BSTR * pbstrDescriptionOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetDriveLetterMappings(SDriveLetterMapping * pdlmDriveLetterMappingOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetDriveLetterMappings(SDriveLetterMapping * pdlmDriveLetterUsageOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetIdentity(BSTR * pbstrUserOut,BSTR * pbstrDomainOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetIPAddress(ULONG * pulDottedQuadOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetMaxNodeCount(DWORD * pcMaxNodesOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetName(BSTR * pbstrNameOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetNetworkInfo(IClusCfgNetworkInfo ** ppiccniOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetOSVersion(DWORD * pdwMajorVersionOut,DWORD * pdwMinorVersionOut,WORD * pwSuiteMaskOut,BYTE * pbProductTypeOut,BSTR * pbstrCSDVersionOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetPassword(BSTR * pbstrPasswordOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetPrimaryNetworkAddress(IClusCfgIPAddressInfo ** ppIPAddressOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetProcessorInfo(WORD * pwProcessorArchitectureOut,WORD * pwProcessorLevelOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetSize(ULONG * pcMegaBytes)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetSubnetMask(ULONG * pulDottedQuadOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetTypeGUID(GUID * pguidGUIDOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetTypeName(BSTR * pbstrTypeNameOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_GetUID(BSTR * pbstrUIDOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Initialize(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsManaged(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsManagedByDefault(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsMemberOfCluster(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsPrivate(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsPublic(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsQuorumCapable(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_IsQuorumResource(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_JobError(void)virtual HRESULT WINAPI <bits.h>
Finish_JobModification(void)virtual HRESULT WINAPI <bits.h>
Finish_JobTransferred(void)virtual HRESULT WINAPI <bits.h>
Finish_Next(IClusCfgIPAddressInfo ** rgpIPAddressInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Next(IClusCfgManagedResourceInfo ** rgpManagedResourceInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Next(IClusCfgNetworkInfo ** rgpNetworkInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Next(IClusCfgPartitionInfo ** rgpPartitionInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Notify(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_RegisterAdminExtensions(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_Reset(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SendNotifications(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SendStatusReport(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetBindingString(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetCommitMode(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetCredentials(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetDescription(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetDriveLetterMappings(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetIPAddress(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetManaged(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetManagedByDefault(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetName(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetNetworkInfo(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetPrimaryNetworkAddress(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetPrivate(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetPublic(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetQuorumCapable(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetQuorumResource(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_SetSubnetMask(void)virtual HRESULT WINAPI <cluscfgserver.h>
Finish_ShutdownNotify(void)virtual HRESULT WINAPI <iadmw.h>
Finish_SinkNotify(void)virtual HRESULT WINAPI <iadmw.h>
Finish_Skip(void)virtual HRESULT WINAPI <cluscfgserver.h>
FIntervalInInterval(lpiT,lpiS)<penwin.h>
FIntervalXInterval(lpiT,lpiS)<penwin.h>
FIOInitialize(DWORD dwFlags) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FIOReadFile(PFIO_CONTEXT pContext,LPVOID lpBuffer,DWORD BytesToRead,FH_OVERLAPPED * lpo) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FIOReadFileEx(PFIO_CONTEXT pContext,LPVOID lpBuffer,DWORD BytesToRead,DWORD BytesAvailable,FH_OVERLAPPED * lpo,WINBOOL fFinalWrite,WINBOOL fIncludeTerminator) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FIOTerminate(VOID) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FIOWriteFile(PFIO_CONTEXT pContext,LPCVOID lpBuffer,DWORD BytesToWrite,FH_OVERLAPPED * lpo) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FIOWriteFileEx(PFIO_CONTEXT pContext,LPVOID lpBuffer,DWORD BytesToWrite,DWORD BytesAvailable,FH_OVERLAPPED * lpo,WINBOOL fFinalWrite,WINBOOL fIncludeTerminator) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
FireArrivedErrorEvent(IMSMQQueue * pq,HRESULT hrStatus,__LONG32 msgcursor)virtual HRESULT WINAPI <mqoai.h>
FireArrivedEvent(IMSMQQueue * pq,__LONG32 msgcursor)virtual HRESULT WINAPI <mqoai.h>
FireCreationEvent(IWbemClassObject * pNewInstance,IWbemObjectSink * pSink)HRESULT WINAPI <wmiatlprov.h>
FireDeletionEvent(IWbemClassObject * pInstanceToDelete,IWbemObjectSink * pSink)HRESULT WINAPI <wmiatlprov.h>
FireEvent(const MSP_EVENT_INFO * pMspEventInfo)virtual HRESULT WINAPI <tapi3.h>
FireEvent(LONG lCookie,IHTMLEventObj * pEventObject)virtual HRESULT WINAPI <tapi3.h>
FireEventCallBack(LPVOID pEventStructure) static DWORD WINAPI <mspstrm.h>
FireModificationEvent(IWbemClassObject * pOldInstance,IWbemClassObject * pNewInstance,IWbemObjectSink * pSink)HRESULT WINAPI <wmiatlprov.h>
FireOnFilterChangeEvent(void)virtual HRESULT WINAPI <mshtmlc.h>
FireSubscription(IEventSubscription * subscription)virtual HRESULT WINAPI <eventsys.h>
FireVSDebugEvent(PODBC_VS_ARGS) VOID SQL_API <sqlext.h>
First(void)virtual HRESULT WINAPI <mshtmlc.h>
FIRST_IPADDRESS(x)<commctrl.h>
FIRSTBYTE(VALUE) <wdm.h>
FirstSymbolFromGraph(LPSYG,LPSYV,int,LPINT) VOID WINAPI <penwin.h>
FIsAnsi(syv)<penwin.h>
FIsAnsiGesture(syv)<penwin.h>
FIsGesture(syv)<penwin.h>
FIsKanji(syv)<penwin.h>
FIsSelectGesture(syv)<penwin.h>
FIsShape(syv)<penwin.h>
FIsSpecial(syv)<penwin.h>
FIsStdGesture(syv)<penwin.h>
FIsTransmittable(ulPropTag)<wabtags.h>
FIsUniCode(syv)<penwin.h>
FIsVKey(syv)<penwin.h>
FixBrushOrgEx(HDC hdc,int x,int y,LPPOINT ptl) WINGDIAPI WINBOOL WINAPI <wingdi.h>
FLAG_STGMEDIUM_UserFree(ULONG *,FLAG_STGMEDIUM *)void            __RPC_USER <objidl.h>
FLAG_STGMEDIUM_UserMarshal(ULONG *,unsigned char *,FLAG_STGMEDIUM *)unsigned char<objidl.h>
FLAG_STGMEDIUM_UserSize(ULONG *,ULONG,FLAG_STGMEDIUM *)ULONG           __RPC_USER <objidl.h>
FLAG_STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,FLAG_STGMEDIUM *)unsigned char<objidl.h>
FlagOn(_F,_SF) <ntifs.h>
Flags(IN PVOID BusContext,IN OUT PULONG) IN OUT PULONG <xinput.h>
Flags(IN PVOID BusContext,IN OUT PUSB_DEVICE_HANDLE DeviceHandle,IN ULONG) IN ULONG  <xinput.h>
FlashWindow(HWND hWnd,WINBOOL bInvert) WINUSERAPI WINBOOL WINAPI <winuser.h>
FlashWindowEx(PFLASHWINFO pfwi) WINUSERAPI WINBOOL WINAPI <winuser.h>
FlatSB_EnableScrollBar(HWND,int,UINT) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
FlatSB_GetScrollInfo(HWND,int code,LPSCROLLINFO) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
FlatSB_GetScrollPos(HWND,int code) WINCOMMCTRLAPI int WINAPI <commctrl.h>
FlatSB_GetScrollProp(HWND,int propIndex,LPINT) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
FlatSB_GetScrollPropPtr(HWND,int propIndex,PINT_PTR) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
FlatSB_GetScrollRange(HWND,int code,LPINT,LPINT) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
FlatSB_SetScrollInfo(HWND,int code,LPSCROLLINFO,WINBOOL fRedraw) WINCOMMCTRLAPI int WINAPI <commctrl.h>
FlatSB_SetScrollPos(HWND,int code,int pos,WINBOOL fRedraw) WINCOMMCTRLAPI int WINAPI <commctrl.h>
FlatSB_SetScrollProp(HWND,UINT index,INT_PTR newValue,WINBOOL) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
FlatSB_SetScrollRange(HWND,int code,int min,int max,WINBOOL fRedraw) WINCOMMCTRLAPI int WINAPI <commctrl.h>
FlatSB_ShowScrollBar(HWND,int code,WINBOOL) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
Flatten(const Matrix * matrix=NULL,REAL flatness=FlatnessDefault)	Status <gdipluspath.h>
FlattenPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
FloatMax()static inline FLOAT <d2d1helper.h>
FLOATOBJ_Add(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_AddFloat(PFLOATOBJ pf,FLOATL f)<winddi.h>
FLOATOBJ_AddLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_Div(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_DivFloat(PFLOATOBJ pf,FLOATL f)<winddi.h>
FLOATOBJ_DivLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_Equal(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_EqualLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_GetFloat(pf)<winddi.h>
FLOATOBJ_GetFloat(PFLOATOBJ pf)<winddi.h>
FLOATOBJ_GetLong(pf)<winddi.h>
FLOATOBJ_GetLong(PFLOATOBJ pf)<winddi.h>
FLOATOBJ_GreaterThan(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_GreaterThanLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_LessThan(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_LessThanLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_Mul(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_MulFloat(PFLOATOBJ pf,FLOATL f)<winddi.h>
FLOATOBJ_MulLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_Neg(pf)<winddi.h>
FLOATOBJ_Neg(PFLOATOBJ pf)<winddi.h>
FLOATOBJ_SetFloat(PFLOATOBJ pf,FLOATL f)<winddi.h>
FLOATOBJ_SetLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLOATOBJ_Sub(PFLOATOBJ pf,PFLOATOBJ pf1)<winddi.h>
FLOATOBJ_SubFloat(PFLOATOBJ pf,FLOATL f)<winddi.h>
FLOATOBJ_SubLong(PFLOATOBJ pf,LONG l)<winddi.h>
FLockClrVersionCallback()typedef HRESULT<mscoree.h>
FLockClrVersionCallback(void)typedef HRESULT<mscoree.h>
FloodFill(HDC hdc,int x,int y,COLORREF color) WINGDIAPI WINBOOL WINAPI <wingdi.h>
FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback) WINBASEAPI DWORD WINAPI <fibersapi.h>
FlsFree(DWORD dwFlsIndex) WINBASEAPI WINBOOL WINAPI <fibersapi.h>
FlsGetValue(DWORD dwFlsIndex) WINBASEAPI PVOID WINAPI <fibersapi.h>
FlsSetValue(DWORD dwFlsIndex,PVOID lpFlsData) WINBASEAPI WINBOOL WINAPI <fibersapi.h>
FLT_ASSERT(e)<fltuser.h>
FLT_ASSERTMSG()()()
FLT_ASSERTMSG(m, e)<fltuser.h>
FLTAbsTime(at1,at2)<penwin.h>
FLTEAbsTime(at1,at2)<penwin.h>
Flush(FlushIntention intention=FlushIntentionFlush)	VOID <winioctl.h>
Flush(void)virtual HRESULT WINAPI <winioctl.h>
FlushConsoleInputBuffer(HANDLE hConsoleInput) WINBASEAPI WINBOOL WINAPI <wincon.h>
FlushFileBuffers(HANDLE hFile) WINBASEAPI WINBOOL WINAPI <fileapi.h>
FlushInstructionCache(HANDLE hProcess,LPCVOID lpBaseAddress,SIZE_T dwSize) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
FlushIpNetTable(DWORD dwIfIndex) DWORD WINAPI <iphlpapi.h>
FlushIpNetTable2(ADDRESS_FAMILY Family,NET_IFINDEX InterfaceIndex) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
FlushIpPathTable(ADDRESS_FAMILY Family) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
FlushLogBuffers(PVOID pvMarshal,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
FlushLogToLsn(PVOID pvMarshalContext,PCLFS_LSN plsnFlush,PCLFS_LSN plsnLastFlushed,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
FlushPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten,DWORD cSleep) WINBOOL WINAPI <winspool.h>
FlushProcessWriteBuffers(VOID) WINBASEAPI VOID WINAPI <processthreadsapi.h>
FlushTrace(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
FlushTraceA(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
FlushTraceW(TRACEHANDLE TraceHandle,LPCWSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
FlushViewOfFile(LPCVOID lpBaseAddress,SIZE_T dwNumberOfBytesToFlush) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
fMachine(LPCWSTR lpszURI,GUID clsid,BOOL)typedef HRESULT STDAPICALLTYPE IEREGISTERXMLNSFN<mshtmhst.h>
FMExtensionProc(HWND hwnd,WORD wEvent,LONG lParam) LONG WINAPI <wfext.h>
FMExtensionProcW(HWND hwnd,WORD wEvent,LONG lParam) LONG WINAPI <wfext.h>
FmtIdToPropStgName(const FMTID * pfmtid,LPOLESTR oszName) WINOLEAPI <propidl.h>
FNALLOC(fn)<fdi.h>
FNCLOSE(fn)<fdi.h>
FNFCIALLOC(fn)<fci.h>
FNFCICLOSE(fn)<fci.h>
FNFCIDELETE(fn)<fci.h>
FNFCIFILEPLACED(fn)<fci.h>
FNFCIFREE(fn)<fci.h>
FNFCIGETNEXTCABINET(fn)<fci.h>
FNFCIGETOPENINFO(fn)<fci.h>
FNFCIGETTEMPFILE(fn)<fci.h>
FNFCIOPEN(fn)<fci.h>
FNFCIREAD(fn)<fci.h>
FNFCISEEK(fn)<fci.h>
FNFCISTATUS(fn)<fci.h>
FNFCIWRITE(fn)<fci.h>
FNFDIDECRYPT(fn)<fdi.h>
FNFDINOTIFY(fn)<fdi.h>
FNFREE(fn)<fdi.h>
FNOPEN(fn)<fdi.h>
FNREAD(fn)<fdi.h>
FNSEEK(fn)<fdi.h>
FNWRITE(fn)<fdi.h>
Focus(void)virtual HRESULT WINAPI <msimcsdk.h>
FoldString(DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest) WINBASEAPI int WINAPI <winnls.h>
FoldStringA(DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest) WINBASEAPI int WINAPI <winnls.h>
FoldStringW(DWORD dwMapFlags,LPCWCH lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest) WINBASEAPI int WINAPI <stringapiset.h>
Font()__inline__ ::~<ntddvdeo.h>
Font(const Font &)	<ntddvdeo.h>
Font(const FontFamily * family,REAL emSize,INT style,Unit unit)__inline__ ::<ntddvdeo.h>
Font(const FontFamily * family,REAL emSize,INT style=FontStyleRegular,Unit unit=UnitPoint)	<ntddvdeo.h>
Font(const Graphics * graphics)__inline__ REAL ::GetHeight<ntddvdeo.h>
Font(const Graphics * graphics,LOGFONTA * logfontA)__inline__ Status ::GetLogA<ntddvdeo.h>
Font(const Graphics * graphics,LOGFONTW * logfontW)__inline__ Status ::GetLogW<ntddvdeo.h>
Font(const WCHAR * familyName,REAL emSize,INT style,Unit unit,const FontCollection * fontCollection)__inline__ ::<ntddvdeo.h>
Font(const WCHAR * familyName,REAL emSize,INT style=FontStyleRegular,Unit unit=UnitPoint,const FontCollection * fontCollection=NULL)	<ntddvdeo.h>
Font(FontFamily * family)__inline__ Status ::GetFamily<ntddvdeo.h>
Font(GpFont * font,Status status)	<ntddvdeo.h>
Font(HDC hdc)__inline__ ::<ntddvdeo.h>
Font(HDC hdc,const LOGFONTA * logfont)__inline__ ::<ntddvdeo.h>
Font(HDC hdc,const LOGFONTW * logfont)__inline__ ::<ntddvdeo.h>
Font(HDC hdc,HFONT hfont)__inline__ ::<ntddvdeo.h>
Font(REAL dpi)__inline__ REAL ::GetHeight<ntddvdeo.h>
Font(Status newStatus)	Status updateStatus<ntddvdeo.h>
FontCollection()	virtual ~<gdiplusheaders.h>
FontCollection(const FontCollection &)	<gdiplusheaders.h>
FontCollection(INT numSought,FontFamily * families,INT * numFound)__inline__ Status ::GetFamilies<gdiplusheaders.h>
FontCollection(Status newStatus)	Status updateStatus<gdiplusheaders.h>
FontFamily()__inline__ ::~<wincon.h>
FontFamily(const FontFamily &)	<wincon.h>
FontFamily(const WCHAR * name,const FontCollection * fontCollection)__inline__ ::<wincon.h>
FontFamily(const WCHAR * name,const FontCollection * fontCollection=NULL)	<wincon.h>
FontFamily(GpFontFamily * fontFamily,Status status)	<wincon.h>
FontFamily(INT style)__inline__ BOOL ::IsStyleAvailable<wincon.h>
FontFamily(Status newStatus)	Status updateStatus<wincon.h>
FontFamily(WCHAR name[LF_FACESIZE],LANGID language)__inline__ Status ::GetFamilyName<wincon.h>
FontFamily(WCHAR name[LF_FACESIZE],LANGID language=LANG_NEUTRAL)	Status GetFamilyName<wincon.h>
FONTOBJ_cGetAllGlyphHandles(FONTOBJ * pfo,HGLYPH * phg)<winddi.h>
FONTOBJ_cGetGlyphs(FONTOBJ * pfo,ULONG iMode,ULONG cGlyph,HGLYPH * phg,PVOID * ppvGlyph)<winddi.h>
FONTOBJ_pfdg(FONTOBJ * pfo)<winddi.h>
FONTOBJ_pifi(FONTOBJ * pfo)<winddi.h>
FONTOBJ_pjOpenTypeTablePointer(FONTOBJ * pfo,ULONG ulTag,ULONG * pcjTable)<winddi.h>
FONTOBJ_pQueryGlyphAttrs(FONTOBJ * pfo,ULONG iMode)<winddi.h>
FONTOBJ_pvTrueTypeFontFile(FONTOBJ * pfo,ULONG * pcjFile)<winddi.h>
FONTOBJ_pwszFontFilePaths(FONTOBJ * pfo,ULONG * pcwc)<winddi.h>
FONTOBJ_pxoGetXform(FONTOBJ * pfo)<winddi.h>
FONTOBJ_vGetInfo(FONTOBJ * pfo,ULONG cjSize,FONTINFO * pfi)<winddi.h>
FONTSIZE(n)<olectl.h>
ForceLog(void)virtual HRESULT WINAPI <comsvcs.h>
ForceTransactionToAbort(void)virtual HRESULT WINAPI <comsvcs.h>
Forget(void)virtual HRESULT WINAPI <txdtc.h>
ForgetLogRecord(void)virtual HRESULT WINAPI <comsvcs.h>
ForgetRequest(XACTUOW * pNewUOW)virtual HRESULT WINAPI <txcoord.h>
FormatByteFlags(LPSTR string,DWORD ByteValue,DWORD BitMask) DWORD WINAPIV <netmon.h>
FormatDwordFlags(LPSTR string,DWORD DwordValue,DWORD BitMask) DWORD WINAPIV <netmon.h>
FormatLabeledByteSet(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatLabeledByteSetAsFlags(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatLabeledDwordSet(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatLabeledDwordSetAsFlags(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatLabeledWordSet(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatLabeledWordSetAsFlags(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatMessage(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPSTR lpBuffer,DWORD nSize,va_list * Arguments) WINBASEAPI DWORD WINAPI <winbase.h>
FormatMessageA(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPSTR lpBuffer,DWORD nSize,va_list * Arguments) WINBASEAPI DWORD WINAPI <winbase.h>
FormatMessageW(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPWSTR lpBuffer,DWORD nSize,va_list * Arguments) WINBASEAPI DWORD WINAPI <winbase.h>
FormatPropertyDataAsByte(LPPROPERTYINST lpPropertyInst,DWORD Base) VOID WINAPIV <netmon.h>
FormatPropertyDataAsDword(LPPROPERTYINST lpPropertyInst,DWORD Base) VOID WINAPIV <netmon.h>
FormatPropertyDataAsHexString(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatPropertyDataAsInt64(LPPROPERTYINST lpPropertyInst,DWORD Base) VOID WINAPIV <netmon.h>
FormatPropertyDataAsString(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatPropertyDataAsTime(LPPROPERTYINST lpPropertyInst) VOID WINAPIV <netmon.h>
FormatPropertyDataAsWord(LPPROPERTYINST lpPropertyInst,DWORD Base) VOID WINAPIV <netmon.h>
FormatPropertyInstance(LPPROPERTYINST lpPropertyInst,...) DWORD WINAPIV <netmon.h>
FormatTimeAsString(SYSTEMTIME * time,LPSTR string) LPSTR WINAPIV <netmon.h>
FormatWordFlags(LPSTR string,DWORD WordValue,DWORD BitMask) DWORD WINAPIV <netmon.h>
Forward(BSTR bstrForwardToURI)virtual HRESULT WINAPI <ws2atm.h>
Forward(IMessage ** ppMsg)virtual HRESULT WINAPI <ws2atm.h>
Forward(ITForwardInformation * pForwardInfo,ITBasicCallControl * pCall)virtual HRESULT WINAPI <ws2atm.h>
Forward(void)virtual HRESULT WINAPI <ws2atm.h>
FORWARD_WM_ACTIVATE(hwnd,state,hwndActDeact,fMinimized,fn)<windowsx.h>
FORWARD_WM_ACTIVATEAPP(hwnd,fActivate,dwThreadId,fn)<windowsx.h>
FORWARD_WM_ACTIVATEAPP(hwnd,fActivate,htaskActDeact,fn)<windowsx.h>
FORWARD_WM_ASKCBFORMATNAME(hwnd,cchMax,rgchName,fn)<windowsx.h>
FORWARD_WM_CANCELMODE(hwnd,fn)<windowsx.h>
FORWARD_WM_CHANGECBCHAIN(hwnd,hwndRemove,hwndNext,fn)<windowsx.h>
FORWARD_WM_CHAR(hwnd,ch,cRepeat,fn)<windowsx.h>
FORWARD_WM_CHARTOITEM(hwnd,ch,hwndListBox,iCaret,fn)<windowsx.h>
FORWARD_WM_CHILDACTIVATE(hwnd,fn)<windowsx.h>
FORWARD_WM_CLEAR(hwnd,fn)<windowsx.h>
FORWARD_WM_CLOSE(hwnd,fn)<windowsx.h>
FORWARD_WM_COMMAND(hwnd,id,hwndCtl,codeNotify,fn)<windowsx.h>
FORWARD_WM_COMMNOTIFY(hwnd,cid,flags,fn)<windowsx.h>
FORWARD_WM_COMPACTING(hwnd,compactRatio,fn)<windowsx.h>
FORWARD_WM_COMPAREITEM(hwnd,lpCompareItem,fn)<windowsx.h>
FORWARD_WM_CONTEXTMENU(hwnd,hwndContext,xPos,yPos,fn)<windowsx.h>
FORWARD_WM_COPY(hwnd,fn)<windowsx.h>
FORWARD_WM_COPYDATA(hwnd,hwndFrom,pcds,fn)<windowsx.h>
FORWARD_WM_CREATE(hwnd,lpCreateStruct,fn)<windowsx.h>
FORWARD_WM_CTLCOLOR(hwnd,hdc,hwndChild,type,fn)
FORWARD_WM_CTLCOLORBTN(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CTLCOLORDLG(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CTLCOLOREDIT(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CTLCOLORLISTBOX(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CTLCOLORMSGBOX(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CTLCOLORSCROLLBAR(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CTLCOLORSTATIC(hwnd,hdc,hwndChild,fn)<windowsx.h>
FORWARD_WM_CUT(hwnd,fn)<windowsx.h>
FORWARD_WM_DEADCHAR(hwnd,ch,cRepeat,fn)<windowsx.h>
FORWARD_WM_DELETEITEM(hwnd,lpDeleteItem,fn)<windowsx.h>
FORWARD_WM_DESTROY(hwnd,fn)<windowsx.h>
FORWARD_WM_DESTROYCLIPBOARD(hwnd,fn)<windowsx.h>
FORWARD_WM_DEVICECHANGE(hwnd,uEvent,dwEventData,fn)<windowsx.h>
FORWARD_WM_DEVMODECHANGE(hwnd,lpszDeviceName,fn)<windowsx.h>
FORWARD_WM_DISPLAYCHANGE(hwnd,bitsPerPixel,cxScreen,cyScreen,fn)<windowsx.h>
FORWARD_WM_DRAWCLIPBOARD(hwnd,fn)<windowsx.h>
FORWARD_WM_DRAWITEM(hwnd,lpDrawItem,fn)<windowsx.h>
FORWARD_WM_DROPFILES(hwnd,hdrop,fn)<windowsx.h>
FORWARD_WM_ENABLE(hwnd,fEnable,fn)<windowsx.h>
FORWARD_WM_ENDSESSION(hwnd,fEnding,fn)<windowsx.h>
FORWARD_WM_ENTERIDLE(hwnd,source,hwndSource,fn)<windowsx.h>
FORWARD_WM_ERASEBKGND(hwnd,hdc,fn)<windowsx.h>
FORWARD_WM_FONTCHANGE(hwnd,fn)<windowsx.h>
FORWARD_WM_GETDLGCODE(hwnd,lpmsg,fn)<windowsx.h>
FORWARD_WM_GETFONT(hwnd,fn)<windowsx.h>
FORWARD_WM_GETMINMAXINFO(hwnd,lpMinMaxInfo,fn)<windowsx.h>
FORWARD_WM_GETTEXT(hwnd,cchTextMax,lpszText,fn)<windowsx.h>
FORWARD_WM_GETTEXTLENGTH(hwnd,fn)<windowsx.h>
FORWARD_WM_HOTKEY(hwnd,idHotKey,fuModifiers,vk,fn)<windowsx.h>
FORWARD_WM_HSCROLL(hwnd,hwndCtl,code,pos,fn)<windowsx.h>
FORWARD_WM_HSCROLLCLIPBOARD(hwnd,hwndCBViewer,code,pos,fn)<windowsx.h>
FORWARD_WM_ICONERASEBKGND(hwnd,hdc,fn)<windowsx.h>
FORWARD_WM_INITDIALOG(hwnd,hwndFocus,lParam,fn)<windowsx.h>
FORWARD_WM_INITMENU(hwnd,hMenu,fn)<windowsx.h>
FORWARD_WM_INITMENUPOPUP(hwnd,hMenu,item,fSystemMenu,fn)<windowsx.h>
FORWARD_WM_KEYDOWN(hwnd,vk,cRepeat,flags,fn)<windowsx.h>
FORWARD_WM_KEYUP(hwnd,vk,cRepeat,flags,fn)<windowsx.h>
FORWARD_WM_KILLFOCUS(hwnd,hwndNewFocus,fn)<windowsx.h>
FORWARD_WM_LBUTTONDOWN(hwnd,fDoubleClick,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_LBUTTONUP(hwnd,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_MBUTTONDOWN(hwnd,fDoubleClick,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_MBUTTONUP(hwnd,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_MDIACTIVATE(hwnd,fActive,hwndActivate,hwndDeactivate,fn)<windowsx.h>
FORWARD_WM_MDICASCADE(hwnd,cmd,fn)<windowsx.h>
FORWARD_WM_MDICREATE(hwnd,lpmcs,fn)<windowsx.h>
FORWARD_WM_MDIDESTROY(hwnd,hwndDestroy,fn)<windowsx.h>
FORWARD_WM_MDIGETACTIVE(hwnd,fn)<windowsx.h>
FORWARD_WM_MDIICONARRANGE(hwnd,fn)<windowsx.h>
FORWARD_WM_MDIMAXIMIZE(hwnd,hwndMaximize,fn)<windowsx.h>
FORWARD_WM_MDINEXT(hwnd,hwndCur,fPrev,fn)<windowsx.h>
FORWARD_WM_MDIRESTORE(hwnd,hwndRestore,fn)<windowsx.h>
FORWARD_WM_MDISETMENU(hwnd,fRefresh,hmenuFrame,hmenuWindow,fn)<windowsx.h>
FORWARD_WM_MDITILE(hwnd,cmd,fn)<windowsx.h>
FORWARD_WM_MEASUREITEM(hwnd,lpMeasureItem,fn)<windowsx.h>
FORWARD_WM_MENUCHAR(hwnd,ch,flags,hmenu,fn)<windowsx.h>
FORWARD_WM_MENUSELECT(hwnd,hmenu,item,hmenuPopup,flags,fn)<windowsx.h>
FORWARD_WM_MOUSEACTIVATE(hwnd,hwndTopLevel,codeHitTest,msg,fn)<windowsx.h>
FORWARD_WM_MOUSEMOVE(hwnd,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_MOUSEWHEEL(hwnd,xPos,yPos,zDelta,fwKeys,fn)<windowsx.h>
FORWARD_WM_MOVE(hwnd,x,y,fn)<windowsx.h>
FORWARD_WM_NCACTIVATE(hwnd,fActive,hwndActDeact,fMinimized,fn)<windowsx.h>
FORWARD_WM_NCCALCSIZE(hwnd,fCalcValidRects,lpcsp,fn)<windowsx.h>
FORWARD_WM_NCCREATE(hwnd,lpCreateStruct,fn)<windowsx.h>
FORWARD_WM_NCDESTROY(hwnd,fn)<windowsx.h>
FORWARD_WM_NCHITTEST(hwnd,x,y,fn)<windowsx.h>
FORWARD_WM_NCLBUTTONDOWN(hwnd,fDoubleClick,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NCLBUTTONUP(hwnd,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NCMBUTTONDOWN(hwnd,fDoubleClick,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NCMBUTTONUP(hwnd,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NCMOUSEMOVE(hwnd,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NCPAINT(hwnd,hrgn,fn)<windowsx.h>
FORWARD_WM_NCRBUTTONDOWN(hwnd,fDoubleClick,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NCRBUTTONUP(hwnd,x,y,codeHitTest,fn)<windowsx.h>
FORWARD_WM_NEXTDLGCTL(hwnd,hwndSetFocus,fNext,fn)<windowsx.h>
FORWARD_WM_NOTIFY(hwnd,idFrom,pnmhdr,fn)<commctrl.h>
FORWARD_WM_PAINT(hwnd,fn)<windowsx.h>
FORWARD_WM_PAINTCLIPBOARD(hwnd,hwndCBViewer,lpPaintStruct,fn)<windowsx.h>
FORWARD_WM_PALETTECHANGED(hwnd,hwndPaletteChange,fn)<windowsx.h>
FORWARD_WM_PALETTEISCHANGING(hwnd,hwndPaletteChange,fn)<windowsx.h>
FORWARD_WM_PARENTNOTIFY(hwnd,msg,hwndChild,idChild,fn)<windowsx.h>
FORWARD_WM_PASTE(hwnd,fn)<windowsx.h>
FORWARD_WM_POWER(hwnd,code,fn)<windowsx.h>
FORWARD_WM_QUERYDRAGICON(hwnd,fn)<windowsx.h>
FORWARD_WM_QUERYENDSESSION(hwnd,fn)<windowsx.h>
FORWARD_WM_QUERYNEWPALETTE(hwnd,fn)<windowsx.h>
FORWARD_WM_QUERYOPEN(hwnd,fn)<windowsx.h>
FORWARD_WM_QUEUESYNC(hwnd,fn)<windowsx.h>
FORWARD_WM_QUIT(hwnd,exitCode,fn)<windowsx.h>
FORWARD_WM_RBUTTONDOWN(hwnd,fDoubleClick,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_RBUTTONUP(hwnd,x,y,keyFlags,fn)<windowsx.h>
FORWARD_WM_RENDERALLFORMATS(hwnd,fn)<windowsx.h>
FORWARD_WM_RENDERFORMAT(hwnd,fmt,fn)<windowsx.h>
FORWARD_WM_SETCURSOR(hwnd,hwndCursor,codeHitTest,msg,fn)<windowsx.h>
FORWARD_WM_SETFOCUS(hwnd,hwndOldFocus,fn)<windowsx.h>
FORWARD_WM_SETFONT(hwnd,hfont,fRedraw,fn)<windowsx.h>
FORWARD_WM_SETREDRAW(hwnd,fRedraw,fn)<windowsx.h>
FORWARD_WM_SETTEXT(hwnd,lpszText,fn)<windowsx.h>
FORWARD_WM_SHOWWINDOW(hwnd,fShow,status,fn)<windowsx.h>
FORWARD_WM_SIZE(hwnd,state,cx,cy,fn)<windowsx.h>
FORWARD_WM_SIZECLIPBOARD(hwnd,hwndCBViewer,lprc,fn)<windowsx.h>
FORWARD_WM_SPOOLERSTATUS(hwnd,status,cJobInQueue,fn)<windowsx.h>
FORWARD_WM_SYSCHAR(hwnd,ch,cRepeat,fn)<windowsx.h>
FORWARD_WM_SYSCOLORCHANGE(hwnd,fn)<windowsx.h>
FORWARD_WM_SYSCOMMAND(hwnd,cmd,x,y,fn)<windowsx.h>
FORWARD_WM_SYSDEADCHAR(hwnd,ch,cRepeat,fn)<windowsx.h>
FORWARD_WM_SYSKEYDOWN(hwnd,vk,cRepeat,flags,fn)<windowsx.h>
FORWARD_WM_SYSKEYUP(hwnd,vk,cRepeat,flags,fn)<windowsx.h>
FORWARD_WM_SYSTEMERROR(hwnd,errCode,fn)<windowsx.h>
FORWARD_WM_TIMECHANGE(hwnd,fn)<windowsx.h>
FORWARD_WM_TIMER(hwnd,id,fn)<windowsx.h>
FORWARD_WM_UNDO(hwnd,fn)<windowsx.h>
FORWARD_WM_VKEYTOITEM(hwnd,vk,hwndListBox,iCaret,fn)<windowsx.h>
FORWARD_WM_VSCROLL(hwnd,hwndCtl,code,pos,fn)<windowsx.h>
FORWARD_WM_VSCROLLCLIPBOARD(hwnd,hwndCBViewer,code,pos,fn)<windowsx.h>
FORWARD_WM_WINDOWPOSCHANGED(hwnd,lpwpos,fn)<windowsx.h>
FORWARD_WM_WINDOWPOSCHANGING(hwnd,lpwpos,fn)<windowsx.h>
FORWARD_WM_WININICHANGE(hwnd,lpszSectionName,fn)<windowsx.h>
ForwardScan(double dwSpeed)virtual HRESULT WINAPI <strmif.h>
ForwardViewMsg(UINT uMsg,WPARAM wParam,LPARAM lParam)virtual LRESULT WINAPI <shdeprecated.h>
FOURTH_IPADDRESS(x)<commctrl.h>
FOURTHBYTE(VALUE)<wdm.h>
FPenUpX(x)<penwin.h>
FPropCompareProp(LPSPropValue lpSPropValue1,ULONG ulRelOp,LPSPropValue lpSPropValue2) STDAPI_<wabutil.h>
FPropContainsProp(LPSPropValue lpSPropValueDst,LPSPropValue lpSPropValueSrc,ULONG ulFuzzyLevel) STDAPI_<wabutil.h>
FPropExists(LPMAPIPROP lpMapiProp,ULONG ulPropTag) STDAPI_<wabutil.h>
FrameRect(HDC hDC,CONST RECT * lprc,HBRUSH hbr) WINUSERAPI int WINAPI <winuser.h>
FrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbr,int w,int h) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Free(BYTE * pBuffer)virtual HRESULT WINAPI <strmif.h>
Free(ICallFrame * pframeArgsDest,ICallFrameWalker * pWalkerDestFree,ICallFrameWalker * pWalkerCopy,DWORD freeFlags,ICallFrameWalker * pWalkerFree,DWORD nullFlags)virtual HRESULT WINAPI <strmif.h>
FREE_POOL(_PoolPtr)<classpnp.h>
freeaddrinfo(LPADDRINFO pAddrInfo) WINSOCK_API_LINKAGE void WSAAPI <wspiapi.h>
FreeAddrInfoEx(PADDRINFOEXA pAddrInfo)WINSOCK_API_LINKAGE void WSAAPI <ws2tcpip.h>
FreeAddrInfoExA(PADDRINFOEXA pAddrInfo)WINSOCK_API_LINKAGE void WSAAPI <ws2tcpip.h>
FreeAddrInfoExW(PADDRINFOEXW pAddrInfo)WINSOCK_API_LINKAGE void WSAAPI <ws2tcpip.h>
FreeAddrInfoW(PADDRINFOW pAddrInfo) WINSOCK_API_LINKAGE void WSAAPI <ws2tcpip.h>
FreeADsMem(LPVOID pMem) WINBOOL WINAPI <adshlp.h>
FreeADsStr(LPWSTR pStr) WINBOOL WINAPI <adshlp.h>
FreeArrays()	VOID <gdiplustypes.h>
FreeAssoc(CAssoc * pAssoc)void CDXMap<dxtmpl.h>
FreeAssoc(CAssoc *) void <dxtmpl.h>
FreeAxisInfo(DBCOUNTITEM cAxes,MDAXISINFO * rgAxisInfo)virtual HRESULT WINAPI <oledb.h>
FreeBuffer(PVOID pvData)virtual HRESULT WINAPI <scesvc.h>
FreeColumn(PADS_SEARCH_COLUMN pSearchColumn)virtual HRESULT WINAPI <iads.h>
FreeCommandTree(DBCOMMANDTREE ** ppRoot)virtual HRESULT WINAPI <cmdtree.h>
FreeConnections(Connections * connections) NAPAPI VOID WINAPI <naputil.h>
FreeConsole(VOID) WINBASEAPI WINBOOL WINAPI <wincon.h>
FreeContextBuffer(void * pvContextBuffer) SECURITY_STATUS WINAPI <sspi.h>
FreeCountedString(CountedString * countedString) NAPAPI VOID WINAPI <naputil.h>
FreeCredentialsHandle(PCredHandle phCredential) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
FreeDataChain() void <dxtmpl.h>
FreeDDElParam(UINT msg,LPARAM lParam) WINBOOL WINAPI <dde.h>
FreeDtcHelper(void) void __cdecl <dtchelp.h>
FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST pHashes) WINADVAPI VOID WINAPI <winefs.h>
FreeEnvironmentStrings(LPCH penv) WINBASEAPI WINBOOL WINAPI <processenv.h>
FreeEnvironmentStringsA(LPCH penv) WINBASEAPI WINBOOL WINAPI <processenv.h>
FreeEnvironmentStringsW(LPWCH penv) WINBASEAPI WINBOOL WINAPI <processenv.h>
FreeEventItem(MSPEVENTITEM * pEventItemToFree)WINBOOL <mspaddr.h>
FreeEventParams(__LONG32 lEvCode,LONG_PTR lParam1,LONG_PTR lParam2)virtual HRESULT WINAPI <control.h>
FreeExtra()void CDXArray<dxtmpl.h>
FreeFixupInfo(FixupInfo * fixupInfo) NAPAPI VOID WINAPI <naputil.h>
FreeGPOList(PGROUP_POLICY_OBJECTA pGPOList) USERENVAPI WINBOOL WINAPI <userenv.h>
FreeGPOListA(PGROUP_POLICY_OBJECTA pGPOList) USERENVAPI WINBOOL WINAPI <userenv.h>
FreeGPOListW(PGROUP_POLICY_OBJECTW pGPOList) USERENVAPI WINBOOL WINAPI <userenv.h>
FreeIDListArray(PIDLIST_RELATIVE * ppidls,UINT cItems) __forceinline void <shobjidl.h>
FreeIDListArrayChild(PITEMID_CHILD * ppidls,UINT cItems) __forceinline void <shobjidl.h>
FreeIDListArrayFull(PIDLIST_ABSOLUTE * ppidls,UINT cItems) __forceinline void <shobjidl.h>
FreeInheritedFromArray(PINHERITED_FROMW pInheritArray,USHORT AceCnt,PFN_OBJECT_MGR_FUNCTS pfnArray) WINADVAPI DWORD WINAPI <aclapi.h>
FreeIsolationInfo(IsolationInfo * isolationInfo) NAPAPI VOID WINAPI <naputil.h>
FreeIsolationInfoEx(IsolationInfoEx * isolationInfo) NAPAPI VOID WINAPI <naputil.h>
FreeIStreamMemoryPtr(LPSTREAM pStrm,LPBYTE pMem)virtual HRESULT WINAPI <scardssp.h>
FreeKnownFolderDefinitionFields(KNOWNFOLDER_DEFINITION * pKFD) __forceinline void <shobjidl.h>
FreeLibrary(HMODULE hLibModule) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
FreeLibrary32W(DWORD hLibModule) DWORD WINAPI <wownt16.h>
FreeLibraryAndExitThread(HMODULE hLibModule,DWORD dwExitCode) WINBASEAPI DECLSPEC_NORETURN VOID WINAPI <libloaderapi.h>
FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HMODULE mod) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
FreeMemory(LPVOID pMem)virtual HRESULT WINAPI <wmiutils.h>
FreeMemory(LPVOID ptr) extern VOID WINAPI <wmiutils.h>
FreeMibTable(PVOID Memory) VOID NETIOAPI_API_ <netioapi.h>
FreeModule(hLibModule)<winbase.h>
FreeMUILibrary(HMODULE hResModule) WINBOOL WINAPI <muiload.h>
FreeNapComponentRegistrationInfoArray(UINT16 count,NapComponentRegistrationInfo ** info) NAPAPI VOID WINAPI <naputil.h>
FreeNetworkSoH(NetworkSoH * networkSoh) NAPAPI VOID WINAPI <naputil.h>
FreeNode(CNode * pNode)void CDXList<dxtmpl.h>
FreeNode(CNode *) void <dxtmpl.h>
FreeObject(HOBJECTHEAP hObjectHeap,LPVOID ObjectMemory) extern LPVOID WINAPI <nmsupp.h>
FreePadrlist(LPADRLIST lpAdrlist) STDAPI_<wabutil.h>
FreeParam(ULONG iparam,DWORD freeFlags,ICallFrameWalker * pWalkerFree,DWORD nullFlags)virtual HRESULT WINAPI <callobj.h>
FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo) WINBOOL WINAPI <winspool.h>
FreePrivateData(PrivateData * privateData) NAPAPI VOID WINAPI <naputil.h>
FreeProcInstance(lpProc)<winbase.h>
FreePropVariantArray(ULONG cVariants,PROPVARIANT * rgvars) WINOLEAPI <propidl.h>
FreeProws(LPSRowSet lpRows) STDAPI_<wabutil.h>
FreeReservedLog(PVOID pvMarshal,ULONG cReservedRecords,PLONGLONG pcbAdjustment)WINBOOL WINAPI <clfsw32.h>
FreeResource(const RESID __MIDL_0020)virtual HRESULT WINAPI <libloaderapi.h>
FreeResource(HGLOBAL hResData) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
FreeRoleSid(PSID psid)void ROLDLLEXP ROLEAPI <mdbrole.h>
FreeSid(PSID pSid) WINADVAPI PVOID WINAPI <securitybaseapi.h>
FreeSoH(SoH * soh) NAPAPI VOID WINAPI <naputil.h>
FreeSoHAttributeValue(SoHAttributeType type,SoHAttributeValue * value) NAPAPI VOID WINAPI <naputil.h>
FreeSurface(DWORD_PTR dwID)virtual HRESULT WINAPI <strmif.h>
FreeSystemHealthAgentState(SystemHealthAgentState * state) NAPAPI VOID WINAPI <naputil.h>
FreeUserPhysicalPages(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR PageArray) WINBASEAPI WINBOOL WINAPI <winbase.h>
Freeze(__LONG32 * pCount)virtual HRESULT WINAPI <tom.h>
Freeze(WINBOOL fFreeze)virtual HRESULT WINAPI <tom.h>
FreezeVirtualCaretPos(WINBOOL fReCompute)virtual HRESULT WINAPI <mshtmlc.h>
FRK_INIT(f)<svrapi.h>
FRoleSid(PSID psid)WINBOOL ROLDLLEXP ROLEAPI <mdbrole.h>
FromBITMAPINFO(const BITMAPINFO * gdiBitmapInfo,VOID * gdiBitmapData)__inline__ Bitmap<gdiplusimpl.h>
FromDirectDrawSurface7(IDirectDrawSurface7 * surface)__inline__ Bitmap<gdiplusimpl.h>
FromFile(const WCHAR * filename,BOOL useEmbeddedColorManagement)__inline__ Image<gdiplusimpl.h>
FromFile(const WCHAR * filename,BOOL useEmbeddedColorManagement=FALSE)	static Image<gdiplusimpl.h>
FromHBITMAP(HBITMAP hbm,HPALETTE hpal)__inline__ Bitmap<gdiplusimpl.h>
FromHDC(HDC hdc)	static Graphics<gdiplusgraphics.h>
FromHDC(HDC hdc,HANDLE hdevice)	static Graphics<gdiplusgraphics.h>
FromHex(n)<vfw.h>
FromHICON(HICON icon)__inline__ Bitmap<gdiplusimpl.h>
FromHRGN(HRGN hrgn)__inline__ Region<gdiplusimpl.h>
FromHWND(HWND hwnd,BOOL icm=FALSE)	static Graphics<gdiplusgraphics.h>
FromImage(Image * image)	static Graphics<gdiplusgraphics.h>
FromResource(HINSTANCE hInstance,const WCHAR * bitmapName)__inline__ Bitmap<gdiplusimpl.h>
FromStream(IStream * stream,BOOL useEmbeddedColorManagement)__inline__ Image<gdiplusimpl.h>
FromStream(IStream * stream,BOOL useEmbeddedColorManagement=FALSE)	static Image<gdiplusimpl.h>
FRSCONN_GET_PRIORITY(_options_)<ntdsapi.h>
FSIGN(x)<xmath.h>
FsRtlAcknowledgeEcp(IN PVOID EcpContext)<ntifs.h>
FsRtlAcquireFileExclusive(IN PFILE_OBJECT FileObject)<ntifs.h>
FsRtlAddBaseMcbEntry(IN PBASE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG Lbn,IN LONGLONG SectorCount)<ntifs.h>
FsRtlAddBaseMcbEntryEx(IN PBASE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG Lbn,IN LONGLONG SectorCount)<ntifs.h>
FsRtlAddLargeMcbEntry(IN PLARGE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG Lbn,IN LONGLONG SectorCount)<ntifs.h>
FsRtlAddMcbEntry(IN PMCB Mcb,IN VBN Vbn,IN LBN Lbn,IN ULONG SectorCount)<ntifs.h>
FsRtlAddToTunnelCache(IN PTUNNEL Cache,IN ULONGLONG DirectoryKey,IN PUNICODE_STRING ShortName,IN PUNICODE_STRING LongName,IN BOOLEAN KeyByShortName,IN ULONG DataLength,IN PVOID Data)<ntifs.h>
FsRtlAllocateExtraCreateParameter(IN LPCGUID EcpType,IN ULONG SizeOfContext,IN FSRTL_ALLOCATE_ECP_FLAGS Flags,IN PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback OPTIONAL,IN ULONG PoolTag,OUT PVOID * EcpContext)<ntifs.h>
FsRtlAllocateExtraCreateParameterFromLookasideList(IN LPCGUID EcpType,IN ULONG SizeOfContext,IN FSRTL_ALLOCATE_ECP_FLAGS Flags,IN PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback OPTIONAL,IN OUT PVOID LookasideList,OUT PVOID * EcpContext)<ntifs.h>
FsRtlAllocateExtraCreateParameterList(IN FSRTL_ALLOCATE_ECPLIST_FLAGS Flags,OUT PECP_LIST * EcpList)<ntifs.h>
FsRtlAllocateFileLock(IN PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine OPTIONAL,IN PUNLOCK_ROUTINE UnlockRoutine OPTIONAL)<ntifs.h>
FsRtlAllocatePool(IN POOL_TYPE PoolType,IN ULONG NumberOfBytes)<ntifs.h>
FsRtlAllocatePoolWithQuota(IN POOL_TYPE PoolType,IN ULONG NumberOfBytes)<ntifs.h>
FsRtlAllocatePoolWithQuotaTag(IN POOL_TYPE PoolType,IN ULONG NumberOfBytes,IN ULONG Tag)<ntifs.h>
FsRtlAllocatePoolWithTag(IN POOL_TYPE PoolType,IN ULONG NumberOfBytes,IN ULONG Tag)<ntifs.h>
FsRtlAllocateResource(VOID)<ntifs.h>
FsRtlAreNamesEqual(IN PCUNICODE_STRING Name1,IN PCUNICODE_STRING Name2,IN BOOLEAN IgnoreCase,IN PCWCH UpcaseTable OPTIONAL)<ntifs.h>
FsRtlAreThereCurrentFileLocks(FL)<ntifs.h>
FsRtlAreThereCurrentOrInProgressFileLocks(IN PFILE_LOCK FileLock)<ntifs.h>
FsRtlAreVolumeStartupApplicationsComplete(VOID)<ntifs.h>
FsRtlBalanceReads(IN PDEVICE_OBJECT TargetDevice)<ntifs.h>
FsRtlCancellableWaitForMultipleObjects(IN ULONG Count,IN PVOID ObjectArray[],IN WAIT_TYPE WaitType,IN PLARGE_INTEGER Timeout OPTIONAL,IN PKWAIT_BLOCK WaitBlockArray OPTIONAL,IN PIRP Irp OPTIONAL)<ntifs.h>
FsRtlCancellableWaitForSingleObject(IN PVOID Object,IN PLARGE_INTEGER Timeout OPTIONAL,IN PIRP Irp OPTIONAL)<ntifs.h>
FsRtlChangeBackingFileObject(IN PFILE_OBJECT CurrentFileObject OPTIONAL,IN PFILE_OBJECT NewFileObject,IN FSRTL_CHANGE_BACKING_TYPE ChangeBackingType,IN ULONG Flags)<ntifs.h>
FsRtlCheckLockForReadAccess(IN PFILE_LOCK FileLock,IN PIRP Irp)<ntifs.h>
FsRtlCheckLockForWriteAccess(IN PFILE_LOCK FileLock,IN PIRP Irp)<ntifs.h>
FsRtlCheckOplock(IN POPLOCK Oplock,IN PIRP Irp,IN PVOID Context,IN POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine OPTIONAL,IN POPLOCK_FS_PREPOST_IRP PostIrpRoutine OPTIONAL)<ntifs.h>
FsRtlCheckOplockEx(IN POPLOCK Oplock,IN PIRP Irp,IN ULONG Flags,IN PVOID Context OPTIONAL,IN POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine OPTIONAL,IN POPLOCK_FS_PREPOST_IRP PostIrpRoutine OPTIONAL)<ntifs.h>
FsRtlCompleteRequest(IRP,STATUS)<ntifs.h>
FsRtlCopyRead(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN BOOLEAN Wait,IN ULONG LockKey,OUT PVOID Buffer,OUT PIO_STATUS_BLOCK IoStatus,IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
FsRtlCopyWrite(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN BOOLEAN Wait,IN ULONG LockKey,IN PVOID Buffer,OUT PIO_STATUS_BLOCK IoStatus,IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
FsRtlCreateSectionForDataScan(OUT PHANDLE SectionHandle,OUT PVOID * SectionObject,OUT PLARGE_INTEGER SectionFileSize OPTIONAL,IN PFILE_OBJECT FileObject,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PLARGE_INTEGER MaximumSize OPTIONAL,IN ULONG SectionPageProtection,IN ULONG AllocationAttributes,IN ULONG Flags)<ntifs.h>
FsRtlCurrentBatchOplock(IN POPLOCK Oplock)<ntifs.h>
FsRtlCurrentOplock(IN POPLOCK Oplock)<ntifs.h>
FsRtlCurrentOplockH(IN POPLOCK Oplock)<ntifs.h>
FsRtlDecrementLockRequestsInProgress(FL)<ntifs.h>
FsRtlDeleteExtraCreateParameterLookasideList(IN OUT PVOID Lookaside,IN FSRTL_ECP_LOOKASIDE_FLAGS Flags)<ntifs.h>
FsRtlDeleteKeyFromTunnelCache(IN PTUNNEL Cache,IN ULONGLONG DirectoryKey)<ntifs.h>
FsRtlDeleteTunnelCache(IN PTUNNEL Cache)<ntifs.h>
FsRtlDeregisterUncProvider(IN HANDLE Handle)<ntifs.h>
FsRtlDissectDbcs(IN ANSI_STRING Name,OUT PANSI_STRING FirstPart,OUT PANSI_STRING RemainingPart)<ntifs.h>
FsRtlDissectName(IN UNICODE_STRING Name,OUT PUNICODE_STRING FirstPart,OUT PUNICODE_STRING RemainingPart)<ntifs.h>
FsRtlDoesDbcsContainWildCards(IN PANSI_STRING Name)<ntifs.h>
FsRtlDoesNameContainWildCards(IN PUNICODE_STRING Name)<ntifs.h>
FsRtlFastCheckLockForRead(IN PFILE_LOCK FileLock,IN PLARGE_INTEGER FileOffset,IN PLARGE_INTEGER Length,IN ULONG Key,IN PFILE_OBJECT FileObject,IN PVOID Process)<ntifs.h>
FsRtlFastCheckLockForWrite(IN PFILE_LOCK FileLock,IN PLARGE_INTEGER FileOffset,IN PLARGE_INTEGER Length,IN ULONG Key,IN PFILE_OBJECT FileObject,IN PVOID Process)<ntifs.h>
FsRtlFastLock(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)<ntifs.h>
FsRtlFastUnlockAll(IN PFILE_LOCK FileLock,IN PFILE_OBJECT FileObject,IN PEPROCESS Process,IN PVOID Context OPTIONAL)<ntifs.h>
FsRtlFastUnlockAllByKey(IN PFILE_LOCK FileLock,IN PFILE_OBJECT FileObject,IN PEPROCESS Process,IN ULONG Key,IN PVOID Context OPTIONAL)<ntifs.h>
FsRtlFastUnlockSingle(IN PFILE_LOCK FileLock,IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN PLARGE_INTEGER Length,IN PEPROCESS Process,IN ULONG Key,IN PVOID Context OPTIONAL,IN BOOLEAN AlreadySynchronized)<ntifs.h>
FsRtlFindExtraCreateParameter(IN PECP_LIST EcpList,IN LPCGUID EcpType,OUT PVOID * EcpContext OPTIONAL,OUT ULONG * EcpContextSize OPTIONAL)<ntifs.h>
FsRtlFindInTunnelCache(IN PTUNNEL Cache,IN ULONGLONG DirectoryKey,IN PUNICODE_STRING Name,OUT PUNICODE_STRING ShortName,OUT PUNICODE_STRING LongName,IN OUT PULONG DataLength,OUT PVOID Data)<ntifs.h>
FsRtlFreeExtraCreateParameter(IN PVOID EcpContext)<ntifs.h>
FsRtlFreeExtraCreateParameterList(IN PECP_LIST EcpList)<ntifs.h>
FsRtlFreeFileLock(IN PFILE_LOCK FileLock)<ntifs.h>
FsRtlGetEcpListFromIrp(IN PIRP Irp,OUT PECP_LIST * EcpList OPTIONAL)<ntifs.h>
FsRtlGetFileSize(IN PFILE_OBJECT FileObject,OUT PLARGE_INTEGER FileSize)<ntifs.h>
FsRtlGetNextBaseMcbEntry(IN PBASE_MCB Mcb,IN ULONG RunIndex,OUT PLONGLONG Vbn,OUT PLONGLONG Lbn,OUT PLONGLONG SectorCount)<ntifs.h>
FsRtlGetNextExtraCreateParameter(IN PECP_LIST EcpList,IN PVOID CurrentEcpContext OPTIONAL,OUT LPGUID NextEcpType OPTIONAL,OUT PVOID * NextEcpContext OPTIONAL,OUT ULONG * NextEcpContextSize OPTIONAL)<ntifs.h>
FsRtlGetNextFileLock(IN PFILE_LOCK FileLock,IN BOOLEAN Restart)<ntifs.h>
FsRtlGetNextLargeMcbEntry(IN PLARGE_MCB Mcb,IN ULONG RunIndex,OUT PLONGLONG Vbn,OUT PLONGLONG Lbn,OUT PLONGLONG SectorCount)<ntifs.h>
FsRtlGetNextMcbEntry(IN PMCB Mcb,IN ULONG RunIndex,OUT PVBN Vbn,OUT PLBN Lbn,OUT PULONG SectorCount)<ntifs.h>
FsRtlGetPerFileContextPointer(_fo)<ntifs.h>
FsRtlGetPerStreamContextPointer(FO)<ntifs.h>
FsRtlGetVirtualDiskNestingLevel(IN PDEVICE_OBJECT DeviceObject,OUT PULONG NestingLevel,OUT PULONG NestingFlags OPTIONAL)<ntifs.h>
FsRtlIncrementCcFastMdlReadWait(VOID)<ntifs.h>
FsRtlIncrementCcFastReadNotPossible(VOID)<ntifs.h>
FsRtlIncrementCcFastReadNoWait(VOID)<ntifs.h>
FsRtlIncrementCcFastReadResourceMiss(VOID)<ntifs.h>
FsRtlIncrementCcFastReadWait(VOID)<ntifs.h>
FsRtlIncrementLockRequestsInProgress(FL)<ntifs.h>
FsRtlInitExtraCreateParameterLookasideList(IN OUT PVOID Lookaside,IN FSRTL_ECP_LOOKASIDE_FLAGS Flags,IN SIZE_T Size,IN ULONG Tag)<ntifs.h>
FsRtlInitializeBaseMcb(IN PBASE_MCB Mcb,IN POOL_TYPE PoolType)<ntifs.h>
FsRtlInitializeBaseMcbEx(IN PBASE_MCB Mcb,IN POOL_TYPE PoolType,IN USHORT Flags)<ntifs.h>
FsRtlInitializeExtraCreateParameter(IN PECP_HEADER Ecp,IN ULONG EcpFlags,IN PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback OPTIONAL,IN ULONG TotalSize,IN LPCGUID EcpType,IN PVOID ListAllocatedFrom OPTIONAL)<ntifs.h>
FsRtlInitializeExtraCreateParameterList(IN OUT PECP_LIST EcpList)<ntifs.h>
FsRtlInitializeFileLock(IN PFILE_LOCK FileLock,IN PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine OPTIONAL,IN PUNLOCK_ROUTINE UnlockRoutine OPTIONAL)<ntifs.h>
FsRtlInitializeLargeMcb(IN PLARGE_MCB Mcb,IN POOL_TYPE PoolType)<ntifs.h>
FsRtlInitializeMcb(IN PMCB Mcb,IN POOL_TYPE PoolType)<ntifs.h>
FsRtlInitializeOplock(IN OUT POPLOCK Oplock)<ntifs.h>
FsRtlInitializeTunnelCache(IN PTUNNEL Cache)<ntifs.h>
FsRtlInitPerFileContext( _fc, _owner, _inst, _cb)<ntifs.h>
FsRtlInitPerFileObjectContext(_fc, _owner, _inst)<ntifs.h>
FsRtlInitPerStreamContext(PSC, O, I, FC)<ntifs.h>
FsRtlInsertExtraCreateParameter(IN OUT PECP_LIST EcpList,IN OUT PVOID EcpContext)<ntifs.h>
FsRtlInsertPerFileContext(IN PVOID * PerFileContextPointer,IN PFSRTL_PER_FILE_CONTEXT Ptr)<ntifs.h>
FsRtlInsertPerFileObjectContext(IN PFILE_OBJECT FileObject,IN PFSRTL_PER_FILEOBJECT_CONTEXT Ptr)<ntifs.h>
FsRtlInsertPerStreamContext(IN PFSRTL_ADVANCED_FCB_HEADER PerStreamContext,IN PFSRTL_PER_STREAM_CONTEXT Ptr)<ntifs.h>
FsRtlIsAnsiCharacterLegal(C,FLAGS)<ntifs.h>
FsRtlIsAnsiCharacterLegalFat(C, WILD)<ntifs.h>
FsRtlIsAnsiCharacterLegalHpfs(C, WILD)<ntifs.h>
FsRtlIsAnsiCharacterLegalNtfs(C, WILD)<ntifs.h>
FsRtlIsAnsiCharacterLegalNtfsStream(C,WILD_OK)<ntifs.h>
FsRtlIsAnsiCharacterWild(C)<ntifs.h>
FsRtlIsDbcsInExpression(IN PANSI_STRING Expression,IN PANSI_STRING Name)<ntifs.h>
FsRtlIsEcpAcknowledged(IN PVOID EcpContext)<ntifs.h>
FsRtlIsEcpFromUserMode(IN PVOID EcpContext)<ntifs.h>
FsRtlIsFatDbcsLegal(IN ANSI_STRING DbcsName,IN BOOLEAN WildCardsPermissible,IN BOOLEAN PathNamePermissible,IN BOOLEAN LeadingBackslashPermissible)<ntifs.h>
FsRtlIsHpfsDbcsLegal(IN ANSI_STRING DbcsName,IN BOOLEAN WildCardsPermissible,IN BOOLEAN PathNamePermissible,IN BOOLEAN LeadingBackslashPermissible)<ntifs.h>
FsRtlIsLeadDbcsCharacter(DBCS_CHAR)<ntifs.h>
FsRtlIsNameInExpression(IN PUNICODE_STRING Expression,IN PUNICODE_STRING Name,IN BOOLEAN IgnoreCase,IN PWCHAR UpcaseTable OPTIONAL)<ntifs.h>
FsRtlIsNtstatusExpected(IN NTSTATUS Ntstatus)<ntifs.h>
FsRtlIsPagingFile(IN PFILE_OBJECT FileObject)<ntifs.h>
FsRtlIsTotalDeviceFailure(IN NTSTATUS Status)<ntifs.h>
FsRtlIsUnicodeCharacterWild(C)<ntifs.h>
FsRtlLogCcFlushError(IN PUNICODE_STRING FileName,IN PDEVICE_OBJECT DeviceObject,IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN NTSTATUS FlushError,IN ULONG Flags)<ntifs.h>
FsRtlLookupBaseMcbEntry(IN PBASE_MCB Mcb,IN LONGLONG Vbn,OUT PLONGLONG Lbn OPTIONAL,OUT PLONGLONG SectorCountFromLbn OPTIONAL,OUT PLONGLONG StartingLbn OPTIONAL,OUT PLONGLONG SectorCountFromStartingLbn OPTIONAL,OUT PULONG Index OPTIONAL)<ntifs.h>
FsRtlLookupLargeMcbEntry(IN PLARGE_MCB Mcb,IN LONGLONG Vbn,OUT PLONGLONG Lbn OPTIONAL,OUT PLONGLONG SectorCountFromLbn OPTIONAL,OUT PLONGLONG StartingLbn OPTIONAL,OUT PLONGLONG SectorCountFromStartingLbn OPTIONAL,OUT PULONG Index OPTIONAL)<ntifs.h>
FsRtlLookupLastBaseMcbEntry(IN PBASE_MCB Mcb,OUT PLONGLONG Vbn,OUT PLONGLONG Lbn)<ntifs.h>
FsRtlLookupLastBaseMcbEntryAndIndex(IN PBASE_MCB OpaqueMcb,IN OUT PLONGLONG LargeVbn,IN OUT PLONGLONG LargeLbn,IN OUT PULONG Index)<ntifs.h>
FsRtlLookupLastLargeMcbEntry(IN PLARGE_MCB Mcb,OUT PLONGLONG Vbn,OUT PLONGLONG Lbn)<ntifs.h>
FsRtlLookupLastLargeMcbEntryAndIndex(IN PLARGE_MCB OpaqueMcb,OUT PLONGLONG LargeVbn,OUT PLONGLONG LargeLbn,OUT PULONG Index)<ntifs.h>
FsRtlLookupLastMcbEntry(IN PMCB Mcb,OUT PVBN Vbn,OUT PLBN Lbn)<ntifs.h>
FsRtlLookupMcbEntry(IN PMCB Mcb,IN VBN Vbn,OUT PLBN Lbn,OUT PULONG SectorCount OPTIONAL,OUT PULONG Index)<ntifs.h>
FsRtlLookupPerFileContext(IN PVOID * PerFileContextPointer,IN PVOID OwnerId OPTIONAL,IN PVOID InstanceId OPTIONAL)<ntifs.h>
FsRtlLookupPerFileObjectContext(IN PFILE_OBJECT FileObject,IN PVOID OwnerId OPTIONAL,IN PVOID InstanceId OPTIONAL)<ntifs.h>
FsRtlLookupPerStreamContext(_sc, _oid, _iid)<ntifs.h>
FsRtlLookupPerStreamContextInternal(IN PFSRTL_ADVANCED_FCB_HEADER StreamContext,IN PVOID OwnerId OPTIONAL,IN PVOID InstanceId OPTIONAL)<ntifs.h>
FsRtlMdlReadComplete(IN PFILE_OBJECT FileObject,IN PMDL MdlChain)<ntifs.h>
FsRtlMdlReadCompleteDev(IN PFILE_OBJECT FileObject,IN PMDL MdlChain,IN PDEVICE_OBJECT DeviceObject OPTIONAL)<ntifs.h>
FsRtlMdlReadDev(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN ULONG LockKey,OUT PMDL * MdlChain,OUT PIO_STATUS_BLOCK IoStatus,IN PDEVICE_OBJECT DeviceObject OPTIONAL)<ntifs.h>
FsRtlMdlWriteComplete(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN PMDL MdlChain)<ntifs.h>
FsRtlMdlWriteCompleteDev(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN PMDL MdlChain,IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
FsRtlMupGetProviderIdFromName(IN PUNICODE_STRING pProviderName,OUT PULONG32 pProviderId)<ntifs.h>
FsRtlMupGetProviderInfoFromFileObject(IN PFILE_OBJECT pFileObject,IN ULONG Level,OUT PVOID pBuffer,IN OUT PULONG pBufferSize)<ntifs.h>
FsRtlNormalizeNtstatus(IN NTSTATUS Exception,IN NTSTATUS GenericException)<ntifs.h>
FsRtlNotifyChangeDirectory(IN PNOTIFY_SYNC NotifySync,IN PVOID FsContext,IN PSTRING FullDirectoryName,IN PLIST_ENTRY NotifyList,IN BOOLEAN WatchTree,IN ULONG CompletionFilter,IN PIRP NotifyIrp)<ntifs.h>
FsRtlNotifyCleanup(IN PNOTIFY_SYNC NotifySync,IN PLIST_ENTRY NotifyList,IN PVOID FsContext)<ntifs.h>
FsRtlNotifyCleanupAll(IN PNOTIFY_SYNC NotifySync,IN PLIST_ENTRY NotifyList)<ntifs.h>
FsRtlNotifyFilterChangeDirectory(IN PNOTIFY_SYNC NotifySync,IN PLIST_ENTRY NotifyList,IN PVOID FsContext,IN PSTRING FullDirectoryName,IN BOOLEAN WatchTree,IN BOOLEAN IgnoreBuffer,IN ULONG CompletionFilter,IN PIRP NotifyIrp OPTIONAL,IN PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback OPTIONAL,IN PSECURITY_SUBJECT_CONTEXT SubjectContext OPTIONAL,IN PFILTER_REPORT_CHANGE FilterCallback OPTIONAL)<ntifs.h>
FsRtlNotifyFilterReportChange(IN PNOTIFY_SYNC NotifySync,IN PLIST_ENTRY NotifyList,IN PSTRING FullTargetName,IN USHORT TargetNameOffset,IN PSTRING StreamName OPTIONAL,IN PSTRING NormalizedParentName OPTIONAL,IN ULONG FilterMatch,IN ULONG Action,IN PVOID TargetContext OPTIONAL,IN PVOID FilterContext OPTIONAL)<ntifs.h>
FsRtlNotifyFullChangeDirectory(IN PNOTIFY_SYNC NotifySync,IN PLIST_ENTRY NotifyList,IN PVOID FsContext,IN PSTRING FullDirectoryName,IN BOOLEAN WatchTree,IN BOOLEAN IgnoreBuffer,IN ULONG CompletionFilter,IN PIRP NotifyIrp OPTIONAL,IN PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback OPTIONAL,IN PSECURITY_SUBJECT_CONTEXT SubjectContext OPTIONAL)<ntifs.h>
FsRtlNotifyFullReportChange(IN PNOTIFY_SYNC NotifySync,IN PLIST_ENTRY NotifyList,IN PSTRING FullTargetName,IN USHORT TargetNameOffset,IN PSTRING StreamName OPTIONAL,IN PSTRING NormalizedParentName OPTIONAL,IN ULONG FilterMatch,IN ULONG Action,IN PVOID TargetContext OPTIONAL)<ntifs.h>
FsRtlNotifyInitializeSync(IN PNOTIFY_SYNC * NotifySync)<ntifs.h>
FsRtlNotifyStreamFileObject(IN struct _FILE_OBJECT * StreamFileObject,IN struct _DEVICE_OBJECT * DeviceObjectHint OPTIONAL,IN FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType,IN BOOLEAN SafeToRecurse)<ntifs.h>
FsRtlNotifyUninitializeSync(IN PNOTIFY_SYNC * NotifySync)<ntifs.h>
FsRtlNotifyVolumeEvent(IN PFILE_OBJECT FileObject,IN ULONG EventCode)<ntifs.h>
FsRtlNotifyVolumeEventEx(IN PFILE_OBJECT FileObject,IN ULONG EventCode,IN PTARGET_DEVICE_CUSTOM_NOTIFICATION Event)<ntifs.h>
FsRtlNumberOfRunsInBaseMcb(IN PBASE_MCB Mcb)<ntifs.h>
FsRtlNumberOfRunsInLargeMcb(IN PLARGE_MCB Mcb)<ntifs.h>
FsRtlNumberOfRunsInMcb(IN PMCB Mcb)<ntifs.h>
FsRtlOplockBreakH(IN POPLOCK Oplock,IN PIRP Irp,IN ULONG Flags,IN PVOID Context OPTIONAL,IN POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine OPTIONAL,IN POPLOCK_FS_PREPOST_IRP PostIrpRoutine OPTIONAL)<ntifs.h>
FsRtlOplockBreakToNone(IN OUT POPLOCK Oplock,IN PIO_STACK_LOCATION IrpSp OPTIONAL,IN PIRP Irp,IN PVOID Context OPTIONAL,IN POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine OPTIONAL,IN POPLOCK_FS_PREPOST_IRP PostIrpRoutine OPTIONAL)<ntifs.h>
FsRtlOplockBreakToNoneEx(IN OUT POPLOCK Oplock,IN PIRP Irp,IN ULONG Flags,IN PVOID Context OPTIONAL,IN POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine OPTIONAL,IN POPLOCK_FS_PREPOST_IRP PostIrpRoutine OPTIONAL)<ntifs.h>
FsRtlOplockFsctrl(IN POPLOCK Oplock,IN PIRP Irp,IN ULONG OpenCount)<ntifs.h>
FsRtlOplockFsctrlEx(IN POPLOCK Oplock,IN PIRP Irp,IN ULONG OpenCount,IN ULONG Flags)<ntifs.h>
FsRtlOplockIsFastIoPossible(IN POPLOCK Oplock)<ntifs.h>
FsRtlOplockIsSharedRequest(IN PIRP Irp)<ntifs.h>
FsRtlOplockKeysEqual(IN PFILE_OBJECT Fo1 OPTIONAL,IN PFILE_OBJECT Fo2 OPTIONAL)<ntifs.h>
FsRtlPostPagingFileStackOverflow(IN PVOID Context,IN PKEVENT Event,IN PFSRTL_STACK_OVERFLOW_ROUTINE StackOverflowRoutine)<ntifs.h>
FsRtlPostStackOverflow(IN PVOID Context,IN PKEVENT Event,IN PFSRTL_STACK_OVERFLOW_ROUTINE StackOverflowRoutine)<ntifs.h>
FsRtlPrepareMdlWriteDev(IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN ULONG Length,IN ULONG LockKey,OUT PMDL * MdlChain,OUT PIO_STATUS_BLOCK IoStatus,IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
FsRtlPrivateLock(IN PFILE_LOCK FileLock,IN PFILE_OBJECT FileObject,IN PLARGE_INTEGER FileOffset,IN PLARGE_INTEGER Length,IN PEPROCESS Process,IN ULONG Key,IN BOOLEAN FailImmediately,IN BOOLEAN ExclusiveLock,OUT PIO_STATUS_BLOCK IoStatus,IN PIRP Irp OPTIONAL,IN PVOID Context,IN BOOLEAN AlreadySynchronized)<ntifs.h>
FsRtlProcessFileLock(IN PFILE_LOCK FileLock,IN PIRP Irp,IN PVOID Context OPTIONAL)<ntifs.h>
FsRtlQueryMaximumVirtualDiskNestingLevel(VOID)<ntifs.h>
FsRtlRegisterFileSystemFilterCallbacks(IN struct _DRIVER_OBJECT * FilterDriverObject,IN PFS_FILTER_CALLBACKS Callbacks)<ntifs.h>
FsRtlRegisterUncProvider(OUT PHANDLE MupHandle,IN PUNICODE_STRING RedirectorDeviceName,IN BOOLEAN MailslotsSupported)<ntifs.h>
FsRtlRegisterUncProviderEx(OUT PHANDLE MupHandle,IN PUNICODE_STRING RedirDevName,IN PDEVICE_OBJECT DeviceObject,IN ULONG Flags)<ntifs.h>
FsRtlReleaseFile(IN PFILE_OBJECT FileObject)<ntifs.h>
FsRtlRemoveBaseMcbEntry(IN PBASE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG SectorCount)<ntifs.h>
FsRtlRemoveDotsFromPath(IN OUT PWSTR OriginalString,IN USHORT PathLength,OUT USHORT * NewLength)<ntifs.h>
FsRtlRemoveExtraCreateParameter(IN OUT PECP_LIST EcpList,IN LPCGUID EcpType,OUT PVOID * EcpContext,OUT ULONG * EcpContextSize OPTIONAL)<ntifs.h>
FsRtlRemoveLargeMcbEntry(IN PLARGE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG SectorCount)<ntifs.h>
FsRtlRemoveMcbEntry(IN PMCB Mcb,IN VBN Vbn,IN ULONG SectorCount)<ntifs.h>
FsRtlRemovePerFileContext(IN PVOID * PerFileContextPointer,IN PVOID OwnerId OPTIONAL,IN PVOID InstanceId OPTIONAL)<ntifs.h>
FsRtlRemovePerFileObjectContext(IN PFILE_OBJECT FileObject,IN PVOID OwnerId OPTIONAL,IN PVOID InstanceId OPTIONAL)<ntifs.h>
FsRtlRemovePerStreamContext(IN PFSRTL_ADVANCED_FCB_HEADER StreamContext,IN PVOID OwnerId OPTIONAL,IN PVOID InstanceId OPTIONAL)<ntifs.h>
FsRtlResetBaseMcb(IN PBASE_MCB Mcb)<ntifs.h>
FsRtlResetLargeMcb(IN PLARGE_MCB Mcb,IN BOOLEAN SelfSynchronized)<ntifs.h>
FsRtlSetEcpListIntoIrp(IN OUT PIRP Irp,IN PECP_LIST EcpList)<ntifs.h>
FsRtlSetupAdvancedHeader(IN PVOID AdvHdr,IN PFAST_MUTEX FMutex)<ntifs.h>
FsRtlSetupAdvancedHeaderEx( _advhdr, _fmutx, _fctxptr )<ntifs.h>
FsRtlSplitBaseMcb(IN PBASE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG Amount)<ntifs.h>
FsRtlSplitLargeMcb(IN PLARGE_MCB Mcb,IN LONGLONG Vbn,IN LONGLONG Amount)<ntifs.h>
FsRtlSupportsPerFileContexts(_fo)<ntifs.h>
FsRtlSupportsPerStreamContexts(FO)<ntifs.h>
FsRtlTeardownPerFileContexts(IN PVOID * PerFileContextPointer)<ntifs.h>
FsRtlTeardownPerStreamContexts(IN PFSRTL_ADVANCED_FCB_HEADER AdvancedHeader)<ntifs.h>
FsRtlTestAnsiCharacter(C, DEFAULT_RET, WILD_OK, FLAGS)<ntifs.h>
FsRtlTruncateBaseMcb(IN PBASE_MCB Mcb,IN LONGLONG Vbn)<ntifs.h>
FsRtlTruncateLargeMcb(IN PLARGE_MCB Mcb,IN LONGLONG Vbn)<ntifs.h>
FsRtlTruncateMcb(IN PMCB Mcb,IN VBN Vbn)<ntifs.h>
FsRtlUninitializeBaseMcb(IN PBASE_MCB Mcb)<ntifs.h>
FsRtlUninitializeFileLock(IN PFILE_LOCK FileLock)<ntifs.h>
FsRtlUninitializeLargeMcb(IN PLARGE_MCB Mcb)<ntifs.h>
FsRtlUninitializeMcb(IN PMCB Mcb)<ntifs.h>
FsRtlUninitializeOplock(IN OUT POPLOCK Oplock)<ntifs.h>
FsRtlValidateReparsePointBuffer(IN ULONG BufferLength,IN PREPARSE_DATA_BUFFER ReparseBuffer)<ntifs.h>
FtAddFt(FILETIME ftAddend1,FILETIME ftAddend2) STDAPI_<wabutil.h>
FtgRegisterIdleRoutine(PFNIDLE lpfnIdle,LPVOID lpvIdleParam,short priIdle,ULONG csecIdle,USHORT iroIdle) STDAPI_<wabutil.h>
FtMulDw(DWORD ftMultiplier,FILETIME ftMultiplicand) STDAPI_<wabutil.h>
FtMulDwDw(DWORD ftMultiplicand,DWORD ftMultiplier) STDAPI_<wabutil.h>
FtNegFt(FILETIME ft) STDAPI_<wabutil.h>
FtpCommand(HINTERNET hConnect,WINBOOL fExpectResponse,DWORD dwFlags,LPCSTR lpszCommand,DWORD_PTR dwContext,HINTERNET * phFtpCommand) BOOLAPI <wininet.h>
FtpCommandA(HINTERNET hConnect,WINBOOL fExpectResponse,DWORD dwFlags,LPCSTR lpszCommand,DWORD_PTR dwContext,HINTERNET * phFtpCommand) BOOLAPI <wininet.h>
FtpCommandW(HINTERNET hConnect,WINBOOL fExpectResponse,DWORD dwFlags,LPCWSTR lpszCommand,DWORD_PTR dwContext,HINTERNET * phFtpCommand) BOOLAPI <wininet.h>
FtpCreateDirectory(HINTERNET hConnect,LPCSTR lpszDirectory) BOOLAPI <wininet.h>
FtpCreateDirectoryA(HINTERNET hConnect,LPCSTR lpszDirectory) BOOLAPI <wininet.h>
FtpCreateDirectoryW(HINTERNET hConnect,LPCWSTR lpszDirectory) BOOLAPI <wininet.h>
FtpDeleteFile(HINTERNET hConnect,LPCSTR lpszFileName) BOOLAPI <wininet.h>
FtpDeleteFileA(HINTERNET hConnect,LPCSTR lpszFileName) BOOLAPI <wininet.h>
FtpDeleteFileW(HINTERNET hConnect,LPCWSTR lpszFileName) BOOLAPI <wininet.h>
FtpFindFirstFile(HINTERNET hConnect,LPCSTR lpszSearchFile,LPWIN32_FIND_DATAA lpFindFileData,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
FtpFindFirstFileA(HINTERNET hConnect,LPCSTR lpszSearchFile,LPWIN32_FIND_DATAA lpFindFileData,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
FtpFindFirstFileW(HINTERNET hConnect,LPCWSTR lpszSearchFile,LPWIN32_FIND_DATAW lpFindFileData,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
FtpGetCurrentDirectory(HINTERNET hConnect,LPSTR lpszCurrentDirectory,LPDWORD lpdwCurrentDirectory) BOOLAPI <wininet.h>
FtpGetCurrentDirectoryA(HINTERNET hConnect,LPSTR lpszCurrentDirectory,LPDWORD lpdwCurrentDirectory) BOOLAPI <wininet.h>
FtpGetCurrentDirectoryW(HINTERNET hConnect,LPWSTR lpszCurrentDirectory,LPDWORD lpdwCurrentDirectory) BOOLAPI <wininet.h>
FtpGetFile(HINTERNET hConnect,LPCSTR lpszRemoteFile,LPCSTR lpszNewFile,WINBOOL fFailIfExists,DWORD dwFlagsAndAttributes,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpGetFileA(HINTERNET hConnect,LPCSTR lpszRemoteFile,LPCSTR lpszNewFile,WINBOOL fFailIfExists,DWORD dwFlagsAndAttributes,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpGetFileEx(HINTERNET hFtpSession,LPCSTR lpszRemoteFile,LPCWSTR lpszNewFile,WINBOOL fFailIfExists,DWORD dwFlagsAndAttributes,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpGetFileSize(HINTERNET hFile,LPDWORD lpdwFileSizeHigh) INTERNETAPI_<wininet.h>
FtpGetFileW(HINTERNET hConnect,LPCWSTR lpszRemoteFile,LPCWSTR lpszNewFile,WINBOOL fFailIfExists,DWORD dwFlagsAndAttributes,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpOpenFile(HINTERNET hConnect,LPCSTR lpszFileName,DWORD dwAccess,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
FtpOpenFileA(HINTERNET hConnect,LPCSTR lpszFileName,DWORD dwAccess,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
FtpOpenFileW(HINTERNET hConnect,LPCWSTR lpszFileName,DWORD dwAccess,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
FtpPutFile(HINTERNET hConnect,LPCSTR lpszLocalFile,LPCSTR lpszNewRemoteFile,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpPutFileA(HINTERNET hConnect,LPCSTR lpszLocalFile,LPCSTR lpszNewRemoteFile,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpPutFileEx(HINTERNET hFtpSession,LPCWSTR lpszLocalFile,LPCSTR lpszNewRemoteFile,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpPutFileW(HINTERNET hConnect,LPCWSTR lpszLocalFile,LPCWSTR lpszNewRemoteFile,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
FtpRemoveDirectory(HINTERNET hConnect,LPCSTR lpszDirectory) BOOLAPI <wininet.h>
FtpRemoveDirectoryA(HINTERNET hConnect,LPCSTR lpszDirectory) BOOLAPI <wininet.h>
FtpRemoveDirectoryW(HINTERNET hConnect,LPCWSTR lpszDirectory) BOOLAPI <wininet.h>
FtpRenameFile(HINTERNET hConnect,LPCSTR lpszExisting,LPCSTR lpszNew) BOOLAPI <wininet.h>
FtpRenameFileA(HINTERNET hConnect,LPCSTR lpszExisting,LPCSTR lpszNew) BOOLAPI <wininet.h>
FtpRenameFileW(HINTERNET hConnect,LPCWSTR lpszExisting,LPCWSTR lpszNew) BOOLAPI <wininet.h>
FtpSetCurrentDirectory(HINTERNET hConnect,LPCSTR lpszDirectory) BOOLAPI <wininet.h>
FtpSetCurrentDirectoryA(HINTERNET hConnect,LPCSTR lpszDirectory) BOOLAPI <wininet.h>
FtpSetCurrentDirectoryW(HINTERNET hConnect,LPCWSTR lpszDirectory) BOOLAPI <wininet.h>
FtSubFt(FILETIME ftMinuend,FILETIME ftSubtrahend) STDAPI_<wabutil.h>
FULLHWND_32(h16)<wownt32.h>
Fvec32s1_COMP(lt)<fvec.h>
Fvec32s1_COMP(op)<fvec.h>
Fvec32s1_SELECT(lt)<fvec.h>
Fvec32s1_SELECT(op)<fvec.h>
Fvec32s4_COMP(lt)<fvec.h>
Fvec32s4_COMP(op)<fvec.h>
Fvec32s4_SELECT(lt)<fvec.h>
Fvec32s4_SELECT(op)<fvec.h>
FWPM_CALLOUT_CHANGE_CALLBACK0(void * context,const FWPM_CALLOUT_CHANGE0 * change)typedef void<fwpmu.h>
FWPM_FILTER_CHANGE_CALLBACK0(void * context,const FWPM_FILTER_CHANGE0 * change)typedef void<fwpmu.h>
FWPM_NET_EVENT_CALLBACK0(void * context,const FWPM_NET_EVENT1 * event)typedef void<fwpmu.h>
FWPM_PROVIDER_CHANGE_CALLBACK0(void * context,const FWPM_PROVIDER_CHANGE0 * change)typedef void<fwpmu.h>
FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0(void * context,const FWPM_PROVIDER_CONTEXT_CHANGE0 * change)typedef void<fwpmu.h>
FWPM_SUBLAYER_CHANGE_CALLBACK0(void * context,const FWPM_SUBLAYER_CHANGE0 * change)typedef void<fwpmu.h>
FWPM_SYSTEM_PORTS_CALLBACK0(void * context,const FWPM_SYSTEM_PORTS0 * sysPorts)typedef void<fwpmu.h>
FwpmCalloutAdd0(HANDLE engineHandle,const FWPM_CALLOUT0 * callout,PSECURITY_DESCRIPTOR sd,UINT32 * id)DWORD WINAPI <fwpmu.h>
FwpmCalloutCreateEnumHandle0(HANDLE engineHandle,const FWPM_CALLOUT_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmCalloutDeleteById0(HANDLE engineHandle,UINT32 id)DWORD WINAPI <fwpmu.h>
FwpmCalloutDeleteByKey0(HANDLE engineHandle,const GUID * key)DWORD WINAPI <fwpmu.h>
FwpmCalloutDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmCalloutEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_CALLOUT0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmCalloutGetById0(HANDLE engineHandle,UINT32 id,FWPM_CALLOUT0 ** callout)DWORD WINAPI <fwpmu.h>
FwpmCalloutGetByKey0(HANDLE engineHandle,const GUID * key,FWPM_CALLOUT0 ** callout)DWORD WINAPI <fwpmu.h>
FwpmCalloutGetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmCalloutSetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmCalloutSubscribeChanges0(HANDLE engineHandle,const FWPM_CALLOUT_SUBSCRIPTION0 * subscription,FWPM_CALLOUT_CHANGE_CALLBACK0 callback,void * context,HANDLE * changeHandle)DWORD WINAPI <fwpmu.h>
FwpmCalloutSubscriptionsGet0(HANDLE engineHandle,FWPM_CALLOUT_SUBSCRIPTION0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
FwpmCalloutUnsubscribeChanges0(HANDLE engineHandle,HANDLE changeHandle)DWORD WINAPI <fwpmu.h>
FwpmEngineClose0(HANDLE engineHandle)DWORD WINAPI <fwpmu.h>
FwpmEngineGetOption0(HANDLE engineHandle,FWPM_ENGINE_OPTION option,FWP_VALUE0 ** value)DWORD WINAPI <fwpmu.h>
FwpmEngineGetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmEngineOpen0(const wchar_t * serverName,UINT32 authnService,SEC_WINNT_AUTH_IDENTITY_W * authIdentity,const FWPM_SESSION0 * session,HANDLE * engineHandle)DWORD WINAPI <fwpmu.h>
FwpmEngineSetOption0(HANDLE engineHandle,FWPM_ENGINE_OPTION option,const FWP_VALUE0 * newValue)DWORD WINAPI <fwpmu.h>
FwpmEngineSetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmFilterAdd0(HANDLE engineHandle,const FWPM_FILTER0 * filter,PSECURITY_DESCRIPTOR sd,UINT64 * id)DWORD WINAPI <fwpmu.h>
FwpmFilterCreateEnumHandle0(HANDLE engineHandle,const FWPM_FILTER_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmFilterDeleteById0(HANDLE engineHandle,UINT64 id)DWORD WINAPI <fwpmu.h>
FwpmFilterDeleteByKey0(HANDLE engineHandle,const GUID * key)DWORD WINAPI <fwpmu.h>
FwpmFilterDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmFilterEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_FILTER0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmFilterGetById0(HANDLE engineHandle,UINT64 id,FWPM_FILTER0 ** filter)DWORD WINAPI <fwpmu.h>
FwpmFilterGetByKey0(HANDLE engineHandle,const GUID * key,FWPM_FILTER0 ** filter)DWORD WINAPI <fwpmu.h>
FwpmFilterGetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmFilterSetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmFilterSubscribeChanges0(HANDLE engineHandle,const FWPM_FILTER_SUBSCRIPTION0 * subscription,FWPM_FILTER_CHANGE_CALLBACK0 callback,void * context,HANDLE * changeHandle)DWORD WINAPI <fwpmu.h>
FwpmFilterSubscriptionsGet0(HANDLE engineHandle,FWPM_FILTER_SUBSCRIPTION0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
FwpmFilterUnsubscribeChanges0(HANDLE engineHandle,HANDLE changeHandle)DWORD WINAPI <fwpmu.h>
FwpmFreeMemory0(void ** p)void WINAPI <fwpmu.h>
FwpmGetAppIdFromFileName0(const wchar_t * fileName,FWP_BYTE_BLOB ** appId)DWORD WINAPI <fwpmu.h>
FwpmIpsecTunnelAdd0(HANDLE engineHandle,UINT32 flags,const FWPM_PROVIDER_CONTEXT0 * mainModePolicy,const FWPM_PROVIDER_CONTEXT0 * tunnelPolicy,UINT32 numFilterConditions,const FWPM_FILTER_CONDITION0 * filterConditions,PSECURITY_DESCRIPTOR sd)DWORD WINAPI <fwpmu.h>
FwpmIpsecTunnelAdd1(HANDLE engineHandle,UINT32 flags,const FWPM_PROVIDER_CONTEXT1 * mainModePolicy,const FWPM_PROVIDER_CONTEXT1 * tunnelPolicy,UINT32 numFilterConditions,const FWPM_FILTER_CONDITION0 * filterConditions,const GUID * keyModKey,PSECURITY_DESCRIPTOR sd)DWORD WINAPI <fwpmu.h>
FwpmIPsecTunnelDeleteByKey0(HANDLE engineHandle,const GUID * key)DWORD WINAPI <fwpmu.h>
FwpmLayerCreateEnumHandle0(HANDLE engineHandle,const FWPM_LAYER_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmLayerDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmLayerEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_LAYER0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmLayerGetById0(HANDLE engineHandle,UINT16 id,FWPM_LAYER0 ** layer)DWORD WINAPI <fwpmu.h>
FwpmLayerGetByKey0(HANDLE engineHandle,const GUID * key,FWPM_LAYER0 ** layer)DWORD WINAPI <fwpmu.h>
FwpmLayerGetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmLayerSetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmNetEventCreateEnumHandle0(HANDLE engineHandle,const FWPM_NET_EVENT_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmNetEventDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmNetEventEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_NET_EVENT0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmNetEventEnum1(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_NET_EVENT1 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmNetEventsGetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmNetEventsSetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmNetEventSubscribe0(HANDLE engineHandle,const FWPM_NET_EVENT_SUBSCRIPTION0 * subscription,FWPM_NET_EVENT_CALLBACK0 callback,void * context,HANDLE * eventsHandle)DWORD WINAPI <fwpmu.h>
FwpmNetEventSubscriptionsGet0(HANDLE engineHandle,FWPM_NET_EVENT_SUBSCRIPTION0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
FwpmNetEventUnsubscribe0(HANDLE engineHandle,HANDLE eventsHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderAdd0(HANDLE engineHandle,const FWPM_PROVIDER0 * provider,PSECURITY_DESCRIPTOR sd)DWORD WINAPI <fwpmu.h>
FwpmProviderContextAdd0(HANDLE engineHandle,const FWPM_PROVIDER_CONTEXT0 * providerContext,PSECURITY_DESCRIPTOR sd,UINT64 * id)DWORD WINAPI <fwpmu.h>
FwpmProviderContextAdd1(HANDLE engineHandle,const FWPM_PROVIDER_CONTEXT1 * providerContext,PSECURITY_DESCRIPTOR sd,UINT64 * id)DWORD WINAPI <fwpmu.h>
FwpmProviderContextCreateEnumHandle0(HANDLE engineHandle,const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderContextDeleteById0(HANDLE engineHandle,UINT64 id)DWORD WINAPI <fwpmu.h>
FwpmProviderContextDeleteByKey0(HANDLE engineHandle,const GUID * key)DWORD WINAPI <fwpmu.h>
FwpmProviderContextDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderContextEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_PROVIDER_CONTEXT0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmProviderContextEnum1(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_PROVIDER_CONTEXT1 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmProviderContextGetById0(HANDLE engineHandle,UINT64 id,FWPM_PROVIDER_CONTEXT0 ** providerContext)DWORD WINAPI <fwpmu.h>
FwpmProviderContextGetById1(HANDLE engineHandle,UINT64 id,FWPM_PROVIDER_CONTEXT1 ** providerContext)DWORD WINAPI <fwpmu.h>
FwpmProviderContextGetByKey0(HANDLE engineHandle,const GUID * key,FWPM_PROVIDER_CONTEXT0 ** providerContext)DWORD WINAPI <fwpmu.h>
FwpmProviderContextGetByKey1(HANDLE engineHandle,const GUID * key,FWPM_PROVIDER_CONTEXT1 ** providerContext)DWORD WINAPI <fwpmu.h>
FwpmProviderContextGetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmProviderContextSetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmProviderContextSubscribeChanges0(HANDLE engineHandle,const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 * subscription,FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 callback,void * context,HANDLE * changeHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderContextSubscriptionsGet0(HANDLE engineHandle,FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
FwpmProviderContextUnsubscribeChanges0(HANDLE engineHandle,HANDLE changeHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderCreateEnumHandle0(HANDLE engineHandle,const FWPM_PROVIDER_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderDeleteByKey0(HANDLE engineHandle,const GUID * key)DWORD WINAPI <fwpmu.h>
FwpmProviderDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_PROVIDER0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmProviderGetByKey0(HANDLE engineHandle,const GUID * key,FWPM_PROVIDER0 ** provider)DWORD WINAPI <fwpmu.h>
FwpmProviderGetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmProviderSetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
FwpmProviderSubscribeChanges0(HANDLE engineHandle,const FWPM_PROVIDER_SUBSCRIPTION0 * subscription,FWPM_PROVIDER_CHANGE_CALLBACK0 callback,void * context,HANDLE * changeHandle)DWORD WINAPI <fwpmu.h>
FwpmProviderSubscriptionsGet0(HANDLE engineHandle,FWPM_PROVIDER_SUBSCRIPTION0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
FwpmProviderUnsubscribeChanges0(HANDLE engineHandle,HANDLE changeHandle)DWORD WINAPI <fwpmu.h>
FwpmSessionCreateEnumHandle0(HANDLE engineHandle,const FWPM_SESSION_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmSessionDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmSessionEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_SESSION0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmSubLayerAdd0(HANDLE engineHandle,const FWPM_SUBLAYER0 * subLayer,PSECURITY_DESCRIPTOR sd)DWORD WINAPI <fwpmu.h>
FwpmSubLayerCreateEnumHandle0(HANDLE engineHandle,const FWPM_SUBLAYER_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
FwpmSubLayerDeleteByKey0(HANDLE engineHandle,const GUID * key)DWORD WINAPI <fwpmu.h>
FwpmSubLayerDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
FwpmSubLayerEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,FWPM_SUBLAYER0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
FwpmSubLayerGetByKey0(HANDLE engineHandle,const GUID * key,FWPM_SUBLAYER0 ** subLayer)DWORD WINAPI <fwpmu.h>
FwpmSubLayerGetSecurityInfoByKey0(HANDLE engineHandle,const GUID * key,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
FwpmSubLayerSubscribeChanges0(HANDLE engineHandle,const FWPM_SUBLAYER_SUBSCRIPTION0 * subscription,FWPM_SUBLAYER_CHANGE_CALLBACK0 callback,void * context,HANDLE * changeHandle)DWORD WINAPI <fwpmu.h>
FwpmSubLayerSubscriptionsGet0(HANDLE engineHandle,FWPM_SUBLAYER_SUBSCRIPTION0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
FwpmSubLayerUnsubscribeChanges0(HANDLE engineHandle,HANDLE changeHandle)DWORD WINAPI <fwpmu.h>
FwpmSystemPortsGet0(HANDLE engineHandle,FWPM_SYSTEM_PORTS0 ** sysPorts)DWORD WINAPI <fwpmu.h>
FwpmSystemPortsSubscribe0(HANDLE engineHandle,void * reserved,FWPM_SYSTEM_PORTS_CALLBACK0 callback,void * context,HANDLE * sysPortsHandle)DWORD WINAPI <fwpmu.h>
FwpmSystemPortsUnsubscribe0(HANDLE engineHandle,HANDLE sysPortsHandle)DWORD WINAPI <fwpmu.h>
FwpmTransactionAbort0(HANDLE engineHandle)DWORD WINAPI <fwpmu.h>
FwpmTransactionBegin0(HANDLE engineHandle,UINT32 flags)DWORD WINAPI <fwpmu.h>
FwpmTransactionCommit0(HANDLE engineHandle)DWORD WINAPI <fwpmu.h>
FXTOL(x)<winddi.h>
FXTOLCEILING(x)<winddi.h>
FXTOLFLOOR(x)<winddi.h>
FXTOLROUND(x)<winddi.h>
gai_strerrorA(int)char<ws2tcpip.h>
gai_strerrorW(int)WCHAR<ws2tcpip.h>
GatherDigits(TAPI_DIGITMODE DigitMode,__LONG32 lNumDigits,BSTR pTerminationDigits,__LONG32 lFirstDigitTimeout,__LONG32 lInterDigitTimeout)virtual HRESULT WINAPI <tapi3if.h>
GdiAlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GdiComment(HDC hdc,UINT nSize,CONST BYTE * lpData) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GdiFlush(void) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GdiGetBatchLimit(void) WINGDIAPI DWORD WINAPI <wingdi.h>
GdiGradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GdiMarshal(DWORD dwProcessIdTo,HGDIOBJ hGdiObj,PVOID pData,ULONG ulFlags)WINGDIAPI VOID WINAPI <wingdi.h>
GdiMarshalSize(VOID)WINGDIAPI ULONG WINAPI <wingdi.h>
GDIP_WMF_RECORD_TO_EMFPLUS(meta)<gdiplusenums.h>
GdipAddPathArc(GpPath *,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathArcI(GpPath *,INT,INT,INT,INT,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathBezier(GpPath *,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathBezierI(GpPath *,INT,INT,INT,INT,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathBeziers(GpPath *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathBeziersI(GpPath *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathClosedCurve(GpPath *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathClosedCurve2(GpPath *,GDIPCONST GpPointF *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathClosedCurve2I(GpPath *,GDIPCONST GpPoint *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathClosedCurveI(GpPath *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathCurve(GpPath *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathCurve2(GpPath *,GDIPCONST GpPointF *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathCurve2I(GpPath *,GDIPCONST GpPoint *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathCurve3(GpPath *,GDIPCONST GpPointF *,INT,INT,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathCurve3I(GpPath *,GDIPCONST GpPoint *,INT,INT,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathCurveI(GpPath *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathEllipse(GpPath *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathEllipseI(GpPath *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathLine(GpPath *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathLine2(GpPath *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathLine2I(GpPath *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathLineI(GpPath *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathPath(GpPath *,GDIPCONST GpPath *,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathPie(GpPath *,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathPieI(GpPath *,INT,INT,INT,INT,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathPolygon(GpPath *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathPolygonI(GpPath *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathRectangle(GpPath *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathRectangleI(GpPath *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathRectangles(GpPath *,GDIPCONST GpRectF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathRectanglesI(GpPath *,GDIPCONST GpRect *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathString(GpPath *,GDIPCONST WCHAR *,INT,GDIPCONST GpFontFamily *,INT,REAL,GDIPCONST RectF *,GDIPCONST GpStringFormat *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAddPathStringI(GpPath *,GDIPCONST WCHAR *,INT,GDIPCONST GpFontFamily *,INT,REAL,GDIPCONST Rect *,GDIPCONST GpStringFormat *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipAlloc(size_t)VOID<gdiplusmem.h>
GdipBeginContainer(GpGraphics *,GDIPCONST GpRectF *,GDIPCONST GpRectF *,GpUnit,GraphicsContainer *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBeginContainer2(GpGraphics *,GraphicsContainer *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBeginContainerI(GpGraphics *,GDIPCONST GpRect *,GDIPCONST GpRect *,GpUnit,GraphicsContainer *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapApplyEffect(GpBitmap *,CGpEffect *,RECT *,BOOL,VOID **,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapConvertFormat(GpBitmap *,PixelFormat,DitherType,PaletteType,ColorPalette *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapCreateApplyEffect(GpBitmap **,INT,CGpEffect *,RECT *,RECT *,GpBitmap **,BOOL,VOID **,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapGetHistogram(GpBitmap *,HistogramFormat,UINT,UINT *,UINT *,UINT *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapGetHistogramSize(HistogramFormat,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapGetPixel(GpBitmap *,INT,INT,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapLockBits(GpBitmap *,GDIPCONST GpRect *,UINT,PixelFormat,BitmapData *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapSetPixel(GpBitmap *,INT,INT,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapSetResolution(GpBitmap *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipBitmapUnlockBits(GpBitmap *,BitmapData *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipClearPathMarkers(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneBitmapArea(REAL,REAL,REAL,REAL,PixelFormat,GpBitmap *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneBitmapAreaI(INT,INT,INT,INT,PixelFormat,GpBitmap *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneBrush(GpBrush *,GpBrush **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneCustomLineCap(GpCustomLineCap *,GpCustomLineCap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneFont(GpFont *,GpFont **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneFontFamily(GpFontFamily *,GpFontFamily **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneImage(GpImage *,GpImage **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneImageAttributes(GDIPCONST GpImageAttributes *,GpImageAttributes **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneMatrix(GpMatrix *,GpMatrix **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipClonePath(GpPath *,GpPath **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipClonePen(GpPen *,GpPen **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneRegion(GpRegion *,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCloneStringFormat(GDIPCONST GpStringFormat *,GpStringFormat **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipClosePathFigure(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipClosePathFigures(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCombineRegionPath(GpRegion *,GpPath *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCombineRegionRect(GpRegion *,GDIPCONST GpRectF *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCombineRegionRectI(GpRegion *,GDIPCONST GpRect *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCombineRegionRegion(GpRegion *,GpRegion *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipComment(GpGraphics *,UINT,GDIPCONST BYTE *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipConvertToEmfPlus(GDIPCONST GpGraphics *,GpMetafile *,BOOL *,EmfType,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipConvertToEmfPlusToFile(GDIPCONST GpGraphics *,GpMetafile *,BOOL *,GDIPCONST WCHAR *,EmfType,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipConvertToEmfPlusToStream(GDIPCONST GpGraphics *,GpMetafile *,BOOL *,IStream *,EmfType,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateAdjustableArrowCap(REAL,REAL,BOOL,GpAdjustableArrowCap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromDirectDrawSurface(IDirectDrawSurface7 *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromFile(GDIPCONST WCHAR *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromFileICM(GDIPCONST WCHAR *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromGdiDib(GDIPCONST BITMAPINFO *,VOID *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromGraphics(INT,INT,GpGraphics *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromHBITMAP(HBITMAP,HPALETTE,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromHICON(HICON,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromResource(HINSTANCE,GDIPCONST WCHAR *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromScan0(INT,INT,INT,PixelFormat,BYTE *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromStream(IStream *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateBitmapFromStreamICM(IStream *,GpBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateCachedBitmap(GpBitmap *,GpGraphics *,GpCachedBitmap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateCustomLineCap(GpPath *,GpPath *,GpLineCap,REAL,GpCustomLineCap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateEffect(GDIPCONST GUID,CGpEffect **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFont(GDIPCONST GpFontFamily *,REAL,INT,Unit,GpFont **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFontFamilyFromName(GDIPCONST WCHAR *,GpFontCollection *,GpFontFamily **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFontFromDC(HDC,GpFont **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFontFromLogfontA(HDC,GDIPCONST LOGFONTA *,GpFont **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFontFromLogfontW(HDC,GDIPCONST LOGFONTW *,GpFont **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFromHDC(HDC,GpGraphics **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFromHDC2(HDC,HANDLE,GpGraphics **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFromHWND(HWND,GpGraphics **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateFromHWNDICM(HWND,GpGraphics **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateHalftonePalette(void)HPALETTE WINGDIPAPI <gdiplusflat.h>
GdipCreateHatchBrush(GpHatchStyle,ARGB,ARGB,GpHatch **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateHBITMAPFromBitmap(GpBitmap *,HBITMAP *,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateHICONFromBitmap(GpBitmap *,HICON *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateImageAttributes(GpImageAttributes **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateLineBrush(GDIPCONST GpPointF *,GDIPCONST GpPointF *,ARGB,ARGB,GpWrapMode,GpLineGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateLineBrushFromRect(GDIPCONST GpRectF *,ARGB,ARGB,LinearGradientMode,GpWrapMode,GpLineGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateLineBrushFromRectI(GDIPCONST GpRect *,ARGB,ARGB,LinearGradientMode,GpWrapMode,GpLineGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateLineBrushFromRectWithAngle(GDIPCONST GpRectF *,ARGB,ARGB,REAL,BOOL,GpWrapMode,GpLineGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateLineBrushFromRectWithAngleI(GDIPCONST GpRect *,ARGB,ARGB,REAL,BOOL,GpWrapMode,GpLineGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateLineBrushI(GDIPCONST GpPoint *,GDIPCONST GpPoint *,ARGB,ARGB,GpWrapMode,GpLineGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMatrix(GpMatrix **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMatrix2(REAL,REAL,REAL,REAL,REAL,REAL,GpMatrix **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMatrix3(GDIPCONST GpRectF *,GDIPCONST GpPointF *,GpMatrix **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMatrix3I(GDIPCONST GpRect *,GDIPCONST GpPoint *,GpMatrix **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMetafileFromEmf(HENHMETAFILE,BOOL,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMetafileFromFile(GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMetafileFromStream(IStream *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMetafileFromWmf(HMETAFILE,BOOL,GDIPCONST WmfPlaceableFileHeader *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateMetafileFromWmfFile(GDIPCONST WCHAR *,GDIPCONST WmfPlaceableFileHeader *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePath(GpFillMode,GpPath **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePath2(GDIPCONST GpPointF *,GDIPCONST BYTE *,INT,GpFillMode,GpPath **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePath2I(GDIPCONST GpPoint *,GDIPCONST BYTE *,INT,GpFillMode,GpPath **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePathGradient(GDIPCONST GpPointF *,INT,GpWrapMode,GpPathGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePathGradientFromPath(GDIPCONST GpPath *,GpPathGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePathGradientI(GDIPCONST GpPoint *,INT,GpWrapMode,GpPathGradient **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePathIter(GpPathIterator **,GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePen1(ARGB,REAL,GpUnit,GpPen **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreatePen2(GpBrush *,REAL,GpUnit,GpPen **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateRegion(GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateRegionHrgn(HRGN,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateRegionPath(GpPath *,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateRegionRect(GDIPCONST GpRectF *,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateRegionRectI(GDIPCONST GpRect *,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateRegionRgnData(GDIPCONST BYTE *,INT,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateSolidFill(ARGB,GpSolidFill **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateStreamOnFile(GDIPCONST WCHAR *,UINT,IStream **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateStringFormat(INT,LANGID,GpStringFormat **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateTexture(GpImage *,GpWrapMode,GpTexture **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateTexture2(GpImage *,GpWrapMode,REAL,REAL,REAL,REAL,GpTexture **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateTexture2I(GpImage *,GpWrapMode,INT,INT,INT,INT,GpTexture **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateTextureIA(GpImage *,GDIPCONST GpImageAttributes *,REAL,REAL,REAL,REAL,GpTexture **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipCreateTextureIAI(GpImage *,GDIPCONST GpImageAttributes *,INT,INT,INT,INT,GpTexture **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteBrush(GpBrush *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteCachedBitmap(GpCachedBitmap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteCustomLineCap(GpCustomLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteEffect(CGpEffect *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteFont(GpFont *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteFontFamily(GpFontFamily *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteGraphics(GpGraphics *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteMatrix(GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeletePath(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeletePathIter(GpPathIterator *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeletePen(GpPen *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeletePrivateFontCollection(GpFontCollection **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteRegion(GpRegion *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDeleteStringFormat(GpStringFormat *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDisposeImage(GpImage *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDisposeImageAttributes(GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawArc(GpGraphics *,GpPen *,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawArcI(GpGraphics *,GpPen *,INT,INT,INT,INT,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawBezier(GpGraphics *,GpPen *,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawBezierI(GpGraphics *,GpPen *,INT,INT,INT,INT,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawBeziers(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawBeziersI(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCachedBitmap(GpGraphics *,GpCachedBitmap *,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawClosedCurve(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawClosedCurve2(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawClosedCurve2I(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawClosedCurveI(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCurve(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCurve2(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCurve2I(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCurve3(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT,INT,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCurve3I(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT,INT,INT,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawCurveI(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawDriverString(GpGraphics *,GDIPCONST UINT16 *,INT,GDIPCONST GpFont *,GDIPCONST GpBrush *,GDIPCONST PointF *,INT,GDIPCONST GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawEllipse(GpGraphics *,GpPen *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawEllipseI(GpGraphics *,GpPen *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImage(GpGraphics *,GpImage *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImageFX(GpGraphics *,GpImage *,GpRectF *,GpMatrix *,CGpEffect *,GpImageAttributes *,GpUnit)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImageI(GpGraphics *,GpImage *,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImagePointRect(GpGraphics *,GpImage *,REAL,REAL,REAL,REAL,REAL,REAL,GpUnit)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImagePointRectI(GpGraphics *,GpImage *,INT,INT,INT,INT,INT,INT,GpUnit)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImagePoints(GpGraphics *,GpImage *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImagePointsI(GpGraphics *,GpImage *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImagePointsRect(GpGraphics *,GpImage *,GDIPCONST GpPointF *,INT,REAL,REAL,REAL,REAL,GpUnit,GDIPCONST GpImageAttributes *,DrawImageAbort,VOID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImagePointsRectI(GpGraphics *,GpImage *,GDIPCONST GpPoint *,INT,INT,INT,INT,INT,GpUnit,GDIPCONST GpImageAttributes *,DrawImageAbort,VOID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImageRect(GpGraphics *,GpImage *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImageRectI(GpGraphics *,GpImage *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImageRectRect(GpGraphics *,GpImage *,REAL,REAL,REAL,REAL,REAL,REAL,REAL,REAL,GpUnit,GDIPCONST GpImageAttributes *,DrawImageAbort,VOID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawImageRectRectI(GpGraphics *,GpImage *,INT,INT,INT,INT,INT,INT,INT,INT,GpUnit,GDIPCONST GpImageAttributes *,DrawImageAbort,VOID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawLine(GpGraphics *,GpPen *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawLineI(GpGraphics *,GpPen *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawLines(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawLinesI(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawPath(GpGraphics *,GpPen *,GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawPie(GpGraphics *,GpPen *,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawPieI(GpGraphics *,GpPen *,INT,INT,INT,INT,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawPolygon(GpGraphics *,GpPen *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawPolygonI(GpGraphics *,GpPen *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawRectangle(GpGraphics *,GpPen *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawRectangleI(GpGraphics *,GpPen *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawRectangles(GpGraphics *,GpPen *,GDIPCONST GpRectF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawRectanglesI(GpGraphics *,GpPen *,GDIPCONST GpRect *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipDrawString(GpGraphics *,GDIPCONST WCHAR *,INT,GDIPCONST GpFont *,GDIPCONST RectF *,GDIPCONST GpStringFormat *,GDIPCONST GpBrush *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEmfToWmfBits(HENHMETAFILE,UINT,LPBYTE,INT,INT)UINT WINGDIPAPI <gdiplusflat.h>
GdipEndContainer(GpGraphics *,GraphicsContainer)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileDestPoint(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST PointF &,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileDestPointI(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST Point &,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileDestPoints(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST PointF *,INT,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileDestPointsI(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST Point *,INT,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileDestRect(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST RectF &,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileDestRectI(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST Rect &,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileSrcRectDestPoint(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST PointF &,GDIPCONST RectF &,Unit,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileSrcRectDestPointI(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST Point &,GDIPCONST Rect &,Unit,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileSrcRectDestPoints(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST PointF *,INT,GDIPCONST RectF &,Unit,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileSrcRectDestPointsI(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST Point *,INT,GDIPCONST Rect &,Unit,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileSrcRectDestRect(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST RectF &,GDIPCONST RectF &,Unit,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipEnumerateMetafileSrcRectDestRectI(GpGraphics *,GDIPCONST GpMetafile *,GDIPCONST Rect &,GDIPCONST Rect &,Unit,EnumerateMetafileProc,VOID *,GDIPCONST GpImageAttributes *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillClosedCurve(GpGraphics *,GpBrush *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillClosedCurve2(GpGraphics *,GpBrush *,GDIPCONST GpPointF *,INT,REAL,GpFillMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillClosedCurve2I(GpGraphics *,GpBrush *,GDIPCONST GpPoint *,INT,REAL,GpFillMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillClosedCurveI(GpGraphics *,GpBrush *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillEllipse(GpGraphics *,GpBrush *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillEllipseI(GpGraphics *,GpBrush *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPath(GpGraphics *,GpBrush *,GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPie(GpGraphics *,GpBrush *,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPieI(GpGraphics *,GpBrush *,INT,INT,INT,INT,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPolygon(GpGraphics *,GpBrush *,GDIPCONST GpPointF *,INT,GpFillMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPolygon2(GpGraphics *,GpBrush *,GDIPCONST GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPolygon2I(GpGraphics *,GpBrush *,GDIPCONST GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillPolygonI(GpGraphics *,GpBrush *,GDIPCONST GpPoint *,INT,GpFillMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillRectangle(GpGraphics *,GpBrush *,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillRectangleI(GpGraphics *,GpBrush *,INT,INT,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillRectangles(GpGraphics *,GpBrush *,GDIPCONST GpRectF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillRectanglesI(GpGraphics *,GpBrush *,GDIPCONST GpRect *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFillRegion(GpGraphics *,GpBrush *,GpRegion *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFindFirstImageItem(GpImage *,ImageItemData *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFindNextImageItem(GpImage *,ImageItemData *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFlattenPath(GpPath *,GpMatrix *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFlush(GpGraphics *,GpFlushIntention)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFontCollectionEnumerable(GpFontCollection *,GpGraphics *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFontCollectionEnumerate(GpFontCollection *,INT,GpFontFamily **,INT *,GpGraphics *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipFree(VOID *)VOID WINGDIPAPI <gdiplusmem.h>
GdipGetAdjustableArrowCapFillState(GpAdjustableArrowCap *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetAdjustableArrowCapHeight(GpAdjustableArrowCap *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetAdjustableArrowCapMiddleInset(GpAdjustableArrowCap *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetAdjustableArrowCapWidth(GpAdjustableArrowCap *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetAllPropertyItems(GpImage *,UINT,UINT,PropertyItem *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetBrushType(GpBrush *,GpBrushType *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCellAscent(GDIPCONST GpFontFamily *,INT,UINT16 *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCellDescent(GDIPCONST GpFontFamily *,INT,UINT16 *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetClip(GpGraphics *,GpRegion *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetClipBounds(GpGraphics *,GpRectF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetClipBoundsI(GpGraphics *,GpRect *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCompositingMode(GpGraphics *,CompositingMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCompositingQuality(GpGraphics *,CompositingQuality *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCustomLineCapBaseCap(GpCustomLineCap *,GpLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCustomLineCapBaseInset(GpCustomLineCap *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCustomLineCapStrokeCaps(GpCustomLineCap *,GpLineCap *,GpLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCustomLineCapStrokeJoin(GpCustomLineCap *,GpLineJoin *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCustomLineCapType(GpCustomLineCap *,CustomLineCapType *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetCustomLineCapWidthScale(GpCustomLineCap *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetDC(GpGraphics *,HDC *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetDpiX(GpGraphics *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetDpiY(GpGraphics *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetEffectParameters(CGpEffect *,UINT *,VOID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetEffectParameterSize(CGpEffect *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetEmHeight(GDIPCONST GpFontFamily *,INT,UINT16 *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetEncoderParameterList(GpImage *,GDIPCONST CLSID *,UINT,EncoderParameters *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetEncoderParameterListSize(GpImage *,GDIPCONST CLSID *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFamily(GpFont *,GpFontFamily **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFamilyName(GDIPCONST GpFontFamily *,WCHAR[LF_FACESIZE],LANGID)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontCollectionFamilyCount(GpFontCollection *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontCollectionFamilyList(GpFontCollection *,INT,GpFontFamily **,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontHeight(GDIPCONST GpFont *,GDIPCONST GpGraphics *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontHeightGivenDPI(GDIPCONST GpFont *,REAL,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontSize(GpFont *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontStyle(GpFont *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetFontUnit(GpFont *,Unit *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetGenericFontFamilyMonospace(GpFontFamily **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetGenericFontFamilySansSerif(GpFontFamily **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetGenericFontFamilySerif(GpFontFamily **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetHatchBackgroundColor(GpHatch *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetHatchForegroundColor(GpHatch *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetHatchStyle(GpHatch *,GpHatchStyle *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetHemfFromMetafile(GpMetafile *,HENHMETAFILE *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageAttributesAdjustedPalette(GpImageAttributes *,ColorPalette *,ColorAdjustType)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageBounds(GpImage *,GpRectF *,GpUnit *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageDecoders(UINT,UINT,ImageCodecInfo *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageDecodersSize(UINT *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageDimension(GpImage *,REAL *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageEncoders(UINT,UINT,ImageCodecInfo *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageEncodersSize(UINT *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageFlags(GpImage *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageGraphicsContext(GpImage *,GpGraphics **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageHeight(GpImage *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageHorizontalResolution(GpImage *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageItemData(GpImage *,ImageItemData *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImagePalette(GpImage *,ColorPalette *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImagePaletteSize(GpImage *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImagePixelFormat(GpImage *,PixelFormat *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageRawFormat(GpImage *,GUID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageThumbnail(GpImage *,UINT,UINT,GpImage **,GetThumbnailImageAbort,VOID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageType(GpImage *,ImageType *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageVerticalResolution(GpImage *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetImageWidth(GpImage *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetInterpolationMode(GpGraphics *,InterpolationMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineBlend(GpLineGradient *,REAL *,REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineBlendCount(GpLineGradient *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineColors(GpLineGradient *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineGammaCorrection(GpLineGradient *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLinePresetBlend(GpLineGradient *,ARGB *,REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLinePresetBlendCount(GpLineGradient *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineRect(GpLineGradient *,GpRectF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineRectI(GpLineGradient *,GpRect *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineSpacing(GDIPCONST GpFontFamily *,INT,UINT16 *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineTransform(GpLineGradient *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLineWrapMode(GpLineGradient *,GpWrapMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLogFontA(GpFont *,GpGraphics *,LOGFONTA *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetLogFontW(GpFont *,GpGraphics *,LOGFONTW *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetMatrixElements(GDIPCONST GpMatrix *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetMetafileDownLevelRasterizationLimit(GDIPCONST GpMetafile *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetMetafileHeaderFromEmf(HENHMETAFILE,MetafileHeader *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetMetafileHeaderFromFile(GDIPCONST WCHAR *,MetafileHeader *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetMetafileHeaderFromMetafile(GpMetafile *,MetafileHeader *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetMetafileHeaderFromStream(IStream *,MetafileHeader *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetNearestColor(GpGraphics *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPageScale(GpGraphics *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPageUnit(GpGraphics *,GpUnit *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathData(GpPath *,GpPathData *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathFillMode(GpPath *,GpFillMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientBlend(GpPathGradient *,REAL *,REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientBlendCount(GpPathGradient *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientCenterColor(GpPathGradient *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientCenterPoint(GpPathGradient *,GpPointF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientCenterPointI(GpPathGradient *,GpPoint *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientFocusScales(GpPathGradient *,REAL *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientGammaCorrection(GpPathGradient *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientPath(GpPathGradient *,GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientPointCount(GpPathGradient *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientPresetBlend(GpPathGradient *,ARGB *,REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientPresetBlendCount(GpPathGradient *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientRect(GpPathGradient *,GpRectF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientRectI(GpPathGradient *,GpRect *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientSurroundColorCount(GpPathGradient *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientSurroundColorsWithCount(GpPathGradient *,ARGB *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientTransform(GpPathGradient *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathGradientWrapMode(GpPathGradient *,GpWrapMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathLastPoint(GpPath *,GpPointF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathPoints(GpPath *,GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathPointsI(GpPath *,GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathTypes(GpPath *,BYTE *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathWorldBounds(GpPath *,GpRectF *,GDIPCONST GpMatrix *,GDIPCONST GpPen *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPathWorldBoundsI(GpPath *,GpRect *,GDIPCONST GpMatrix *,GDIPCONST GpPen *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenBrushFill(GpPen *,GpBrush **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenColor(GpPen *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenCompoundArray(GpPen *,REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenCompoundCount(GpPen *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenCustomEndCap(GpPen *,GpCustomLineCap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenCustomStartCap(GpPen *,GpCustomLineCap **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenDashArray(GpPen *,REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenDashCap197819(GpPen *,GpDashCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenDashCount(GpPen *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenDashOffset(GpPen *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenDashStyle(GpPen *,GpDashStyle *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenEndCap(GpPen *,GpLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenFillType(GpPen *,GpPenType *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenLineJoin(GpPen *,GpLineJoin *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenMiterLimit(GpPen *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenMode(GpPen *,GpPenAlignment *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenStartCap(GpPen *,GpLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenTransform(GpPen *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenUnit(GpPen *,GpUnit *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPenWidth(GpPen *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPixelOffsetMode(GpGraphics *,PixelOffsetMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPointCount(GpPath *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPropertyCount(GpImage *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPropertyIdList(GpImage *,UINT,PROPID *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPropertyItem(GpImage *,PROPID,UINT,PropertyItem *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPropertyItemSize(GpImage *,PROPID,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetPropertySize(GpImage *,UINT *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionBounds(GpRegion *,GpGraphics *,GpRectF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionBoundsI(GpRegion *,GpGraphics *,GpRect *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionData(GpRegion *,BYTE *,UINT,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionDataSize(GpRegion *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionHRgn(GpRegion *,GpGraphics *,HRGN *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionScans(GpRegion *,GpRectF *,INT *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionScansCount(GpRegion *,UINT *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRegionScansI(GpRegion *,GpRect *,INT *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetRenderingOrigin(GpGraphics *,INT *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetSmoothingMode(GpGraphics *,SmoothingMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetSolidFillColor(GpSolidFill *,ARGB *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatAlign(GDIPCONST GpStringFormat *,StringAlignment *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatDigitSubstitution(GDIPCONST GpStringFormat *,LANGID *,StringDigitSubstitute *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatFlags(GDIPCONST GpStringFormat *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatHotkeyPrefix(GDIPCONST GpStringFormat *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatLineAlign(GDIPCONST GpStringFormat *,StringAlignment *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatMeasurableCharacterRangeCount(GDIPCONST GpStringFormat *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatTabStopCount(GDIPCONST GpStringFormat *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatTabStops(GDIPCONST GpStringFormat *,INT,REAL *,REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetStringFormatTrimming(GDIPCONST GpStringFormat *,StringTrimming *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetTextContrast(GpGraphics *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetTextRenderingHint(GpGraphics *,TextRenderingHint *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetTextureImage(GpTexture *,GpImage **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetTextureTransform(GpTexture *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetTextureWrapMode(GpTexture *,GpWrapMode *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetVisibleClipBounds(GpGraphics *,GpRectF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetVisibleClipBoundsI(GpGraphics *,GpRect *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGetWorldTransform(GpGraphics *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGraphicsClear(GpGraphics *,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipGraphicsSetAbort(GpGraphics *,GdiplusAbort *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageForceValidation(GpImage *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageGetFrameCount(GpImage *,GDIPCONST GUID *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageGetFrameDimensionsCount(GpImage *,UINT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageGetFrameDimensionsList(GpImage *,GUID *,UINT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageRotateFlip(GpImage *,RotateFlipType)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageSelectActiveFrame(GpImage *,GDIPCONST GUID *,UINT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipImageSetAbort(GpImage *,GdiplusAbort *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipInitializePalette(ColorPalette *,PaletteType,INT,BOOL,GpBitmap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipInvertMatrix(GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsClipEmpty(GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsEmptyRegion(GpRegion *,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsEqualRegion(GpRegion *,GpRegion *,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsInfiniteRegion(GpRegion *,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsMatrixEqual(GDIPCONST GpMatrix *,GDIPCONST GpMatrix *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsMatrixIdentity(GDIPCONST GpMatrix *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsMatrixInvertible(GDIPCONST GpMatrix *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsOutlineVisiblePathPoint(GpPath *,REAL,REAL,GpPen *,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsOutlineVisiblePathPointI(GpPath *,INT,INT,GpPen *,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsStyleAvailable(GDIPCONST GpFontFamily *,INT,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleClipEmpty(GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisiblePathPoint(GpPath *,REAL,REAL,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisiblePathPointI(GpPath *,INT,INT,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisiblePoint(GpGraphics *,REAL,REAL,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisiblePointI(GpGraphics *,INT,INT,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleRect(GpGraphics *,REAL,REAL,REAL,REAL,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleRectI(GpGraphics *,INT,INT,INT,INT,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleRegionPoint(GpRegion *,REAL,REAL,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleRegionPointI(GpRegion *,INT,INT,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleRegionRect(GpRegion *,REAL,REAL,REAL,REAL,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipIsVisibleRegionRectI(GpRegion *,INT,INT,INT,INT,GpGraphics *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipLoadImageFromFile(GDIPCONST WCHAR *,GpImage **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipLoadImageFromFileICM(GDIPCONST WCHAR *,GpImage **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipLoadImageFromStream(IStream *,GpImage **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipLoadImageFromStreamICM(IStream *,GpImage **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdiplusAbort(void)	virtual HRESULT __stdcall Abort<gdiplustypes.h>
GdiplusBase(size_t in_size)	static void<gdiplusbase.h>
GdiplusBase(void * in_pVoid)	static void operator delete<gdiplusbase.h>
GdiplusNotificationHook(ULONG_PTR *)GpStatus WINGDIPAPI <gdiplusinit.h>
GdiplusNotificationUnhook(ULONG_PTR)VOID WINGDIPAPI <gdiplusinit.h>
GdiplusShutdown(ULONG_PTR)VOID WINGDIPAPI <gdiplusinit.h>
GdiplusStartup(ULONG_PTR *,GDIPCONST GdiplusStartupInput *,GdiplusStartupOutput *)GpStatus WINGDIPAPI <gdiplusinit.h>
GdiplusStartupInput(DebugEventProc debugEventCallback=NULL,BOOL suppressBackgroundThread=FALSE,BOOL suppressExternalCodecs=FALSE)	<gdiplusinit.h>
GdiplusStartupOutput()	<gdiplusinit.h>
GdipMeasureCharacterRanges(GpGraphics *,GDIPCONST WCHAR *,INT,GDIPCONST GpFont *,GDIPCONST RectF &,GDIPCONST GpStringFormat *,INT,GpRegion **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMeasureDriverString(GpGraphics *,GDIPCONST UINT16 *,INT,GDIPCONST GpFont *,GDIPCONST PointF *,INT,GDIPCONST GpMatrix *,RectF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMeasureString(GpGraphics *,GDIPCONST WCHAR *,INT,GDIPCONST GpFont *,GDIPCONST RectF *,GDIPCONST GpStringFormat *,RectF *,INT *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMultiplyLineTransform(GpLineGradient *,GDIPCONST GpMatrix *,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMultiplyMatrix(GpMatrix *,GpMatrix *,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMultiplyPathGradientTransform(GpPathGradient *,GDIPCONST GpMatrix *,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMultiplyPenTransform(GpPen *,GDIPCONST GpMatrix *,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMultiplyTextureTransform(GpTexture *,GDIPCONST GpMatrix *,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipMultiplyWorldTransform(GpGraphics *,GDIPCONST GpMatrix *,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipNewInstalledFontCollection(GpFontCollection **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipNewPrivateFontCollection(GpFontCollection **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterCopyData(GpPathIterator *,INT *,GpPointF *,BYTE *,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterEnumerate(GpPathIterator *,INT *,GpPointF *,BYTE *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterGetCount(GpPathIterator *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterGetSubpathCount(GpPathIterator *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterHasCurve(GpPathIterator *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterIsValid(GpPathIterator *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterNextMarker(GpPathIterator *,INT *,INT *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterNextMarkerPath(GpPathIterator *,INT *,GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterNextPathType(GpPathIterator *,INT *,BYTE *,INT *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterNextSubpath(GpPathIterator *,INT *,INT *,INT *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterNextSubpathPath(GpPathIterator *,INT *,GpPath *,BOOL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPathIterRewind(GpPathIterator *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPlayMetafileRecord(GDIPCONST GpMetafile *,EmfPlusRecordType,UINT,UINT,GDIPCONST BYTE *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPrivateAddFontFile(GpFontCollection *,GDIPCONST WCHAR *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipPrivateAddMemoryFont(GpFontCollection *,GDIPCONST void *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRecordMetafile(HDC,EmfType,GDIPCONST GpRectF *,MetafileFrameUnit,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRecordMetafileFileName(GDIPCONST WCHAR *,HDC,EmfType,GDIPCONST GpRectF *,MetafileFrameUnit,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRecordMetafileFileNameI(GDIPCONST WCHAR *,HDC,EmfType,GDIPCONST GpRect *,MetafileFrameUnit,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRecordMetafileI(HDC,EmfType,GDIPCONST GpRect *,MetafileFrameUnit,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRecordMetafileStream(IStream *,HDC,EmfType,GDIPCONST GpRectF *,MetafileFrameUnit,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRecordMetafileStreamI(IStream *,HDC,EmfType,GDIPCONST GpRect *,MetafileFrameUnit,GDIPCONST WCHAR *,GpMetafile **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipReleaseDC(GpGraphics *,HDC)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRemovePropertyItem(GpImage *,PROPID)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetClip(GpGraphics *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetImageAttributes(GpImageAttributes *,ColorAdjustType)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetLineTransform(GpLineGradient *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetPageTransform(GpGraphics *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetPath(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetPathGradientTransform(GpPathGradient *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetPenTransform(GpPen *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetTextureTransform(GpTexture *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipResetWorldTransform(GpGraphics *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRestoreGraphics(GpGraphics *,GraphicsState)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipReversePath(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRotateLineTransform(GpLineGradient *,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRotateMatrix(GpMatrix *,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRotatePathGradientTransform(GpPathGradient *,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRotatePenTransform(GpPen *,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRotateTextureTransform(GpTexture *,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipRotateWorldTransform(GpGraphics *,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSaveAdd(GpImage *,GDIPCONST EncoderParameters *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSaveAddImage(GpImage *,GpImage *,GDIPCONST EncoderParameters *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSaveGraphics(GpGraphics *,GraphicsState *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSaveImageToFile(GpImage *,GDIPCONST WCHAR *,GDIPCONST CLSID *,GDIPCONST EncoderParameters *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSaveImageToStream(GpImage *,IStream *,GDIPCONST CLSID *,GDIPCONST EncoderParameters *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipScaleLineTransform(GpLineGradient *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipScaleMatrix(GpMatrix *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipScalePathGradientTransform(GpPathGradient *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipScalePenTransform(GpPen *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipScaleTextureTransform(GpTexture *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipScaleWorldTransform(GpGraphics *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetAdjustableArrowCapFillState(GpAdjustableArrowCap *,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetAdjustableArrowCapHeight(GpAdjustableArrowCap *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetAdjustableArrowCapMiddleInset(GpAdjustableArrowCap *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetAdjustableArrowCapWidth(GpAdjustableArrowCap *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetClipGraphics(GpGraphics *,GpGraphics *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetClipHrgn(GpGraphics *,HRGN,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetClipPath(GpGraphics *,GpPath *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetClipRect(GpGraphics *,REAL,REAL,REAL,REAL,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetClipRectI(GpGraphics *,INT,INT,INT,INT,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetClipRegion(GpGraphics *,GpRegion *,CombineMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCompositingMode(GpGraphics *,CompositingMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCompositingQuality(GpGraphics *,CompositingQuality)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCustomLineCapBaseCap(GpCustomLineCap *,GpLineCap)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCustomLineCapBaseInset(GpCustomLineCap *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCustomLineCapStrokeCaps(GpCustomLineCap *,GpLineCap,GpLineCap)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCustomLineCapStrokeJoin(GpCustomLineCap *,GpLineJoin)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetCustomLineCapWidthScale(GpCustomLineCap *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetEffectParameters(CGpEffect *,GDIPCONST VOID *,UINT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetEmpty(GpRegion *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesCachedBackground(GpImageAttributes *,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesColorKeys(GpImageAttributes *,ColorAdjustType,BOOL,ARGB,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesColorMatrix(GpImageAttributes *,ColorAdjustType,BOOL,GDIPCONST ColorMatrix *,GDIPCONST ColorMatrix *,ColorMatrixFlags)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesGamma(GpImageAttributes *,ColorAdjustType,BOOL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesICMMode(GpImageAttributes *,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesNoOp(GpImageAttributes *,ColorAdjustType,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesOutputChannel(GpImageAttributes *,ColorAdjustType,BOOL,ColorChannelFlags)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesOutputChannelColorProfile(GpImageAttributes *,ColorAdjustType,BOOL,GDIPCONST WCHAR *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesRemapTable(GpImageAttributes *,ColorAdjustType,BOOL,UINT,GDIPCONST ColorMap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesThreshold(GpImageAttributes *,ColorAdjustType,BOOL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesToIdentity(GpImageAttributes *,ColorAdjustType)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImageAttributesWrapMode(GpImageAttributes *,WrapMode,ARGB,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetImagePalette(GpImage *,GDIPCONST ColorPalette *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetInfinite(GpRegion *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetInterpolationMode(GpGraphics *,InterpolationMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineBlend(GpLineGradient *,GDIPCONST REAL *,GDIPCONST REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineColors(GpLineGradient *,ARGB,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineGammaCorrection(GpLineGradient *,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineLinearBlend(GpLineGradient *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLinePresetBlend(GpLineGradient *,GDIPCONST ARGB *,GDIPCONST REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineSigmaBlend(GpLineGradient *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineTransform(GpLineGradient *,GDIPCONST GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetLineWrapMode(GpLineGradient *,GpWrapMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetMatrixElements(GpMatrix *,REAL,REAL,REAL,REAL,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetMetafileDownLevelRasterizationLimit(GpMetafile *,UINT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPageScale(GpGraphics *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPageUnit(GpGraphics *,GpUnit)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathFillMode(GpPath *,GpFillMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientBlend(GpPathGradient *,GDIPCONST REAL *,GDIPCONST REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientCenterColor(GpPathGradient *,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientCenterPoint(GpPathGradient *,GDIPCONST GpPointF *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientCenterPointI(GpPathGradient *,GDIPCONST GpPoint *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientFocusScales(GpPathGradient *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientGammaCorrection(GpPathGradient *,BOOL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientLinearBlend(GpPathGradient *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientPath(GpPathGradient *,GDIPCONST GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientPresetBlend(GpPathGradient *,GDIPCONST ARGB *,GDIPCONST REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientSigmaBlend(GpPathGradient *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientSurroundColorsWithCount(GpPathGradient *,GDIPCONST ARGB *,INT *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientTransform(GpPathGradient *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathGradientWrapMode(GpPathGradient *,GpWrapMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPathMarker(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenBrushFill(GpPen *,GpBrush *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenColor(GpPen *,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenCompoundArray(GpPen *,GDIPCONST REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenCustomEndCap(GpPen *,GpCustomLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenCustomStartCap(GpPen *,GpCustomLineCap *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenDashArray(GpPen *,GDIPCONST REAL *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenDashCap197819(GpPen *,GpDashCap)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenDashOffset(GpPen *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenDashStyle(GpPen *,GpDashStyle)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenEndCap(GpPen *,GpLineCap)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenLineCap197819(GpPen *,GpLineCap,GpLineCap,GpDashCap)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenLineJoin(GpPen *,GpLineJoin)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenMiterLimit(GpPen *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenMode(GpPen *,GpPenAlignment)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenStartCap(GpPen *,GpLineCap)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenTransform(GpPen *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenUnit(GpPen *,GpUnit)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPenWidth(GpPen *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPixelOffsetMode(GpGraphics *,PixelOffsetMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetPropertyItem(GpImage *,GDIPCONST PropertyItem *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetRenderingOrigin(GpGraphics *,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetSmoothingMode(GpGraphics *,SmoothingMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetSolidFillColor(GpSolidFill *,ARGB)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatAlign(GpStringFormat *,StringAlignment)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatDigitSubstitution(GpStringFormat *,LANGID,StringDigitSubstitute)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatFlags(GpStringFormat *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatHotkeyPrefix(GpStringFormat *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatLineAlign(GpStringFormat *,StringAlignment)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatMeasurableCharacterRanges(GpStringFormat *,INT,GDIPCONST CharacterRange *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatTabStops(GpStringFormat *,REAL,INT,GDIPCONST REAL *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetStringFormatTrimming(GpStringFormat *,StringTrimming)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetTextContrast(GpGraphics *,UINT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetTextRenderingHint(GpGraphics *,TextRenderingHint)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetTextureTransform(GpTexture *,GDIPCONST GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetTextureWrapMode(GpTexture *,GpWrapMode)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipSetWorldTransform(GpGraphics *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipShearMatrix(GpMatrix *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipStartPathFigure(GpPath *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipStringFormatGetGenericDefault(GpStringFormat **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipStringFormatGetGenericTypographic(GpStringFormat **)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTestControl(GpTestControlEnum,void *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTransformMatrixPoints(GpMatrix *,GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTransformMatrixPointsI(GpMatrix *,GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTransformPath(GpPath *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTransformPoints(GpGraphics *,GpCoordinateSpace,GpCoordinateSpace,GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTransformPointsI(GpGraphics *,GpCoordinateSpace,GpCoordinateSpace,GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTransformRegion(GpRegion *,GpMatrix *)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateClip(GpGraphics *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateClipI(GpGraphics *,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateLineTransform(GpLineGradient *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateMatrix(GpMatrix *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslatePathGradientTransform(GpPathGradient *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslatePenTransform(GpPen *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateRegion(GpRegion *,REAL,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateRegionI(GpRegion *,INT,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateTextureTransform(GpTexture *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipTranslateWorldTransform(GpGraphics *,REAL,REAL,GpMatrixOrder)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipVectorTransformMatrixPoints(GpMatrix *,GpPointF *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipVectorTransformMatrixPointsI(GpMatrix *,GpPoint *,INT)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipWarpPath(GpPath *,GpMatrix *,GDIPCONST GpPointF *,INT,REAL,REAL,REAL,REAL,WarpMode,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipWidenPath(GpPath *,GpPen *,GpMatrix *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdipWindingModeOutline(GpPath *,GpMatrix *,REAL)GpStatus WINGDIPAPI <gdiplusflat.h>
GdiRegisterDdraw(PGDIREGISTERDDRAWPACKET pPacket,GDIMARSHALLOC * ppfnGdiAlloc)WINGDIAPI BOOL WINAPI <wingdi.h>
GdiSetBatchLimit(DWORD dw) WINGDIAPI DWORD WINAPI <wingdi.h>
GdiTransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GdiUnmarshal(PVOID pData,ULONG ulFlags)WINGDIAPI HGDIOBJ WINAPI <wingdi.h>
GenerateConsoleCtrlEvent(DWORD dwCtrlEvent,DWORD dwProcessGroupId) WINBASEAPI WINBOOL WINAPI <wincon.h>
GenerateCopyFilePaths(LPCWSTR pszPrinterName,LPCWSTR pszDirectory,LPBYTE pSplClientInfo,DWORD dwLevel,LPWSTR pszSourceDir,LPDWORD pcchSourceDirSize,LPWSTR pszTargetDir,LPDWORD pcchTargetDirSize,DWORD dwFlags)<winsplp.h>
GenerateCustomTones(TAPI_CUSTOMTONE * pToneList,__LONG32 lNumTones,__LONG32 lDuration)virtual HRESULT WINAPI <tapi3if.h>
GenerateCustomTonesByCollection(ITCollection2 * pCustomToneCollection,__LONG32 lDuration)virtual HRESULT WINAPI <tapi3if.h>
GenerateDigits(BSTR pDigits,TAPI_DIGITMODE DigitMode)virtual HRESULT WINAPI <tapi3if.h>
GenerateDigits2(BSTR pDigits,TAPI_DIGITMODE DigitMode,__LONG32 lDuration)virtual HRESULT WINAPI <tapi3if.h>
GenerateGPNotification(WINBOOL bMachine,LPCWSTR lpwszMgmtProduct,DWORD dwMgmtProductOptions) USERENVAPI DWORD WINAPI <userenv.h>
GenerateReport(GPMReportType gpmReportType,VARIANT * pvarGPMProgress,VARIANT * pvarGPMCancel,IGPMResult ** ppIGPMResult)virtual HRESULT WINAPI <gpmgmt.h>
GenerateReportToFile(GPMReportType gpmReportType,BSTR bstrTargetFilePath,IGPMResult ** ppIGPMResult)virtual HRESULT WINAPI <gpmgmt.h>
GenerateTone(TAPI_TONEMODE ToneMode,__LONG32 lDuration)virtual HRESULT WINAPI <tapi3if.h>
GenerateWordForms(const WCHAR * pwcInBuf,ULONG cwc,IWordFormSink * pStemSink)virtual HRESULT WINAPI <indexsrv.h>
GenericDefault()__inline__ const StringFormat<gdiplusstringformat.h>
GenericMonospace()__inline__ const FontFamily<gdiplusimpl.h>
GenericSansSerif()__inline__ const FontFamily<gdiplusimpl.h>
GenericSerif()__inline__ const FontFamily<gdiplusimpl.h>
GenericTypographic()__inline__ const StringFormat<gdiplusstringformat.h>
GestureAt(short x,short y,__LONG32 * pdwReqID)virtual HRESULT WINAPI <agtsvr.h>
GestureAt(short x,short y,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <agtsvr.h>
Get()<corewrappers.h>
GET_ACTIVATION_TYPE(Y)<aclui.h>
GET_ADRPARM_VERSION(ulFlags)<wabdefs.h>
GET_ALG_CLASS(x)<wincrypt.h>
GET_ALG_SID(x)<wincrypt.h>
GET_ALG_TYPE(x)<wincrypt.h>
GET_APPCOMMAND_LPARAM(lParam)<winuser.h>
GET_BIT(X,Y)<bthdef.h>
GET_CODEPAGEINFO(pGTT)<prntfont.h>
GET_DEVICE_CHANGE_LPARAM(lParam)<winuser.h>
GET_DEVICE_CHANGE_WPARAM(wParam)<winuser.h>
GET_DEVICE_LPARAM(lParam)<winuser.h>
GET_DIDEVICE_SUBTYPE(dwDevType)<dinput.h>
GET_DIDEVICE_TYPE(dwDevType)<dinput.h>
GET_EM_LINESCROLL_MPS(vert,horz)<windowsx.h>
GET_EM_SETSEL_END(wp,lp)<windowsx.h>
GET_EM_SETSEL_MPS(iStart,iEnd)<windowsx.h>
GET_EM_SETSEL_START(wp,lp)<windowsx.h>
GET_EXTTEXTMETRIC(pUFM)<prntfont.h>
GET_FLAGS_LPARAM(lParam)<winuser.h>
GET_GLYPHRUN(pGTT)<prntfont.h>
GET_IFIMETRICS(pUFM)<prntfont.h>
GET_IRQL(rOldIrql)<kxia64.h>
GET_IRQL_FOR_VECTOR(pGet,rIrql,rVector)<kxia64.h>
GET_KERNDATA(pUFM)<prntfont.h>
GET_KEYSTATE_LPARAM(lParam)<winuser.h>
GET_KEYSTATE_WPARAM(wParam)<winuser.h>
GET_LPARAM(wp,lp)<windowsx.h>
GET_LPDDRAWSURFACE_GBL_MORE(psurf_gbl)<ddrawi.h>
GET_MAPTABLE(pGTT)<prntfont.h>
GET_NCHITTEST_WPARAM(wParam)<winuser.h>
GET_PAGE_TYPE(X)<aclui.h>
GET_POINTERID_WPARAM(wParam)<winuser.h>
GET_RAWINPUT_CODE_WPARAM(wParam)<winuser.h>
GET_SC_WPARAM(wParam)<winuser.h>
GET_SELECT_CMD(pUni)<prntfont.h>
GET_SELECT_CONFIGURATION_REQUEST_SIZE(totalInterfaces, totalPipes)<usbdlib.h>
GET_SELECT_INTERFACE_REQUEST_SIZE(totalPipes)<usbdlib.h>
GET_STIDCOMMON_CAPS(dwGenericCaps)<sti.h>
GET_STIDEVICE_SUBTYPE(dwDevType)<sti.h>
GET_STIDEVICE_TYPE(dwDevType)<sti.h>
GET_STIVENDOR_CAPS(dwGenericCaps)<sti.h>
GET_STIVER_MAJOR(dwVersion)<sti.h>
GET_STIVER_MINOR(dwVersion)<sti.h>
GET_UNIDRVINFO(pUFM)<prntfont.h>
GET_UNSELECT_CMD(pUni)<prntfont.h>
GET_USBD_INTERFACE_SIZE(numEndpoints)<usbdlib.h>
GET_USER_DATA_REP(f)<rpcndr.h>
GET_VECTOR_FOR_IRQL(pGet,rVector,rIrql)<kxia64.h>
GET_VIDEO_SCATTERGATHER(ppDma)<video.h>
GET_WHEEL_DELTA_WPARAM(wParam)<winuser.h>
GET_WIDTHTABLE(pUFM)<prntfont.h>
GET_WM_ACTIVATE_FMINIMIZED(wp,lp)<windowsx.h>
GET_WM_ACTIVATE_HWND(wp,lp)<windowsx.h>
GET_WM_ACTIVATE_MPS(s,fmin,hwnd)<windowsx.h>
GET_WM_ACTIVATE_STATE(wp,lp)<windowsx.h>
GET_WM_CHANGECBCHAIN_HWNDNEXT(wp,lp)<windowsx.h>
GET_WM_CHARTOITEM_CHAR(wp,lp)<windowsx.h>
GET_WM_CHARTOITEM_HWND(wp,lp)<windowsx.h>
GET_WM_CHARTOITEM_MPS(ch,pos,hwnd)<windowsx.h>
GET_WM_CHARTOITEM_POS(wp,lp)<windowsx.h>
GET_WM_COMMAND_CMD(wp,lp)<windowsx.h>
GET_WM_COMMAND_HWND(wp,lp)<windowsx.h>
GET_WM_COMMAND_ID(wp,lp)<windowsx.h>
GET_WM_COMMAND_MPS(id,hwnd,cmd)<windowsx.h>
GET_WM_CTLCOLOR_HDC(wp,lp,msg)<windowsx.h>
GET_WM_CTLCOLOR_HWND(wp,lp,msg)<windowsx.h>
GET_WM_CTLCOLOR_MPS(hdc,hwnd,type)<windowsx.h>
GET_WM_CTLCOLOR_MSG(type)<windowsx.h>
GET_WM_CTLCOLOR_TYPE(wp,lp,msg)<windowsx.h>
GET_WM_HSCROLL_CODE(wp,lp)<windowsx.h>
GET_WM_HSCROLL_HWND(wp,lp)<windowsx.h>
GET_WM_HSCROLL_MPS(code,pos,hwnd)<windowsx.h>
GET_WM_HSCROLL_POS(wp,lp)<windowsx.h>
GET_WM_MDIACTIVATE_FACTIVATE(hwnd,wp,lp)<windowsx.h>
GET_WM_MDIACTIVATE_HWNDACTIVATE(wp,lp)<windowsx.h>
GET_WM_MDIACTIVATE_HWNDDEACT(wp,lp)<windowsx.h>
GET_WM_MDIACTIVATE_MPS(f,hwndD,hwndA)<windowsx.h>
GET_WM_MDISETMENU_MPS(hmenuF,hmenuW)<windowsx.h>
GET_WM_MENUCHAR_CHAR(wp,lp)<windowsx.h>
GET_WM_MENUCHAR_FMENU(wp,lp)<windowsx.h>
GET_WM_MENUCHAR_HMENU(wp,lp)<windowsx.h>
GET_WM_MENUCHAR_MPS(ch,hmenu,f)<windowsx.h>
GET_WM_MENUSELECT_CMD(wp,lp)<windowsx.h>
GET_WM_MENUSELECT_FLAGS(wp,lp)<windowsx.h>
GET_WM_MENUSELECT_HMENU(wp,lp)<windowsx.h>
GET_WM_MENUSELECT_MPS(cmd,f,hmenu)<windowsx.h>
GET_WM_PARENTNOTIFY2_MPS(msg,x,y)<windowsx.h>
GET_WM_PARENTNOTIFY_HWNDCHILD(wp,lp)<windowsx.h>
GET_WM_PARENTNOTIFY_ID(wp,lp)<windowsx.h>
GET_WM_PARENTNOTIFY_MPS(msg,id,hwnd)<windowsx.h>
GET_WM_PARENTNOTIFY_MSG(wp,lp)<windowsx.h>
GET_WM_PARENTNOTIFY_X(wp,lp)<windowsx.h>
GET_WM_PARENTNOTIFY_Y(wp,lp)<windowsx.h>
GET_WM_VKEYTOITEM_CODE(wp,lp)<windowsx.h>
GET_WM_VKEYTOITEM_HWND(wp,lp)<windowsx.h>
GET_WM_VKEYTOITEM_ITEM(wp,lp)<windowsx.h>
GET_WM_VKEYTOITEM_MPS(code,item,hwnd)<windowsx.h>
GET_WM_VSCROLL_CODE(wp,lp)<windowsx.h>
GET_WM_VSCROLL_HWND(wp,lp)<windowsx.h>
GET_WM_VSCROLL_MPS(code,pos,hwnd)<windowsx.h>
GET_WM_VSCROLL_POS(wp,lp)<windowsx.h>
GET_WPARAM(wp,lp)<windowsx.h>
GET_X_LPARAM(lp)<windowsx.h>
GET_XBUTTON_WPARAM(wParam)<winuser.h>
GET_Y_LPARAM(lp)<windowsx.h>
GetA()	BYTE <gdipluscolor.h>
GetAcceptExSockaddrs(PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,struct sockaddr ** LocalSockaddr,LPINT LocalSockaddrLength,struct sockaddr ** RemoteSockaddr,LPINT RemoteSockaddrLength) VOID WINAPI <winsock.h>
GetAcceptLanguages(LPSTR psz,DWORD * pcch) LWSTDAPI <shlwapi.h>
GetAcceptLanguagesA(LPSTR psz,DWORD * pcch) LWSTDAPI <shlwapi.h>
GetAcceptLanguagesW(LPWSTR psz,DWORD * pcch) LWSTDAPI <shlwapi.h>
GetAccountInformation(LPWSTR * ppwszAccountName)virtual HRESULT WINAPI <mstask.h>
GetAccumulatedCost(LPCOLESTR pwszRowsetName,ULONG * pcCostLimits,DBCOST ** prgCostLimits)virtual HRESULT WINAPI <oledbdep.h>
GetAce(PACL pAcl,DWORD dwAceIndex,LPVOID * pAce) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetAclInformation(PACL pAcl,LPVOID pAclInformation,DWORD nAclInformationLength,ACL_INFORMATION_CLASS dwAclInformationClass) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetACP(void) WINBASEAPI UINT WINAPI <winnls.h>
GetActivationFactory(HSTRING classid,T ** factory)template<roapi.h>
GetActive(short * psState)virtual HRESULT WINAPI <agtsvr.h>
GetActiveIMM(IActiveIMMApp ** ppActiveIMM)virtual HRESULT WINAPI <mshtmlc.h>
GetActiveObject(const CLSID & rclsid) HRESULT <oleauto.h>
GetActiveObject(LPCSTR clsidStringA) HRESULT <oleauto.h>
GetActiveObject(LPCWSTR clsidString) HRESULT <oleauto.h>
GetActiveObject(REFCLSID rclsid,void * pvReserved,IUnknown ** ppunk)WINOLEAUTAPI <oleauto.h>
GetActiveProcessorCount(WORD GroupNumber) WINBASEAPI DWORD WINAPI <winbase.h>
GetActiveProcessorGroupCount(VOID) WINBASEAPI WORD WINAPI <winbase.h>
GetActivePwrScheme(PUINT) BOOLEAN WINAPI <powrprof.h>
GetActiveWindow(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetActivityId(BSTR * pbstrActivityId)virtual HRESULT WINAPI <comsvcs.h>
GetActivityId(GUID * pGUID)virtual HRESULT WINAPI <comsvcs.h>
GetActivityPerThread(DWORD * activitiesPerThread)virtual HRESULT WINAPI <comsvcs.h>
GetActivityRatio(DOUBLE * activityRatio)virtual HRESULT WINAPI <comsvcs.h>
GetActualDeinterlaceMode(DWORD dwStreamID,LPGUID lpDeinterlaceMode)virtual HRESULT WINAPI <strmif.h>
GetAdapterIndex(LPWSTR AdapterName,PULONG IfIndex) DWORD WINAPI <iphlpapi.h>
GetAdapterNameFromNumber(UINT AdapterNumber,LPTSTR pNdisName) LLC_STATUS WINAPI <dlcapi.h>
GetAdapterNumberFromName(LPTSTR pNdisName,UINT * AdapterNumber) LLC_STATUS WINAPI <dlcapi.h>
GetAdapterOrderMap(VOID) PIP_ADAPTER_ORDER_MAP WINAPI <iphlpapi.h>
GetAdaptersAddresses(ULONG Family,ULONG Flags,PVOID Reserved,PIP_ADAPTER_ADDRESSES AdapterAddresses,PULONG SizePointer) ULONG WINAPI <iphlpapi.h>
GetAdaptersInfo(PIP_ADAPTER_INFO AdapterInfo,PULONG SizePointer) ULONG WINAPI <iphlpapi.h>
GetAdditionalParams(LPWSTR * ppwzAdditionalParams)virtual HRESULT WINAPI <hlink.h>
GetAddress()inline VARIANT<comutil.h>
GetAddressByName(DWORD dwNameSpace,LPGUID lpServiceType,LPSTR lpServiceName,LPINT lpiProtocols,DWORD dwResolution,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,LPVOID lpCsaddrBuffer,LPDWORD lpdwBufferLength,LPSTR lpAliasBuffer,LPDWORD lpdwAliasBufferLength) INT WINAPI <nspapi.h>
GetAddressByNameA(DWORD dwNameSpace,LPGUID lpServiceType,LPSTR lpServiceName,LPINT lpiProtocols,DWORD dwResolution,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,LPVOID lpCsaddrBuffer,LPDWORD lpdwBufferLength,LPSTR lpAliasBuffer,LPDWORD lpdwAliasBufferLength) INT WINAPI <nspapi.h>
GetAddressByNameW(DWORD dwNameSpace,LPGUID lpServiceType,LPWSTR lpServiceName,LPINT lpiProtocols,DWORD dwResolution,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,LPVOID lpCsaddrBuffer,LPDWORD lpdwBufferLength,LPWSTR lpAliasBuffer,LPDWORD lpdwAliasBufferLength) INT WINAPI <nspapi.h>
GetAddressOf()       InterfaceType<client.h>
getaddrinfo(const char * nodename,const char * servname,const struct addrinfo * hints,struct addrinfo ** res) WINSOCK_API_LINKAGE int WSAAPI <wspiapi.h>
GetAddrInfoEx(PCSTR pName,PCSTR pServiceName,DWORD dwNameSpace,LPGUID lpNspId,const ADDRINFOEXA * pHints,PADDRINFOEXA * ppResult,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
GetAddrInfoExA(PCSTR pName,PCSTR pServiceName,DWORD dwNameSpace,LPGUID lpNspId,const ADDRINFOEXA * pHints,PADDRINFOEXA * ppResult,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
GetAddrInfoExW(PCWSTR pName,PCWSTR pServiceName,DWORD dwNameSpace,LPGUID lpNspId,const ADDRINFOEXW * pHints,PADDRINFOEXW * ppResult,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
GetAddrInfoW(PCWSTR pNodeName,PCWSTR pServiceName,const ADDRINFOW * pHints,PADDRINFOW * ppResult) WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
GetAdjustedPalette(ColorPalette * colorPalette,ColorAdjustType type)	Status <gdiplusimageattributes.h>
GetAlgName(LONG algID,BSTR * pbstr)virtual HRESULT WINAPI <xenroll.h>
GetAlgNameWStr(LONG algID,LPWSTR * ppwsz)virtual HRESULT WINAPI <xenroll.h>
GetAlignment()	StringAlignment <tom.h>
GetAlignment(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetALinkMessageDll() HINSTANCE WINAPI <alink.h>
GetAllAccessRights(LPWSTR lpProperty,PACTRL_ACCESSW_ALLOCATE_ALL_NODES * ppAccessList,PTRUSTEEW * ppOwner,PTRUSTEEW * ppGroup)virtual HRESULT WINAPI <iaccess.h>
GetAllAuditRights(LPWSTR lpProperty,PACTRL_AUDITW * ppAuditList)virtual HRESULT WINAPI <iaccess.h>
GetAllCaps(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetAllData(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD dwMDAttributes,DWORD dwMDUserType,DWORD dwMDDataType,DWORD * pdwMDNumDataEntries,DWORD * pdwMDDataSetNumber,DWORD dwMDBufferSize,unsigned char * pbMDBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <iadmw.h>
GetAllGPRMs(GPRMARRAY * pRegisterArray)virtual HRESULT WINAPI <strmif.h>
GetAllItemData(VARIANT * pdwItemIndices,VARIANT * plConfidences,VARIANT * pbszText)virtual HRESULT WINAPI <agtsvr.h>
GetAllocateBuffers(WINBOOL * pbAllocBuffers)virtual HRESULT WINAPI <tapi3ds.h>
GetAllocatorProperties(ALLOCATOR_PROPERTIES * pAllocProperties)virtual HRESULT WINAPI <tapi3ds.h>
GetAllocatorProperties(ALLOCATOR_PROPERTIES * pprop)virtual HRESULT WINAPI <tapi3ds.h>
GetAllPropertyItems(UINT totalBufferSize,UINT numProperties,PropertyItem * allItems)__inline__ Status Image::<gdiplusimpl.h>
GetAllSettings(IStream * __MIDL_0016)virtual HRESULT WINAPI <strmif.h>
GetAllSPRMs(SPRMARRAY * pRegisterArray)virtual HRESULT WINAPI <strmif.h>
GetAllUsersProfileDirectory(LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetAllUsersProfileDirectoryA(LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetAllUsersProfileDirectoryW(LPWSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetAlpha()	BYTE <strmif.h>
GetAlpha(DWORD dwStreamID,float * pAlpha)virtual HRESULT WINAPI <strmif.h>
GetAlphabetHRC(HRC,LPALC,LPBYTE) int WINAPI <penwin.h>
GetAlphabetPriorityHRC(HRC,LPALC,LPBYTE) int WINAPI <penwin.h>
GetAlphaBitmapParameters(PVMRALPHABITMAP pBmpParms)virtual HRESULT WINAPI <strmif.h>
GetAlternateWordsHRCRESULT(HRCRESULT,UINT,UINT,LPHRCRESULT,UINT) int WINAPI <penwin.h>
GetAltMonthNames(LCID lcid,LPOLESTR ** prgp)WINOLEAUTAPI <oleauto.h>
GetAltTabInfo(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetAltTabInfoA(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetAltTabInfoW(HWND hwnd,int iItem,PALTTABINFO pati,LPWSTR pszItemText,UINT cchItemText) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetAnalysis(ULONG uAnalysisType,ULONG uFlags,LPVOID * pAnalysis)virtual HRESULT WINAPI <wmiutils.h>
GetAncestor(HWND hwnd,UINT gaFlags) WINUSERAPI HWND WINAPI <winuser.h>
GetAndClearDirtyRange(DWORD dwCookie,IMarkupPointer * pIPointerBegin,IMarkupPointer * pIPointerEnd)virtual HRESULT WINAPI <mshtmlc.h>
GetAnimation(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetAnimationNames(IUnknown ** punkEnum)virtual HRESULT WINAPI <agtsvr.h>
GetAnycastIpAddressEntry(PMIB_ANYCASTIPADDRESS_ROW Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetAnycastIpAddressTable(ADDRESS_FAMILY Family,PMIB_ANYCASTIPADDRESS_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetAnyDCName(BSTR * pszDCName)virtual HRESULT WINAPI <iads.h>
GetAnyNetworkAccess(WINBOOL * pbAnyNetworkAccess)virtual HRESULT WINAPI <txcoord.h>
GetAppContainerAce(PACL Acl,DWORD StartingAceIndex,PVOID * AppContainerAce,DWORD * AppContainerAceIndex) WINADVAPI WINBOOL APIENTRY <securitybaseapi.h>
GetAppContainerFolderPath(PCWSTR pszAppContainerSid,PWSTR * ppszPath) USERENVAPI HRESULT WINAPI <userenv.h>
GetAppContainerNamedObjectPath(HANDLE Token,PSID AppContainerSid,ULONG ObjectPathLength,LPWSTR ObjectPath,PULONG ReturnLength) WINBOOL <securityappcontainer.h>
GetAppContainerRegistryLocation(REGSAM desiredAccess,PHKEY phAppContainerKey) USERENVAPI HRESULT WINAPI <userenv.h>
GetAppInfo(PAPPINFODATA pai)virtual HRESULT WINAPI <shappmgr.h>
GetApplicationId(BSTR * __MIDL_0012)virtual HRESULT WINAPI <comsvcs.h>
GetApplicationId(GUID * pGuid)virtual HRESULT WINAPI <comsvcs.h>
GetApplicationInstanceId(BSTR * __MIDL_0013)virtual HRESULT WINAPI <comsvcs.h>
GetApplicationInstanceId(GUID * pGuid)virtual HRESULT WINAPI <comsvcs.h>
GetApplicationName(LPWSTR * ppwszApplicationName)virtual HRESULT WINAPI <mstask.h>
GetApplicationRecoveryCallback(HANDLE hProcess,APPLICATION_RECOVERY_CALLBACK * pRecoveryCallback,PVOID * ppvParameter,PDWORD pdwPingInterval,PDWORD pdwFlags) WINBASEAPI HRESULT WINAPI <winbase.h>
GetApplicationRestartSettings(HANDLE hProcess,PWSTR pwzCommandline,PDWORD pcchSize,PDWORD pdwFlags) WINBASEAPI HRESULT WINAPI <winbase.h>
GetAppliedGPOList(DWORD dwFlags,LPCSTR pMachineName,PSID pSidUser,GUID * pGuidExtension,PGROUP_POLICY_OBJECTA * ppGPOList) USERENVAPI DWORD WINAPI <userenv.h>
GetAppliedGPOListA(DWORD dwFlags,LPCSTR pMachineName,PSID pSidUser,GUID * pGuidExtension,PGROUP_POLICY_OBJECTA * ppGPOList) USERENVAPI DWORD WINAPI <userenv.h>
GetAppliedGPOListW(DWORD dwFlags,LPCWSTR pMachineName,PSID pSidUser,GUID * pGuidExtension,PGROUP_POLICY_OBJECTW * ppGPOList) USERENVAPI DWORD WINAPI <userenv.h>
GetApproximatePosition(HCHAPTER hReserved,DBBKMARK cbBookmark,const BYTE * pBookmark,DBCOUNTITEM * pulPosition,DBCOUNTITEM * pcRows)virtual HRESULT WINAPI <oledb.h>
GetArcDirection(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetArchivedKey(const BSTR strConfig,LONG RequestId,LONG Flags,BSTR * pstrArchivedKey)virtual HRESULT WINAPI <certadm.h>
GetAspectRatioFilterEx(HDC hdc,LPSIZE lpsize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetAspectRatioMode(DWORD * lpAspectRatioMode)virtual HRESULT WINAPI <strmif.h>
GetAspectRatioMode(LPDWORD lpdwARMode)virtual HRESULT WINAPI <strmif.h>
GetAssemblyIdentityFromFile(LPCWSTR,REFIID,IUnknown **)HRESULT WINAPI <fusion.h>
GetAssignedScopesPage(LONG lOptions,LONG PageSize,VARIANT * pvarCursor,VARIANT * pvarScopeNames)virtual HRESULT WINAPI <azroles.h>
GetAssocAt(ARG_KEY key,UINT & nHash)CDXMap<dxtmpl.h>
GetAssocAt(ARG_KEY,UINT &) CAssoc<dxtmpl.h>
GetAssociatedItem(BSTR CalendarLocation,BSTR UserName,BSTR Password,IDispatch ** Item)virtual HRESULT WINAPI <cdoex.h>
GetAStr(__LONG32 lSrcPos,__LONG32 lSrcLen,UINT uCodePageIn,UINT * puCodePageOut,CHAR * pszDest,__LONG32 cchDest,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
GetAsyncKeyState(int vKey) WINUSERAPI SHORT WINAPI <winuser.h>
GetAt(DXLISTPOS position)inline TYPE CDXList<dxtmpl.h>
GetAt(int nIndex)inline TYPE CDXArray<dxtmpl.h>
GetAtIStreamMemory(LPSTREAM pStrm,LPBYTEARRAY * ppMem)virtual HRESULT WINAPI <scardssp.h>
GetAtomName(ATOM nAtom,LPSTR lpBuffer,int nSize) WINBASEAPI UINT WINAPI <winbase.h>
GetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize) WINBASEAPI UINT WINAPI <winbase.h>
GetAtomNameW(ATOM nAtom,LPWSTR lpBuffer,int nSize) WINBASEAPI UINT WINAPI <winbase.h>
GetAttachedComputer(BSTR * bstrComputerName)virtual HRESULT WINAPI <sdoias.h>
GetAttribIMsgOnIStg(LPVOID lpObject,LPSPropTagArray lpPropTagArray,LPSPropAttrArray * lppPropAttrArray) STDAPI <imessage.h>
GetAttributeID(BSTR bstrAttributeName,ATTRIBUTEID * pId)virtual HRESULT WINAPI <sdoias.h>
GetAttributeInfo(ATTRIBUTEID Id,VARIANT * pInfoIDs,VARIANT * pInfoValues)virtual HRESULT WINAPI <sdoias.h>
GetAudioAttributes(ULONG ulStream,DVD_AudioAttributes * pATR)virtual HRESULT WINAPI <strmif.h>
GetAudioLanguage(ULONG ulStream,LCID * pLanguage)virtual HRESULT WINAPI <strmif.h>
GetAuditedPermissionsFromAcl(PACL pacl,PTRUSTEE_A pTrustee,PACCESS_MASK pSuccessfulAuditedRights,PACCESS_MASK pFailedAuditRights) WINADVAPI DWORD WINAPI <aclapi.h>
GetAuditedPermissionsFromAclA(PACL pacl,PTRUSTEE_A pTrustee,PACCESS_MASK pSuccessfulAuditedRights,PACCESS_MASK pFailedAuditRights) WINADVAPI DWORD WINAPI <aclapi.h>
GetAuditedPermissionsFromAclW(PACL pacl,PTRUSTEE_W pTrustee,PACCESS_MASK pSuccessfulAuditedRights,PACCESS_MASK pFailedAuditRights) WINADVAPI DWORD WINAPI <aclapi.h>
GetAuthenticationLevel(AUTHENTICATION_LEVEL * pAuthLevel)virtual HRESULT WINAPI <txcoord.h>
GetAutoPopupMenu(__LONG32 * pbAutoPopupMenu)virtual HRESULT WINAPI <agtsvr.h>
GetAutoRotationState(PAR_STATE pState) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetAvailableColumns(DBORDINAL * pcOptColumns,DBID ** prgOptColumns)virtual HRESULT WINAPI <oledb.h>
GetAvailableModes(LONG * plModes)virtual HRESULT WINAPI <strmif.h>
GetAvailableMonitors(VMRMONITORINFO * pInfo,DWORD dwMaxInfoArraySize,DWORD * pdwNumDevices)virtual HRESULT WINAPI <strmif.h>
GetAvailableTVAudioModes(LONG * plModes)virtual HRESULT WINAPI <strmif.h>
GetAverageFrameSize(LONG * plAverageSize)virtual HRESULT WINAPI <strmif.h>
GetAxisInfo(DBCOUNTITEM * pcAxes,MDAXISINFO ** prgAxisInfo)virtual HRESULT WINAPI <oledb.h>
GetAxisRowset(IUnknown * pUnkOuter,DBCOUNTITEM iAxis,REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetB()	BYTE <gdipluscolor.h>
GetBackColor(__LONG32 * plBGColor)virtual HRESULT WINAPI <tom.h>
GetBackColor(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetBackground(LPOLESTR pszGroup,MMC_TASK_DISPLAY_OBJECT * pTDO)virtual HRESULT WINAPI <mmc.h>
GetBackgroundClr(COLORREF * lpClrBkg)virtual HRESULT WINAPI <strmif.h>
GetBackgroundColor(Color * color)	Status <gdiplusbrush.h>
GetBackup(BSTR bstrID,IGPMBackup ** ppBackup)virtual HRESULT WINAPI <gpmgmt.h>
GetBackupDir(BSTR bstrBackupDir,IGPMBackupDir ** pIGPMBackupDir)virtual HRESULT WINAPI <gpmgmt.h>
GetBackupType()VSS_BACKUP_TYPE WINAPI <vswriter.h>
GetBaseBrowserData(LPCBASEBROWSERDATA * pbbd)virtual HRESULT WINAPI <shdeprecated.h>
GetBaseCap()__inline__ LineCap CustomLineCap::<gdiplusimpl.h>
GetBaseInset()__inline__ REAL CustomLineCap::<gdiplusimpl.h>
GetBasicErrorInfo(ULONG ulRecordNum,ERRORINFO * pErrorInfo)virtual HRESULT WINAPI <oledb.h>
GetBestInterface(IPAddr dwDestAddr,PDWORD pdwBestIfIndex) DWORD WINAPI <iphlpapi.h>
GetBestInterfaceEx(struct sockaddr * pDestAddr,PDWORD pdwBestIfIndex) DWORD WINAPI <iphlpapi.h>
GetBestRoute(DWORD dwDestAddr,DWORD dwSourceAddr,PMIB_IPFORWARDROW pBestRoute) DWORD WINAPI <iphlpapi.h>
GetBestRoute2(NET_LUID * InterfaceLuid,NET_IFINDEX InterfaceIndex,CONST SOCKADDR_INET * SourceAddress,CONST SOCKADDR_INET * DestinationAddress,ULONG AddressSortOptions,PMIB_IPFORWARD_ROW2 BestRoute,SOCKADDR_INET * BestSourceAddress) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetBinaryType(LPCSTR lpApplicationName,LPDWORD lpBinaryType) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetBinaryTypeA(LPCSTR lpApplicationName,LPDWORD lpBinaryType) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetBinaryTypeW(LPCWSTR lpApplicationName,LPDWORD lpBinaryType) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetBindings(HACCESSOR hAccessor,DBACCESSORFLAGS * pdwAccessorFlags,DBCOUNTITEM * pcBindings,DBBINDING ** prgBindings)virtual HRESULT WINAPI <oledb.h>
GetBindingString(BSTR * pbstrBindingStringOut)virtual HRESULT WINAPI <cluscfgserver.h>
GETBIT(pb,i)<celib.h>
GetBitCount(LONG * pBitCount)virtual HRESULT WINAPI <certenc.h>
GetBitmap(DWORD dwIndex,HBITMAP * phBitmap)virtual HRESULT WINAPI <iedial.h>
GetBitmapBits(HBITMAP hbit,LONG cb,LPVOID lpvBits) WINGDIAPI LONG WINAPI <wingdi.h>
GetBitmapDimensionEx(HBITMAP hbit,LPSIZE lpsize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetBitString(BSTR * pstrBitString)virtual HRESULT WINAPI <certenc.h>
GetBkColor(HDC hdc) WINGDIAPI COLORREF WINAPI <wingdi.h>
GetBkMode(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetBlend(REAL * blendFactors,REAL * blendPositions,INT count)	Status <gdipluspath.h>
GetBlendCount()	INT <gdipluspath.h>
GetBlue()	BYTE <gdipluscolor.h>
GetBold(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetBoolFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,WINBOOL * pBool) DWORD __cdecl <netmon.h>
GetBorderColor(__LONG32 * plBorderColor)virtual HRESULT WINAPI <strmif.h>
GetBorderColor(COLORREF * lpClr)virtual HRESULT WINAPI <strmif.h>
GetBottom()	REAL <gdiplustypes.h>
GetBounds(Rect * bounds,const Matrix * matrix=NULL,const Pen * pen=NULL)	Status <gdiplustypes.h>
GetBounds(Rect * rect)	VOID <gdiplustypes.h>
GetBounds(Rect * rect,const Graphics * graphics)__inline__ Status Region::<gdiplustypes.h>
GetBounds(RectF * bounds,const Matrix * matrix=NULL,const Pen * pen=NULL)	Status <gdiplustypes.h>
GetBounds(RectF * rect)	VOID <gdiplustypes.h>
GetBounds(RectF * rect,const Graphics * graphics)__inline__ Status Region::<gdiplustypes.h>
GetBounds(RectF * srcRect,Unit * srcUnit)__inline__ Status Image::<gdiplustypes.h>
GetBoundsRect(HDC hdc,LPRECT lprect,UINT flags) WINGDIAPI UINT WINAPI <wingdi.h>
GetBoxMappingHRCRESULT(HRCRESULT,UINT,UINT,UINT *) int WINAPI <penwin.h>
GetBoxResultsHRC(HRC,UINT,UINT,UINT,LPBOXRESULTS,WINBOOL) int WINAPI <penwin.h>
GetBrowseContext(IHlinkBrowseContext ** ppihlbc)virtual HRESULT WINAPI <hlink.h>
GetBrowserByIndex(DWORD dwID,IUnknown ** ppunk)virtual HRESULT WINAPI <shdeprecated.h>
GetBrowserIndex(void)virtual DWORD WINAPI <shdeprecated.h>
GetBrowseWindowInfo(HLBWINFO * phlbwi)virtual HRESULT WINAPI <hlink.h>
GetBrushOrgEx(HDC hdc,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetBSTR()inline BSTR<comutil.h>
GetBufferedPaintBits(HPAINTBUFFER hBufferedPaint,RGBQUAD ** ppbBuffer,int * pcxRow)THEMEAPI_<uxtheme.h>
GetBufferedPaintDC(HPAINTBUFFER hBufferedPaint)THEMEAPI_<uxtheme.h>
GetBufferedPaintTargetDC(HPAINTBUFFER hBufferedPaint)THEMEAPI_<uxtheme.h>
GetBufferedPaintTargetRect(HPAINTBUFFER hBufferedPaint,RECT * prc)THEMEAPI_<uxtheme.h>
GetBufferSize(DWORD * pBufferSize)virtual HRESULT WINAPI <tapi3ds.h>
GetBump(LONG * pSpeed,LONG * pDuration)virtual HRESULT WINAPI <strmif.h>
GetBusinessRuleString(BSTR * pbstrBusinessRuleString)virtual HRESULT WINAPI <azroles.h>
GetButtonAtPosition(POINT point,ULONG * pulButtonIndex)virtual HRESULT WINAPI <strmif.h>
GetButtonRect(ULONG ulButton,RECT * pRect)virtual HRESULT WINAPI <strmif.h>
GetButtonState(int idCommand,MMC_BUTTON_STATE nState,WINBOOL * pState)virtual HRESULT WINAPI <mmc.h>
GetBValue(rgb)<wingdi.h>
GetBytesRecvd(VOID) virtual DWORD WINAPI <ilogobj.h>
GetBytesSent(VOID) virtual DWORD WINAPI <ilogobj.h>
GetCACert(DWORD fchain,const wchar_t * pwszAuthority,CERTTRANSBLOB * pctbOut)virtual HRESULT WINAPI <certreqd.h>
GetCACertificate(LONG fExchangeCertificate,const BSTR strConfig,LONG Flags,BSTR * pstrCertificate)virtual HRESULT WINAPI <certcli.h>
GetCachedSigningLevel(HANDLE File,PULONG Flags,PULONG SigningLevel,PUCHAR Thumbprint,PULONG ThumbprintSize,PULONG ThumbprintAlgorithm) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetCachedSlowAppInfo(PSLOWAPPINFO psaid)virtual HRESULT WINAPI <shappmgr.h>
GetCachePath(ASM_CACHE_FLAGS,LPWSTR,PDWORD)HRESULT WINAPI <fusion.h>
GetCalendarInfo(LCID Locale,CALID Calendar,CALTYPE CalType,LPSTR lpCalData,int cchData,LPDWORD lpValue) WINBASEAPI int WINAPI <winnls.h>
GetCalendarInfoA(LCID Locale,CALID Calendar,CALTYPE CalType,LPSTR lpCalData,int cchData,LPDWORD lpValue) WINBASEAPI int WINAPI <winnls.h>
GetCalendarInfoEx(LPCWSTR lpLocaleName,CALID Calendar,LPCWSTR lpReserved,CALTYPE CalType,LPWSTR lpCalData,int cchData,LPDWORD lpValue) WINBASEAPI int WINAPI <winnls.h>
GetCalendarInfoW(LCID Locale,CALID Calendar,CALTYPE CalType,LPWSTR lpCalData,int cchData,LPDWORD lpValue) WINBASEAPI int WINAPI <winnls.h>
GetCallersEflags()<winnt.h>
GetCallInfoBuffer(CALLINFO_BUFFER CallInfoBuffer,DWORD * pdwSize,BYTE ** ppCallInfoBuffer)virtual HRESULT WINAPI <tapi3if.h>
GetCallMediaTypes(void) virtual DWORD <mspaddr.h>
GetCallStack(DWORD *,int,int)void EXPORTDBG __cdecl <mapidbg.h>
GetCandidateListA(HIMC hIMC,DWORD dwIndex,UINT uBufLen,CANDIDATELIST * pCandList,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetCandidateListCountA(HIMC hIMC,DWORD * pdwListSize,DWORD * pdwBufLen)virtual HRESULT WINAPI <mshtmlc.h>
GetCandidateListCountW(HIMC hIMC,DWORD * pdwListSize,DWORD * pdwBufLen)virtual HRESULT WINAPI <mshtmlc.h>
GetCandidateListW(HIMC hIMC,DWORD dwIndex,UINT uBufLen,CANDIDATELIST * pCandList,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetCandidateWindow(HIMC hIMC,DWORD dwIndex,CANDIDATEFORM * pCandidate)virtual HRESULT WINAPI <mshtmlc.h>
GetCapabilitiesKey(HKEY * pHKey)virtual HRESULT WINAPI <strmif.h>
GetCapability(LONG Capability,LONG * pValue,double * pdblValue)virtual HRESULT WINAPI <strmif.h>
GetCAProperty(const BSTR strConfig,LONG PropId,LONG PropIndex,LONG PropType,LONG Flags,VARIANT * pvarPropertyValue)virtual HRESULT WINAPI <certreqd.h>
GetCAProperty(const wchar_t * pwszAuthority,LONG PropId,LONG PropIndex,LONG PropType,CERTTRANSBLOB * pctbPropertyValue)virtual HRESULT WINAPI <certreqd.h>
GetCAPropertyDisplayName(const BSTR strConfig,LONG PropId,BSTR * pstrDisplayName)virtual HRESULT WINAPI <certcli.h>
GetCAPropertyFlags(const BSTR strConfig,LONG PropId,LONG * pPropFlags)virtual HRESULT WINAPI <certcli.h>
GetCAPropertyInfo(const wchar_t * pwszAuthority,LONG * pcProperty,CERTTRANSBLOB * pctbPropInfo)virtual HRESULT WINAPI <certreqd.h>
GetCaps(IPin * pPin,LONG * pCapsFlags)virtual HRESULT WINAPI <strmif.h>
GetCaption(BSTR * pbszCaption)virtual HRESULT WINAPI <agtsvr.h>
GetCapture(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetCaptureComment(HCAPTURE hCapture) LPSTR WINAPI <netmon.h>
GetCaptureCommentFromFilename(LPSTR lpFilename,LPSTR lpComment,DWORD BufferSize) DWORD WINAPI <netmon.h>
GetCaptureMacType(HCAPTURE hCapture) DWORD WINAPI <netmon.h>
GetCaptureTimeStamp(HCAPTURE hCapture) LPSYSTEMTIME WINAPI <netmon.h>
GetCaptureTotalFrames(HCAPTURE hCapture) DWORD WINAPI <netmon.h>
GetCardinalityEstimate(DBORDINAL * pulCardinality)virtual HRESULT WINAPI <cmdtree.h>
GetCaret(IHTMLCaret ** ppCaret)virtual HRESULT WINAPI <mshtmlc.h>
GetCaretBlinkTime(VOID) WINUSERAPI UINT WINAPI <winuser.h>
GetCaretDirection(CARET_DIRECTION * peDir)virtual HRESULT WINAPI <mshtmlc.h>
GetCaretPos(LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetCaretType(__LONG32 * pCaretType)virtual HRESULT WINAPI <tom.h>
GetCategories(APPCATEGORYINFOLIST * pAppCategoryList)virtual HRESULT WINAPI <shappmgr.h>
GetCategory(LPOLESTR * ppchCategory)virtual HRESULT WINAPI <mshtmlc.h>
GetCCInstPtr(VOID) LPVOID WINAPI <netmon.h>
GetCellAscent(INT style)__inline__ UINT16 FontFamily::<gdiplusimpl.h>
GetCellData(HACCESSOR hAccessor,DBORDINAL ulStartCell,DBORDINAL ulEndCell,void * pData)virtual HRESULT WINAPI <oledb.h>
GetCellDescent(INT style)__inline__ UINT16 FontFamily::<gdiplusimpl.h>
GetCenterColor(Color * color)	Status <gdipluspath.h>
GetCenterPoint(Point * point)	Status <gdipluspath.h>
GetCenterPoint(PointF * point)	Status <gdipluspath.h>
GetCertificate(LONG Flags,BSTR * pstrCertificate)virtual HRESULT WINAPI <certcli.h>
GetCertificateExtension(const BSTR strExtensionName,LONG Type,VARIANT * pvarValue)virtual HRESULT WINAPI <certif.h>
GetCertificateExtensionFlags(LONG * pExtFlags)virtual HRESULT WINAPI <certif.h>
GetCertificateProperty(const BSTR strPropertyName,LONG PropertyType,VARIANT * pvarPropertyValue)virtual HRESULT WINAPI <certif.h>
GetChallenge(LONG lBytesExpected,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
GetChar(__LONG32 * pch)virtual HRESULT WINAPI <tom.h>
GetCharABCWidths(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharABCWidthsA(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharABCWidthsFloat(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharABCWidthsFloatA(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharABCWidthsFloatW(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharABCWidthsI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPABC pabc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharABCWidthsW(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharacter(__LONG32 dwCharID,IDispatch ** ppunkCharacter)virtual HRESULT WINAPI <agtsvr.h>
GetCharacterEx(__LONG32 dwCharID,IAgentCharacterEx ** ppCharacterEx)virtual HRESULT WINAPI <agtsvr.h>
GetCharacterPlacement(HDC hdc,LPCSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags) WINGDIAPI DWORD WINAPI <wingdi.h>
GetCharacterPlacementA(HDC hdc,LPCSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags) WINGDIAPI DWORD WINAPI <wingdi.h>
GetCharacterPlacementW(HDC hdc,LPCWSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSW lpResults,DWORD dwFlags) WINGDIAPI DWORD WINAPI <wingdi.h>
GetCharCodePages(WCHAR chSrc,DWORD * pdwCodePages)virtual HRESULT WINAPI <mlang.h>
GetCharsetInfo(BSTR Charset,PMIMECSETINFO pCharsetInfo)virtual HRESULT WINAPI <mlang.h>
GetCharWidth(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidth32(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidth32A(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidth32W(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidthA(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidthFloat(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidthFloatA(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidthFloatW(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidthI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPINT piWidths) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCharWidthW(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetChase(LONG * pEnabled,LONG * pOffset,HEVENT * phEvent)virtual HRESULT WINAPI <strmif.h>
GetChild(PNODE Node,PPNODE Child)virtual HRESULT WINAPI <mmcobj.h>
GetChildItem(HSCOPEITEM item,HSCOPEITEM * pItemChild,MMC_COOKIE * pCookie)virtual HRESULT WINAPI <mmc.h>
GetChildPaths(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD cchMDBufferSize,WCHAR * pszBuffer,DWORD * pcchMDRequiredBufferSize)virtual HRESULT WINAPI <iadmw.h>
GetChildRowset(IUnknown * pUnkOuter,DBORDINAL iOrdinal,REFIID riid,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetCIMSSM(INPUT_MESSAGE_SOURCE * inputMessageSource) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassFile(LPCOLESTR szFilename,CLSID * pclsid)WINOLEAPI <objbase.h>
GetClassFileOrMime(LPBC pBC,LPCWSTR szFilename,LPVOID pBuffer,DWORD cbSize,LPCWSTR szMime,DWORD dwReserved,CLSID * pclsid)STDAPI <urlmon.h>
GetClassIDFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,CLSID * pClsID) DWORD __cdecl <netmon.h>
GetClassInfo(HINSTANCE hInstance,LPCSTR lpClassName,LPWNDCLASSA lpWndClass) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassInfoA(HINSTANCE hInstance,LPCSTR lpClassName,LPWNDCLASSA lpWndClass) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassInfoEx(HINSTANCE hInstance,LPCSTR lpszClass,LPWNDCLASSEXA lpwcx) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassInfoExA(HINSTANCE hInstance,LPCSTR lpszClass,LPWNDCLASSEXA lpwcx) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassInfoExW(HINSTANCE hInstance,LPCWSTR lpszClass,LPWNDCLASSEXW lpwcx) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassInfoLocale(ITypeInfo ** ppITypeInfo,LCID lcid)virtual HRESULT WINAPI <datapath.h>
GetClassInfoW(HINSTANCE hInstance,LPCWSTR lpClassName,LPWNDCLASSW lpWndClass) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClassLong(HWND hWnd,int nIndex) WINUSERAPI DWORD WINAPI <winuser.h>
GetClassLongA(HWND hWnd,int nIndex) WINUSERAPI DWORD WINAPI <winuser.h>
GetClassLongPtr(HWND hWnd,int nIndex) WINUSERAPI ULONG_PTR WINAPI <winuser.h>
GetClassLongPtrA(HWND hWnd,int nIndex) WINUSERAPI ULONG_PTR WINAPI <winuser.h>
GetClassLongPtrW(HWND hWnd,int nIndex) WINUSERAPI ULONG_PTR WINAPI <winuser.h>
GetClassLongW(HWND hWnd,int nIndex) WINUSERAPI DWORD WINAPI <winuser.h>
GetClassName(HWND hWnd,LPSTR lpClassName,int nMaxCount) WINUSERAPI int WINAPI <wmiutils.h>
GetClassName(ULONG * puBuffLength,LPWSTR pszName)virtual HRESULT WINAPI <wmiutils.h>
GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetClassNameW(HWND hWnd,LPWSTR lpClassName,int nMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetClassURL(LPCWSTR szURL,CLSID * pClsID)STDAPI <urlmon.h>
GetClassWord(HWND hWnd,int nIndex) WINUSERAPI WORD WINAPI <winuser.h>
GetCleanupTask(REFIID riid,IUnknown ** ppUnk)virtual HRESULT WINAPI <bitscfg.h>
GetCleanupTaskName(BSTR * pTaskName)virtual HRESULT WINAPI <bitscfg.h>
GetClerks(ICrmMonitorClerks ** pClerks)virtual HRESULT WINAPI <comsvcs.h>
GetClientHostName(PCHAR pszClientHostName,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetClientID(DWORD * pdwClientID)virtual HRESULT WINAPI <agtsvr.h>
GetClientRect(__LONG32 Type,__LONG32 * pLeft,__LONG32 * pTop,__LONG32 * pRight,__LONG32 * pBottom)virtual HRESULT WINAPI <winuser.h>
GetClientRect(HWND hWnd,LPRECT lpRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClientSideExtensions(IGPMCSECollection ** ppIGPMCSECollection)virtual HRESULT WINAPI <gpmgmt.h>
GetClientUserName(PCHAR pszClientUserName,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetClip(Region * region)	Status <gdiplusgraphics.h>
GetClipboardData(UINT uFormat) WINUSERAPI HANDLE WINAPI <winuser.h>
GetClipboardFormatName(UINT format,LPSTR lpszFormatName,int cchMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetClipboardFormatNameA(UINT format,LPSTR lpszFormatName,int cchMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetClipboardFormatNameW(UINT format,LPWSTR lpszFormatName,int cchMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetClipboardOwner(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetClipboardSequenceNumber(VOID) WINUSERAPI DWORD WINAPI <winuser.h>
GetClipboardViewer(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetClipBounds(Rect * rect)	Status <gdiplusgraphics.h>
GetClipBounds(RectF * rect)	Status <gdiplusgraphics.h>
GetClipBox(HDC hdc,LPRECT lprect) WINGDIAPI int WINAPI <wingdi.h>
GetClipCursor(LPRECT lpRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetClipRgn(HDC hdc,HRGN hrgn) WINGDIAPI int WINAPI <wingdi.h>
GetCLSID(CLSID * pCLSID)virtual HRESULT WINAPI <comsvcs.h>
GetCLSIDs(BSTR bstrDLLFile,BSTR bstrTypelibFile,SAFEARRAY ** aCLSIDs)virtual HRESULT WINAPI <mtxadmin.h>
GetClusterConfigInfo(IClusCfgClusterInfo ** ppClusCfgClusterInfoOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetClusterFromGroup(HGROUP hGroup) HCLUSTER WINAPI <clusapi.h>
GetClusterFromNetInterface(HNETINTERFACE hNetInterface) HCLUSTER WINAPI <clusapi.h>
GetClusterFromNetwork(HNETWORK hNetwork) HCLUSTER WINAPI <clusapi.h>
GetClusterFromNode(HNODE hNode) HCLUSTER WINAPI <clusapi.h>
GetClusterFromResource(HRESOURCE hResource) HCLUSTER WINAPI <clusapi.h>
GetClusterGroupKey(HGROUP hGroup,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterGroupState(HGROUP hGroup,LPWSTR lpszNodeName,LPDWORD lpcchNodeName) CLUSTER_GROUP_STATE WINAPI <clusapi.h>
GetClusterHandle(void)virtual HCLUSTER WINAPI <cluadmex.h>
GetClusterInformation(HCLUSTER hCluster,LPWSTR lpszClusterName,LPDWORD lpcchClusterName,LPCLUSTERVERSIONINFO lpClusterInfo) DWORD WINAPI <clusapi.h>
GetClusterKey(HCLUSTER hCluster,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterName(BSTR lpszName,LONG * pcchName)virtual HRESULT WINAPI <cluadmex.h>
GetClusterNetInterface(HCLUSTER hCluster,LPCWSTR lpszNodeName,LPCWSTR lpszNetworkName,LPWSTR lpszInterfaceName,LPDWORD lpcchInterfaceName) DWORD WINAPI <clusapi.h>
GetClusterNetInterfaceKey(HNETINTERFACE hNetInterface,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterNetInterfaceState(HNETINTERFACE hNetInterface) CLUSTER_NETINTERFACE_STATE WINAPI <clusapi.h>
GetClusterNetworkId(HNETWORK hNetwork,LPWSTR lpszNetworkId,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
GetClusterNetworkKey(HNETWORK hNetwork,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterNetworkState(HNETWORK hNetwork) CLUSTER_NETWORK_STATE WINAPI <clusapi.h>
GetClusterNodeId(HNODE hNode,LPWSTR lpszNodeId,LPDWORD lpcchName) DWORD WINAPI <clusapi.h>
GetClusterNodeKey(HNODE hNode,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterNodeState(HNODE hNode) CLUSTER_NODE_STATE WINAPI <clusapi.h>
GetClusterNotify(HCHANGE hChange,DWORD_PTR * lpdwNotifyKey,LPDWORD lpdwFilterType,LPWSTR lpszName,LPDWORD lpcchName,DWORD dwMilliseconds) DWORD WINAPI <clusapi.h>
GetClusterQuorumResource(HCLUSTER hCluster,LPWSTR lpszResourceName,LPDWORD lpcchResourceName,LPWSTR lpszDeviceName,LPDWORD lpcchDeviceName,LPDWORD lpdwMaxQuorumLogSize) DWORD WINAPI <clusapi.h>
GetClusterResourceDependencyExpression(HRESOURCE hResource,LPWSTR lpszDependencyExpression,LPDWORD lpcchDependencyExpression)DWORD WINAPI <clusapi.h>
GetClusterResourceKey(HRESOURCE hResource,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterResourceNetworkName(HRESOURCE hResource,LPWSTR lpBuffer,LPDWORD nSize) WINBOOL WINAPI <clusapi.h>
GetClusterResourceState(HRESOURCE hResource,LPWSTR lpszNodeName,LPDWORD lpcchNodeName,LPWSTR lpszGroupName,LPDWORD lpcchGroupName) CLUSTER_RESOURCE_STATE WINAPI <clusapi.h>
GetClusterResourceTypeKey(HCLUSTER hCluster,LPCWSTR lpszTypeName,REGSAM samDesired) HKEY WINAPI <clusapi.h>
GetClusterServiceAccountCredentials(IClusCfgCredentials ** ppicccCredentialsOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetClusterVersion(DWORD * pdwNodeHighestVersion,DWORD * pdwNodeLowestVersion)virtual HRESULT WINAPI <cluscfgserver.h>
GetCmdFromEvent(LONG_PTR lParam1,IDvdCmd ** pCmdObj)virtual HRESULT WINAPI <strmif.h>
GetCMMInfo(HTRANSFORM,DWORD) DWORD WINAPI <icm.h>
GetCodePageA(HKL hKL,UINT * uCodePage)virtual HRESULT WINAPI <mshtmlc.h>
GetCodePageDescription(UINT uiCodePage,LCID lcid,LPWSTR lpWideCharStr,int cchWideChar)virtual HRESULT WINAPI <mlang.h>
GetCodePageInfo(UINT uiCodePage,LANGID LangId,PMIMECPINFO pCodePageInfo)virtual HRESULT WINAPI <mlang.h>
GetCodePageInfo(UINT uiCodePage,PMIMECPINFO pCodePageInfo)virtual HRESULT WINAPI <mlang.h>
GetCollection(BSTR bstrCollName,IDispatch ** ppCatalogCollection)virtual HRESULT WINAPI <mtxadmin.h>
GetCollection(BSTR bstrCollName,VARIANT varObjectKey,IDispatch ** ppCatalogCollection)virtual HRESULT WINAPI <mtxadmin.h>
GetColor(Color * color)	Status <gdipluspen.h>
GetColorAdjustment(HDC hdc,LPCOLORADJUSTMENT lpca) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetColorDirectory(PCSTR pMachineName,PSTR pBuffer,PDWORD pdwSize) WINBOOL WINAPI <icm.h>
GetColorDirectoryA(PCSTR pMachineName,PSTR pBuffer,PDWORD pdwSize) WINBOOL WINAPI <icm.h>
GetColorDirectoryW(PCWSTR pMachineName,PWSTR pBuffer,PDWORD pdwSize) WINBOOL WINAPI <icm.h>
GetColorKey(COLORREF * lpClr)virtual HRESULT WINAPI <strmif.h>
GetColorKey(LPDDCOLORKEY lpClrKey)virtual HRESULT WINAPI <strmif.h>
GetColorProfileElement(HPROFILE,TAGTYPE,DWORD,PDWORD,PVOID,PBOOL) WINBOOL WINAPI <icm.h>
GetColorProfileElementTag(HPROFILE,DWORD,PTAGTYPE) WINBOOL WINAPI <icm.h>
GetColorProfileFromHandle(HPROFILE,PBYTE,PDWORD) WINBOOL WINAPI <icm.h>
GetColorProfileHeader(HPROFILE,PPROFILEHEADER) WINBOOL WINAPI <icm.h>
GetColorSpace(HDC hdc) WINGDIAPI HCOLORSPACE WINAPI <wingdi.h>
GetColorValueFromString(LPCWSTR lpszColor,BOOL fStrictCSS1,BOOL fIsStandardsCSS,COLORREF * pColor)STDAPI <mshtmhst.h>
GetColumn(ADS_SEARCH_HANDLE hSearchResult,LPWSTR szColumnName,PADS_SEARCH_COLUMN pSearchColumn)virtual HRESULT WINAPI <iads.h>
GetColumn(CrmLogRecordRead CrmLogRec,LPVARIANT pFormattedLogRecord)virtual HRESULT WINAPI <iads.h>
GetColumnConfigData(SColumnSetID * pColID,MMC_COLUMN_SET_DATA ** ppColSetData)virtual HRESULT WINAPI <mmc.h>
GetColumnCount(__LONG32 * plColumnCount)virtual HRESULT WINAPI <comsvcs.h>
GetColumnCount(LONG fResultColumn,LONG * pcColumn)virtual HRESULT WINAPI <comsvcs.h>
GetColumnFilter(UINT nColumn,LPDWORD pdwType,MMC_FILTERDATA * pFilterData)virtual HRESULT WINAPI <mmc.h>
GetColumnHeaders(LPVARIANT pHeaders)virtual HRESULT WINAPI <comsvcs.h>
GetColumnIndex(LONG fResultColumn,const BSTR strColumnName,LONG * pColumnIndex)virtual HRESULT WINAPI <certview.h>
GetColumnInfo(DBORDINAL * pcColumns,DBCOLUMNINFO ** prgInfo,OLECHAR ** ppStringsBuffer)virtual HRESULT WINAPI <oledb.h>
GetColumnMapper(const WCHAR * wcsMachineName,const WCHAR * wcsCatalogName,IColumnMapper ** ppColumnMapper)virtual HRESULT WINAPI <indexsrv.h>
GetColumns(DBORDINAL cColumns,DBCOLUMNACCESS rgColumns[])virtual HRESULT WINAPI <oledb.h>
GetColumnSortData(SColumnSetID * pColID,MMC_SORT_SET_DATA ** ppColSortData)virtual HRESULT WINAPI <mmc.h>
GetColumnsRowset(IUnknown * pUnkOuter,DBORDINAL cOptColumns,const DBID rgOptColumns[],REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],IUnknown ** ppColRowset)virtual HRESULT WINAPI <oledb.h>
GetColumnText(int nCol,LPOLESTR * pText)virtual HRESULT WINAPI <mmc.h>
GetColumnVariants(VARIANT LogRecord,LPVARIANT pFormattedLogRecord)virtual HRESULT WINAPI <comsvcs.h>
GetColumnWidth(int nCol,int * pWidth)virtual HRESULT WINAPI <mmc.h>
GetComboBoxInfo(HWND hwndCombo,PCOMBOBOXINFO pcbi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetCommand(__LONG32 dwCommandID,IUnknown ** ppunkCommand)virtual HRESULT WINAPI <oledbdep.h>
GetCommand(IUnknown * pUnkOuter,REFGUID rguidSchema,ICommand ** ppCommand)virtual HRESULT WINAPI <oledbdep.h>
GetCommandEx(__LONG32 dwCommandID,IAgentCommandEx ** ppCommandEx)virtual HRESULT WINAPI <agtsvr.h>
GetCommandLine(VOID) WINBASEAPI LPSTR WINAPI <processenv.h>
GetCommandLineA(VOID) WINBASEAPI LPSTR WINAPI <processenv.h>
GetCommandLineW(VOID) WINBASEAPI LPWSTR WINAPI <processenv.h>
GetCommandStream(IID * piid,GUID * pguidDialect,IUnknown ** ppCommandStream)virtual HRESULT WINAPI <oledb.h>
GetCommandText(GUID * pguidDialect,LPOLESTR * ppwszCommand)virtual HRESULT WINAPI <oledb.h>
GetCommandTree(DBCOMMANDTREE ** ppRoot)virtual HRESULT WINAPI <cmdtree.h>
GetCommConfig(HANDLE hCommDev,LPCOMMCONFIG lpCC,LPDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetComment(LPWSTR * ppwszComment)virtual HRESULT WINAPI <mstask.h>
GetCommitMode(ECommitMode * pecmCurrentModeOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetCommMask(HANDLE hFile,LPDWORD lpEvtMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetCommModemStatus(HANDLE hFile,LPDWORD lpModemStat) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetCommProperties(HANDLE hFile,LPCOMMPROP lpCommProp) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetCommState(HANDLE hFile,LPDCB lpDCB) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetCommTimeouts(HANDLE hFile,LPCOMMTIMEOUTS lpCommTimeouts) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetComponentIDFromCLSSPEC(uCLSSPEC * pClassspec,LPSTR * ppszComponentID)STDAPI <urlmon.h>
GetCompositingMode()	CompositingMode <gdiplusgraphics.h>
GetCompositingQuality()	CompositingQuality <gdiplusgraphics.h>
GetCompositionFontA(HIMC hIMC,LOGFONTA * plf)virtual HRESULT WINAPI <mshtmlc.h>
GetCompositionFontW(HIMC hIMC,LOGFONTW * plf)virtual HRESULT WINAPI <mshtmlc.h>
GetCompositionStringA(HIMC hIMC,DWORD dwIndex,DWORD dwBufLen,LONG * plCopied,LPVOID pBuf)virtual HRESULT WINAPI <mshtmlc.h>
GetCompositionStringW(HIMC hIMC,DWORD dwIndex,DWORD dwBufLen,LONG * plCopied,LPVOID pBuf)virtual HRESULT WINAPI <mshtmlc.h>
GetCompositionWindow(HIMC hIMC,COMPOSITIONFORM * pCompForm)virtual HRESULT WINAPI <mshtmlc.h>
GetCompoundArray(REAL * compoundArray,INT count)	Status <gdipluspen.h>
GetCompoundArrayCount()	INT <gdipluspen.h>
GetCompressedFileSize(LPCSTR lpFileName,LPDWORD lpFileSizeHigh) WINBASEAPI DWORD WINAPI <winbase.h>
GetCompressedFileSizeA(LPCSTR lpFileName,LPDWORD lpFileSizeHigh) WINBASEAPI DWORD WINAPI <winbase.h>
GetCompressedFileSizeTransacted(LPCSTR lpFileName,LPDWORD lpFileSizeHigh,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetCompressedFileSizeTransactedA(LPCSTR lpFileName,LPDWORD lpFileSizeHigh,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetCompressedFileSizeTransactedW(LPCWSTR lpFileName,LPDWORD lpFileSizeHigh,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetCompressedFileSizeW(LPCWSTR lpFileName,LPDWORD lpFileSizeHigh) WINBASEAPI DWORD WINAPI <winbase.h>
GetComputedStyle(IMarkupPointer * pPointer,IHTMLComputedStyle ** ppComputedStyle)virtual HRESULT WINAPI <mshtmlc.h>
GetComputerName(LPSTR lpBuffer,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetComputerName(PCHAR pszComputerName,PDWORD pcbSize) virtual LPSTR WINAPI <winbase.h>
GetComputerNameA(LPSTR lpBuffer,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetComputerNameEx(COMPUTER_NAME_FORMAT NameType,LPSTR lpBuffer,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetComputerNameExA(COMPUTER_NAME_FORMAT NameType,LPSTR lpBuffer,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetComputerNameExW(COMPUTER_NAME_FORMAT NameType,LPWSTR lpBuffer,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetComputerNameW(LPWSTR lpBuffer,LPDWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetComputerObjectName(EXTENDED_NAME_FORMAT NameFormat,LPSTR lpNameBuffer,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
GetComputerObjectNameA(EXTENDED_NAME_FORMAT NameFormat,LPSTR lpNameBuffer,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
GetComputerObjectNameW(EXTENDED_NAME_FORMAT NameFormat,LPWSTR lpNameBuffer,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
GetConfidenceText(BSTR * pbszTipText)virtual HRESULT WINAPI <agtsvr.h>
GetConfidenceThreshold(__LONG32 * plThreshold)virtual HRESULT WINAPI <agtsvr.h>
GetConfig(DWORD cbSize,PBYTE Log) virtual HRESULT WINAPI <ilogobj.h>
GetConfig(LONG Flags,BSTR * pstrOut)virtual HRESULT WINAPI <ilogobj.h>
GetConfigBlob(HBLOB * phBlob) DWORD __cdecl <netmon.h>
GetConfigEntry(const BSTR strConfig,const BSTR strNodePath,const BSTR strEntryName,VARIANT * pvarEntry)virtual HRESULT WINAPI <certadm.h>
GetConnectedState(DWORD * pdwState)virtual HRESULT WINAPI <iedial.h>
GetConnectHandle(DWORD_PTR * pdwHandle)virtual HRESULT WINAPI <iedial.h>
GetConsoleAlias(LPSTR Source,LPSTR TargetBuffer,DWORD TargetBufferLength,LPSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasA(LPSTR Source,LPSTR TargetBuffer,DWORD TargetBufferLength,LPSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliases(LPSTR AliasBuffer,DWORD AliasBufferLength,LPSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasesA(LPSTR AliasBuffer,DWORD AliasBufferLength,LPSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasesLength(LPSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasesLengthA(LPSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasesLengthW(LPWSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasesW(LPWSTR AliasBuffer,DWORD AliasBufferLength,LPWSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasExes(LPSTR ExeNameBuffer,DWORD ExeNameBufferLength) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasExesA(LPSTR ExeNameBuffer,DWORD ExeNameBufferLength) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasExesLength(VOID) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasExesLengthA(VOID) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasExesLengthW(VOID) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasExesW(LPWSTR ExeNameBuffer,DWORD ExeNameBufferLength) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleAliasW(LPWSTR Source,LPWSTR TargetBuffer,DWORD TargetBufferLength,LPWSTR ExeName) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleCP(VOID) WINBASEAPI UINT WINAPI <wincon.h>
GetConsoleCursorInfo(HANDLE hConsoleOutput,PCONSOLE_CURSOR_INFO lpConsoleCursorInfo) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetConsoleDisplayMode(LPDWORD lpModeFlags) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetConsoleFontSize(HANDLE hConsoleOutput,DWORD nFont) WINBASEAPI COORD WINAPI <wincon.h>
GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo)WINBOOL WINAPI <wincon.h>
GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetConsoleOriginalTitle(LPSTR lpConsoleTitle,DWORD nSize)WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleOriginalTitleA(LPSTR lpConsoleTitle,DWORD nSize)WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleOriginalTitleW(LPWSTR lpConsoleTitle,DWORD nSize)WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleOutputCP(VOID)WINBASEAPI UINT WINAPI <wincon.h>
GetConsoleProcessList(LPDWORD lpdwProcessList,DWORD dwProcessCount) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleScreenBufferInfo(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx)WINBASEAPI WINBOOL WINAPI <wincon.h>
GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetConsoleTitle(LPSTR lpConsoleTitle,DWORD nSize) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleTitleA(LPSTR lpConsoleTitle,DWORD nSize) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleTitleW(LPWSTR lpConsoleTitle,DWORD nSize) WINBASEAPI DWORD WINAPI <wincon.h>
GetConsoleWindow(VOID) WINBASEAPI HWND WINAPI <wincon.h>
GetConstants(IGPMConstants ** ppIGPMConstants)virtual HRESULT WINAPI <gpmgmt.h>
GetContainer(IMarkupContainer ** ppContainer)virtual HRESULT WINAPI <mshtmlc.h>
GetContext()LONG WINAPI <vswriter.h>
GetContext(HWND hWnd,HIMC * phIMC)virtual HRESULT WINAPI <vswriter.h>
GetContext(INSTID * __MIDL_0016,TRANSID * __MIDL_0017)virtual HRESULT WINAPI <vswriter.h>
GetContextId(BSTR * pbstrCtxId)virtual HRESULT WINAPI <comsvcs.h>
GetContextId(GUID * pGuid)virtual HRESULT WINAPI <comsvcs.h>
GetContractDelegateWindow(HWND hwndSource) __forceinline HWND <shobjidl.h>
GetControlState(WINBOOL * IsRunnning,WINBOOL * IsPaused)virtual HRESULT WINAPI <netmon.h>
GetConversationStatistics(DWORD * nSessions,LPSESSIONSTATS lpSessionStats,DWORD * nStations,LPSTATIONSTATS lpStationStats,WINBOOL fClearAfterReading)virtual HRESULT WINAPI <netmon.h>
GetConversionListA(HKL hKL,HIMC hIMC,LPSTR pSrc,UINT uBufLen,UINT uFlag,CANDIDATELIST * pDst,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetConversionListW(HKL hKL,HIMC hIMC,LPWSTR pSrc,UINT uBufLen,UINT uFlag,CANDIDATELIST * pDst,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetConversionSize(DBTYPE wSrcType,DBTYPE wDstType,DBLENGTH * pcbSrcLength,DBLENGTH * pcbDstLength,void * pSrc)virtual HRESULT WINAPI <msdadc.h>
GetConversionStatus(HIMC hIMC,DWORD * pfdwConversion,DWORD * pfdwSentence)virtual HRESULT WINAPI <mshtmlc.h>
GetConvertStg(LPSTORAGE pStg)WINOLEAPI <ole2.h>
GetCookie(SUBSCRIPTIONCOOKIE * pCookie)virtual HRESULT WINAPI <subsmgr.h>
GetCorePrinterDriversW(LPCWSTR pszServer,LPCWSTR pszEnvironment,LPCWSTR pszzCoreDriverDependencies,DWORD cCorePrinterDrivers,PCORE_PRINTER_DRIVERW pCorePrinterDrivers)HRESULT WINAPI <winspool.h>
GetCORSystemDirectory(LPWSTR,DWORD,DWORD *)HRESULT     WINAPI <mscoree.h>
GetCORVersion(LPWSTR,DWORD,DWORD *)HRESULT     WINAPI <mscoree.h>
GetCostEstimate(LPCOLESTR pwszRowsetName,ULONG * pcCostEstimates,DBCOST * prgCostEstimates)virtual HRESULT WINAPI <oledbdep.h>
GetCostGoals(LPCOLESTR pwszRowsetName,ULONG * pcCostGoals,DBCOST * prgCostGoals)virtual HRESULT WINAPI <oledbdep.h>
GetCostLimits(LPCOLESTR pwszRowsetName,ULONG * pcCostLimits,DBCOST * prgCostLimits)virtual HRESULT WINAPI <oledbdep.h>
GetCount()	INT <wmiutils.h>
GetCount(__LONG32 * pCount)virtual HRESULT WINAPI <wmiutils.h>
GetCount(__LONG32 * pdwCount)virtual HRESULT WINAPI <wmiutils.h>
GetCount(LONG * pCount)virtual HRESULT WINAPI <wmiutils.h>
GetCount(ULONG * celt)virtual HRESULT WINAPI <wmiutils.h>
GetCount(ULONG * pcelt)virtual HRESULT WINAPI <wmiutils.h>
GetCount(ULONG * pnCount)virtual HRESULT WINAPI <wmiutils.h>
GetCount(ULONG * puCount)virtual HRESULT WINAPI <wmiutils.h>
GetCount(ULONG * puKeyCount)virtual HRESULT WINAPI <wmiutils.h>
GetCount(ULONG * pulNumProps)virtual HRESULT WINAPI <wmiutils.h>
GetCount(VOID) virtual LONG <wmiutils.h>
GetCountColorProfileElements(HPROFILE,PDWORD) WINBOOL WINAPI <icm.h>
GetCPInfo(UINT CodePage,LPCPINFO lpCPInfo) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetCPInfoEx(UINT CodePage,DWORD dwFlags,LPCPINFOEXA lpCPInfoEx) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetCPInfoExA(UINT CodePage,DWORD dwFlags,LPCPINFOEXA lpCPInfoEx) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetCPInfoExW(UINT CodePage,DWORD dwFlags,LPCPINFOEXW lpCPInfoEx) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetCPSUIUserData(HWND hDlg)<compstui.h>
GetCPUMetricEnabled(WINBOOL * pbMetricEnabled)virtual HRESULT WINAPI <comsvcs.h>
GetCreateThreadsAggressively(WINBOOL * pbMetricEnabled)virtual HRESULT WINAPI <comsvcs.h>
GetCreationProperties(ULONG cPropertyIDSets,const DBPROPIDSET rgPropertyIDSets[],ULONG * pcPropertyInfoSets,DBPROPINFOSET ** prgPropertyInfoSets,OLECHAR ** ppDescBuffer)virtual HRESULT WINAPI <oledb.h>
GetCreator(LPWSTR * ppwszCreator)virtual HRESULT WINAPI <mstask.h>
GetCredentials(BSTR * pbstrUserOut,BSTR * pbstrDomainOut,BSTR * pbstrPasswordOut)virtual HRESULT WINAPI <ntsecpkg.h>
GetCRL(const BSTR strConfig,LONG Flags,BSTR * pstrCRL)virtual HRESULT WINAPI <certadm.h>
GetCurrencyFormat(LCID Locale,DWORD dwFlags,LPCSTR lpValue,CONST CURRENCYFMTA * lpFormat,LPSTR lpCurrencyStr,int cchCurrency) WINBASEAPI int WINAPI <winnls.h>
GetCurrencyFormatA(LCID Locale,DWORD dwFlags,LPCSTR lpValue,CONST CURRENCYFMTA * lpFormat,LPSTR lpCurrencyStr,int cchCurrency) WINBASEAPI int WINAPI <winnls.h>
GetCurrencyFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,LPCWSTR lpValue,CONST CURRENCYFMTW * lpFormat,LPWSTR lpCurrencyStr,int cchCurrency) WINBASEAPI int WINAPI <winnls.h>
GetCurrencyFormatW(LCID Locale,DWORD dwFlags,LPCWSTR lpValue,CONST CURRENCYFMTW * lpFormat,LPWSTR lpCurrencyStr,int cchCurrency) WINBASEAPI int WINAPI <winnls.h>
GetCurrentActCtx(HANDLE * lphActCtx) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetCurrentActualFrameRate(IPin * pPin,LONGLONG * ActualFrameRate)virtual HRESULT WINAPI <strmif.h>
GetCurrentAngle(ULONG * pulAnglesAvailable,ULONG * pulCurrentAngle)virtual HRESULT WINAPI <strmif.h>
GetCurrentAudio(ULONG * pulStreamsAvailable,ULONG * pulCurrentStream)virtual HRESULT WINAPI <strmif.h>
GetCurrentAudioAttributes(DVD_AudioATR * pATR)virtual HRESULT WINAPI <strmif.h>
GetCurrentButton(ULONG * pulButtonsAvailable,ULONG * pulCurrentButton)virtual HRESULT WINAPI <strmif.h>
GetCurrentClockTransactionManager(HANDLE TransactionManagerHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
GetCurrentClusterNodeId(_lpszNodeId_,_lpcchName_)<clusapi.h>
GetCurrentCommand(DBID ** ppCommandID)virtual HRESULT WINAPI <oledb.h>
GetCurrentConsoleFont(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFO lpConsoleCurrentFont) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetCurrentConsoleFontEx(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx)WINBASEAPI WINBOOL WINAPI <wincon.h>
GetCurrentDirectory(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <processenv.h>
GetCurrentDirectoryA(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <processenv.h>
GetCurrentDirectoryW(DWORD nBufferLength,LPWSTR lpBuffer) WINBASEAPI DWORD WINAPI <processenv.h>
GetCurrentDomain(DVD_DOMAIN * pDomain)virtual HRESULT WINAPI <strmif.h>
GetCurrentFiber()<winnt.h>
GetCurrentFiber(void) PVOID <winnt.h>
GetCurrentFiber(VOID)PVOID <winnt.h>
GetCurrentFilter(VOID) HFILTER WINAPI <netmon.h>
GetCurrentFormat(AM_MEDIA_TYPE ** ppMediaType)virtual HRESULT WINAPI <ipmsp.h>
GetCurrentHwProfileW(LPHW_PROFILE_INFOW lpHwProfileInfo) WINADVAPI WINBOOL WINAPI <winbase.h>
GetCurrentImage(__LONG32 * pBufferSize,__LONG32 * pDIBImage)virtual HRESULT WINAPI <strmif.h>
GetCurrentImage(BYTE ** lpDib)virtual HRESULT WINAPI <strmif.h>
GetCurrentImpersonationLevel(DWORD & a_Level)HRESULT <wmiatlprov.h>
GetCurrentInputMessageSource(INPUT_MESSAGE_SOURCE * inputMessageSource) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetCurrentLevel()VSS_APPLICATION_LEVEL WINAPI <vswriter.h>
GetCurrentLocation(DVD_PLAYBACK_LOCATION * pLocation)virtual HRESULT WINAPI <strmif.h>
GetCurrentLocation(DVD_PLAYBACK_LOCATION2 * pLocation)virtual HRESULT WINAPI <strmif.h>
GetCurrentMode(VARIANT * pvServerMode)virtual HRESULT WINAPI <iiisext.h>
GetCurrentObject(HDC hdc,UINT type) WINGDIAPI HGDIOBJ WINAPI <wingdi.h>
GetCurrentPositionEx(HDC hdc,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetCurrentPowerPolicies(PGLOBAL_POWER_POLICY,PPOWER_POLICY) BOOLEAN WINAPI <powrprof.h>
GetCurrentProcess(VOID) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
GetCurrentProcessExplicitAppUserModelID(PWSTR * AppID)SHSTDAPI <shobjidl.h>
GetCurrentProcessId(VOID) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetCurrentProcessorNumber(VOID) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber) WINBASEAPI VOID WINAPI <processthreadsapi.h>
GetCurrentQueuedRequests(__LONG32 * plcCurrentQueuedRequests)virtual HRESULT WINAPI <comsvcs.h>
GetCurrentSnapshotSetId()VSS_ID WINAPI <vswriter.h>
GetCurrentState(WIAVIDEO_STATE * pState)virtual HRESULT WINAPI <wiavideo.h>
GetCurrentSubpicture(ULONG * pulStreamsAvailable,ULONG * pulCurrentStream,WINBOOL * pbIsDisabled)virtual HRESULT WINAPI <strmif.h>
GetCurrentSubpicture(ULONG * pulStreamsAvailable,ULONG * pulCurrentStream,WINBOOL * pIsDisabled)virtual HRESULT WINAPI <strmif.h>
GetCurrentSubpictureAttributes(DVD_SubpictureATR * pATR)virtual HRESULT WINAPI <strmif.h>
GetCurrentThemeName(LPWSTR pszThemeFileName,int cchMaxNameChars,LPWSTR pszColorBuff,int cchMaxColorChars,LPWSTR pszSizeBuff,int cchMaxSizeChars)THEMEAPI <uxtheme.h>
GetCurrentThread(VOID) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
GetCurrentThreadCompartmentId(VOID) NET_IF_COMPARTMENT_ID NETIOAPI_API_ <netioapi.h>
GetCurrentThreadId(VOID) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetCurrentThreads(__LONG32 * plcCurrentThreads)virtual HRESULT WINAPI <comsvcs.h>
GetCurrentThreadStackLimits(PULONG_PTR LowLimit,PULONG_PTR HighLimit) WINBASEAPI VOID WINAPI <processthreadsapi.h>
GetCurrentTime()<winbase.h>
GetCurrentTrustee(TRUSTEE_W ** ppTrustee)virtual HRESULT WINAPI <oledb.h>
GetCurrentUOPS(ULONG * pulUOPs)virtual HRESULT WINAPI <strmif.h>
GetCurrentUOPS(VALID_UOP_SOMTHING_OR_OTHER * pUOP)virtual HRESULT WINAPI <strmif.h>
GetCurrentVideoAttributes(DVD_VideoATR * pATR)virtual HRESULT WINAPI <strmif.h>
GetCurrentVideoAttributes(DVD_VideoAttributes * pATR)virtual HRESULT WINAPI <strmif.h>
GetCurrentVolumeArray()LPCWSTR<vswriter.h>
GetCurrentVolumeCount()UINT WINAPI <vswriter.h>
GetCurrentVolumeInfo(ULONG * pulNumOfVol,ULONG * pulThisVolNum,DVD_DISC_SIDE * pSide,ULONG * pulNumOfTitles)virtual HRESULT WINAPI <strmif.h>
GetCursor(VOID) WINUSERAPI HCURSOR WINAPI <winuser.h>
GetCursorInfo(PCURSORINFO pci) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetCursorPos(LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetCustomEndCap(CustomLineCap * customCap)	Status <gdipluspen.h>
GetCustomErrorObject(ULONG ulRecordNum,REFIID riid,IUnknown ** ppObject)virtual HRESULT WINAPI <oledb.h>
GetCustomStartCap(CustomLineCap * customCap)	Status <gdipluspen.h>
GetCValue(cmyk)<wingdi.h>
GetDashCap()	DashCap <gdipluspen.h>
GetDashOffset()	REAL <gdipluspen.h>
GetDashPattern(REAL * dashArray,INT count)	Status <gdipluspen.h>
GetDashPatternCount()	INT <gdipluspen.h>
GetDashStyle()	DashStyle <gdipluspen.h>
GetData() T<scesvc.h>
GetData(BYTE * buffer,UINT bufferSize,UINT * sizeFilled)__inline__ Status Region::<scesvc.h>
GetData(BYTE byP1,BYTE byP2,LONG lBytesToGet,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scesvc.h>
GetData(HROW hRow,HACCESSOR hAccessor,void * pData)virtual HRESULT WINAPI <scesvc.h>
GetData(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,PMETADATA_RECORD pmdrMDData,DWORD * pdwMDRequiredDataLen)virtual HRESULT WINAPI <scesvc.h>
GetData(SCESVC_HANDLE scesvcHandle,SCESVC_INFO_TYPE sceType,PVOID * ppvData,PSCE_ENUMERATION_CONTEXT psceEnumHandle)virtual HRESULT WINAPI <scesvc.h>
GetDataPaths(BSTR bstrName,LONG lnAttribute,VARIANT * pvPaths)virtual HRESULT WINAPI <iiis.h>
GetDataPaths(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD dwMDIdentifier,DWORD dwMDDataType,DWORD dwMDBufferSize,WCHAR * pszBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <iiis.h>
GetDataSetNumber(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD * pdwMDDataSetNumber)virtual HRESULT WINAPI <iadmw.h>
GetDataSize()__inline__ UINT Region::<gdiplusimpl.h>
GetDataSource(IUnknown * pUnkOuter,DWORD dwClsCtx,LPCOLESTR pwszInitializationString,REFIID riid,IUnknown ** ppDataSource)virtual HRESULT WINAPI <oledb.h>
GetDataSource(REFIID riid,IUnknown ** ppDataSource)virtual HRESULT WINAPI <oledb.h>
GetDateFormat(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpDate,LPCSTR lpFormat,LPSTR lpDateStr,int cchDate) WINBASEAPI int WINAPI <datetimeapi.h>
GetDateFormatA(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpDate,LPCSTR lpFormat,LPSTR lpDateStr,int cchDate) WINBASEAPI int WINAPI <datetimeapi.h>
GetDateFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,CONST SYSTEMTIME * lpDate,LPCWSTR lpFormat,LPWSTR lpDateStr,int cchDate,LPCWSTR lpCalendar) WINBASEAPI int WINAPI <datetimeapi.h>
GetDateFormatW(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpDate,LPCWSTR lpFormat,LPWSTR lpDateStr,int cchDate) WINBASEAPI int WINAPI <datetimeapi.h>
GetDBSession(REFIID riid,IUnknown ** ppSession)virtual HRESULT WINAPI <oledb.h>
GetDC(HWND hWnd) WINUSERAPI HDC WINAPI <winuser.h>
GetDCBrushColor(HDC hdc) WINGDIAPI COLORREF WINAPI <wingdi.h>
GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags) WINUSERAPI HDC WINAPI <winuser.h>
GetDCOrgEx(HDC hdc,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetDCPenColor(HDC hdc) WINGDIAPI COLORREF WINAPI <wingdi.h>
GetDCRegionData(HDC hdc,DWORD size,LPRGNDATA prd) extern DWORD WINAPI <dciman.h>
GetDCSiteName(BSTR szServer,BSTR * pszSiteName)virtual HRESULT WINAPI <iads.h>
GetDDrawObject(IDirectDraw ** ppDDrawObject,WINBOOL * pbUsingExternal)virtual HRESULT WINAPI <strmif.h>
GetDDrawSurface(IDirectDrawSurface ** ppDDrawSurface,WINBOOL * pbUsingExternal)virtual HRESULT WINAPI <strmif.h>
GetDeactivateOnReturn(VARIANT_BOOL * pbDeactivate)virtual HRESULT WINAPI <comsvcs.h>
GetDecodedContentStream(_Stream ** ppStream)virtual HRESULT WINAPI <cdosys.h>
GetDecoderCaps(DVD_DECODER_CAPS * pCaps)virtual HRESULT WINAPI <strmif.h>
GetDecoderCaps(DWORD dwCapIndex,DWORD * lpdwCap)virtual HRESULT WINAPI <strmif.h>
GetDefaultAudioLanguage(LCID * pLanguage,DVD_AUDIO_LANG_EXT * pAudioExtension)virtual HRESULT WINAPI <strmif.h>
GetDefaultCatalog(WCHAR * pwszCatalogName,ULONG cwcIn,ULONG * pcwcOut)virtual HRESULT WINAPI <indexsrv.h>
GetDefaultCommConfig(LPCSTR lpszName,LPCOMMCONFIG lpCC,LPDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetDefaultCommConfigA(LPCSTR lpszName,LPCOMMCONFIG lpCC,LPDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetDefaultCommConfigW(LPCWSTR lpszName,LPCOMMCONFIG lpCC,LPDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetDefaultFolder(VARIANT Type,VARIANT * pvarResult)virtual HRESULT WINAPI <cdonts.h>
GetDefaultID(__LONG32 * pdwID)virtual HRESULT WINAPI <agtsvr.h>
GetDefaultIMEWnd(HWND hWnd,HWND * phDefWnd)virtual HRESULT WINAPI <mshtmlc.h>
GetDefaultInfo(SUBSCRIPTIONTYPE subType,SUBSCRIPTIONINFO * pInfo)virtual HRESULT WINAPI <subsmgr.h>
GetDefaultMenuLanguage(LCID * pLanguage)virtual HRESULT WINAPI <strmif.h>
GetDefaultMonitor(VMRGUID * pGUID)virtual HRESULT WINAPI <strmif.h>
GetDefaultPrinter(LPSTR pszBuffer,LPDWORD pcchBuffer) WINBOOL WINAPI <winspool.h>
GetDefaultPrinterA(LPSTR pszBuffer,LPDWORD pcchBuffer) WINBOOL WINAPI <winspool.h>
GetDefaultPrinterW(LPWSTR pszBuffer,LPDWORD pcchBuffer) WINBOOL WINAPI <winspool.h>
GetDefaultProperty(BSTR bstrPropertyName,VARIANT * propertyValue)virtual HRESULT WINAPI <eventsys.h>
GetDefaultPropertyCollection(IEventObjectCollection ** collection)virtual HRESULT WINAPI <eventsys.h>
GetDefaults(IHTMLElementDefaults ** ppDefaults)virtual HRESULT WINAPI <mshtmlc.h>
GetDefaultStaticTerminal(__LONG32 lMediaType,TERMINAL_DIRECTION Direction,ITTerminal ** ppTerminal)virtual HRESULT WINAPI <tapi3if.h>
GetDefaultSubpictureLanguage(LCID * pLanguage,DVD_SUBPICTURE_LANG_EXT * pSubpictureExtension)virtual HRESULT WINAPI <strmif.h>
GetDefaultTabStop(float * pValue)virtual HRESULT WINAPI <tom.h>
GetDefaultUserProfileDirectory(LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetDefaultUserProfileDirectoryA(LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetDefaultUserProfileDirectoryW(LPWSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetDefaultValue(const GUID * Api,VARIANT * Value)virtual HRESULT WINAPI <strmif.h>
GetDefaultVerb(MMC_CONSOLE_VERB * peCmdID)virtual HRESULT WINAPI <mmc.h>
GetDeinterlaceMode(DWORD dwStreamID,LPGUID lpDeinterlaceMode)virtual HRESULT WINAPI <strmif.h>
GetDeinterlaceModeCaps(LPGUID lpDeinterlaceMode,VMRVideoDesc * lpVideoDescription,VMRDeinterlaceCaps * lpDeinterlaceCaps)virtual HRESULT WINAPI <strmif.h>
GetDeinterlacePrefs(LPDWORD lpdwDeinterlacePrefs)virtual HRESULT WINAPI <strmif.h>
GetDelayedInterface() VOID <_dbdao.h>
GetDeleteDelay(__LONG32 * pmsecDeleteDelay)virtual HRESULT WINAPI <comsvcs.h>
GetDescription(BSTR * pbstrDescriptionOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetDescription(BSTR * pbszDescription)virtual HRESULT WINAPI <cluscfgserver.h>
GetDescription(BSTR * pstrDescription)virtual HRESULT WINAPI <cluscfgserver.h>
GetDescription(HKL hKL,UINT uBufLen,LPSTR szDescription,UINT * puCopied)virtual HRESULT WINAPI <cluscfgserver.h>
GetDescription(LPWSTR * pVal)virtual HRESULT WINAPI <cluscfgserver.h>
GetDescriptionA(HKL hKL,UINT uBufLen,LPSTR szDescription,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetDescriptionW(HKL hKL,UINT uBufLen,LPWSTR szDescription,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetDescriptiveText(LPOLESTR pszGroup,LPOLESTR * pszDescriptiveText)virtual HRESULT WINAPI <mmc.h>
GetDesktopWindow(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetDestinationCodePage(UINT * puiDstCodePage)virtual HRESULT WINAPI <mlang.h>
GetDestinationPosition(__LONG32 * pLeft,__LONG32 * pTop,__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetDevConfig(BSTR pDeviceClass,DWORD * pdwSize,BYTE ** ppDeviceConfig)virtual HRESULT WINAPI <tapi3if.h>
GetDeviceCaps(HDC hdc,int index) WINGDIAPI int WINAPI <wingdi.h>
GetDeviceDriverBaseName(LPVOID ImageBase,LPSTR lpBaseName,DWORD nSize) DWORD WINAPI <psapi.h>
GetDeviceDriverBaseNameA(LPVOID ImageBase,LPSTR lpBaseName,DWORD nSize) DWORD WINAPI <psapi.h>
GetDeviceDriverBaseNameW(LPVOID ImageBase,LPWSTR lpBaseName,DWORD nSize) DWORD WINAPI <psapi.h>
GetDeviceDriverFileName(LPVOID ImageBase,LPSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetDeviceDriverFileNameA(LPVOID ImageBase,LPSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetDeviceDriverFileNameW(LPVOID ImageBase,LPWSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetDeviceGammaRamp(HDC hdc,LPVOID lpRamp) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetDeviceID(LPCGUID lpGuidSrc,LPGUID lpGuidDest)extern HRESULT WINAPI <dsound.h>
GetDevicePowerState(HANDLE hDevice,WINBOOL * pfOn) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetDevicesForiSCSISession(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,ULONG * DeviceCount,PISCSI_DEVICE_ON_SESSION Devices)HRESULT WINAPI <iscsidsc.h>
GetDevId(DWORD * pdwDevId)virtual HRESULT WINAPI <strmif.h>
GetDevMemoryObject(IUnknown ** ppUnkInnner,IUnknown * pUnkOuter)virtual HRESULT WINAPI <strmif.h>
GetDiagField(KAGGETDIAG * pDiagInfo)virtual HRESULT WINAPI <msdasql.h>
GetDialogBaseUnits(VOID) WINUSERAPI __LONG32 WINAPI <winuser.h>
GetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,RGBQUAD * prgbq) WINGDIAPI UINT WINAPI <wingdi.h>
GetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,LPVOID lpvBits,LPBITMAPINFO lpbmi,UINT usage) WINGDIAPI int WINAPI <wingdi.h>
GetDictionarySDO(IUnknown ** ppDictionarySDO)virtual HRESULT WINAPI <sdoias.h>
GetDigitSubstitutionLanguage()	LANGID <gdiplusstringformat.h>
GetDigitSubstitutionMethod()	StringDigitSubstitute <gdiplusstringformat.h>
GetDirectCallerName(BSTR * bstrUserName)virtual HRESULT WINAPI <comsvcs.h>
GetDirectCallerSID(PSID * pSID)virtual HRESULT WINAPI <comsvcs.h>
GetDirectCreatorName(BSTR * bstrUserName)virtual HRESULT WINAPI <comsvcs.h>
GetDirectCreatorSID(PSID * pSID)virtual HRESULT WINAPI <comsvcs.h>
GetDiscID(LPCWSTR pszwPath,ULONGLONG * pullDiscID)virtual HRESULT WINAPI <strmif.h>
GetDiscID(ULONGLONG * pullUniqueID)virtual HRESULT WINAPI <strmif.h>
GetDiskFreeSpace(LPCSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetDiskFreeSpaceA(LPCSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetDiskFreeSpaceEx(LPCSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes) WINBASEAPI WINBOOL WINAPI <newapis.h>
GetDiskFreeSpaceExA(LPCSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetDiskFreeSpaceW(LPCWSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetDiskInfoA(PCSTR,PDWORD,PDWORDLONG,PDWORDLONG)WINBOOL     WINAPI <winineti.h>
GetDispenser(REFIID iid,void ** ppvObject)virtual HRESULT WINAPI <txdtc.h>
GetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE * pOrientation) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetDisplayAutoRotationPreferencesByProcessId(DWORD dwProcessId,ORIENTATION_PREFERENCE * pOrientation,WINBOOL * fRotateScreen) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetDisplayConfigBufferSizes(UINT32 flags,UINT32 * numPathArrayElements,UINT32 * numModeInfoArrayElements) WINUSERAPI LONG WINAPI <winuser.h>
GetDisplayGravity(DISPLAY_GRAVITY * peGravity)virtual HRESULT WINAPI <mshtmlc.h>
GetDisplayInfo(RESULTDATAITEM * pResultDataItem)virtual HRESULT WINAPI <mmc.h>
GetDisplayInfo(SCOPEDATAITEM * pScopeDataItem)virtual HRESULT WINAPI <mmc.h>
GetDisplayName(BSTR * pstrOut)virtual HRESULT WINAPI <certview.h>
GetDisplayName(LPWSTR * pVal)virtual HRESULT WINAPI <certview.h>
GetDispositionMessage(BSTR * pstrDispositionMessage)virtual HRESULT WINAPI <certcli.h>
GetDistPointCount(LONG * pDistPointCount)virtual HRESULT WINAPI <certenc.h>
GetDistributedTransactionManager(REFIID iid,void ** ppvObject)virtual HRESULT WINAPI <txdtc.h>
GetDlgCtrlID(HWND hWnd) WINUSERAPI int WINAPI <winuser.h>
GetDlgItem(HWND hDlg,int nIDDlgItem) WINUSERAPI HWND WINAPI <winuser.h>
GetDlgItemInt(HWND hDlg,int nIDDlgItem,WINBOOL * lpTranslated,WINBOOL bSigned) WINUSERAPI UINT WINAPI <winuser.h>
GetDlgItemText(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax) WINUSERAPI UINT WINAPI <winuser.h>
GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax) WINUSERAPI UINT WINAPI <winuser.h>
GetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPWSTR lpString,int cchMax) WINUSERAPI UINT WINAPI <winuser.h>
GetDllDirectory(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetDllDirectoryA(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetDllDirectoryW(DWORD nBufferLength,LPWSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetDomain(BSTR bstrDomain,BSTR bstrDomainController,__LONG32 lDCFlags,IGPMDomain ** pIGPMDomain)virtual HRESULT WINAPI <gpmgmt.h>
GetDomainType(IASDOMAINTYPE * eDomainType)virtual HRESULT WINAPI <sdoias.h>
GetDotStuffState(FIO_CONTEXT * pContext,WINBOOL fReads,WINBOOL * pfStuffed,WINBOOL * pfStoredWithDots) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
GetDoubleClickTime(VOID) WINUSERAPI UINT WINAPI <winuser.h>
GetDownLevelRasterizationLimit()	UINT <gdiplusmetafile.h>
GetDpiX()	REAL <gdiplusmetaheader.h>
GetDpiY()	REAL <gdiplusmetaheader.h>
GetDrawInfo(LONG lFlags,HTML_PAINT_DRAW_INFO * pDrawInfo)virtual HRESULT WINAPI <mshtmlc.h>
GetDriveLetterMappings(SDriveLetterMapping * pdlmDriveLetterMappingOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetDriveLetterMappings(SDriveLetterMapping * pdlmDriveLetterUsageOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetDriverModuleHandle(HDRVR hDriver) WINMMAPI HMODULE WINAPI <mmsystem.h>
GetDriveType(LPCSTR lpRootPathName) WINBASEAPI UINT WINAPI <fileapi.h>
GetDriveTypeA(LPCSTR lpRootPathName) WINBASEAPI UINT WINAPI <fileapi.h>
GetDriveTypeW(LPCWSTR lpRootPathName) WINBASEAPI UINT WINAPI <fileapi.h>
GetDroppedInfo(LONG lSize,LONG * plArray,LONG * plNumCopied)virtual HRESULT WINAPI <strmif.h>
GetDtcLocaleResourceHandle(void) HMODULE __cdecl <dtchelp.h>
GetDTCStatus(LPSTR szHostName) DTC_STATUS __cdecl <dtchelp.h>
GetDTCStatusA(LPSTR szHostName) DTC_STATUS __cdecl <dtchelp.h>
GetDTCStatusW(WCHAR * wszHostName) DTC_STATUS __cdecl <dtchelp.h>
GetDuplicate(ITextFont ** ppFont)virtual HRESULT WINAPI <tom.h>
GetDuplicate(ITextPara ** ppPara)virtual HRESULT WINAPI <tom.h>
GetDuplicate(ITextRange ** ppRange)virtual HRESULT WINAPI <tom.h>
GetDurationFormat(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpDuration,ULONGLONG ullDuration,LPCWSTR lpFormat,LPWSTR lpDurationStr,int cchDuration) WINBASEAPI int WINAPI <winnls.h>
GetDurationFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,CONST SYSTEMTIME * lpDuration,ULONGLONG ullDuration,LPCWSTR lpFormat,LPWSTR lpDurationStr,int cchDuration) WINBASEAPI int WINAPI <winnls.h>
GetDVDDirectory(LPWSTR pszwPath,ULONG ulMaxSize,ULONG * pulActualSize)virtual HRESULT WINAPI <strmif.h>
GetDvdInterface(REFIID riid,void ** ppvIF)virtual HRESULT WINAPI <strmif.h>
GetDVDTextInfo(BYTE * pTextManager,ULONG ulBufSize,ULONG * pulActualSize)virtual HRESULT WINAPI <strmif.h>
GetDVDTextLanguageInfo(ULONG ulLangIndex,ULONG * pulNumOfStrings,LCID * pLangCode,enum DVD_TextCharSet * pbCharacterSet)virtual HRESULT WINAPI <strmif.h>
GetDVDTextNumberOfLanguages(ULONG * pulNumOfLangs)virtual HRESULT WINAPI <strmif.h>
GetDVDTextStringAsNative(ULONG ulLangIndex,ULONG ulStringIndex,BYTE * pbBuffer,ULONG ulMaxBufferSize,ULONG * pulActualSize,enum DVD_TextStringType * pType)virtual HRESULT WINAPI <strmif.h>
GetDVDTextStringAsUnicode(ULONG ulLangIndex,ULONG ulStringIndex,WCHAR * pchwBuffer,ULONG ulMaxBufferSize,ULONG * pulActualSize,enum DVD_TextStringType * pType)virtual HRESULT WINAPI <strmif.h>
GetDVDVolumeInfo(ULONG * pulNumOfVolumes,ULONG * pulVolume,DVD_DISC_SIDE * pSide,ULONG * pulNumOfTitles)virtual HRESULT WINAPI <strmif.h>
GetDwordFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,DWORD * pDword) DWORD __cdecl <netmon.h>
GetDynamicTerminalClasses(DWORD * pdwNumClasses,IID * pTerminalClasses) virtual HRESULT <termmgr.h>
GetDynamicTerminalClasses(DWORD dwMediaTypes,DWORD * pdwNumClasses,IID * pTerminalClasses)virtual HRESULT WINAPI <termmgr.h>
GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) WINBASEAPI DWORD WINAPI <timezoneapi.h>
GetDynamicTimeZoneInformationEffectiveYears(CONST PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,LPDWORD FirstYear,LPDWORD LastYear) WINBASEAPI DWORD WINAPI <timezoneapi.h>
GetEditProperty(LONG EditID,LONG Param,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetEditPropertySet(LONG EditID,LONG * pState)virtual HRESULT WINAPI <strmif.h>
GetEffectColor(__LONG32 Index,COLORREF * pcr)virtual HRESULT WINAPI <tom.h>
GetEffectiveClientRect(HWND hWnd,LPRECT lprc,const INT * lpInfo) WINCOMMCTRLAPI void WINAPI <commctrl.h>
GetEffectiveRightsFromAcl(PACL pacl,PTRUSTEE_A pTrustee,PACCESS_MASK pAccessRights) WINADVAPI DWORD WINAPI <aclapi.h>
GetEffectiveRightsFromAclA(PACL pacl,PTRUSTEE_A pTrustee,PACCESS_MASK pAccessRights) WINADVAPI DWORD WINAPI <aclapi.h>
GetEffectiveRightsFromAclW(PACL pacl,PTRUSTEE_W pTrustee,PACCESS_MASK pAccessRights) WINADVAPI DWORD WINAPI <aclapi.h>
GetElement(__LONG32 lnElementIndex,BSTR * pbstrElement)virtual HRESULT WINAPI <mshtmlc.h>
GetElement(IHTMLElement ** Element)virtual HRESULT WINAPI <mshtmlc.h>
GetElement(IHTMLElement ** ppElement)virtual HRESULT WINAPI <mshtmlc.h>
GetElement(IHTMLElement ** ppIElement)virtual HRESULT WINAPI <mshtmlc.h>
GetElements(REAL * m)	Status <gdiplusmatrix.h>
GetElementTagId(IHTMLElement * pElement,ELEMENT_TAG_ID * ptagId)virtual HRESULT WINAPI <mshtmlc.h>
GetEmailNames(VARIANT * pAddresses,VARIANT * pNames)virtual HRESULT WINAPI <sdpblb.h>
GetEmbeddedObject(IUnknown ** ppv)virtual HRESULT WINAPI <tom.h>
GetEmboss(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetEmfHeader()	const ENHMETAHEADER3<gdiplusmetaheader.h>
GetEmfPlusFlags()	UINT <gdiplusmetaheader.h>
GetEmHeight(INT style)__inline__ UINT16 FontFamily::<gdiplusimpl.h>
GetEnabled(__LONG32 * pbEnabled)virtual HRESULT WINAPI <agtsvr.h>
GetEnabledProtocols(HCAPTURE hCapture) LPPROTOCOLTABLE WINAPI <netmon.h>
GetEnabledXStateFeatures(VOID) WINBASEAPI DWORD64 WINAPI <winbase.h>
GetEncodedContentStream(_Stream ** ppStream)virtual HRESULT WINAPI <cdosys.h>
GetEncoderParameterList(const CLSID * clsidEncoder,UINT size,EncoderParameters * buffer)__inline__ Status Image::<gdiplusimpl.h>
GetEncoderParameterListSize(const CLSID * clsidEncoder)__inline__ UINT Image::<gdiplusimpl.h>
GetEncryptionKey(BSTR * ppKeyType,VARIANT_BOOL * pfValidKeyData,BSTR * ppKeyData)virtual HRESULT WINAPI <sdpblb.h>
GetEncSChannel(BYTE ** pData,DWORD * dwDecSize) WINBOOL __cdecl <wincrypt.h>
GetEnd(__LONG32 * pcpLim)virtual HRESULT WINAPI <tom.h>
GetEndCap()	LineCap <gdipluspen.h>
GetEngine(BSTR * pbszEngine)virtual HRESULT WINAPI <agtsvr.h>
GetEngrave(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetEnhMetaFile(LPCSTR lpName) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
GetEnhMetaFileA(LPCSTR lpName) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
GetEnhMetaFileBits(HENHMETAFILE hEMF,UINT nSize,LPBYTE lpData) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFileDescription(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,UINT cchBuffer,LPWSTR lpDescription) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFileHeader(HENHMETAFILE hemf,UINT nSize,LPENHMETAHEADER lpEnhMetaHeader) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,UINT nNumEntries,LPPALETTEENTRY lpPaletteEntries) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,UINT cbBuffer,PIXELFORMATDESCRIPTOR * ppfd) WINGDIAPI UINT WINAPI <wingdi.h>
GetEnhMetaFileW(LPCWSTR lpName) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
GetEnlistmentId(HANDLE EnlistmentHandle,LPGUID EnlistmentId) WINBOOL WINAPI <ktmw32.h>
GetEnlistmentRecoveryInformation(HANDLE EnlistmentHandle,ULONG BufferSize,PVOID Buffer,PULONG BufferUsed) WINBOOL WINAPI <ktmw32.h>
GetEntries(IGPMMapEntryCollection ** ppEntries)virtual HRESULT WINAPI <gpmgmt.h>
GetEntry(BSTR bstrSource,IGPMMapEntry ** ppEntry)virtual HRESULT WINAPI <gpmgmt.h>
GetEnumCount(DWORD * pdwTotal)virtual HRESULT WINAPI <bidispl.h>
GetEnumObject(IEnumUnknown ** ppenum)virtual HRESULT WINAPI <bidispl.h>
GetEnvironmentStrings(VOID) WINBASEAPI LPCH WINAPI <processenv.h>
GetEnvironmentStringsW(VOID) WINBASEAPI LPWCH WINAPI <processenv.h>
GetEnvironmentVariable(LPCSTR lpName,LPSTR lpBuffer,DWORD nSize) WINBASEAPI DWORD WINAPI <processenv.h>
GetEnvironmentVariableA(LPCSTR lpName,LPSTR lpBuffer,DWORD nSize) WINBASEAPI DWORD WINAPI <processenv.h>
GetEnvironmentVariableW(LPCWSTR lpName,LPWSTR lpBuffer,DWORD nSize) WINBASEAPI DWORD WINAPI <processenv.h>
GetError() DWORD <parser.h>
GetError(BG_ERROR_CONTEXT * pContext,HRESULT * pCode)virtual HRESULT WINAPI <parser.h>
GetError(IBackgroundCopyError ** ppError)virtual HRESULT WINAPI <parser.h>
GetErrorContextDescription(DWORD LanguageId,LPWSTR * pContextDescription)virtual HRESULT WINAPI <bits.h>
GetErrorCount(ULONG * Errors)virtual HRESULT WINAPI <bits.h>
GetErrorDescription(DWORD LanguageId,LPWSTR * pErrorDescription)virtual HRESULT WINAPI <oledb.h>
GetErrorDescription(HRESULT hrError,DWORD dwLookupID,DISPPARAMS * pdispparams,LCID lcid,BSTR * pbstrSource,BSTR * pbstrDescription)virtual HRESULT WINAPI <oledb.h>
GetErrorDescription(HRESULT hResult,DWORD LanguageId,LPWSTR * pErrorDescription)virtual HRESULT WINAPI <oledb.h>
GetErrorInfo(SSERRORINFO ** ppErrorInfo,OLECHAR ** ppStringsBuffer)virtual HRESULT WINAPI <sqloledb.h>
GetErrorInfo(ULONG dwReserved,IErrorInfo ** pperrinfo)WINOLEAUTAPI <sqloledb.h>
GetErrorInfo(ULONG ulRecordNum,LCID lcid,IErrorInfo ** ppErrorInfo)virtual HRESULT WINAPI <sqloledb.h>
GetErrorInfo(XML_ERROR * pErrorReturn) virtual HRESULT WINAPI <sqloledb.h>
GetErrorMessageText(LONG hrMessage,LONG Flags,BSTR * pstrErrorMessageText)virtual HRESULT WINAPI <certcli.h>
GetErrorMode(VOID) WINBASEAPI UINT WINAPI <errhandlingapi.h>
GetErrorParameters(ULONG ulRecordNum,DISPPARAMS * pdispparams)virtual HRESULT WINAPI <oledb.h>
GetErrorRetryCount(WORD * pwRetryCount)virtual HRESULT WINAPI <mstask.h>
GetErrorRetryInterval(WORD * pwRetryInterval)virtual HRESULT WINAPI <mstask.h>
GetEscapedElement(__LONG32 lnReserved,BSTR bstrInStr,BSTR * pbstrOutStr)virtual HRESULT WINAPI <iads.h>
GetEtype(LPVOID MacHeader,DWORD MacType) DWORD WINAPI <netmon.h>
GetEvent(__LONG32 * lEventCode,LONG_PTR * lParam1,LONG_PTR * lParam2,__LONG32 msTimeout)virtual HRESULT WINAPI <tapi3.h>
GetEvent(DWORD * pdwSize,byte * pEventBuffer)virtual HRESULT WINAPI <tapi3.h>
GetEventCookie(LPOLESTR pchEvent,LONG * plCookie)virtual HRESULT WINAPI <mshtmlc.h>
GetEventDispatcher(IUnknown ** pUnk)virtual HRESULT WINAPI <comsvcs.h>
GetEventHandle(OAEVENT * hEvent)virtual HRESULT WINAPI <control.h>
GetEventInfoFlags(__LONG32 * plEventInfoFlags)virtual HRESULT WINAPI <mshtmlc.h>
GetEventLogInformation(HANDLE hEventLog,DWORD dwInfoLevel,LPVOID lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winbase.h>
GetEventProcessorIndex(PCEVENT_RECORD er) FORCEINLINE ULONG <evntcons.h>
GetEventTarget(IHTMLElement ** ppElement)virtual HRESULT WINAPI <mshtmlc.h>
GetEx(__LONG32 lnFormatType,VARIANT * pvar)virtual HRESULT WINAPI <iads.h>
GetEx(BSTR bstrName,VARIANT * pvProp)virtual HRESULT WINAPI <iads.h>
GetExactPosition(HCHAPTER hChapter,DBBKMARK cbBookmark,const BYTE * pBookmark,DBCOUNTITEM * pulPosition,DBCOUNTITEM * pcRows)virtual HRESULT WINAPI <oledb.h>
GetExitCode(DWORD * pdwExitCode)virtual HRESULT WINAPI <mstask.h>
GetExitCodeProcess(HANDLE hProcess,LPDWORD lpExitCode) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetExitCodeThread(HANDLE hThread,LPDWORD lpExitCode) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetExpandedName(LPSTR,LPSTR) INT WINAPI <lzexpand.h>
GetExpandedNameA(LPSTR,LPSTR) INT WINAPI <lzexpand.h>
GetExpandedNameW(LPWSTR,LPWSTR) INT WINAPI <lzexpand.h>
GetExplicitEntriesFromAcl(PACL pacl,PULONG pcCountOfExplicitEntries,PEXPLICIT_ACCESS_A * pListOfExplicitEntries) WINADVAPI DWORD WINAPI <aclapi.h>
GetExplicitEntriesFromAclA(PACL pacl,PULONG pcCountOfExplicitEntries,PEXPLICIT_ACCESS_A * pListOfExplicitEntries) WINADVAPI DWORD WINAPI <aclapi.h>
GetExplicitEntriesFromAclW(PACL pacl,PULONG pcCountOfExplicitEntries,PEXPLICIT_ACCESS_W * pListOfExplicitEntries) WINADVAPI DWORD WINAPI <aclapi.h>
GetExposedPins(IPin ** ppPins) virtual HRESULT <mspterm.h>
GetExtendedErrorInfo(BSTR * bstrErrorText)virtual HRESULT WINAPI <wia.h>
GetExtendedTcpTable(PVOID pTcpTable,PDWORD pdwSize,WINBOOL bOrder,ULONG ulAf,TCP_TABLE_CLASS TableClass,ULONG Reserved) DWORD WINAPI <iphlpapi.h>
GetExtendedUdpTable(PVOID pUdpTable,PDWORD pdwSize,WINBOOL bOrder,ULONG ulAf,UDP_TABLE_CLASS TableClass,ULONG Reserved) DWORD WINAPI <iphlpapi.h>
GetExtensionVersion(HSE_VERSION_INFO * pVer) WINBOOL WINAPI <httpext.h>
GetExtraData(BSTR * pbszExtraData)virtual HRESULT WINAPI <agtsvr.h>
GetExtraHTTPHeaders(PCHAR pszHTTPHeaders,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetFamilies(INT numSought,FontFamily * families,INT * numFound)__inline__ Status FontCollection::<gdiplusimpl.h>
GetFamily(FontFamily * family)__inline__ Status Font::<gdiplusimpl.h>
GetFamilyCodePage(UINT uiCodePage,UINT * puiFamilyCodePage)virtual HRESULT WINAPI <mlang.h>
GetFamilyCount()__inline__ INT FontCollection::<gdiplusimpl.h>
GetFamilyName(WCHAR name[LF_FACESIZE],LANGID language)__inline__ Status FontFamily::<gdiplusimpl.h>
GetFamilyName(WCHAR name[LF_FACESIZE],LANGID language=LANG_NEUTRAL)	Status <gdiplusimpl.h>
GetFEFlags(__LONG32 * pFlags)virtual HRESULT WINAPI <tom.h>
GetFiberData()<winnt.h>
GetFiberData(void) PVOID <winnt.h>
GetFiberData(VOID)PVOID <winnt.h>
GetField(const BSTR strFieldName,BSTR * pstrOut)virtual HRESULT WINAPI <certcli.h>
GetFieldParameter(BSTR FieldName,BSTR Parameter,BSTR * pbstrValue)virtual HRESULT WINAPI <cdosys.h>
GetFile(IBackgroundCopyFile ** pVal)virtual HRESULT WINAPI <qmgr.h>
GetFile(ULONG cFileIndex,FILESETINFO * pFileInfo)virtual HRESULT WINAPI <qmgr.h>
GetFileACLFlags(DWORD * Flags)virtual HRESULT WINAPI <bits2_0.h>
GetFileAttributes(LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFileAttributesA(LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFileAttributesEx(LPCSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation) WINBASEAPI WINBOOL WINAPI <newapis.h>
GetFileAttributesExA(LPCSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetFileAttributesExW(LPCWSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetFileAttributesTransacted(LPCSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetFileAttributesTransactedA(LPCSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetFileAttributesTransactedW(LPCWSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetFileAttributesW(LPCWSTR lpFileName)WINBASEAPI DWORD WINAPI <fileapi.h>
GetFileBandwidthReservation(HANDLE hFile,LPDWORD lpPeriodMilliseconds,LPDWORD lpBytesPerPeriod,LPBOOL pDiscardable,LPDWORD lpTransferSize,LPDWORD lpNumOutstandingRequests) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetFileCount(DWORD * pdwFileCount)virtual HRESULT WINAPI <qmgr.h>
GetFileInformationByHandle(HANDLE hFile,LPBY_HANDLE_FILE_INFORMATION lpFileInformation) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetFileInformationByHandleEx(HANDLE hFile,FILE_INFO_BY_HANDLE_CLASS FileInformationClass,LPVOID lpFileInformation,DWORD dwBufferSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetFileMUIInfo(DWORD dwFlags,PCWSTR pcwszFilePath,PFILEMUIINFO pFileMUIInfo,DWORD * pcbFileMUIInfo) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetFileMUIPath(DWORD dwFlags,PCWSTR pcwszFilePath,PWSTR pwszLanguage,PULONG pcchLanguage,PWSTR pwszFileMUIPath,PULONG pcchFileMUIPath,PULONGLONG pululEnumerator) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetFileNameFromBrowse(HWND hwnd,PWSTR pszFilePath,UINT cchFilePath,PCWSTR pszWorkingDir,PCWSTR pszDefExt,PCWSTR pszFilters,PCWSTR pszTitle) SHSTDAPI_<shlobj.h>
GetFilePatchSignature(LPCSTR FileName,ULONG OptionFlags,PVOID OptionData,ULONG IgnoreRangeCount,PPATCH_IGNORE_RANGE IgnoreRangeArray,ULONG RetainRangeCount,PPATCH_RETAIN_RANGE RetainRangeArray,ULONG SignatureBufferSize,PVOID SignatureBuffer) WINBOOL PATCHAPI <patchapi.h>
GetFilePatchSignatureA(LPCSTR FileName,ULONG OptionFlags,PVOID OptionData,ULONG IgnoreRangeCount,PPATCH_IGNORE_RANGE IgnoreRangeArray,ULONG RetainRangeCount,PPATCH_RETAIN_RANGE RetainRangeArray,ULONG SignatureBufferSize,PVOID SignatureBuffer) WINBOOL PATCHAPI <patchapi.h>
GetFilePatchSignatureByBuffer(PBYTE FileBufferWritable,ULONG FileSize,ULONG OptionFlags,PVOID OptionData,ULONG IgnoreRangeCount,PPATCH_IGNORE_RANGE IgnoreRangeArray,ULONG RetainRangeCount,PPATCH_RETAIN_RANGE RetainRangeArray,ULONG SignatureBufferSize,LPSTR SignatureBuffer)WINBOOL PATCHAPI <patchapi.h>
GetFilePatchSignatureByHandle(HANDLE FileHandle,ULONG OptionFlags,PVOID OptionData,ULONG IgnoreRangeCount,PPATCH_IGNORE_RANGE IgnoreRangeArray,ULONG RetainRangeCount,PPATCH_RETAIN_RANGE RetainRangeArray,ULONG SignatureBufferSize,PVOID SignatureBuffer) WINBOOL PATCHAPI <patchapi.h>
GetFilePatchSignatureW(LPCWSTR FileName,ULONG OptionFlags,PVOID OptionData,ULONG IgnoreRangeCount,PPATCH_IGNORE_RANGE IgnoreRangeArray,ULONG RetainRangeCount,PPATCH_RETAIN_RANGE RetainRangeArray,ULONG SignatureBufferSizeInBytes,PVOID SignatureBuffer) WINBOOL PATCHAPI <patchapi.h>
GetFileRanges(DWORD * RangeCount,BG_FILE_RANGE ** Ranges)virtual HRESULT WINAPI <bits2_0.h>
GetFileSecurity(LPCSTR lpFileName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded) WINADVAPI WINBOOL WINAPI <winbase.h>
GetFileSecurityA(LPCSTR lpFileName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded) WINADVAPI WINBOOL WINAPI <winbase.h>
GetFileSecurityW(LPCWSTR lpFileName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetFileSize(HANDLE hFile,LPDWORD lpFileSizeHigh)WINBASEAPI DWORD WINAPI <fileapi.h>
GetFileSizeEx(HANDLE hFile,PLARGE_INTEGER lpFileSize) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetFileSizeFromContext(FIO_CONTEXT * pContext,DWORD * pcbFileSizeHigh) FILEHC_EXPORT DWORD WINAPI <filehc.h>
GetFileTime(HANDLE hFile,LPFILETIME lpCreationTime,LPFILETIME lpLastAccessTime,LPFILETIME lpLastWriteTime) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetFileTitle(LPCSTR,LPSTR,WORD) WINCOMMDLGAPI short WINAPI <commdlg.h>
GetFileTitleA(LPCSTR,LPSTR,WORD) WINCOMMDLGAPI short WINAPI <commdlg.h>
GetFileTitleW(LPCWSTR,LPWSTR,WORD) WINCOMMDLGAPI short WINAPI <commdlg.h>
GetFileType(HANDLE hFile) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFileVersionInfo(LPCSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData) WINBOOL WINAPI <winver.h>
GetFileVersionInfoA(LPCSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData) WINBOOL WINAPI <winver.h>
GetFileVersionInfoSize(LPCSTR lptstrFilename,LPDWORD lpdwHandle) DWORD WINAPI <winver.h>
GetFileVersionInfoSizeA(LPCSTR lptstrFilename,LPDWORD lpdwHandle) DWORD WINAPI <winver.h>
GetFileVersionInfoSizeW(LPCWSTR lptstrFilename,LPDWORD lpdwHandle) DWORD WINAPI <winver.h>
GetFileVersionInfoW(LPCWSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData) WINBOOL WINAPI <winver.h>
GetFillMode()	FillMode <gdipluspath.h>
GetFilter(HACCESSOR hAccessor,DBCOUNTITEM * pcRows,DBCOMPAREOP * pCompareOps[],void * pCriteriaData)virtual HRESULT WINAPI <oledb.h>
GetFilterBindings(DBCOUNTITEM * pcBindings,DBBINDING ** prgBindings)virtual HRESULT WINAPI <oledb.h>
GetFilterFlags(IBaseFilter * pFilter,DWORD * pdwFlags)virtual HRESULT WINAPI <strmif.h>
GetFiltergraph(IGraphBuilder ** ppGB)virtual HRESULT WINAPI <strmif.h>
GetFilterVersion(HTTP_FILTER_VERSION * pVer) WINBOOL WINAPI <httpfilt.h>
GetFinalPathNameByHandle(HANDLE hFile,LPSTR lpszFilePath,DWORD cchFilePath,DWORD dwFlags) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFinalPathNameByHandleA(HANDLE hFile,LPSTR lpszFilePath,DWORD cchFilePath,DWORD dwFlags) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFinalPathNameByHandleW(HANDLE hFile,LPWSTR lpszFilePath,DWORD cchFilePath,DWORD dwFlags) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFirmwareEnvironmentVariable(LPCSTR lpName,LPCSTR lpGuid,PVOID pBuffer,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetFirmwareEnvironmentVariableA(LPCSTR lpName,LPCSTR lpGuid,PVOID pBuffer,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetFirmwareEnvironmentVariableEx(LPCSTR lpName,LPCSTR lpGuid,PVOID pBuffer,DWORD nSize,PDWORD pdwAttribubutes) WINBASEAPI DWORD WINAPI <winbase.h>
GetFirmwareEnvironmentVariableExA(LPCSTR lpName,LPCSTR lpGuid,PVOID pBuffer,DWORD nSize,PDWORD pdwAttribubutes) WINBASEAPI DWORD WINAPI <winbase.h>
GetFirmwareEnvironmentVariableExW(LPCWSTR lpName,LPCWSTR lpGuid,PVOID pBuffer,DWORD nSize,PDWORD pdwAttribubutes) WINBASEAPI DWORD WINAPI <winbase.h>
GetFirmwareEnvironmentVariableW(LPCWSTR lpName,LPCWSTR lpGuid,PVOID pBuffer,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetFirmwareType(PFIRMWARE_TYPE FirmwareType) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetFirst(VARIANT * pvarResult)virtual HRESULT WINAPI <cdonts.h>
GetFirstChild(hwnd)<windowsx.h>
GetFirstExtension(LPCLSID pExtCLSID)virtual HRESULT WINAPI <mmc.h>
GetFirstInstance(DATE MinDate,DATE MaxDate,IAppointment ** Appointment)virtual HRESULT WINAPI <cdoex.h>
GetFirstLineIndent(float * pValue)virtual HRESULT WINAPI <tom.h>
GetFirstRow(ADS_SEARCH_HANDLE hSearchResult)virtual HRESULT WINAPI <iads.h>
GetFirstSibling(hwnd)<windowsx.h>
GetFirstWord(CHAR *) CHAR<parser.h>
GetFlags()__inline__ UINT Image::<tom.h>
GetFlags(__LONG32 * pFlags)virtual HRESULT WINAPI <tom.h>
GetFlags(DWORD * pdwFlags)virtual HRESULT WINAPI <tom.h>
GetFlags(LONG * pFlags)virtual HRESULT WINAPI <tom.h>
GetFlags(REFGUID guidGroup,DWORD * pdwFlags)virtual HRESULT WINAPI <tom.h>
GetFlowElement(IHTMLElement ** ppLayoutElement)virtual HRESULT WINAPI <mshtmlc.h>
GetFocus(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetFocusRect(RECT * pRect)virtual HRESULT WINAPI <mshtmlc.h>
GetFocusScales(REAL * xScale,REAL * yScale)	Status <gdipluspath.h>
GetFolderSetData(struct tagFolderSetData * pfsd)virtual HRESULT WINAPI <shdeprecated.h>
GetFont(ITextFont ** pFont)virtual HRESULT WINAPI <tom.h>
GetFont(void)virtual HFONT WINAPI <tom.h>
GetFontBold(__LONG32 * pbFontBold)virtual HRESULT WINAPI <agtsvr.h>
GetFontCharSet(short * psFontCharSet)virtual HRESULT WINAPI <agtsvr.h>
GetFontCodePages(HDC hDC,HFONT hFont,DWORD * pdwCodePages)virtual HRESULT WINAPI <mlang.h>
GetFontData(HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuffer,DWORD cjBuffer) WINGDIAPI DWORD WINAPI <wingdi.h>
GetFontInfo(LOGFONTW * plf)virtual HRESULT WINAPI <mshtmlc.h>
GetFontItalic(__LONG32 * pbFontItalic)virtual HRESULT WINAPI <agtsvr.h>
GetFontLanguageInfo(HDC hdc) WINGDIAPI DWORD WINAPI <wingdi.h>
GetFontName(BSTR * pbszFontName)virtual HRESULT WINAPI <agtsvr.h>
GetFontSize(__LONG32 * lFontSize)virtual HRESULT WINAPI <agtsvr.h>
GetFontSize(__LONG32 * plFontSize)virtual HRESULT WINAPI <agtsvr.h>
GetFontStrikethru(__LONG32 * pbFontStrikethru)virtual HRESULT WINAPI <agtsvr.h>
GetFontUnderline(__LONG32 * pbFontUnderline)virtual HRESULT WINAPI <agtsvr.h>
GetFontUnicodeRanges(HDC hdc,LPGLYPHSET lpgs) WINGDIAPI DWORD WINAPI <wingdi.h>
GetFontUnicodeRanges(HDC hDC,UINT * puiRanges,UNICODERANGE * pUranges)virtual HRESULT WINAPI <wingdi.h>
GetForeColor(__LONG32 * plFGColor)virtual HRESULT WINAPI <tom.h>
GetForeColor(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetForegroundColor(Color * color)	Status <gdiplusbrush.h>
GetForegroundWindow(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetForm(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetFormatFlags()	INT <gdiplusstringformat.h>
GetFormattedText(ITextRange ** ppRange)virtual HRESULT WINAPI <tom.h>
GetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetForwardType(__LONG32 ForwardType,BSTR * ppDestinationAddress,BSTR * ppCallerAddress)virtual HRESULT WINAPI <tapi3if.h>
GetForwardType2(__LONG32 ForwardType,BSTR * ppDestinationAddress,__LONG32 * pDestAddressType,BSTR * ppCallerAddress,__LONG32 * pCallerAddressType)virtual HRESULT WINAPI <tapi3if.h>
GetFrame(HCAPTURE hCapture,DWORD FrameNumber) HFRAME WINAPI <netmon.h>
GetFrameCaptureHandle(HFRAME hFrame) HCAPTURE WINAPI <netmon.h>
GetFrameCaptureHandle(HFRAME) HCAPTURE WINAPI <netmon.h>
GetFrameCount(const GUID * dimensionID)__inline__ UINT Image::<gdiplusimpl.h>
GetFrameDestAddress(HFRAME hFrame,LPADDRESS2 lpAddress,DWORD AddressType,DWORD Flags) DWORD WINAPI <netmon.h>
GetFrameDimensionsCount()__inline__ UINT Image::<gdiplusimpl.h>
GetFrameDimensionsList(GUID * dimensionIDs,UINT count)__inline__ Status Image::<gdiplusimpl.h>
GetFrameDstAddressOffset(HFRAME hFrame,DWORD AddressType,LPDWORD AddressLength) DWORD WINAPI <netmon.h>
GetFrameFromFrameHandle(HFRAME hFrame) ULPFRAME WINAPI <netmon.h>
GetFrameLength(HFRAME hFrame) DWORD WINAPI <netmon.h>
GetFrameMacHeaderLength(HFRAME hFrame) DWORD WINAPI <netmon.h>
GetFrameMacType(HFRAME hFrame) DWORD WINAPI <netmon.h>
GetFrameMargins(DWORD * pdwWidth,DWORD * pdwHeight)virtual HRESULT WINAPI <htiframe.h>
GetFrameName(LPWSTR * ppszFrameName)virtual HRESULT WINAPI <htiframe.h>
GetFrameNumber(HFRAME hFrame) DWORD WINAPI <netmon.h>
GetFrameOptions(DWORD * pdwFlags)virtual HRESULT WINAPI <htiframe.h>
GetFrameRateList(IPin * pPin,LONG iIndex,SIZE Dimensions,LONG * ListSize,LONGLONG ** FrameRates)virtual HRESULT WINAPI <strmif.h>
GetFrameRecognizeData(HFRAME hFrame) LPRECOGNIZEDATATABLE WINAPI <netmon.h>
GetFramesContainer(IOleContainer ** ppContainer)virtual HRESULT WINAPI <htiframe.h>
GetFrameSourceAddress(HFRAME hFrame,LPADDRESS2 lpAddress,DWORD AddressType,DWORD Flags) DWORD WINAPI <netmon.h>
GetFrameSrc(LPWSTR * ppszFrameSrc)virtual HRESULT WINAPI <htiframe.h>
GetFrameSrcAddressOffset(HFRAME hFrame,DWORD AddressType,LPDWORD AddressLength) DWORD WINAPI <netmon.h>
GetFrameStoredLength(HFRAME hFrame) DWORD WINAPI <netmon.h>
GetFrameTimeStamp(HFRAME hFrame) __MINGW_EXTENSION __int64 WINAPI <netmon.h>
GetFrameUrl(LPWSTR * ppszFrameSrc)virtual HRESULT WINAPI <htiframe.h>
GetFreeBusy(DATE StartTime,DATE EndTime,__LONG32 Interval,BSTR HTTPHost,BSTR VRoot,BSTR UserName,BSTR Password,BSTR * pbstrRet)virtual HRESULT WINAPI <cdoex.h>
GetFreeSpace(w)<winbase.h>
GetFriendlyIfIndex(DWORD IfIndex) DWORD WINAPI <iphlpapi.h>
GetFriendlyName(DWORD grfHLFNAMEF,LPWSTR * ppwzFriendlyName)virtual HRESULT WINAPI <hlink.h>
GetFriendlyName(LPCWSTR pwzLocation,LPWSTR * ppwzFriendlyName)virtual HRESULT WINAPI <hlink.h>
GetFullPathName(LPCSTR lpFileName,DWORD nBufferLength,LPSTR lpBuffer,LPSTR * lpFilePart) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFullPathNameA(LPCSTR lpFileName,DWORD nBufferLength,LPSTR lpBuffer,LPSTR * lpFilePart) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFullPathNameTransacted(LPCSTR lpFileName,DWORD nBufferLength,LPSTR lpBuffer,LPSTR * lpFilePart,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetFullPathNameTransactedA(LPCSTR lpFileName,DWORD nBufferLength,LPSTR lpBuffer,LPSTR * lpFilePart,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetFullPathNameTransactedW(LPCWSTR lpFileName,DWORD nBufferLength,LPWSTR lpBuffer,LPWSTR * lpFilePart,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetFullPathNameW(LPCWSTR lpFileName,DWORD nBufferLength,LPWSTR lpBuffer,LPWSTR * lpFilePart) WINBASEAPI DWORD WINAPI <fileapi.h>
GetFullResponseProperty(LONG PropId,LONG PropIndex,LONG PropType,LONG Flags,VARIANT * pvarPropertyValue)virtual HRESULT WINAPI <certcli.h>
GetFwMceLogProcessorNumber(PERROR_RECORD_HEADER Log)<mce.h>
GetG()	BYTE <gdipluscolor.h>
GetGammaCorrection()	BOOL <gdipluspath.h>
GetGeoInfo(GEOID Location,GEOTYPE GeoType,LPSTR lpGeoData,int cchData,LANGID LangId) WINBASEAPI int WINAPI <winnls.h>
GetGeoInfoA(GEOID Location,GEOTYPE GeoType,LPSTR lpGeoData,int cchData,LANGID LangId) WINBASEAPI int WINAPI <winnls.h>
GetGeoInfoW(GEOID Location,GEOTYPE GeoType,LPWSTR lpGeoData,int cchData,LANGID LangId) WINBASEAPI int WINAPI <winnls.h>
GetGestureConfig(HWND hwnd,DWORD dwReserved,DWORD dwFlags,PUINT pcIDs,PGESTURECONFIG pGestureConfig,UINT cbSize) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetGestureExtraArgs(HGESTUREINFO hGestureInfo,UINT cbExtraArgs,PBYTE pExtraArgs) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetGestureInfo(HGESTUREINFO hGestureInfo,PGESTUREINFO pGestureInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetGlobalRC(LPRC,LPSTR,LPSTR,int) UINT WINAPI <penwin.h>
GetGlobalVoiceCommandsEnabled(__LONG32 * pbEnabled)virtual HRESULT WINAPI <agtsvr.h>
GetGlyphIndices(HDC hdc,LPCSTR lpstr,int c,LPWORD pgi,DWORD fl) WINGDIAPI DWORD WINAPI <wingdi.h>
GetGlyphIndicesA(HDC hdc,LPCSTR lpstr,int c,LPWORD pgi,DWORD fl) WINGDIAPI DWORD WINAPI <wingdi.h>
GetGlyphIndicesW(HDC hdc,LPCWSTR lpstr,int c,LPWORD pgi,DWORD fl) WINGDIAPI DWORD WINAPI <wingdi.h>
GetGlyphOutline(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,CONST MAT2 * lpmat2) WINGDIAPI DWORD WINAPI <wingdi.h>
GetGlyphOutlineA(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,CONST MAT2 * lpmat2) WINGDIAPI DWORD WINAPI <wingdi.h>
GetGlyphOutlineW(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,CONST MAT2 * lpmat2) WINGDIAPI DWORD WINAPI <wingdi.h>
GetGPO(BSTR bstrGuid,IGPMGPO ** ppGPO)virtual HRESULT WINAPI <gpmgmt.h>
GetGPOLinks(IGPMGPOLinksCollection ** ppGPOLinks)virtual HRESULT WINAPI <gpmgmt.h>
GetGPOListW(HANDLE hToken,LPCWSTR lpName,LPCWSTR lpHostName,LPCWSTR lpComputerName,DWORD dwFlags,PGROUP_POLICY_OBJECTW * pGPOList) USERENVAPI WINBOOL WINAPI <userenv.h>
GetGraphicsMode(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetGreen()	BYTE <gdipluscolor.h>
GetGroup(GUID groupID,IBackgroundCopyGroup ** ppGroup)virtual HRESULT WINAPI <qmgr.h>
GetGroupHandle(LONG lObjIndex)virtual HGROUP WINAPI <cluadmex.h>
GetGUID(BSTR * pbszID)virtual HRESULT WINAPI <agtsvr.h>
GetGUIDDwordArrays(REFGUID rguidArray,CAUUID * pcaUUID,CADWORD * pcadw)virtual HRESULT WINAPI <datapath.h>
GetGuideHRC(HRC,LPGUIDE,UINT *) int WINAPI <penwin.h>
GetGuideLineA(HIMC hIMC,DWORD dwIndex,DWORD dwBufLen,LPSTR pBuf,DWORD * pdwResult)virtual HRESULT WINAPI <mshtmlc.h>
GetGuideLineW(HIMC hIMC,DWORD dwIndex,DWORD dwBufLen,LPWSTR pBuf,DWORD * pdwResult)virtual HRESULT WINAPI <mshtmlc.h>
GetGuiResources(HANDLE hProcess,DWORD uiFlags) WINUSERAPI DWORD WINAPI <winuser.h>
GetGUIThreadInfo(DWORD idThread,PGUITHREADINFO pgui) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetGValue(rgb)<wingdi.h>
GetHalftonePalette()	static HPALETTE <gdiplusgraphics.h>
GetHandleInfo(METADATA_HANDLE hMDHandle,PMETADATA_HANDLE_INFO pmdhiInfo)virtual HRESULT WINAPI <iadmw.h>
GetHandleInformation(HANDLE hObject,LPDWORD lpdwFlags) WINBASEAPI WINBOOL WINAPI <handleapi.h>
GetHandlerInfo(LPSYNCMGRHANDLERINFO * ppSyncMgrHandlerInfo)virtual HRESULT WINAPI <mobsync.h>
GetHandlerRegistrationInfo(REFCLSID rclsidHandler,LPDWORD pdwSyncMgrRegisterFlags)virtual HRESULT WINAPI <mobsync.h>
GetHardwareSupportedTVAudioModes(LONG * plModes)virtual HRESULT WINAPI <strmif.h>
GetHashTableSize()inline UINT CDXMap<dxtmpl.h>
GetHatchStyle()	HatchStyle <gdiplusbrush.h>
GetHBITMAP(const Color & colorBackground,HBITMAP * hbmReturn)__inline__ Status Bitmap::<gdiplusimpl.h>
GetHDC()	HDC <gdiplusgraphics.h>
GetHead()inline TYPE CDXList<dxtmpl.h>
GetHeadPosition()inline DXLISTPOS CDXList<dxtmpl.h>
GetHeight()	REAL <gdipluslinecaps.h>
GetHeight(const Graphics * graphics)__inline__ REAL Font::<gdipluslinecaps.h>
GetHeight(REAL dpi)__inline__ REAL Font::<gdipluslinecaps.h>
GetHelpContextID(__LONG32 * pulHelpID)virtual HRESULT WINAPI <agtsvr.h>
GetHelpContextID(__LONG32 * pulID)virtual HRESULT WINAPI <agtsvr.h>
GetHelpFileName(BSTR * pbszName)virtual HRESULT WINAPI <agtsvr.h>
GetHelpInfo(HRESULT hrError,DWORD dwLookupID,LCID lcid,BSTR * pbstrHelpFile,DWORD * pdwHelpContext)virtual HRESULT WINAPI <oledb.h>
GetHelpModeOn(__LONG32 * pbHelpModeOn)virtual HRESULT WINAPI <agtsvr.h>
GetHelpTopic(LPOLESTR * lpCompiledHelpFile)virtual HRESULT WINAPI <mmc.h>
GetHENHMETAFILE()	HENHMETAFILE <gdiplusmetafile.h>
GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt,HGLOBAL * phglobal)WINOLEAPI <ole2.h>
GetHGlobalFromStream(LPSTREAM pstm,HGLOBAL * phglobal)WINOLEAPI <combaseapi.h>
GetHICON(HICON * icon)__inline__ Status Bitmap::<gdiplusimpl.h>
GetHidden(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetHistogram(HistogramFormat format,UINT numberOfEntries,UINT * channel0,UINT * channel1,UINT * channel2,UINT * channel3)__inline__ Status Bitmap::<gdiplusimpl.h>
GetHistogramSize(HistogramFormat format,UINT * numberOfEntries)__inline__ Status Bitmap::<gdiplusimpl.h>
GetHistoryObject(IOleObject ** ppole,IStream ** pstm,IBindCtx ** ppbc)virtual HRESULT WINAPI <shdeprecated.h>
GetHitTestCookie(LONG * plCookie)virtual HRESULT WINAPI <mshtmlc.h>
GetHlink(ULONG uHLID,IHlink ** ppihl)virtual HRESULT WINAPI <hlink.h>
GetHlinkSite(IHlinkSite ** ppihlSite,DWORD * pdwSiteData)virtual HRESULT WINAPI <hlink.h>
GetHorizontalResolution()__inline__ REAL Image::<gdiplusimpl.h>
gethostbyaddr(a,b,c)<wsipv6ok.h>
gethostbyaddr(const char * addr,int len,int type) WINSOCK_API_LINKAGE struct hostent<wsipv6ok.h>
gethostbyname(a)<wsipv6ok.h>
gethostbyname(const char * name) WINSOCK_API_LINKAGE struct hostent<wsipv6ok.h>
gethostname(char * name,int namelen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
GetHotKey(BSTR * pbszHotCharKey)virtual HRESULT WINAPI <agtsvr.h>
GetHotkeyPrefix()	HotkeyPrefix <gdiplusstringformat.h>
GetHotspotsHRCRESULT(HRCRESULT,UINT,LPPOINT,UINT) int WINAPI <penwin.h>
GetHRECFromHRC(HRC) HREC WINAPI <penwin.h>
GetHResult(HRESULT * phrResult)virtual HRESULT WINAPI <control.h>
GetHRGN(const Graphics * graphics)__inline__ HRGN Region::<gdiplusimpl.h>
GetHyphenation(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetICMProfile(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetICMProfileA(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetICMProfileW(HDC hdc,LPDWORD pBufSize,LPWSTR pszFilename) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetIcmpStatistics(PMIB_ICMP Statistics) ULONG WINAPI <iphlpapi.h>
GetIcmpStatisticsEx(PMIB_ICMP_EX Statistics,ULONG Family) ULONG WINAPI <iphlpapi.h>
GetIcon(DWORD dwSize,HICON * phIcon)virtual HRESULT WINAPI <netcon.h>
GetIcon(void)virtual HICON WINAPI <netcon.h>
GetIconInfo(HICON hIcon,PICONINFO piconinfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetIconInfoEx(HICON hicon,PICONINFOEXA piconinfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetIconInfoExA(HICON hicon,PICONINFOEXA piconinfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetIconInfoExW(HICON hicon,PICONINFOEXW piconinfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetID(__LONG32 * pdwID)virtual HRESULT WINAPI <tapi3if.h>
GetID(BSTR pDeviceClass,DWORD * pdwSize,BYTE ** ppDeviceID)virtual HRESULT WINAPI <tapi3if.h>
GetId(GUID * pVal)virtual HRESULT WINAPI <bits.h>
GetIDAsVariant(BSTR bstrDeviceClass,VARIANT * pVarDeviceID)virtual HRESULT WINAPI <tapi3if.h>
GetIdentifyInformation(IVssExamineWriterMetadata ** ppMetadata)HRESULT WINAPI <vswriter.h>
GetIdentity(BSTR * pbstrUserOut,BSTR * pbstrDomainOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetIdentityString(DWORD dwIDChild,BYTE ** ppIDString,DWORD * pdwIDStringLen)virtual HRESULT WINAPI <oleacc.h>
GetIdleOn(__LONG32 * pbOn)virtual HRESULT WINAPI <agtsvr.h>
GetIdleWait(WORD * pwIdleMinutes,WORD * pwDeadlineMinutes)virtual HRESULT WINAPI <mstask.h>
GetIfEntry(PMIB_IFROW pIfRow) DWORD WINAPI <iphlpapi.h>
GetIfEntry2(PMIB_IF_ROW2 Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIfStackTable(PMIB_IFSTACK_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIfTable(PMIB_IFTABLE pIfTable,PULONG pdwSize,WINBOOL bOrder) DWORD WINAPI <iphlpapi.h>
GetIfTable2(PMIB_IF_TABLE2 * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIfTable2Ex(MIB_IF_TABLE_LEVEL Level,PMIB_IF_TABLE2 * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIID() static const IID<comip.h>
GetIID(IID * piid)virtual HRESULT WINAPI <comip.h>
GetIID(IID * piid,WINBOOL * pfDerivesFromIDispatch,ULONG * pcMethod,LPWSTR * pwszInterface)virtual HRESULT WINAPI <comip.h>
GetIIDAndMethod(IID * pIID,ULONG * piMethod)virtual HRESULT WINAPI <callobj.h>
GetImageConfigInformation(PLOADED_IMAGE LoadedImage,PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation) WINBOOL IMAGEAPI <imagehlp.h>
GetImageDecoders(UINT numDecoders,UINT size,ImageCodecInfo * decoders)static __inline__ GpStatus <gdiplusimagecodec.h>
GetImageDecodersSize(UINT * numDecoders,UINT * size)static __inline__ GpStatus <gdiplusimagecodec.h>
GetImageDlg(HWND hwndParent,LONG lDeviceType,LONG lFlags,LONG lIntent,IWiaItem * pItemRoot,BSTR bstrFilename,GUID * pguidFormat)virtual HRESULT WINAPI <wia.h>
GetImageEncoders(UINT numEncoders,UINT size,ImageCodecInfo * encoders)static __inline__ GpStatus <gdiplusimagecodec.h>
GetImageEncodersSize(UINT * numEncoders,UINT * size)static __inline__ GpStatus <gdiplusimagecodec.h>
GetImageUnusedHeaderBytes(PLOADED_IMAGE LoadedImage,PDWORD SizeUnusedHeaderBytes) DWORD IMAGEAPI <imagehlp.h>
GetIMEFileNameA(HKL hKL,UINT uBufLen,LPSTR szFileName,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetIMEFileNameW(HKL hKL,UINT uBufLen,LPWSTR szFileName,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetImeMenuItemsA(HIMC hIMC,DWORD dwFlags,DWORD dwType,IMEMENUITEMINFOA * pImeParentMenu,IMEMENUITEMINFOA * pImeMenu,DWORD dwSize,DWORD * pdwResult)virtual HRESULT WINAPI <mshtmlc.h>
GetImeMenuItemsW(HIMC hIMC,DWORD dwFlags,DWORD dwType,IMEMENUITEMINFOW * pImeParentMenu,IMEMENUITEMINFOW * pImeMenu,DWORD dwSize,DWORD * pdwResult)virtual HRESULT WINAPI <mshtmlc.h>
GetImmContext(__LONG32 * pContext)virtual HRESULT WINAPI <tom.h>
GetIndex(__LONG32 Unit,__LONG32 * pIndex)virtual HRESULT WINAPI <tom.h>
GetIndex(BSTR szName,__LONG32 lCreate,__LONG32 * plIndex)virtual HRESULT WINAPI <tom.h>
GetIndex(DBID ** ppIndexID)virtual HRESULT WINAPI <tom.h>
GetIndexInfo(DBORDINAL * pcKeyColumns,DBINDEXCOLUMNDESC ** prgIndexColumnDesc,ULONG * pcIndexPropertySets,DBPROPSET ** prgIndexPropertySets)virtual HRESULT WINAPI <oledb.h>
GetInfo(CALLFRAMEINFO * pInfo)virtual HRESULT WINAPI <wmiutils.h>
GetInfo(DWORD * pdwcbTotalFree,DWORD * pdwcbLargestFree,DWORD * pdwcbTotalMemory,DWORD * pdwcbMinimumChunk)virtual HRESULT WINAPI <wmiutils.h>
GetInfo(PPST_PROVIDERINFO * ppProperties)virtual HRESULT WINAPI <wmiutils.h>
GetInfo(ULONG cInfo,DCINFOTYPE rgeInfoType[],DCINFO ** prgInfo)virtual HRESULT WINAPI <wmiutils.h>
GetInfo(ULONG uRequestedInfo,ULONGLONG * puResponse)virtual HRESULT WINAPI <wmiutils.h>
GetInfo(void)virtual HRESULT WINAPI <wmiutils.h>
GetInfo(WCHAR * pszVersion,int * pcbVersion,LPWSTR pszDescription,int * pcbDescription,LONG * pDefaultKeyFrameRate,LONG * pDefaultPFramesPerKey,double * pDefaultQuality,LONG * pCapabilities)virtual HRESULT WINAPI <wmiutils.h>
GetInfoEx(VARIANT vProperties,__LONG32 lnReserved)virtual HRESULT WINAPI <iads.h>
GetInfoFromTocEntry(hdr,toc)<rtinfo.h>
GetInfoOfIndex(ULONG iti,DWORD dwFlags,ITypeInfo ** pptiCoClass,DWORD * pdwTIFlags,ULONG * pcdispidReserved,IID * piidPrimary,IID * piidSource) virtual HRESULT WINAPI <multinfo.h>
GetInheritanceSource(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,WINBOOL Container,GUID ** pObjectClassGuids,DWORD GuidCount,PACL pAcl,PFN_OBJECT_MGR_FUNCTS pfnArray,PGENERIC_MAPPING pGenericMapping,PINHERITED_FROMA pInheritArray) WINADVAPI DWORD WINAPI <aclapi.h>
GetInheritanceSourceA(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,WINBOOL Container,GUID ** pObjectClassGuids,DWORD GuidCount,PACL pAcl,PFN_OBJECT_MGR_FUNCTS pfnArray,PGENERIC_MAPPING pGenericMapping,PINHERITED_FROMA pInheritArray) WINADVAPI DWORD WINAPI <aclapi.h>
GetInheritanceSourceW(LPWSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,WINBOOL Container,GUID ** pObjectClassGuids,DWORD GuidCount,PACL pAcl,PFN_OBJECT_MGR_FUNCTS pfnArray,PGENERIC_MAPPING pGenericMapping,PINHERITED_FROMW pInheritArray) WINADVAPI DWORD WINAPI <aclapi.h>
GetInheritedGPOLinks(IGPMGPOLinksCollection ** ppGPOLinks)virtual HRESULT WINAPI <gpmgmt.h>
GetInitializationString(IUnknown * pDataSource,boolean fIncludePassword,LPOLESTR * ppwszInitString)virtual HRESULT WINAPI <msdasc.h>
GetInksetInterval(HINKSET,UINT,LPINTERVAL) int WINAPI <penwin.h>
GetInksetIntervalCount(HINKSET) int WINAPI <penwin.h>
GetInputState(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetInstalled(__LONG32 * pbInstalled)virtual HRESULT WINAPI <agtsvr.h>
GetInstance(LPSPropValue lpPropMv,LPSPropValue lpPropSv,ULONG uliInst) STDAPI_<wabutil.h>
GetInstanceModule(hInstance)<windowsx.h>
GetInterface() static _Interface<emostore.h>
GetInterface(BSTR Interface,IDispatch ** ppUnknown)virtual HRESULT WINAPI <emostore.h>
GetInterface(WINBOOL bAddRef=FALSE,WINBOOL bThrowException=TRUE) LPUNKNOWN <emostore.h>
GetInterfaceInfo(PIP_INTERFACE_INFO pIfTable,PULONG dwOutBufLen) DWORD WINAPI <iphlpapi.h>
GetInterfaceInner(BSTR Interface,IDispatch ** ppUnknown)virtual HRESULT WINAPI <cdosys.h>
GetInterfacePtr() static _Interface<comip.h>
GetInterfaceSafetyOptions(REFIID riid,DWORD * pdwSupportedOptions,DWORD * pdwEnabledOptions)virtual HRESULT WINAPI <objsafe.h>
GetInternationalHRC(HRC,UINT *,LPSTR,UINT *,UINT *) int WINAPI <penwin.h>
GetInterpolationColorCount()	INT <gdipluspath.h>
GetInterpolationColors(Color * presetColors,REAL * blendPositions,INT count)	Status <gdipluspath.h>
GetInterpolationMode()	InterpolationMode <gdiplusgraphics.h>
GetInvertedIfStackTable(PMIB_INVERTEDIFSTACK_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIObjectControl(IObjectControl ** pCtrl)virtual HRESULT WINAPI <comsvcs.h>
GetIPAddress(ULONG * pulDottedQuadOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetIpAddrTable(PMIB_IPADDRTABLE pIpAddrTable,PULONG pdwSize,WINBOOL bOrder) DWORD WINAPI <iphlpapi.h>
GetIpErrorString(IP_STATUS ErrorCode,PWSTR Buffer,PDWORD Size) DWORD WINAPI <iphlpapi.h>
GetIpForwardEntry2(PMIB_IPFORWARD_ROW2 Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpForwardTable(PMIB_IPFORWARDTABLE pIpForwardTable,PULONG pdwSize,WINBOOL bOrder) DWORD WINAPI <iphlpapi.h>
GetIpForwardTable2(ADDRESS_FAMILY Family,PMIB_IPFORWARD_TABLE2 * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpInterfaceEntry(PMIB_IPINTERFACE_ROW Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpInterfaceTable(ADDRESS_FAMILY Family,PMIB_IPINTERFACE_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpNetEntry2(PMIB_IPNET_ROW2 Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpNetTable(PMIB_IPNETTABLE IpNetTable,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetIpNetTable2(ADDRESS_FAMILY Family,PMIB_IPNET_TABLE2 * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpNetworkConnectionBandwidthEstimates(NET_IFINDEX InterfaceIndex,ADDRESS_FAMILY AddressFamily,PMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES BandwidthEstimates) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpPathEntry(PMIB_IPPATH_ROW Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpPathTable(ADDRESS_FAMILY Family,PMIB_IPPATH_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetIpStatistics(PMIB_IPSTATS Statistics) ULONG WINAPI <iphlpapi.h>
GetIpStatisticsEx(PMIB_IPSTATS Statistics,ULONG Family) ULONG WINAPI <iphlpapi.h>
GetIScsiIKEInfo(PCHAR InitiatorName,ULONG PortNumber,PULONG Reserved,PIKE_AUTHENTICATION_INFORMATION * AuthInfo)HRESULT WINAPI <iscsidsc.h>
GetIScsiIKEInfoA(PCHAR InitiatorName,ULONG PortNumber,PULONG Reserved,PIKE_AUTHENTICATION_INFORMATION * AuthInfo)HRESULT WINAPI <iscsidsc.h>
GetIScsiIKEInfoW(PWCHAR InitiatorName,ULONG PortNumber,PULONG Reserved,PIKE_AUTHENTICATION_INFORMATION * AuthInfo)HRESULT WINAPI <iscsidsc.h>
GetIScsiInitiatorNodeName(PCHAR InitiatorNodeName)HRESULT WINAPI <iscsidsc.h>
GetIScsiInitiatorNodeNameA(PCHAR InitiatorNodeName)HRESULT WINAPI <iscsidsc.h>
GetIScsiInitiatorNodeNameW(PWCHAR InitiatorNodeName)HRESULT WINAPI <iscsidsc.h>
GetIScsiSessionList(ULONG * BufferSize,ULONG * SessionCount,PISCSI_SESSION_INFOA SessionInfo)HRESULT WINAPI <iscsidsc.h>
GetIScsiSessionListA(ULONG * BufferSize,ULONG * SessionCount,PISCSI_SESSION_INFOA SessionInfo)HRESULT WINAPI <iscsidsc.h>
GetIScsiSessionListW(ULONG * BufferSize,ULONG * SessionCount,PISCSI_SESSION_INFOW SessionInfo)HRESULT WINAPI <iscsidsc.h>
GetIScsiTargetInformation(PCHAR TargetName,PCHAR DiscoveryMechanism,TARGET_INFORMATION_CLASS InfoClass,PULONG BufferSize,PVOID Buffer)HRESULT WINAPI <iscsidsc.h>
GetIScsiTargetInformationA(PCHAR TargetName,PCHAR DiscoveryMechanism,TARGET_INFORMATION_CLASS InfoClass,PULONG BufferSize,PVOID Buffer)HRESULT WINAPI <iscsidsc.h>
GetIScsiTargetInformationW(PWCHAR TargetName,PWCHAR DiscoveryMechanism,TARGET_INFORMATION_CLASS InfoClass,PULONG BufferSize,PVOID Buffer)HRESULT WINAPI <iscsidsc.h>
GetIScsiVersionInformation(PISCSI_VERSION_INFO VersionInfo)HRESULT WINAPI <iscsidsc.h>
GetIsFileDotTerminated(FIO_CONTEXT * pContext) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
GetIssuedCertificate(const BSTR strConfig,LONG RequestId,const BSTR strSerialNumber,LONG * pDisposition)virtual HRESULT WINAPI <certcli.h>
GetItalic(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetItem(LPRESULTDATAITEM item)virtual HRESULT WINAPI <mmc.h>
GetItem(LPSCOPEDATAITEM item)virtual HRESULT WINAPI <mmc.h>
GetItemConfidence(__LONG32 dwItemIndex,__LONG32 * plConfidence)virtual HRESULT WINAPI <agtsvr.h>
GetItemData(ImageItemData * item)__inline__ Status Image::<gdiplusimpl.h>
GetItemFromCookie(const SUBSCRIPTIONCOOKIE * pSubscriptionCookie,ISubscriptionItem ** ppSubscriptionItem)virtual HRESULT WINAPI <subsmgr.h>
GetItemFromURL(LPCWSTR pwszURL,ISubscriptionItem ** ppSubscriptionItem)virtual HRESULT WINAPI <subsmgr.h>
GetItemID(__LONG32 dwItemIndex,__LONG32 * pdwCommandID)virtual HRESULT WINAPI <agtsvr.h>
GetItemObject(REFSYNCMGRITEMID ItemID,REFIID riid,void ** ppv)virtual HRESULT WINAPI <mobsync.h>
GetItemText(__LONG32 dwItemIndex,BSTR * pbszText)virtual HRESULT WINAPI <agtsvr.h>
GetItemType(LONG * pItemType)virtual HRESULT WINAPI <wia.h>
GetIUnknown(IUnknown ** pUnk)virtual HRESULT WINAPI <comsvcs.h>
GetJob(GUID jobID,IBackgroundCopyJob1 ** ppJob)virtual HRESULT WINAPI <winspool.h>
GetJob(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetJob(REFGUID jobID,IBackgroundCopyJob ** ppJob)virtual HRESULT WINAPI <winspool.h>
GetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetJobAttributes(LPWSTR pPrinterName,LPDEVMODEW pDevmode,PATTRIBUTE_INFO_3 pAttributeInfo)<winsplp.h>
GetJobAttributesEx(LPWSTR pPrinterName,LPDEVMODEW pDevmode,DWORD dwLevel,LPBYTE pAttributeInfo,DWORD nSize,DWORD dwFlags)<winsplp.h>
GetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetKaraokeAttributes(ULONG ulStream,DVD_KaraokeAttributes * pAttributes)virtual HRESULT WINAPI <strmif.h>
GetKBCodePage(VOID) WINUSERAPI UINT WINAPI <winuser.h>
GetKeepTogether(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetKeepWithNext(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetKernelObjectSecurity(HANDLE Handle,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetKerning(float * pValue)virtual HRESULT WINAPI <tom.h>
GetKerningPairs(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair) WINGDIAPI DWORD WINAPI <wingdi.h>
GetKerningPairsA(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair) WINGDIAPI DWORD WINAPI <wingdi.h>
GetKerningPairsW(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair) WINGDIAPI DWORD WINAPI <wingdi.h>
GetKey(ULONG uKeyIx,ULONG uFlags,ULONG * puNameBufSize,LPWSTR pszKeyName,ULONG * puKeyValBufSize,LPVOID pKeyVal,ULONG * puApparentCimType)virtual HRESULT WINAPI <wmiutils.h>
GetKey2(ULONG uKeyIx,ULONG uFlags,ULONG * puNameBufSize,LPWSTR pszKeyName,VARIANT * pKeyValue,ULONG * puApparentCimType)virtual HRESULT WINAPI <wmiutils.h>
GetKeyboardLayout(DWORD idThread) WINUSERAPI HKL WINAPI <winuser.h>
GetKeyboardLayoutList(int nBuff,HKL * lpList) WINUSERAPI int WINAPI <winuser.h>
GetKeyboardLayoutName(LPSTR pwszKLID) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetKeyboardLayoutNameA(LPSTR pwszKLID) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetKeyboardLayoutNameW(LPWSTR pwszKLID) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetKeyboardState(PBYTE lpKeyState) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetKeyboardType(int nTypeFlag) WINUSERAPI int WINAPI <winuser.h>
GetKeyLen(WINBOOL fMin,WINBOOL fExchange,LONG * pdwKeySize)virtual HRESULT WINAPI <xenroll.h>
GetKeyLenEx(LONG lSizeSpec,LONG lKeySpec,LONG * pdwKeySize)virtual HRESULT WINAPI <xenroll.h>
GetKeyList(IWbemPathKeyList ** pOut)virtual HRESULT WINAPI <wmiutils.h>
GetKeyNameText(LONG lParam,LPSTR lpString,int cchSize) WINUSERAPI int WINAPI <winuser.h>
GetKeyNameTextA(LONG lParam,LPSTR lpString,int cchSize) WINUSERAPI int WINAPI <winuser.h>
GetKeyNameTextW(LONG lParam,LPWSTR lpString,int cchSize) WINUSERAPI int WINAPI <winuser.h>
GetKeyState(int nVirtKey) WINUSERAPI SHORT WINAPI <winuser.h>
GetKeywords(LPOLESTR * ppwszKeywords)virtual HRESULT WINAPI <oledb.h>
GetKValue(cmyk)<wingdi.h>
GetLangId(HKL hKL,LANGID * plid)virtual HRESULT WINAPI <mshtmlc.h>
GetLanguageID(__LONG32 * plangid)virtual HRESULT WINAPI <tom.h>
GetLanguageID(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetLargePageMinimum(VOID) WINBASEAPI SIZE_T WINAPI <memoryapi.h>
GetLargestConsoleWindowSize(HANDLE hConsoleOutput) WINBASEAPI COORD WINAPI <wincon.h>
GetLast(VARIANT * pvarResult)virtual HRESULT WINAPI <cdonts.h>
GetLastActivePopup(HWND hWnd) WINUSERAPI HWND WINAPI <winuser.h>
GetLastChangeTime(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,PFILETIME pftMDLastChangeTime,WINBOOL bLocalTime)virtual HRESULT WINAPI <iadmw.h>
GetLastError(IASPError ** ppASPErrorObject)virtual HRESULT WINAPI <errhandlingapi.h>
GetLastError(VOID) WINBASEAPI DWORD WINAPI <errhandlingapi.h>
GetLastInputInfo(PLASTINPUTINFO plii) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetLastPoint(PointF * lastPoint)	Status <gdipluspath.h>
GetLastSibling(hwnd)<windowsx.h>
GetLastStatus()	Status <certcli.h>
GetLastStatus(LONG * pStatus)virtual HRESULT WINAPI <certcli.h>
GetLastVisibleData(HROW hRow,HACCESSOR hAccessor,void * pData)virtual HRESULT WINAPI <oledb.h>
GetLatency(REFERENCE_TIME * prtLatency)virtual HRESULT WINAPI <strmif.h>
GetLayeredWindowAttributes(HWND hwnd,COLORREF * pcrKey,BYTE * pbAlpha,DWORD * pdwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetLayout(HDC hdc) WINGDIAPI DWORD WINAPI <wingdi.h>
GetLayoutInfo(LONG * plLayoutInfo)virtual HRESULT WINAPI <mshtmlc.h>
GetLBServer(IUnknown * pUnk)virtual HRESULT WINAPI <comsvcs.h>
GetLCID(LCID * plcidCurrent)virtual HRESULT WINAPI <agtsvr.h>
GetLcidFromRfc1766(LCID * pLocale,BSTR bstrRfc1766)virtual HRESULT WINAPI <mlang.h>
GetLeft()	REAL <gdiplustypes.h>
GetLeftIndent(float * pValue)virtual HRESULT WINAPI <tom.h>
GetLength(__LONG32 * plLen)virtual HRESULT WINAPI <mlang.h>
GetLengthSid(PSID pSid) WINADVAPI DWORD WINAPI <securitybaseapi.h>
GetLicenseToUse(const WCHAR ** ppwcsLicense)virtual HRESULT WINAPI <indexsrv.h>
GetLineAlignment()	StringAlignment <gdiplusstringformat.h>
GetLinearColors(Color * colors)	Status <gdiplusbrush.h>
GetLineInfo(ILineInfo ** ppLineInfo)virtual HRESULT WINAPI <mshtmlc.h>
GetLineJoin()	LineJoin <gdipluspen.h>
GetLineSpacing(float * pValue)virtual HRESULT WINAPI <tom.h>
GetLineSpacing(INT style)__inline__ UINT16 FontFamily::<tom.h>
GetLineSpacingRule(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetLinkedTopics(LPOLESTR * lpCompiledHelpFiles)virtual HRESULT WINAPI <mmc.h>
GetListAlignment(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetListBoxInfo(HWND hwnd) WINUSERAPI DWORD WINAPI <winuser.h>
GetListeningTip(__LONG32 * pbListeningTip)virtual HRESULT WINAPI <agtsvr.h>
GetListLevelIndex(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetListPadInfo(LPOLESTR pszGroup,MMC_LISTPAD_INFO * lpListPadInfo)virtual HRESULT WINAPI <mmc.h>
GetListStart(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetListTab(float * pValue)virtual HRESULT WINAPI <tom.h>
GetListType(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetLiteralInfo(ULONG cLiterals,const DBLITERAL rgLiterals[],ULONG * pcLiteralInfo,DBLITERALINFO ** prgLiteralInfo,OLECHAR ** ppCharBuffer)virtual HRESULT WINAPI <oledb.h>
GetLLCHeaderLength(LPLLC Frame) DWORD WINAPI <netmon.h>
GetLocale(__LONG32 lSrcPos,__LONG32 lSrcMaxLen,LCID * plocale,__LONG32 * plLocalePos,__LONG32 * plLocaleLen)virtual HRESULT WINAPI <mlang.h>
GetLocale(void)virtual LCID WINAPI <mlang.h>
GetLocaleInfo(LCID Locale,LCTYPE LCType,LPSTR lpLCData,int cchData) WINBASEAPI int WINAPI <winnls.h>
GetLocaleInfoA(LCID Locale,LCTYPE LCType,LPSTR lpLCData,int cchData) WINBASEAPI int WINAPI <winnls.h>
GetLocaleInfoEx(LPCWSTR lpLocaleName,LCTYPE LCType,LPWSTR lpLCData,int cchData) WINBASEAPI int WINAPI <winnls.h>
GetLocaleInfoW(LCID Locale,LCTYPE LCType,LPWSTR lpLCData,int cchData) WINBASEAPI int WINAPI <winnls.h>
GetLocalManagedApplicationData(WCHAR * ProductCode,LPWSTR * DisplayName,LPWSTR * SupportUrl) void WINAPI <appmgmt.h>
GetLocalManagedApplications(WINBOOL bUserApps,LPDWORD pdwApps,PLOCALMANAGEDAPPLICATION * prgLocalApps) DWORD WINAPI <appmgmt.h>
GetLocalName(LPWSTR * pVal)virtual HRESULT WINAPI <bits.h>
GetLocalPresenceInfo(RTC_PRESENCE_STATUS * penStatus,BSTR * pbstrNotes)virtual HRESULT WINAPI <rtccore.h>
GetLocalState(VARIANT * pvarState,VARIANT * pvarDescription,VARIANT * pvarData)virtual HRESULT WINAPI <msimcsdk.h>
GetLocalTime(LPSYSTEMTIME lpSystemTime) WINBASEAPI VOID WINAPI <sysinfoapi.h>
GetLocalTmUrl(char ** o_ppszLocalTmUrl)virtual HRESULT WINAPI <txcoord.h>
GetLocation(Point * point)	VOID <mshtmlc.h>
GetLocation(POINT * pPoint,WINBOOL fTranslate)virtual HRESULT WINAPI <mshtmlc.h>
GetLocation(PointF * point)	VOID <mshtmlc.h>
GetLogColorSpace(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetLogColorSpaceA(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetLogColorSpaceW(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEW lpBuffer,DWORD nSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetLogContainerName(HANDLE hLog,CLFS_CONTAINER_ID cidLogicalContainer,LPCWSTR pwstrContainerName,ULONG cLenContainerName,PULONG pcActualLenContainerName)WINBOOL WINAPI <clfsw32.h>
GetLogFileInformation(HANDLE hLog,PCLFS_INFORMATION pinfoBuffer,PULONG cbBuffer)WINBOOL WINAPI <clfsw32.h>
GetLogFontA(const Graphics * graphics,LOGFONTA * logfontA)__inline__ Status Font::<gdiplusimpl.h>
GetLogFontW(const Graphics * graphics,LOGFONTW * logfontW)__inline__ Status Font::<gdiplusimpl.h>
GetLogicalDrives(VOID) WINBASEAPI DWORD WINAPI <fileapi.h>
GetLogicalDriveStrings(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetLogicalDriveStringsA(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetLogicalDriveStringsW(DWORD nBufferLength,LPWSTR lpBuffer) WINBASEAPI DWORD WINAPI <fileapi.h>
GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,PDWORD ReturnedLength) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,PDWORD ReturnedLength) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetLogIoStatistics(HANDLE hLog,PVOID pvStatsBuffer,ULONG cbStatsBuffer,CLFS_IOSTATS_CLASS eStatsClass,PULONG pcbStatsWritten)WINBOOL WINAPI <clfsw32.h>
GetLogNameSizes(DWORD * pcbOurLogName,DWORD * pcbRemoteLogName)virtual HRESULT WINAPI <txdtc.h>
GetLogRecord(DWORD dwIndex,CrmLogRecordRead * pCrmLogRec)virtual HRESULT WINAPI <comsvcs.h>
GetLogRecordVariants(VARIANT IndexNumber,LPVARIANT pLogRecord)virtual HRESULT WINAPI <comsvcs.h>
GetLongPathName(LPCSTR lpszShortPath,LPSTR lpszLongPath,DWORD cchBuffer) WINBASEAPI DWORD WINAPI <newapis.h>
GetLongPathNameA(LPCSTR lpszShortPath,LPSTR lpszLongPath,DWORD cchBuffer) WINBASEAPI DWORD WINAPI <fileapi.h>
GetLongPathNameTransacted(LPCSTR lpszShortPath,LPSTR lpszLongPath,DWORD cchBuffer,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetLongPathNameTransactedA(LPCSTR lpszShortPath,LPSTR lpszLongPath,DWORD cchBuffer,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetLongPathNameTransactedW(LPCWSTR lpszShortPath,LPWSTR lpszLongPath,DWORD cchBuffer,HANDLE hTransaction) WINBASEAPI DWORD WINAPI <winbase.h>
GetLongPathNameW(LPCWSTR lpszShortPath,LPWSTR lpszLongPath,DWORD cchBuffer) WINBASEAPI DWORD WINAPI <fileapi.h>
GetMacAddressFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,BYTE * pMacAddress) DWORD __cdecl <netmon.h>
GetMacHeaderLength(LPVOID MacHeader,DWORD MacType) DWORD WINAPI <netmon.h>
GetMachineName(ULONG cchSvr,WCHAR szServerName[])virtual HRESULT WINAPI <comsvcs.h>
GetMailslotInfo(HANDLE hMailslot,LPDWORD lpMaxMessageSize,LPDWORD lpNextSize,LPDWORD lpMessageCount,LPDWORD lpReadTimeout) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetMainWindow(HWND * phwnd)virtual HRESULT WINAPI <mmc.h>
GetManagedApplicationCategories(DWORD dwReserved,APPCATEGORYINFOLIST * pAppCategory) DWORD WINAPI <appmgmt.h>
GetManagedApplications(GUID * pCategory,DWORD dwQueryFlags,DWORD dwInfoLevel,LPDWORD pdwApps,PMANAGEDAPPLICATION * prgManagedApps) DWORD WINAPI <appmgmt.h>
GetManagedExtensions(DWORD * dwExts) EXTERN_C HRESULT WINAPI <comsvcs.h>
GetManageModule(ICertManageModule ** ppManageModule)virtual HRESULT WINAPI <certpol.h>
GetMapMode(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetMappedFileName(HANDLE hProcess,LPVOID lpv,LPSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetMappedFileNameA(HANDLE hProcess,LPVOID lpv,LPSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetMappedFileNameW(HANDLE hProcess,LPVOID lpv,LPWSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetMapping(BSTR bstrRemoteAddress,RTC_PORT_TYPE enPortType,BSTR * pbstrInternalLocalAddress,__LONG32 * plInternalLocalPort,BSTR * pbstrExternalLocalAddress,__LONG32 * plExternalLocalPort)virtual HRESULT WINAPI <rtccore.h>
GetMapping(LONG lMethod,VARIANT vKey,VARIANT * pvCert,VARIANT * pbstrNtAcct,VARIANT * pbstrNtPwd,VARIANT * pbstrName,VARIANT * plEnabled)virtual HRESULT WINAPI <rtccore.h>
GetMarkupContainer(IMarkupContainer ** ppIContainer)virtual HRESULT WINAPI <mshtmlc.h>
GetMarkupPosition(__LONG32 * plMP)virtual HRESULT WINAPI <mshtmlc.h>
GetMarshalSizeMax(CALLFRAME_MARSHALCONTEXT * pmshlContext,MSHLFLAGS mshlflags,ULONG * pcbBufferNeeded)virtual HRESULT WINAPI <callobj.h>
GetMasterElement(IHTMLElement ** ppElementMaster)virtual HRESULT WINAPI <mshtmlc.h>
GetMaxAvailableFrameRate(IPin * pPin,LONG iIndex,SIZE Dimensions,LONGLONG * MaxAvailableFrameRate)virtual HRESULT WINAPI <strmif.h>
GetMaxCPULoad(DWORD * pdwLoad)virtual HRESULT WINAPI <comsvcs.h>
GetMaxCSR(DWORD * pdwCSR)virtual HRESULT WINAPI <comsvcs.h>
GetMaxIdealImageSize(__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetMaxIdealVideoSize(LONG * lpWidth,LONG * lpHeight)virtual HRESULT WINAPI <strmif.h>
GetMaximumCipherStrength(LPDWORD pdwMaximumCipherStrength)virtual HRESULT WINAPI <admex.h>
GetMaximumProcessorCount(WORD GroupNumber) WINBASEAPI DWORD WINAPI <winbase.h>
GetMaximumProcessorGroupCount(VOID) WINBASEAPI WORD WINAPI <winbase.h>
GetMaxIndex(LONG * pIndex)virtual HRESULT WINAPI <certview.h>
GetMaxLength(LONG * pMaxLength)virtual HRESULT WINAPI <certview.h>
GetMaxNodeCount(DWORD * pcMaxNodesOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetMaxQueuedRequests(__LONG32 * plcMaxQueuedRequests)virtual HRESULT WINAPI <comsvcs.h>
GetMaxResultsHRC(HRC) int WINAPI <penwin.h>
GetMaxRunTime(DWORD * pdwMaxRunTimeMS)virtual HRESULT WINAPI <mstask.h>
GetMaxStreamOffset(REFERENCE_TIME * prtMaxOffset)virtual HRESULT WINAPI <strmif.h>
GetMaxThreadCount(DWORD * maxThreads)virtual HRESULT WINAPI <comsvcs.h>
GetMaxThreads(__LONG32 * plcMaxThreads)virtual HRESULT WINAPI <comsvcs.h>
GetMeasurableCharacterRangeCount()	INT <gdiplusstringformat.h>
GetMediaResolution(SIZE * psizeResolution)virtual HRESULT WINAPI <mshtmlc.h>
GetMembers(TRUSTEE_W * pMembershipTrustee,ULONG * pcMembers,TRUSTEE_W ** prgMembers)virtual HRESULT WINAPI <oledb.h>
GetMemberships(TRUSTEE_W * pTrustee,ULONG * pcMemberships,TRUSTEE_W ** prgMemberships)virtual HRESULT WINAPI <oledb.h>
GetMemoryErrorHandlingCapabilities(PULONG Capabilities) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetMenu(HWND hWnd) WINUSERAPI HMENU WINAPI <winuser.h>
GetMenuBarInfo(HWND hwnd,LONG idObject,LONG idItem,PMENUBARINFO pmbi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMenuCheckMarkDimensions(VOID) WINUSERAPI LONG WINAPI <winuser.h>
GetMenuContextHelpId(HMENU) WINUSERAPI DWORD WINAPI <winuser.h>
GetMenuDefaultItem(HMENU hMenu,UINT fByPos,UINT gmdiFlags) WINUSERAPI UINT WINAPI <winuser.h>
GetMenuInfo(HMENU,LPMENUINFO) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMenuItemCount(HMENU hMenu) WINUSERAPI int WINAPI <winuser.h>
GetMenuItemID(HMENU hMenu,int nPos) WINUSERAPI UINT WINAPI <winuser.h>
GetMenuItemInfo(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOA lpmii) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOA lpmii) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOW lpmii) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMenuItemRect(HWND hWnd,HMENU hMenu,UINT uItem,LPRECT lprcItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMenuLanguages(LCID * pLanguages,ULONG ulMaxLanguages,ULONG * pulActualLanguages)virtual HRESULT WINAPI <strmif.h>
GetMenuState(HMENU hMenu,UINT uId,UINT uFlags) WINUSERAPI UINT WINAPI <winuser.h>
GetMenuString(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags) WINUSERAPI int WINAPI <winuser.h>
GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags) WINUSERAPI int WINAPI <winuser.h>
GetMenuStringW(HMENU hMenu,UINT uIDItem,LPWSTR lpString,int cchMax,UINT flags) WINUSERAPI int WINAPI <winuser.h>
GetMessage(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMessage(VARIANT MessageID,VARIANT StoreID,VARIANT * pvarResult)virtual HRESULT WINAPI <winuser.h>
GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMessageExtraInfo(VOID) WINUSERAPI LPARAM WINAPI <winuser.h>
GetMessagePos(VOID) WINUSERAPI DWORD WINAPI <winuser.h>
GetMessages(BSTR DirName,IMessages ** Msgs)virtual HRESULT WINAPI <cdosys.h>
GetMessageTime(VOID) WINUSERAPI LONG WINAPI <winuser.h>
GetMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMetaFile(LPCSTR lpName) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
GetMetaFileA(LPCSTR lpName) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
GetMetaFileBitsEx(HMETAFILE hMF,UINT cbBuffer,LPVOID lpData) WINGDIAPI UINT WINAPI <wingdi.h>
GetMetafileHeader(const WCHAR * filename,MetafileHeader * header)	static Status <gdiplusmetafile.h>
GetMetafileHeader(HENHMETAFILE hEmf,MetafileHeader * header)	static Status <gdiplusmetafile.h>
GetMetafileHeader(IStream * stream,MetafileHeader * header)	static Status <gdiplusmetafile.h>
GetMetafileHeader(MetafileHeader * header)	Status <gdiplusmetafile.h>
GetMetafileSize()	UINT <gdiplusmetaheader.h>
GetMetaFileW(LPCWSTR lpName) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
GetMetaRgn(HDC hdc,HRGN hrgn) WINGDIAPI int WINAPI <wingdi.h>
GetMethodInfo(ULONG iMethod,CALLFRAMEINFO * pInfo,LPWSTR * pwszMethod)virtual HRESULT WINAPI <callobj.h>
GetMiddleInset()	REAL <gdipluslinecaps.h>
GetMigrationTable(BSTR bstrMigrationTablePath,IGPMMigrationTable ** ppMigrationTable)virtual HRESULT WINAPI <gpmgmt.h>
GetMimeCLSIDMapping(UINT * pcTypes,LPCSTR ** ppszTypes,CLSID ** ppclsID)virtual HRESULT WINAPI <mimeinfo.h>
GetMinIdealImageSize(__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetMinIdealVideoSize(LONG * lpWidth,LONG * lpHeight)virtual HRESULT WINAPI <strmif.h>
GetMinimumRetryDelay(ULONG * Seconds)virtual HRESULT WINAPI <bits.h>
GetMinThreadCount(DWORD * minThreads)virtual HRESULT WINAPI <comsvcs.h>
GetMiscStatus(DWORD * pdwStatus)virtual HRESULT WINAPI <hlink.h>
GetMiterLimit()	REAL <wingdi.h>
GetMiterLimit(HDC hdc,PFLOAT plimit) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetMixingPrefs(DWORD * pdwMixerPrefs)virtual HRESULT WINAPI <strmif.h>
GetMLStr(__LONG32 lSrcPos,__LONG32 lSrcLen,IUnknown * pUnkOuter,DWORD dwClsContext,const IID * piid,IUnknown ** ppDestMLStr,__LONG32 * plDestPos,__LONG32 * plDestLen)virtual HRESULT WINAPI <mlang.h>
GetMMCVersion(__LONG32 * pVersionMajor,__LONG32 * pVersionMinor)virtual HRESULT WINAPI <mmc.h>
GetMode(IPin * pPin,LONG * Mode)virtual HRESULT WINAPI <strmif.h>
GetModuleBaseName(HANDLE hProcess,HMODULE hModule,LPSTR lpBaseName,DWORD nSize) DWORD WINAPI <psapi.h>
GetModuleBaseNameA(HANDLE hProcess,HMODULE hModule,LPSTR lpBaseName,DWORD nSize) DWORD WINAPI <psapi.h>
GetModuleBaseNameW(HANDLE hProcess,HMODULE hModule,LPWSTR lpBaseName,DWORD nSize) DWORD WINAPI <psapi.h>
GetModuleFileName(HMODULE hModule,LPSTR lpFilename,DWORD nSize) WINBASEAPI DWORD WINAPI <libloaderapi.h>
GetModuleFileNameA(HMODULE hModule,LPSTR lpFilename,DWORD nSize) WINBASEAPI DWORD WINAPI <libloaderapi.h>
GetModuleFileNameEx(HANDLE hProcess,HMODULE hModule,LPSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetModuleFileNameExA(HANDLE hProcess,HMODULE hModule,LPSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetModuleFileNameExW(HANDLE hProcess,HMODULE hModule,LPWSTR lpFilename,DWORD nSize) DWORD WINAPI <psapi.h>
GetModuleFileNameW(HMODULE hModule,LPWSTR lpFilename,DWORD nSize) WINBASEAPI DWORD WINAPI <libloaderapi.h>
GetModuleHandle(LPCSTR lpModuleName) WINBASEAPI HMODULE WINAPI <libloaderapi.h>
GetModuleHandleA(LPCSTR lpModuleName) WINBASEAPI HMODULE WINAPI <libloaderapi.h>
GetModuleHandleEx(DWORD dwFlags,LPCSTR lpModuleName,HMODULE * phModule) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
GetModuleHandleExA(DWORD dwFlags,LPCSTR lpModuleName,HMODULE * phModule) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
GetModuleHandleExW(DWORD dwFlags,LPCWSTR lpModuleName,HMODULE * phModule) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
GetModuleHandleW(LPCWSTR lpModuleName) WINBASEAPI HMODULE WINAPI <libloaderapi.h>
GetModuleInformation(HANDLE hProcess,HMODULE hModule,LPMODULEINFO lpmodinfo,DWORD cb) WINBOOL WINAPI <psapi.h>
GetModules(BSTR applicationDir,BSTR applicationName,BSTR assemblyName,SAFEARRAY ** pModules)virtual HRESULT WINAPI <comsvcs.h>
GetMoniker(DWORD dwSiteData,DWORD dwAssign,DWORD dwWhich,IMoniker ** ppimk)virtual HRESULT WINAPI <oledbdep.h>
GetMoniker(IMoniker ** ppIMoniker)virtual HRESULT WINAPI <oledbdep.h>
GetMoniker(LPCWSTR pwzLocation,DWORD dwAssign,IMoniker ** ppimkLocation)virtual HRESULT WINAPI <oledbdep.h>
GetMonikerReference(DWORD dwWhichRef,IMoniker ** ppimkTarget,LPWSTR * ppwzLocation)virtual HRESULT WINAPI <hlink.h>
GetMonitor(VMRGUID * pGUID)virtual HRESULT WINAPI <strmif.h>
GetMonitorBrightness(HANDLE hMonitor,LPDWORD pdwMinimumBrightness,LPDWORD pdwCurrentBrightness,LPDWORD pdwMaximumBrightness) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorCapabilities(HANDLE hMonitor,LPDWORD pdwMonitorCapabilities,LPDWORD pdwSupportedColorTemperatures) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorColorTemperature(HANDLE hMonitor,LPMC_COLOR_TEMPERATURE pctCurrentColorTemperature) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorContrast(HANDLE hMonitor,LPDWORD pdwMinimumContrast,LPDWORD pdwCurrentContrast,LPDWORD pdwMaximumContrast) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorDisplayAreaPosition(HANDLE hMonitor,MC_POSITION_TYPE ptPositionType,LPDWORD pdwMinimumPosition,LPDWORD pdwCurrentPosition,LPDWORD pdwMaximumPosition) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorDisplayAreaSize(HANDLE hMonitor,MC_SIZE_TYPE stSizeType,LPDWORD pdwMinimumWidthOrHeight,LPDWORD pdwCurrentWidthOrHeight,LPDWORD pdwMaximumWidthOrHeight) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorInfo(HMONITOR hMonitor,LPMONITORINFO lpmi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMonitorInfoA(HMONITOR hMonitor,LPMONITORINFO lpmi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMonitorInfoW(HMONITOR hMonitor,LPMONITORINFO lpmi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetMonitorRedGreenOrBlueDrive(HANDLE hMonitor,MC_DRIVE_TYPE dtDriveType,LPDWORD pdwMinimumDrive,LPDWORD pdwCurrentDrive,LPDWORD pdwMaximumDrive) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorRedGreenOrBlueGain(HANDLE hMonitor,MC_GAIN_TYPE gtGainType,LPDWORD pdwMinimumGain,LPDWORD pdwCurrentGain,LPDWORD pdwMaximumGain) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMonitorTechnologyType(HANDLE hMonitor,LPMC_DISPLAY_TECHNOLOGY_TYPE pdtyDisplayTechnologyType) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
GetMostRecentRunTime(SYSTEMTIME * pstLastRun)virtual HRESULT WINAPI <mstask.h>
GetMouseMovePointsEx(UINT cbSize,LPMOUSEMOVEPOINT lppt,LPMOUSEMOVEPOINT lpptBuf,int nBufPoints,DWORD resolution) WINUSERAPI int WINAPI <winuser.h>
GetMoveCause(__LONG32 * pdwCause)virtual HRESULT WINAPI <agtsvr.h>
GetMUILanguage(void) LANGID WINAPI <commctrl.h>
GetMulticastIpAddressEntry(PMIB_MULTICASTIPADDRESS_ROW Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetMulticastIpAddressTable(ADDRESS_FAMILY Family,PMIB_MULTICASTIPADDRESS_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetMultipleTrustee(PTRUSTEE_A pTrustee) WINADVAPI PTRUSTEE_A WINAPI <aclapi.h>
GetMultipleTrusteeA(PTRUSTEE_A pTrustee) WINADVAPI PTRUSTEE_A WINAPI <aclapi.h>
GetMultipleTrusteeOperation(PTRUSTEE_A pTrustee) WINADVAPI MULTIPLE_TRUSTEE_OPERATION WINAPI <aclapi.h>
GetMultipleTrusteeOperationA(PTRUSTEE_A pTrustee) WINADVAPI MULTIPLE_TRUSTEE_OPERATION WINAPI <aclapi.h>
GetMultipleTrusteeOperationW(PTRUSTEE_W pTrustee) WINADVAPI MULTIPLE_TRUSTEE_OPERATION WINAPI <aclapi.h>
GetMultipleTrusteeW(PTRUSTEE_W pTrustee) WINADVAPI PTRUSTEE_W WINAPI <aclapi.h>
GetMultiTypeInfoCount(ULONG * pcti) virtual HRESULT WINAPI <multinfo.h>
GetMValue(cmyk)<wingdi.h>
GetMyRoles(const BSTR strConfig,LONG * pRoles)virtual HRESULT WINAPI <certadm.h>
GetMyTransactionVote(TransactionVote * ptxVote)virtual HRESULT WINAPI <comsvcs.h>
GetName(BSTR * pbstr)virtual HRESULT WINAPI <tom.h>
GetName(BSTR * pbstrNameOut)virtual HRESULT WINAPI <tom.h>
GetName(BSTR * pbszName)virtual HRESULT WINAPI <tom.h>
GetName(BSTR * pName)virtual HRESULT WINAPI <tom.h>
GetName(BSTR * pstrOut)virtual HRESULT WINAPI <tom.h>
GetName(LONG DistPointIndex,LONG NameIndex,BSTR * pstrName)virtual HRESULT WINAPI <tom.h>
GetName(LONG NameIndex,BSTR * pstrName)virtual HRESULT WINAPI <tom.h>
GetName(VOID) virtual CString <tom.h>
GetNameByType(LPGUID lpServiceType,LPSTR lpServiceName,DWORD dwNameLength) INT WINAPI <nspapi.h>
GetNameByTypeA(LPGUID lpServiceType,LPSTR lpServiceName,DWORD dwNameLength) INT WINAPI <nspapi.h>
GetNameByTypeW(LPGUID lpServiceType,LPWSTR lpServiceName,DWORD dwNameLength) INT WINAPI <nspapi.h>
GetNameChoice(LONG DistPointIndex,LONG NameIndex,LONG * pNameChoice)virtual HRESULT WINAPI <certenc.h>
GetNameChoice(LONG NameIndex,LONG * pNameChoice)virtual HRESULT WINAPI <certenc.h>
GetNameCount(LONG * pNameCount)virtual HRESULT WINAPI <certenc.h>
GetNameCount(LONG DistPointIndex,LONG * pNameCount)virtual HRESULT WINAPI <certenc.h>
GetNamedPipeClientComputerName(HANDLE Pipe,LPSTR ClientComputerName,ULONG ClientComputerNameLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeClientComputerNameA(HANDLE Pipe,LPSTR ClientComputerName,ULONG ClientComputerNameLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeClientComputerNameW(HANDLE Pipe,LPWSTR ClientComputerName,ULONG ClientComputerNameLength) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
GetNamedPipeClientProcessId(HANDLE Pipe,PULONG ClientProcessId) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeClientSessionId(HANDLE Pipe,PULONG ClientSessionId) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeHandleState(HANDLE hNamedPipe,LPDWORD lpState,LPDWORD lpCurInstances,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout,LPSTR lpUserName,DWORD nMaxUserNameSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeHandleStateA(HANDLE hNamedPipe,LPDWORD lpState,LPDWORD lpCurInstances,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout,LPSTR lpUserName,DWORD nMaxUserNameSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeHandleStateW(HANDLE hNamedPipe,LPDWORD lpState,LPDWORD lpCurInstances,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout,LPWSTR lpUserName,DWORD nMaxUserNameSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeInfo(HANDLE hNamedPipe,LPDWORD lpFlags,LPDWORD lpOutBufferSize,LPDWORD lpInBufferSize,LPDWORD lpMaxInstances) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeServerProcessId(HANDLE Pipe,PULONG ServerProcessId) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedPipeServerSessionId(HANDLE Pipe,PULONG ServerSessionId) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNamedProfileInfo(HPROFILE,PNAMED_PROFILE_INFO) WINBOOL WINAPI <icm.h>
GetNamedSecurityInfo(LPCSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID * ppsidOwner,PSID * ppsidGroup,PACL * ppDacl,PACL * ppSacl,PSECURITY_DESCRIPTOR * ppSecurityDescriptor) WINADVAPI DWORD WINAPI <aclapi.h>
GetNamedSecurityInfoA(LPCSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID * ppsidOwner,PSID * ppsidGroup,PACL * ppDacl,PACL * ppSacl,PSECURITY_DESCRIPTOR * ppSecurityDescriptor) WINADVAPI DWORD WINAPI <aclapi.h>
GetNamedSecurityInfoW(LPCWSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID * ppsidOwner,PSID * ppsidGroup,PACL * ppDacl,PACL * ppSacl,PSECURITY_DESCRIPTOR * ppSecurityDescriptor) WINADVAPI DWORD WINAPI <aclapi.h>
GetNamedTimer(REFGUID rguidName,ITimer ** ppTimer)virtual HRESULT WINAPI <ocmm.h>
GetNameForTagID(ELEMENT_TAG_ID tagId,BSTR * pbstrName)virtual HRESULT WINAPI <mshtmlc.h>
getnameinfo(const struct sockaddr * sa,socklen_t salen,char * host,DWORD hostlen,char * serv,DWORD servlen,int flags) WINSOCK_API_LINKAGE int WSAAPI <wspiapi.h>
GetNameInfoW(const SOCKADDR * pSockaddr,socklen_t SockaddrLength,PWCHAR pNodeBuffer,DWORD NodeBufferSize,PWCHAR pServiceBuffer,DWORD ServiceBufferSize,INT Flags) WINSOCK_API_LINKAGE INT WSAAPI <ws2tcpip.h>
GetNames(LPWSTR * pwszInterface,LPWSTR * pwszMethod)virtual HRESULT WINAPI <callobj.h>
GetNamespaceAt(ULONG uIndex,ULONG * puNameBufLength,LPWSTR pName)virtual HRESULT WINAPI <wmiutils.h>
GetNamespaceCount(ULONG * puCount)virtual HRESULT WINAPI <wmiutils.h>
GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo) WINBASEAPI VOID WINAPI <sysinfoapi.h>
GetNativeVideoProps(DWORD * pdwVideoWidth,DWORD * pdwVideoHeight,DWORD * pdwPictAspectRatioX,DWORD * pdwPictAspectRatioY)virtual HRESULT WINAPI <strmif.h>
GetNativeVideoSize(LONG * lpWidth,LONG * lpHeight,LONG * lpARWidth,LONG * lpARHeight)virtual HRESULT WINAPI <strmif.h>
GetNavigateState(BNSTATE * pbnstate)virtual HRESULT WINAPI <shdeprecated.h>
GetNearestColor(Color * color)	Status <wingdi.h>
GetNearestColor(HDC hdc,COLORREF color) WINGDIAPI COLORREF WINAPI <wingdi.h>
GetNearestPaletteIndex(HPALETTE h,COLORREF color) WINGDIAPI UINT WINAPI <wingdi.h>
GetNetInterfaceHandle(LONG lObjIndex)virtual HNETINTERFACE WINAPI <cluadmex.h>
GetNetScheduleAccountInformation(LPCWSTR pwszServerName,DWORD ccAccount,WCHAR wszAccount[]) STDAPI <atacct.h>
GetNetworkAdministrationAccess(WINBOOL * pbNetworkAdministrationAccess)virtual HRESULT WINAPI <txcoord.h>
GetNetworkClientAccess(WINBOOL * pbNetworkClientAccess)virtual HRESULT WINAPI <txcoord.h>
GetNetworkHandle(LONG lObjIndex)virtual HNETWORK WINAPI <cluadmex.h>
GetNetworkInboundAccess(WINBOOL * pbInbound)virtual HRESULT WINAPI <txcoord.h>
GetNetworkInfo(IClusCfgNetworkInfo ** ppiccniOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetNetworkInfoFromBlob(HBLOB hBlob,LPNETWORKINFO lpNetworkInfo) DWORD __cdecl <netmon.h>
GetNetworkInformation(CONST NET_IF_NETWORK_GUID * NetworkGuid,PNET_IF_COMPARTMENT_ID CompartmentId,PULONG SiteId,PWCHAR NetworkName,ULONG Length) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetNetworkOutboundAccess(WINBOOL * pbOutbound)virtual HRESULT WINAPI <txcoord.h>
GetNetworkParams(PFIXED_INFO pFixedInfo,PULONG pOutBufLen) DWORD WINAPI <iphlpapi.h>
GetNetworkTIPAccess(WINBOOL * pbNetworkTIPAccess)virtual HRESULT WINAPI <txcoord.h>
GetNetworkTransactionAccess(WINBOOL * pbNetworkTransactionAccess)virtual HRESULT WINAPI <txcoord.h>
GetNext(DXLISTPOS & rPosition)inline TYPE CDXList<mmcobj.h>
GetNext(PNODE Node,PPNODE Next)virtual HRESULT WINAPI <mmcobj.h>
GetNext(VARIANT * pvarResult)virtual HRESULT WINAPI <mmcobj.h>
GetNextAssoc(DXLISTPOS & rNextPosition,KEY & rKey,VALUE & rValue)void CDXMap<dxtmpl.h>
GetNextChange(BYTE * pbBuffer,__LONG32 nBufferSize,__LONG32 * pnRecordLength)virtual HRESULT WINAPI <mshtmlc.h>
GetNextColumnName(ADS_SEARCH_HANDLE hSearchHandle,LPWSTR * ppszColumnName)virtual HRESULT WINAPI <iads.h>
GetNextDlgGroupItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious) WINUSERAPI HWND WINAPI <winuser.h>
GetNextDlgTabItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious) WINUSERAPI HWND WINAPI <winuser.h>
GetNextExtension(LPCLSID pExtCLSID)virtual HRESULT WINAPI <mmc.h>
GetNextInstance(IAppointment ** Appointment)virtual HRESULT WINAPI <cdoex.h>
GetNextItem(HSCOPEITEM item,HSCOPEITEM * pItemNext,MMC_COOKIE * pCookie)virtual HRESULT WINAPI <mmc.h>
GetNextItem(LPRESULTDATAITEM item)virtual HRESULT WINAPI <mmc.h>
GetNextLogArchiveExtent(CLFS_LOG_ARCHIVE_CONTEXT pvArchiveContext,CLFS_ARCHIVE_DESCRIPTOR rgadExtent[],ULONG cDescriptors,PULONG pcDescriptorsReturned)WINBOOL WINAPI <clfsw32.h>
GetNextRow(ADS_SEARCH_HANDLE hSearchResult)virtual HRESULT WINAPI <iads.h>
GetNextRows(HCHAPTER hReserved,DBROWOFFSET lRowsOffset,DBROWCOUNT cRows,DBCOUNTITEM * pcRowsObtained,HROW ** prghRows)virtual HRESULT WINAPI <oledb.h>
GetNextRowset(IUnknown * pUnkOuter,REFIID riid,IUnknown ** ppNextRowset)virtual HRESULT WINAPI <oledbdep.h>
GetNextRunTime(SYSTEMTIME * pstNextRun)virtual HRESULT WINAPI <mstask.h>
GetNextSibling(hwnd)<windowsx.h>
GetNextWindow(hWnd,wCmd)<winuser.h>
GetNicIdx(pReserved)<adptif.h>
GetNLSVersion(NLS_FUNCTION Function,LCID Locale,LPNLSVERSIONINFO lpVersionInformation) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetNLSVersionEx(NLS_FUNCTION function,LPCWSTR lpLocaleName,LPNLSVERSIONINFOEX lpVersionInformation) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetNodeClusterState(LPCWSTR lpszNodeName,DWORD * pdwClusterState) DWORD WINAPI <clusapi.h>
GetNodeHandle(LONG lObjIndex)virtual HNODE WINAPI <cluadmex.h>
GetNodeName(ULONG cbNodeNameBufferSize,LPWSTR pNodeNameBuffer)virtual HRESULT WINAPI <transact.h>
GetNodeNameSize(ULONG * pcbNodeNameSize)virtual HRESULT WINAPI <transact.h>
GetNoLineNumber(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetNoProgressTimeout(ULONG * Seconds)virtual HRESULT WINAPI <bits.h>
GetNotificationMode(__LONG32 * pMode)virtual HRESULT WINAPI <tom.h>
GetNotificationResourceManager(HANDLE ResourceManagerHandle,PTRANSACTION_NOTIFICATION TransactionNotification,ULONG NotificationLength,DWORD dwMilliseconds,PULONG ReturnLength) WINBOOL WINAPI <ktmw32.h>
GetNotificationResourceManagerAsync(HANDLE ResourceManagerHandle,PTRANSACTION_NOTIFICATION TransactionNotification,ULONG TransactionNotificationLength,PULONG ReturnLength,LPOVERLAPPED pOverlapped) WINBOOL WINAPI <ktmw32.h>
GetNotifyCmdLine(LPWSTR * pProgram,LPWSTR * pParameters)virtual HRESULT WINAPI <bits1_5.h>
GetNotifyFlags(__LONG32 * lplNoNotifyFlags)virtual HRESULT WINAPI <control.h>
GetNotifyFlags(ULONG * pVal)virtual HRESULT WINAPI <control.h>
GetNotifyInterface(IUnknown ** pVal)virtual HRESULT WINAPI <bits.h>
GetNPPAddress2FilterFromBlob(HBLOB hBlob,LPADDRESSTABLE2 pAddressTable,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
GetNPPAddressFilterFromBlob(HBLOB hBlob,LPADDRESSTABLE pAddressTable,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
GetNPPBlobFromUI(HWND hwnd,HBLOB hFilterBlob,HBLOB * phBlob) DWORD __cdecl <netmon.h>
GetNPPBlobFromUIExU(HWND hwnd,HBLOB hFilterBlob,HBLOB * phBlob,char * szHelpFileName) DWORD __cdecl <netmon.h>
GetNPPBlobs(PBLOB_TABLE * ppBlobTable) DWORD __cdecl <netmon.h>
GetNPPBlobTable(HBLOB hFilterBlob,PBLOB_TABLE * ppBlobTable) DWORD __cdecl <netmon.h>
GetNPPEtypeSapFilter(HBLOB hBlob,WORD * pnSaps,WORD * pnEtypes,LPBYTE * ppSapTable,LPWORD * ppEtypeTable,DWORD * pFilterFlags,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
GetNPPMacTypeAsNumber(HBLOB hBlob,LPDWORD lpMacType) DWORD __cdecl <netmon.h>
GetNPPPatternFilterFromBlob(HBLOB hBlob,LPEXPRESSION pExpression,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
GetNPPTriggerFromBlob(HBLOB hBlob,LPTRIGGER pTrigger,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
GetNtmsMediaPoolName(HANDLE hSession,LPNTMS_GUID lpPoolId,LPSTR lpNameBuf,LPDWORD lpdwBufSize) DWORD WINAPI <ntmsapi.h>
GetNtmsMediaPoolNameA(HANDLE hSession,LPNTMS_GUID lpPoolId,LPSTR lpNameBuf,LPDWORD lpdwBufSize) DWORD WINAPI <ntmsapi.h>
GetNtmsMediaPoolNameW(HANDLE hSession,LPNTMS_GUID lpPoolId,LPWSTR lpNameBuf,LPDWORD lpdwBufSize) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectAttribute(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,LPCSTR lpAttributeName,LPVOID lpAttributeData,LPDWORD lpAttributeSize) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectAttributeA(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,LPCSTR lpAttributeName,LPVOID lpAttributeData,LPDWORD lpAttributeSize) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectAttributeW(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,LPCWSTR lpAttributeName,LPVOID lpAttributeData,LPDWORD lpAttributeSize) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectInformation(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATION lpInfo) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectInformation(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATIONA lpInfo) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectInformationA(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATIONA lpInfo) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectInformationW(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATIONW lpInfo) DWORD WINAPI <ntmsapi.h>
GetNtmsObjectSecurity(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded) DWORD WINAPI <ntmsapi.h>
GetNtmsRequestOrder(HANDLE hSession,LPNTMS_GUID lpRequestId,LPDWORD lpdwOrderNumber) DWORD WINAPI <ntmsapi.h>
GetNtmsUIOptions(HANDLE hSession,const LPNTMS_GUID lpObjectId,DWORD dwType,LPSTR lpszDestination,LPDWORD lpdwBufSize) DWORD WINAPI <ntmsapi.h>
GetNtmsUIOptionsA(HANDLE hSession,const LPNTMS_GUID lpObjectId,DWORD dwType,LPSTR lpszDestination,LPDWORD lpdwBufSize) DWORD WINAPI <ntmsapi.h>
GetNtmsUIOptionsW(HANDLE hSession,const LPNTMS_GUID lpObjectId,DWORD dwType,LPWSTR lpszDestination,LPDWORD lpdwBufSize) DWORD WINAPI <ntmsapi.h>
GetNumaAvailableMemoryNode(UCHAR Node,PULONGLONG AvailableBytes) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaAvailableMemoryNodeEx(USHORT Node,PULONGLONG AvailableBytes) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaHighestNodeNumber(PULONG HighestNodeNumber) WINBASEAPI WINBOOL WINAPI <systemtopologyapi.h>
GetNumaNodeNumberFromHandle(HANDLE hFile,PUSHORT NodeNumber) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaNodeProcessorMask(UCHAR Node,PULONGLONG ProcessorMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaNodeProcessorMaskEx(USHORT Node,PGROUP_AFFINITY ProcessorMask) WINBASEAPI WINBOOL WINAPI <systemtopologyapi.h>
GetNumaProcessorNode(UCHAR Processor,PUCHAR NodeNumber) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaProcessorNodeEx(PPROCESSOR_NUMBER Processor,PUSHORT NodeNumber) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaProximityNode(ULONG ProximityId,PUCHAR NodeNumber) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumaProximityNodeEx(ULONG ProximityId,PUSHORT NodeNumber) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetNumberFormat(LCID Locale,DWORD dwFlags,LPCSTR lpValue,CONST NUMBERFMTA * lpFormat,LPSTR lpNumberStr,int cchNumber) WINBASEAPI int WINAPI <winnls.h>
GetNumberFormatA(LCID Locale,DWORD dwFlags,LPCSTR lpValue,CONST NUMBERFMTA * lpFormat,LPSTR lpNumberStr,int cchNumber) WINBASEAPI int WINAPI <winnls.h>
GetNumberFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,LPCWSTR lpValue,CONST NUMBERFMTW * lpFormat,LPWSTR lpNumberStr,int cchNumber) WINBASEAPI int WINAPI <winnls.h>
GetNumberFormatW(LCID Locale,DWORD dwFlags,LPCWSTR lpValue,CONST NUMBERFMTW * lpFormat,LPWSTR lpNumberStr,int cchNumber) WINBASEAPI int WINAPI <winnls.h>
GetNumberOfApps(DWORD * pdwApps)virtual HRESULT WINAPI <shappmgr.h>
GetNumberOfCapabilities(DWORD * pdwCount)virtual HRESULT WINAPI <ipmsp.h>
GetNumberOfCategories(DWORD * pdwCat)virtual HRESULT WINAPI <shappmgr.h>
GetNumberOfChapters(ULONG ulTitle,ULONG * pulNumberOfChapters)virtual HRESULT WINAPI <strmif.h>
GetNumberOfChapters(ULONG ulTitle,ULONG * pulNumOfChapters)virtual HRESULT WINAPI <strmif.h>
GetNumberOfCodePageInfo(UINT * pcCodePage)virtual HRESULT WINAPI <mlang.h>
GetNumberOfConsoleInputEvents(HANDLE hConsoleInput,LPDWORD lpNumberOfEvents) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons) WINBASEAPI WINBOOL WINAPI <wincon.h>
GetNumberOfDeinterlaceModes(VMRVideoDesc * lpVideoDescription,LPDWORD lpdwNumDeinterlaceModes,LPGUID lpDeinterlaceModes)virtual HRESULT WINAPI <strmif.h>
GetNumberOfEventLogRecords(HANDLE hEventLog,PDWORD NumberOfRecords) WINADVAPI WINBOOL WINAPI <winbase.h>
GetNumberOfInterfaces(PDWORD pdwNumIf) DWORD WINAPI <iphlpapi.h>
GetNumberOfPhysicalMonitorsFromHMONITOR(HMONITOR hMonitor,LPDWORD pdwNumberOfPhysicalMonitors) _BOOL WINAPI <physicalmonitorenumerationapi.h>
GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(IDirect3DDevice9 * pDirect3DDevice9,LPDWORD pdwNumberOfPhysicalMonitors) HRESULT WINAPI <physicalmonitorenumerationapi.h>
GetNumberOfScripts(UINT * pnScripts)virtual HRESULT WINAPI <mlang.h>
GetNumberOfStreams(DWORD * pdwMaxStreams)virtual HRESULT WINAPI <strmif.h>
GetNumCharsPerLine(__LONG32 * plCharsPerLine)virtual HRESULT WINAPI <agtsvr.h>
GetNumDropped(LONG * plDropped)virtual HRESULT WINAPI <strmif.h>
GetNumElements(__LONG32 * plnNumPathElements)virtual HRESULT WINAPI <iads.h>
GetNumExposedPins(IGraphBuilder * pGraph,DWORD * pdwNumPins) virtual HRESULT <mspterm.h>
GetNumLines(__LONG32 * plLines)virtual HRESULT WINAPI <agtsvr.h>
GetNumNotDropped(LONG * plNotDropped)virtual HRESULT WINAPI <strmif.h>
GetObject(BSTR bstrName,VARIANT * pvItem)virtual HRESULT WINAPI <xmltrnsf.h>
GetObject(BSTR ClassName,BSTR RelativeName,IDispatch ** ppObject)virtual HRESULT WINAPI <xmltrnsf.h>
GetObject(BSTR Path,IBITSExtensionSetup ** ppExtensionSetup)virtual HRESULT WINAPI <xmltrnsf.h>
GetObject(BSTR strObjectPath,IDispatch * pCtx,IXMLDOMDocument ** ppXMLDocument)virtual HRESULT WINAPI <xmltrnsf.h>
GetObject(const BSTR ObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject ** ppObject,IWbemCallResult ** ppCallResult)HRESULT WINAPI <xmltrnsf.h>
GetObject(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext * pCtx,IWbemClassObject ** ppObject,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI <xmltrnsf.h>
GetObject(HANDLE h,int c,LPVOID pv) WINGDIAPI int WINAPI <xmltrnsf.h>
GetObject(IMoniker * pimk,WINBOOL fBindIfRootRegistered,IUnknown ** ppiunk)virtual HRESULT WINAPI <xmltrnsf.h>
GetObject(REFIID riid,void ** ppv)virtual HRESULT WINAPI <xmltrnsf.h>
GetObjectA(HANDLE h,int c,LPVOID pv) WINGDIAPI int WINAPI <wingdi.h>
GetObjectAccessRights(SEC_OBJECT * pObject,ULONG * pcAccessEntries,EXPLICIT_ACCESS_W ** prgAccessEntries)virtual HRESULT WINAPI <oledb.h>
GetObjectAttributes(LPWSTR * pAttributeNames,DWORD dwNumberAttributes,PADS_ATTR_INFO * ppAttributeEntries,DWORD * pdwNumAttributesReturned)virtual HRESULT WINAPI <iads.h>
GetObjectContext(ppIOC)<comsvcs.h>
GetObjectCount(void)virtual LONG WINAPI <cluadmex.h>
GetObjectHeapSize(HOBJECTHEAP hObjectHeap) extern DWORD WINAPI <nmsupp.h>
GetObjectInformation(PADS_OBJECT_INFO * ppObjInfo)virtual HRESULT WINAPI <iads.h>
GetObjectName(LONG lObjIndex,BSTR lpszName,LONG * pcchName)virtual HRESULT WINAPI <cluadmex.h>
GetObjectOwner(SEC_OBJECT * pObject,TRUSTEE_W ** ppOwner)virtual HRESULT WINAPI <oledb.h>
GetObjectProperty(__LONG32 * lnADsType,VARIANT * pvProp)virtual HRESULT WINAPI <iads.h>
GetObjectToHandleWorkFromLu(IDtcLuRecoveryInitiatedByLuWork ** ppWork)virtual HRESULT WINAPI <txdtc.h>
GetObjectType(HGDIOBJ h) WINGDIAPI DWORD WINAPI <wingdi.h>
GetObjectType(LONG lObjIndex)virtual CLUADMEX_OBJECT_TYPE WINAPI <wingdi.h>
GetObjectTypes(ULONG * cObjectTypes,GUID ** rgObjectTypes)virtual HRESULT WINAPI <oledb.h>
GetObjectW(HANDLE h,int c,LPVOID pv) WINGDIAPI int WINAPI <wingdi.h>
GetOEMCP(void) WINBASEAPI UINT WINAPI <winnls.h>
GetOldestEventLogRecord(HANDLE hEventLog,PDWORD OldestRecord) WINADVAPI WINBOOL WINAPI <winbase.h>
GetOleaccVersionInfo(DWORD * pVer,DWORD * pBuild) STDAPI_<oleacc.h>
GetOleObject(IOleObject ** ppobjv)virtual HRESULT WINAPI <shdeprecated.h>
GetOpenCardNameW(LPOPENCARDNAMEW) extern WINSCARDAPI LONG WINAPI <winscard.h>
GetOpenClipboardWindow(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetOpenFileNamePreview(LPOPENFILENAMEA lpofn) WINBOOL WINAPI <vfw.h>
GetOpenFileNamePreviewA(LPOPENFILENAMEA lpofn) WINBOOL WINAPI <vfw.h>
GetOpenFileNamePreviewW(LPOPENFILENAMEW lpofn) WINBOOL WINAPI <vfw.h>
GetOpenFileNameW(LPOPENFILENAMEW) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
GetOpenStatus(HIMC hIMC)virtual HRESULT WINAPI <mshtmlc.h>
GetOperation(PCHAR pszOperation,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetOption(__LONG32 lnOption,VARIANT * pvValue)virtual HRESULT WINAPI <iads.h>
GetOptions(XACTOPT * pOptions)virtual HRESULT WINAPI <transact.h>
GetOptionsObject(ITransactionOptions ** ppOptions)virtual HRESULT WINAPI <transact.h>
GetOptionString(BSTR * pbstrOptions)virtual HRESULT WINAPI <htiframe.h>
GetOriginalCallerName(BSTR * bstrUserName)virtual HRESULT WINAPI <comsvcs.h>
GetOriginalCallerSID(PSID * pSID)virtual HRESULT WINAPI <comsvcs.h>
GetOriginalCreatorName(BSTR * bstrUserName)virtual HRESULT WINAPI <comsvcs.h>
GetOriginalCreatorSID(PSID * pSID)virtual HRESULT WINAPI <comsvcs.h>
GetOriginalData(HROW hRow,HACCESSOR hAccessor,void * pData)virtual HRESULT WINAPI <oledb.h>
GetOriginalRow(HCHAPTER hReserved,HROW hRow,HROW * phRowOriginal)virtual HRESULT WINAPI <msdasql.h>
GetOriginalSize(__LONG32 * plWidth,__LONG32 * plHeight)virtual HRESULT WINAPI <agtsvr.h>
GetOsSafeBootMode(PDWORD Flags) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetOSType(IASOSTYPE * eOSType)virtual HRESULT WINAPI <sdoias.h>
GetOSVersion(DWORD * pdwMajorVersionOut,DWORD * pdwMinorVersionOut,WORD * pwSuiteMaskOut,BYTE * pbProductTypeOut,BSTR * pbstrCSDVersionOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetOurCompareStates(unsigned char * pOurTransId,DTCLUCOMPARESTATE * pCompareState)virtual HRESULT WINAPI <txdtc.h>
GetOurLogNameSize(DWORD * pcbOurLogName)virtual HRESULT WINAPI <txdtc.h>
GetOurTransIdSize(DWORD * pcbOurTransId)virtual HRESULT WINAPI <txdtc.h>
GetOurXln(DTCLUXLN * pXln,unsigned char * pOurLogName,DWORD * pdwProtocol)virtual HRESULT WINAPI <txdtc.h>
GetOurXln(DTCLUXLN * pXln,unsigned char * pOurLogName,unsigned char * pRemoteLogName,DWORD * pdwProtocol)virtual HRESULT WINAPI <txdtc.h>
GetOuterUnknown()   PUNKNOWN <stdunk.h>
GetOutline(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetOutlineTextMetrics(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm) WINGDIAPI UINT WINAPI <wingdi.h>
GetOutlineTextMetricsA(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm) WINGDIAPI UINT WINAPI <wingdi.h>
GetOutlineTextMetricsW(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICW potm) WINGDIAPI UINT WINAPI <wingdi.h>
GetOutputData(const DWORD dwIndex,LPWSTR * ppszSchema,DWORD * pdwType,BYTE ** ppData,ULONG * uSize)virtual HRESULT WINAPI <bidispl.h>
GetOutputRect(DWORD dwStreamID,NORMALIZEDRECT * pRect)virtual HRESULT WINAPI <strmif.h>
GetOverlappedResult(HANDLE hFile,LPOVERLAPPED lpOverlapped,LPDWORD lpNumberOfBytesTransferred,WINBOOL bWait) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
GetOverlappedResultEx(HANDLE hFile,LPOVERLAPPED lpOverlapped,LPDWORD lpNumberOfBytesTransferred,DWORD dwMilliseconds,WINBOOL bAlertable) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
GetOverlayFX(DWORD * lpdwOverlayFX)virtual HRESULT WINAPI <strmif.h>
GetOwner(LPWSTR * pVal)virtual HRESULT WINAPI <bits.h>
GetOwnerModuleFromPidAndInfo(ULONG ulPid,ULONGLONG * pInfo,TCPIP_OWNER_MODULE_INFO_CLASS Class,PVOID pBuffer,PDWORD pdwSize) DWORD <iphlpapi.h>
GetOwnerModuleFromTcp6Entry(PMIB_TCP6ROW_OWNER_MODULE pTcpEntry,TCPIP_OWNER_MODULE_INFO_CLASS Class,PVOID pBuffer,PDWORD pdwSize) DWORD WINAPI <iphlpapi.h>
GetOwnerModuleFromTcpEntry(PMIB_TCPROW_OWNER_MODULE pTcpEntry,TCPIP_OWNER_MODULE_INFO_CLASS Class,PVOID pBuffer,PDWORD pdwSize) DWORD WINAPI <iphlpapi.h>
GetOwnerModuleFromUdp6Entry(PMIB_UDP6ROW_OWNER_MODULE pUdpEntry,TCPIP_OWNER_MODULE_INFO_CLASS Class,PVOID pBuffer,PDWORD pdwSize) DWORD WINAPI <iphlpapi.h>
GetOwnerModuleFromUdpEntry(PMIB_UDPROW_OWNER_MODULE pUdpEntry,TCPIP_OWNER_MODULE_INFO_CLASS Class,PVOID pBuffer,PDWORD pdwSize) DWORD WINAPI <iphlpapi.h>
GetPage(BSTR * pbszPage)virtual HRESULT WINAPI <mstask.h>
GetPage(TASKPAGE tpType,WINBOOL fPersistChanges,HPROPSHEETPAGE * phPage)virtual HRESULT WINAPI <mstask.h>
GetPageBreakBefore(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetPageScale()	REAL <gdiplusgraphics.h>
GetPageUnit()	Unit <gdiplusgraphics.h>
GetPainterInfo(HTML_PAINTER_INFO * pInfo)virtual HRESULT WINAPI <mshtmlc.h>
GetPalette(ColorPalette * palette,INT size)__inline__ Status Image::<shdeprecated.h>
GetPalette(HPALETTE * hpal)virtual HRESULT WINAPI <shdeprecated.h>
GetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries) WINGDIAPI UINT WINAPI <wingdi.h>
GetPaletteSize()__inline__ INT Image::<gdiplusimpl.h>
GetPara(ITextPara ** pPara)virtual HRESULT WINAPI <tom.h>
GetParam(ULONG iparam,VARIANT * pvar)virtual HRESULT WINAPI <callobj.h>
GetParameter(BSTR bstrParameterName,VARIANT * pvarParameterValue)virtual HRESULT WINAPI <azroles.h>
GetParameterInfo(DB_UPARAMS * pcParams,DBPARAMINFO ** prgParamInfo,OLECHAR ** ppNamesBuffer)virtual HRESULT WINAPI <oledbdep.h>
GetParameterRange(const GUID * Api,VARIANT * ValueMin,VARIANT * ValueMax,VARIANT * SteppingDelta)virtual HRESULT WINAPI <strmif.h>
GetParameters(LPWSTR * ppwszParameters)virtual HRESULT WINAPI <mstask.h>
GetParameters(PCHAR pszParameters,PDWORD pcbSize) virtual LPSTR WINAPI <mstask.h>
GetParameterValues(const GUID * Api,VARIANT ** Values,ULONG * ValuesCount)virtual HRESULT WINAPI <strmif.h>
GetParamInfo(ULONG iparam,CALLFRAMEPARAMINFO * pInfo)virtual HRESULT WINAPI <callobj.h>
GetParent(HWND hWnd) WINUSERAPI HWND WINAPI <winuser.h>
GetParent(PNODE Node,PPNODE Parent)virtual HRESULT WINAPI <winuser.h>
GetParentalLevel(ULONG * pulParentalLevel)virtual HRESULT WINAPI <strmif.h>
GetParentFrame(IUnknown ** ppunkParent)virtual HRESULT WINAPI <htiframe.h>
GetParentItem(HSCOPEITEM item,HSCOPEITEM * pItemParent,MMC_COOKIE * pCookie)virtual HRESULT WINAPI <mmc.h>
GetParentSite(IOleInPlaceSite ** ppipsite)virtual HRESULT WINAPI <shdeprecated.h>
GetPartitionId(BSTR * __MIDL_0011)virtual HRESULT WINAPI <comsvcs.h>
GetPartitionId(GUID * pGuid)virtual HRESULT WINAPI <comsvcs.h>
GetPassword(BSTR * pbstrPasswordOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetPath(HDC hdc,LPPOINT apt,LPBYTE aj,int cpt) WINGDIAPI int WINAPI <wingdi.h>
GetPathData(PathData * pathData)	Status <gdipluspath.h>
GetPathPoints(Point * points,INT count)	Status <gdipluspath.h>
GetPathPoints(PointF * points,INT count)	Status <gdipluspath.h>
GetPathTypes(BYTE * types,INT count)	Status <gdipluspath.h>
getpeername(SOCKET s,struct sockaddr * name,int * namelen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
GetPenAppFlags(VOID) UINT WINAPI <penwin.h>
GetPenAsyncState(UINT) WINBOOL WINAPI <penwin.h>
GetPenDataAttributes(HPENDATA,LPVOID,UINT) int WINAPI <penwin.h>
GetPenDataInfo(HPENDATA,LPPENDATAHEADER,LPPENINFO,DWORD) WINBOOL WINAPI <penwin.h>
GetPenDataStroke(LPPENDATA,UINT,LPPOINT *,LPVOID *,LPSTROKEINFO) WINBOOL WINAPI <penwin.h>
GetPendingColumns(HCHAPTER hReserved,HROW hRow,ULONG cColumnOrdinals,const ULONG rgiOrdinals[],DBPENDINGSTATUS rgColumnStatus[])virtual HRESULT WINAPI <msdasql.h>
GetPendingRows(HCHAPTER hReserved,DBPENDINGSTATUS dwRowStatus,DBCOUNTITEM * pcPendingRows,HROW ** prgPendingRows,DBPENDINGSTATUS ** prgPendingStatus)virtual HRESULT WINAPI <oledb.h>
GetPenHwData(LPPOINT,LPVOID,int,UINT,LPSTROKEINFO) REC WINAPI <penwin.h>
GetPenHwEventData(UINT,UINT,LPPOINT,LPVOID,int,LPSTROKEINFO) REC WINAPI <penwin.h>
GetPenInput(HPCM,LPPOINT,LPVOID,UINT,UINT,LPSTROKEINFO) int WINAPI <penwin.h>
GetPenMiscInfo(WPARAM,LPARAM) LONG WINAPI <penwin.h>
GetPenResource(WPARAM) HANDLE WINAPI <penwin.h>
GetPenType()	PenType <gdipluspen.h>
GetPerAdapterInfo(ULONG IfIndex,PIP_PER_ADAPTER_INFO pPerAdapterInfo,PULONG pOutBufLen) DWORD WINAPI <iphlpapi.h>
GetPerformanceInfo(PPERFORMACE_INFORMATION pPerformanceInformation,DWORD cb) WINBOOL WINAPI <psapi.h>
GetPermissions(GUID ObjectType,ACCESS_MASK * pPermissions)virtual HRESULT WINAPI <oledb.h>
GetPerTcp6ConnectionEStats(PMIB_TCP6ROW Row,TCP_ESTATS_TYPE EstatsType,PUCHAR Rw,ULONG RwVersion,ULONG RwSize,PUCHAR Ros,ULONG RosVersion,ULONG RosSize,PUCHAR Rod,ULONG RodVersion,ULONG RodSize) ULONG WINAPI <iphlpapi.h>
GetPerTcpConnectionEStats(PMIB_TCPROW Row,TCP_ESTATS_TYPE EstatsType,PUCHAR Rw,ULONG RwVersion,ULONG RwSize,PUCHAR Ros,ULONG RosVersion,ULONG RosSize,PUCHAR Rod,ULONG RodVersion,ULONG RodSize) ULONG WINAPI <iphlpapi.h>
GetPhoneCapsBuffer(PHONECAPS_BUFFER pcbCaps,DWORD * pdwSize,BYTE ** ppPhoneCapsBuffer)virtual HRESULT WINAPI <tapi3if.h>
GetPhoneFromTerminal(ITTerminal * pTerminal,ITPhone ** ppPhone)virtual HRESULT WINAPI <tapi3if.h>
GetPhoneNumbers(VARIANT * pNumbers,VARIANT * pNames)virtual HRESULT WINAPI <sdpblb.h>
GetPhraseTable(HCOMPRESSOR hcmp,PUINT pcPhrases,PBYTE * ppbImages,PUINT pcbImages,PBYTE * ppacbImageCompressed,PUINT pcbCompressed) ERRORCODE WINAPI <ftsiface.h>
GetPhysicalCursorPos(LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPhysicalDimension(SizeF * size)__inline__ Status Image::<gdiplusimpl.h>
GetPhysicallyInstalledSystemMemory(PULONGLONG TotalMemoryInKilobytes) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetPhysicalMonitorsFromHMONITOR(HMONITOR hMonitor,DWORD dwPhysicalMonitorArraySize,LPPHYSICAL_MONITOR pPhysicalMonitorArray) _BOOL WINAPI <physicalmonitorenumerationapi.h>
GetPhysicalMonitorsFromIDirect3DDevice9(IDirect3DDevice9 * pDirect3DDevice9,DWORD dwPhysicalMonitorArraySize,LPPHYSICAL_MONITOR pPhysicalMonitorArray) HRESULT WINAPI <physicalmonitorenumerationapi.h>
GetPhysicalType(LONG * pType,LPOLESTR * ppszType)virtual HRESULT WINAPI <strmif.h>
GetPidl(LPITEMIDLIST * ppidl)virtual HRESULT WINAPI <shdeprecated.h>
GetPixel(HDC hdc,int x,int y) WINGDIAPI COLORREF WINAPI <wingdi.h>
GetPixel(INT x,INT y,Color * color)__inline__ Status Bitmap::<wingdi.h>
GetPixelFormat()__inline__ PixelFormat Image::<wingdi.h>
GetPixelFormat(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetPixelFormatSize(PixelFormat pixfmt)static __inline__ UINT <gdipluspixelformats.h>
GetPixelOffsetMode()	PixelOffsetMode <gdiplusgraphics.h>
GetPlayerParentalLevel(ULONG * pulParentalLevel,BYTE pbCountryCode[2])virtual HRESULT WINAPI <strmif.h>
GetPlayerParentalLevel(ULONG * pulParentalLevel,ULONG * pulCountryCode)virtual HRESULT WINAPI <strmif.h>
GetPluggableSuperclasses(DWORD * pdwNumSuperclasses,IID * pSuperclasses)virtual HRESULT WINAPI <termmgr.h>
GetPluggableTerminalClasses(IID iidSuperclass,DWORD dwMediaTypes,DWORD * pdwNumClasses,IID * pTerminalClasses)virtual HRESULT WINAPI <termmgr.h>
GetPoint(__LONG32 Type,__LONG32 * px,__LONG32 * py)virtual HRESULT WINAPI <tom.h>
GetPointCount()	INT <gdipluspath.h>
GetPointerCursorId(UINT32 pointerId,UINT32 * cursorId) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerDevice(HANDLE device,POINTER_DEVICE_INFO * pointerDevice) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerDeviceCursors(HANDLE device,UINT32 * cursorCount,POINTER_DEVICE_CURSOR_INFO * deviceCursors) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerDeviceProperties(HANDLE device,UINT32 * propertyCount,POINTER_DEVICE_PROPERTY * pointerProperties) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerDeviceRects(HANDLE device,RECT * pointerDeviceRect,RECT * displayRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerDevices(UINT32 * deviceCount,POINTER_DEVICE_INFO * pointerDevices) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerFrameInfo(UINT32 pointerId,UINT32 * pointerCount,POINTER_INFO * pointerInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerFrameInfoHistory(UINT32 pointerId,UINT32 * entriesCount,UINT32 * pointerCount,POINTER_INFO * pointerInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerFramePenInfo(UINT32 pointerId,UINT32 * pointerCount,POINTER_PEN_INFO * penInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerFramePenInfoHistory(UINT32 pointerId,UINT32 * entriesCount,UINT32 * pointerCount,POINTER_PEN_INFO * penInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerFrameTouchInfo(UINT32 pointerId,UINT32 * pointerCount,POINTER_TOUCH_INFO * touchInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerFrameTouchInfoHistory(UINT32 pointerId,UINT32 * entriesCount,UINT32 * pointerCount,POINTER_TOUCH_INFO * touchInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerGravity(POINTER_GRAVITY * peGravity)virtual HRESULT WINAPI <mshtmlc.h>
GetPointerInfo(UINT32 pointerId,POINTER_INFO * pointerInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerInfoHistory(UINT32 pointerId,UINT32 * entriesCount,POINTER_INFO * pointerInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerInputTransform(UINT32 pointerId,UINT32 historyCount,UINT32 * inputTransform)WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerPenInfo(UINT32 pointerId,POINTER_PEN_INFO * penInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerPenInfoHistory(UINT32 pointerId,UINT32 * entriesCount,POINTER_PEN_INFO * penInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointers(IMarkupPointer * pIStart,IMarkupPointer * pIEnd)virtual HRESULT WINAPI <mshtmlc.h>
GetPointerTouchInfo(UINT32 pointerId,POINTER_TOUCH_INFO * touchInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerTouchInfoHistory(UINT32 pointerId,UINT32 * entriesCount,POINTER_TOUCH_INFO * touchInfo) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointerType(UINT32 pointerId,POINTER_INPUT_TYPE * pointerType) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetPointsFromPenData(HPENDATA,UINT,UINT,UINT,LPPOINT) WINBOOL WINAPI <penwin.h>
GetPolyFillMode(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetPortNumber(VOID) virtual DWORD WINAPI <ilogobj.h>
GetPortRange(RTC_PORT_TYPE enPortType,__LONG32 * plMinValue,__LONG32 * plMaxValue)virtual HRESULT WINAPI <rtccore.h>
GetPosition(__LONG32 * plLeft,__LONG32 * plTop)virtual HRESULT WINAPI <tom.h>
GetPosition(float * pValue)virtual HRESULT WINAPI <tom.h>
GetPosition(LONG lFlags,POINT * pptTopLeft)virtual HRESULT WINAPI <tom.h>
GetPosition(VARIANT * pvarX,VARIANT * pvarY,VARIANT * pvarWidth,VARIANT * pvarHeight)virtual HRESULT WINAPI <tom.h>
GetPositionCookie(DWORD * pdwPositioncookie)virtual HRESULT WINAPI <perhist.h>
GetPossibleActions(DWORD * pdwActions)virtual HRESULT WINAPI <shappmgr.h>
GetPreferredAspectRatio(__LONG32 * plAspectX,__LONG32 * plAspectY)virtual HRESULT WINAPI <control.h>
GetPreferredFont(__LONG32 cp,__LONG32 CodePage,__LONG32 Option,__LONG32 curCodepage,__LONG32 curFontSize,BSTR * pbstr,__LONG32 * pPitchAndFamily,__LONG32 * pNewFontSize)virtual HRESULT WINAPI <tom.h>
GetPrepareInfo(byte * pPrepInfo)virtual HRESULT WINAPI <txdtc.h>
GetPrepareInfo(ULONG cbPrepareInfo,byte * pPrepInfo)virtual HRESULT WINAPI <txdtc.h>
GetPrepareInfoSize(ULONG * pcbPrepInfo)virtual HRESULT WINAPI <txdtc.h>
GetPresenceData(BSTR * pbstrNamespace,BSTR * pbstrData)virtual HRESULT WINAPI <rtccore.h>
GetPrev(DXLISTPOS & rPosition)inline TYPE CDXList<dxtmpl.h>
GetPrevious(VARIANT * pvarResult)virtual HRESULT WINAPI <cdonts.h>
GetPreviousProtocolOffsetByName(HFRAME hFrame,DWORD dwStartOffset,LPSTR szProtocolName,DWORD * pdwPreviousOffset) DWORD WINAPI <netmon.h>
GetPreviousRow(ADS_SEARCH_HANDLE hSearchResult)virtual HRESULT WINAPI <iads.h>
GetPrevSibling(hwnd)<windowsx.h>
GetPrimaryNetworkAddress(IClusCfgIPAddressInfo ** ppIPAddressOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetPrinter(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterData(HANDLE hPrinter,LPSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded) DWORD WINAPI <winspool.h>
GetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded) DWORD WINAPI <winspool.h>
GetPrinterDataEx(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded) DWORD WINAPI <winspool.h>
GetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded) DWORD WINAPI <winspool.h>
GetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded) DWORD WINAPI <winspool.h>
GetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded) DWORD WINAPI <winspool.h>
GetPrinterDriver(HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterDriver2(HWND hWnd,HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded)WINBOOL WINAPI <winspool.h>
GetPrinterDriver2A(HWND hWnd,HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded)WINBOOL WINAPI <winspool.h>
GetPrinterDriver2W(HWND hWnd,HANDLE hPrinter,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded)WINBOOL WINAPI <winspool.h>
GetPrinterDriverA(HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterDriverDirectory(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterDriverDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterDriverDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterDriverPackagePath(LPCSTR pszServer,LPCSTR pszEnvironment,LPCSTR pszLanguage,LPCSTR pszPackageID,LPSTR pszDriverPackageCab,DWORD cchDriverPackageCab,LPDWORD pcchRequiredSize)HRESULT WINAPI <winspool.h>
GetPrinterDriverPackagePathA(LPCSTR pszServer,LPCSTR pszEnvironment,LPCSTR pszLanguage,LPCSTR pszPackageID,LPSTR pszDriverPackageCab,DWORD cchDriverPackageCab,LPDWORD pcchRequiredSize)HRESULT WINAPI <winspool.h>
GetPrinterDriverPackagePathW(LPCWSTR pszServer,LPCWSTR pszEnvironment,LPCWSTR pszLanguage,LPCWSTR pszPackageID,LPWSTR pszDriverPackageCab,DWORD cchDriverPackageCab,LPDWORD pcchRequiredSize)HRESULT WINAPI <winspool.h>
GetPrinterDriverW(HANDLE hPrinter,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrintProcessorCapabilities(LPTSTR pValueName,DWORD dwAttributes,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded)<winsplp.h>
GetPrintProcessorDirectory(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrintProcessorDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPrintProcessorDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded) WINBOOL WINAPI <winspool.h>
GetPriority(BG_JOB_PRIORITY * pVal)virtual HRESULT WINAPI <mstask.h>
GetPriority(DWORD * pdwPriority)virtual HRESULT WINAPI <mstask.h>
GetPriorityClass(HANDLE hProcess) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetPriorityClipboardFormat(UINT * paFormatPriorityList,int cFormats) WINUSERAPI int WINAPI <winuser.h>
GetPrivacyImpacted(WINBOOL * pState)virtual HRESULT WINAPI <mshtmlc.h>
GetPrivateKeyArchiveCertificate(void)virtual PCCERT_CONTEXT WINAPI <xenroll.h>
GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ResultantDescriptor,DWORD DescriptorLength,PDWORD ReturnLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetPrivateProfileInt(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault,LPCSTR lpFileName) WINBASEAPI UINT WINAPI <winbase.h>
GetPrivateProfileIntA(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault,LPCSTR lpFileName) WINBASEAPI UINT WINAPI <winbase.h>
GetPrivateProfileIntW(LPCWSTR lpAppName,LPCWSTR lpKeyName,INT nDefault,LPCWSTR lpFileName) WINBASEAPI UINT WINAPI <winbase.h>
GetPrivateProfileSection(LPCSTR lpAppName,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileSectionA(LPCSTR lpAppName,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileSectionNames(LPSTR lpszReturnBuffer,DWORD nSize,LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer,DWORD nSize,LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer,DWORD nSize,LPCWSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileSectionW(LPCWSTR lpAppName,LPWSTR lpReturnedString,DWORD nSize,LPCWSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileString(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpDefault,LPWSTR lpReturnedString,DWORD nSize,LPCWSTR lpFileName) WINBASEAPI DWORD WINAPI <winbase.h>
GetPrivateProfileStruct(LPCSTR lpszSection,LPCSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCSTR szFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetPrivateProfileStructA(LPCSTR lpszSection,LPCSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCSTR szFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetPrivateProfileStructW(LPCWSTR lpszSection,LPCWSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCWSTR szFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcAddress(HMODULE hModule,LPCSTR lpProcName) WINBASEAPI FARPROC WINAPI <libloaderapi.h>
GetProcAddress32W(DWORD hModule,LPCSTR lpszProc) DWORD WINAPI <wownt16.h>
GetProcessAffinityMask(HANDLE hProcess,PDWORD_PTR lpProcessAffinityMask,PDWORD_PTR lpSystemAffinityMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessDefaultLayout(DWORD * pdwDefaultLayout) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetProcessDEPPolicy(HANDLE hProcess,LPDWORD lpFlags,PBOOL lpPermanent) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessGroupAffinity(HANDLE hProcess,PUSHORT GroupCount,PUSHORT GroupArray) WINBASEAPI WINBOOL WINAPI <processtopologyapi.h>
GetProcessHandleCount(HANDLE hProcess,PDWORD pdwHandleCount) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetProcessHeap(VOID) WINBASEAPI HANDLE WINAPI <heapapi.h>
GetProcessHeaps(DWORD NumberOfHeaps,PHANDLE ProcessHeaps) WINBASEAPI DWORD WINAPI <heapapi.h>
GetProcessID(__LONG32 * id)virtual HRESULT WINAPI <comsvcs.h>
GetProcessId(HANDLE Process) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetProcessIdOfThread(HANDLE Thread) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetProcessImageFileName(HANDLE hProcess,LPSTR lpImageFileName,DWORD nSize) DWORD WINAPI <psapi.h>
GetProcessImageFileNameA(HANDLE hProcess,LPSTR lpImageFileName,DWORD nSize) DWORD WINAPI <psapi.h>
GetProcessImageFileNameW(HANDLE hProcess,LPWSTR lpImageFileName,DWORD nSize) DWORD WINAPI <psapi.h>
GetProcessInformation(HANDLE hProcess,PROCESS_INFORMATION_CLASS ProcessInformationClass,LPVOID ProcessInformation,DWORD ProcessInformationSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessIoCounters(HANDLE hProcess,PIO_COUNTERS lpIoCounters) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessMemoryInfo(HANDLE Process,PPROCESS_MEMORY_COUNTERS ppsmemCounters,DWORD cb) WINBOOL WINAPI <psapi.h>
GetProcessMitigationPolicy(HANDLE hProcess,PROCESS_MITIGATION_POLICY MitigationPolicy,PVOID lpBuffer,SIZE_T dwLength) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetProcessMode(DWORD * pdwMode)virtual HRESULT WINAPI <iwamreg.h>
GetProcessorInfo(WORD * pwProcessorArchitectureOut,WORD * pwProcessorLevelOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetProcessorSystemCycleTime(USHORT Group,PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,PDWORD ReturnedLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessPreferredUILanguages(DWORD dwFlags,PULONG pulNumLanguages,PZZWSTR pwszLanguagesBuffer,PULONG pcchLanguagesBuffer) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetProcessPriorityBoost(HANDLE hProcess,PBOOL pDisablePriorityBoost) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessShutdownParameters(LPDWORD lpdwLevel,LPDWORD lpdwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessTimes(HANDLE hProcess,LPFILETIME lpCreationTime,LPFILETIME lpExitTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetProcessVersion(DWORD ProcessId) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetProcessWindowStation(VOID) WINUSERAPI HWINSTA WINAPI <winuser.h>
GetProcessWorkingSetSize(HANDLE hProcess,PSIZE_T lpMinimumWorkingSetSize,PSIZE_T lpMaximumWorkingSetSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetProcessWorkingSetSizeEx(HANDLE hProcess,PSIZE_T lpMinimumWorkingSetSize,PSIZE_T lpMaximumWorkingSetSize,PDWORD Flags) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
GetProductInfo(DWORD dwOSMajorVersion,DWORD dwOSMinorVersion,DWORD dwSpMajorVersion,DWORD dwSpMinorVersion,PDWORD pdwReturnedProductType) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetProfile(BSTR bstrUserAccount,BSTR bstrUserPassword,BSTR bstrUserURI,BSTR bstrServer,__LONG32 lTransport,LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
GetProfileInt(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault) WINBASEAPI UINT WINAPI <winbase.h>
GetProfileIntA(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault) WINBASEAPI UINT WINAPI <winbase.h>
GetProfileIntW(LPCWSTR lpAppName,LPCWSTR lpKeyName,INT nDefault) WINBASEAPI UINT WINAPI <winbase.h>
GetProfilesDirectory(LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetProfilesDirectoryA(LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetProfilesDirectoryW(LPWSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetProfileSection(LPCSTR lpAppName,LPSTR lpReturnedString,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetProfileSectionA(LPCSTR lpAppName,LPSTR lpReturnedString,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetProfileSectionW(LPCWSTR lpAppName,LPWSTR lpReturnedString,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetProfileString(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpDefault,LPWSTR lpReturnedString,DWORD nSize) WINBASEAPI DWORD WINAPI <winbase.h>
GetProfileType(DWORD * dwFlags) USERENVAPI WINBOOL WINAPI <userenv.h>
GetProgress(BG_FILE_PROGRESS * pVal)virtual HRESULT WINAPI <qmgr.h>
GetProgress(BG_JOB_PROGRESS * pVal)virtual HRESULT WINAPI <qmgr.h>
GetProgress(DWORD dwFlags,DWORD * pdwProgress)virtual HRESULT WINAPI <qmgr.h>
GetProp(GROUPPROP propID,VARIANT * pvarVal)virtual HRESULT WINAPI <winuser.h>
GetProp(HWND hWnd,LPCSTR lpString) WINUSERAPI HANDLE WINAPI <winuser.h>
GetPropA(HWND hWnd,LPCSTR lpString) WINUSERAPI HANDLE WINAPI <winuser.h>
GetPropagationTokenSize(ULONG * pcbToken)virtual HRESULT WINAPI <txdtc.h>
GetProperties(const ULONG cPropertyIDSets,const DBPROPIDSET rgPropertyIDSets[],ULONG * pcPropertySets,DBPROPSET ** prgPropertySets)virtual HRESULT WINAPI <oledb.h>
GetProperties(NETCON_PROPERTIES ** ppProps)virtual HRESULT WINAPI <oledb.h>
GetProperties(ULONG cPropertyIDSets,const DBPROPIDSET rgPropertyIDSets[],ULONG * pcPropertySets,DBPROPSET ** prgPropertySets)virtual HRESULT WINAPI <oledb.h>
GetProperty(BSTR name,VARIANT * pProperty)virtual HRESULT WINAPI <sdoias.h>
GetProperty(const BSTR strConfig,BSTR strStorageLocation,BSTR strPropertyName,LONG Flags,VARIANT * pvarProperty)virtual HRESULT WINAPI <sdoias.h>
GetProperty(DWORD * pdwProperty)virtual HRESULT WINAPI <sdoias.h>
GetProperty(HKL hKL,DWORD fdwIndex,DWORD * pdwProperty)virtual HRESULT WINAPI <sdoias.h>
GetProperty(HPROTOCOL hProtocol,LPSTR PropertyName) HPROPERTY WINAPI <sdoias.h>
GetProperty(LONG Id,VARIANT * pValue)virtual HRESULT WINAPI <sdoias.h>
GetProperty(LONG lPropId,VARIANT varReserved,VARIANT * pvarProp)virtual HRESULT WINAPI <sdoias.h>
GetProperty(LPCWSTR pwzProperty,LPWSTR pwzValue,DWORD dwBufSize)virtual HRESULT WINAPI <sdoias.h>
GetProperty(LPDATAOBJECT pDataObject,BSTR szPropertyName,PBSTR pbstrProperty)virtual HRESULT WINAPI <sdoias.h>
GetPropertyAttribObj(BSTR bstrName,IDispatch ** ppObject)virtual HRESULT WINAPI <iiis.h>
GetPropertyAttributes(ULONG cpspec,PROPSPEC rgpspec[],ULONG rgflags[],PROPVARIANT rgpropvar[])virtual HRESULT WINAPI <wia.h>
GetPropertyCount()__inline__ UINT Image::<gdiplusimpl.h>
GetPropertyIdList(UINT numOfProperty,PROPID * list)__inline__ Status Image::<gdiplusimpl.h>
GetPropertyInfo(HPROPERTY hProperty) LPPROPERTYINFO WINAPI <sdoias.h>
GetPropertyInfo(LONG Id,IUnknown ** ppPropertyInfo)virtual HRESULT WINAPI <sdoias.h>
GetPropertyInfo(ULONG cPropertyIDSets,const DBPROPIDSET rgPropertyIDSets[],ULONG * pcPropertyInfoSets,DBPROPINFOSET ** prgPropertyInfoSets,OLECHAR ** ppDescBuffer)virtual HRESULT WINAPI <sdoias.h>
GetPropertyInstanceData(LPPROPERTYINST PropertyInst) INLINE LPVOID <netmon.h>
GetPropertyInstanceDataValue(p,type)<netmon.h>
GetPropertyInstanceExDataLength(LPPROPERTYINST PropertyInst) INLINE DWORD <netmon.h>
GetPropertyInstanceFrameDataLength(LPPROPERTYINST PropertyInst) INLINE DWORD <netmon.h>
GetPropertyItem(BSTR bstrName,LONG lnADsType,VARIANT * pVariant)virtual HRESULT WINAPI <iads.h>
GetPropertyItem(PROPID propId,UINT propSize,PropertyItem * buffer)__inline__ Status Image::<iads.h>
GetPropertyItemSize(PROPID propId)__inline__ UINT Image::<gdiplusimpl.h>
GetPropertySize(UINT * totalBufferSize,UINT * numProperties)__inline__ Status Image::<gdiplusimpl.h>
GetPropertyStream(GUID * pCompatibilityId,IStream ** ppIStream)virtual HRESULT WINAPI <wia.h>
GetPropertyText(HFRAME hFrame,LPPROPERTYINST lpPI,LPSTR szBuffer,DWORD BufferSize) LPSTR WINAPI <netmon.h>
GetPropInfoFromId(const DBID * pPropId,WCHAR ** pwcsName,DBTYPE * pPropType,unsigned int * puiWidth)virtual HRESULT WINAPI <indexsrv.h>
GetPropInfoFromName(const WCHAR * wcsPropName,DBID ** ppPropId,DBTYPE * pPropType,unsigned int * puiWidth)virtual HRESULT WINAPI <indexsrv.h>
GetPropName(ULONG ulIndex,LPOLESTR * ppszPropName)virtual HRESULT WINAPI <comsvcs.h>
GetPropValue(const BYTE * pIDString,DWORD dwIDStringLen,MSAAPROPID idProp,VARIANT * pvarValue,WINBOOL * pfHasProp)virtual HRESULT WINAPI <oleacc.h>
GetPropW(HWND hWnd,LPCWSTR lpString) WINUSERAPI HANDLE WINAPI <winuser.h>
GetProtected(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
getprotobyname(const char * name) WINSOCK_API_LINKAGE struct protoent<winsock2.h>
getprotobynumber(int number) WINSOCK_API_LINKAGE struct protoent<winsock2.h>
GetProtocol(LPWSTR * pProtocol)virtual HRESULT WINAPI <bits.h>
GetProtocolDescription(DWORD ProtocolID) LPLABELED_WORD WINAPI <netmon.h>
GetProtocolDescriptionTable(LPDWORD TableSize) LPLABELED_WORD WINAPI <netmon.h>
GetProtocolFromName(LPSTR ProtocolName) HPROTOCOL WINAPI <netmon.h>
GetProtocolFromTable(LPHANDOFFTABLE hTable,DWORD ItemToFind,PDWORD_PTR lpInstData) HPROTOCOL WINAPI <netmon.h>
GetProtocolInfo(HPROTOCOL hProtocol) LPPROTOCOLINFO WINAPI <netmon.h>
GetProtocols(DWORD dwBufferSize,unsigned char * pbBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <admex.h>
GetProtocolStartOffset(HFRAME hFrame,LPSTR ProtocolName) DWORD WINAPI <netmon.h>
GetProtocolStartOffsetHandle(HFRAME hFrame,HPROTOCOL hProtocol) DWORD WINAPI <netmon.h>
GetProtocolStatus(VOID) virtual DWORD WINAPI <ilogobj.h>
GetProvider(LPOLESTR * lpName)virtual HRESULT WINAPI <mmc.h>
GetProviderCardId(BSTR bstrCardName,LPGUID * ppguidProviderId)virtual HRESULT WINAPI <scardssp.h>
GetProviderMgmtInterface(VSS_ID ProviderId,IID InterfaceId,IUnknown ** ppItf)HRESULT WINAPI <vsbackup.h>
GetProviderMgmtInterfaceInternal(VSS_ID ProviderId,IID InterfaceId,IUnknown ** ppItf)HRESULT WINAPI <vsbackup.h>
GetProvParam(DWORD dwParam,DWORD * pcbData,BYTE ** ppbData,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
GetProxySettings(BG_JOB_PROXY_USAGE * pProxyUsage,LPWSTR * pProxyList,LPWSTR * pProxyBypassList)virtual HRESULT WINAPI <bits.h>
GetPS2ColorRenderingDictionary(HPROFILE,DWORD,PBYTE,PDWORD,PBOOL) WINBOOL WINAPI <icm.h>
GetPS2ColorRenderingIntent(HPROFILE,DWORD,PBYTE,PDWORD) WINBOOL WINAPI <icm.h>
GetPS2ColorSpaceArray(HPROFILE,DWORD,DWORD,PBYTE,PDWORD,PBOOL) WINBOOL WINAPI <icm.h>
GetPSTUIUserData(HWND)ULONG_PTR WINAPI <compstui.h>
GetPublishedAppInfo(PPUBAPPINFO ppai)virtual HRESULT WINAPI <shappmgr.h>
GetPublisherProperty(BSTR bstrPropertyName,VARIANT * propertyValue)virtual HRESULT WINAPI <eventsys.h>
GetPublisherPropertyCollection(IEventObjectCollection ** collection)virtual HRESULT WINAPI <eventsys.h>
GetPushSourceFlags(ULONG * pFlags)virtual HRESULT WINAPI <strmif.h>
GetPwrCapabilities(PSYSTEM_POWER_CAPABILITIES) BOOLEAN WINAPI <powrprof.h>
GetPwrDiskSpindownRange(PUINT,PUINT) BOOLEAN WINAPI <powrprof.h>
GetQueryClass(LPWSTR pBuf,int nBufSize) int <sql_1.h>
GetQueryInfo(ULONG uAnalysisType,ULONG uInfoId,ULONG uBufSize,LPVOID pDestBuf)virtual HRESULT WINAPI <wmiutils.h>
GetQueryList(VARIANT * pQryList)virtual HRESULT WINAPI <gpmgmt.h>
GetQueuedCompletionStatus(HANDLE CompletionPort,LPDWORD lpNumberOfBytesTransferred,PULONG_PTR lpCompletionKey,LPOVERLAPPED * lpOverlapped,DWORD dwMilliseconds) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
GetQueuedCompletionStatusEx(HANDLE CompletionPort,LPOVERLAPPED_ENTRY lpCompletionPortEntries,ULONG ulCount,PULONG ulNumEntriesRemoved,DWORD dwMilliseconds,WINBOOL fAlertable) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
GetQueueDepth(DWORD * pdwQDepth)virtual HRESULT WINAPI <comsvcs.h>
GetQueueStatus(UINT flags) WINUSERAPI DWORD WINAPI <winuser.h>
GetR()	BYTE <gdipluscolor.h>
GetRandomRgn(HDC hdc,HRGN hrgn,INT i) WINGDIAPI int WINAPI <wingdi.h>
GetRange(AudioDeviceProperty Property,__LONG32 * plMin,__LONG32 * plMax,__LONG32 * plSteppingDelta,__LONG32 * plDefault,TAPIControlFlags * plFlags)virtual HRESULT WINAPI <strmif.h>
GetRange(AudioSettingsProperty Property,__LONG32 * plMin,__LONG32 * plMax,__LONG32 * plSteppingDelta,__LONG32 * plDefault,TAPIControlFlags * plFlags)virtual HRESULT WINAPI <strmif.h>
GetRange(CallQualityProperty Property,__LONG32 * plMin,__LONG32 * plMax,__LONG32 * plSteppingDelta,__LONG32 * plDefault,TAPIControlFlags * plFlags)virtual HRESULT WINAPI <strmif.h>
GetRange(LONG Property,LONG * pMin,LONG * pMax,LONG * pSteppingDelta,LONG * pDefault,LONG * pCapsFlags)virtual HRESULT WINAPI <strmif.h>
GetRange(StreamQualityProperty Property,__LONG32 * plMin,__LONG32 * plMax,__LONG32 * plSteppingDelta,__LONG32 * plDefault,TAPIControlFlags * plFlags)virtual HRESULT WINAPI <strmif.h>
GetRangeRowset(IUnknown * pUnkOuter,DBORDINAL ulStartCell,DBORDINAL ulEndCell,REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,UINT cjBytes) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetRawBuffer(unsigned int * len)           const wchar_t<corewrappers.h>
GetRawFormat(GUID * format)__inline__ Status Image::<gdiplusimpl.h>
GetRawInputBuffer(PRAWINPUT pData,PUINT pcbSize,UINT cbSizeHeader) WINUSERAPI UINT WINAPI <winuser.h>
GetRawInputData(HRAWINPUT hRawInput,UINT uiCommand,LPVOID pData,PUINT pcbSize,UINT cbSizeHeader) WINUSERAPI UINT WINAPI <winuser.h>
GetRawInputDeviceInfo(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize) WINUSERAPI UINT WINAPI <winuser.h>
GetRawInputDeviceInfoA(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize) WINUSERAPI UINT WINAPI <winuser.h>
GetRawInputDeviceInfoW(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize) WINUSERAPI UINT WINAPI <winuser.h>
GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList,PUINT puiNumDevices,UINT cbSize) WINUSERAPI UINT WINAPI <winuser.h>
GetRawPointerDeviceData(UINT32 pointerId,UINT32 historyCount,UINT32 propertiesCount,POINTER_DEVICE_PROPERTY * pProperties,LONG * pValues) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetRecordCount(ULONG * pcRecords)virtual HRESULT WINAPI <oledb.h>
GetRecordInfoFromGuids(REFGUID rGuidTypeLib,ULONG uVerMajor,ULONG uVerMinor,LCID lcid,REFGUID rGuidTypeInfo,IRecordInfo ** ppRecInfo)WINOLEAUTAPI <oleauto.h>
GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,IRecordInfo ** ppRecInfo)WINOLEAUTAPI <oleauto.h>
GetRecoverySeqNum(LONG * plRecoverySeqNum)virtual HRESULT WINAPI <txdtc.h>
GetRectangle(Rect * rect)	Status <gdipluspath.h>
GetRectangle(RectF * rect)	Status <gdipluspath.h>
GetRecurringMaster(BSTR CalendarLocation,BSTR UserName,BSTR Password,IAppointment ** Appointment)virtual HRESULT WINAPI <cdoex.h>
GetRed()	BYTE <gdipluscolor.h>
GetReferencedRowset(DBORDINAL iOrdinal,REFIID riid,IUnknown ** ppReferencedRowset)virtual HRESULT WINAPI <oledb.h>
GetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData) WINGDIAPI DWORD WINAPI <wingdi.h>
GetRegionScans(const Matrix * matrix,Rect * rects,INT * count)__inline__ Status Region::<gdiplusimpl.h>
GetRegionScans(const Matrix * matrix,RectF * rects,INT * count)__inline__ Status Region::<gdiplusimpl.h>
GetRegionScansCount(const Matrix * matrix)__inline__ UINT Region::<gdiplusimpl.h>
GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices,PUINT puiNumDevices,UINT cbSize) WINUSERAPI UINT WINAPI <winuser.h>
GetRegisteredSink(ICallFrameEvents ** ppsink)virtual HRESULT WINAPI <callobj.h>
GetRegisterWordStyleA(HKL hKL,UINT nItem,STYLEBUFA * pStyleBuf,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetRegisterWordStyleW(HKL hKL,UINT nItem,STYLEBUFW * pStyleBuf,UINT * puCopied)virtual HRESULT WINAPI <mshtmlc.h>
GetRelatedBehaviors(LONG lDirection,LPOLESTR pchCategory,IEnumUnknown ** ppEnumerator)virtual HRESULT WINAPI <mshtmlc.h>
GetRemoteClassId(CLSID * pclsid)virtual HRESULT WINAPI <txcoord.h>
GetRemoteName(LPWSTR * pVal)virtual HRESULT WINAPI <bits.h>
GetRemoteSessionDescription(BSTR * pbstrContentType,BSTR * pbstrSessionDescription)virtual HRESULT WINAPI <rtccore.h>
GetRenderInfo(LONG * plRenderInfo)virtual HRESULT WINAPI <mshtmlc.h>
GetRenderingMode(DWORD * pMode)virtual HRESULT WINAPI <strmif.h>
GetRenderingOrigin(INT * x,INT * y)	Status <gdiplusgraphics.h>
GetRenderingPrefs(DWORD * dwRenderFlags)virtual HRESULT WINAPI <strmif.h>
GetRenderingPrefs(DWORD * pdwRenderFlags)virtual HRESULT WINAPI <strmif.h>
GetReplyData(byte ** ppBuffer,UINT64 * pLength)virtual HRESULT WINAPI <bits1_5.h>
GetReplyFileName(LPWSTR * pReplyFileName)virtual HRESULT WINAPI <bits1_5.h>
GetReplyProgress(BG_JOB_REPLY_PROGRESS * pProgress)virtual HRESULT WINAPI <bits1_5.h>
GetRequestAttribute(const BSTR strAttributeName,BSTR * pstrAttributeValue)virtual HRESULT WINAPI <certif.h>
GetRequestCount(ULONG * puCount)virtual HRESULT WINAPI <bidispl.h>
GetRequestedRuntimeInfo(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,DWORD,LPWSTR,DWORD,DWORD *,LPWSTR,DWORD,DWORD *)HRESULT     WINAPI <mscoree.h>
GetRequestId(LONG * pRequestId)virtual HRESULT WINAPI <certcli.h>
GetRequestProperty(const BSTR strPropertyName,LONG PropertyType,VARIANT * pvarPropertyValue)virtual HRESULT WINAPI <certif.h>
GetResource(IObjPool * pPool,IUnknown ** ppUnk)virtual HRESULT WINAPI <comsvcs.h>
GetResourceHandle(LONG lObjIndex)virtual HRESOURCE WINAPI <cluadmex.h>
GetResourceNetworkName(LONG lObjIndex,BSTR lpszNetName,ULONG * pcchNetName)virtual WINBOOL WINAPI <cluadmex.h>
GetResourcePrivateData(BYTE * pbBufferOut,DWORD * pcbBufferInout)virtual HRESULT WINAPI <cluscfgserver.h>
GetResourceTypeName(LONG lObjIndex,BSTR lpszResTypeName,LONG * pcchResTypeName)virtual HRESULT WINAPI <cluadmex.h>
GetResponse(BYTE byP1,BYTE byP2,LONG lDataLength,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
GetRestorePosition(__LONG32 * pLeft,__LONG32 * pTop,__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetRestoreType()VSS_RESTORE_TYPE WINAPI <vswriter.h>
GetRestrictedColumnInfo(DBORDINAL cColumnIDMasks,const DBID rgColumnIDMasks[],DWORD dwFlags,DBORDINAL * pcColumns,DBID ** prgColumnIDs,DBCOLUMNINFO ** prgColumnInfo,OLECHAR ** ppStringsBuffer)virtual HRESULT WINAPI <oledb.h>
GetResult(HRESULT * phr)virtual HRESULT WINAPI <oledb.h>
GetResult(IUnknown * pUnkOuter,DBRESULTFLAG lResultFlag,REFIID riid,DBROWCOUNT * pcRowsAffected,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetResultsHRC(HRC,UINT,LPHRCRESULT,UINT) int WINAPI <penwin.h>
GetResultViewType(MMC_COOKIE cookie,LPOLESTR * ppViewType,__LONG32 * pViewOptions)virtual HRESULT WINAPI <mmc.h>
GetResultViewType2(MMC_COOKIE cookie,PRESULT_VIEW_TYPE_INFO pResultViewType)virtual HRESULT WINAPI <mmc.h>
GetReturnTokenSize(ULONG * pcbReturnToken)virtual HRESULT WINAPI <txdtc.h>
GetReturnValue(void)virtual HRESULT WINAPI <callobj.h>
GetRevocationReason(LONG * pReason)virtual HRESULT WINAPI <certadm.h>
GetRfc1766FromLcid(LCID Locale,BSTR * pbstrRfc1766)virtual HRESULT WINAPI <mlang.h>
GetRfc1766Info(LCID Locale,LANGID LangId,PRFC1766INFO pRfc1766Info)virtual HRESULT WINAPI <mlang.h>
GetRfc1766Info(LCID Locale,PRFC1766INFO pRfc1766Info)virtual HRESULT WINAPI <mlang.h>
GetRgnBox(HRGN hrgn,LPRECT lprc) WINGDIAPI int WINAPI <wingdi.h>
GetRight()	REAL <gdiplustypes.h>
GetRightIndent(float * pValue)virtual HRESULT WINAPI <tom.h>
GetRoles(BSTR bstrScopeName,VARIANT * pvarRoleNames)virtual HRESULT WINAPI <azroles.h>
GetRoleText(DWORD lRole,LPSTR lpszRole,UINT cchRoleMax) STDAPI_<oleacc.h>
GetRoleTextA(DWORD lRole,LPSTR lpszRole,UINT cchRoleMax) STDAPI_<oleacc.h>
GetRoleTextW(DWORD lRole,LPWSTR lpszRole,UINT cchRoleMax) STDAPI_<oleacc.h>
GetRoot(LPSTR pRoot,ULONG ulBufSize,ULONG * pulActualSize)virtual HRESULT WINAPI <strmif.h>
GetRoot(PPNODE Root)virtual HRESULT WINAPI <strmif.h>
GetRootCertificates(DWORD dwBufferSize,unsigned char * pbBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <admex.h>
GetRootItem(IWiaItem ** ppIWiaItem)virtual HRESULT WINAPI <wia.h>
GetROP2(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetRoutingInfoLength(f)<netmon.h>
GetRowFromHROW(IUnknown * pUnkOuter,HROW hRow,REFIID riid,IUnknown ** ppUnk)virtual HRESULT WINAPI <oledb.h>
GetRowPosition(HCHAPTER * phChapter,HROW * phRow,DBPOSITIONFLAGS * pdwPositionFlags)virtual HRESULT WINAPI <oledb.h>
GetRowsAt(HWATCHREGION hReserved1,HCHAPTER hReserved2,DBBKMARK cbBookmark,const BYTE * pBookmark,DBROWOFFSET lRowsOffset,DBROWCOUNT cRows,DBCOUNTITEM * pcRowsObtained,HROW ** prghRows)virtual HRESULT WINAPI <oledb.h>
GetRowsAtRatio(HWATCHREGION hReserved1,HCHAPTER hReserved2,DBCOUNTITEM ulNumerator,DBCOUNTITEM ulDenominator,DBROWCOUNT cRows,DBCOUNTITEM * pcRowsObtained,HROW ** prghRows)virtual HRESULT WINAPI <oledb.h>
GetRowsByBookmark(HCHAPTER hReserved,DBCOUNTITEM cRows,const DBBKMARK rgcbBookmarks[],const BYTE * rgpBookmarks[],HROW rghRows[],DBROWSTATUS rgRowStatus[])virtual HRESULT WINAPI <oledb.h>
GetRowset(IUnknown * pUnkOuter,REFGUID rguidSchema,ULONG cRestrictions,const VARIANT rgRestrictions[],REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetRowset(REFIID riid,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetRowStatus(HCHAPTER hReserved,DBCOUNTITEM cRows,const HROW rghRows[],DBPENDINGSTATUS rgPendingStatus[])virtual HRESULT WINAPI <oledb.h>
GetRSOP(GPMRSOPMode gpmRSoPMode,BSTR bstrNamespace,__LONG32 lFlags,IGPMRSOP ** ppIGPMRSOP)virtual HRESULT WINAPI <gpmgmt.h>
GetRTTAndHopCount(IPAddr DestIpAddress,PULONG HopCount,ULONG MaxHops,PULONG RTT) WINBOOL WINAPI <iphlpapi.h>
GetRunningObjectTable(DWORD reserved,LPRUNNINGOBJECTTABLE * pprot)WINOLEAPI <objbase.h>
GetRunTimes(const LPSYSTEMTIME pstBegin,const LPSYSTEMTIME pstEnd,WORD * pCount,LPSYSTEMTIME * rgstTaskTimes)virtual HRESULT WINAPI <mstask.h>
GetRValue(rgb)<wingdi.h>
GetSaps(LPVOID MacHeader,DWORD MacType) DWORD WINAPI <netmon.h>
GetSaved(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetSaveFileName(LPOPENFILENAMEA) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
GetSaveFileNameA(LPOPENFILENAMEA) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
GetSaveFileNamePreview(LPOPENFILENAMEA lpofn) WINBOOL WINAPI <vfw.h>
GetSaveFileNamePreviewA(LPOPENFILENAMEA lpofn) WINBOOL WINAPI <vfw.h>
GetSaveFileNamePreviewW(LPOPENFILENAMEW lpofn) WINBOOL WINAPI <vfw.h>
GetSaveFileNameW(LPOPENFILENAMEW) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
GetSchemaLock(DBID * pTableID,LOCKMODE lmMode,HANDLE * phLockHandle,ULONGLONG * pTableVersion)virtual HRESULT WINAPI <sqloledb.h>
GetSchemaPropertyAttributes(BSTR bstrName,IDispatch ** ppObject)virtual HRESULT WINAPI <iiis.h>
GetSchemas(ULONG * pcSchemas,GUID ** prgSchemas)virtual HRESULT WINAPI <oledbdep.h>
GetSchemas(ULONG * pcSchemas,GUID ** prgSchemas,ULONG ** prgRestrictionSupport)virtual HRESULT WINAPI <oledbdep.h>
GetScode(hr)<winerror.h>
GetScope(ULONG uIndex,ULONG * puClassNameBufSize,LPWSTR pszClass,IWbemPathKeyList ** pKeyList)virtual HRESULT WINAPI <wmiutils.h>
GetScopeAsText(ULONG uIndex,ULONG * puTextBufSize,LPWSTR pszText)virtual HRESULT WINAPI <wmiutils.h>
GetScopeCount(ULONG * puCount)virtual HRESULT WINAPI <wmiutils.h>
GetScriptFontInfo(SCRIPT_ID sid,DWORD dwFlags,UINT * puiFonts,SCRIPTFONTINFO * pScriptFont)virtual HRESULT WINAPI <mlang.h>
GetScrollBarInfo(HWND hwnd,LONG idObject,PSCROLLBARINFO psbi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetScrollInfo(HWND hwnd,int nBar,LPSCROLLINFO lpsi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetScrollPos(HWND hWnd,int nBar) WINUSERAPI int WINAPI <winuser.h>
GetScrollRange(HWND hWnd,int nBar,LPINT lpMinPos,LPINT lpMaxPos) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetSDOSchema(IUnknown ** ppSDOSchema)virtual HRESULT WINAPI <sdoias.h>
GetSecurityCallContext(ISecurityCallContext ** ppObject)virtual HRESULT WINAPI <comsvcs.h>
GetSecurityDescriptor(__LONG32 lFlags,IDispatch ** ppSD)virtual HRESULT WINAPI <iads.h>
GetSecurityDescriptor(VARIANT varPath,__LONG32 lPathFormat,__LONG32 lFormat,VARIANT * pVariant)virtual HRESULT WINAPI <iads.h>
GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSECURITY_DESCRIPTOR_CONTROL pControl,LPDWORD lpdwRevision) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,LPBOOL lpbDaclPresent,PACL * pDacl,LPBOOL lpbDaclDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID * pGroup,LPBOOL lpbGroupDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor) WINADVAPI DWORD WINAPI <securitybaseapi.h>
GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID * pOwner,LPBOOL lpbOwnerDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor,PUCHAR RMControl) WINADVAPI DWORD WINAPI <securitybaseapi.h>
GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,LPBOOL lpbSaclPresent,PACL * pSacl,LPBOOL lpbSaclDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetSecurityInfo(HANDLE handle,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID * ppsidOwner,PSID * ppsidGroup,PACL * ppDacl,PACL * ppSacl,PSECURITY_DESCRIPTOR * ppSecurityDescriptor) WINADVAPI DWORD WINAPI <gpmgmt.h>
GetSecurityInfo(IGPMSecurityInfo ** ppSecurityInfo)virtual HRESULT WINAPI <gpmgmt.h>
GetSelection(ITextSelection ** ppSel)virtual HRESULT WINAPI <tom.h>
GetSelectionEx(ITextSelection ** ppSel)virtual HRESULT WINAPI <tom.h>
GetSelectionServices(IMarkupContainer * pIContainer,ISelectionServices ** ppSelSvc)virtual HRESULT WINAPI <mshtmlc.h>
GetSelectionServicesListener(ISelectionServicesListener ** ppISelectionServicesListener)virtual HRESULT WINAPI <mshtmlc.h>
GetSequenceNumber(__LONG32 nCurrent,__LONG32 * pnNew)virtual HRESULT WINAPI <mshtmlc.h>
getservbyname(const char * name,const char * proto) WINSOCK_API_LINKAGE struct servent<winsock2.h>
getservbyport(int port,const char * proto) WINSOCK_API_LINKAGE struct servent<winsock2.h>
GetServer(ULONG * puNameBufLength,LPWSTR pName)virtual HRESULT WINAPI <wmiutils.h>
GetServerAddress(PCHAR pszServerIPAddress,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetServerGuid(void)virtual HRESULT WINAPI <iadmw.h>
GetService(DWORD dwNameSpace,LPGUID lpGuid,LPSTR lpServiceName,DWORD dwProperties,LPVOID lpBuffer,LPDWORD lpdwBufferSize,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo) INT WINAPI <nspapi.h>
GetServiceA(DWORD dwNameSpace,LPGUID lpGuid,LPSTR lpServiceName,DWORD dwProperties,LPVOID lpBuffer,LPDWORD lpdwBufferSize,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo) INT WINAPI <nspapi.h>
GetServiceDisplayName(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPSTR lpDisplayName,LPDWORD lpcchBuffer) WINADVAPI WINBOOL WINAPI <winsvc.h>
GetServiceDisplayNameA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPSTR lpDisplayName,LPDWORD lpcchBuffer) WINADVAPI WINBOOL WINAPI <winsvc.h>
GetServiceDisplayNameW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPWSTR lpDisplayName,LPDWORD lpcchBuffer) WINADVAPI WINBOOL WINAPI <winsvc.h>
GetServiceKeyName(SC_HANDLE hSCManager,LPCSTR lpDisplayName,LPSTR lpServiceName,LPDWORD lpcchBuffer) WINADVAPI WINBOOL WINAPI <winsvc.h>
GetServiceKeyNameA(SC_HANDLE hSCManager,LPCSTR lpDisplayName,LPSTR lpServiceName,LPDWORD lpcchBuffer) WINADVAPI WINBOOL WINAPI <winsvc.h>
GetServiceKeyNameW(SC_HANDLE hSCManager,LPCWSTR lpDisplayName,LPWSTR lpServiceName,LPDWORD lpcchBuffer) WINADVAPI WINBOOL WINAPI <winsvc.h>
GetServiceSDO(IASDATASTORE eDataStore,BSTR bstrServiceName,IUnknown ** ppServiceSDO)virtual HRESULT WINAPI <sdoias.h>
GetServiceStatus(LONG * status)virtual HRESULT WINAPI <sdoias.h>
GetServiceW(DWORD dwNameSpace,LPGUID lpGuid,LPWSTR lpServiceName,DWORD dwProperties,LPVOID lpBuffer,LPDWORD lpdwBufferSize,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo) INT WINAPI <nspapi.h>
GetSession(REFIID riid,IUnknown ** ppSession)virtual HRESULT WINAPI <oledb.h>
GetSessionCompartmentId(ULONG SessionId) NET_IF_COMPARTMENT_ID NETIOAPI_API_ <netioapi.h>
GetSessionId(VSS_ID * idSession)HRESULT WINAPI <vswriter.h>
GetSetCodePage(VARIANT * pvarIn,VARIANT * pvarOut)virtual HRESULT WINAPI <shdeprecated.h>
GetShadow(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetShellWindow(VOID) WINUSERAPI HWND WINAPI <winuser.h>
GetShortPathName(LPCSTR lpszLongPath,LPSTR lpszShortPath,DWORD cchBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetShortPathNameA(LPCSTR lpszLongPath,LPSTR lpszShortPath,DWORD cchBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetShortPathNameW(LPCWSTR lpszLongPath,LPWSTR lpszShortPath,DWORD cchBuffer) WINBASEAPI DWORD WINAPI <fileapi.h>
GetSidIdentifierAuthority(PSID pSid) WINADVAPI PSID_IDENTIFIER_AUTHORITY WINAPI <securitybaseapi.h>
GetSidLengthRequired(UCHAR nSubAuthorityCount) WINADVAPI DWORD WINAPI <securitybaseapi.h>
GetSidSubAuthority(PSID pSid,DWORD nSubAuthority) WINADVAPI PDWORD WINAPI <securitybaseapi.h>
GetSidSubAuthorityCount(PSID pSid) WINADVAPI PUCHAR WINAPI <securitybaseapi.h>
GetSignature(DWORD dwBufferSize,unsigned char * pbBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <admex.h>
GetSite(BSTR bstrSiteName,IGPMSOM ** ppSOM)virtual HRESULT WINAPI <gpmgmt.h>
GetSite(REFIID riid,void ** ppvSite) virtual HRESULT WINAPI <gpmgmt.h>
GetSiteName(PCHAR pszSiteName,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetSitesContainer(BSTR bstrForest,BSTR bstrDomain,BSTR bstrDomainController,__LONG32 lDCFlags,IGPMSitesContainer ** ppIGPMSitesContainer)virtual HRESULT WINAPI <gpmgmt.h>
GetSize() int <tom.h>
GetSize(__LONG32 * plWidth,__LONG32 * plHeight)virtual HRESULT WINAPI <tom.h>
GetSize(float * pValue)virtual HRESULT WINAPI <tom.h>
GetSize(LONG dwFlags,SIZE sizeContent,POINT * pptTranslateBy,POINT * pptTopLeft,SIZE * psizeProposed)virtual HRESULT WINAPI <tom.h>
GetSize(Size * size)	VOID <tom.h>
GetSize(SizeF * size)	VOID <tom.h>
GetSize(ULONG * pcMegaBytes)virtual HRESULT WINAPI <tom.h>
GetSize(ULONG * pSize)virtual HRESULT WINAPI <tom.h>
GetSlowAppInfo(PSLOWAPPINFO psaid)virtual HRESULT WINAPI <shappmgr.h>
GetSmallCaps(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetSmoothingMode()	SmoothingMode <gdiplusgraphics.h>
GetSnapinDescription(LPOLESTR * lpDescription)virtual HRESULT WINAPI <mmc.h>
GetSnapinImage(HICON * hAppIcon)virtual HRESULT WINAPI <mmc.h>
GetSnapinVersion(LPOLESTR * lpVersion)virtual HRESULT WINAPI <mmc.h>
GetSnapshotDeviceName(LPCWSTR wszOriginalVolume,LPCWSTR * ppwszSnapshotDevice)HRESULT WINAPI <vswriter.h>
getsockname(SOCKET s,struct sockaddr * name,int * namelen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
getsockopt(SOCKET s,int level,int optname,char * optval,int * optlen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
GetSoftwareUpdateInfo(LPCWSTR szDistUnit,LPSOFTDISTINFO psdi)STDAPI <urlmon.h>
GetSOM(BSTR bstrPath,IGPMSOM ** ppSOM)virtual HRESULT WINAPI <gpmgmt.h>
GetSortOrder(DBORDINAL * pcValues,DBORDINAL * prgColumns[],DBSORT * prgOrders[])virtual HRESULT WINAPI <oledb.h>
GetSoundEffectsOn(__LONG32 * pbOn)virtual HRESULT WINAPI <agtsvr.h>
GetSourceCodePage(UINT * puiSrcCodePage)virtual HRESULT WINAPI <mlang.h>
GetSourcePosition(__LONG32 * pLeft,__LONG32 * pTop,__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetSourceRow(REFIID riid,IUnknown ** ppRow)virtual HRESULT WINAPI <oledb.h>
GetSourceRowset(REFIID riid,IUnknown ** ppRowset,HROW * phRow)virtual HRESULT WINAPI <oledb.h>
GetSourcesRowset(IUnknown * pUnkOuter,REFIID riid,ULONG cPropertySets,DBPROPSET rgProperties[],IUnknown ** ppSourcesRowset)virtual HRESULT WINAPI <oledb.h>
GetSpaceAfter(float * pValue)virtual HRESULT WINAPI <tom.h>
GetSpaceBefore(float * pValue)virtual HRESULT WINAPI <tom.h>
GetSpaceUsed(DWORDLONG * pdwlSpaceUsed,IEmptyVolumeCacheCallBack * picb)virtual HRESULT WINAPI <emptyvc.h>
GetSpacing(float * pValue)virtual HRESULT WINAPI <tom.h>
GetSpecification(REFIID riid,IUnknown ** ppObject)virtual HRESULT WINAPI <oledb.h>
GetSpecification(REFIID riid,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
GetSpecification(REFIID riid,IUnknown ** ppSpecification)virtual HRESULT WINAPI <oledb.h>
GetSpoolFileHandle(HANDLE hPrinter)HANDLE WINAPI <winspool.h>
GetSpoolFileHandleA(HANDLE hPrinter)HANDLE WINAPI <winspool.h>
GetSpoolFileHandleW(HANDLE hPrinter)HANDLE WINAPI <winspool.h>
GetSQLInfo(BSTR * pbstrSQLState,LONG * plNativeError)virtual HRESULT WINAPI <oledb.h>
GetSRModeID(BSTR * pbszModeID)virtual HRESULT WINAPI <agtsvr.h>
GetSRStatus(__LONG32 * plStatus)virtual HRESULT WINAPI <agtsvr.h>
GetStackLocation(void)virtual PVOID WINAPI <callobj.h>
GetStackSize(ULONG iMethod,ULONG * cbArgs)virtual HRESULT WINAPI <callobj.h>
GetStandardColorSpaceProfile(PCSTR pMachineName,DWORD dwSCS,PSTR pBuffer,PDWORD pcbSize) WINBOOL WINAPI <icm.h>
GetStandardColorSpaceProfileA(PCSTR pMachineName,DWORD dwSCS,PSTR pBuffer,PDWORD pcbSize) WINBOOL WINAPI <icm.h>
GetStandardColorSpaceProfileW(PCWSTR pMachineName,DWORD dwSCS,PWSTR pBuffer,PDWORD pcbSize) WINBOOL WINAPI <icm.h>
GetStart(__LONG32 * pcpFirst)virtual HRESULT WINAPI <tom.h>
GetStartCap()	LineCap <gdipluspen.h>
GetStartPosition()inline DXLISTPOS CDXMap<dxtmpl.h>
GetStartTime(REFERENCE_TIME * prtStart)virtual HRESULT WINAPI <strmif.h>
GetStartupInfo(LPSTARTUPINFOA lpStartupInfo) WINBASEAPI VOID WINAPI <winbase.h>
GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo) WINBASEAPI VOID WINAPI <winbase.h>
GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo) WINBASEAPI VOID WINAPI <processthreadsapi.h>
GetState(BG_JOB_STATE * pVal)virtual HRESULT WINAPI <strmif.h>
GetState(DWORD * pdwStatus) virtual HRESULT <strmif.h>
GetState(IDvdState ** pStateData)virtual HRESULT WINAPI <strmif.h>
GetState(LPVOID pState,int * pcbState)virtual HRESULT WINAPI <strmif.h>
GetStateText(DWORD lStateBit,LPSTR lpszState,UINT cchState) STDAPI_<oleacc.h>
GetStateTextA(DWORD lStateBit,LPSTR lpszState,UINT cchState) STDAPI_<oleacc.h>
GetStateTextW(DWORD lStateBit,LPWSTR lpszState,UINT cchState) STDAPI_<oleacc.h>
GetStaticFolderImage(HBITMAP * hSmallImage,HBITMAP * hSmallImageOpen,HBITMAP * hLargeImage,COLORREF * cMask)virtual HRESULT WINAPI <mmc.h>
GetStaticTerminals(DWORD * pdwNumTerminals,ITTerminal ** ppTerminals) virtual HRESULT <mspaddr.h>
GetStatParam(DWORD dwParam,DWORD * pdwParam1,DWORD * pdwParam2)virtual HRESULT WINAPI <strmif.h>
GetStatus(__LONG32 * plFlags,__LONG32 * pcchBuf)virtual HRESULT WINAPI <strmif.h>
GetStatus(__LONG32 * plStatus)virtual HRESULT WINAPI <strmif.h>
GetStatus(DWORD * pdwStatus,DWORD * pdwJobIndex)virtual HRESULT WINAPI <strmif.h>
GetStatus(DWORD * pdwStatus,DWORD * pdwWin32Result,DWORD * pdwTransportResult,DWORD * pdwNumOfRetries)virtual HRESULT WINAPI <strmif.h>
GetStatus(HCHAPTER hChapter,DBASYNCHOP eOperation,DBCOUNTITEM * pulProgress,DBCOUNTITEM * pulProgressMax,DBASYNCHPHASE * peAsynchPhase,LPOLESTR * ppwszStatusText)virtual HRESULT WINAPI <strmif.h>
GetStatus(HRESULT * phrStatus)virtual HRESULT WINAPI <strmif.h>
GetStatus(LONG StatusItem,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetStatusWindowPos(HIMC hIMC,POINT * pptPos)virtual HRESULT WINAPI <mshtmlc.h>
GetStdHandle(DWORD nStdHandle) WINBASEAPI HANDLE WINAPI <processenv.h>
GetStockBrush(i)<windowsx.h>
GetStockFont(i)<windowsx.h>
GetStockObject(int i) WINGDIAPI HGDIOBJ WINAPI <wingdi.h>
GetStockPen(i)<windowsx.h>
GetStorageDependencyInformation(HANDLE ObjectHandle,GET_STORAGE_DEPENDENCY_FLAG Flags,ULONG StorageDependencyInfoSize,PSTORAGE_DEPENDENCY_INFO StorageDependencyInfo,PULONG SizeUsed)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
GetStoryCount(__LONG32 * pCount)virtual HRESULT WINAPI <tom.h>
GetStoryLength(__LONG32 * pcch)virtual HRESULT WINAPI <tom.h>
GetStoryRanges(ITextStoryRanges ** ppStories)virtual HRESULT WINAPI <tom.h>
GetStoryType(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetStrBufA(__LONG32 lSrcPos,__LONG32 lSrcMaxLen,UINT * puDestCodePage,IMLangStringBufA ** ppDestBuf,__LONG32 * plDestLen)virtual HRESULT WINAPI <mlang.h>
GetStrBufW(__LONG32 lSrcPos,__LONG32 lSrcMaxLen,IMLangStringBufW ** ppDestBuf,__LONG32 * plDestLen)virtual HRESULT WINAPI <mlang.h>
GetStrCodePages(const WCHAR * pszSrc,__LONG32 cchSrc,DWORD dwPriorityCodePages,DWORD * pdwCodePages,__LONG32 * pcchCodePages)virtual HRESULT WINAPI <mlang.h>
GetStream(_Stream ** ppStream)virtual HRESULT WINAPI <cdosys.h>
GetStreamActiveState(WINBOOL * lpfActive)virtual HRESULT WINAPI <strmif.h>
GetStreamCaps(DWORD dwIndex,AM_MEDIA_TYPE ** ppMediaType,TAPI_STREAM_CONFIG_CAPS * pStreamConfigCaps,WINBOOL * pfEnabled)virtual HRESULT WINAPI <ipmsp.h>
GetStreamOffset(REFERENCE_TIME * prtOffset)virtual HRESULT WINAPI <strmif.h>
GetStretchBltMode(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetStrikeThrough(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetString()inline const char<mmc.h>
GetString(MMC_STRING_ID StringID,ULONG cchBuffer,LPOLESTR lpBuffer,ULONG * pcchOut)virtual HRESULT WINAPI <mmc.h>
GetStringFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,const char ** ppString) DWORD __cdecl <netmon.h>
GetStringLength(MMC_STRING_ID StringID,ULONG * pcchString)virtual HRESULT WINAPI <mmc.h>
GetStringReference(DWORD dwWhichRef,LPWSTR * ppwzTarget,LPWSTR * ppwzLocation)virtual HRESULT WINAPI <hlink.h>
GetStringScripts(DWORD dwFlags,LPCWSTR lpString,int cchString,LPWSTR lpScripts,int cchScripts) WINBASEAPI int WINAPI <winnls.h>
GetStringsFromBlob(HBLOB hBlob,const char * pRequestedOwnerName,const char * pRequestedCategoryName,const char * pRequestedTagName,const char ** ppReturnedOwnerName,const char ** ppReturnedCategoryName,const char ** ppReturnedTagName,const char ** ppReturnedString,DWORD * pRestartKey) DWORD __cdecl <netmon.h>
GetStringType(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType) WINBASEAPI WINBOOL WINAPI <certenc.h>
GetStringType(LONG * pStringType)virtual HRESULT WINAPI <certenc.h>
GetStringTypeA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetStringTypeEx(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetStringTypeExA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetStringTypeExW(LCID Locale,DWORD dwInfoType,LPCWCH lpSrcStr,int cchSrc,LPWORD lpCharType) WINBASEAPI WINBOOL WINAPI <stringapiset.h>
GetStringTypeW(DWORD dwInfoType,LPCWCH lpSrcStr,int cchSrc,LPWORD lpCharType) WINBASEAPI WINBOOL WINAPI <stringapiset.h>
GetStrokeAttributes(HPENDATA,UINT,LPVOID,UINT) int WINAPI <penwin.h>
GetStrokeCaps(LineCap * startCap,LineCap * endCap)__inline__ Status CustomLineCap::<gdiplusimpl.h>
GetStrokeJoin()__inline__ LineJoin CustomLineCap::<gdiplusimpl.h>
GetStrokeTableAttributes(HPENDATA,UINT,LPVOID,UINT) int WINAPI <penwin.h>
GetStyle()__inline__ INT Font::<tom.h>
GetStyle(__LONG32 * plStyle)virtual HRESULT WINAPI <tom.h>
GetStyle(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetSubMenu(HMENU hMenu,int nPos) WINUSERAPI HMENU WINAPI <winuser.h>
GetSubmitInfo(IHTMLSubmitData * pSubmitData)virtual HRESULT WINAPI <mshtmlc.h>
GetSubnetMask(ULONG * pulDottedQuadOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetSubpathCount()	INT <gdipluspath.h>
GetSubpictureAttributes(ULONG ulStream,DVD_SubpictureAttributes * pATR)virtual HRESULT WINAPI <strmif.h>
GetSubpictureLanguage(ULONG ulStream,LCID * pLanguage)virtual HRESULT WINAPI <strmif.h>
GetSubscriberProperty(BSTR bstrPropertyName,VARIANT * propertyValue)virtual HRESULT WINAPI <eventsys.h>
GetSubscriberPropertyCollection(IEventObjectCollection ** collection)virtual HRESULT WINAPI <eventsys.h>
GetSubscript(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetSubscriptionInfo(LPCWSTR pwszURL,SUBSCRIPTIONINFO * pInfo)virtual HRESULT WINAPI <subsmgr.h>
GetSubscriptionItemInfo(SUBSCRIPTIONITEMINFO * pSubscriptionItemInfo)virtual HRESULT WINAPI <subsmgr.h>
GetSubscriptionRunState(DWORD dwNumCookies,const SUBSCRIPTIONCOOKIE * pCookies,DWORD * pdwRunState)virtual HRESULT WINAPI <subsmgr.h>
GetSubscriptions(BSTR methodName,BSTR optionalCriteria,int * optionalErrorIndex,IEventObjectCollection ** ppCollection)virtual HRESULT WINAPI <eventsys.h>
GetSubscriptions(REFIID eventIID,BSTR bstrMethodName,BSTR optionalCriteria,int * optionalErrorIndex,IEventObjectCollection ** ppCollection)virtual HRESULT WINAPI <eventsys.h>
GetSubtypeInfo(PST_KEY Key,const GUID * pType,const GUID * pSubtype,PPST_TYPEINFO * ppInfo,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
GetSuperscript(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetSupportedAlgs(DWORD dwBufferSize,DWORD * pbBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <admex.h>
GetSupportedKeySpec(LONG * pdwKeySpec)virtual HRESULT WINAPI <xenroll.h>
GetSupportedMediaTypes(void) virtual DWORD <msptrmvc.h>
GetSurface(LONG nWidth,LONG nHeight,REFGUID bfid,ULONG nPasses,DWORD dwHints,IUnknown ** ppSurface)virtual HRESULT WINAPI <strmif.h>
GetSurface(LPDIRECTDRAWSURFACE7 * lplpSurface)virtual HRESULT WINAPI <strmif.h>
GetSurroundColorCount()	INT <gdipluspath.h>
GetSurroundColors(Color * colors,INT * count)	Status <gdipluspath.h>
GetSuspended(__LONG32 * pbSuspended)virtual HRESULT WINAPI <agtsvr.h>
GetSymbolCount(LPSYG) int WINAPI <penwin.h>
GetSymbolCountHRCRESULT(HRCRESULT) int WINAPI <penwin.h>
GetSymbolMaxLength(LPSYG) int WINAPI <penwin.h>
GetSymbolsHRCRESULT(HRCRESULT,UINT,LPSYV,UINT) int WINAPI <penwin.h>
GetSysColor(int nIndex) WINUSERAPI DWORD WINAPI <winuser.h>
GetSysColorBrush(int nIndex) WINUSERAPI HBRUSH WINAPI <winuser.h>
GetSysModalWindow()<winuser.h>
GetSystemChangeNumber(DWORD * pdwSystemChangeNumber)virtual HRESULT WINAPI <iadmw.h>
GetSystemDefaultLangID(void) WINBASEAPI LANGID WINAPI <winnls.h>
GetSystemDefaultLCID(void) WINBASEAPI LCID WINAPI <winnls.h>
GetSystemDefaultLocaleName(LPWSTR lpLocaleName,int cchLocaleName) WINBASEAPI int WINAPI <winnls.h>
GetSystemDefaultUILanguage(void) WINBASEAPI LANGID WINAPI <winnls.h>
GetSystemDEPPolicy(VOID) WINBASEAPI DEP_SYSTEM_POLICY_TYPE WINAPI <winbase.h>
GetSystemDirectory(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemDirectoryA(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemDirectoryW(LPWSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize,PSIZE_T lpMaximumFileCacheSize,PDWORD lpFlags) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature,DWORD FirmwareTableID,PVOID pFirmwareTableBuffer,DWORD BufferSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemInfo(LPSYSTEM_INFO lpSystemInfo) WINBASEAPI VOID WINAPI <sysinfoapi.h>
GetSystemMenu(HWND hWnd,WINBOOL bRevert) WINUSERAPI HMENU WINAPI <winuser.h>
GetSystemMetrics(int nIndex) WINUSERAPI int WINAPI <winuser.h>
GetSystemPaletteEntries(HDC hdc,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries) WINGDIAPI UINT WINAPI <wingdi.h>
GetSystemPaletteUse(HDC hdc) WINGDIAPI UINT WINAPI <wingdi.h>
GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetSystemPreferredUILanguages(DWORD dwFlags,PULONG pulNumLanguages,PZZWSTR pwszLanguagesBuffer,PULONG pcchLanguagesBuffer) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetSystemRegistryQuota(PDWORD pdwQuotaAllowed,PDWORD pdwQuotaUsed) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetSystemTime(LPSYSTEMTIME lpSystemTime) WINBASEAPI VOID WINAPI <sysinfoapi.h>
GetSystemTimeAdjustment(PDWORD lpTimeAdjustment,PDWORD lpTimeIncrement,PBOOL lpTimeAdjustmentDisabled) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime) WINBASEAPI VOID WINAPI <sysinfoapi.h>
GetSystemTimePreciseAsFileTime(LPFILETIME lpSystemTimeAsFileTime) WINBASEAPI VOID WINAPI <sysinfoapi.h>
GetSystemTimes(LPFILETIME lpIdleTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime) WINBOOL WINAPI <winbase.h>
GetSystemWindowsDirectory(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemWindowsDirectoryA(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemWindowsDirectoryW(LPWSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetSystemWow64Directory(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <winbase.h>
GetSystemWow64DirectoryA(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <winbase.h>
GetSystemWow64DirectoryW(LPWSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <winbase.h>
GetTab(__LONG32 iTab,float * ptbPos,__LONG32 * ptbAlign,__LONG32 * ptbLeader)virtual HRESULT WINAPI <tom.h>
GetTabbedTextExtent(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,CONST INT * lpnTabStopPositions) WINUSERAPI DWORD WINAPI <winuser.h>
GetTabbedTextExtentA(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,CONST INT * lpnTabStopPositions) WINUSERAPI DWORD WINAPI <winuser.h>
GetTabbedTextExtentW(HDC hdc,LPCWSTR lpString,int chCount,int nTabPositions,CONST INT * lpnTabStopPositions) WINUSERAPI DWORD WINAPI <winuser.h>
GetTabCount(__LONG32 * pCount)virtual HRESULT WINAPI <tom.h>
GetTableDefinition(DBID * pTableID,DBORDINAL * pcColumnDescs,DBCOLUMNDESC * prgColumnDescs[],ULONG * pcPropertySets,DBPROPSET * prgPropertySets[],ULONG * pcConstraintDescs,DBCONSTRAINTDESC * prgConstraintDescs[],OLECHAR ** ppwszStringBuffer)virtual HRESULT WINAPI <oledb.h>
GetTableSize(TableBaseSize,nElements,ElementSize)<netmon.h>
GetTabStopCount()	INT <gdiplusstringformat.h>
GetTabStops(INT count,REAL * firstTabOffset,REAL * tabStops)	Status <gdiplusstringformat.h>
GetTagIDForName(BSTR bstrName,ELEMENT_TAG_ID * ptagId)virtual HRESULT WINAPI <mshtmlc.h>
GetTail()inline TYPE CDXList<parser.h>
GetTail(PZPSTR sz) DWORD <parser.h>
GetTailPosition()inline DXLISTPOS CDXList<dxtmpl.h>
GetTapeParameters(HANDLE hDevice,DWORD dwOperation,LPDWORD lpdwSize,LPVOID lpTapeInformation) WINBASEAPI DWORD WINAPI <winbase.h>
GetTapePosition(HANDLE hDevice,DWORD dwPositionType,LPDWORD lpdwPartition,LPDWORD lpdwOffsetLow,LPDWORD lpdwOffsetHigh) WINBASEAPI DWORD WINAPI <winbase.h>
GetTapeStatus(HANDLE hDevice) WINBASEAPI DWORD WINAPI <winbase.h>
GetTarget(PCHAR pszTarget,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetTargetAlias(LPCWSTR pszTargetName,LPWSTR * ppszTargetAlias)virtual HRESULT WINAPI <htiframe.h>
GetTargetComputer(LPWSTR * ppwszComputer)virtual HRESULT WINAPI <mstask.h>
GetTargetFrame(ITargetFrame ** ppTargetFrame)virtual HRESULT WINAPI <htiface.h>
GetTargetFrameName(LPWSTR * ppwzTargetFrameName)virtual HRESULT WINAPI <hlink.h>
GetTaskFlags(DWORD * pdwFlags)virtual HRESULT WINAPI <mstask.h>
GetTCDisplay(LONG Param,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetTCDisplayEnable(LONG * pState)virtual HRESULT WINAPI <strmif.h>
GetTCGMode(LONG Param,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetTcp6Table(PMIB_TCP6TABLE TcpTable,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetTcp6Table2(PMIB_TCP6TABLE2 TcpTable,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetTcpStatistics(PMIB_TCPSTATS Statistics) ULONG WINAPI <iphlpapi.h>
GetTcpStatisticsEx(PMIB_TCPSTATS Statistics,ULONG Family) ULONG WINAPI <iphlpapi.h>
GetTcpTable(PMIB_TCPTABLE TcpTable,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetTcpTable2(PMIB_TCPTABLE2 TcpTable,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetTCRMode(LONG Param,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetTempFileName(LPCSTR lpPathName,LPCSTR lpPrefixString,UINT uUnique,LPSTR lpTempFileName) WINBASEAPI UINT WINAPI <winbase.h>
GetTempFileName32(	_szPath,_szPfx,_n,_lpbuf)<mapiwin.h>
GetTempFileName32(_szPath,_szPfx,_n,_lpbuf)<mapiwin.h>
GetTempFileNameA(LPCSTR lpPathName,LPCSTR lpPrefixString,UINT uUnique,LPSTR lpTempFileName) WINBASEAPI UINT WINAPI <winbase.h>
GetTempFileNameW(LPCWSTR lpPathName,LPCWSTR lpPrefixString,UINT uUnique,LPWSTR lpTempFileName) WINBASEAPI UINT WINAPI <fileapi.h>
GetTempPath(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetTempPathA(DWORD nBufferLength,LPSTR lpBuffer) WINBASEAPI DWORD WINAPI <winbase.h>
GetTempPathW(DWORD nBufferLength,LPWSTR lpBuffer) WINBASEAPI DWORD WINAPI <fileapi.h>
GetTeredoPort(USHORT * Port) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetTerminalClassInfo(BSTR bstrSuperclass)virtual HRESULT WINAPI <termmgr.h>
GetTerminalSuperclassInfo(void)virtual HRESULT WINAPI <termmgr.h>
GetText(__LONG32 lFlags,ULONG * puBuffLength,LPWSTR pszText)virtual HRESULT WINAPI <wmiutils.h>
GetText(BSTR * pbstr)virtual HRESULT WINAPI <wmiutils.h>
GetTextAlign(HDC hdc) WINGDIAPI UINT WINAPI <wingdi.h>
GetTextCharacterExtra(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetTextCharset(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
GetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags) WINGDIAPI int WINAPI <wingdi.h>
GetTextColor(HDC hdc) WINGDIAPI COLORREF WINAPI <wingdi.h>
GetTextContrast()	UINT <gdiplusgraphics.h>
GetTextDescent(LONG * plDescent)virtual HRESULT WINAPI <mshtmlc.h>
GetTextExtentExPoint(HDC hdc,LPCSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentExPointA(HDC hdc,LPCSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentExPointI(HDC hdc,LPWORD lpwszString,int cwchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentExPointW(HDC hdc,LPCWSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPoint(HDC hdc,LPCSTR lpString,int c,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPoint32(HDC hdc,LPCSTR lpString,int c,LPSIZE psizl) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPoint32A(HDC hdc,LPCSTR lpString,int c,LPSIZE psizl) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPoint32W(HDC hdc,LPCWSTR lpString,int c,LPSIZE psizl) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPointA(HDC hdc,LPCSTR lpString,int c,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPointI(HDC hdc,LPWORD pgiIn,int cgi,LPSIZE psize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextExtentPointW(HDC hdc,LPCWSTR lpString,int c,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextFace(HDC hdc,int c,LPSTR lpName) WINGDIAPI int WINAPI <wingdi.h>
GetTextFaceA(HDC hdc,int c,LPSTR lpName) WINGDIAPI int WINAPI <wingdi.h>
GetTextFaceW(HDC hdc,int c,LPWSTR lpName) WINGDIAPI int WINAPI <wingdi.h>
GetTextFrag(__LONG32 iFrag,BSTR * pbstrFrag,IMarkupPointer * pPointerFrag)virtual HRESULT WINAPI <mshtmlc.h>
GetTextFragCount(__LONG32 * pcFrags)virtual HRESULT WINAPI <mshtmlc.h>
GetTextMetrics(HDC hdc,LPTEXTMETRICA lptm) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextMetricsA(HDC hdc,LPTEXTMETRICA lptm) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextMetricsW(HDC hdc,LPTEXTMETRICW lptm) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetTextRenderingHint()	TextRenderingHint <gdiplusgraphics.h>
GetThemeAppProperties()THEMEAPI_<uxtheme.h>
GetThemeBackgroundContentRect(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pBoundingRect,RECT * pContentRect)THEMEAPI <uxtheme.h>
GetThemeBackgroundExtent(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pContentRect,RECT * pExtentRect)THEMEAPI <uxtheme.h>
GetThemeBackgroundRegion(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,const RECT * pRect,HRGN * pRegion)THEMEAPI <uxtheme.h>
GetThemeBitmap(HTHEME hTheme,int iPartId,int iStateId,int iPropId,ULONG dwFlags,HBITMAP * phBitmap)THEMEAPI <uxtheme.h>
GetThemeBool(HTHEME hTheme,int iPartId,int iStateId,int iPropId,WINBOOL * pfVal)THEMEAPI <uxtheme.h>
GetThemeColor(HTHEME hTheme,int iPartId,int iStateId,int iPropId,COLORREF * pColor)THEMEAPI <uxtheme.h>
GetThemeDocumentationProperty(LPCWSTR pszThemeName,LPCWSTR pszPropertyName,LPWSTR pszValueBuff,int cchMaxValChars)THEMEAPI <uxtheme.h>
GetThemeEnumValue(HTHEME hTheme,int iPartId,int iStateId,int iPropId,int * piVal)THEMEAPI <uxtheme.h>
GetThemeFilename(HTHEME hTheme,int iPartId,int iStateId,int iPropId,LPWSTR pszThemeFileName,int cchMaxBuffChars)THEMEAPI <uxtheme.h>
GetThemeFont(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,int iPropId,LOGFONTW * pFont)THEMEAPI <uxtheme.h>
GetThemeInt(HTHEME hTheme,int iPartId,int iStateId,int iPropId,int * piVal)THEMEAPI <uxtheme.h>
GetThemeIntList(HTHEME hTheme,int iPartId,int iStateId,int iPropId,INTLIST * pIntList)THEMEAPI <uxtheme.h>
GetThemeMargins(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,int iPropId,RECT * prc,MARGINS * pMargins)THEMEAPI <uxtheme.h>
GetThemeMetric(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,int iPropId,int * piVal)THEMEAPI <uxtheme.h>
GetThemePartSize(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,RECT * prc,enum THEMESIZE eSize,SIZE * psz)THEMEAPI <uxtheme.h>
GetThemePosition(HTHEME hTheme,int iPartId,int iStateId,int iPropId,POINT * pPoint)THEMEAPI <uxtheme.h>
GetThemePropertyOrigin(HTHEME hTheme,int iPartId,int iStateId,int iPropId,enum PROPERTYORIGIN * pOrigin)THEMEAPI <uxtheme.h>
GetThemeRect(HTHEME hTheme,int iPartId,int iStateId,int iPropId,RECT * pRect)THEMEAPI <uxtheme.h>
GetThemeStream(HTHEME hTheme,int iPartId,int iStateId,int iPropId,VOID ** ppvStream,DWORD * pcbStream,HINSTANCE hInst)THEMEAPI <uxtheme.h>
GetThemeString(HTHEME hTheme,int iPartId,int iStateId,int iPropId,LPWSTR pszBuff,int cchMaxBuffChars)THEMEAPI <uxtheme.h>
GetThemeSysBool(HTHEME hTheme,int iBoolId)THEMEAPI_<uxtheme.h>
GetThemeSysColor(HTHEME hTheme,int iColorId)THEMEAPI_<uxtheme.h>
GetThemeSysColorBrush(HTHEME hTheme,int iColorId)THEMEAPI_<uxtheme.h>
GetThemeSysFont(HTHEME hTheme,int iFontId,LOGFONT * plf)THEMEAPI <uxtheme.h>
GetThemeSysInt(HTHEME hTheme,int iIntId,int * piValue)THEMEAPI <uxtheme.h>
GetThemeSysSize(HTHEME hTheme,int iSizeId)THEMEAPI_<uxtheme.h>
GetThemeSysString(HTHEME hTheme,int iStringId,LPWSTR pszStringBuff,int cchMaxStringChars)THEMEAPI <uxtheme.h>
GetThemeTextExtent(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,LPCWSTR pszText,int iCharCount,DWORD dwTextFlags,const RECT * pBoundingRect,RECT * pExtentRect)THEMEAPI <uxtheme.h>
GetThemeTextMetrics(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,TEXTMETRIC * ptm)THEMEAPI <uxtheme.h>
GetThemeTransitionDuration(HTHEME hTheme,int iPartId,int iStateIdFrom,int iStateIdTo,int iPropId,DWORD * pdwDuration)THEMEAPI <uxtheme.h>
GetThreadContext(HANDLE hThread,LPCONTEXT lpContext) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetThreadCount(DWORD * pdwThreads)virtual HRESULT WINAPI <comsvcs.h>
GetThreadDesktop(DWORD dwThreadId) WINUSERAPI HDESK WINAPI <winuser.h>
GetThreadErrorMode(VOID) WINBASEAPI DWORD WINAPI <winbase.h>
GetThreadGroupAffinity(HANDLE hThread,PGROUP_AFFINITY GroupAffinity) WINBASEAPI WINBOOL WINAPI <processtopologyapi.h>
GetThreadId(HANDLE Thread) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
GetThreadIdealProcessorEx(HANDLE hThread,PPROCESSOR_NUMBER lpIdealProcessor) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetThreadInformation(HANDLE hThread,THREAD_INFORMATION_CLASS ThreadInformationClass,LPVOID ThreadInformation,DWORD ThreadInformationSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetThreadIOPendingFlag(HANDLE hThread,PBOOL lpIOIsPending) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetThreadLocale(void) WINBASEAPI LCID WINAPI <winnls.h>
GetThreadPreferredUILanguages(DWORD dwFlags,PULONG pulNumLanguages,PZZWSTR pwszLanguagesBuffer,PULONG pcchLanguagesBuffer) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetThreadPriority(HANDLE hThread) WINBASEAPI int WINAPI <processthreadsapi.h>
GetThreadPriorityBoost(HANDLE hThread,PBOOL pDisablePriorityBoost) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetThreadSelectorEntry(HANDLE hThread,DWORD dwSelector,LPLDT_ENTRY lpSelectorEntry) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetThreadTimes(HANDLE hThread,LPFILETIME lpCreationTime,LPFILETIME lpExitTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
GetThreadUILanguage(void) WINBASEAPI LANGID WINAPI <winnls.h>
GetThreadWaitChain(HWCT WctHandle,DWORD_PTR Context,DWORD Flags,DWORD ThreadId,LPDWORD NodeCount,PWAITCHAIN_NODE_INFO NodeInfoArray,LPBOOL IsCycle)WINBOOL WINAPI <wct.h>
GetThumbnailImage(UINT thumbWidth,UINT thumbHeight,GetThumbnailImageAbort callback,VOID * callbackData)__inline__ Image<gdiplusimpl.h>
GetTickCount(VOID) WINBASEAPI DWORD WINAPI <sysinfoapi.h>
GetTickCount64(VOID) WINBASEAPI ULONGLONG WINAPI <sysinfoapi.h>
GetTime(VARIANT * pvtime)virtual HRESULT WINAPI <ocmm.h>
GetTimecode(PTIMECODE_SAMPLE pTimecodeSample)virtual HRESULT WINAPI <strmif.h>
GetTimeFormat(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpTime,LPCSTR lpFormat,LPSTR lpTimeStr,int cchTime) WINBASEAPI int WINAPI <datetimeapi.h>
GetTimeFormatA(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpTime,LPCSTR lpFormat,LPSTR lpTimeStr,int cchTime) WINBASEAPI int WINAPI <datetimeapi.h>
GetTimeFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,CONST SYSTEMTIME * lpTime,LPCWSTR lpFormat,LPWSTR lpTimeStr,int cchTime) WINBASEAPI int WINAPI <datetimeapi.h>
GetTimeFormatW(LCID Locale,DWORD dwFlags,CONST SYSTEMTIME * lpTime,LPCWSTR lpFormat,LPWSTR lpTimeStr,int cchTime) WINBASEAPI int WINAPI <datetimeapi.h>
GetTimeForProcessing(VOID) virtual DWORD WINAPI <ilogobj.h>
GetTimes(BG_JOB_TIMES * pVal)virtual HRESULT WINAPI <bits.h>
GetTimestampForLoadedLibrary(HMODULE Module) DWORD IMAGEAPI <psdk>
GetTimeSysInfoFunc(TimeSysInfo eInfo,void * pvInfo) typedef HRESULT<timeprov.h>
GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation) WINBASEAPI DWORD WINAPI <timezoneapi.h>
GetTimeZoneInformationForYear(USHORT wYear,PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,LPTIME_ZONE_INFORMATION ptzi) WINBOOL WINAPI <timezoneapi.h>
GetTipUrl(BSTR * pTipUrl)virtual HRESULT WINAPI <comsvcs.h>
GetTitle(IShellView * psv,LPWSTR pszName,DWORD cchName)virtual HRESULT WINAPI <shdeprecated.h>
GetTitle(LPOLESTR pszGroup,LPOLESTR * pszTitle)virtual HRESULT WINAPI <shdeprecated.h>
GetTitleAttributes(ULONG ulTitle,DVD_ATR * pATR)virtual HRESULT WINAPI <strmif.h>
GetTitleAttributes(ULONG ulTitle,DVD_MenuAttributes * pMenu,DVD_TitleAttributes * pTitle)virtual HRESULT WINAPI <strmif.h>
GetTitleBarInfo(HWND hwnd,PTITLEBARINFO pti) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetTitleParentalLevels(ULONG ulTitle,ULONG * pulParentalLevels)virtual HRESULT WINAPI <strmif.h>
GetTnefStreamCodepage(LPSTREAM lpStream,ULONG * lpulCodepage,ULONG * lpulSubCodepage) STDMETHODIMP <tnef.h>
GetToken() CHAR<parser.h>
GetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength,PDWORD ReturnLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetToolTipText(IUnknown * punk,int iOffset,int idsTemplate,LPWSTR pwzText,DWORD cchText)virtual HRESULT WINAPI <shdeprecated.h>
GetTop()	REAL <gdiplustypes.h>
GetTopWindow(HWND hWnd) WINUSERAPI HWND WINAPI <winuser.h>
GetTotalStatistics(LPSTATISTICS lpStats,WINBOOL fClearAfterReading)virtual HRESULT WINAPI <netmon.h>
GetTotalTitleTime(DVD_HMSF_TIMECODE * pTotalTime,ULONG * ulTimeCodeFlags)virtual HRESULT WINAPI <strmif.h>
GetTotalTitleTime(ULONG * pulTotalTime)virtual HRESULT WINAPI <strmif.h>
GetTouchInputInfo(HTOUCHINPUT hTouchInput,UINT cInputs,PTOUCHINPUT pInputs,int cbSize) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetTraceEnableFlags(TRACEHANDLE TraceHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
GetTraceEnableLevel(TRACEHANDLE TraceHandle) EXTERN_C UCHAR WMIAPI <evntrace.h>
GetTraceLoggerHandle(PVOID Buffer) EXTERN_C TRACEHANDLE WMIAPI <evntrace.h>
GetTransaction(ITransaction ** ppITransaction)virtual HRESULT WINAPI <txdtc.h>
GetTransaction(IUnknown ** pptrans)virtual HRESULT WINAPI <txdtc.h>
GetTransaction(IUnknown ** ppTx)virtual HRESULT WINAPI <txdtc.h>
GetTransactionCookie(IUnknown * punkTransaction,ULONG cbTransactionCookie,byte * rgbTransactionCookie,ULONG * pcbUsed)virtual HRESULT WINAPI <txcoord.h>
GetTransactionId(BSTR * pbstrTxId)virtual HRESULT WINAPI <ktmw32.h>
GetTransactionId(GUID * pGuid)virtual HRESULT WINAPI <ktmw32.h>
GetTransactionId(HANDLE TransactionHandle,LPGUID TransactionId) WINBOOL WINAPI <ktmw32.h>
GetTransactionInfo(XACTTRANSINFO * pinfo)virtual HRESULT WINAPI <transact.h>
GetTransactionInfo2(XACTTRANSINFO * pinfo)virtual HRESULT WINAPI <transact.h>
GetTransactionInformation(HANDLE TransactionHandle,PDWORD Outcome,PDWORD IsolationLevel,PDWORD IsolationFlags,PDWORD Timeout,DWORD BufferLength,LPWSTR Description) WINBOOL WINAPI <ktmw32.h>
GetTransactionManagerId(HANDLE TransactionManagerHandle,LPGUID TransactionManagerId) WINBOOL WINAPI <ktmw32.h>
GetTransactionObject(ULONG ulTransactionLevel,ITransaction ** ppTransactionObject)virtual HRESULT WINAPI <oledb.h>
GetTransactionResourcePool(ITransactionResourcePool ** ppTxPool)virtual HRESULT WINAPI <comsvcs.h>
GetTransactionStatus(HRESULT * pHrStatus)virtual HRESULT WINAPI <comsvcs.h>
GetTransactionUrl(char ** o_ppszLocalTxUrl)virtual HRESULT WINAPI <txcoord.h>
GetTransform(Matrix * matrix)	Status <gdipluspen.h>
GetTransfrom(Matrix * matrix)	Status <gdiplusbrush.h>
GetTransportAudioParameters(LONG Param,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetTransportBasicParameters(LONG Param,LONG * pValue,LPOLESTR * ppszData)virtual HRESULT WINAPI <strmif.h>
GetTransportVideoParameters(LONG Param,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetTravelEntry(IUnknown * punk,int iOffset,ITravelEntry ** ppte)virtual HRESULT WINAPI <shdeprecated.h>
GetTravelLog(ITravelLog ** pptl)virtual HRESULT WINAPI <shdeprecated.h>
GetTrees(VARIANT * pvTrees)virtual HRESULT WINAPI <iads.h>
GetTrigger(PTASK_TRIGGER pTrigger)virtual HRESULT WINAPI <mstask.h>
GetTrigger(WORD iTrigger,ITaskTrigger ** ppTrigger)virtual HRESULT WINAPI <mstask.h>
GetTriggerCount(WORD * pwCount)virtual HRESULT WINAPI <mstask.h>
GetTriggerString(LPWSTR * ppwszTrigger)virtual HRESULT WINAPI <mstask.h>
GetTriggerString(WORD iTrigger,LPWSTR * ppwszTrigger)virtual HRESULT WINAPI <mstask.h>
GetTrimming()	StringTrimming <gdiplusstringformat.h>
GetTrusteeForm(PTRUSTEE_A pTrustee) WINADVAPI TRUSTEE_FORM WINAPI <aclapi.h>
GetTrusteeFormA(PTRUSTEE_A pTrustee) WINADVAPI TRUSTEE_FORM WINAPI <aclapi.h>
GetTrusteeFormW(PTRUSTEE_W pTrustee) WINADVAPI TRUSTEE_FORM WINAPI <aclapi.h>
GetTrusteeName(PTRUSTEE_A pTrustee) WINADVAPI LPSTR WINAPI <aclapi.h>
GetTrusteeNameA(PTRUSTEE_A pTrustee) WINADVAPI LPSTR WINAPI <aclapi.h>
GetTrusteeNameW(PTRUSTEE_W pTrustee) WINADVAPI LPWSTR WINAPI <aclapi.h>
GetTrusteeProperties(TRUSTEE_W * pTrustee,const ULONG cPropertyIDSets,const DBPROPIDSET rgPropertyIDSets[],ULONG * pcPropertySets,DBPROPSET ** prgPropertySets)virtual HRESULT WINAPI <oledb.h>
GetTrusteeType(PTRUSTEE_A pTrustee) WINADVAPI TRUSTEE_TYPE WINAPI <aclapi.h>
GetTrusteeTypeA(PTRUSTEE_A pTrustee) WINADVAPI TRUSTEE_TYPE WINAPI <aclapi.h>
GetTrusteeTypeW(PTRUSTEE_W pTrustee) WINADVAPI TRUSTEE_TYPE WINAPI <aclapi.h>
GetTTSModeID(BSTR * pbszModeID)virtual HRESULT WINAPI <agtsvr.h>
GetTTSPitch(short * pwPitch)virtual HRESULT WINAPI <agtsvr.h>
GetTTSSpeed(__LONG32 * pdwSpeed)virtual HRESULT WINAPI <agtsvr.h>
GetType()	MetafileType <tom.h>
GetType(__LONG32 * pType)virtual HRESULT WINAPI <tom.h>
GetType(BG_JOB_TYPE * pVal)virtual HRESULT WINAPI <tom.h>
GetType(LONG * pType)virtual HRESULT WINAPI <tom.h>
GetType(SELECTION_TYPE * peType)virtual HRESULT WINAPI <tom.h>
GetType(T t)T <tom.h>
GetTypeByName(LPSTR lpServiceName,LPGUID lpServiceType) INT WINAPI <nspapi.h>
GetTypeByNameA(LPSTR lpServiceName,LPGUID lpServiceType) INT WINAPI <nspapi.h>
GetTypeByNameW(LPWSTR lpServiceName,LPGUID lpServiceType) INT WINAPI <nspapi.h>
GetTypeDetail(BSTR * pTypeDetail)virtual HRESULT WINAPI <mshtmlc.h>
GetTypeGUID(GUID * pguidGUIDOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetTypeInfo(PST_KEY Key,const GUID * pType,PPST_TYPEINFO * ppInfo,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
GetTypeLibInfo(LPWSTR szFile,GUID * pTypeLibID,LCID * pTypeLibLCID,SYSKIND * pTypeLibPlatform,USHORT * pTypeLibMajorVer,USHORT * pTypeLibMinorVer)STDAPI <tlbref.h>
GetTypeName(BSTR * pbstrTypeNameOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetUdp6Table(PMIB_UDP6TABLE Udp6Table,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetUdpStatistics(PMIB_UDPSTATS Stats) ULONG WINAPI <iphlpapi.h>
GetUdpStatisticsEx(PMIB_UDPSTATS Statistics,ULONG Family) ULONG WINAPI <iphlpapi.h>
GetUdpTable(PMIB_UDPTABLE UdpTable,PULONG SizePointer,WINBOOL Order) ULONG WINAPI <iphlpapi.h>
GetUID(BSTR * pbstrUIDOut)virtual HRESULT WINAPI <cluscfgserver.h>
GetUILanguageFallbackList(PWSTR pFallbackList,ULONG cchFallbackList,PULONG pcchFallbackListOut) WINBOOL WINAPI <muiload.h>
GetUILanguageInfo(DWORD dwFlags,PCZZWSTR pwmszLanguage,PZZWSTR pwszFallbackLanguages,PDWORD pcchFallbackLanguages,PDWORD pAttributes) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetUiObjectClassId(CLSID * pclsid)virtual HRESULT WINAPI <netcon.h>
GetUnderline(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetUnicastIpAddressEntry(PMIB_UNICASTIPADDRESS_ROW Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetUnicastIpAddressTable(ADDRESS_FAMILY Family,PMIB_UNICASTIPADDRESS_TABLE * Table) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
GetUniDirectionalAdapterInfo(PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo,PULONG dwOutBufLen) DWORD WINAPI <iphlpapi.h>
GetUnit()__inline__ Unit Font::<gdiplusimpl.h>
GetUnpredictedMessagePos(VOID) WINUSERAPI DWORD WINAPI <winuser.h>
GetUpdatedClipboardFormats(PUINT lpuiFormats,UINT cFormats,PUINT pcFormatsOut) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetUpdatedItem(BSTR CalendarLocation,BSTR UserName,BSTR Password,IDispatch ** Item)virtual HRESULT WINAPI <cdoex.h>
GetUpdateRect(HWND hWnd,LPRECT lpRect,WINBOOL bErase) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetUpdateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase) WINUSERAPI int WINAPI <winuser.h>
GetUpperBound()inline int CDXArray<dxtmpl.h>
GetUrlCacheConfigInfo(LPINTERNET_CACHE_CONFIG_INFOA,LPDWORD,DWORD)WINBOOL     WINAPI <winineti.h>
GetUrlCacheConfigInfoA(LPINTERNET_CACHE_CONFIG_INFOA,LPDWORD,DWORD)WINBOOL     WINAPI <winineti.h>
GetUrlCacheConfigInfoW(LPINTERNET_CACHE_CONFIG_INFOW,LPDWORD,DWORD)WINBOOL     WINAPI <winineti.h>
GetUrlCacheEntryInfo(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) URLCACHEAPI_<wininet.h>
GetUrlCacheEntryInfoA(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) URLCACHEAPI_<wininet.h>
GetUrlCacheEntryInfoEx(LPCSTR lpszUrl,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,LPSTR lpszRedirectUrl,LPDWORD lpcbRedirectUrl,LPVOID lpReserved,DWORD dwFlags) BOOLAPI <wininet.h>
GetUrlCacheEntryInfoExA(LPCSTR lpszUrl,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,LPSTR lpszRedirectUrl,LPDWORD lpcbRedirectUrl,LPVOID lpReserved,DWORD dwFlags) BOOLAPI <wininet.h>
GetUrlCacheEntryInfoExW(LPCWSTR lpszUrl,LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,LPWSTR lpszRedirectUrl,LPDWORD lpcbRedirectUrl,LPVOID lpReserved,DWORD dwFlags) BOOLAPI <wininet.h>
GetUrlCacheEntryInfoW(LPCWSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo) URLCACHEAPI_<wininet.h>
GetUrlCacheGroupAttribute(GROUPID gid,DWORD dwFlags,DWORD dwAttributes,LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo,LPDWORD lpdwGroupInfo,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
GetUrlCacheGroupAttributeA(GROUPID gid,DWORD dwFlags,DWORD dwAttributes,LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo,LPDWORD lpdwGroupInfo,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
GetUrlCacheGroupAttributeW(GROUPID gid,DWORD dwFlags,DWORD dwAttributes,LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo,LPDWORD lpdwGroupInfo,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
GetURLFromHROW(HROW hRow,LPOLESTR * ppwszURL)virtual HRESULT WINAPI <oledb.h>
GetURLMapping(LPCOLESTR pwszURL,DB_DWRESERVE dwReserved,CLSID * pclsidProvider)virtual HRESULT WINAPI <oledb.h>
GetUrlPolicyPermissions(dw)<urlmon.h>
GetUserDefaultLangID(void) WINBASEAPI LANGID WINAPI <winnls.h>
GetUserDefaultLCID(void) WINBASEAPI LCID WINAPI <winnls.h>
GetUserDefaultLocaleName(LPWSTR lpLocaleName,int cchLocaleName) WINBASEAPI int WINAPI <winnls.h>
GetUserDefaultUILanguage(void) WINBASEAPI LANGID WINAPI <winnls.h>
GetUserGeoID(GEOCLASS GeoClass) WINBASEAPI GEOID WINAPI <winnls.h>
GetUserName(LPSTR lpBuffer,LPDWORD pcbBuffer) WINADVAPI WINBOOL WINAPI <winbase.h>
GetUserNameA(LPSTR lpBuffer,LPDWORD pcbBuffer) WINADVAPI WINBOOL WINAPI <winbase.h>
GetUserNameEx(EXTENDED_NAME_FORMAT NameFormat,LPSTR lpNameBuffer,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat,LPSTR lpNameBuffer,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat,LPWSTR lpNameBuffer,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
GetUserNameW(LPWSTR lpBuffer,LPDWORD pcbBuffer) WINADVAPI WINBOOL WINAPI <winbase.h>
GetUserObjectInformation(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID,DWORD nLength,LPDWORD lpnLengthNeeded) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetUserPreferredUILanguages(DWORD dwFlags,PULONG pulNumLanguages,PZZWSTR pwszLanguagesBuffer,PULONG pcchLanguagesBuffer) WINBASEAPI WINBOOL WINAPI <winnls.h>
GetUserProfileDirectory(HANDLE hToken,LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetUserProfileDirectoryA(HANDLE hToken,LPSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetUserProfileDirectoryW(HANDLE hToken,LPWSTR lpProfileDir,LPDWORD lpcchSize) USERENVAPI WINBOOL WINAPI <userenv.h>
GetUserSDO(IASDATASTORE eDataStore,BSTR bstrUserName,IUnknown ** ppUserSDO)virtual HRESULT WINAPI <sdoias.h>
GetUsingSoundEffects(__LONG32 * pbUsingSoundEffects)virtual HRESULT WINAPI <agtsvr.h>
GetUtilInterface(IDispatch ** ppUtil)virtual HRESULT WINAPI <mtxadmin.h>
GetValue()	ARGB <strmif.h>
GetValue(BSTR * pstrOut)virtual HRESULT WINAPI <strmif.h>
GetValue(CHAR *) CHAR<strmif.h>
GetValue(const GUID * Api,VARIANT * Value)virtual HRESULT WINAPI <strmif.h>
GetValue(LONG Flags,VARIANT * pvarValue)virtual HRESULT WINAPI <strmif.h>
GetValue(LONG Index,BSTR * pstr)virtual HRESULT WINAPI <strmif.h>
GetValue(LONG Index,DATE * pValue)virtual HRESULT WINAPI <strmif.h>
GetValue(LONG Index,LONG * pValue)virtual HRESULT WINAPI <strmif.h>
GetValue(LONG Type,LONG Flags,VARIANT * pvarValue)virtual HRESULT WINAPI <strmif.h>
GetValue(LPOLESTR szPropertyName,VARIANT * pvarOut)virtual HRESULT WINAPI <strmif.h>
GetValueByIndex(__LONG32 lIndex,BSTR * szName,__LONG32 * lCount,double * dLast,double * dAverage,double * dStdDev,double * dMin,double * dMax)virtual HRESULT WINAPI <control.h>
GetValueByName(BSTR szName,__LONG32 * lIndex,__LONG32 * lCount,double * dLast,double * dAverage,double * dStdDev,double * dMin,double * dMax)virtual HRESULT WINAPI <control.h>
GetVARIANT()inline VARIANT<comutil.h>
GetVCardStream(_Stream ** Stream)virtual HRESULT WINAPI <cdoex.h>
GetVDMPointer32W(LPVOID vp,UINT fMode) DWORD WINAPI <wownt16.h>
GetVerbState(MMC_CONSOLE_VERB eCmdID,MMC_BUTTON_STATE nState,WINBOOL * pState)virtual HRESULT WINAPI <mmc.h>
GetVersion()	UINT <sysinfoapi.h>
GetVersion(short * psMajor,short * psMinor)virtual HRESULT WINAPI <sysinfoapi.h>
GetVersion(VOID) WINBASEAPI DWORD WINAPI <sysinfoapi.h>
GetVersionEx(LPOSVERSIONINFOA lpVersionInformation) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetVersionExA(LPOSVERSIONINFOA lpVersionInformation) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetVersionExW(LPOSVERSIONINFOW lpVersionInformation) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GetVersionFromFile(LPSTR lpszFilename,LPDWORD pdwMSVer,LPDWORD pdwLSVer,WINBOOL bVersion) HRESULT WINAPI <advpub.h>
GetVersionFromFileEx(LPSTR lpszFilename,LPDWORD pdwMSVer,LPDWORD pdwLSVer,WINBOOL bVersion) HRESULT WINAPI <advpub.h>
GetVersionNumber(void)virtual __LONG32 WINAPI <mshtmlc.h>
GetVersionPenWin(VOID) UINT WINAPI <penwin.h>
GetVersionString(PCHAR pszVersionString,PDWORD pcbSize) virtual LPSTR WINAPI <ilogobj.h>
GetVerticalResolution()__inline__ REAL Image::<gdiplusimpl.h>
GetVideoPaletteEntries(__LONG32 StartIndex,__LONG32 Entries,__LONG32 * pRetrieved,__LONG32 * pPalette)virtual HRESULT WINAPI <control.h>
GetVideoPortIndex(DWORD * pdwVideoPortIndex)virtual HRESULT WINAPI <strmif.h>
GetVideoPosition(LPRECT lpSRCRect,LPRECT lpDSTRect)virtual HRESULT WINAPI <strmif.h>
GetVideoSize(__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetView(HCHAPTER hChapter,REFIID riid,HCHAPTER * phChapterSource,IUnknown ** ppView)virtual HRESULT WINAPI <oledb.h>
GetViewMode(__LONG32 * lViewMode)virtual HRESULT WINAPI <mmc.h>
GetViewportOrgEx(HDC hdc,LPPOINT lppoint) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetViewRect(RECT * prc)virtual HRESULT WINAPI <shdeprecated.h>
GetViews(LPDATAOBJECT pDataObject,LPVIEWEXTENSIONCALLBACK pViewExtensionCallback)virtual HRESULT WINAPI <mmc.h>
GetViewWindow(HWND * phwndView)virtual HRESULT WINAPI <shdeprecated.h>
GetVirtualDiskInformation(HANDLE VirtualDiskHandle,PULONG VirtualDiskInfoSize,PGET_VIRTUAL_DISK_INFO VirtualDiskInfo,PULONG SizeUsed)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
GetVirtualDiskMetadata(HANDLE VirtualDiskHandle,LPGUID Item,PULONG MetaDataSize,PVOID MetaData)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
GetVirtualDiskOperationProgress(HANDLE VirtualDiskHandle,LPOVERLAPPED Overlapped,PVIRTUAL_DISK_PROGRESS Progress)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
GetVirtualDiskPhysicalPath(HANDLE VirtualDiskHandle,PULONG DiskPathSizeInBytes,PWSTR DiskPath)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
GetVirtualKey(HWND hWnd,UINT * puVirtualKey)virtual HRESULT WINAPI <mshtmlc.h>
GetVisibilityCause(__LONG32 * pdwCause)virtual HRESULT WINAPI <agtsvr.h>
GetVisible(__LONG32 * pbVisible)virtual HRESULT WINAPI <agtsvr.h>
GetVisibleClipBounds(Rect * rect)	Status <gdiplusgraphics.h>
GetVisibleClipBounds(RectF * rect)	Status <gdiplusgraphics.h>
GetVisibleData(HROW hRow,HACCESSOR hAccessor,void * pData)virtual HRESULT WINAPI <oledb.h>
GetVMGAttributes(DVD_ATR * pATR)virtual HRESULT WINAPI <strmif.h>
GetVMGAttributes(DVD_MenuAttributes * pATR)virtual HRESULT WINAPI <strmif.h>
GetVoice(BSTR * pbszVoice)virtual HRESULT WINAPI <agtsvr.h>
GetVoiceCaption(BSTR * bszVoiceCaption)virtual HRESULT WINAPI <agtsvr.h>
GetVoiceCaption(BSTR * pbszVoiceCaption)virtual HRESULT WINAPI <agtsvr.h>
GetVolumeInformation(LPCSTR lpRootPathName,LPSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumeInformationA(LPCSTR lpRootPathName,LPSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumeInformationByHandleW(HANDLE hFile,LPWSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPWSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetVolumeInformationW(LPCWSTR lpRootPathName,LPWSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPWSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetVolumeNameForVolumeMountPoint(LPCSTR lpszVolumeMountPoint,LPSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint,LPSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint,LPWSTR lpszVolumeName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetVolumePathName(LPCSTR lpszFileName,LPSTR lpszVolumePathName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumePathNameA(LPCSTR lpszFileName,LPSTR lpszVolumePathName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumePathNamesForVolumeName(LPCSTR lpszVolumeName,LPCH lpszVolumePathNames,DWORD cchBufferLength,PDWORD lpcchReturnLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName,LPCH lpszVolumePathNames,DWORD cchBufferLength,PDWORD lpcchReturnLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName,LPWCH lpszVolumePathNames,DWORD cchBufferLength,PDWORD lpcchReturnLength) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetVolumePathNameW(LPCWSTR lpszFileName,LPWSTR lpszVolumePathName,DWORD cchBufferLength) WINBASEAPI WINBOOL WINAPI <fileapi.h>
GetVolumesFromDrive(LPSTR pszDriveName,LPSTR * VolumeNameBufferPtr,LPSTR * DriveLetterBufferPtr) DWORD WINAPI <ntmsapi.h>
GetVolumesFromDriveA(LPSTR pszDriveName,LPSTR * VolumeNameBufferPtr,LPSTR * DriveLetterBufferPtr) DWORD WINAPI <ntmsapi.h>
GetVolumesFromDriveW(LPWSTR pszDriveName,LPWSTR * VolumeNameBufferPtr,LPWSTR * DriveLetterBufferPtr) DWORD WINAPI <ntmsapi.h>
GetWaitTimeForThreadCleanup(DWORD * pdwThreadCleanupWaitTime)virtual HRESULT WINAPI <comsvcs.h>
GetWatchRegionInfo(HWATCHREGION hRegion,DBWATCHMODE * pdwWatchMode,HCHAPTER * phChapter,DBBKMARK * pcbBookmark,BYTE ** ppBookmark,DBROWCOUNT * pcRows)virtual HRESULT WINAPI <oledbdep.h>
GetWatermarks(LPDATAOBJECT lpIDataObject,HBITMAP * lphWatermark,HBITMAP * lphHeader,HPALETTE * lphPalette,WINBOOL * bStretch)virtual HRESULT WINAPI <mmc.h>
getwc(_stm)<wchar.h>
GetWeight(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetWEventRef()<penwin.h>
GetWhereabouts(ULONG cbWhereabouts,byte * rgbWhereabouts,ULONG * pcbUsed)virtual HRESULT WINAPI <txcoord.h>
GetWhereaboutsSize(ULONG * pcbWhereabouts)virtual HRESULT WINAPI <txcoord.h>
GetWidowControl(__LONG32 * pValue)virtual HRESULT WINAPI <tom.h>
GetWidth()	REAL <gdipluspen.h>
GetWidthScale()__inline__ REAL CustomLineCap::<gdiplusimpl.h>
GetWin32Status(VOID) virtual DWORD WINAPI <ilogobj.h>
GetWindow(__LONG32 * phWnd)virtual HRESULT WINAPI <winuser.h>
GetWindow(HWND hWnd,UINT uCmd) WINUSERAPI HWND WINAPI <winuser.h>
GetWindowContextHelpId(HWND) WINUSERAPI DWORD WINAPI <winuser.h>
GetWindowDC(HWND hWnd) WINUSERAPI HDC WINAPI <winuser.h>
GetWindowDisplayAffinity(HWND hWnd,DWORD * pdwAffinity) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetWindowExStyle(hwnd)<windowsx.h>
GetWindowExtEx(HDC hdc,LPSIZE lpsize) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetWindowFeedbackSetting(HWND hwnd,FEEDBACK_TYPE feedback,DWORD dwFlags,UINT32 * pSize,VOID * config) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetWindowFont(hwnd)<windowsx.h>
GetWindowID(hwnd)<windowsx.h>
GetWindowInfo(HWND hwnd,PWINDOWINFO pwi) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetWindowInstance(hwnd)<windowsx.h>
GetWindowLong(HWND hWnd,int nIndex) WINUSERAPI LONG WINAPI <winuser.h>
GetWindowLongA(HWND hWnd,int nIndex) WINUSERAPI LONG WINAPI <winuser.h>
GetWindowLongPtr(HWND hWnd,int nIndex) WINUSERAPI LONG_PTR WINAPI <winuser.h>
GetWindowLongPtrA(HWND hWnd,int nIndex) WINUSERAPI LONG_PTR WINAPI <winuser.h>
GetWindowLongPtrW(HWND hWnd,int nIndex) WINUSERAPI LONG_PTR WINAPI <winuser.h>
GetWindowLongW(HWND hWnd,int nIndex) WINUSERAPI LONG WINAPI <winuser.h>
GetWindowModuleFileName(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax) WINUSERAPI UINT WINAPI <winuser.h>
GetWindowModuleFileNameA(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax) WINUSERAPI UINT WINAPI <winuser.h>
GetWindowModuleFileNameW(HWND hwnd,LPWSTR pszFileName,UINT cchFileNameMax) WINUSERAPI UINT WINAPI <winuser.h>
GetWindowOrgEx(HDC hdc,LPPOINT lppoint) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetWindowOwner(hwnd)<windowsx.h>
GetWindowPlacement(HWND hWnd,WINDOWPLACEMENT * lpwndpl) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetWindowPosition(__LONG32 * pLeft,__LONG32 * pTop,__LONG32 * pWidth,__LONG32 * pHeight)virtual HRESULT WINAPI <control.h>
GetWindowRect(HWND hWnd,LPRECT lpRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
GetWindowRegionData(HWND hwnd,DWORD size,LPRGNDATA prd) extern DWORD WINAPI <dciman.h>
GetWindowRgn(HWND hWnd,HRGN hRgn) WINUSERAPI int WINAPI <winuser.h>
GetWindowRgnBox(HWND hWnd,LPRECT lprc) WINUSERAPI int WINAPI <winuser.h>
GetWindowsAccountDomainSid(PSID pSid,PSID pDomainSid,DWORD * cbDomainSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
GetWindowsDirectory(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetWindowsDirectoryA(LPSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetWindowsDirectoryW(LPWSTR lpBuffer,UINT uSize) WINBASEAPI UINT WINAPI <sysinfoapi.h>
GetWindowStyle(hwnd)<windowsx.h>
GetWindowSubclass(HWND hWnd,SUBCLASSPROC pfnSubclass,UINT_PTR uIdSubclass,DWORD_PTR * pdwRefData) WINBOOL WINAPI <commctrl.h>
GetWindowTask(hWnd)<winuser.h>
GetWindowText(HWND hWnd,LPSTR lpString,int nMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetWindowTextLength(HWND hWnd) WINUSERAPI int WINAPI <winuser.h>
GetWindowTextLengthA(HWND hWnd) WINUSERAPI int WINAPI <winuser.h>
GetWindowTextLengthW(HWND hWnd) WINUSERAPI int WINAPI <winuser.h>
GetWindowTextW(HWND hWnd,LPWSTR lpString,int nMaxCount) WINUSERAPI int WINAPI <winuser.h>
GetWindowTheme(HWND hwnd)THEMEAPI_<uxtheme.h>
GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId) WINUSERAPI DWORD WINAPI <winuser.h>
GetWindowWord(HWND hWnd,int nIndex) WINUSERAPI WORD WINAPI <winuser.h>
GetWinMetaFileBits(HENHMETAFILE hemf,UINT cbData16,LPBYTE pData16,INT iMapMode,HDC hdcRef) WINGDIAPI UINT WINAPI <wingdi.h>
GetWmfHeader()	const METAHEADER<gdiplusmetaheader.h>
GetWMIFilter(BSTR bstrPath,IGPMWMIFilter ** ppWMIFilter)virtual HRESULT WINAPI <gpmgmt.h>
GetWMIFilter(IGPMWMIFilter ** ppIGPMWMIFilter)virtual HRESULT WINAPI <gpmgmt.h>
GetWordlistCoercionHRC(HRC) int WINAPI <penwin.h>
GetWordlistHRC(HRC,LPHWL) int WINAPI <penwin.h>
GetWork(DTCINITIATEDRECOVERYWORK * pWork,void ** ppv)virtual HRESULT WINAPI <txdtc.h>
GetWorkingDirectory(LPWSTR * ppwszWorkingDirectory)virtual HRESULT WINAPI <mstask.h>
GetWorkItemData(WORD * pcbData,BYTE ** prgbData)virtual HRESULT WINAPI <mstask.h>
GetWorldTransform(HDC hdc,LPXFORM lpxf) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GetWrapMode()	WrapMode <gdipluspath.h>
GetWriteWatch(DWORD dwFlags,PVOID lpBaseAddress,SIZE_T dwRegionSize,PVOID * lpAddresses,ULONG_PTR * lpdwCount,LPDWORD lpdwGranularity) WINBASEAPI UINT WINAPI <memoryapi.h>
GetWsChanges(HANDLE hProcess,PPSAPI_WS_WATCH_INFORMATION lpWatchInfo,DWORD cb) WINBOOL WINAPI <psapi.h>
GetWsChangesEx(HANDLE hProcess,PPSAPI_WS_WATCH_INFORMATION_EX lpWatchInfoEx,DWORD cb)WINBOOL WINAPI <psapi.h>
GetWStr(__LONG32 lSrcPos,__LONG32 lSrcLen,WCHAR * pszDest,__LONG32 cchDest,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
GetWString()inline wchar_t<comutil.h>
GetWStringFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,WCHAR ** ppwString) DWORD __cdecl <netmon.h>
GetXAAccess(WINBOOL * pbXAAccess)virtual HRESULT WINAPI <txcoord.h>
GetXaSwitch(XA_SWITCH_FLAGS XaSwitchFlags,xa_switch_t ** ppXaSwitch) HRESULT __cdecl <oletx2xa.h>
GetXlcModeDDObjAndPrimarySurface(LPDIRECTDRAW7 * lpDDObj,LPDIRECTDRAWSURFACE7 * lpPrimarySurf)virtual HRESULT WINAPI <strmif.h>
GetXStateFeaturesMask(PCONTEXT Context,PDWORD64 FeatureMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
GetYValue(cmyk)<wingdi.h>
GetZOrder(DWORD dwStreamID,DWORD * pZ)virtual HRESULT WINAPI <strmif.h>
GID_ROTATE_ANGLE_FROM_ARGUMENT(_arg_)<winuser.h>
GID_ROTATE_ANGLE_TO_ARGUMENT(_arg_)<winuser.h>
glAccum(GLenum op,GLfloat value)WINGDIAPI void APIENTRY <gl.h>
glAlphaFunc(GLenum func,GLclampf ref)WINGDIAPI void APIENTRY <gl.h>
glAreTexturesResident(GLsizei n,const GLuint * textures,GLboolean * residences)WINGDIAPI GLboolean APIENTRY <gl.h>
glArrayElement(GLint i)WINGDIAPI void APIENTRY <gl.h>
glBegin(GLenum mode)WINGDIAPI void APIENTRY <gl.h>
glBindTexture(GLenum target,GLuint texture)GLAPI void APIENTRY <glcorearb.h>
glBitmap(GLsizei width,GLsizei height,GLfloat xorig,GLfloat yorig,GLfloat xmove,GLfloat ymove,const GLubyte * bitmap)WINGDIAPI void APIENTRY <gl.h>
glBlendFunc(GLenum sfactor,GLenum dfactor)GLAPI void APIENTRY <glcorearb.h>
glCallList(GLuint list)WINGDIAPI void APIENTRY <gl.h>
glCallLists(GLsizei n,GLenum type,const GLvoid * lists)WINGDIAPI void APIENTRY <gl.h>
glClear(GLbitfield mask)GLAPI void APIENTRY <glcorearb.h>
glClearAccum(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)WINGDIAPI void APIENTRY <gl.h>
glClearColor(GLclampf red,GLclampf green,GLclampf blue,GLclampf alpha)WINGDIAPI void APIENTRY <glcorearb.h>
glClearColor(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)GLAPI void APIENTRY <glcorearb.h>
glClearDepth(GLclampd depth)WINGDIAPI void APIENTRY <glcorearb.h>
glClearDepth(GLdouble depth)GLAPI void APIENTRY <glcorearb.h>
glClearIndex(GLfloat c)WINGDIAPI void APIENTRY <gl.h>
glClearStencil(GLint s)GLAPI void APIENTRY <glcorearb.h>
glClipPlane(GLenum plane,const GLdouble * equation)WINGDIAPI void APIENTRY <gl.h>
glColor3b(GLbyte red,GLbyte green,GLbyte blue)WINGDIAPI void APIENTRY <gl.h>
glColor3bv(const GLbyte * v)WINGDIAPI void APIENTRY <gl.h>
glColor3d(GLdouble red,GLdouble green,GLdouble blue)WINGDIAPI void APIENTRY <gl.h>
glColor3dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glColor3f(GLfloat red,GLfloat green,GLfloat blue)WINGDIAPI void APIENTRY <gl.h>
glColor3fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glColor3i(GLint red,GLint green,GLint blue)WINGDIAPI void APIENTRY <gl.h>
glColor3iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glColor3s(GLshort red,GLshort green,GLshort blue)WINGDIAPI void APIENTRY <gl.h>
glColor3sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glColor3ub(GLubyte red,GLubyte green,GLubyte blue)WINGDIAPI void APIENTRY <gl.h>
glColor3ubv(const GLubyte * v)WINGDIAPI void APIENTRY <gl.h>
glColor3ui(GLuint red,GLuint green,GLuint blue)WINGDIAPI void APIENTRY <gl.h>
glColor3uiv(const GLuint * v)WINGDIAPI void APIENTRY <gl.h>
glColor3us(GLushort red,GLushort green,GLushort blue)WINGDIAPI void APIENTRY <gl.h>
glColor3usv(const GLushort * v)WINGDIAPI void APIENTRY <gl.h>
glColor4b(GLbyte red,GLbyte green,GLbyte blue,GLbyte alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4bv(const GLbyte * v)WINGDIAPI void APIENTRY <gl.h>
glColor4d(GLdouble red,GLdouble green,GLdouble blue,GLdouble alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glColor4f(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glColor4i(GLint red,GLint green,GLint blue,GLint alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glColor4s(GLshort red,GLshort green,GLshort blue,GLshort alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glColor4ub(GLubyte red,GLubyte green,GLubyte blue,GLubyte alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4ubv(const GLubyte * v)WINGDIAPI void APIENTRY <gl.h>
glColor4ui(GLuint red,GLuint green,GLuint blue,GLuint alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4uiv(const GLuint * v)WINGDIAPI void APIENTRY <gl.h>
glColor4us(GLushort red,GLushort green,GLushort blue,GLushort alpha)WINGDIAPI void APIENTRY <gl.h>
glColor4usv(const GLushort * v)WINGDIAPI void APIENTRY <gl.h>
glColorMask(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)GLAPI void APIENTRY <glcorearb.h>
glColorMaterial(GLenum face,GLenum mode)WINGDIAPI void APIENTRY <gl.h>
glColorPointer(GLint size,GLenum type,GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
glCopyPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum type)WINGDIAPI void APIENTRY <gl.h>
glCopyTexImage1D(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)GLAPI void APIENTRY <glcorearb.h>
glCopyTexImage1D(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLint border)WINGDIAPI void APIENTRY <glcorearb.h>
glCopyTexImage2D(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)GLAPI void APIENTRY <glcorearb.h>
glCopyTexImage2D(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)WINGDIAPI void APIENTRY <glcorearb.h>
glCopyTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)GLAPI void APIENTRY <glcorearb.h>
glCopyTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)GLAPI void APIENTRY <glcorearb.h>
glCullFace(GLenum mode)GLAPI void APIENTRY <glcorearb.h>
glDeleteLists(GLuint list,GLsizei range)WINGDIAPI void APIENTRY <gl.h>
glDeleteTextures(GLsizei n,const GLuint * textures)GLAPI void APIENTRY <glcorearb.h>
glDepthFunc(GLenum func)GLAPI void APIENTRY <glcorearb.h>
glDepthMask(GLboolean flag)GLAPI void APIENTRY <glcorearb.h>
glDepthRange(GLclampd zNear,GLclampd zFar)WINGDIAPI void APIENTRY <glcorearb.h>
glDepthRange(GLdouble near,GLdouble far)GLAPI void APIENTRY <glcorearb.h>
glDisable(GLenum cap)GLAPI void APIENTRY <glcorearb.h>
glDisableClientState(GLenum array)WINGDIAPI void APIENTRY <gl.h>
glDrawArrays(GLenum mode,GLint first,GLsizei count)GLAPI void APIENTRY <glcorearb.h>
glDrawBuffer(GLenum buf)GLAPI void APIENTRY <glcorearb.h>
glDrawBuffer(GLenum mode)WINGDIAPI void APIENTRY <glcorearb.h>
glDrawElements(GLenum mode,GLsizei count,GLenum type,const GLvoid * indices)WINGDIAPI void APIENTRY <glcorearb.h>
glDrawElements(GLenum mode,GLsizei count,GLenum type,const void * indices)GLAPI void APIENTRY <glcorearb.h>
glDrawPixels(GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid * pixels)WINGDIAPI void APIENTRY <gl.h>
glEdgeFlag(GLboolean flag)WINGDIAPI void APIENTRY <gl.h>
glEdgeFlagPointer(GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
glEdgeFlagv(const GLboolean * flag)WINGDIAPI void APIENTRY <gl.h>
glEnable(GLenum cap)GLAPI void APIENTRY <glcorearb.h>
glEnableClientState(GLenum array)WINGDIAPI void APIENTRY <gl.h>
glEnd(void)WINGDIAPI void APIENTRY <gl.h>
glEndList(void)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord1d(GLdouble u)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord1dv(const GLdouble * u)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord1f(GLfloat u)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord1fv(const GLfloat * u)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord2d(GLdouble u,GLdouble v)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord2dv(const GLdouble * u)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord2f(GLfloat u,GLfloat v)WINGDIAPI void APIENTRY <gl.h>
glEvalCoord2fv(const GLfloat * u)WINGDIAPI void APIENTRY <gl.h>
glEvalMesh1(GLenum mode,GLint i1,GLint i2)WINGDIAPI void APIENTRY <gl.h>
glEvalMesh2(GLenum mode,GLint i1,GLint i2,GLint j1,GLint j2)WINGDIAPI void APIENTRY <gl.h>
glEvalPoint1(GLint i)WINGDIAPI void APIENTRY <gl.h>
glEvalPoint2(GLint i,GLint j)WINGDIAPI void APIENTRY <gl.h>
glFeedbackBuffer(GLsizei size,GLenum type,GLfloat * buffer)WINGDIAPI void APIENTRY <gl.h>
glFinish(void)GLAPI void APIENTRY <glcorearb.h>
glFlush(void)GLAPI void APIENTRY <glcorearb.h>
glFogf(GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glFogfv(GLenum pname,const GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glFogi(GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glFogiv(GLenum pname,const GLint * params)WINGDIAPI void APIENTRY <gl.h>
glFrontFace(GLenum mode)GLAPI void APIENTRY <glcorearb.h>
glFrustum(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)WINGDIAPI void APIENTRY <gl.h>
glGenLists(GLsizei range)WINGDIAPI GLuint APIENTRY <gl.h>
glGenTextures(GLsizei n,GLuint * textures)GLAPI void APIENTRY <glcorearb.h>
glGetBooleanv(GLenum pname,GLboolean * data)GLAPI void APIENTRY <glcorearb.h>
glGetBooleanv(GLenum pname,GLboolean * params)WINGDIAPI void APIENTRY <glcorearb.h>
glGetClipPlane(GLenum plane,GLdouble * equation)WINGDIAPI void APIENTRY <gl.h>
glGetDoublev(GLenum pname,GLdouble * data)GLAPI void APIENTRY <glcorearb.h>
glGetDoublev(GLenum pname,GLdouble * params)WINGDIAPI void APIENTRY <glcorearb.h>
glGetError(void)GLAPI GLenum APIENTRY <glcorearb.h>
glGetFloatv(GLenum pname,GLfloat * data)GLAPI void APIENTRY <glcorearb.h>
glGetFloatv(GLenum pname,GLfloat * params)WINGDIAPI void APIENTRY <glcorearb.h>
glGetIntegerv(GLenum pname,GLint * data)GLAPI void APIENTRY <glcorearb.h>
glGetIntegerv(GLenum pname,GLint * params)WINGDIAPI void APIENTRY <glcorearb.h>
glGetLightfv(GLenum light,GLenum pname,GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glGetLightiv(GLenum light,GLenum pname,GLint * params)WINGDIAPI void APIENTRY <gl.h>
glGetMapdv(GLenum target,GLenum query,GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glGetMapfv(GLenum target,GLenum query,GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glGetMapiv(GLenum target,GLenum query,GLint * v)WINGDIAPI void APIENTRY <gl.h>
glGetMaterialfv(GLenum face,GLenum pname,GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glGetMaterialiv(GLenum face,GLenum pname,GLint * params)WINGDIAPI void APIENTRY <gl.h>
glGetPixelMapfv(GLenum map,GLfloat * values)WINGDIAPI void APIENTRY <gl.h>
glGetPixelMapuiv(GLenum map,GLuint * values)WINGDIAPI void APIENTRY <gl.h>
glGetPixelMapusv(GLenum map,GLushort * values)WINGDIAPI void APIENTRY <gl.h>
glGetPointerv(GLenum pname,GLvoid ** params)WINGDIAPI void APIENTRY <glcorearb.h>
glGetPointerv(GLenum pname,void ** params)GLAPI void APIENTRY <glcorearb.h>
glGetPolygonStipple(GLubyte * mask)WINGDIAPI void APIENTRY <gl.h>
glGetString(GLenum name)GLAPI const GLubyte<glcorearb.h>
glGetTexEnvfv(GLenum target,GLenum pname,GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glGetTexEnviv(GLenum target,GLenum pname,GLint * params)WINGDIAPI void APIENTRY <gl.h>
glGetTexGendv(GLenum coord,GLenum pname,GLdouble * params)WINGDIAPI void APIENTRY <gl.h>
glGetTexGenfv(GLenum coord,GLenum pname,GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glGetTexGeniv(GLenum coord,GLenum pname,GLint * params)WINGDIAPI void APIENTRY <gl.h>
glGetTexImage(GLenum target,GLint level,GLenum format,GLenum type,GLvoid * pixels)WINGDIAPI void APIENTRY <glcorearb.h>
glGetTexImage(GLenum target,GLint level,GLenum format,GLenum type,void * pixels)GLAPI void APIENTRY <glcorearb.h>
glGetTexLevelParameterfv(GLenum target,GLint level,GLenum pname,GLfloat * params)GLAPI void APIENTRY <glcorearb.h>
glGetTexLevelParameteriv(GLenum target,GLint level,GLenum pname,GLint * params)GLAPI void APIENTRY <glcorearb.h>
glGetTexParameterfv(GLenum target,GLenum pname,GLfloat * params)GLAPI void APIENTRY <glcorearb.h>
glGetTexParameteriv(GLenum target,GLenum pname,GLint * params)GLAPI void APIENTRY <glcorearb.h>
glHint(GLenum target,GLenum mode)GLAPI void APIENTRY <glcorearb.h>
glIndexd(GLdouble c)WINGDIAPI void APIENTRY <gl.h>
glIndexdv(const GLdouble * c)WINGDIAPI void APIENTRY <gl.h>
glIndexf(GLfloat c)WINGDIAPI void APIENTRY <gl.h>
glIndexfv(const GLfloat * c)WINGDIAPI void APIENTRY <gl.h>
glIndexi(GLint c)WINGDIAPI void APIENTRY <gl.h>
glIndexiv(const GLint * c)WINGDIAPI void APIENTRY <gl.h>
glIndexMask(GLuint mask)WINGDIAPI void APIENTRY <gl.h>
glIndexPointer(GLenum type,GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
glIndexs(GLshort c)WINGDIAPI void APIENTRY <gl.h>
glIndexsv(const GLshort * c)WINGDIAPI void APIENTRY <gl.h>
glIndexub(GLubyte c)WINGDIAPI void APIENTRY <gl.h>
glIndexubv(const GLubyte * c)WINGDIAPI void APIENTRY <gl.h>
glInitNames(void)WINGDIAPI void APIENTRY <gl.h>
glInterleavedArrays(GLenum format,GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
glIsEnabled(GLenum cap)GLAPI GLboolean APIENTRY <glcorearb.h>
glIsList(GLuint list)WINGDIAPI GLboolean APIENTRY <gl.h>
glIsTexture(GLuint texture)GLAPI GLboolean APIENTRY <glcorearb.h>
glLightf(GLenum light,GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glLightfv(GLenum light,GLenum pname,const GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glLighti(GLenum light,GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glLightiv(GLenum light,GLenum pname,const GLint * params)WINGDIAPI void APIENTRY <gl.h>
glLightModelf(GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glLightModelfv(GLenum pname,const GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glLightModeli(GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glLightModeliv(GLenum pname,const GLint * params)WINGDIAPI void APIENTRY <gl.h>
glLineStipple(GLint factor,GLushort pattern)WINGDIAPI void APIENTRY <gl.h>
glLineWidth(GLfloat width)GLAPI void APIENTRY <glcorearb.h>
glListBase(GLuint base)WINGDIAPI void APIENTRY <gl.h>
glLoadIdentity(void)WINGDIAPI void APIENTRY <gl.h>
glLoadMatrixd(const GLdouble * m)WINGDIAPI void APIENTRY <gl.h>
glLoadMatrixf(const GLfloat * m)WINGDIAPI void APIENTRY <gl.h>
glLoadName(GLuint name)WINGDIAPI void APIENTRY <gl.h>
glLogicOp(GLenum opcode)GLAPI void APIENTRY <glcorearb.h>
glMap1d(GLenum target,GLdouble u1,GLdouble u2,GLint stride,GLint order,const GLdouble * points)WINGDIAPI void APIENTRY <gl.h>
glMap1f(GLenum target,GLfloat u1,GLfloat u2,GLint stride,GLint order,const GLfloat * points)WINGDIAPI void APIENTRY <gl.h>
glMap2d(GLenum target,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,const GLdouble * points)WINGDIAPI void APIENTRY <gl.h>
glMap2f(GLenum target,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,const GLfloat * points)WINGDIAPI void APIENTRY <gl.h>
glMapGrid1d(GLint un,GLdouble u1,GLdouble u2)WINGDIAPI void APIENTRY <gl.h>
glMapGrid1f(GLint un,GLfloat u1,GLfloat u2)WINGDIAPI void APIENTRY <gl.h>
glMapGrid2d(GLint un,GLdouble u1,GLdouble u2,GLint vn,GLdouble v1,GLdouble v2)WINGDIAPI void APIENTRY <gl.h>
glMapGrid2f(GLint un,GLfloat u1,GLfloat u2,GLint vn,GLfloat v1,GLfloat v2)WINGDIAPI void APIENTRY <gl.h>
glMaterialf(GLenum face,GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glMaterialfv(GLenum face,GLenum pname,const GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glMateriali(GLenum face,GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glMaterialiv(GLenum face,GLenum pname,const GLint * params)WINGDIAPI void APIENTRY <gl.h>
glMatrixMode(GLenum mode)WINGDIAPI void APIENTRY <gl.h>
glMultMatrixd(const GLdouble * m)WINGDIAPI void APIENTRY <gl.h>
glMultMatrixf(const GLfloat * m)WINGDIAPI void APIENTRY <gl.h>
glNewList(GLuint list,GLenum mode)WINGDIAPI void APIENTRY <gl.h>
glNormal3b(GLbyte nx,GLbyte ny,GLbyte nz)WINGDIAPI void APIENTRY <gl.h>
glNormal3bv(const GLbyte * v)WINGDIAPI void APIENTRY <gl.h>
glNormal3d(GLdouble nx,GLdouble ny,GLdouble nz)WINGDIAPI void APIENTRY <gl.h>
glNormal3dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glNormal3f(GLfloat nx,GLfloat ny,GLfloat nz)WINGDIAPI void APIENTRY <gl.h>
glNormal3fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glNormal3i(GLint nx,GLint ny,GLint nz)WINGDIAPI void APIENTRY <gl.h>
glNormal3iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glNormal3s(GLshort nx,GLshort ny,GLshort nz)WINGDIAPI void APIENTRY <gl.h>
glNormal3sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glNormalPointer(GLenum type,GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
GlobalAddAtom(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalAddAtomA(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalAddAtomEx(LPCSTR lpString,DWORD Flags) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalAddAtomExA(LPCSTR lpString,DWORD Flags) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalAddAtomExW(LPCWSTR lpString,DWORD Flags) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalAddAtomW(LPCWSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalAlloc(UINT uFlags,SIZE_T dwBytes) WINBASEAPI HGLOBAL WINAPI <winbase.h>
GlobalAllocPtr(flags,cb)<windowsx.h>
GlobalCompact(DWORD dwMinFree) WINBASEAPI SIZE_T WINAPI <winbase.h>
GlobalDeleteAtom(ATOM nAtom) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalDiscard(h)<winbase.h>
GlobalFindAtom(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalFindAtomA(LPCSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalFindAtomW(LPCWSTR lpString) WINBASEAPI ATOM WINAPI <winbase.h>
GlobalFix(HGLOBAL hMem) WINBASEAPI VOID WINAPI <winbase.h>
GlobalFlags(HGLOBAL hMem) WINBASEAPI UINT WINAPI <winbase.h>
GlobalFree(HGLOBAL hMem) WINBASEAPI HGLOBAL WINAPI <winbase.h>
GlobalFreePtr(lp)<windowsx.h>
GlobalGetAtomName(ATOM nAtom,LPSTR lpBuffer,int nSize) WINBASEAPI UINT WINAPI <winbase.h>
GlobalGetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize) WINBASEAPI UINT WINAPI <winbase.h>
GlobalGetAtomNameW(ATOM nAtom,LPWSTR lpBuffer,int nSize) WINBASEAPI UINT WINAPI <winbase.h>
GlobalHandle(LPCVOID pMem) WINBASEAPI HGLOBAL WINAPI <winbase.h>
GlobalLock(HGLOBAL hMem) WINBASEAPI LPVOID WINAPI <winbase.h>
GlobalLockPtr(lp)<windowsx.h>
GlobalLRUNewest(h)<winbase.h>
GlobalLRUOldest(h)<winbase.h>
GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer) WINBASEAPI VOID WINAPI <winbase.h>
GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
GlobalPtrHandle(lp)<windowsx.h>
GlobalReAlloc(HGLOBAL hMem,SIZE_T dwBytes,UINT uFlags) WINBASEAPI HGLOBAL WINAPI <winbase.h>
GlobalReAllocPtr(lp,cbNew,flags)<windowsx.h>
GlobalSize(HGLOBAL hMem) WINBASEAPI SIZE_T WINAPI <winbase.h>
GlobalUnfix(HGLOBAL hMem) WINBASEAPI VOID WINAPI <winbase.h>
GlobalUnlock(HGLOBAL hMem) WINBASEAPI WINBOOL WINAPI <winbase.h>
GlobalUnlockPtr(lp)<windowsx.h>
GlobalUnWire(HGLOBAL hMem) WINBASEAPI WINBOOL WINAPI <winbase.h>
GlobalWire(HGLOBAL hMem) WINBASEAPI LPVOID WINAPI <winbase.h>
glOrtho(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)WINGDIAPI void APIENTRY <gl.h>
glPassThrough(GLfloat token)WINGDIAPI void APIENTRY <gl.h>
glPixelMapfv(GLenum map,GLsizei mapsize,const GLfloat * values)WINGDIAPI void APIENTRY <gl.h>
glPixelMapuiv(GLenum map,GLsizei mapsize,const GLuint * values)WINGDIAPI void APIENTRY <gl.h>
glPixelMapusv(GLenum map,GLsizei mapsize,const GLushort * values)WINGDIAPI void APIENTRY <gl.h>
glPixelStoref(GLenum pname,GLfloat param)GLAPI void APIENTRY <glcorearb.h>
glPixelStorei(GLenum pname,GLint param)GLAPI void APIENTRY <glcorearb.h>
glPixelTransferf(GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glPixelTransferi(GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glPixelZoom(GLfloat xfactor,GLfloat yfactor)WINGDIAPI void APIENTRY <gl.h>
glPointSize(GLfloat size)GLAPI void APIENTRY <glcorearb.h>
glPolygonMode(GLenum face,GLenum mode)GLAPI void APIENTRY <glcorearb.h>
glPolygonOffset(GLfloat factor,GLfloat units)GLAPI void APIENTRY <glcorearb.h>
glPolygonStipple(const GLubyte * mask)WINGDIAPI void APIENTRY <gl.h>
glPopAttrib(void)WINGDIAPI void APIENTRY <gl.h>
glPopClientAttrib(void)WINGDIAPI void APIENTRY <gl.h>
glPopMatrix(void)WINGDIAPI void APIENTRY <gl.h>
glPopName(void)WINGDIAPI void APIENTRY <gl.h>
glPrioritizeTextures(GLsizei n,const GLuint * textures,const GLclampf * priorities)WINGDIAPI void APIENTRY <gl.h>
glPushAttrib(GLbitfield mask)WINGDIAPI void APIENTRY <gl.h>
glPushClientAttrib(GLbitfield mask)WINGDIAPI void APIENTRY <gl.h>
glPushMatrix(void)WINGDIAPI void APIENTRY <gl.h>
glPushName(GLuint name)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2d(GLdouble x,GLdouble y)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2f(GLfloat x,GLfloat y)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2i(GLint x,GLint y)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2s(GLshort x,GLshort y)WINGDIAPI void APIENTRY <gl.h>
glRasterPos2sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3d(GLdouble x,GLdouble y,GLdouble z)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3f(GLfloat x,GLfloat y,GLfloat z)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3i(GLint x,GLint y,GLint z)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3s(GLshort x,GLshort y,GLshort z)WINGDIAPI void APIENTRY <gl.h>
glRasterPos3sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4i(GLint x,GLint y,GLint z,GLint w)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4s(GLshort x,GLshort y,GLshort z,GLshort w)WINGDIAPI void APIENTRY <gl.h>
glRasterPos4sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glReadBuffer(GLenum mode)WINGDIAPI void APIENTRY <glcorearb.h>
glReadBuffer(GLenum src)GLAPI void APIENTRY <glcorearb.h>
glReadPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLvoid * pixels)WINGDIAPI void APIENTRY <glcorearb.h>
glReadPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)GLAPI void APIENTRY <glcorearb.h>
glRectd(GLdouble x1,GLdouble y1,GLdouble x2,GLdouble y2)WINGDIAPI void APIENTRY <gl.h>
glRectdv(const GLdouble * v1,const GLdouble * v2)WINGDIAPI void APIENTRY <gl.h>
glRectf(GLfloat x1,GLfloat y1,GLfloat x2,GLfloat y2)WINGDIAPI void APIENTRY <gl.h>
glRectfv(const GLfloat * v1,const GLfloat * v2)WINGDIAPI void APIENTRY <gl.h>
glRecti(GLint x1,GLint y1,GLint x2,GLint y2)WINGDIAPI void APIENTRY <gl.h>
glRectiv(const GLint * v1,const GLint * v2)WINGDIAPI void APIENTRY <gl.h>
glRects(GLshort x1,GLshort y1,GLshort x2,GLshort y2)WINGDIAPI void APIENTRY <gl.h>
glRectsv(const GLshort * v1,const GLshort * v2)WINGDIAPI void APIENTRY <gl.h>
glRenderMode(GLenum mode)WINGDIAPI GLint APIENTRY <gl.h>
glRotated(GLdouble angle,GLdouble x,GLdouble y,GLdouble z)WINGDIAPI void APIENTRY <gl.h>
glRotatef(GLfloat angle,GLfloat x,GLfloat y,GLfloat z)WINGDIAPI void APIENTRY <gl.h>
glScaled(GLdouble x,GLdouble y,GLdouble z)WINGDIAPI void APIENTRY <gl.h>
glScalef(GLfloat x,GLfloat y,GLfloat z)WINGDIAPI void APIENTRY <gl.h>
glScissor(GLint x,GLint y,GLsizei width,GLsizei height)GLAPI void APIENTRY <glcorearb.h>
glSelectBuffer(GLsizei size,GLuint * buffer)WINGDIAPI void APIENTRY <gl.h>
glShadeModel(GLenum mode)WINGDIAPI void APIENTRY <gl.h>
glStencilFunc(GLenum func,GLint ref,GLuint mask)GLAPI void APIENTRY <glcorearb.h>
glStencilMask(GLuint mask)GLAPI void APIENTRY <glcorearb.h>
glStencilOp(GLenum fail,GLenum zfail,GLenum zpass)GLAPI void APIENTRY <glcorearb.h>
glTexCoord1d(GLdouble s)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1f(GLfloat s)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1i(GLint s)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1s(GLshort s)WINGDIAPI void APIENTRY <gl.h>
glTexCoord1sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2d(GLdouble s,GLdouble t)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2f(GLfloat s,GLfloat t)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2i(GLint s,GLint t)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2s(GLshort s,GLshort t)WINGDIAPI void APIENTRY <gl.h>
glTexCoord2sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3d(GLdouble s,GLdouble t,GLdouble r)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3f(GLfloat s,GLfloat t,GLfloat r)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3i(GLint s,GLint t,GLint r)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3s(GLshort s,GLshort t,GLshort r)WINGDIAPI void APIENTRY <gl.h>
glTexCoord3sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4d(GLdouble s,GLdouble t,GLdouble r,GLdouble q)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4f(GLfloat s,GLfloat t,GLfloat r,GLfloat q)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4i(GLint s,GLint t,GLint r,GLint q)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4s(GLshort s,GLshort t,GLshort r,GLshort q)WINGDIAPI void APIENTRY <gl.h>
glTexCoord4sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glTexCoordPointer(GLint size,GLenum type,GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
glTexEnvf(GLenum target,GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glTexEnvfv(GLenum target,GLenum pname,const GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glTexEnvi(GLenum target,GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glTexEnviv(GLenum target,GLenum pname,const GLint * params)WINGDIAPI void APIENTRY <gl.h>
glTexGend(GLenum coord,GLenum pname,GLdouble param)WINGDIAPI void APIENTRY <gl.h>
glTexGendv(GLenum coord,GLenum pname,const GLdouble * params)WINGDIAPI void APIENTRY <gl.h>
glTexGenf(GLenum coord,GLenum pname,GLfloat param)WINGDIAPI void APIENTRY <gl.h>
glTexGenfv(GLenum coord,GLenum pname,const GLfloat * params)WINGDIAPI void APIENTRY <gl.h>
glTexGeni(GLenum coord,GLenum pname,GLint param)WINGDIAPI void APIENTRY <gl.h>
glTexGeniv(GLenum coord,GLenum pname,const GLint * params)WINGDIAPI void APIENTRY <gl.h>
glTexImage1D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const GLvoid * pixels)WINGDIAPI void APIENTRY <glcorearb.h>
glTexImage1D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const void * pixels)GLAPI void APIENTRY <glcorearb.h>
glTexImage2D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const GLvoid * pixels)WINGDIAPI void APIENTRY <glcorearb.h>
glTexImage2D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)GLAPI void APIENTRY <glcorearb.h>
glTexParameterf(GLenum target,GLenum pname,GLfloat param)GLAPI void APIENTRY <glcorearb.h>
glTexParameterfv(GLenum target,GLenum pname,const GLfloat * params)GLAPI void APIENTRY <glcorearb.h>
glTexParameteri(GLenum target,GLenum pname,GLint param)GLAPI void APIENTRY <glcorearb.h>
glTexParameteriv(GLenum target,GLenum pname,const GLint * params)GLAPI void APIENTRY <glcorearb.h>
glTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const GLvoid * pixels)WINGDIAPI void APIENTRY <glcorearb.h>
glTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)GLAPI void APIENTRY <glcorearb.h>
glTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid * pixels)WINGDIAPI void APIENTRY <glcorearb.h>
glTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)GLAPI void APIENTRY <glcorearb.h>
glTranslated(GLdouble x,GLdouble y,GLdouble z)WINGDIAPI void APIENTRY <gl.h>
glTranslatef(GLfloat x,GLfloat y,GLfloat z)WINGDIAPI void APIENTRY <gl.h>
gluBeginCurve(GLUnurbs * nobj)void APIENTRY <glu.h>
gluBeginPolygon(GLUtesselator * tess)void APIENTRY <glu.h>
gluBeginSurface(GLUnurbs * nobj)void APIENTRY <glu.h>
gluBeginTrim(GLUnurbs * nobj)void APIENTRY <glu.h>
gluBuild1DMipmaps(GLenum target,GLint components,GLint width,GLenum format,GLenum type,const void * data)int APIENTRY <glu.h>
gluBuild2DMipmaps(GLenum target,GLint components,GLint width,GLint height,GLenum format,GLenum type,const void * data)int APIENTRY <glu.h>
gluCylinder(GLUquadric * qobj,GLdouble baseRadius,GLdouble topRadius,GLdouble height,GLint slices,GLint stacks)void APIENTRY <glu.h>
gluDeleteNurbsRenderer(GLUnurbs * nobj)void APIENTRY <glu.h>
gluDeleteQuadric(GLUquadric * state)void APIENTRY <glu.h>
gluDeleteTess(GLUtesselator * tess)void APIENTRY <glu.h>
gluDisk(GLUquadric * qobj,GLdouble innerRadius,GLdouble outerRadius,GLint slices,GLint loops)void APIENTRY <glu.h>
gluEndCurve(GLUnurbs * nobj)void APIENTRY <glu.h>
gluEndPolygon(GLUtesselator * tess)void APIENTRY <glu.h>
gluEndSurface(GLUnurbs * nobj)void APIENTRY <glu.h>
gluEndTrim(GLUnurbs * nobj)void APIENTRY <glu.h>
gluErrorString(GLenum errCode)const GLubyte<glu.h>
gluErrorUnicodeStringEXT(GLenum errCode)const wchar_t<glu.h>
gluGetNurbsProperty(GLUnurbs * nobj,GLenum property,GLfloat * value)void APIENTRY <glu.h>
gluGetString(GLenum name)const GLubyte<glu.h>
gluGetTessProperty(GLUtesselator * tess,GLenum which,GLdouble * value)void APIENTRY <glu.h>
gluLoadSamplingMatrices(GLUnurbs * nobj,const GLfloat modelMatrix[16],const GLfloat projMatrix[16],const GLint viewport[4])void APIENTRY <glu.h>
gluLookAt(GLdouble eyex,GLdouble eyey,GLdouble eyez,GLdouble centerx,GLdouble centery,GLdouble centerz,GLdouble upx,GLdouble upy,GLdouble upz)void APIENTRY <glu.h>
gluNewNurbsRenderer(void)GLUnurbs<glu.h>
gluNewQuadric(void)GLUquadric<glu.h>
gluNewTess(void)GLUtesselator<glu.h>
gluNextContour(GLUtesselator * tess,GLenum type)void APIENTRY <glu.h>
gluNurbsCallback()))))))))))))))))void APIENTRY <glu.h>
gluNurbsCurve(GLUnurbs * nobj,GLint nknots,GLfloat * knot,GLint stride,GLfloat * ctlarray,GLint order,GLenum type)void APIENTRY <glu.h>
GLUnurbsErrorProc(GLenum)typedef void<glu.h>
gluNurbsProperty(GLUnurbs * nobj,GLenum property,GLfloat value)void APIENTRY <glu.h>
gluNurbsSurface(GLUnurbs * nobj,GLint sknot_count,float * sknot,GLint tknot_count,GLfloat * tknot,GLint s_stride,GLint t_stride,GLfloat * ctlarray,GLint sorder,GLint torder,GLenum type)void APIENTRY <glu.h>
gluOrtho2D(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top)void APIENTRY <glu.h>
gluPartialDisk(GLUquadric * qobj,GLdouble innerRadius,GLdouble outerRadius,GLint slices,GLint loops,GLdouble startAngle,GLdouble sweepAngle)void APIENTRY <glu.h>
gluPerspective(GLdouble fovy,GLdouble aspect,GLdouble zNear,GLdouble zFar)void APIENTRY <glu.h>
gluPickMatrix(GLdouble x,GLdouble y,GLdouble width,GLdouble height,GLint viewport[4])void APIENTRY <glu.h>
gluProject(GLdouble objx,GLdouble objy,GLdouble objz,const GLdouble modelMatrix[16],const GLdouble projMatrix[16],const GLint viewport[4],GLdouble * winx,GLdouble * winy,GLdouble * winz)int APIENTRY <glu.h>
gluPwlCurve(GLUnurbs * nobj,GLint count,GLfloat * array,GLint stride,GLenum type)void APIENTRY <glu.h>
gluQuadricCallback()))))))))))))))))void APIENTRY <glu.h>
gluQuadricDrawStyle(GLUquadric * quadObject,GLenum drawStyle)void APIENTRY <glu.h>
GLUquadricErrorProc(GLenum)typedef void<glu.h>
gluQuadricNormals(GLUquadric * quadObject,GLenum normals)void APIENTRY <glu.h>
gluQuadricOrientation(GLUquadric * quadObject,GLenum orientation)void APIENTRY <glu.h>
gluQuadricTexture(GLUquadric * quadObject,GLboolean textureCoords)void APIENTRY <glu.h>
gluScaleImage(GLenum format,GLint widthin,GLint heightin,GLenum typein,const void * datain,GLint widthout,GLint heightout,GLenum typeout,void * dataout)int APIENTRY <glu.h>
gluSphere(GLUquadric * qobj,GLdouble radius,GLint slices,GLint stacks)void APIENTRY <glu.h>
gluTessBeginContour(GLUtesselator * tess)void APIENTRY <glu.h>
GLUtessBeginDataProc(GLenum,void *)typedef void<glu.h>
gluTessBeginPolygon(GLUtesselator * tess,void * polygon_data)void APIENTRY <glu.h>
GLUtessBeginProc(GLenum)typedef void<glu.h>
gluTessCallback()))))))))))))))))void APIENTRY <glu.h>
GLUtessCombineDataProc(GLdouble[3],void * [4],GLfloat[4],void **,void *)typedef void<glu.h>
GLUtessCombineProc(GLdouble[3],void * [4],GLfloat[4],void **)typedef void<glu.h>
GLUtessEdgeFlagDataProc(GLboolean,void *)typedef void<glu.h>
GLUtessEdgeFlagProc(GLboolean)typedef void<glu.h>
gluTessEndContour(GLUtesselator * tess)void APIENTRY <glu.h>
GLUtessEndDataProc(void *)typedef void<glu.h>
gluTessEndPolygon(GLUtesselator * tess)void APIENTRY <glu.h>
GLUtessEndProc(void)typedef void<glu.h>
GLUtessErrorDataProc(GLenum,void *)typedef void<glu.h>
GLUtessErrorProc(GLenum)typedef void<glu.h>
gluTessNormal(GLUtesselator * tess,GLdouble x,GLdouble y,GLdouble z)void APIENTRY <glu.h>
gluTessProperty(GLUtesselator * tess,GLenum which,GLdouble value)void APIENTRY <glu.h>
gluTessVertex(GLUtesselator * tess,GLdouble coords[3],void * data)void APIENTRY <glu.h>
GLUtessVertexDataProc(void *,void *)typedef void<glu.h>
GLUtessVertexProc(void *)typedef void<glu.h>
gluUnProject(GLdouble winx,GLdouble winy,GLdouble winz,const GLdouble modelMatrix[16],const GLdouble projMatrix[16],const GLint viewport[4],GLdouble * objx,GLdouble * objy,GLdouble * objz)int APIENTRY <glu.h>
glVertex2d(GLdouble x,GLdouble y)WINGDIAPI void APIENTRY <gl.h>
glVertex2dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glVertex2f(GLfloat x,GLfloat y)WINGDIAPI void APIENTRY <gl.h>
glVertex2fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glVertex2i(GLint x,GLint y)WINGDIAPI void APIENTRY <gl.h>
glVertex2iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glVertex2s(GLshort x,GLshort y)WINGDIAPI void APIENTRY <gl.h>
glVertex2sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glVertex3d(GLdouble x,GLdouble y,GLdouble z)WINGDIAPI void APIENTRY <gl.h>
glVertex3dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glVertex3f(GLfloat x,GLfloat y,GLfloat z)WINGDIAPI void APIENTRY <gl.h>
glVertex3fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glVertex3i(GLint x,GLint y,GLint z)WINGDIAPI void APIENTRY <gl.h>
glVertex3iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glVertex3s(GLshort x,GLshort y,GLshort z)WINGDIAPI void APIENTRY <gl.h>
glVertex3sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glVertex4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w)WINGDIAPI void APIENTRY <gl.h>
glVertex4dv(const GLdouble * v)WINGDIAPI void APIENTRY <gl.h>
glVertex4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w)WINGDIAPI void APIENTRY <gl.h>
glVertex4fv(const GLfloat * v)WINGDIAPI void APIENTRY <gl.h>
glVertex4i(GLint x,GLint y,GLint z,GLint w)WINGDIAPI void APIENTRY <gl.h>
glVertex4iv(const GLint * v)WINGDIAPI void APIENTRY <gl.h>
glVertex4s(GLshort x,GLshort y,GLshort z,GLshort w)WINGDIAPI void APIENTRY <gl.h>
glVertex4sv(const GLshort * v)WINGDIAPI void APIENTRY <gl.h>
glVertexPointer(GLint size,GLenum type,GLsizei stride,const GLvoid * pointer)WINGDIAPI void APIENTRY <gl.h>
glViewport(GLint x,GLint y,GLsizei width,GLsizei height)GLAPI void APIENTRY <glcorearb.h>
GopherCreateLocator(LPCSTR lpszHost,INTERNET_PORT nServerPort,LPCSTR lpszDisplayString,LPCSTR lpszSelectorString,DWORD dwGopherType,LPSTR lpszLocator,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
GopherCreateLocatorA(LPCSTR lpszHost,INTERNET_PORT nServerPort,LPCSTR lpszDisplayString,LPCSTR lpszSelectorString,DWORD dwGopherType,LPSTR lpszLocator,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
GopherCreateLocatorW(LPCWSTR lpszHost,INTERNET_PORT nServerPort,LPCWSTR lpszDisplayString,LPCWSTR lpszSelectorString,DWORD dwGopherType,LPWSTR lpszLocator,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
GopherFindFirstFile(HINTERNET hConnect,LPCSTR lpszLocator,LPCSTR lpszSearchString,LPGOPHER_FIND_DATAA lpFindData,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
GopherFindFirstFileA(HINTERNET hConnect,LPCSTR lpszLocator,LPCSTR lpszSearchString,LPGOPHER_FIND_DATAA lpFindData,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
GopherFindFirstFileW(HINTERNET hConnect,LPCWSTR lpszLocator,LPCWSTR lpszSearchString,LPGOPHER_FIND_DATAW lpFindData,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
GopherGetAttribute(HINTERNET hConnect,LPCSTR lpszLocator,LPCSTR lpszAttributeName,LPBYTE lpBuffer,DWORD dwBufferLength,LPDWORD lpdwCharactersReturned,GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator,DWORD_PTR dwContext) BOOLAPI <wininet.h>
GopherGetAttributeA(HINTERNET hConnect,LPCSTR lpszLocator,LPCSTR lpszAttributeName,LPBYTE lpBuffer,DWORD dwBufferLength,LPDWORD lpdwCharactersReturned,GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator,DWORD_PTR dwContext) BOOLAPI <wininet.h>
GopherGetAttributeW(HINTERNET hConnect,LPCWSTR lpszLocator,LPCWSTR lpszAttributeName,LPBYTE lpBuffer,DWORD dwBufferLength,LPDWORD lpdwCharactersReturned,GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator,DWORD_PTR dwContext) BOOLAPI <wininet.h>
GopherGetLocatorType(LPCSTR lpszLocator,LPDWORD lpdwGopherType) BOOLAPI <wininet.h>
GopherGetLocatorTypeA(LPCSTR lpszLocator,LPDWORD lpdwGopherType) BOOLAPI <wininet.h>
GopherGetLocatorTypeW(LPCWSTR lpszLocator,LPDWORD lpdwGopherType) BOOLAPI <wininet.h>
GopherOpenFile(HINTERNET hConnect,LPCSTR lpszLocator,LPCSTR lpszView,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
GopherOpenFileA(HINTERNET hConnect,LPCSTR lpszLocator,LPCSTR lpszView,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
GopherOpenFileW(HINTERNET hConnect,LPCWSTR lpszLocator,LPCWSTR lpszView,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
GoUp(void)virtual HRESULT WINAPI <strmif.h>
GradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode) WINGDIAPI WINBOOL WINAPI <wingdi.h>
GradientStop(FLOAT position,const D2D1_COLOR_F & color)D2D1FORCEINLINE D2D1_GRADIENT_STOP <d2d1helper.h>
GrantAccessRights(PACTRL_ACCESSW pAccessList)virtual HRESULT WINAPI <iaccess.h>
GrantAuditRights(PACTRL_AUDITW pAuditList)virtual HRESULT WINAPI <iaccess.h>
Graphics()	~<gdiplusgraphics.h>
Graphics(CachedBitmap * cb,INT x,INT y)	Status DrawCachedBitmap<gdiplusgraphics.h>
Graphics(Color * color)	Status GetNearestColor<gdiplusgraphics.h>
Graphics(CompositingMode compositingMode)	Status SetCompositingMode<gdiplusgraphics.h>
Graphics(CompositingQuality compositingQuality)	Status SetCompositingQuality<gdiplusgraphics.h>
Graphics(const Brush * brush,const GraphicsPath * path)	Status FillPath<gdiplusgraphics.h>
Graphics(const Brush * brush,const Point * points,INT count)	Status FillPolygon<gdiplusgraphics.h>
Graphics(const Brush * brush,const Point * points,INT count,FillMode fillMode)	Status FillPolygon<gdiplusgraphics.h>
Graphics(const Brush * brush,const Point * points,INT count,FillMode fillMode,REAL tension=0.5f)	Status FillClosedCurve<gdiplusgraphics.h>
Graphics(const Brush * brush,const PointF * points,INT count)	Status FillPolygon<gdiplusgraphics.h>
Graphics(const Brush * brush,const PointF * points,INT count,FillMode fillMode)	Status FillPolygon<gdiplusgraphics.h>
Graphics(const Brush * brush,const PointF * points,INT count,FillMode fillMode,REAL tension=0.5f)	Status FillClosedCurve<gdiplusgraphics.h>
Graphics(const Brush * brush,const Rect & rect)	Status FillRectangle<gdiplusgraphics.h>
Graphics(const Brush * brush,const Rect & rect,REAL startAngle,REAL sweepAngle)	Status FillPie<gdiplusgraphics.h>
Graphics(const Brush * brush,const Rect * rects,INT count)	Status FillRectangles<gdiplusgraphics.h>
Graphics(const Brush * brush,const RectF & rect)	Status FillRectangle<gdiplusgraphics.h>
Graphics(const Brush * brush,const RectF & rect,REAL startAngle,REAL sweepAngle)	Status FillPie<gdiplusgraphics.h>
Graphics(const Brush * brush,const RectF * rects,INT count)	Status FillRectangles<gdiplusgraphics.h>
Graphics(const Brush * brush,const Region * region)	Status FillRegion<gdiplusgraphics.h>
Graphics(const Brush * brush,INT x,INT y,INT width,INT height)	Status FillRectangle<gdiplusgraphics.h>
Graphics(const Brush * brush,INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status FillPie<gdiplusgraphics.h>
Graphics(const Brush * brush,REAL x,REAL y,REAL width,REAL height)	Status FillRectangle<gdiplusgraphics.h>
Graphics(const Brush * brush,REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status FillPie<gdiplusgraphics.h>
Graphics(const BYTE * data,UINT sizeData)	Status AddMetafileComment<gdiplusgraphics.h>
Graphics(const Color & color)	Status Clear<gdiplusgraphics.h>
Graphics(const Graphics &)	<gdiplusgraphics.h>
Graphics(const Graphics * g,CombineMode combineMode=CombineModeReplace)	Status SetClip<gdiplusgraphics.h>
Graphics(const GraphicsPath * path,CombineMode combineMode=CombineModeReplace)	Status SetClip<gdiplusgraphics.h>
Graphics(const Matrix * matrix)	Status SetTransform<gdiplusgraphics.h>
Graphics(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status MultiplyTransform<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const Point & destPoint,const Rect & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const Point & destPoint,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const Point * destPoints,INT count,const Rect & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const Point * destPoints,INT count,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const PointF & destPoint,const RectF & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const PointF & destPoint,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const PointF * destPoints,INT count,const RectF & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const PointF * destPoints,INT count,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const Rect & destRect,const Rect & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const Rect & destRect,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const RectF & destRect,const RectF & srcRect,Unit srcUnit,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Metafile * metafile,const RectF & destRect,EnumerateMetafileProc callback,VOID * callbackData=NULL,ImageAttributes * imageAttributes=NULL)	Status EnumerateMetafile<gdiplusgraphics.h>
Graphics(const Pen * pen,const GraphicsPath * path)	Status DrawPath<gdiplusgraphics.h>
Graphics(const Pen * pen,const Point & pt1,const Point & pt2)	Status DrawLine<gdiplusgraphics.h>
Graphics(const Pen * pen,const Point & pt1,const Point & pt2,const Point & pt3,const Point & pt4)	Status DrawBezier<gdiplusgraphics.h>
Graphics(const Pen * pen,const Point * points,INT count)	Status DrawPolygon<gdiplusgraphics.h>
Graphics(const Pen * pen,const Point * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status DrawCurve<gdiplusgraphics.h>
Graphics(const Pen * pen,const Point * points,INT count,REAL tension)	Status DrawCurve<gdiplusgraphics.h>
Graphics(const Pen * pen,const PointF & pt1,const PointF & pt2)	Status DrawLine<gdiplusgraphics.h>
Graphics(const Pen * pen,const PointF & pt1,const PointF & pt2,const PointF & pt3,const PointF & pt4)	Status DrawBezier<gdiplusgraphics.h>
Graphics(const Pen * pen,const PointF * points,INT count)	Status DrawPolygon<gdiplusgraphics.h>
Graphics(const Pen * pen,const PointF * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status DrawCurve<gdiplusgraphics.h>
Graphics(const Pen * pen,const PointF * points,INT count,REAL tension)	Status DrawCurve<gdiplusgraphics.h>
Graphics(const Pen * pen,const Rect & rect)	Status DrawRectangle<gdiplusgraphics.h>
Graphics(const Pen * pen,const Rect & rect,REAL startAngle,REAL sweepAngle)	Status DrawPie<gdiplusgraphics.h>
Graphics(const Pen * pen,const Rect * rects,INT count)	Status DrawRectangles<gdiplusgraphics.h>
Graphics(const Pen * pen,const RectF & rect)	Status DrawRectangle<gdiplusgraphics.h>
Graphics(const Pen * pen,const RectF & rect,REAL startAngle,REAL sweepAngle)	Status DrawPie<gdiplusgraphics.h>
Graphics(const Pen * pen,const RectF * rects,INT count)	Status DrawRectangles<gdiplusgraphics.h>
Graphics(const Pen * pen,INT x,INT y,INT width,INT height)	Status DrawRectangle<gdiplusgraphics.h>
Graphics(const Pen * pen,INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status DrawPie<gdiplusgraphics.h>
Graphics(const Pen * pen,INT x1,INT y1,INT x2,INT y2)	Status DrawLine<gdiplusgraphics.h>
Graphics(const Pen * pen,INT x1,INT y1,INT x2,INT y2,INT x3,INT y3,INT x4,INT y4)	Status DrawBezier<gdiplusgraphics.h>
Graphics(const Pen * pen,REAL x,REAL y,REAL width,REAL height)	Status DrawRectangle<gdiplusgraphics.h>
Graphics(const Pen * pen,REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status DrawPie<gdiplusgraphics.h>
Graphics(const Pen * pen,REAL x1,REAL y1,REAL x2,REAL y2)	Status DrawLine<gdiplusgraphics.h>
Graphics(const Pen * pen,REAL x1,REAL y1,REAL x2,REAL y2,REAL x3,REAL y3,REAL x4,REAL y4)	Status DrawBezier<gdiplusgraphics.h>
Graphics(const Point & point)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(const PointF & point)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(const Rect & dstrect,const Rect & srcrect,Unit unit)	Container BeginContainer<gdiplusgraphics.h>
Graphics(const Rect & rect)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(const Rect & rect,CombineMode combineMode=CombineModeReplace)	Status SetClip<gdiplusgraphics.h>
Graphics(const RectF & dstrect,const RectF & srcrect,Unit unit)	Container BeginContainer<gdiplusgraphics.h>
Graphics(const RectF & rect)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(const RectF & rect,CombineMode combineMode=CombineModeReplace)	Status SetClip<gdiplusgraphics.h>
Graphics(const Region * region)	Status IntersectClip<gdiplusgraphics.h>
Graphics(const Region * region,CombineMode combineMode=CombineModeReplace)	Status SetClip<gdiplusgraphics.h>
Graphics(const UINT16 * text,INT length,const Font * font,const Brush * brush,const PointF * positions,INT flags,const Matrix * matrix)	Status DrawDriverString<gdiplusgraphics.h>
Graphics(const UINT16 * text,INT length,const Font * font,const PointF * positions,INT flags,const Matrix * matrix,RectF * boundingBox)	Status MeasureDriverString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const PointF & origin,const Brush * brush)	Status DrawString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const PointF & origin,const StringFormat * stringFormat,const Brush * brush)	Status DrawString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const PointF & origin,const StringFormat * stringFormat,RectF * boundingBox)	Status MeasureString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const PointF & origin,RectF * boundingBox)	Status MeasureString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,const StringFormat * stringFormat,const Brush * brush)	Status DrawString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,const StringFormat * stringFormat,INT regionCount,Region * regions)	Status MeasureCharacterRanges<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,const StringFormat * stringFormat,RectF * boundingBox,INT * codepointsFitted=NULL,INT * linesFitted=NULL)	Status MeasureString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,RectF * boundingBox)	Status MeasureString<gdiplusgraphics.h>
Graphics(const WCHAR * string,INT length,const Font * font,const SizeF & layoutRectSize,const StringFormat * stringFormat,SizeF * size,INT * codepointsFitted=NULL,INT * linesFitted=NULL)	Status MeasureString<gdiplusgraphics.h>
Graphics(CoordinateSpace destSpace,CoordinateSpace srcSpace,Point * pts,INT count)	Status TransformPoints<gdiplusgraphics.h>
Graphics(CoordinateSpace destSpace,CoordinateSpace srcSpace,PointF * pts,INT count)	Status TransformPoints<gdiplusgraphics.h>
Graphics(FlushIntention intention=FlushIntentionFlush)	VOID Flush<gdiplusgraphics.h>
Graphics(GraphicsContainer state)	Status EndContainer<gdiplusgraphics.h>
Graphics(GraphicsState state)	Status Restore<gdiplusgraphics.h>
Graphics(HDC hdc)	VOID ReleaseHDC<gdiplusgraphics.h>
Graphics(HDC hdc,HANDLE hdevice)	<gdiplusgraphics.h>
Graphics(HRGN hRgn,CombineMode combineMode=CombineModeReplace)	Status SetClip<gdiplusgraphics.h>
Graphics(HWND hwnd,BOOL icm=FALSE)	<gdiplusgraphics.h>
Graphics(Image * image)	<gdiplusgraphics.h>
Graphics(Image * image,const Point & point)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const Point * destPoints,INT count)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const Point * destPoints,INT count,INT srcx,INT srcy,INT srcwidth,INT srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const PointF & point)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const PointF * destPoints,INT count)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const PointF * destPoints,INT count,REAL srcx,REAL srcy,REAL srcwidth,REAL srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const Rect & destRect,INT srcx,INT srcy,INT srcwidth,INT srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const Rect & rect)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const RectF & destRect,const RectF & sourceRect,Unit srcUnit,const ImageAttributes * imageAttributes=NULL)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const RectF & destRect,REAL srcx,REAL srcy,REAL srcwidth,REAL srcheight,Unit srcUnit,const ImageAttributes * imageAttributes=NULL,DrawImageAbort callback=NULL,VOID * callbackData=NULL)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,const RectF & rect)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,INT x,INT y)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,INT x,INT y,INT srcx,INT srcy,INT srcwidth,INT srcheight,Unit srcUnit)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,INT x,INT y,INT width,INT height)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,REAL x,REAL y)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,REAL x,REAL y,REAL srcx,REAL srcy,REAL srcwidth,REAL srcheight,Unit srcUnit)	Status DrawImage<gdiplusgraphics.h>
Graphics(Image * image,REAL x,REAL y,REAL width,REAL height)	Status DrawImage<gdiplusgraphics.h>
Graphics(INT * x,INT * y)	Status GetRenderingOrigin<gdiplusgraphics.h>
Graphics(INT dx,INT dy)	Status TranslateClip<gdiplusgraphics.h>
Graphics(INT x,INT y)	Status SetRenderingOrigin<gdiplusgraphics.h>
Graphics(INT x,INT y,INT width,INT height)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(InterpolationMode interpolationMode)	Status SetInterpolationMode<gdiplusgraphics.h>
Graphics(Matrix * matrix)	Status GetTransform<gdiplusgraphics.h>
Graphics(PixelOffsetMode pixelOffsetMode)	Status SetPixelOffsetMode<gdiplusgraphics.h>
Graphics(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status RotateTransform<gdiplusgraphics.h>
Graphics(REAL dx,REAL dy)	Status TranslateClip<gdiplusgraphics.h>
Graphics(REAL dx,REAL dy,MatrixOrder order=MatrixOrderPrepend)	Status TranslateTransform<gdiplusgraphics.h>
Graphics(REAL scale)	Status SetPageScale<gdiplusgraphics.h>
Graphics(REAL sx,REAL sy,MatrixOrder order=MatrixOrderPrepend)	Status ScaleTransform<gdiplusgraphics.h>
Graphics(REAL x,REAL y)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(REAL x,REAL y,REAL width,REAL height)	BOOL IsVisible<gdiplusgraphics.h>
Graphics(Rect * rect)	Status GetVisibleClipBounds<gdiplusgraphics.h>
Graphics(RectF * rect)	Status GetVisibleClipBounds<gdiplusgraphics.h>
Graphics(Region * region)	Status GetClip<gdiplusgraphics.h>
Graphics(SmoothingMode smoothingMode)	Status SetSmoothingMode<gdiplusgraphics.h>
Graphics(Status newStatus)	Status updateStatus<gdiplusgraphics.h>
Graphics(TextRenderingHint textRenderingHint)	Status SetTextRenderingHint<gdiplusgraphics.h>
Graphics(UINT contrast)	Status SetTextContrast<gdiplusgraphics.h>
Graphics(Unit unit)	Status SetPageUnit<gdiplusgraphics.h>
GraphicsPath()	~<gdipluspath.h>
GraphicsPath(BYTE * types,INT count)	Status GetPathTypes<gdipluspath.h>
GraphicsPath(const GraphicsPath &)	<gdipluspath.h>
GraphicsPath(const GraphicsPath * addingPath,BOOL connect)	Status AddPath<gdipluspath.h>
GraphicsPath(const Matrix * matrix)	Status Transform<gdipluspath.h>
GraphicsPath(const Matrix * matrix=NULL,REAL flatness=FlatnessDefault)	Status Outline<gdipluspath.h>
GraphicsPath(const Pen * pen,const Matrix * matrix=NULL,REAL flatness=FlatnessDefault)	Status Widen<gdipluspath.h>
GraphicsPath(const Point & point,const Graphics * g)__inline__ BOOL ::IsVisible<gdipluspath.h>
GraphicsPath(const Point & point,const Graphics * g=NULL)	BOOL IsVisible<gdipluspath.h>
GraphicsPath(const Point & point,const Pen * pen,const Graphics * g)__inline__ BOOL ::IsOutlineVisible<gdipluspath.h>
GraphicsPath(const Point & point,const Pen * pen,const Graphics * g=NULL)	BOOL IsOutlineVisible<gdipluspath.h>
GraphicsPath(const Point & pt1,const Point & pt2)	Status AddLine<gdipluspath.h>
GraphicsPath(const Point & pt1,const Point & pt2,const Point & pt3,const Point & pt4)	Status AddBezier<gdipluspath.h>
GraphicsPath(const Point * points,const BYTE * types,INT count,FillMode fillMode=FillModeAlternate)	<gdipluspath.h>
GraphicsPath(const Point * points,INT count)	Status AddPolygon<gdipluspath.h>
GraphicsPath(const Point * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status AddCurve<gdipluspath.h>
GraphicsPath(const Point * points,INT count,REAL tension)	Status AddCurve<gdipluspath.h>
GraphicsPath(const PointF & point,const Graphics * g)__inline__ BOOL ::IsVisible<gdipluspath.h>
GraphicsPath(const PointF & point,const Graphics * g=NULL)	BOOL IsVisible<gdipluspath.h>
GraphicsPath(const PointF & point,const Pen * pen,const Graphics * g)__inline__ BOOL ::IsOutlineVisible<gdipluspath.h>
GraphicsPath(const PointF & point,const Pen * pen,const Graphics * g=NULL)	BOOL IsOutlineVisible<gdipluspath.h>
GraphicsPath(const PointF & pt1,const PointF & pt2)	Status AddLine<gdipluspath.h>
GraphicsPath(const PointF & pt1,const PointF & pt2,const PointF & pt3,const PointF & pt4)	Status AddBezier<gdipluspath.h>
GraphicsPath(const PointF * destPoints,INT count,const RectF & srcRect,const Matrix * matrix=NULL,WarpMode warpMode=WarpModePerspective,REAL flatness=FlatnessDefault)	Status Warp<gdipluspath.h>
GraphicsPath(const PointF * points,const BYTE * types,INT count,FillMode fillMode=FillModeAlternate)	<gdipluspath.h>
GraphicsPath(const PointF * points,INT count)	Status AddPolygon<gdipluspath.h>
GraphicsPath(const PointF * points,INT count,INT offset,INT numberOfSegments,REAL tension)	Status AddCurve<gdipluspath.h>
GraphicsPath(const PointF * points,INT count,REAL tension)	Status AddCurve<gdipluspath.h>
GraphicsPath(const Rect & rect)	Status AddRectangle<gdipluspath.h>
GraphicsPath(const Rect & rect,REAL startAngle,REAL sweepAngle)	Status AddPie<gdipluspath.h>
GraphicsPath(const Rect * rects,INT count)	Status AddRectangles<gdipluspath.h>
GraphicsPath(const RectF & rect)	Status AddRectangle<gdipluspath.h>
GraphicsPath(const RectF & rect,REAL startAngle,REAL sweepAngle)	Status AddPie<gdipluspath.h>
GraphicsPath(const RectF * rects,INT count)	Status AddRectangles<gdipluspath.h>
GraphicsPath(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const Point & origin,const StringFormat * format)	Status AddString<gdipluspath.h>
GraphicsPath(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const PointF & origin,const StringFormat * format)	Status AddString<gdipluspath.h>
GraphicsPath(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const Rect & layoutRect,const StringFormat * format)	Status AddString<gdipluspath.h>
GraphicsPath(const WCHAR * string,INT length,const FontFamily * family,INT style,REAL emSize,const RectF & layoutRect,const StringFormat * format)	Status AddString<gdipluspath.h>
GraphicsPath(FillMode fillMode)	Status SetFillMode<gdipluspath.h>
GraphicsPath(FillMode fillMode=FillModeAlternate)	<gdipluspath.h>
GraphicsPath(GpPath * path,Status status)	<gdipluspath.h>
GraphicsPath(INT x,INT y,const Graphics * g)__inline__ BOOL ::IsVisible<gdipluspath.h>
GraphicsPath(INT x,INT y,const Graphics * g=NULL)	BOOL IsVisible<gdipluspath.h>
GraphicsPath(INT x,INT y,const Pen * pen,const Graphics * g)__inline__ BOOL ::IsOutlineVisible<gdipluspath.h>
GraphicsPath(INT x,INT y,const Pen * pen,const Graphics * g=NULL)	BOOL IsOutlineVisible<gdipluspath.h>
GraphicsPath(INT x,INT y,INT width,INT height)	Status AddEllipse<gdipluspath.h>
GraphicsPath(INT x,INT y,INT width,INT height,REAL startAngle,REAL sweepAngle)	Status AddPie<gdipluspath.h>
GraphicsPath(INT x1,INT y1,INT x2,INT y2)	Status AddLine<gdipluspath.h>
GraphicsPath(INT x1,INT y1,INT x2,INT y2,INT x3,INT y3,INT x4,INT y4)	Status AddBezier<gdipluspath.h>
GraphicsPath(PathData * pathData)	Status GetPathData<gdipluspath.h>
GraphicsPath(Point * points,INT count)	Status GetPathPoints<gdipluspath.h>
GraphicsPath(PointF * lastPoint)	Status GetLastPoint<gdipluspath.h>
GraphicsPath(PointF * points,INT count)	Status GetPathPoints<gdipluspath.h>
GraphicsPath(REAL x,REAL y,const Graphics * g)__inline__ BOOL ::IsVisible<gdipluspath.h>
GraphicsPath(REAL x,REAL y,const Graphics * g=NULL)	BOOL IsVisible<gdipluspath.h>
GraphicsPath(REAL x,REAL y,const Pen * pen,const Graphics * g)__inline__ BOOL ::IsOutlineVisible<gdipluspath.h>
GraphicsPath(REAL x,REAL y,const Pen * pen,const Graphics * g=NULL)	BOOL IsOutlineVisible<gdipluspath.h>
GraphicsPath(REAL x,REAL y,REAL width,REAL height)	Status AddEllipse<gdipluspath.h>
GraphicsPath(REAL x,REAL y,REAL width,REAL height,REAL startAngle,REAL sweepAngle)	Status AddPie<gdipluspath.h>
GraphicsPath(REAL x1,REAL y1,REAL x2,REAL y2)	Status AddLine<gdipluspath.h>
GraphicsPath(REAL x1,REAL y1,REAL x2,REAL y2,REAL x3,REAL y3,REAL x4,REAL y4)	Status AddBezier<gdipluspath.h>
GraphicsPath(Rect * bounds,const Matrix * matrix=NULL,const Pen * pen=NULL)	Status GetBounds<gdipluspath.h>
GraphicsPath(RectF * bounds,const Matrix * matrix=NULL,const Pen * pen=NULL)	Status GetBounds<gdipluspath.h>
GraphicsPath(Status newStatus)	Status updateStatus<gdipluspath.h>
GraphicsPathIterator()	~<gdipluspath.h>
GraphicsPathIterator(BYTE * pathType,INT * startIndex,INT * endIndex)	INT NextPathType<gdipluspath.h>
GraphicsPathIterator(const GraphicsPathIterator &)	<gdipluspath.h>
GraphicsPathIterator(GpPathIterator * pathIterator,Status status)	<gdipluspath.h>
GraphicsPathIterator(GraphicsPath * path)	INT NextMarker<gdipluspath.h>
GraphicsPathIterator(GraphicsPath * path,BOOL * isClosed)	INT NextSubpath<gdipluspath.h>
GraphicsPathIterator(INT * startIndex,INT * endIndex)	INT NextMarker<gdipluspath.h>
GraphicsPathIterator(INT * startIndex,INT * endIndex,BOOL * isClosed)	INT NextSubpath<gdipluspath.h>
GraphicsPathIterator(PointF * points,BYTE * types,INT count)	INT Enumerate<gdipluspath.h>
GraphicsPathIterator(PointF * points,BYTE * types,INT startIndex,INT endIndex)	INT CopyData<gdipluspath.h>
GraphicsPathIterator(Status newStatus)	Status updateStatus<gdipluspath.h>
Gravity(POINTER_GRAVITY * pGravity)virtual HRESULT WINAPI <mshtmlc.h>
GrayString(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight) WINUSERAPI WINBOOL WINAPI <winuser.h>
GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight) WINUSERAPI WINBOOL WINAPI <winuser.h>
GrayStringW(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight) WINUSERAPI WINBOOL WINAPI <winuser.h>
Grow() WINBOOL <msputils.h>
GrowObjectHeap(HOBJECTHEAP hObjectHeap,DWORD nObjects) extern DWORD WINAPI <nmsupp.h>
Gspec_len(GuarFlowSpec)<lpmapi.h>
GSSamplers(D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT)BYTE <d3d10effect.h>
GSShaderResources(D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT)BYTE <d3d10effect.h>
H2I(p)<ioaccess.h>
HACCEL_16(h32)<wownt32.h>
HACCEL_32(h16)<wownt32.h>
HACCEL_UserFree(ULONG *,HACCEL *)void            __RPC_USER <shobjidl.h>
HACCEL_UserMarshal(ULONG *,unsigned char *,HACCEL *)unsigned char<shobjidl.h>
HACCEL_UserSize(ULONG *,ULONG,HACCEL *)ULONG           __RPC_USER <shobjidl.h>
HACCEL_UserUnmarshal(ULONG *,unsigned char *,HACCEL *)unsigned char<shobjidl.h>
HalAcquireDisplayOwnership(IN PHAL_RESET_DISPLAY_PARAMETERS ResetDisplayParameters)<ntddk.h>
HalAllocateAdapterChannel(IN PADAPTER_OBJECT AdapterObject,IN PWAIT_CONTEXT_BLOCK Wcb,IN ULONG NumberOfMapRegisters,IN PDRIVER_CONTROL ExecutionRoutine)<ntddk.h>
HalAllocateCommonBuffer(IN PADAPTER_OBJECT AdapterObject,IN ULONG Length,OUT PPHYSICAL_ADDRESS LogicalAddress,IN BOOLEAN CacheEnabled)<wdm.h>
HalAllocateCommonBuffer(IN PDMA_ADAPTER DmaAdapter,IN ULONG Length,OUT PPHYSICAL_ADDRESS LogicalAddress,IN BOOLEAN CacheEnabled)<wdm.h>
HalAllocateCrashDumpRegisters(IN PADAPTER_OBJECT AdapterObject,IN OUT PULONG NumberOfMapRegisters)<ntddk.h>
HalAllocateHardwareCounters(IN PGROUP_AFFINITY GroupAffinty,IN ULONG GroupCount,IN PPHYSICAL_COUNTER_RESOURCE_LIST ResourceList,OUT PHANDLE CounterSetHandle)<ntddk.h>
HalAssignSlotResources(IN PUNICODE_STRING RegistryPath,IN PUNICODE_STRING DriverClassName,IN PDRIVER_OBJECT DriverObject,IN PDEVICE_OBJECT DeviceObject,IN INTERFACE_TYPE BusType,IN ULONG BusNumber,IN ULONG SlotNumber,IN OUT PCM_RESOURCE_LIST * AllocatedResources)<ntddk.h>
HalBugCheckSystem(IN PWHEA_ERROR_RECORD ErrorRecord)<ntddk.h>
HalBugCheckSystem(IN PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource,IN PWHEA_ERROR_RECORD ErrorRecord)<ntddk.h>
HalExamineMBR(IN PDEVICE_OBJECT DeviceObject,IN ULONG SectorSize,IN ULONG MBRTypeIdentifier,OUT PVOID * Buffer)<ntddk.h>
HalFreeCommonBuffer(IN PADAPTER_OBJECT AdapterObject,IN ULONG Length,IN PHYSICAL_ADDRESS LogicalAddress,IN PVOID VirtualAddress,IN BOOLEAN CacheEnabled)<wdm.h>
HalFreeCommonBuffer(IN PDMA_ADAPTER DmaAdapter,IN ULONG Length,IN PHYSICAL_ADDRESS LogicalAddress,IN PVOID VirtualAddress,IN BOOLEAN CacheEnabled)<wdm.h>
HalFreeHardwareCounters(IN HANDLE CounterSetHandle)<ntddk.h>
HalGetAdapter(IN PDEVICE_DESCRIPTION DeviceDescription,OUT PULONG NumberOfMapRegisters)<ntddk.h>
HalGetBusData(IN BUS_DATA_TYPE BusDataType,IN ULONG BusNumber,IN ULONG SlotNumber,OUT PVOID Buffer,IN ULONG Length)<ntddk.h>
HalGetBusDataByOffset(IN BUS_DATA_TYPE BusDataType,IN ULONG BusNumber,IN ULONG SlotNumber,OUT PVOID Buffer,IN ULONG Offset,IN ULONG Length)<ntddk.h>
HalGetDmaAlignment(IN PDMA_ADAPTER DmaAdapter)<wdm.h>
HalGetDmaAlignmentRequirement()<ntifs.h>
HalGetDmaAlignmentRequirement(VOID)<ntifs.h>
HalGetInterruptVector(IN INTERFACE_TYPE InterfaceType,IN ULONG BusNumber,IN ULONG BusInterruptLevel,IN ULONG BusInterruptVector,OUT PKIRQL Irql,OUT PKAFFINITY Affinity)<ntddk.h>
HalGetScatterGatherList(IN PADAPTER_OBJECT DmaAdapter,IN PDEVICE_OBJECT DeviceObject,IN PMDL Mdl,IN PVOID CurrentVa,IN ULONG Length,IN PDRIVER_LIST_CONTROL ExecutionRoutine,IN PVOID Context,IN BOOLEAN WriteToDevice)<ntddk.h>
HalMakeBeep(IN ULONG Frequency)<ntddk.h>
HalPutDmaAdapter(IN PADAPTER_OBJECT DmaAdapter)<ntddk.h>
HalPutScatterGatherList(IN PADAPTER_OBJECT DmaAdapter,IN PSCATTER_GATHER_LIST ScatterGather,IN BOOLEAN WriteToDevice)<ntddk.h>
HalReadDmaCounter(IN PADAPTER_OBJECT AdapterObject)<wdm.h>
HalReadDmaCounter(IN PDMA_ADAPTER DmaAdapter)<wdm.h>
HalSetBusData(IN BUS_DATA_TYPE BusDataType,IN ULONG BusNumber,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Length)<ntddk.h>
HalSetBusDataByOffset(IN BUS_DATA_TYPE BusDataType,IN ULONG BusNumber,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Offset,IN ULONG Length)<ntddk.h>
HalTranslateBusAddress(IN INTERFACE_TYPE InterfaceType,IN ULONG BusNumber,IN PHYSICAL_ADDRESS BusAddress,IN OUT PULONG AddressSpace,OUT PPHYSICAL_ADDRESS TranslatedAddress)<ntddk.h>
Handle32ToHandle(const void * POINTER_32 h) static __inline void<basetsd.h>
Handle32ToHandle(h)<basetsd.h>
Handle64ToHandle(const void * POINTER_64 h) static __inline void<basetsd.h>
Handle64ToHandle(h)<basetsd.h>
HANDLE_MSG(hwnd,message,fn)<windowsx.h>
HANDLE_WM_ACTIVATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ACTIVATEAPP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ASKCBFORMATNAME(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CANCELMODE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CHANGECBCHAIN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CHAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CHARTOITEM(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CHILDACTIVATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CLEAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CLOSE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_COMMAND(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_COMMNOTIFY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_COMPACTING(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_COMPAREITEM(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CONTEXTMENU(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_COPY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_COPYDATA(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CREATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLOR(hwnd,wParam,lParam,fn)
HANDLE_WM_CTLCOLORBTN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLORDLG(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLOREDIT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLORLISTBOX(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLORMSGBOX(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLORSCROLLBAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CTLCOLORSTATIC(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_CUT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DEADCHAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DELETEITEM(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DESTROY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DESTROYCLIPBOARD(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DEVICECHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DEVMODECHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DISPLAYCHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DRAWCLIPBOARD(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DRAWITEM(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_DROPFILES(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ENABLE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ENDSESSION(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ENTERIDLE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ERASEBKGND(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_FONTCHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_GETDLGCODE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_GETFONT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_GETMINMAXINFO(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_GETTEXT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_GETTEXTLENGTH(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_HOTKEY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_HSCROLL(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_HSCROLLCLIPBOARD(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_ICONERASEBKGND(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_INITDIALOG(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_INITMENU(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_INITMENUPOPUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_KEYDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_KEYUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_KILLFOCUS(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_LBUTTONDBLCLK(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_LBUTTONDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_LBUTTONUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MBUTTONDBLCLK(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MBUTTONDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MBUTTONUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDIACTIVATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDICASCADE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDICREATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDIDESTROY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDIGETACTIVE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDIICONARRANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDIMAXIMIZE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDINEXT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDIRESTORE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDISETMENU(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MDITILE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MEASUREITEM(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MENUCHAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MENUSELECT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MOUSEACTIVATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MOUSEMOVE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MOUSEWHEEL(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_MOVE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCACTIVATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCCALCSIZE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCCREATE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCDESTROY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCHITTEST(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCLBUTTONDBLCLK(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCLBUTTONDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCLBUTTONUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCMBUTTONDBLCLK(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCMBUTTONDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCMBUTTONUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCMOUSEMOVE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCPAINT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCRBUTTONDBLCLK(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCRBUTTONDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NCRBUTTONUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NEXTDLGCTL(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_NOTIFY(hwnd,wParam,lParam,fn)<commctrl.h>
HANDLE_WM_PAINT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_PAINTCLIPBOARD(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_PALETTECHANGED(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_PALETTEISCHANGING(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_PARENTNOTIFY(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_PASTE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_POWER(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_QUERYDRAGICON(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_QUERYENDSESSION(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_QUERYNEWPALETTE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_QUERYOPEN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_QUEUESYNC(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_QUIT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_RBUTTONDBLCLK(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_RBUTTONDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_RBUTTONUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_RENDERALLFORMATS(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_RENDERFORMAT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SETCURSOR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SETFOCUS(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SETFONT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SETREDRAW(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SETTEXT(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SHOWWINDOW(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SIZE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SIZECLIPBOARD(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SPOOLERSTATUS(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSCHAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSCOLORCHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSCOMMAND(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSDEADCHAR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSKEYDOWN(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSKEYUP(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_SYSTEMERROR(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_TIMECHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_TIMER(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_UNDO(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_VKEYTOITEM(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_VSCROLL(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_VSCROLLCLIPBOARD(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_WINDOWPOSCHANGED(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_WINDOWPOSCHANGING(hwnd,wParam,lParam,fn)<windowsx.h>
HANDLE_WM_WININICHANGE(hwnd,wParam,lParam,fn)<windowsx.h>
HandleCheckLuStatus(LONG lRecoverySeqNum)virtual HRESULT WINAPI <txdtc.h>
HandleConfirmationFromOurXln(DTCLUXLNCONFIRMATION Confirmation)virtual HRESULT WINAPI <txdtc.h>
HandleConfirmationOfOurCompareStates(DTCLUCOMPARESTATESCONFIRMATION Confirmation)virtual HRESULT WINAPI <txdtc.h>
HandleConfirmationOfOurXln(DTCLUXLNCONFIRMATION Confirmation)virtual HRESULT WINAPI <txdtc.h>
HandleErrorFromOurCompareStates(DTCLUCOMPARESTATESERROR Error)virtual HRESULT WINAPI <txdtc.h>
HandleErrorFromOurXln(DTCLUXLNERROR Error)virtual HRESULT WINAPI <txdtc.h>
HandleGraphEvent(MSPSTREAMCONTEXT * pContext) virtual VOID <mspcall.h>
HandleLogFull(HANDLE hLog)WINBOOL WINAPI <clfsmgmtw32.h>
HandleMessage(UINT * pmsg,WPARAM * pwparam,LPARAM * plparam,LRESULT * plres)virtual HRESULT WINAPI <tom.h>
HandleSinkEvent(MSPEVENTITEM * pEventItem) HRESULT <mspstrm.h>
HandleStreamEvent(MSPEVENTITEM * EventItem) HRESULT <mspcall.h>
HandleTheirCompareStates(unsigned char * pRemoteTransId,DWORD cbRemoteTransId,DTCLUCOMPARESTATE CompareState,DTCLUCOMPARESTATESRESPONSE * pResponse,DTCLUCOMPARESTATE * pCompareState)virtual HRESULT WINAPI <txdtc.h>
HandleTheirCompareStatesResponse(DTCLUCOMPARESTATE CompareState,DTCLUCOMPARESTATESCONFIRMATION * pConfirmation)virtual HRESULT WINAPI <txdtc.h>
HandleTheirXln(LONG lRecoverySeqNum,DTCLUXLN Xln,unsigned char * pRemoteLogName,DWORD cbRemoteLogName,unsigned char * pOurLogName,DWORD cbOurLogName,DWORD dwProtocol,DTCLUXLNRESPONSE * pResponse)virtual HRESULT WINAPI <txdtc.h>
HandleTheirXlnResponse(DTCLUXLN Xln,unsigned char * pRemoteLogName,DWORD cbRemoteLogName,DWORD dwProtocol,DTCLUXLNCONFIRMATION * pConfirmation)virtual HRESULT WINAPI <txdtc.h>
HandleToHandle32(h)<basetsd.h>
HandleToHandle64(const void * h) static __inline void<basetsd.h>
HandleToHandle64(h)<basetsd.h>
HandleToLong(const void * h) static __inline __LONG32 <basetsd.h>
HandleToLong(h)<basetsd.h>
HandleToULong(const void * h) static __inline unsigned __LONG32 <basetsd.h>
HandleToUlong(h)<basetsd.h>
HandleToULong(h)<basetsd.h>
HandleTSPData(BYTE * pData,DWORD dwSize) virtual HRESULT <mspstrm.h>
HandoffDirect(BSTR pApplicationName)virtual HRESULT WINAPI <tapi3if.h>
HandoffIndirect(__LONG32 lMediaType)virtual HRESULT WINAPI <tapi3if.h>
HangUp(void)virtual HRESULT WINAPI <iedial.h>
HAS_POINTER_CONFIDENCE_WPARAM(wParam)<winuser.h>
HasCurve()	BOOL <gdipluspath.h>
HasFlowLayout(IHTMLElement * pIElement,WINBOOL * pfHasFlowLayout)virtual HRESULT WINAPI <mshtmlc.h>
Hash(HCHAPTER hReserved,DBBKMARK cBookmarks,const DBBKMARK rgcbBookmarks[],const BYTE * rgpBookmarks[],DBHASHVALUE rgHashedValues[],DBROWSTATUS rgBookmarkStatus[])virtual HRESULT WINAPI <winnt.h>
HASH_ENTRY_KEY(x)<ntddk.h>
HashData(LPBYTE pbData,DWORD cbData,LPBYTE pbHash,DWORD cbHash) LWSTDAPI <shlwapi.h>
HasOtherClients(__LONG32 * plNumOtherClients)virtual HRESULT WINAPI <agtsvr.h>
HasOverlappedIoCompleted(lpOverlapped)<winbase.h>
HatchBrush()	HatchStyle GetHatchStyle<gdiplusbrush.h>
HatchBrush()))))))))))))))))	<gdiplusbrush.h>
HatchBrush(Color * color)	Status GetForegroundColor<gdiplusbrush.h>
HatchBrush(const HatchBrush & brush)	<gdiplusbrush.h>
HatchBrush(const HatchBrush &)	<gdiplusbrush.h>
HatchBrush(GpBrush * brush,Status status)	<gdiplusbrush.h>
HBITMAP_16(h32)<wownt32.h>
HBITMAP_32(h16)<wownt32.h>
HBITMAP_UserFree(ULONG *,HBITMAP *)void            __RPC_USER <wincodec.h>
HBITMAP_UserMarshal(ULONG *,unsigned char *,HBITMAP *)unsigned char<wincodec.h>
HBITMAP_UserSize(ULONG *,ULONG,HBITMAP *)ULONG           __RPC_USER <wincodec.h>
HBITMAP_UserUnmarshal(ULONG *,unsigned char *,HBITMAP *)unsigned char<wincodec.h>
HBRUSH_16(h32)<wownt32.h>
HBRUSH_32(h16)<wownt32.h>
HDC_16(h32)<wownt32.h>
HDC_32(h16)<wownt32.h>
HDC_UserFree(ULONG *,HDC *)void            __RPC_USER <oleidl.h>
HDC_UserMarshal(ULONG *,unsigned char *,HDC *)unsigned char<oleidl.h>
HDC_UserSize(ULONG *,ULONG,HDC *)ULONG           __RPC_USER <oleidl.h>
HDC_UserUnmarshal(ULONG *,unsigned char *,HDC *)unsigned char<oleidl.h>
HDROP_16(h32)<wownt32.h>
HDROP_32(h16)<wownt32.h>
HDWP_16(h32)<wownt32.h>
HDWP_32(h16)<wownt32.h>
Header_ClearAllFilters(hwnd)<commctrl.h>
Header_ClearFilter(hwnd,i)<commctrl.h>
Header_CreateDragImage(hwnd,i)<commctrl.h>
Header_DeleteItem(hwndHD,i)<commctrl.h>
Header_EditFilter(hwnd,i,fDiscardChanges)<commctrl.h>
Header_GetBitmapMargin(hwnd)<commctrl.h>
Header_GetFocusedItem(hwnd)<commctrl.h>
Header_GetImageList(hwnd)<commctrl.h>
Header_GetItem(hwndHD,i,phdi)<commctrl.h>
Header_GetItemCount(hwndHD)<commctrl.h>
Header_GetItemDropDownRect(hwnd, iItem, lprc)<commctrl.h>
Header_GetItemRect(hwnd,iItem,lprc)<commctrl.h>
Header_GetOrderArray(hwnd,iCount,lpi)<commctrl.h>
Header_GetOverflowRect(hwnd, lprc)<commctrl.h>
Header_GetUnicodeFormat(hwnd)<commctrl.h>
Header_InsertItem(hwndHD,i,phdi)<commctrl.h>
Header_Layout(hwndHD,playout)<commctrl.h>
Header_OrderToIndex(hwnd,i)<commctrl.h>
Header_SetBitmapMargin(hwnd,iWidth)<commctrl.h>
Header_SetFilterChangeTimeout(hwnd,i)<commctrl.h>
Header_SetFocusedItem(hwnd, iItem)<commctrl.h>
Header_SetHotDivider(hwnd,fPos,dw)<commctrl.h>
Header_SetImageList(hwnd,himl)<commctrl.h>
Header_SetItem(hwndHD,i,phdi)<commctrl.h>
Header_SetOrderArray(hwnd,iCount,lpi)<commctrl.h>
Header_SetUnicodeFormat(hwnd,fUnicode)<commctrl.h>
Heap32First(LPHEAPENTRY32 lphe,DWORD th32ProcessID,ULONG_PTR th32HeapID) WINBOOL WINAPI <tlhelp32.h>
Heap32ListFirst(HANDLE hSnapshot,LPHEAPLIST32 lphl) WINBOOL WINAPI <tlhelp32.h>
Heap32ListNext(HANDLE hSnapshot,LPHEAPLIST32 lphl) WINBOOL WINAPI <tlhelp32.h>
Heap32Next(LPHEAPENTRY32 lphe) WINBOOL WINAPI <tlhelp32.h>
HEAP_MAKE_TAG_FLAGS(b,o)<winnt.h>
HeapAlloc(HANDLE hHeap,DWORD dwFlags,SIZE_T dwBytes) WINBASEAPI LPVOID WINAPI <heapapi.h>
HeapCompact(HANDLE hHeap,DWORD dwFlags) WINBASEAPI SIZE_T WINAPI <heapapi.h>
HeapCreate(DWORD flOptions,SIZE_T dwInitialSize,SIZE_T dwMaximumSize) WINBASEAPI HANDLE WINAPI <heapapi.h>
HeapDestroy(HANDLE hHeap) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapFree(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapLock(HANDLE hHeap) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapQueryInformation(HANDLE HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapReAlloc(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem,SIZE_T dwBytes) WINBASEAPI LPVOID WINAPI <heapapi.h>
HeapSetInformation(HANDLE HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapSize(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem) WINBASEAPI SIZE_T WINAPI <heapapi.h>
HeapSummary(HANDLE hHeap,DWORD dwFlags,LPHEAP_SUMMARY lpSummary) WINBOOL WINAPI <heapapi.h>
HeapUnlock(HANDLE hHeap) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapValidate(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem) WINBASEAPI WINBOOL WINAPI <heapapi.h>
HeapVidMemAllocAligned(LPVIDMEM lpVidMem,DWORD dwWidth,DWORD dwHeight,LPSURFACEALIGNMENT lpAlignment,LPLONG lpNewPitch) extern FLATPTR WINAPI <dmemmgr.h>
HeapWalk(HANDLE hHeap,LPPROCESS_HEAP_ENTRY lpEntry) WINBASEAPI WINBOOL WINAPI <heapapi.h>
Help(void)virtual void WINAPI <mmcobj.h>
HelpComplete(__LONG32 dwCharID,__LONG32 dwCommandID,__LONG32 dwCause)virtual HRESULT WINAPI <agtsvr.h>
HelpContext()inline DWORD _com_error::<comdef.h>
HelpFile()inline _bstr_t _com_error::<netmon.h>
HeuristicDecision(DWORD dwDecision,BOID * pboidReason,HRESULT hr)virtual HRESULT WINAPI <transact.h>
HEX(b)<netmon.h>
HexCchOf(	_s)<mapiwin.h>
HexCchOf(_s)<mapiwin.h>
HexFromBin(LPBYTE lpb,int cb,LPTSTR lpsz) STDAPI_<mapiutil.h>
HexSizeOf(	_s)<mapiwin.h>
HexSizeOf(_s)<mapiwin.h>
HFONT_16(h32)<wownt32.h>
HFONT_32(h16)<wownt32.h>
HFONT_UserFree(ULONG *,HFONT *)void            __RPC_USER <ocidl.h>
HFONT_UserMarshal(ULONG *,unsigned char *,HFONT *)unsigned char<ocidl.h>
HFONT_UserSize(ULONG *,ULONG,HFONT *)ULONG           __RPC_USER <ocidl.h>
HFONT_UserUnmarshal(ULONG *,unsigned char *,HFONT *)unsigned char<ocidl.h>
HGLOBAL_UserFree(ULONG *,HGLOBAL *)void            __RPC_USER <shobjidl.h>
HGLOBAL_UserMarshal(ULONG *,unsigned char *,HGLOBAL *)unsigned char<shobjidl.h>
HGLOBAL_UserSize(ULONG *,ULONG,HGLOBAL *)ULONG           __RPC_USER <shobjidl.h>
HGLOBAL_UserUnmarshal(ULONG *,unsigned char *,HGLOBAL *)unsigned char<shobjidl.h>
HI32(UINT64 up) inline UINT32 <mfapi.h>
HIBYTE(w)<minwindef.h>
HICON_UserFree(ULONG *,HICON *)void            __RPC_USER <wincodec.h>
HICON_UserMarshal(ULONG *,unsigned char *,HICON *)unsigned char<wincodec.h>
HICON_UserSize(ULONG *,ULONG,HICON *)ULONG           __RPC_USER <wincodec.h>
HICON_UserUnmarshal(ULONG *,unsigned char *,HICON *)unsigned char<wincodec.h>
HID_BUFFER_CTL_CODE(id)<hidclass.h>
HID_CTL_CODE(id)<hidclass.h>
HID_IN_CTL_CODE(id)<hidclass.h>
HID_OUT_CTL_CODE(id)<hidclass.h>
HidD_FlushQueue(HANDLE HidDeviceObject)BOOLEAN NTAPI <hidsdi.h>
HidD_FreePreparsedData(PHIDP_PREPARSED_DATA PreparsedData)BOOLEAN NTAPI <hidsdi.h>
HidD_GetAttributes(HANDLE HidDeviceObject,PHIDD_ATTRIBUTES Attributes)BOOLEAN NTAPI <hidsdi.h>
HidD_GetConfiguration(HANDLE HidDeviceObject,PHIDD_CONFIGURATION Configuration,ULONG ConfigurationLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetFeature(HANDLE HidDeviceObject,PVOID ReportBuffer,ULONG ReportBufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetHidGuid(LPGUID HidGuid)void NTAPI <hidsdi.h>
HidD_GetIndexedString(HANDLE HidDeviceObject,ULONG StringIndex,PVOID Buffer,ULONG BufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetInputReport(HANDLE HidDeviceObject,PVOID ReportBuffer,ULONG ReportBufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetManufacturerString(HANDLE HidDeviceObject,PVOID Buffer,ULONG BufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetMsGenreDescriptor(HANDLE HidDeviceObject,PVOID Buffer,ULONG BufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetNumInputBuffers(HANDLE HidDeviceObject,PULONG NumberBuffers)BOOLEAN NTAPI <hidsdi.h>
HidD_GetPhysicalDescriptor(HANDLE HidDeviceObject,PVOID Buffer,ULONG BufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetPreparsedData(HANDLE HidDeviceObject,PHIDP_PREPARSED_DATA * PreparsedData)BOOLEAN NTAPI <hidsdi.h>
HidD_GetProductString(HANDLE HidDeviceObject,PVOID Buffer,ULONG BufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_GetSerialNumberString(HANDLE HidDeviceObject,PVOID Buffer,ULONG BufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_SetConfiguration(HANDLE HidDeviceObject,PHIDD_CONFIGURATION Configuration,ULONG ConfigurationLength)BOOLEAN NTAPI <hidsdi.h>
HidD_SetFeature(HANDLE HidDeviceObject,PVOID ReportBuffer,ULONG ReportBufferLength)BOOLEAN NTAPI <hidsdi.h>
HidD_SetNumInputBuffers(HANDLE HidDeviceObject,ULONG NumberBuffers)BOOLEAN NTAPI <hidsdi.h>
HidD_SetOutputReport(HANDLE HidDeviceObject,PVOID ReportBuffer,ULONG ReportBufferLength)BOOLEAN NTAPI <hidsdi.h>
Hide(__LONG32 bFast,__LONG32 * pdwReqID)virtual HRESULT WINAPI <msimcsdk.h>
Hide(VARIANT Fast,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <msimcsdk.h>
Hide(void)virtual HRESULT WINAPI <msimcsdk.h>
HideCaret(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
HideCursor(__LONG32 HideCursor)virtual HRESULT WINAPI <control.h>
HidP_GetButtonCaps(HIDP_REPORT_TYPE ReportType,PHIDP_BUTTON_CAPS ButtonCaps,PUSHORT ButtonCapsLength,PHIDP_PREPARSED_DATA PreparsedData)NTSTATUS NTAPI <hidpi.h>
HidP_GetButtons(Rty, UPa, LCo, ULi, ULe, Ppd, Rep, RLe)<hidpi.h>
HidP_GetButtonsEx(Rty, LCo, BLi, ULe, Ppd, Rep, RLe)<hidpi.h>
HidP_GetCaps(PHIDP_PREPARSED_DATA PreparsedData,PHIDP_CAPS Capabilities)NTSTATUS NTAPI <hidpi.h>
HidP_GetData(HIDP_REPORT_TYPE ReportType,PHIDP_DATA DataList,PULONG DataLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_GetExtendedAttributes(HIDP_REPORT_TYPE ReportType,USHORT DataIndex,PHIDP_PREPARSED_DATA PreparsedData,PHIDP_EXTENDED_ATTRIBUTES Attributes,PULONG LengthAttributes)NTSTATUS NTAPI <hidpi.h>
HidP_GetLinkCollectionNodes(PHIDP_LINK_COLLECTION_NODE LinkCollectionNodes,PULONG LinkCollectionNodesLength,PHIDP_PREPARSED_DATA PreparsedData)NTSTATUS NTAPI <hidpi.h>
HidP_GetScaledUsageValue(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,PLONG UsageValue,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_GetSpecificButtonCaps(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,PHIDP_BUTTON_CAPS ButtonCaps,PUSHORT ButtonCapsLength,PHIDP_PREPARSED_DATA PreparsedData)NTSTATUS NTAPI <hidpi.h>
HidP_GetSpecificValueCaps(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,PHIDP_VALUE_CAPS ValueCaps,PUSHORT ValueCapsLength,PHIDP_PREPARSED_DATA PreparsedData)NTSTATUS NTAPI <hidpi.h>
HidP_GetUsages(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,PUSAGE UsageList,PULONG UsageLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_GetUsagesEx(HIDP_REPORT_TYPE ReportType,USHORT LinkCollection,PUSAGE_AND_PAGE ButtonList,ULONG * UsageLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_GetUsageValue(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,PULONG UsageValue,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_GetUsageValueArray(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,PCHAR UsageValue,USHORT UsageValueByteLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_GetValueCaps(HIDP_REPORT_TYPE ReportType,PHIDP_VALUE_CAPS ValueCaps,PUSHORT ValueCapsLength,PHIDP_PREPARSED_DATA PreparsedData)NTSTATUS NTAPI <hidpi.h>
HidP_InitializeReportForID(HIDP_REPORT_TYPE ReportType,UCHAR ReportID,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_IsSameUsageAndPage(u1, u2)<hidpi.h>
HidP_MaxDataListLength(HIDP_REPORT_TYPE ReportType,PHIDP_PREPARSED_DATA PreparsedData)ULONG NTAPI <hidpi.h>
HidP_MaxUsageListLength(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,PHIDP_PREPARSED_DATA PreparsedData)ULONG NTAPI <hidpi.h>
HidP_SetButtons(Rty, Up, Lco, ULi, ULe, Ppd, Rep, Rle)<hidpi.h>
HidP_SetData(HIDP_REPORT_TYPE ReportType,PHIDP_DATA DataList,PULONG DataLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_SetScaledUsageValue(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,LONG UsageValue,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_SetUsages(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,PUSAGE UsageList,PULONG UsageLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_SetUsageValue(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,ULONG UsageValue,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_SetUsageValueArray(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,USAGE Usage,PCHAR UsageValue,USHORT UsageValueByteLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_TranslateUsageAndPagesToI8042ScanCodes(PUSAGE_AND_PAGE ChangedUsageList,ULONG UsageListLength,HIDP_KEYBOARD_DIRECTION KeyAction,PHIDP_KEYBOARD_MODIFIER_STATE ModifierState,PHIDP_INSERT_SCANCODES InsertCodesProcedure,PVOID InsertCodesContext)NTSTATUS NTAPI <hidpi.h>
HidP_TranslateUsagesToI8042ScanCodes(PUSAGE ChangedUsageList,ULONG UsageListLength,HIDP_KEYBOARD_DIRECTION KeyAction,PHIDP_KEYBOARD_MODIFIER_STATE ModifierState,PHIDP_INSERT_SCANCODES InsertCodesProcedure,PVOID InsertCodesContext)NTSTATUS NTAPI <hidpi.h>
HidP_UnsetButtons(Rty, Up, Lco, ULi, ULe, Ppd, Rep, Rle)<hidpi.h>
HidP_UnsetUsages(HIDP_REPORT_TYPE ReportType,USAGE UsagePage,USHORT LinkCollection,PUSAGE UsageList,PULONG UsageLength,PHIDP_PREPARSED_DATA PreparsedData,PCHAR Report,ULONG ReportLength)NTSTATUS NTAPI <hidpi.h>
HidP_UsageAndPageListDifference(PUSAGE_AND_PAGE PreviousUsageList,PUSAGE_AND_PAGE CurrentUsageList,PUSAGE_AND_PAGE BreakUsageList,PUSAGE_AND_PAGE MakeUsageList,ULONG UsageListLength)NTSTATUS NTAPI <hidpi.h>
HidP_UsageListDifference(PUSAGE PreviousUsageList,PUSAGE CurrentUsageList,PUSAGE BreakUsageList,PUSAGE MakeUsageList,ULONG UsageListLength)NTSTATUS NTAPI <hidpi.h>
HIGH_NIBBLE(Byte)<ndrtypes.h>
HiliteMenuItem(HWND hWnd,HMENU hMenu,UINT uIDHiliteItem,UINT uHilite) WINUSERAPI WINBOOL WINAPI <winuser.h>
HIMAGELIST_QueryInterface(HIMAGELIST himl,REFIID riid,void ** ppv) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
HINIBBLE(b)<netmon.h>
HINSPSUIPAGE_INDEX(i)<compstui.h>
HitTestPenData(HPENDATA,LPPOINT,UINT,UINT *,UINT *) int WINAPI <penwin.h>
HitTestPoint(POINT * pPoint,IUnknown * pReserved,WINBOOL * pbHit)virtual HRESULT WINAPI <mshtmlc.h>
HitTestPoint(POINT pt,WINBOOL * pbHit,LONG * plPartID)virtual HRESULT WINAPI <mshtmlc.h>
HitTestThemeBackground(HTHEME hTheme,HDC hdc,int iPartId,int iStateId,DWORD dwOptions,const RECT * pRect,HRGN hrgn,POINT ptTest,WORD * pwHitTestCode)THEMEAPI <uxtheme.h>
HIWORD(l)<minwindef.h>
HlinkClone(IHlink * pihl,REFIID riid,IHlinkSite * pihlsiteForClone,DWORD dwSiteData,void ** ppvObj) STDAPI <hlink.h>
HlinkCreateBrowseContext(IUnknown * piunkOuter,REFIID riid,void ** ppvObj) STDAPI <hlink.h>
HlinkCreateExtensionServices(LPCWSTR pwzAdditionalHeaders,HWND phwnd,LPCWSTR pszUsername,LPCWSTR pszPassword,IUnknown * piunkOuter,REFIID riid,void ** ppvObj) STDAPI <hlink.h>
HlinkCreateFromData(IDataObject * piDataObj,IHlinkSite * pihlsite,DWORD dwSiteData,IUnknown * piunkOuter,REFIID riid,void ** ppvObj) STDAPI <hlink.h>
HlinkCreateFromMoniker(IMoniker * pimkTrgt,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName,IHlinkSite * pihlsite,DWORD dwSiteData,IUnknown * piunkOuter,REFIID riid,void ** ppvObj) STDAPI <hlink.h>
HlinkCreateFromString(LPCWSTR pwzTarget,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName,IHlinkSite * pihlsite,DWORD dwSiteData,IUnknown * piunkOuter,REFIID riid,void ** ppvObj) STDAPI <hlink.h>
HlinkCreateShortcut(DWORD grfHLSHORTCUTF,IHlink * pihl,LPCWSTR pwzDir,LPCWSTR pwzFileName,LPWSTR * ppwzShortcutFile,DWORD dwReserved) STDAPI <hlink.h>
HlinkCreateShortcutFromMoniker(DWORD grfHLSHORTCUTF,IMoniker * pimkTarget,LPCWSTR pwzLocation,LPCWSTR pwzDir,LPCWSTR pwzFileName,LPWSTR * ppwzShortcutFile,DWORD dwReserved) STDAPI <hlink.h>
HlinkCreateShortcutFromString(DWORD grfHLSHORTCUTF,LPCWSTR pwzTarget,LPCWSTR pwzLocation,LPCWSTR pwzDir,LPCWSTR pwzFileName,LPWSTR * ppwzShortcutFile,DWORD dwReserved) STDAPI <hlink.h>
HlinkGetSpecialReference(ULONG uReference,LPWSTR * ppwzReference) STDAPI <hlink.h>
HlinkGetValueFromParams(LPCWSTR pwzParams,LPCWSTR pwzName,LPWSTR * ppwzValue) STDAPI <hlink.h>
HlinkGoBack(IUnknown * pUnk)STDAPI <urlmon.h>
HlinkGoForward(IUnknown * pUnk)STDAPI <urlmon.h>
HlinkIsShortcut(LPCWSTR pwzFileName) STDAPI <hlink.h>
HlinkNavigate(IHlink * pihl,IHlinkFrame * pihlframe,DWORD grfHLNF,LPBC pbc,IBindStatusCallback * pibsc,IHlinkBrowseContext * pihlbc) STDAPI <hlink.h>
HlinkNavigateMoniker(IUnknown * pUnk,IMoniker * pmkTarget)STDAPI <urlmon.h>
HlinkNavigateString(IUnknown * pUnk,LPCWSTR szTarget)STDAPI <urlmon.h>
HlinkNavigateToStringReference(LPCWSTR pwzTarget,LPCWSTR pwzLocation,IHlinkSite * pihlsite,DWORD dwSiteData,IHlinkFrame * pihlframe,DWORD grfHLNF,LPBC pibc,IBindStatusCallback * pibsc,IHlinkBrowseContext * pihlbc) STDAPI <hlink.h>
HlinkOnNavigate(IHlinkFrame * pihlframe,IHlinkBrowseContext * pihlbc,DWORD grfHLNF,IMoniker * pimkTarget,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName,ULONG * puHLID) STDAPI <hlink.h>
HlinkOnRenameDocument(DWORD dwReserved,IHlinkBrowseContext * pihlbc,IMoniker * pimkOld,IMoniker * pimkNew) STDAPI <hlink.h>
HlinkParseDisplayName(LPBC pibc,LPCWSTR pwzDisplayName,WINBOOL fNoForceAbs,ULONG * pcchEaten,IMoniker ** ppimk) STDAPI <hlink.h>
HlinkPreprocessMoniker(LPBC pibc,IMoniker * pimkIn,IMoniker ** ppimkOut) STDAPI <hlink.h>
HlinkQueryCreateFromData(IDataObject * piDataObj) STDAPI <hlink.h>
HlinkResolveMonikerForData(LPMONIKER pimkReference,DWORD reserved,LPBC pibc,ULONG cFmtetc,FORMATETC * rgFmtetc,IBindStatusCallback * pibsc,LPMONIKER pimkBase) STDAPI <hlink.h>
HlinkResolveShortcut(LPCWSTR pwzShortcutFileName,IHlinkSite * pihlsite,DWORD dwSiteData,IUnknown * piunkOuter,REFIID riid,void ** ppvObj) STDAPI <hlink.h>
HlinkResolveShortcutToMoniker(LPCWSTR pwzShortcutFileName,IMoniker ** ppimkTarget,LPWSTR * ppwzLocation) STDAPI <hlink.h>
HlinkResolveShortcutToString(LPCWSTR pwzShortcutFileName,LPWSTR * ppwzTarget,LPWSTR * ppwzLocation) STDAPI <hlink.h>
HlinkResolveStringForData(LPCWSTR pwzReference,DWORD reserved,LPBC pibc,ULONG cFmtetc,FORMATETC * rgFmtetc,IBindStatusCallback * pibsc,LPMONIKER pimkBase) STDAPI <hlink.h>
HlinkSetSpecialReference(ULONG uReference,LPCWSTR pwzReference) STDAPI <hlink.h>
HlinkSimpleNavigateToMoniker(IMoniker * pmkTarget,LPCWSTR szLocation,LPCWSTR szTargetFrameName,IUnknown * pUnk,IBindCtx * pbc,IBindStatusCallback *,DWORD grfHLNF,DWORD dwReserved)STDAPI <urlmon.h>
HlinkSimpleNavigateToString(LPCWSTR szTarget,LPCWSTR szLocation,LPCWSTR szTargetFrameName,IUnknown * pUnk,IBindCtx * pbc,IBindStatusCallback *,DWORD grfHLNF,DWORD dwReserved)STDAPI <urlmon.h>
HlinkTranslateURL(LPCWSTR pwzURL,DWORD grfFlags,LPWSTR * ppwzTranslatedURL) STDAPI <hlink.h>
HlinkUpdateStackItem(IHlinkFrame * pihlframe,IHlinkBrowseContext * pihlbc,ULONG uHLID,IMoniker * pimkTrgt,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName) STDAPI <hlink.h>
HMENU_16(h32)<wownt32.h>
HMENU_32(h16)<wownt32.h>
HMENU_UserFree(ULONG *,HMENU *)void            __RPC_USER <shobjidl.h>
HMENU_UserMarshal(ULONG *,unsigned char *,HMENU *)unsigned char<shobjidl.h>
HMENU_UserSize(ULONG *,ULONG,HMENU *)ULONG           __RPC_USER <shobjidl.h>
HMENU_UserUnmarshal(ULONG *,unsigned char *,HMENU *)unsigned char<shobjidl.h>
HMETAFILE_16(h32)<wownt32.h>
HMETAFILE_32(h16)<wownt32.h>
HMONITOR_UserFree(ULONG *,HMONITOR *)void            __RPC_USER <shobjidl.h>
HMONITOR_UserMarshal(ULONG *,unsigned char *,HMONITOR *)unsigned char<shobjidl.h>
HMONITOR_UserSize(ULONG *,ULONG,HMONITOR *)ULONG           __RPC_USER <shobjidl.h>
HMONITOR_UserUnmarshal(ULONG *,unsigned char *,HMONITOR *)unsigned char<shobjidl.h>
Hold(LONG_PTR lCookie)virtual HRESULT WINAPI <tapi3if.h>
Hold(VARIANT_BOOL fHold)virtual HRESULT WINAPI <tapi3if.h>
HoldClerk(VARIANT Index,LPVARIANT pItem)virtual HRESULT WINAPI <comsvcs.h>
HomeKey(__LONG32 Unit,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
HostWindow(BSTR bstrControl,__LONG32 lStyle,VARIANT_BOOL fShowOnTaskbar,IDispatch ** ppMSIMWnd)virtual HRESULT WINAPI <msimcsdk.h>
HostWindowEx(BSTR bstrControl,__LONG32 lStyle,__LONG32 lExStyle,IStream * pStream,IMSIMWindow ** ppMSIMWindow,IUnknown ** ppUnk,REFIID iidAdvise,IUnknown * punkSink)virtual HRESULT WINAPI <msimcsdk.h>
HPALETTE_16(h32)<wownt32.h>
HPALETTE_32(h16)<wownt32.h>
HPALETTE_UserFree(ULONG *,HPALETTE *)void            __RPC_USER <wincodec.h>
HPALETTE_UserMarshal(ULONG *,unsigned char *,HPALETTE *)unsigned char<wincodec.h>
HPALETTE_UserSize(ULONG *,ULONG,HPALETTE *)ULONG           __RPC_USER <wincodec.h>
HPALETTE_UserUnmarshal(ULONG *,unsigned char *,HPALETTE *)unsigned char<wincodec.h>
HpcmFromWpLp(wp,lp)<penwin.h>
HPEN_16(h32)<wownt32.h>
HPEN_32(h16)<wownt32.h>
HR_FAILED(_hr)<wabcode.h>
HR_SUCCEEDED(_hr)<wabcode.h>
HrAddColumns(LPMAPITABLE lptbl,LPSPropTagArray lpproptagColumnsNew,LPALLOCATEBUFFER lpAllocateBuffer,LPFREEBUFFER lpFreeBuffer) STDAPI_<wabutil.h>
HrAddColumnsEx(LPSPropTagArray ptaga))))))))))))))))) STDAPI_<wabutil.h>
HrAllocAdviseSink(LPNOTIFCALLBACK lpfnCallback,LPVOID lpvContext,LPMAPIADVISESINK * lppAdviseSink) STDAPI <wabutil.h>
HrCheckHr(hr,fn)<mapidbg.h>
HrCheckSc(sc,fn)<mapidbg.h>
HrComposeEID(LPMAPISESSION lpSession,ULONG cbStoreRecordKey,LPBYTE lpStoreRecordKey,ULONG cbMsgEntryID,LPENTRYID lpMsgEntryID,ULONG * lpcbEID,LPENTRYID * lppEntryID) STDAPI <mapiutil.h>
HrComposeMsgID(LPMAPISESSION lpSession,ULONG cbStoreSearchKey,LPBYTE pStoreSearchKey,ULONG cbMsgEntryID,LPENTRYID lpMsgEntryID,LPTSTR * lpszMsgID) STDAPI <mapiutil.h>
HrConstructRoleSid(char * szRoleName,BYTE rolescope,ULONG ptagrole,PSID * ppsid)HRESULT ROLDLLEXP ROLEAPI <mdbrole.h>
HrDecomposeEID(LPMAPISESSION lpSession,ULONG cbEntryID,LPENTRYID lpEntryID,ULONG * lpcbStoreEntryID,LPENTRYID * lppStoreEntryID,ULONG * lpcbMsgEntryID,LPENTRYID * lppMsgEntryID) STDAPI <mapiutil.h>
HrDecomposeMsgID(LPMAPISESSION lpSession,LPTSTR lpszMsgID,ULONG * lpcbStoreEntryID,LPENTRYID * lppStoreEntryID,ULONG * lppcbMsgEntryID,LPENTRYID * lppMsgEntryID) STDAPI <mapiutil.h>
HrDispatchNotifications(ULONG ulFlags) STDAPI <wabutil.h>
HrEntryIDFromSz(LPTSTR lpsz,ULONG * lpcb,LPENTRYID * lppEntryID) STDAPI <mapiutil.h>
HRESULT_CODE(hr)<winerror.h>
HRESULT_FACILITY(hr)<winerror.h>
HRESULT_FROM_NT(x)<winerror.h>
HRESULT_FROM_SETUPAPI(x)<winerror.h>
HRESULT_FROM_WIN32(__LONG32 x)__CRT_INLINE HRESULT <winerror.h>
HRESULT_FROM_WIN32(x)<winerror.h>
HRESULT_SEVERITY(hr)<winerror.h>
HRESULT_TO_NMERR(HRESULT hResult) INLINE DWORD <netmon.h>
HRESULTToWCode(HRESULT hr)inline WORD _com_error::<comdef.h>
HRESULTTOWIN32(hres)<mdcommsg.h>
HrGetOneProp(LPMAPIPROP lpMapiProp,ULONG ulPropTag,LPSPropValue * lppProp) STDAPI <wabutil.h>
HRGN_16(h32)<wownt32.h>
HRGN_32(h16)<wownt32.h>
HRGN_UserFree(ULONG *,HRGN *)void            __RPC_USER <ocidl.h>
HRGN_UserMarshal(ULONG *,unsigned char *,HRGN *)unsigned char<ocidl.h>
HRGN_UserSize(ULONG *,ULONG,HRGN *)ULONG           __RPC_USER <ocidl.h>
HRGN_UserUnmarshal(ULONG *,unsigned char *,HRGN *)unsigned char<ocidl.h>
HrIStorageFromStream(LPUNKNOWN lpUnkIn,LPCIID lpInterface,ULONG ulFlags,LPSTORAGE * lppStorageOut) STDAPI_<wabutil.h>
HrParseRoleSid(PSID psid,long cbNameBuffer,char rgchName[],ULONG * pptagrole,BYTE * prolescope)HRESULT ROLDLLEXP ROLEAPI <mdbrole.h>
HrQueryAllRows(LPMAPITABLE lpTable,LPSPropTagArray lpPropTags,LPSRestriction lpRestriction,LPSSortOrderSet lpSortOrderSet,LONG crowsMax,LPSRowSet * lppRows) STDAPI <wabutil.h>
HrSetOneProp(LPMAPIPROP lpMapiProp,LPSPropValue lpProp) STDAPI <wabutil.h>
HrSzFromEntryID(ULONG cb,LPENTRYID lpEntryID,LPTSTR * lpsz) STDAPI <mapiutil.h>
HrThisThreadAdviseSink(LPMAPIADVISESINK lpAdviseSink,LPMAPIADVISESINK * lppAdviseSink) STDAPI <wabutil.h>
HrValidateIPMSubtree(LPMDB lpMDB,ULONG ulFlags,ULONG * lpcValues,LPSPropValue * lppValues,LPMAPIERROR * lpperr) STDAPI <mapiutil.h>
HrValidateParameters(METHODS eMethod,LPVOID * ppFirstArg) STDAPI <mapival.h>
HrValidateParametersV(METHODS eMethod,...) STDAPIV <mapival.h>
HrValidateParametersValist(METHODS eMethod,va_list arglist) STDAPIV <mapival.h>
HSTRING_UserFree(ULONG *,HSTRING *)void            __RPC_USER <winstring.h>
HSTRING_UserFree(unsigned long * pFlags,HSTRING * ppidl)void __RPC_USER <winstring.h>
HSTRING_UserFree64(unsigned long * pFlags,HSTRING * ppidl)void __RPC_USER <winstring.h>
HSTRING_UserMarshal(ULONG *,unsigned char *,HSTRING *)unsigned char<winstring.h>
HSTRING_UserMarshal(unsigned long * pFlags,unsigned char * pBuffer,HSTRING * ppidl)unsigned char<winstring.h>
HSTRING_UserMarshal64(unsigned long * pFlags,unsigned char * pBuffer,HSTRING * ppidl)unsigned char<winstring.h>
HSTRING_UserSize(ULONG *,ULONG,HSTRING *)ULONG           __RPC_USER <winstring.h>
HSTRING_UserSize(unsigned long * pFlags,unsigned long StartingSize,HSTRING * ppidl)unsigned long __RPC_USER <winstring.h>
HSTRING_UserSize64(unsigned long * pFlags,unsigned long StartingSize,HSTRING * ppidl)unsigned long __RPC_USER <winstring.h>
HSTRING_UserUnmarshal(ULONG *,unsigned char *,HSTRING *)unsigned char<winstring.h>
HSTRING_UserUnmarshal(unsigned long * pFlags,unsigned char * pBuffer,HSTRING * ppidl)unsigned char<winstring.h>
HSTRING_UserUnmarshal64(unsigned long * pFlags,unsigned char * pBuffer,HSTRING * ppidl)unsigned char<winstring.h>
HStringReference(& str)[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])            explicit <corewrappers.h>
HStringReference(& strRef)[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])           explicit <corewrappers.h>
HStringReference()           <corewrappers.h>
HStringReference(const HStringReference & other)           <corewrappers.h>
HStringReference(const T & strRef)           explicit <corewrappers.h>
HStringReference(const wchar_t * str,unsigned int len)           <corewrappers.h>
HT_ComputeRGBGammaTable(USHORT GammaTableEntries,USHORT GammaTableType,USHORT RedGamma,USHORT GreenGamma,USHORT BlueGamma,LPBYTE pGammaTable)<winddi.h>
HT_Get8BPPFormatPalette(LPPALETTEENTRY pPaletteEntry,USHORT RedGamma,USHORT GreenGamma,USHORT BlueGamma)<winddi.h>
HT_Get8BPPMaskPalette(LPPALETTEENTRY pPaletteEntry,WINBOOL Use8BPPMaskPal,BYTE CMYMask,USHORT RedGamma,USHORT GreenGamma,USHORT BlueGamma)<winddi.h>
HT_IS_BITMASKPALRGB(pPal)<winddi.h>
HT_SET_BITMASKPAL2RGB(pPal)<winddi.h>
HTASK_16(h32)<wownt32.h>
HTASK_32(h16)<wownt32.h>
HTMLEncode(BSTR bstrIn,BSTR * pbstrEncoded)virtual HRESULT WINAPI <asptlb.h>
HtmlHelp(HWND hwndCaller,LPCSTR pszFile,UINT uCommand,DWORD_PTR dwData) HWND WINAPI <htmlhelp.h>
HtmlHelpA(HWND hwndCaller,LPCSTR pszFile,UINT uCommand,DWORD_PTR dwData) HWND WINAPI <htmlhelp.h>
HtmlHelpW(HWND hwndCaller,LPCWSTR pszFile,UINT uCommand,DWORD_PTR dwData) HWND WINAPI <htmlhelp.h>
htonl(u_long hostlong) WINSOCK_API_LINKAGE u_long WSAAPI <winsock2.h>
htons(u_short hostshort) WINSOCK_API_LINKAGE u_short WSAAPI <winsock2.h>
HtrgFromHwnd(hwnd)<penwin.h>
HTTP_EQUAL_VERSION(version,major,minor)<http.h>
HTTP_GREATER_EQUAL_VERSION(version,major,minor)<http.h>
HTTP_GREATER_VERSION(version,major,minor)<http.h>
HTTP_IS_NULL_ID(pid)<http.h>
HTTP_LESS_EQUAL_VERSION(version,major,minor)<http.h>
HTTP_LESS_VERSION(version,major,minor)<http.h>
HTTP_NOT_EQUAL_VERSION(version,major,minor)<http.h>
HTTP_SET_NULL_ID(pid)<http.h>
HTTP_SET_VERSION(version,major,minor)<http.h>
HttpAddFragmentToCache(HANDLE ReqQueueHandle,PCWSTR pUrlPrefix,PHTTP_DATA_CHUNK pDataChunk,PHTTP_CACHE_POLICY pCachePolicy,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpAddRequestHeaders(HINTERNET hRequest,LPCSTR lpszHeaders,DWORD dwHeadersLength,DWORD dwModifiers) BOOLAPI <wininet.h>
HttpAddRequestHeadersA(HINTERNET hRequest,LPCSTR lpszHeaders,DWORD dwHeadersLength,DWORD dwModifiers) BOOLAPI <wininet.h>
HttpAddRequestHeadersW(HINTERNET hRequest,LPCWSTR lpszHeaders,DWORD dwHeadersLength,DWORD dwModifiers) BOOLAPI <wininet.h>
HttpAddUrl(HANDLE ReqQueueHandle,PCWSTR pUrlPrefix,PVOID pReserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpAddUrlToUrlGroup(HTTP_URL_GROUP_ID UrlGroupId,PCWSTR pFullyQualifiedUrl,HTTP_URL_CONTEXT UrlContext,ULONG Reserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCancelHttpRequest(HANDLE ReqQueueHandle,HTTP_REQUEST_ID RequestId,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCloseRequestQueue(HANDLE ReqQueueHandle) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCloseServerSession(HTTP_SERVER_SESSION_ID ServerSessionId) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCloseUrlGroup(HTTP_URL_GROUP_ID UrlGroupId) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCreateHttpHandle(PHANDLE pReqQueueHandle,ULONG Options) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCreateRequestQueue(HTTPAPI_VERSION Version,PCWSTR pName,PSECURITY_ATTRIBUTES pSecurityAttributes,ULONG Flags,PHANDLE pReqQueueHandle) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCreateServerSession(HTTPAPI_VERSION Version,PHTTP_SERVER_SESSION_ID pServerSessionId,ULONG Reserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpCreateUrlGroup(HTTP_SERVER_SESSION_ID ServerSessionId,PHTTP_URL_GROUP_ID pUrlGroupId,ULONG Reserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpDeleteServiceConfiguration(HANDLE ServiceHandle,HTTP_SERVICE_CONFIG_ID ConfigId,PVOID pConfigInformation,ULONG ConfigInformationLength,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpEndRequest(HINTERNET hRequest,LPINTERNET_BUFFERSA lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpEndRequestA(HINTERNET hRequest,LPINTERNET_BUFFERSA lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpEndRequestW(HINTERNET hRequest,LPINTERNET_BUFFERSW lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpExtensionProc(EXTENSION_CONTROL_BLOCK * pECB) DWORD WINAPI <httpext.h>
HttpFilterProc(HTTP_FILTER_CONTEXT * pfc,DWORD NotificationType,VOID * pvNotification) DWORD WINAPI <httpfilt.h>
HttpFlushResponseCache(HANDLE ReqQueueHandle,PCWSTR pUrlPrefix,ULONG Flags,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpInitialize(HTTPAPI_VERSION Version,ULONG Flags,PVOID pReserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpOpenRequest(HINTERNET hConnect,LPCSTR lpszVerb,LPCSTR lpszObjectName,LPCSTR lpszVersion,LPCSTR lpszReferrer,LPCSTR * lplpszAcceptTypes,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpOpenRequestA(HINTERNET hConnect,LPCSTR lpszVerb,LPCSTR lpszObjectName,LPCSTR lpszVersion,LPCSTR lpszReferrer,LPCSTR * lplpszAcceptTypes,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpOpenRequestW(HINTERNET hConnect,LPCWSTR lpszVerb,LPCWSTR lpszObjectName,LPCWSTR lpszVersion,LPCWSTR lpszReferrer,LPCWSTR * lplpszAcceptTypes,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpQueryInfo(HINTERNET hRequest,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpdwBufferLength,LPDWORD lpdwIndex) BOOLAPI <wininet.h>
HttpQueryInfoA(HINTERNET hRequest,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpdwBufferLength,LPDWORD lpdwIndex) BOOLAPI <wininet.h>
HttpQueryInfoW(HINTERNET hRequest,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpdwBufferLength,LPDWORD lpdwIndex) BOOLAPI <wininet.h>
HttpQueryRequestQueueProperty(HANDLE Handle,HTTP_SERVER_PROPERTY Property,PVOID pPropertyInformation,ULONG PropertyInformationLength,ULONG Reserved,PULONG pReturnLength,PVOID pReserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpQueryServerSessionProperty(HTTP_SERVER_SESSION_ID ServerSessionId,HTTP_SERVER_PROPERTY Property,PVOID pPropertyInformation,ULONG PropertyInformationLength,PULONG pReturnLength) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpQueryServiceConfiguration(HANDLE ServiceHandle,HTTP_SERVICE_CONFIG_ID ConfigId,PVOID pInputConfigInformation,ULONG InputConfigInformationLength,PVOID pOutputConfigInformation,ULONG OutputConfigInformationLength,PULONG pReturnLength,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpQueryUrlGroupProperty(HTTP_URL_GROUP_ID UrlGroupId,HTTP_SERVER_PROPERTY Property,PVOID pPropertyInformation,ULONG PropertyInformationLength,PULONG pReturnLength) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpReadFragmentFromCache(HANDLE ReqQueueHandle,PCWSTR pUrlPrefix,PHTTP_BYTE_RANGE pByteRange,PVOID pBuffer,ULONG BufferLength,PULONG pBytesRead,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpReceiveClientCertificate(HANDLE ReqQueueHandle,HTTP_CONNECTION_ID ConnectionId,ULONG Flags,PHTTP_SSL_CLIENT_CERT_INFO pSslClientCertInfo,ULONG SslClientCertInfoSize,PULONG pBytesReceived,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpReceiveHttpRequest(HANDLE ReqQueueHandle,HTTP_REQUEST_ID RequestId,ULONG Flags,PHTTP_REQUEST pRequestBuffer,ULONG RequestBufferLength,PULONG pBytesReceived,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpReceiveRequestEntityBody(HANDLE ReqQueueHandle,HTTP_REQUEST_ID RequestId,ULONG Flags,PVOID pBuffer,ULONG BufferLength,PULONG pBytesReceived,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpRemoveUrl(HANDLE ReqQueueHandle,PCWSTR pUrlPrefix) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpRemoveUrlFromUrlGroup(HTTP_URL_GROUP_ID UrlGroupId,PCWSTR pFullyQualifiedUrl,ULONG Flags) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpSendHttpResponse(HANDLE ReqQueueHandle,HTTP_REQUEST_ID RequestId,ULONG Flags,PHTTP_RESPONSE pHttpResponse,PVOID pReserved1,PULONG pBytesSent,PVOID pReserved2,ULONG Reserved3,LPOVERLAPPED pOverlapped,PVOID pReserved4) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpSendRequest(HINTERNET hRequest,LPCSTR lpszHeaders,DWORD dwHeadersLength,LPVOID lpOptional,DWORD dwOptionalLength) BOOLAPI <wininet.h>
HttpSendRequestA(HINTERNET hRequest,LPCSTR lpszHeaders,DWORD dwHeadersLength,LPVOID lpOptional,DWORD dwOptionalLength) BOOLAPI <wininet.h>
HttpSendRequestEx(HINTERNET hRequest,LPINTERNET_BUFFERSA lpBuffersIn,LPINTERNET_BUFFERSA lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpSendRequestExA(HINTERNET hRequest,LPINTERNET_BUFFERSA lpBuffersIn,LPINTERNET_BUFFERSA lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpSendRequestExW(HINTERNET hRequest,LPINTERNET_BUFFERSW lpBuffersIn,LPINTERNET_BUFFERSW lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
HttpSendRequestW(HINTERNET hRequest,LPCWSTR lpszHeaders,DWORD dwHeadersLength,LPVOID lpOptional,DWORD dwOptionalLength) BOOLAPI <wininet.h>
HttpSendResponseEntityBody(HANDLE ReqQueueHandle,HTTP_REQUEST_ID RequestId,ULONG Flags,USHORT EntityChunkCount,PHTTP_DATA_CHUNK pEntityChunks,PULONG pBytesSent,PVOID pReserved1,ULONG Reserved2,LPOVERLAPPED pOverlapped,PVOID pReserved3) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpSetRequestQueueProperty(HANDLE Handle,HTTP_SERVER_PROPERTY Property,PVOID pPropertyInformation,ULONG PropertyInformationLength,ULONG Reserved,PVOID pReserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpSetServerSessionProperty(HTTP_SERVER_SESSION_ID ServerSessionId,HTTP_SERVER_PROPERTY Property,PVOID pPropertyInformation,ULONG PropertyInformationLength) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpSetServiceConfiguration(HANDLE ServiceHandle,HTTP_SERVICE_CONFIG_ID ConfigId,PVOID pConfigInformation,ULONG ConfigInformationLength,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpSetUrlGroupProperty(HTTP_URL_GROUP_ID UrlGroupId,HTTP_SERVER_PROPERTY Property,PVOID pPropertyInformation,ULONG PropertyInformationLength) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpShutdownRequestQueue(HANDLE ReqQueueHandle) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpTerminate(ULONG Flags,PVOID pReserved) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpWaitForDemandStart(HANDLE ReqQueueHandle,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HttpWaitForDisconnect(HANDLE ReqQueueHandle,HTTP_CONNECTION_ID ConnectionId,LPOVERLAPPED pOverlapped) HTTPAPI_LINKAGE ULONG WINAPI <http.h>
HTUI_DeviceColorAdjustment(LPSTR pDeviceName,PDEVHTADJDATA pDevHTAdjData)<winddi.h>
HubSymNameActualLength(IN PVOID BusContext,IN PVOID HubSymNameBuffer,IN ULONG HubSymNameBufferLength,OUT PULONG) OUT PULONG <hubbusif.h>
HWND_16(h32)<wownt32.h>
HWND_32(h16)<wownt32.h>
HWND_UserFree(ULONG *,HWND *)void            __RPC_USER <wpcapi.h>
HWND_UserMarshal(ULONG *,unsigned char *,HWND *)unsigned char<wpcapi.h>
HWND_UserSize(ULONG *,ULONG,HWND *) ULONG __RPC_API <wiavideo.h>
HWND_UserUnmarshal(ULONG *,unsigned char *,HWND *)unsigned char<wpcapi.h>
HwndFromHtrg(htrg)<penwin.h>
HwndMSWheel(PUINT puiMsh_MsgMouseWheel,PUINT puiMsh_Msg3DSupport,PUINT puiMsh_MsgScrollLines,PBOOL pf3DSupport,PINT piScrollLines)__CRT_INLINE HWND <zmouse.h>
HwndRenderTargetProperties(0)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)),D2D1_PRESENT_OPTIONS presentOptions=D2D1_PRESENT_OPTIONS_NONE)D2D1FORCEINLINE D2D1_HWND_RENDER_TARGET_PROPERTIES <d2d1helper.h>
HyphenateProc(WCHAR * pszWord,LANGID langid,__LONG32 ichExceed,HYPHRESULT * phyphresult) void WINAPI <richedit.h>
I128vec1() <dvec.h>
I128vec1(__m128i mm) <dvec.h>
I128vec1(const M128 & a) <dvec.h>
I16vec8() <dvec.h>
I16vec8(__m128i mm) <dvec.h>
I16vec8(const I16vec8 & a) <dvec.h>
I16vec8(const M128 & a) <dvec.h>
I16vec8(int count) <dvec.h>
I32vec4() <dvec.h>
I32vec4(__m128i mm) <dvec.h>
I32vec4(const I32vec4 & a) <dvec.h>
I32vec4(const M128 & a) <dvec.h>
I32vec4(int count) <dvec.h>
I64vec2() <dvec.h>
I64vec2(__m128i mm) <dvec.h>
I64vec2(__m64 q1,__m64 q0) __MINGW_EXTENSION <dvec.h>
I64vec2(const I64vec2 & a) <dvec.h>
I64vec2(const M128 & a) <dvec.h>
I64vec2(int count) <dvec.h>
I64vec2(int i) __MINGW_EXTENSION const __int64<dvec.h>
I8vec16() <dvec.h>
I8vec16(__m128i mm) <dvec.h>
I8vec16(const I8vec16 & a) <dvec.h>
I8vec16(const M128 & a) <dvec.h>
I_CryptGetAsn1Decoder(HCRYPTASN1MODULE hAsn1Module) ASN1decoding_t WINAPI <i_cryptasn1tls.h>
I_CryptGetAsn1Encoder(HCRYPTASN1MODULE hAsn1Module) ASN1encoding_t WINAPI <i_cryptasn1tls.h>
I_CryptInstallAsn1Module(ASN1module_t pMod,DWORD dwFlags,void * pvReserved) HCRYPTASN1MODULE WINAPI <i_cryptasn1tls.h>
I_CryptUninstallAsn1Module(HCRYPTASN1MODULE hAsn1Module) WINBOOL WINAPI <i_cryptasn1tls.h>
I_NetLogonControl(LPCWSTR ServerName,DWORD FunctionCode,DWORD QueryLevel,LPBYTE * Buffer) NET_API_STATUS WINAPI <lmaccess.h>
I_NetLogonControl2(LPCWSTR ServerName,DWORD FunctionCode,DWORD QueryLevel,LPBYTE Data,LPBYTE * Buffer) NET_API_STATUS WINAPI <lmaccess.h>
I_NsClientBindDone(void) RPCNSAPI void RPC_ENTRY <rpcnsip.h>
I_NsClientBindSearch(void) RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsip.h>
I_NsServerBindSearch(void) RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsip.h>
I_RpcAllocate(unsigned int Size) RPCRTAPI void<rpcdcep.h>
I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned __LONG32 ExceptionCode) RPC_STATUS RPC_ENTRY <rpcasync.h>
I_RpcAsyncSetHandle(PRPC_MESSAGE Message,PRPC_ASYNC_STATE pAsync) RPC_STATUS RPC_ENTRY <rpcasync.h>
I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE * DestinationBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding,void ** AsyncHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding,void ** ConnId,int * pfFirstCall) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqDynamicEndpoint(RPC_BINDING_HANDLE Binding,RPC_CSTR * DynamicEndpoint) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding,RPC_CSTR * DynamicEndpoint) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding,RPC_WSTR * DynamicEndpoint) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding,unsigned __LONG32 * Pid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding,unsigned __LONG32 * MarshalledTargetInfoLength,RPC_CSTR * MarshalledTargetInfo) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding,void ** SecurityContextHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding,unsigned int * Type) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding,RPC_CSTR WireId) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle,unsigned int * ClientLocalFlag) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding,RPC_BLOCKING_FN BlockingFn,unsigned __LONG32 ServerTid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding,unsigned short ** StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcClearMutex(I_RPC_MUTEX Mutex) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcConnectionInqSockBuffSize(unsigned __LONG32 * RecvBuffSize,unsigned __LONG32 * SendBuffSize) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcConnectionSetSockBuffSize(unsigned __LONG32 RecvBuffSize,unsigned __LONG32 SendBuffSize) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcDeleteMutex(I_RPC_MUTEX Mutex) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcExceptionFilter(unsigned __LONG32 ExceptionCode) int RPC_ENTRY <rpcasync.h>
I_RpcFree(void * Object) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcFreeBuffer(RPC_MESSAGE * Message) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcFreeCalloutStateFn(RDR_CALLOUT_STATE * CallOutState) typedef void<rpcdcep.h>
I_RpcFreePipeBuffer(RPC_MESSAGE * Message) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle,void ** AssociationContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcGetBuffer(RPC_MESSAGE * Message) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcGetBufferWithObject(RPC_MESSAGE * Message,UUID * ObjectUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcGetCurrentCallHandle(void) RPCRTAPI RPC_BINDING_HANDLE RPC_ENTRY <rpcdcep.h>
I_RpcGetExtendedError(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle) RPCRTAPI void<rpcdcep.h>
I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle,RPC_TRANSFER_SYNTAX * TransferSyntaxes,unsigned int TransferSyntaxSize,unsigned int * TransferSyntaxCount) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcLaunchDatagramReceiveThread(void * pAddress) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcMapWin32Status(RPC_STATUS Status) RPCRTAPI __LONG32 RPC_ENTRY <rpcdcep.h>
I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle,PRPC_RUNDOWN RundownRoutine,void * Context) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNegotiateTransferSyntax(RPC_MESSAGE * Message) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNsBindingSetEntryName(RPC_BINDING_HANDLE Binding,unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding,unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding,unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNsGetBuffer(PRPC_MESSAGE Message) RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsip.h>
I_RpcNsInterfaceExported(unsigned __LONG32 EntryNameSyntax,unsigned short * EntryName,RPC_SERVER_INTERFACE * RpcInterfaceInformation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNsInterfaceUnexported(unsigned __LONG32 EntryNameSyntax,unsigned short * EntryName,RPC_SERVER_INTERFACE * RpcInterfaceInformation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcNsRaiseException(PRPC_MESSAGE Message,RPC_STATUS Status) RPCNSAPI void RPC_ENTRY <rpcnsip.h>
I_RpcNsSendReceive(PRPC_MESSAGE Message,RPC_BINDING_HANDLE * Handle) RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsip.h>
I_RpcPauseExecution(unsigned __LONG32 Milliseconds) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcPerformCalloutFn(void * Context,RDR_CALLOUT_STATE * CallOutState,RPC_HTTP_REDIRECTOR_STAGE Stage) typedef RPC_STATUS<rpcdcep.h>
I_RpcProxyGetClientAddressFn(void * Context,char * Buffer,unsigned __LONG32 * BufferLength) typedef RPC_STATUS<rpcdcep.h>
I_RpcProxyGetConnectionTimeoutFn(unsigned __LONG32 * ConnectionTimeout) typedef RPC_STATUS<rpcdcep.h>
I_RpcProxyIsValidMachineFn(char * pszMachine,char * pszDotMachine,unsigned __LONG32 dwPortNumber) typedef RPC_STATUS<rpcdcep.h>
I_RpcProxyNewConnection(unsigned __LONG32 ConnectionType,unsigned short * ServerAddress,unsigned short * ServerPort,unsigned short * MinConnTimeout,void * ConnectionParameter,RDR_CALLOUT_STATE * CallOutState,I_RpcProxyCallbackInterface * ProxyCallbackInterface) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcReallocPipeBuffer(PRPC_MESSAGE Message,unsigned int NewSize) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcReBindBuffer(PRPC_MESSAGE Message) RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsip.h>
I_RpcReceive(PRPC_MESSAGE Message,unsigned int Size) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus,RDR_CALLOUT_STATE * CallOutState,unsigned short * DllName) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcReplyToClientWithStatus(void * ConnectionParameter,RPC_STATUS RpcStatus) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcRequestMutex(I_RPC_MUTEX * Mutex) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcSend(PRPC_MESSAGE Message) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcSendReceive(RPC_MESSAGE * Message) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerInqAddressChangeFn() RPC_ADDRESS_CHANGE_FN<rpcdcep.h>
I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding,void * Buffer,unsigned __LONG32 * BufferSize,unsigned __LONG32 * AddressFormat) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerInqTransportType(unsigned int * Type) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION * pForwardFunction) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN * pAddressChangeFn) RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerStartListening(void * hWnd) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerStopListening() RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUnregisterEndpoint(RPC_CSTR Protseq,RPC_CSTR Endpoint) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq,RPC_CSTR Endpoint) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq,RPC_WSTR Endpoint) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUseProtseq2(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor,void * Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor,void * Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor,void * Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUseProtseqEp2(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void * SecurityDescriptor,void * Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void * SecurityDescriptor,void * Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void * SecurityDescriptor,void * Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcSessionStrictContextHandle(void) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle,void * ServerContextList) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcSetThreadParams(int fClientFree,void * Context,void * hWndClient) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcSsDontSerializeContext(void) RPCRTAPI void RPC_ENTRY <rpcdcep.h>
I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcTurnOnEEInfoPropagation(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
I_RpcWindowProc(void * hWnd,unsigned int Message,unsigned int wParam,unsigned __LONG32 lParam) RPCRTAPI unsigned int RPC_ENTRY <rpcdcep.h>
I_UuidCreate(UUID * Uuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdcep.h>
Ia64Axp(a,b)<ndr64types.h>
IADMEXT(CLSID * pclsidDcom,DWORD dwEnumIndex) virtual HRESULT WINAPI EnumDcomCLSIDs<iadmext.h>
IADMEXT(void) virtual HRESULT WINAPI Terminate<iadmext.h>
IAMFilterGraphCallback(IPin * pPin)virtual HRESULT UnableToRender<strmif.h>
IAVertexBuffers(D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT)BYTE <d3d10effect.h>
IBaseVideoMixer_AddRef(IBaseVideoMixer * This)static FORCEINLINE ULONG <amvideo.h>
IBaseVideoMixer_GetClockPeriod(IBaseVideoMixer * This,int * pbValue)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_GetInputPinCount(IBaseVideoMixer * This,int * piPinCount)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_GetLeadPin(IBaseVideoMixer * This,int * piPin)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_IsUsingClock(IBaseVideoMixer * This,int * pbValue)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_QueryInterface(IBaseVideoMixer * This,REFIID riid,void ** ppvObject)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_Release(IBaseVideoMixer * This)static FORCEINLINE ULONG <amvideo.h>
IBaseVideoMixer_SetClockPeriod(IBaseVideoMixer * This,int bValue)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_SetLeadPin(IBaseVideoMixer * This,int iPin)static FORCEINLINE HRESULT <amvideo.h>
IBaseVideoMixer_SetUsingClock(IBaseVideoMixer * This,int bValue)static FORCEINLINE HRESULT <amvideo.h>
ICAbout(hic,hwnd)<vfw.h>
ICClose(HIC hic) LRESULT WINAPI <vfw.h>
ICCompress(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiOutput,LPVOID lpData,LPBITMAPINFOHEADER lpbiInput,LPVOID lpBits,LPDWORD lpckid,LPDWORD lpdwFlags,LONG lFrameNum,DWORD dwFrameSize,DWORD dwQuality,LPBITMAPINFOHEADER lpbiPrev,LPVOID lpPrev) DWORD WINAPIV <vfw.h>
ICCompressBegin(hic,lpbiInput,lpbiOutput)<vfw.h>
ICCompressEnd(hic)<vfw.h>
ICCompressGetFormat(hic,lpbiInput,lpbiOutput)<vfw.h>
ICCompressGetFormatSize(hic,lpbi)<vfw.h>
ICCompressGetSize(hic,lpbiInput,lpbiOutput)<vfw.h>
ICCompressorChoose(HWND hwnd,UINT uiFlags,LPVOID pvIn,LPVOID lpData,PCOMPVARS pc,LPSTR lpszTitle) WINBOOL WINAPI <vfw.h>
ICCompressorFree(PCOMPVARS pc) void WINAPI <vfw.h>
ICCompressQuery(hic,lpbiInput,lpbiOutput)<vfw.h>
ICConfigure(hic,hwnd)<vfw.h>
ICDecompress(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiFormat,LPVOID lpData,LPBITMAPINFOHEADER lpbi,LPVOID lpBits) DWORD WINAPIV <vfw.h>
ICDecompressBegin(hic,lpbiInput,lpbiOutput)<vfw.h>
ICDecompressEnd(hic)<vfw.h>
ICDecompressEx(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiSrc,LPVOID lpSrc,int xSrc,int ySrc,int dxSrc,int dySrc,LPBITMAPINFOHEADER lpbiDst,LPVOID lpDst,int xDst,int yDst,int dxDst,int dyDst) __CRT_INLINE LRESULT WINAPI <vfw.h>
ICDecompressExBegin(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiSrc,LPVOID lpSrc,int xSrc,int ySrc,int dxSrc,int dySrc,LPBITMAPINFOHEADER lpbiDst,LPVOID lpDst,int xDst,int yDst,int dxDst,int dyDst) __CRT_INLINE LRESULT WINAPI <vfw.h>
ICDecompressExEnd(hic)<vfw.h>
ICDecompressExQuery(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiSrc,LPVOID lpSrc,int xSrc,int ySrc,int dxSrc,int dySrc,LPBITMAPINFOHEADER lpbiDst,LPVOID lpDst,int xDst,int yDst,int dxDst,int dyDst) __CRT_INLINE LRESULT WINAPI <vfw.h>
ICDecompressGetFormat(hic,lpbiInput,lpbiOutput)<vfw.h>
ICDecompressGetFormatSize(hic,lpbi)<vfw.h>
ICDecompressGetPalette(hic,lpbiInput,lpbiOutput)<vfw.h>
ICDecompressOpen(fccType,fccHandler,lpbiIn,lpbiOut)<vfw.h>
ICDecompressQuery(hic,lpbiInput,lpbiOutput)<vfw.h>
ICDecompressSetPalette(hic,lpbiPalette)<vfw.h>
ICDraw(HIC hic,DWORD dwFlags,LPVOID lpFormat,LPVOID lpData,DWORD cbData,LONG lTime) DWORD WINAPIV <vfw.h>
ICDrawBegin(HIC hic,DWORD dwFlags,HPALETTE hpal,HWND hwnd,HDC hdc,int xDst,int yDst,int dxDst,int dyDst,LPBITMAPINFOHEADER lpbi,int xSrc,int ySrc,int dxSrc,int dySrc,DWORD dwRate,DWORD dwScale) DWORD WINAPIV <vfw.h>
ICDrawChangePalette(hic,lpbiInput)<vfw.h>
ICDrawEnd(hic)<vfw.h>
ICDrawFlush(hic)<vfw.h>
ICDrawGetTime(hic,lplTime)<vfw.h>
ICDrawOpen(fccType,fccHandler,lpbiIn)<vfw.h>
ICDrawQuery(hic,lpbiInput)<vfw.h>
ICDrawRealize(hic,hdc,fBackground)<vfw.h>
ICDrawRenderBuffer(hic)<vfw.h>
ICDrawSetTime(hic,lTime)<vfw.h>
ICDrawStart(hic)<vfw.h>
ICDrawStartPlay(hic,lFrom,lTo)<vfw.h>
ICDrawStop(hic)<vfw.h>
ICDrawStopPlay(hic)<vfw.h>
ICDrawSuggestFormat(HIC hic,LPBITMAPINFOHEADER lpbiIn,LPBITMAPINFOHEADER lpbiOut,int dxSrc,int dySrc,int dxDst,int dyDst,HIC hicDecomp) __CRT_INLINE LRESULT WINAPI <vfw.h>
ICDrawWindow(hic,prc)<vfw.h>
ICEnroll(BSTR * pbstr)virtual HRESULT WINAPI get_SPCFileName<xenroll.h>
ICEnroll(BSTR * pbstrContainer)virtual HRESULT WINAPI get_ContainerName<xenroll.h>
ICEnroll(BSTR * pbstrName)virtual HRESULT WINAPI get_RootStoreName<xenroll.h>
ICEnroll(BSTR * pbstrProvider)virtual HRESULT WINAPI get_ProviderName<xenroll.h>
ICEnroll(BSTR * pbstrType)virtual HRESULT WINAPI get_RootStoreType<xenroll.h>
ICEnroll(BSTR bstr)virtual HRESULT WINAPI put_SPCFileName<xenroll.h>
ICEnroll(BSTR bstrContainer)virtual HRESULT WINAPI put_ContainerName<xenroll.h>
ICEnroll(BSTR bstrName)virtual HRESULT WINAPI put_RootStoreName<xenroll.h>
ICEnroll(BSTR bstrProvider)virtual HRESULT WINAPI put_ProviderName<xenroll.h>
ICEnroll(BSTR bstrType)virtual HRESULT WINAPI put_RootStoreType<xenroll.h>
ICEnroll(BSTR DNName,BSTR Usage,BSTR * pPKCS10)virtual HRESULT WINAPI createPKCS10<xenroll.h>
ICEnroll(BSTR DNName,BSTR Usage,BSTR wszPKCS10FileName)virtual HRESULT WINAPI createFilePKCS10<xenroll.h>
ICEnroll(BSTR PKCS7)virtual HRESULT WINAPI acceptPKCS7<xenroll.h>
ICEnroll(BSTR PKCS7OrPKCS10)virtual HRESULT WINAPI freeRequestInfo<xenroll.h>
ICEnroll(BSTR wszPKCS7,BSTR * pbstrCert)virtual HRESULT WINAPI getCertFromPKCS7<xenroll.h>
ICEnroll(BSTR wszPKCS7FileName)virtual HRESULT WINAPI acceptFilePKCS7<xenroll.h>
ICEnroll(LONG * pdw)virtual HRESULT WINAPI get_KeySpec<xenroll.h>
ICEnroll(LONG * pdwFlags)virtual HRESULT WINAPI get_RootStoreFlags<xenroll.h>
ICEnroll(LONG * pdwType)virtual HRESULT WINAPI get_ProviderType<xenroll.h>
ICEnroll(LONG dw)virtual HRESULT WINAPI put_KeySpec<xenroll.h>
ICEnroll(LONG dwFlags)virtual HRESULT WINAPI put_RootStoreFlags<xenroll.h>
ICEnroll(LONG dwIndex,BSTR * pbstr)virtual HRESULT WINAPI enumContainers<xenroll.h>
ICEnroll(LONG dwIndex,LONG dwFlags,BSTR * pbstrProvName)virtual HRESULT WINAPI enumProviders<xenroll.h>
ICEnroll(LONG dwType)virtual HRESULT WINAPI put_ProviderType<xenroll.h>
ICEnroll(WINBOOL * fBool)virtual HRESULT WINAPI get_WriteCertToCSP<xenroll.h>
ICEnroll(WINBOOL * fDelete)virtual HRESULT WINAPI get_DeleteRequestCert<xenroll.h>
ICEnroll(WINBOOL * fUseExistingKeys)virtual HRESULT WINAPI get_UseExistingKeySet<xenroll.h>
ICEnroll(WINBOOL fBool)virtual HRESULT WINAPI put_WriteCertToCSP<xenroll.h>
ICEnroll(WINBOOL fDelete)virtual HRESULT WINAPI put_DeleteRequestCert<xenroll.h>
ICEnroll(WINBOOL fUseExistingKeys)virtual HRESULT WINAPI put_UseExistingKeySet<xenroll.h>
ICEnroll2(BSTR CertType)virtual HRESULT WINAPI addCertTypeToRequest<xenroll.h>
ICEnroll2(BSTR Name,BSTR Value)virtual HRESULT WINAPI addNameValuePairToSignature<xenroll.h>
ICEnroll2(WINBOOL * fBool)virtual HRESULT WINAPI get_WriteCertToUserDS<xenroll.h>
ICEnroll2(WINBOOL fBool)virtual HRESULT WINAPI put_WriteCertToUserDS<xenroll.h>
ICEnroll3(BSTR PKCS7)virtual HRESULT WINAPI InstallPKCS7<xenroll.h>
ICEnroll3(LONG * hashAlgID)virtual HRESULT WINAPI get_HashAlgID<xenroll.h>
ICEnroll3(LONG * pdwKeySpec)virtual HRESULT WINAPI GetSupportedKeySpec<xenroll.h>
ICEnroll3(LONG algID,BSTR * pbstr)virtual HRESULT WINAPI GetAlgName<xenroll.h>
ICEnroll3(LONG dwIndex,LONG algClass,LONG * pdwAlgID)virtual HRESULT WINAPI EnumAlgs<xenroll.h>
ICEnroll3(LONG hashAlgID)virtual HRESULT WINAPI put_HashAlgID<xenroll.h>
ICEnroll3(void)virtual HRESULT WINAPI Reset<xenroll.h>
ICEnroll3(WINBOOL * fEnableSMIMECapabilities)virtual HRESULT WINAPI get_EnableSMIMECapabilities<xenroll.h>
ICEnroll3(WINBOOL * fLimitExchangeKeyToEncipherment)virtual HRESULT WINAPI get_LimitExchangeKeyToEncipherment<xenroll.h>
ICEnroll3(WINBOOL * fReuseHardwareKeyIfUnableToGenNew)virtual HRESULT WINAPI get_ReuseHardwareKeyIfUnableToGenNew<xenroll.h>
ICEnroll3(WINBOOL fEnableSMIMECapabilities)virtual HRESULT WINAPI put_EnableSMIMECapabilities<xenroll.h>
ICEnroll3(WINBOOL fLimitExchangeKeyToEncipherment)virtual HRESULT WINAPI put_LimitExchangeKeyToEncipherment<xenroll.h>
ICEnroll3(WINBOOL fMin,WINBOOL fExchange,LONG * pdwKeySize)virtual HRESULT WINAPI GetKeyLen<xenroll.h>
ICEnroll3(WINBOOL fReuseHardwareKeyIfUnableToGenNew)virtual HRESULT WINAPI put_ReuseHardwareKeyIfUnableToGenNew<xenroll.h>
ICEnroll4(BSTR * pbstrCert)virtual HRESULT WINAPI get_PrivateKeyArchiveCertificate<xenroll.h>
ICEnroll4(BSTR * pbstrThumbPrint)virtual HRESULT WINAPI get_ThumbPrint<xenroll.h>
ICEnroll4(BSTR bstrCert)virtual HRESULT WINAPI put_SignerCertificate<xenroll.h>
ICEnroll4(BSTR bstrThumbPrint)virtual HRESULT WINAPI put_ThumbPrint<xenroll.h>
ICEnroll4(BSTR PKCS7,LONG * plCertInstalled)virtual HRESULT WINAPI InstallPKCS7Ex<xenroll.h>
ICEnroll4(BSTR strPassword,BSTR * pstrPFX)virtual HRESULT WINAPI createPFX<xenroll.h>
ICEnroll4(BSTR strPassword,BSTR strPFXFileName)virtual HRESULT WINAPI createFilePFX<xenroll.h>
ICEnroll4(BSTR strProvName,LONG * plProvType)virtual HRESULT WINAPI getProviderType<xenroll.h>
ICEnroll4(BSTR strResponse)virtual HRESULT WINAPI acceptResponse<xenroll.h>
ICEnroll4(BSTR strResponse,BSTR * pstrCert)virtual HRESULT WINAPI getCertFromResponse<xenroll.h>
ICEnroll4(BSTR strResponseFileName)virtual HRESULT WINAPI acceptFileResponse<xenroll.h>
ICEnroll4(BSTR strResponseFileName,BSTR * pstrCert)virtual HRESULT WINAPI getCertFromFileResponse<xenroll.h>
ICEnroll4(BSTR strThumbprint)virtual HRESULT WINAPI removePendingRequest<xenroll.h>
ICEnroll4(LONG * plClientId)virtual HRESULT WINAPI get_ClientId<xenroll.h>
ICEnroll4(LONG Flags,BSTR strBinary,BSTR * pstrEncoded)virtual HRESULT WINAPI binaryToString<xenroll.h>
ICEnroll4(LONG Flags,BSTR strDNName,BSTR strUsage,BSTR strRequestFileName)virtual HRESULT WINAPI createFileRequest<xenroll.h>
ICEnroll4(LONG Flags,BSTR strDNName,BSTR Usage,BSTR * pstrRequest)virtual HRESULT WINAPI createRequest<xenroll.h>
ICEnroll4(LONG Flags,BSTR strEncoded,BSTR * pstrBinary)virtual HRESULT WINAPI stringToBinary<xenroll.h>
ICEnroll4(LONG Flags,BSTR strName,BSTR strValue)virtual HRESULT WINAPI addNameValuePairToRequest<xenroll.h>
ICEnroll4(LONG lClientId)virtual HRESULT WINAPI put_ClientId<xenroll.h>
ICEnroll4(LONG lIndex,LONG lDesiredProperty,VARIANT * pvarProperty)virtual HRESULT WINAPI enumPendingRequest<xenroll.h>
ICEnroll4(LONG lPropertyId,LONG lReserved,BSTR bstrProperty)virtual HRESULT WINAPI addBlobPropertyToCertificate<xenroll.h>
ICEnroll4(LONG lRequestID,BSTR strCADNS,BSTR strCAName,BSTR strFriendlyName)virtual HRESULT WINAPI setPendingRequestInfo<xenroll.h>
ICEnroll4(LONG lSizeSpec,LONG lKeySpec,LONG * pdwKeySize)virtual HRESULT WINAPI GetKeyLenEx<xenroll.h>
ICEnroll4(LONG lType,BSTR bstrOIDOrName,LONG lMajorVersion,WINBOOL fMinorVersion,LONG lMinorVersion)virtual HRESULT WINAPI addCertTypeToRequestEx<xenroll.h>
ICEnroll4(void)virtual HRESULT WINAPI resetExtensions<xenroll.h>
ICEnroll4(WINBOOL * pfInclude)virtual HRESULT WINAPI get_IncludeSubjectKeyID<xenroll.h>
ICEnroll4(WINBOOL fInclude)virtual HRESULT WINAPI put_IncludeSubjectKeyID<xenroll.h>
ICGetBuffersWanted(hic,lpdwBuffers)<vfw.h>
ICGetDefaultKeyFrameRate(hic)<vfw.h>
ICGetDefaultQuality(hic)<vfw.h>
ICGetDisplayFormat(HIC hic,LPBITMAPINFOHEADER lpbiIn,LPBITMAPINFOHEADER lpbiOut,int BitDepth,int dx,int dy) HIC WINAPI <vfw.h>
ICGetInfo(HIC hic,ICINFO * picinfo,DWORD cb) LRESULT WINAPI <vfw.h>
ICGetState(hic,pv,cb)<vfw.h>
ICGetStateSize(hic)<vfw.h>
ICImageCompress(HIC hic,UINT uiFlags,LPBITMAPINFO lpbiIn,LPVOID lpBits,LPBITMAPINFO lpbiOut,LONG lQuality,LONG * plSize) HANDLE WINAPI <vfw.h>
ICImageDecompress(HIC hic,UINT uiFlags,LPBITMAPINFO lpbiIn,LPVOID lpBits,LPBITMAPINFO lpbiOut) HANDLE WINAPI <vfw.h>
ICInfo(DWORD fccType,DWORD fccHandler,ICINFO * lpicinfo) WINBOOL WINAPI <vfw.h>
ICInstall(DWORD fccType,DWORD fccHandler,LPARAM lParam,LPSTR szDesc,UINT wFlags) WINBOOL WINAPI <vfw.h>
ICLocate(DWORD fccType,DWORD fccHandler,LPBITMAPINFOHEADER lpbiIn,LPBITMAPINFOHEADER lpbiOut,WORD wFlags) HIC WINAPI <vfw.h>
ICMENUMPROCA(LPSTR,LPARAM) typedef int<wingdi.h>
ICMENUMPROCW(LPWSTR,LPARAM) typedef int<wingdi.h>
Icmp6CreateFile(VOID) HANDLE WINAPI <icmpapi.h>
Icmp6ParseReplies(LPVOID ReplyBuffer,DWORD ReplySize) DWORD WINAPI <icmpapi.h>
Icmp6SendEcho2(HANDLE IcmpHandle,HANDLE Event,FARPROC ApcRoutine,PVOID ApcContext,struct sockaddr_in6 * SourceAddress,struct sockaddr_in6 * DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout) DWORD WINAPI <icmpapi.h>
Icmp6SendEcho2(HANDLE IcmpHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,struct sockaddr_in6 * SourceAddress,struct sockaddr_in6 * DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout) DWORD WINAPI <icmpapi.h>
IcmpCloseHandle(HANDLE IcmpHandle) WINBOOL WINAPI <icmpapi.h>
IcmpCreateFile(VOID) HANDLE WINAPI <icmpapi.h>
IcmpParseReplies(LPVOID ReplyBuffer,DWORD ReplySize) DWORD WINAPI <icmpapi.h>
IcmpSendEcho(HANDLE IcmpHandle,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout) DWORD WINAPI <icmpapi.h>
IcmpSendEcho2(HANDLE IcmpHandle,HANDLE Event,FARPROC ApcRoutine,PVOID ApcContext,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout) DWORD WINAPI <icmpapi.h>
IcmpSendEcho2(HANDLE IcmpHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,IPAddr DestinationAddress,LPVOID RequestData,WORD RequestSize,PIP_OPTION_INFORMATION RequestOptions,LPVOID ReplyBuffer,DWORD ReplySize,DWORD Timeout) DWORD WINAPI <icmpapi.h>
ICOpen(DWORD fccType,DWORD fccHandler,UINT wMode) HIC WINAPI <vfw.h>
ICOpenFunction(DWORD fccType,DWORD fccHandler,UINT wMode,FARPROC lpfnHandler) HIC WINAPI <vfw.h>
ICQueryAbout(hic)<vfw.h>
ICQueryConfigure(hic)<vfw.h>
ICRemove(DWORD fccType,DWORD fccHandler,UINT wFlags) WINBOOL WINAPI <vfw.h>
ICSendMessage(HIC hic,UINT msg,DWORD_PTR dw1,DWORD_PTR dw2) LRESULT WINAPI <vfw.h>
ICSeqCompressFrame(PCOMPVARS pc,UINT uiFlags,LPVOID lpBits,WINBOOL * pfKey,LONG * plSize) LPVOID WINAPI <vfw.h>
ICSeqCompressFrameEnd(PCOMPVARS pc) void WINAPI <vfw.h>
ICSeqCompressFrameStart(PCOMPVARS pc,LPBITMAPINFO lpbiIn) WINBOOL WINAPI <vfw.h>
ICSetState(hic,pv,cb)<vfw.h>
ICSetStatusProc(LPARAM,UINT,LONG))))))))))))))))) __CRT_INLINE LRESULT WINAPI <vfw.h>
ID3DInclude_Close(ID3DInclude * This,const void * data)static FORCEINLINE HRESULT <d3dcommon.h>
ID3DInclude_Open(ID3DInclude * This,D3D_INCLUDE_TYPE include_type,const char * filename,const void * parent_data,const void ** data,UINT * bytes)static FORCEINLINE HRESULT <d3dcommon.h>
IdentifyNtmsSlot(HANDLE hSession,LPNTMS_GUID lpSlotId,DWORD dwOption) DWORD WINAPI <ntmsapi.h>
Identity()static D2D1FORCEINLINE Matrix3x2F <subauth.h>
IdentityMatrix()D2D1FORCEINLINE D2D1_MATRIX_3X2_F <d2d1helper.h>
IdErrInfo(IN PVOID BusContext,IN OUT PUSB_DEVICE_HANDLE DeviceHandle,OUT PUSB_ID_ERROR_INFORMATION) OUT PUSB_ID_ERROR_INFORMATION  <hubbusif.h>
IDIRECTXFILEOBJECT_METHODS(kind)<dxfile.h>
Idle(__LONG32 dwCharID,__LONG32 bStart)virtual HRESULT WINAPI <winnt.h>
IDListContainerIsConsistent(PCUIDLIST_RELATIVE p,UINT sz) __forceinline WINBOOL <shlobj.h>
IdnToAscii(DWORD dwFlags,LPCWSTR lpUnicodeCharStr,int cchUnicodeChar,LPWSTR lpASCIICharStr,int cchASCIIChar) WINNORMALIZEAPI int WINAPI <winnls.h>
IdnToNameprepUnicode(DWORD dwFlags,LPCWSTR lpUnicodeCharStr,int cchUnicodeChar,LPWSTR lpNameprepCharStr,int cchNameprepChar) WINNORMALIZEAPI int WINAPI <winnls.h>
IdnToUnicode(DWORD dwFlags,LPCWSTR lpASCIICharStr,int cchASCIIChar,LPWSTR lpUnicodeCharStr,int cchUnicodeChar) WINNORMALIZEAPI int WINAPI <winnls.h>
IDxDiagContainer_EnumChildContainerNames(p,a,b,c)<dxdiag.h>
IDxDiagContainer_EnumPropNames(p,a,b,c)<dxdiag.h>
IDxDiagContainer_GetChildContainer(p,a,b)<dxdiag.h>
IDxDiagContainer_GetNumberOfChildContainers(p,a)<dxdiag.h>
IDxDiagContainer_GetNumberOfProps(p,a)<dxdiag.h>
IDxDiagContainer_GetProp(p,a,b)<dxdiag.h>
IDxDiagProvider_GetRootContainer(p,a)<dxdiag.h>
IDxDiagProvider_Initialize(p,a)<dxdiag.h>
IEGetDisplayName(LPCITEMIDLIST pidl,LPWSTR pwszName,UINT uFlags)virtual HRESULT WINAPI <shdeprecated.h>
IEInstallScope(LPDWORD pdwScope)STDAPI <urlmon.h>
IEIsXMLNSRegistered(LPCWSTR lpszURI,GUID * pCLSID)STDAPI <mshtmhst.h>
IEnroll(CRYPT_DATA_BLOB pkcs7OrPkcs10)virtual HRESULT WINAPI freeRequestInfoBlob<xenroll.h>
IEnroll(LONG * pdw)virtual HRESULT WINAPI get_KeySpec<xenroll.h>
IEnroll(LONG * pdwFlags)virtual HRESULT WINAPI get_RootStoreFlags<xenroll.h>
IEnroll(LONG * pdwType)virtual HRESULT WINAPI get_ProviderType<xenroll.h>
IEnroll(LONG dw)virtual HRESULT WINAPI put_KeySpec<xenroll.h>
IEnroll(LONG dwFlags)virtual HRESULT WINAPI put_RootStoreFlags<xenroll.h>
IEnroll(LONG dwIndex,LONG dwFlags,LPWSTR * pbstrProvName)virtual HRESULT WINAPI enumProvidersWStr<xenroll.h>
IEnroll(LONG dwIndex,LPWSTR * pbstr)virtual HRESULT WINAPI enumContainersWStr<xenroll.h>
IEnroll(LONG dwType)virtual HRESULT WINAPI put_ProviderType<xenroll.h>
IEnroll(LPCWSTR DNName,LPCWSTR Usage,LPCWSTR wszPKCS10FileName)virtual HRESULT WINAPI createFilePKCS10WStr<xenroll.h>
IEnroll(LPCWSTR DNName,LPCWSTR Usage,PCRYPT_DATA_BLOB pPkcs10Blob)virtual HRESULT WINAPI createPKCS10WStr<xenroll.h>
IEnroll(LPCWSTR wszPKCS7FileName)virtual HRESULT WINAPI acceptFilePKCS7WStr<xenroll.h>
IEnroll(LPWSTR * szw)virtual HRESULT WINAPI get_SPCFileNameWStr<xenroll.h>
IEnroll(LPWSTR * szwContainer)virtual HRESULT WINAPI get_ContainerNameWStr<xenroll.h>
IEnroll(LPWSTR * szwName)virtual HRESULT WINAPI get_RootStoreNameWStr<xenroll.h>
IEnroll(LPWSTR * szwProvider)virtual HRESULT WINAPI get_ProviderNameWStr<xenroll.h>
IEnroll(LPWSTR * szwType)virtual HRESULT WINAPI get_RootStoreTypeWStr<xenroll.h>
IEnroll(LPWSTR Name,LPWSTR Value)virtual HRESULT WINAPI AddNameValuePairToSignatureWStr<xenroll.h>
IEnroll(LPWSTR szw)virtual HRESULT WINAPI put_SPCFileNameWStr<xenroll.h>
IEnroll(LPWSTR szwContainer)virtual HRESULT WINAPI put_ContainerNameWStr<xenroll.h>
IEnroll(LPWSTR szwName)virtual HRESULT WINAPI put_RootStoreNameWStr<xenroll.h>
IEnroll(LPWSTR szwProvider)virtual HRESULT WINAPI put_ProviderNameWStr<xenroll.h>
IEnroll(LPWSTR szwType)virtual HRESULT WINAPI put_RootStoreTypeWStr<xenroll.h>
IEnroll(PCCERT_CONTEXT * ppCertContext)virtual HRESULT WINAPI get_RenewalCertificate<xenroll.h>
IEnroll(PCCERT_CONTEXT pCertContext)virtual HRESULT WINAPI put_RenewalCertificate<xenroll.h>
IEnroll(PCERT_EXTENSIONS pCertExtensions)virtual HRESULT WINAPI AddExtensionsToRequest<xenroll.h>
IEnroll(PCRYPT_ATTRIBUTES pAttributes)virtual HRESULT WINAPI AddAuthenticatedAttributesToPKCS7Request<xenroll.h>
IEnroll(PCRYPT_DATA_BLOB pBlobPKCS7)virtual PCCERT_CONTEXT WINAPI getCertContextFromPKCS7<xenroll.h>
IEnroll(PCRYPT_DATA_BLOB pRequest,PCCERT_CONTEXT pSigningCertContext,PCRYPT_DATA_BLOB pPkcs7Blob)virtual HRESULT WINAPI CreatePKCS7RequestFromRequest<xenroll.h>
IEnroll(void)virtual HCERTSTORE WINAPI getROOTHStore<xenroll.h>
IEnroll(WINBOOL * fBool)virtual HRESULT WINAPI get_WriteCertToUserDS<xenroll.h>
IEnroll(WINBOOL * fDelete)virtual HRESULT WINAPI get_DeleteRequestCert<xenroll.h>
IEnroll(WINBOOL * fUseExistingKeys)virtual HRESULT WINAPI get_UseExistingKeySet<xenroll.h>
IEnroll(WINBOOL fBool)virtual HRESULT WINAPI put_WriteCertToUserDS<xenroll.h>
IEnroll(WINBOOL fDelete)virtual HRESULT WINAPI put_DeleteRequestCert<xenroll.h>
IEnroll(WINBOOL fUseExistingKeys)virtual HRESULT WINAPI put_UseExistingKeySet<xenroll.h>
IEnroll2(HCERTSTORE hStore)virtual HRESULT WINAPI SetHStoreRequest<xenroll.h>
IEnroll2(LONG * hashAlgID)virtual HRESULT WINAPI get_HashAlgID<xenroll.h>
IEnroll2(LONG * pdwKeySpec)virtual HRESULT WINAPI GetSupportedKeySpec<xenroll.h>
IEnroll2(LONG algID,LPWSTR * ppwsz)virtual HRESULT WINAPI GetAlgNameWStr<xenroll.h>
IEnroll2(LONG dwIndex,LONG algClass,LONG * pdwAlgID)virtual HRESULT WINAPI EnumAlgs<xenroll.h>
IEnroll2(LONG hashAlgID)virtual HRESULT WINAPI put_HashAlgID<xenroll.h>
IEnroll2(PCRYPT_DATA_BLOB pBlobPKCS7)virtual HRESULT WINAPI InstallPKCS7Blob<xenroll.h>
IEnroll2(void)virtual HRESULT WINAPI Reset<xenroll.h>
IEnroll2(WINBOOL * fEnableSMIMECapabilities)virtual HRESULT WINAPI get_EnableSMIMECapabilities<xenroll.h>
IEnroll2(WINBOOL * fLimitExchangeKeyToEncipherment)virtual HRESULT WINAPI get_LimitExchangeKeyToEncipherment<xenroll.h>
IEnroll2(WINBOOL * fReuseHardwareKeyIfUnableToGenNew)virtual HRESULT WINAPI get_ReuseHardwareKeyIfUnableToGenNew<xenroll.h>
IEnroll2(WINBOOL fEnableSMIMECapabilities)virtual HRESULT WINAPI put_EnableSMIMECapabilities<xenroll.h>
IEnroll2(WINBOOL fLimitExchangeKeyToEncipherment)virtual HRESULT WINAPI put_LimitExchangeKeyToEncipherment<xenroll.h>
IEnroll2(WINBOOL fMin,WINBOOL fExchange,LONG * pdwKeySize)virtual HRESULT WINAPI GetKeyLen<xenroll.h>
IEnroll2(WINBOOL fReuseHardwareKeyIfUnableToGenNew)virtual HRESULT WINAPI put_ReuseHardwareKeyIfUnableToGenNew<xenroll.h>
IEnroll4(CRYPT_DATA_BLOB thumbPrintBlob)virtual HRESULT WINAPI removePendingRequestWStr<xenroll.h>
IEnroll4(LONG * plClientId)virtual HRESULT WINAPI get_ClientId<xenroll.h>
IEnroll4(LONG Flags,LPCWSTR pwszDNName,LPCWSTR pwszUsage,LPCWSTR pwszRequestFileName)virtual HRESULT WINAPI createFileRequestWStr<xenroll.h>
IEnroll4(LONG Flags,LPCWSTR pwszDNName,LPCWSTR pwszUsage,PCRYPT_DATA_BLOB pblobRequest)virtual HRESULT WINAPI createRequestWStr<xenroll.h>
IEnroll4(LONG Flags,LPCWSTR pwszName,LPCWSTR pwszValue)virtual HRESULT WINAPI addNameValuePairToRequestWStr<xenroll.h>
IEnroll4(LONG Flags,LPCWSTR pwszName,PCRYPT_DATA_BLOB pblobValue)virtual HRESULT WINAPI addExtensionToRequestWStr<xenroll.h>
IEnroll4(LONG Flags,LPCWSTR pwszString,PCRYPT_DATA_BLOB pblobBinary,LONG * pdwSkip,LONG * pdwFlags)virtual HRESULT WINAPI stringToBinaryBlob<xenroll.h>
IEnroll4(LONG Flags,PCRYPT_DATA_BLOB pblobBinary,LPWSTR * ppwszString)virtual HRESULT WINAPI binaryBlobToString<xenroll.h>
IEnroll4(LONG lClientId)virtual HRESULT WINAPI put_ClientId<xenroll.h>
IEnroll4(LONG lIndex,LONG lDesiredProperty,LPVOID ppProperty)virtual HRESULT WINAPI enumPendingRequestWStr<xenroll.h>
IEnroll4(LONG lPropertyId,LONG lReserved,PCRYPT_DATA_BLOB pBlobProperty)virtual HRESULT WINAPI addBlobPropertyToCertificateWStr<xenroll.h>
IEnroll4(LONG lRequestID,LPCWSTR pwszCADNS,LPCWSTR pwszCAName,LPCWSTR pwszFriendlyName)virtual HRESULT WINAPI setPendingRequestInfoWStr<xenroll.h>
IEnroll4(LONG lSizeSpec,LONG lKeySpec,LONG * pdwKeySize)virtual HRESULT WINAPI GetKeyLenEx<xenroll.h>
IEnroll4(LONG lType,LPCWSTR pwszOIDOrName,LONG lMajorVersion,WINBOOL fMinorVersion,LONG lMinorVersion)virtual HRESULT WINAPI AddCertTypeToRequestWStrEx<xenroll.h>
IEnroll4(LPCWSTR pwszPassword,LPCWSTR pwszPFXFileName)virtual HRESULT WINAPI createFilePFXWStr<xenroll.h>
IEnroll4(LPCWSTR pwszPassword,PCRYPT_DATA_BLOB pblobPFX)virtual HRESULT WINAPI createPFXWStr<xenroll.h>
IEnroll4(LPCWSTR pwszProvName,LONG * plProvType)virtual HRESULT WINAPI getProviderTypeWStr<xenroll.h>
IEnroll4(LPCWSTR pwszResponseFileName)virtual HRESULT WINAPI acceptFileResponseWStr<xenroll.h>
IEnroll4(LPCWSTR pwszResponseFileName,PCCERT_CONTEXT * ppCertContext)virtual HRESULT WINAPI getCertContextFromFileResponseWStr<xenroll.h>
IEnroll4(PCCERT_CONTEXT pPrivateKeyArchiveCert)virtual HRESULT WINAPI SetPrivateKeyArchiveCertificate<xenroll.h>
IEnroll4(PCCERT_CONTEXT pSignerCert)virtual HRESULT WINAPI SetSignerCertificate<xenroll.h>
IEnroll4(PCRYPT_DATA_BLOB pBlobPKCS7,LONG * plCertInstalled)virtual HRESULT WINAPI InstallPKCS7BlobEx<xenroll.h>
IEnroll4(PCRYPT_DATA_BLOB pblobResponse)virtual HRESULT WINAPI acceptResponseBlob<xenroll.h>
IEnroll4(PCRYPT_DATA_BLOB pblobResponse,PCCERT_CONTEXT * ppCertContext)virtual HRESULT WINAPI getCertContextFromResponseBlob<xenroll.h>
IEnroll4(PCRYPT_DATA_BLOB thumbPrintBlob)virtual HRESULT WINAPI get_ThumbPrintWStr<xenroll.h>
IEnroll4(void)virtual HRESULT WINAPI resetExtensions<xenroll.h>
IEnroll4(WINBOOL * pfInclude)virtual HRESULT WINAPI get_IncludeSubjectKeyID<xenroll.h>
IEnroll4(WINBOOL fInclude)virtual HRESULT WINAPI put_IncludeSubjectKeyID<xenroll.h>
IEParseDisplayName(UINT uiCP,LPCWSTR pwszPath,LPITEMIDLIST * ppidlOut)virtual HRESULT WINAPI <shdeprecated.h>
IEParseDisplayNameEx(UINT uiCP,LPCWSTR pwszPath,DWORD dwFlags,LPITEMIDLIST * ppidlOut)virtual HRESULT WINAPI <shdeprecated.h>
IERegisterXMLNS(LPCWSTR lpszURI,GUID clsid,BOOL fMachine)STDAPI <mshtmhst.h>
IF_NOT_WIN16()()()
IF_NOT_WIN16(x)<wabdefs.h>
IF_NTOS_DEBUG(FlagName)<wdm.h>
IF_WIN16()()()
IF_WIN16(x)<wabdefs.h>
IF_WIN32()()()
IF_WIN32(x)<wabdefs.h>
IFACEMETHOD(method)<combaseapi.h>
IFACEMETHOD()()()
IFACEMETHOD(type, method)<combaseapi.h>
IFACEMETHODIMP(type)<winnt.h>
IFACEMETHODIMPV(type)<winnt.h>
IFACEMETHODV(method)<combaseapi.h>
IFACEMETHODV()()()
IFACEMETHODV(type, method)<combaseapi.h>
IFDBG(x)<mapidbg.h>
IFNDBG(x)<mapidbg.h>
IFTRACE(x)<mapidbg.h>
IFTRAP(x)<mapidbg.h>
IFullScreenVideo_AddRef(IFullScreenVideo * This)static FORCEINLINE ULONG <amvideo.h>
IFullScreenVideo_CountModes(IFullScreenVideo * This,LONG * pModes)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_GetCaption(IFullScreenVideo * This,BSTR * pstrCaption)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_GetClipFactor(IFullScreenVideo * This,LONG * pClipFactor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_GetCurrentMode(IFullScreenVideo * This,LONG * pMode)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_GetMessageDrain(IFullScreenVideo * This,HWND * hwnd)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_GetModeInfo(IFullScreenVideo * This,LONG Mode,LONG * pWidth,LONG * pHeight,LONG * pDepth)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_GetMonitor(IFullScreenVideo * This,LONG * Monitor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_HideOnDeactivate(IFullScreenVideo * This,LONG Hide)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_IsHideOnDeactivate(IFullScreenVideo * This)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_IsModeAvailable(IFullScreenVideo * This,LONG Mode)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_IsModeEnabled(IFullScreenVideo * This,LONG Mode)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_QueryInterface(IFullScreenVideo * This,REFIID riid,void ** ppvObject)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_Release(IFullScreenVideo * This)static FORCEINLINE ULONG <amvideo.h>
IFullScreenVideo_SetCaption(IFullScreenVideo * This,BSTR strCaption)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_SetClipFactor(IFullScreenVideo * This,LONG ClipFactor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_SetDefault(IFullScreenVideo * This)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_SetEnabled(IFullScreenVideo * This,LONG Mode,LONG bEnabled)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_SetMessageDrain(IFullScreenVideo * This,HWND hwnd)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideo_SetMonitor(IFullScreenVideo * This,LONG Monitor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_AddRef(IFullScreenVideoEx * This)static FORCEINLINE ULONG <amvideo.h>
IFullScreenVideoEx_CountModes(IFullScreenVideoEx * This,LONG * pModes)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetAcceleratorTable(IFullScreenVideoEx * This,HWND * phwnd,HACCEL * phAccel)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetCaption(IFullScreenVideoEx * This,BSTR * pstrCaption)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetClipFactor(IFullScreenVideoEx * This,LONG * pClipFactor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetCurrentMode(IFullScreenVideoEx * This,LONG * pMode)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetMessageDrain(IFullScreenVideoEx * This,HWND * hwnd)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetModeInfo(IFullScreenVideoEx * This,LONG Mode,LONG * pWidth,LONG * pHeight,LONG * pDepth)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_GetMonitor(IFullScreenVideoEx * This,LONG * Monitor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_HideOnDeactivate(IFullScreenVideoEx * This,LONG Hide)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_IsHideOnDeactivate(IFullScreenVideoEx * This)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_IsKeepPixelAspectRatio(IFullScreenVideoEx * This,LONG * pKeepAspect)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_IsModeAvailable(IFullScreenVideoEx * This,LONG Mode)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_IsModeEnabled(IFullScreenVideoEx * This,LONG Mode)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_KeepPixelAspectRatio(IFullScreenVideoEx * This,LONG KeepAspect)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_QueryInterface(IFullScreenVideoEx * This,REFIID riid,void ** ppvObject)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_Release(IFullScreenVideoEx * This)static FORCEINLINE ULONG <amvideo.h>
IFullScreenVideoEx_SetAcceleratorTable(IFullScreenVideoEx * This,HWND hwnd,HACCEL hAccel)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_SetCaption(IFullScreenVideoEx * This,BSTR strCaption)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_SetClipFactor(IFullScreenVideoEx * This,LONG ClipFactor)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_SetDefault(IFullScreenVideoEx * This)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_SetEnabled(IFullScreenVideoEx * This,LONG Mode,LONG bEnabled)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_SetMessageDrain(IFullScreenVideoEx * This,HWND hwnd)static FORCEINLINE HRESULT <amvideo.h>
IFullScreenVideoEx_SetMonitor(IFullScreenVideoEx * This,LONG Monitor)static FORCEINLINE HRESULT <amvideo.h>
IHostInfoProvider(GetHostInfo) STDMETHOD<hostinfo.h>
IHostInfoProvider(QueryInterface) STDMETHOD<hostinfo.h>
IHostInfoProvider(ULONG,AddRef) STDMETHOD_<hostinfo.h>
IHostInfoProvider(ULONG,Release) STDMETHOD_<hostinfo.h>
IHostInfoUpdate(QueryInterface) STDMETHOD<hostinfo.h>
IHostInfoUpdate(ULONG,AddRef) STDMETHOD_<hostinfo.h>
IHostInfoUpdate(ULONG,Release) STDMETHOD_<hostinfo.h>
IHostInfoUpdate(UpdateInfo) STDMETHOD<hostinfo.h>
IID_INS_ARGS_internal(T ** p) template<inspectable.h>
IID_PPV_ARGS_Helper(T ** pp) template<combaseapi.h>
IIDFromString(LPCOLESTR lpsz,LPIID lpiid)WINOLEAPI <combaseapi.h>
IImageListToHIMAGELIST(IL)<commctrl.h>
IImageListToHIMAGELIST(struct IImageList * il) FORCEINLINE HIMAGELIST <commctrl.h>
IInetLogInformation(PCHAR pszClientHostName,PDWORD pcbSize) virtual LPSTR WINAPI GetClientHostName<ilogobj.h>
IInetLogInformation(PCHAR pszClientUserName,PDWORD pcbSize) virtual LPSTR WINAPI GetClientUserName<ilogobj.h>
IInetLogInformation(PCHAR pszComputerName,PDWORD pcbSize) virtual LPSTR WINAPI GetComputerName<ilogobj.h>
IInetLogInformation(PCHAR pszHTTPHeaders,PDWORD pcbSize) virtual LPSTR WINAPI GetExtraHTTPHeaders<ilogobj.h>
IInetLogInformation(PCHAR pszOperation,PDWORD pcbSize) virtual LPSTR WINAPI GetOperation<ilogobj.h>
IInetLogInformation(PCHAR pszParameters,PDWORD pcbSize) virtual LPSTR WINAPI GetParameters<ilogobj.h>
IInetLogInformation(PCHAR pszServerIPAddress,PDWORD pcbSize) virtual LPSTR WINAPI GetServerAddress<ilogobj.h>
IInetLogInformation(PCHAR pszSiteName,PDWORD pcbSize) virtual LPSTR WINAPI GetSiteName<ilogobj.h>
IInetLogInformation(PCHAR pszTarget,PDWORD pcbSize) virtual LPSTR WINAPI GetTarget<ilogobj.h>
IInetLogInformation(PCHAR pszVersionString,PDWORD pcbSize) virtual LPSTR WINAPI GetVersionString<ilogobj.h>
IInetLogInformation(VOID) virtual DWORD WINAPI GetWin32Status<ilogobj.h>
IISIntrinsicsConfig(CSC_IISIntrinsicsConfig iisIntrinsicsConfig)virtual HRESULT WINAPI <comsvcs.h>
IkeextGetStatistics0(HANDLE engineHandle,IKEEXT_STATISTICS0 * ikeextStatistics)DWORD WINAPI <fwpmu.h>
IkeextGetStatistics1(HANDLE engineHandle,IKEEXT_STATISTICS1 * ikeextStatistics)DWORD WINAPI <fwpmu.h>
IkeextSaCreateEnumHandle0(HANDLE engineHandle,const IKEEXT_SA_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
IkeextSaDbGetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
IkeextSaDbSetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
IkeextSaDeleteById0(HANDLE engineHandle,UINT64 id)DWORD WINAPI <fwpmu.h>
IkeextSaDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
IkeextSaEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IKEEXT_SA_DETAILS0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
IkeextSaEnum1(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IKEEXT_SA_DETAILS1 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
IkeextSaGetById0(HANDLE engineHandle,UINT64 id,IKEEXT_SA_DETAILS0 ** sa)DWORD WINAPI <fwpmu.h>
IkeextSaGetById1(HANDLE engineHandle,UINT64 id,GUID * saLookupContext,IKEEXT_SA_DETAILS1 ** sa)DWORD WINAPI <fwpmu.h>
IKsPropertySet_AddRef(p)<dsound.h>
IKsPropertySet_Get(p,a,b,c,d,e,f,g)<dsound.h>
IKsPropertySet_QueryInterface(p,a,b)<dsound.h>
IKsPropertySet_QuerySupport(p,a,b,c)<dsound.h>
IKsPropertySet_Release(p)<dsound.h>
IKsPropertySet_Set(p,a,b,c,d,e,f)<dsound.h>
ILAppendID(PIDLIST_RELATIVE pidl,LPCSHITEMID pmkid,WINBOOL fAppend) SHSTDAPI_<shlobj.h>
ILClone(PCUIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILCloneChild(PCUITEMID_CHILD p)inline PITEMID_CHILD <shlobj.h>
ILCloneFirst(PCUIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILCloneFull(PCUIDLIST_ABSOLUTE p)inline PIDLIST_ABSOLUTE <shlobj.h>
ILCombine(PCIDLIST_ABSOLUTE pidl1,PCUIDLIST_RELATIVE pidl2) SHSTDAPI_<shlobj.h>
ILCreateFromPath(PCSTR pszPath) SHSTDAPI_<shlobj.h>
ILCreateFromPath(PCTSTR pszPath) SHSTDAPI_<shlobj.h>
ILCreateFromPathA(PCSTR pszPath) SHSTDAPI_<shlobj.h>
ILCreateFromPathW(PCWSTR pszPath) SHSTDAPI_<shlobj.h>
ILFindChild(PCIDLIST_ABSOLUTE p,PCIDLIST_ABSOLUTE c)inline PCUIDLIST_RELATIVE <shlobj.h>
ILFindChild(PIDLIST_ABSOLUTE pidlParent,PCIDLIST_ABSOLUTE pidlChild) SHSTDAPI_<shlobj.h>
ILFindLastID(PCUIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILFree(PIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILGetNext(PCUIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILGetSize(PCUIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILIsAligned(P)<shlobj.h>
ILIsAligned(PCUIDLIST_RELATIVE p)inline WINBOOL <shlobj.h>
ILIsChild(P)<shlobj.h>
ILIsChild(PCUIDLIST_RELATIVE p)inline WINBOOL <shlobj.h>
ILIsEmpty(P)<shlobj.h>
ILIsEmpty(PCUIDLIST_RELATIVE p)inline WINBOOL <shlobj.h>
ILIsEqual(PCIDLIST_ABSOLUTE pidl1,PCIDLIST_ABSOLUTE pidl2) SHSTDAPI_<shlobj.h>
ILIsParent(PCIDLIST_ABSOLUTE pidl1,PCIDLIST_ABSOLUTE pidl2,WINBOOL fImmediate) SHSTDAPI_<shlobj.h>
ILLoadFromStream(IStream * pstm,PIDLIST_RELATIVE * pidl) SHSTDAPI <shlobj.h>
ILLoadFromStreamEx(IStream * pstm,PIDLIST_RELATIVE * pidl) SHSTDAPI <shlobj.h>
ILLoadFromStreamEx(IStream * s,PIDLIST_ABSOLUTE * p)inline HRESULT <shlobj.h>
ILLoadFromStreamEx(IStream * s,PITEMID_CHILD * p)inline HRESULT <shlobj.h>
ILNext(P)<shlobj.h>
ILNext(PCUIDLIST_RELATIVE p)inline PCUIDLIST_RELATIVE <shlobj.h>
ILNext(PUIDLIST_RELATIVE p)inline PUIDLIST_RELATIVE <shlobj.h>
ILOGENTRY()()()
ILOGENTRY(sig, info1, info2, info3)<usbcamdi.h>
ILogPlugin(DWORD cbSize,PBYTE Log) virtual HRESULT WINAPI SetConfig<ilogobj.h>
ILogPlugin(IInetLogInformation * pLogObj) virtual HRESULT WINAPI LogInformation<ilogobj.h>
ILogPlugin(LPCSTR SiteName,LPCSTR MetabasePath,PCHAR pvIMDCOM) virtual HRESULT WINAPI InitializeLog<ilogobj.h>
ILogPlugin(PDWORD cbSize,PCHAR szParameters) virtual HRESULT WINAPI QueryExtraLoggingFields<ilogobj.h>
ILogPlugin(VOID) virtual HRESULT WINAPI TerminateLog<ilogobj.h>
ILogPluginEx(DWORD cCount,PCUSTOM_LOG_DATA pCustomLogData,LPSTR szHeaderSuffix) virtual HRESULT WINAPI LogCustomInformation<ilogobj.h>
ILogUIPlugin(OLECHAR * pocMachineName,OLECHAR * pocMetabasePath) virtual HRESULT WINAPI OnProperties<ilogobj.h>
ILogUIPlugin2(OLECHAR * pocMachineName,OLECHAR * pocMetabasePath,OLECHAR * pocUserName,OLECHAR * pocUserPassword) virtual HRESULT WINAPI OnPropertiesEx<ilogobj.h>
ILRemoveLastID(PUIDLIST_RELATIVE pidl) SHSTDAPI_<shlobj.h>
ILSaveToStream(IStream * pstm,PCUIDLIST_RELATIVE pidl) SHSTDAPI <shlobj.h>
ILSI_LARGE_ICON(nLoc)<mmc.h>
ILSI_SMALL_ICON(nLoc)<mmc.h>
ILSkip(P, C)<shlobj.h>
ILSkip(PCUIDLIST_RELATIVE p,UINT c)inline PCUIDLIST_RELATIVE <shlobj.h>
ILSkip(PUIDLIST_RELATIVE p,UINT c)inline PUIDLIST_RELATIVE <shlobj.h>
Image()	virtual ~<gdiplusheaders.h>
Image(ColorPalette * palette,INT size)__inline__ Status ::GetPalette<gdiplusheaders.h>
Image(const CLSID * clsidEncoder)__inline__ UINT ::GetEncoderParameterListSize<gdiplusheaders.h>
Image(const CLSID * clsidEncoder,UINT size,EncoderParameters * buffer)__inline__ Status ::GetEncoderParameterList<gdiplusheaders.h>
Image(const ColorPalette * palette)__inline__ Status ::SetPalette<gdiplusheaders.h>
Image(const EncoderParameters * encoderParams)__inline__ Status ::SaveAdd<gdiplusheaders.h>
Image(const GUID * dimensionID)__inline__ UINT ::GetFrameCount<gdiplusheaders.h>
Image(const GUID * dimensionID,UINT frameIndex)__inline__ Status ::SelectActiveFrame<gdiplusheaders.h>
Image(const Image &)	<gdiplusheaders.h>
Image(const PropertyItem * item)__inline__ Status ::SetPropertyItem<gdiplusheaders.h>
Image(const WCHAR * filename,BOOL useEmbeddedColorManagement)__inline__ ::<gdiplusheaders.h>
Image(const WCHAR * filename,BOOL useEmbeddedColorManagement=FALSE)	<gdiplusheaders.h>
Image(const WCHAR * filename,const CLSID * clsidEncoder,const EncoderParameters * encoderParams)__inline__ Status ::Save<gdiplusheaders.h>
Image(GdiplusAbort * pIAbort)__inline__ Status ::SetAbort<gdiplusheaders.h>
Image(GpImage * image,Status status)	<gdiplusheaders.h>
Image(GUID * dimensionIDs,UINT count)__inline__ Status ::GetFrameDimensionsList<gdiplusheaders.h>
Image(GUID * format)__inline__ Status ::GetRawFormat<gdiplusheaders.h>
Image(Image * newImage,const EncoderParameters * encoderParams)__inline__ Status ::SaveAdd<gdiplusheaders.h>
Image(ImageItemData * item)__inline__ Status ::GetItemData<gdiplusheaders.h>
Image(IStream * stream,BOOL useEmbeddedColorManagement)__inline__ ::<gdiplusheaders.h>
Image(IStream * stream,BOOL useEmbeddedColorManagement=FALSE)	<gdiplusheaders.h>
Image(IStream * stream,const CLSID * clsidEncoder,const EncoderParameters * encoderParams)__inline__ Status ::Save<gdiplusheaders.h>
Image(PROPID propId)__inline__ Status ::RemovePropertyItem<gdiplusheaders.h>
Image(PROPID propId,UINT propSize,PropertyItem * buffer)__inline__ Status ::GetPropertyItem<gdiplusheaders.h>
Image(RectF * srcRect,Unit * srcUnit)__inline__ Status ::GetBounds<gdiplusheaders.h>
Image(RotateFlipType rotateFlipType)__inline__ Status ::RotateFlip<gdiplusheaders.h>
Image(SizeF * size)__inline__ Status ::GetPhysicalDimension<gdiplusheaders.h>
Image(Status newStatus)	Status updateStatus<gdiplusheaders.h>
Image(UINT * totalBufferSize,UINT * numProperties)__inline__ Status ::GetPropertySize<gdiplusheaders.h>
Image(UINT numOfProperty,PROPID * list)__inline__ Status ::GetPropertyIdList<gdiplusheaders.h>
Image(UINT thumbWidth,UINT thumbHeight,GetThumbnailImageAbort callback,VOID * callbackData)__inline__ <gdiplusheaders.h>
Image(UINT totalBufferSize,UINT numProperties,PropertyItem * allItems)__inline__ Status ::GetAllPropertyItems<gdiplusheaders.h>
IMAGE_FIRST_SECTION( NtHeader )<winnt.h>
IMAGE_FIRST_SECTION(ntheader)<winnt.h>
IMAGE_ORDINAL(Ordinal)<winnt.h>
IMAGE_ORDINAL32(Ordinal)<winnt.h>
IMAGE_ORDINAL64(Ordinal)<winnt.h>
IMAGE_SNAP_BY_ORDINAL(Ordinal)<winnt.h>
IMAGE_SNAP_BY_ORDINAL32(Ordinal)<winnt.h>
IMAGE_SNAP_BY_ORDINAL64(Ordinal)<winnt.h>
ImageAddCertificate(HANDLE FileHandle,LPWIN_CERTIFICATE Certificate,PDWORD Index) WINBOOL IMAGEAPI <imagehlp.h>
ImageAttributes()	~<gdiplusimageattributes.h>
ImageAttributes(),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE)	Status SetWrapMode<gdiplusimageattributes.h>
ImageAttributes(ColorAdjustType type=ColorAdjustTypeDefault)	Status SetToIdentity<gdiplusimageattributes.h>
ImageAttributes(ColorChannelFlags channelFlags,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetOutputChannel<gdiplusimageattributes.h>
ImageAttributes(ColorPalette * colorPalette,ColorAdjustType type)	Status GetAdjustedPalette<gdiplusimageattributes.h>
ImageAttributes(const Color & colorLow,const Color & colorHigh,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetColorKey<gdiplusimageattributes.h>
ImageAttributes(const ColorMatrix * colorMatrix,ColorMatrixFlags mode=ColorMatrixFlagsDefault,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetColorMatrix<gdiplusimageattributes.h>
ImageAttributes(const ColorMatrix * colorMatrix,const ColorMatrix * grayMatrix,ColorMatrixFlags mode=ColorMatrixFlagsDefault,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetColorMatrices<gdiplusimageattributes.h>
ImageAttributes(const ImageAttributes &)	<gdiplusimageattributes.h>
ImageAttributes(const WCHAR * colorProfileFilename,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetOutputChannelColorProfile<gdiplusimageattributes.h>
ImageAttributes(GpImageAttributes * imageAttributes,Status status)	<gdiplusimageattributes.h>
ImageAttributes(REAL gamma,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetGamma<gdiplusimageattributes.h>
ImageAttributes(REAL threshold,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetThreshold<gdiplusimageattributes.h>
ImageAttributes(Status newStatus)	Status updateStatus<gdiplusimageattributes.h>
ImageAttributes(UINT mapSize,ColorMap * map)	Status SetBrushRemapTable<gdiplusimageattributes.h>
ImageAttributes(UINT mapSize,const ColorMap * map,ColorAdjustType type=ColorAdjustTypeDefault)	Status SetRemapTable<gdiplusimageattributes.h>
ImageBrushProperties(D2D1_RECT_F sourceRectangle,D2D1_EXTEND_MODE extendModeX=D2D1_EXTEND_MODE_CLAMP,D2D1_EXTEND_MODE extendModeY=D2D1_EXTEND_MODE_CLAMP,D2D1_INTERPOLATION_MODE interpolationMode=D2D1_INTERPOLATION_MODE_LINEAR)D2D1FORCEINLINE D2D1_IMAGE_BRUSH_PROPERTIES <d2d1_1helper.h>
ImageDirectoryEntryToData(PVOID Base,BOOLEAN MappedAsImage,USHORT DirectoryEntry,PULONG Size) PVOID IMAGEAPI <psdk>
ImageDirectoryEntryToDataEx(PVOID Base,BOOLEAN MappedAsImage,USHORT DirectoryEntry,PULONG Size,PIMAGE_SECTION_HEADER * FoundHeader) PVOID IMAGEAPI <psdk>
ImageEnumerateCertificates(HANDLE FileHandle,WORD TypeFilter,PDWORD CertificateCount,PDWORD Indices,DWORD IndexCount) WINBOOL IMAGEAPI <imagehlp.h>
ImageEventCallback(const GUID * pEventGUID,BSTR bstrEventDescription,BSTR bstrDeviceID,BSTR bstrDeviceDescription,DWORD dwDeviceType,BSTR bstrFullItemName,ULONG * pulEventType,ULONG ulReserved)virtual HRESULT WINAPI <wia.h>
ImageGetCertificateData(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificate,PDWORD RequiredLength) WINBOOL IMAGEAPI <imagehlp.h>
ImageGetCertificateHeader(HANDLE FileHandle,DWORD CertificateIndex,LPWIN_CERTIFICATE Certificateheader) WINBOOL IMAGEAPI <imagehlp.h>
ImageGetDigestStream(HANDLE FileHandle,DWORD DigestLevel,DIGEST_FUNCTION DigestFunction,DIGEST_HANDLE DigestHandle) WINBOOL IMAGEAPI <imagehlp.h>
ImagehlpApiVersion(VOID) LPAPI_VERSION IMAGEAPI <psdk>
ImagehlpApiVersionEx(LPAPI_VERSION AppVersion) LPAPI_VERSION IMAGEAPI <psdk>
ImageList_Add(HIMAGELIST himl,HBITMAP hbmImage,HBITMAP hbmMask) WINCOMMCTRLAPI int WINAPI <commctrl.h>
ImageList_AddIcon(himl,hicon)<commctrl.h>
ImageList_AddMasked(HIMAGELIST himl,HBITMAP hbmImage,COLORREF crMask) WINCOMMCTRLAPI int WINAPI <commctrl.h>
ImageList_BeginDrag(HIMAGELIST himlTrack,int iTrack,int dxHotspot,int dyHotspot) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_CoCreateInstance(REFCLSID rclsid,const IUnknown * punkOuter,REFIID riid,void ** ppv)WINCOMMCTRLAPI HRESULT WINAPI <commoncontrols.h>
ImageList_Copy(HIMAGELIST himlDst,int iDst,HIMAGELIST himlSrc,int iSrc,UINT uFlags) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_Create(int cx,int cy,UINT flags,int cInitial,int cGrow) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_Destroy(HIMAGELIST himl) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_DragEnter(HWND hwndLock,int x,int y) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_DragLeave(HWND hwndLock) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_DragMove(int x,int y) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_DragShowNolock(WINBOOL fShow) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_Draw(HIMAGELIST himl,int i,HDC hdcDst,int x,int y,UINT fStyle) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_DrawEx(HIMAGELIST himl,int i,HDC hdcDst,int x,int y,int dx,int dy,COLORREF rgbBk,COLORREF rgbFg,UINT fStyle) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_DrawIndirect(IMAGELISTDRAWPARAMS * pimldp) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_Duplicate(HIMAGELIST himl) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_EndDrag(void) WINCOMMCTRLAPI void WINAPI <commctrl.h>
ImageList_ExtractIcon(hi,himl,i)<commctrl.h>
ImageList_GetBkColor(HIMAGELIST himl) WINCOMMCTRLAPI COLORREF WINAPI <commctrl.h>
ImageList_GetDragImage(POINT * ppt,POINT * pptHotspot) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_GetIcon(HIMAGELIST himl,int i,UINT flags) WINCOMMCTRLAPI HICON WINAPI <commctrl.h>
ImageList_GetIconSize(HIMAGELIST himl,int * cx,int * cy) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_GetImageCount(HIMAGELIST himl) WINCOMMCTRLAPI int WINAPI <commctrl.h>
ImageList_GetImageInfo(HIMAGELIST himl,int i,IMAGEINFO * pImageInfo) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_LoadBitmap(hi,lpbmp,cx,cGrow,crMask)<commctrl.h>
ImageList_LoadImage(HINSTANCE hi,LPCSTR lpbmp,int cx,int cGrow,COLORREF crMask,UINT uType,UINT uFlags) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_LoadImageA(HINSTANCE hi,LPCSTR lpbmp,int cx,int cGrow,COLORREF crMask,UINT uType,UINT uFlags) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_LoadImageW(HINSTANCE hi,LPCWSTR lpbmp,int cx,int cGrow,COLORREF crMask,UINT uType,UINT uFlags) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_Merge(HIMAGELIST himl1,int i1,HIMAGELIST himl2,int i2,int dx,int dy) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_Read(LPSTREAM pstm) WINCOMMCTRLAPI HIMAGELIST WINAPI <commctrl.h>
ImageList_ReadEx(DWORD dwFlags,LPSTREAM pstm,REFIID riid,PVOID * ppv) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
ImageList_Remove(HIMAGELIST himl,int i) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_RemoveAll(himl)<commctrl.h>
ImageList_Replace(HIMAGELIST himl,int i,HBITMAP hbmImage,HBITMAP hbmMask) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_ReplaceIcon(HIMAGELIST himl,int i,HICON hicon) WINCOMMCTRLAPI int WINAPI <commctrl.h>
ImageList_SetBkColor(HIMAGELIST himl,COLORREF clrBk) WINCOMMCTRLAPI COLORREF WINAPI <commctrl.h>
ImageList_SetDragCursorImage(HIMAGELIST himlDrag,int iDrag,int dxHotspot,int dyHotspot) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_SetIconSize(HIMAGELIST himl,int cx,int cy) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_SetImageCount(HIMAGELIST himl,UINT uNewCount) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_SetOverlayImage(HIMAGELIST himl,int iImage,int iOverlay) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_Write(HIMAGELIST himl,LPSTREAM pstm) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ImageList_WriteEx(HIMAGELIST himl,DWORD dwFlags,LPSTREAM pstm) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
ImageListSetIcon(LONG_PTR * pIcon,__LONG32 nLoc)virtual HRESULT WINAPI <mmc.h>
ImageListSetStrip(LONG_PTR * pBMapSm,LONG_PTR * pBMapLg,__LONG32 nStartLoc,COLORREF cMask)virtual HRESULT WINAPI <mmc.h>
ImageLoad(PCSTR DllName,PCSTR DllPath) PLOADED_IMAGE IMAGEAPI <imagehlp.h>
ImageNtHeader(PVOID Base) PIMAGE_NT_HEADERS IMAGEAPI <psdk>
ImageRemoveCertificate(HANDLE FileHandle,DWORD Index) WINBOOL IMAGEAPI <imagehlp.h>
ImageRvaToSection(PIMAGE_NT_HEADERS NtHeaders,PVOID Base,ULONG Rva) PIMAGE_SECTION_HEADER IMAGEAPI <psdk>
ImageRvaToVa(PIMAGE_NT_HEADERS NtHeaders,PVOID Base,ULONG Rva,PIMAGE_SECTION_HEADER * LastRvaSection) PVOID IMAGEAPI <psdk>
ImageUnload(PLOADED_IMAGE LoadedImage) WINBOOL IMAGEAPI <imagehlp.h>
IMCENUMPROC(HIMC,LPARAM) typedef WINBOOL<imm.h>
IMEInProgress(__LONG32 Mode)virtual HRESULT WINAPI <tom.h>
ImmAssociateContext(HWND,HIMC) HIMC WINAPI <imm.h>
ImmAssociateContextEx(HWND,HIMC,DWORD) WINBOOL WINAPI <imm.h>
ImmConfigureIME(HKL,HWND,DWORD,LPVOID) WINBOOL WINAPI <imm.h>
ImmConfigureIMEA(HKL,HWND,DWORD,LPVOID) WINBOOL WINAPI <imm.h>
ImmConfigureIMEW(HKL,HWND,DWORD,LPVOID) WINBOOL WINAPI <imm.h>
ImmCreateContext(void) HIMC WINAPI <imm.h>
ImmDestroyContext(HIMC) WINBOOL WINAPI <imm.h>
ImmDisableIME(DWORD) WINBOOL WINAPI <imm.h>
ImmDisableTextFrameService(DWORD idThread) WINBOOL WINAPI <imm.h>
ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam) WINBOOL WINAPI <imm.h>
ImmEnumRegisterWord(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID) UINT WINAPI <imm.h>
ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID) UINT WINAPI <imm.h>
ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister,LPVOID) UINT WINAPI <imm.h>
ImmEscape(HKL,HIMC,UINT,LPVOID) LRESULT WINAPI <imm.h>
ImmEscapeA(HKL,HIMC,UINT,LPVOID) LRESULT WINAPI <imm.h>
ImmEscapeW(HKL,HIMC,UINT,LPVOID) LRESULT WINAPI <imm.h>
ImmGetCandidateList(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen) DWORD WINAPI <imm.h>
ImmGetCandidateListA(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen) DWORD WINAPI <imm.h>
ImmGetCandidateListCount(HIMC,LPDWORD lpdwListCount) DWORD WINAPI <imm.h>
ImmGetCandidateListCountA(HIMC,LPDWORD lpdwListCount) DWORD WINAPI <imm.h>
ImmGetCandidateListCountW(HIMC,LPDWORD lpdwListCount) DWORD WINAPI <imm.h>
ImmGetCandidateListW(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen) DWORD WINAPI <imm.h>
ImmGetCandidateWindow(HIMC,DWORD,LPCANDIDATEFORM) WINBOOL WINAPI <imm.h>
ImmGetCompositionFont(HIMC,LPLOGFONTA) WINBOOL WINAPI <imm.h>
ImmGetCompositionFontA(HIMC,LPLOGFONTA) WINBOOL WINAPI <imm.h>
ImmGetCompositionFontW(HIMC,LPLOGFONTW) WINBOOL WINAPI <imm.h>
ImmGetCompositionString(HIMC,DWORD,LPVOID,DWORD) LONG WINAPI <imm.h>
ImmGetCompositionStringA(HIMC,DWORD,LPVOID,DWORD) LONG WINAPI <imm.h>
ImmGetCompositionStringW(HIMC,DWORD,LPVOID,DWORD) LONG WINAPI <imm.h>
ImmGetCompositionWindow(HIMC,LPCOMPOSITIONFORM) WINBOOL WINAPI <imm.h>
ImmGetContext(HWND) HIMC WINAPI <imm.h>
ImmGetConversionList(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag) DWORD WINAPI <imm.h>
ImmGetConversionListA(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag) DWORD WINAPI <imm.h>
ImmGetConversionListW(HKL,HIMC,LPCWSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag) DWORD WINAPI <imm.h>
ImmGetConversionStatus(HIMC,LPDWORD,LPDWORD) WINBOOL WINAPI <imm.h>
ImmGetDefaultIMEWnd(HWND) HWND WINAPI <imm.h>
ImmGetDescription(HKL,LPSTR,UINT uBufLen) UINT WINAPI <imm.h>
ImmGetDescriptionA(HKL,LPSTR,UINT uBufLen) UINT WINAPI <imm.h>
ImmGetDescriptionW(HKL,LPWSTR,UINT uBufLen) UINT WINAPI <imm.h>
ImmGetGuideLine(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen) DWORD WINAPI <imm.h>
ImmGetGuideLineA(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen) DWORD WINAPI <imm.h>
ImmGetGuideLineW(HIMC,DWORD dwIndex,LPWSTR,DWORD dwBufLen) DWORD WINAPI <imm.h>
ImmGetIMEFileName(HKL,LPSTR,UINT uBufLen) UINT WINAPI <imm.h>
ImmGetIMEFileNameA(HKL,LPSTR,UINT uBufLen) UINT WINAPI <imm.h>
ImmGetIMEFileNameW(HKL,LPWSTR,UINT uBufLen) UINT WINAPI <imm.h>
ImmGetImeMenuItems(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD) DWORD WINAPI <imm.h>
ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD) DWORD WINAPI <imm.h>
ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD) DWORD WINAPI <imm.h>
ImmGetOpenStatus(HIMC) WINBOOL WINAPI <imm.h>
ImmGetProperty(HKL,DWORD) DWORD WINAPI <imm.h>
ImmGetRegisterWordStyle(HKL,UINT nItem,LPSTYLEBUFA) UINT WINAPI <imm.h>
ImmGetRegisterWordStyleA(HKL,UINT nItem,LPSTYLEBUFA) UINT WINAPI <imm.h>
ImmGetRegisterWordStyleW(HKL,UINT nItem,LPSTYLEBUFW) UINT WINAPI <imm.h>
ImmGetStatusWindowPos(HIMC,LPPOINT) WINBOOL WINAPI <imm.h>
ImmGetVirtualKey(HWND) UINT WINAPI <imm.h>
ImmInstallIME(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText) HKL WINAPI <imm.h>
ImmInstallIMEA(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText) HKL WINAPI <imm.h>
ImmInstallIMEW(LPCWSTR lpszIMEFileName,LPCWSTR lpszLayoutText) HKL WINAPI <imm.h>
ImmIsIME(HKL) WINBOOL WINAPI <imm.h>
ImmIsUIMessage(HWND,UINT,WPARAM,LPARAM) WINBOOL WINAPI <imm.h>
ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM) WINBOOL WINAPI <imm.h>
ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM) WINBOOL WINAPI <imm.h>
ImmNotifyIME(HIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue) WINBOOL WINAPI <imm.h>
IMMPID_DECLARE_ENTRY(name)<mailmsgprops.h>
IMMPID_END_LIST(name)<mailmsgprops.h>
IMMPID_START_LIST(name,start,guid)<mailmsgprops.h>
ImmRegisterWord(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister) WINBOOL WINAPI <imm.h>
ImmRegisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister) WINBOOL WINAPI <imm.h>
ImmRegisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister) WINBOOL WINAPI <imm.h>
ImmReleaseContext(HWND,HIMC) WINBOOL WINAPI <imm.h>
ImmSetCandidateWindow(HIMC,LPCANDIDATEFORM) WINBOOL WINAPI <imm.h>
ImmSetCompositionFont(HIMC,LPLOGFONTA) WINBOOL WINAPI <imm.h>
ImmSetCompositionFontA(HIMC,LPLOGFONTA) WINBOOL WINAPI <imm.h>
ImmSetCompositionFontW(HIMC,LPLOGFONTW) WINBOOL WINAPI <imm.h>
ImmSetCompositionString(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD) WINBOOL WINAPI <imm.h>
ImmSetCompositionStringA(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD) WINBOOL WINAPI <imm.h>
ImmSetCompositionStringW(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD) WINBOOL WINAPI <imm.h>
ImmSetCompositionWindow(HIMC,LPCOMPOSITIONFORM) WINBOOL WINAPI <imm.h>
ImmSetConversionStatus(HIMC,DWORD,DWORD) WINBOOL WINAPI <imm.h>
ImmSetOpenStatus(HIMC,WINBOOL) WINBOOL WINAPI <imm.h>
ImmSetStatusWindowPos(HIMC,LPPOINT) WINBOOL WINAPI <imm.h>
ImmSimulateHotKey(HWND,DWORD) WINBOOL WINAPI <imm.h>
ImmUnregisterWord(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister) WINBOOL WINAPI <imm.h>
ImmUnregisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister) WINBOOL WINAPI <imm.h>
ImmUnregisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszUnregister) WINBOOL WINAPI <imm.h>
IMP_IPortMidi()<portcls.h>
IMPERSONATE_SECURITY_CONTEXT_FN(PCtxtHandle) typedef SECURITY_STATUS<sspi.h>
ImpersonateAnonymousToken(HANDLE ThreadHandle) WINADVAPI WINBOOL APIENTRY <securitybaseapi.h>
ImpersonateClient()HRESULT <wmiatlprov.h>
ImpersonateDdeClientWindow(HWND hWndClient,HWND hWndServer) WINBOOL WINAPI <dde.h>
ImpersonateLoggedOnUser(HANDLE hToken) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
ImpersonateNamedPipeClient(HANDLE hNamedPipe) WINADVAPI WINBOOL WINAPI <namedpipeapi.h>
ImpersonatePrinterClient(HANDLE hToken)WINBOOL WINAPI <winsplp.h>
ImpersonateSecurityContext(PCtxtHandle phContext) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
IMPGetIMEW(HWND,LPIMEPROW) WINBOOL WINAPI <winnls32.h>
IMPLEMENT_STD_UNKNOWN(Class)<kcom.h>
Import(__LONG32 lFlags,IGPMBackup * pIGPMBackup,VARIANT * pvarMigrationTable,VARIANT * pvarGPMProgress,VARIANT * pvarGPMCancel,IGPMResult ** ppIGPMResult)virtual HRESULT WINAPI <txcoord.h>
Import(BSTR bstrPassword,BSTR bstrFilename,BSTR bstrSourcePath,BSTR bstrDestPath,LONG lFlags)virtual HRESULT WINAPI <txcoord.h>
Import(LPCWSTR pszPasswd,LPCWSTR pszFileName,LPCWSTR pszSourcePath,LPCWSTR pszDestPath,DWORD dwMDFlags)virtual HRESULT WINAPI <txcoord.h>
Import(ULONG cbTransactionCookie,byte * rgbTransactionCookie,IID * piid,void ** ppvTransaction)virtual HRESULT WINAPI <txcoord.h>
Import(VARIANT varStorage,VARIANT_BOOL fReplaceAll)virtual HRESULT WINAPI <txcoord.h>
IMPORT_SECURITY_CONTEXT_FN_A(SEC_CHAR *,PSecBuffer,void *,PCtxtHandle) typedef SECURITY_STATUS<sspi.h>
IMPORT_SECURITY_CONTEXT_FN_W(PSECURITY_STRING,PSecBuffer,VOID *,PCtxtHandle) typedef SECURITY_STATUS<sspi.h>
ImportCertificate(const BSTR strConfig,const BSTR strCertificate,LONG Flags,LONG * pRequestId)virtual HRESULT WINAPI <certadm.h>
ImportComponent(BSTR bstrCLSID)virtual HRESULT WINAPI <mtxadmin.h>
ImportComponentByName(BSTR bstrProgID)virtual HRESULT WINAPI <mtxadmin.h>
ImportKey(const BSTR strConfig,LONG RequestId,const BSTR strCertHash,LONG Flags,const BSTR strKey)virtual HRESULT WINAPI <certadm.h>
ImportNtmsDatabase(HANDLE hSession) DWORD WINAPI <ntmsapi.h>
ImportPrivacySettings(PCWSTR pszFilename,WINBOOL * pfParsePrivacyPreferences,WINBOOL * pfParsePerSiteRules) SHDOCAPI_<shlobj.h>
ImportRSoPData(LPOLESTR lpNameSpace,LPOLESTR lpFileName) GPEDITAPI HRESULT WINAPI <gpedit.h>
ImportSecurityContext(SEC_CHAR * pszPackage,PSecBuffer pPackedContext,VOID * Token,PCtxtHandle phContext) SECURITY_STATUS WINAPI <sspi.h>
ImportSecurityContextA(SEC_CHAR * pszPackage,PSecBuffer pPackedContext,VOID * Token,PCtxtHandle phContext) SECURITY_STATUS WINAPI <sspi.h>
ImportSecurityContextW(PSECURITY_STRING pszPackage,PSecBuffer pPackedContext,void * Token,PCtxtHandle phContext) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
IMPQueryIME(LPIMEPROA) WINBOOL WINAPI <winnls32.h>
IMPQueryIMEA(LPIMEPROA) WINBOOL WINAPI <winnls32.h>
IMPQueryIMEW(LPIMEPROW) WINBOOL WINAPI <winnls32.h>
IMPSetIME(HWND,LPIMEPROA) WINBOOL WINAPI <winnls32.h>
IMPSetIMEA(HWND,LPIMEPROA) WINBOOL WINAPI <winnls32.h>
IMPSetIMEW(HWND,LPIMEPROW) WINBOOL WINAPI <winnls32.h>
IMSelected(void)virtual HRESULT WINAPI <msimcntl.h>
IN6_ADDR_EQUAL(const struct in6_addr * a,const struct in6_addr * b)WS2TCPIP_INLINE int <ws2ipdef.h>
IN6_ADDR_EQUAL(const struct in6_addr *,const struct in6_addr *)int <ws2ipdef.h>
IN6_IS_ADDR_LINKLOCAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_LINKLOCAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_LOOPBACK(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_LOOPBACK(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_MC_GLOBAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_MC_GLOBAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_MC_LINKLOCAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_MC_LINKLOCAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_MC_NODELOCAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_MC_NODELOCAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_MC_ORGLOCAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_MC_ORGLOCAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_MC_SITELOCAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_MC_SITELOCAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_MULTICAST(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_MULTICAST(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_SITELOCAL(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_SITELOCAL(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_UNSPECIFIED(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_UNSPECIFIED(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_V4COMPAT(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_V4COMPAT(const struct in6_addr *)int <ws2tcpip.h>
IN6_IS_ADDR_V4MAPPED(const struct in6_addr * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6_IS_ADDR_V4MAPPED(const struct in6_addr *)int <ws2tcpip.h>
IN6_SET_ADDR_LOOPBACK(struct in6_addr * a)WS2TCPIP_INLINE void <ws2tcpip.h>
IN6_SET_ADDR_LOOPBACK(struct in6_addr *)void <ws2tcpip.h>
IN6_SET_ADDR_UNSPECIFIED(struct in6_addr * a)WS2TCPIP_INLINE void <ws2tcpip.h>
IN6_SET_ADDR_UNSPECIFIED(struct in6_addr *)void <ws2tcpip.h>
IN6ADDR_ISANY(const struct sockaddr_in6 * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6ADDR_ISANY(const struct sockaddr_in6 *)int <ws2tcpip.h>
IN6ADDR_ISLOOPBACK(const struct sockaddr_in6 * a)WS2TCPIP_INLINE int <ws2tcpip.h>
IN6ADDR_ISLOOPBACK(const struct sockaddr_in6 *)int <ws2tcpip.h>
IN6ADDR_SETANY(struct sockaddr_in6 * a)WS2TCPIP_INLINE void <ws2tcpip.h>
IN6ADDR_SETANY(struct sockaddr_in6 *)void <ws2tcpip.h>
IN6ADDR_SETLOOPBACK(struct sockaddr_in6 * a)WS2TCPIP_INLINE void <ws2tcpip.h>
IN6ADDR_SETLOOPBACK(struct sockaddr_in6 *)void <ws2tcpip.h>
IN_CLASSA(a)<wsipv6ok.h>
IN_CLASSA(i)<wsipv6ok.h>
IN_CLASSB(a)<wsipv6ok.h>
IN_CLASSB(i)<wsipv6ok.h>
IN_CLASSC(a)<wsipv6ok.h>
IN_CLASSC(i)<wsipv6ok.h>
IN_CLASSD(a)<wsipv6ok.h>
IN_CLASSD(i)<wsipv6ok.h>
IN_MULTICAST(a)<wsipv6ok.h>
IN_MULTICAST(i)<wsipv6ok.h>
INADDR_BROADCAST(a)<wsipv6ok.h>
INCREF(x)<winnt.h>
IncrementUrlCacheHeaderData(DWORD,LPDWORD)WINBOOL     WINAPI <winineti.h>
INDEXTOOVERLAYMASK(i)<commctrl.h>
INDEXTOSTATEIMAGEMASK(i)<commctrl.h>
IndirectedQueryInterface(REFIID InterfaceId,PVOID * Interface)COMDDKMETHOD STDMETHODIMP <kcom.h>
Indoubt(void)virtual HRESULT WINAPI <transact.h>
inet_addr(a)<wsipv6ok.h>
inet_addr(const char * cp) WINSOCK_API_LINKAGE unsigned __LONG32 WSAAPI <wsipv6ok.h>
inet_ntoa(a)<wsipv6ok.h>
inet_ntoa(struct in_addr in) WINSOCK_API_LINKAGE char<wsipv6ok.h>
InetIsOffline(DWORD dwFlags) INTSHCUTAPI WINBOOL WINAPI <intshcut.h>
InetNtop(INT Family,PVOID pAddr,LPSTR pStringBuf,size_t StringBufSize)WINSOCK_API_LINKAGE LPCSTR WSAAPI <ws2tcpip.h>
InetNtopA(INT Family,PVOID pAddr,LPSTR pStringBuf,size_t StringBufSize)WINSOCK_API_LINKAGE LPCSTR WSAAPI <ws2tcpip.h>
InetNtopW(INT Family,PVOID pAddr,LPWSTR pStringBuf,size_t StringBufSIze)WINSOCK_API_LINKAGE LPCWSTR WSAAPI <ws2tcpip.h>
InetPton(INT Family,LPCSTR pStringBuf,PVOID pAddr)WINSOCK_API_LINKAGE INT WSAAPI <ws2tcpip.h>
InetPtonA(INT Family,LPCSTR pStringBuf,PVOID pAddr)WINSOCK_API_LINKAGE INT WSAAPI <ws2tcpip.h>
InetPtonW(INT Family,LPCWSTR pStringBuf,PVOID pAddr)WINSOCK_API_LINKAGE INT WSAAPI <ws2tcpip.h>
InfiniteRect()D2D1FORCEINLINE D2D1_RECT_F <d2d1helper.h>
Inflate(const Point & point)	VOID <gdiplustypes.h>
Inflate(const PointF & point)	VOID <gdiplustypes.h>
Inflate(INT dx,INT dy)	VOID <gdiplustypes.h>
Inflate(REAL dx,REAL dy)	VOID <gdiplustypes.h>
InflateRect(LPRECT lprc,int dx,int dy) WINUSERAPI WINBOOL WINAPI <winuser.h>
Info(LONG lIndex,AM_MEDIA_TYPE ** ppmt,DWORD * pdwFlags,LCID * plcid,DWORD * pdwGroup,WCHAR ** ppszName,IUnknown ** ppObject,IUnknown ** ppUnk)virtual HRESULT WINAPI <winbase.h>
Init(__LONG32 lnSetType,BSTR bstrADsPath)virtual HRESULT WINAPI <sql_1.h>
Init(BSTR pName,BLOB_CHARACTER_SET CharacterSet,BSTR pBlob)virtual HRESULT WINAPI <sql_1.h>
Init(CGenLexSource * pSrc) void <sql_1.h>
Init(CMSPAddress * pMSPAddress,MSP_HANDLE htCall,DWORD dwReserved,DWORD dwMediaType) virtual HRESULT <sql_1.h>
Init(const wchar_t * str,unsigned int len)           void <sql_1.h>
Init(HANDLE hAddress,CMSPCallBase * pMSPCall,IMediaEvent * pGraph,DWORD dwMediaType,TERMINAL_DIRECTION Direction) virtual HRESULT <sql_1.h>
Init(IElementBehaviorSite * pBehaviorSite)virtual HRESULT WINAPI <sql_1.h>
Init(ULONG ulMaxTokenSize,WINBOOL * pfLicense)virtual HRESULT WINAPI <sql_1.h>
Init(VARIANT * Machine,VARIANT * Pathname,VARIANT * FormatName)virtual HRESULT WINAPI <sql_1.h>
Init(void)virtual HRESULT WINAPI <sql_1.h>
Init(WINBOOL fQuery,ULONG ulMaxTokenSize,WINBOOL * pfLicense)virtual HRESULT WINAPI <sql_1.h>
INIT_MMREG_MID()()()
INIT_MMREG_MID(guid, id)<mmreg.h>
INIT_MMREG_MID(guid,id)<mmreg.h>
INIT_MMREG_PID()()()
INIT_MMREG_PID(guid, id)<mmreg.h>
INIT_MMREG_PID(guid,id)<mmreg.h>
INIT_SECURITY_INTERFACE_A(void) typedef PSecurityFunctionTableA<sspi.h>
INIT_SECURITY_INTERFACE_W(void) typedef PSecurityFunctionTableW<sspi.h>
INIT_USB_TERMINAL(guid,id)<ksmedia.h>
INIT_USBAUDIO_MID(guid,id)<ksmedia.h>
INIT_USBAUDIO_PID(guid,id)<ksmedia.h>
INIT_USBAUDIO_PRODUCT_NAME(guid,vid,pid,strIndex)<ksmedia.h>
INIT_WAVEFORMATEX_GUID()()()
INIT_WAVEFORMATEX_GUID(Guid, x)<mmreg.h>
INIT_WAVEFORMATEX_GUID(Guid,x)<mmreg.h>
InitAtomTable(DWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
InitCommonControls(void) WINCOMMCTRLAPI void WINAPI <commctrl.h>
InitCommonControlsEx(const INITCOMMONCONTROLSEX *) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
InitCompositionTarget(IUnknown * pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget)virtual HRESULT WINAPI <strmif.h>
InitEx(__LONG32 lnSetType,BSTR bstrADsPath,BSTR bstrUserID,BSTR bstrDomain,BSTR bstrPassword)virtual HRESULT WINAPI <iads.h>
InitHashTable(UINT hashSize,WINBOOL bAllocNow=TRUE) void <dxtmpl.h>
InitHashTable(UINT nHashSize,WINBOOL bAllocNow)void CDXMap<dxtmpl.h>
Initialize(BSTR methodName,IDispatch * dispUserDefined)virtual HRESULT WINAPI <vswriter.h>
Initialize(const BSTR strConfig)virtual HRESULT WINAPI <vswriter.h>
Initialize(const BSTR strConfig,LONG * pEventMask)virtual HRESULT WINAPI <vswriter.h>
Initialize(DWORD dwReserved,DWORD dwSyncMgrFlags,DWORD cbCookie,const BYTE * lpCookie)virtual HRESULT WINAPI <vswriter.h>
Initialize(DWORD dwSize,BSTR * pBegin,BSTR * pEnd) HRESULT WINAPI <vswriter.h>
Initialize(DWORD dwSize,T * pBegin,T * pEnd) HRESULT WINAPI <vswriter.h>
Initialize(GUID clsidHelperDll)virtual HRESULT WINAPI <vswriter.h>
Initialize(HKEY hkRegKey,LPCWSTR pcwszVolume,LPWSTR * ppwszDisplayName,LPWSTR * ppwszDescription,DWORD * pdwFlags)virtual HRESULT WINAPI <vswriter.h>
Initialize(IID iidTerminalClass,DWORD dwMediaType,TERMINAL_DIRECTION Direction,MSP_HANDLE htAddress) virtual HRESULT <vswriter.h>
Initialize(IImageDecodeEventSink * pEventSink)virtual HRESULT WINAPI <vswriter.h>
Initialize(IMultiInterfaceEventControl * pEIC)virtual HRESULT WINAPI <vswriter.h>
Initialize(IUnknown * pPoolConfig)virtual HRESULT WINAPI <vswriter.h>
Initialize(IUnknown * pRowset)virtual HRESULT WINAPI <vswriter.h>
Initialize(IUnknown * punkCallbackIn,LCID lcidIn)virtual HRESULT WINAPI <vswriter.h>
Initialize(LONG lFlags,BSTR bstrPolicyURL,VARIANT varReserved)virtual HRESULT WINAPI <vswriter.h>
Initialize(LONG lSize=1,BYTE * pData=0)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPCOLESTR pszMachineName,DWORD dwEapTypeId,ULONG_PTR * puConnectionParam)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPCOLESTR pszMachineName,ULONG_PTR * puConnectionParam)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPCONSOLE lpConsole)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPCTSTR lpServiceName,LPCTSTR lpTemplateName,LPSCESVCATTACHMENTPERSISTINFO lpSceSvcPersistInfo,SCESVC_HANDLE * pscesvcHandle)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPCWSTR pwzConnectoid)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPCWSTR pwzConnectoid,IDialEventSink * pIDES)virtual HRESULT WINAPI <vswriter.h>
Initialize(LPUNKNOWN pUnknown)virtual HRESULT WINAPI <vswriter.h>
Initialize(MSP_HANDLE hEvent)virtual HRESULT WINAPI <vswriter.h>
Initialize(Properties * pProperties)virtual HRESULT WINAPI <vswriter.h>
Initialize(RO_INIT_TYPE it=RO_INIT_SINGLETHREADED)__inline HRESULT <vswriter.h>
Initialize(UINT uiSrcCodePage,UINT uiDstCodePage,DWORD dwProperty)virtual HRESULT WINAPI <vswriter.h>
Initialize(VOID * pUMS) virtual HRESULT WINAPI <vswriter.h>
Initialize(void * pv),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool),void * pPool)virtual HRESULT WINAPI <vswriter.h>
Initialize(void)virtual HRESULT WINAPI <vswriter.h>
Initialize(VSS_ID WriterId,LPCWSTR WriterName,VSS_USAGE_TYPE UsageType,VSS_SOURCE_TYPE SourceType,VSS_APPLICATION_LEVEL AppLevel,DWORD dwTimeoutFreeze=60000,VSS_ALTERNATE_WRITER_STATE aws=VSS_AWS_NO_ALTERNATE_WRITER,bool bIOThrottlingOnly=false,LPCWSTR wszWriterInstanceName=NULL)HRESULT WINAPI <vswriter.h>
INITIALIZE_SECURITY_CONTEXT_FN_A(PCredHandle,PCtxtHandle,SEC_CHAR *,unsigned __LONG32,unsigned __LONG32,unsigned __LONG32,PSecBufferDesc,unsigned __LONG32,PCtxtHandle,PSecBufferDesc,unsigned __LONG32 *,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
INITIALIZE_SECURITY_CONTEXT_FN_W(PCredHandle,PCtxtHandle,PSECURITY_STRING,unsigned __LONG32,unsigned __LONG32,unsigned __LONG32,PSecBufferDesc,unsigned __LONG32,PCtxtHandle,PSecBufferDesc,unsigned __LONG32 *,PTimeStamp) typedef SECURITY_STATUS<sspi.h>
INITIALIZE_SIMPLE_FRAMING_EX(FramingExPointer,P_MemoryType,P_Flags,P_Frames,P_Alignment,P_MinFrameSize,P_MaxFrameSize)<ks.h>
InitializeAcl(PACL pAcl,DWORD nAclLength,DWORD dwAclRevision) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
InitializeCache() FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
InitializeClientContext2(BSTR IdentifyingString,VARIANT varReserved,IAzClientContext2 ** ppClientContext)virtual HRESULT WINAPI <azroles.h>
InitializeClientContextFromName(BSTR ClientName,BSTR DomainName,VARIANT varReserved,IAzClientContext ** ppClientContext)virtual HRESULT WINAPI <azroles.h>
InitializeClientContextFromStringSid(BSTR SidString,LONG lOptions,VARIANT varReserved,IAzClientContext ** ppClientContext)virtual HRESULT WINAPI <azroles.h>
InitializeClientContextFromToken(ULONGLONG ullTokenHandle,VARIANT varReserved,IAzClientContext ** ppClientContext)virtual HRESULT WINAPI <azroles.h>
InitializeClientContextFromToken2(ULONG ulTokenHandleLowPart,ULONG ulTokenHandleHighPart,VARIANT varReserved,IAzClientContext2 ** ppClientContext)virtual HRESULT WINAPI <azroles.h>
InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable) WINBASEAPI VOID WINAPI <synchapi.h>
InitializeContext(PVOID Buffer,DWORD ContextFlags,PCONTEXT * Context,PDWORD ContextLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection) WINBASEAPI VOID WINAPI <synchapi.h>
InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount) WINBASEAPI WINBOOL WINAPI <synchapi.h>
InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount,DWORD Flags) WINBASEAPI WINBOOL WINAPI <synchapi.h>
InitializeDefaultTerminal() HRESULT <msptrmar.h>
InitializeDownloadManager(void)virtual HRESULT WINAPI <shdeprecated.h>
InitializeDynamic(IID iidTerminalClass,DWORD dwMediaType,TERMINAL_DIRECTION Direction,MSP_HANDLE htAddress)virtual HRESULT WINAPI <termmgr.h>
InitializeEx(__LONG32 lFlags)virtual HRESULT WINAPI <vswriter.h>
InitializeEx(HKEY hkRegKey,LPCWSTR pcwszVolume,LPCWSTR pcwszKeyName,LPWSTR * ppwszDisplayName,LPWSTR * ppwszDescription,LPWSTR * ppwszBtnText,DWORD * pdwFlags)virtual HRESULT WINAPI <vswriter.h>
InitializeEx(VSS_ID WriterId,LPCWSTR wszWriterName,DWORD dwMajorVersion,DWORD dwMinorVersion,VSS_USAGE_TYPE ut,VSS_SOURCE_TYPE st,VSS_APPLICATION_LEVEL nLevel,DWORD dwTimeoutFreeze=60000,VSS_ALTERNATE_WRITER_STATE aws=VSS_AWS_NO_ALTERNATE_WRITER,bool bIOThrottlingOnly=false,LPCWSTR wszWriterInstanceName=NULL)HRESULT WINAPI <vswriter.h>
InitializeExpression(LPEXPRESSION Expression) extern LPEXPRESSION WINAPI <nmsupp.h>
InitializeFlatSB(HWND) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
InitializeIpForwardEntry(PMIB_IPFORWARD_ROW2 Row) VOID NETIOAPI_API_ <netioapi.h>
InitializeIpInterfaceEntry(PMIB_IPINTERFACE_ROW Row) VOID NETIOAPI_API_ <netioapi.h>
InitializeListHead(ListHead)<msputils.h>
InitializeListHead(OUT PLIST_ENTRY ListHead)<msputils.h>
InitializeListHead32(ListHead)<wdm.h>
InitializeLog(LONG hInstance)virtual HRESULT WINAPI <wia.h>
InitializeLog(LPCSTR SiteName,LPCSTR MetabasePath,PCHAR pvIMDCOM) virtual HRESULT WINAPI <wia.h>
InitializeLogEx(BYTE * hInstance)virtual HRESULT WINAPI <wia.h>
InitializeMonitor(LPWSTR pRegistryRoot)<winsplp.h>
InitializeMonitorEx(LPWSTR pRegistryRoot,LPMONITOR pMonitor)WINBOOL WINAPI <winsplp.h>
InitializeNapAgentNotifier(NapNotifyType type,HANDLE hNotifyEvent) NAPAPI HRESULT WINAPI <naputil.h>
InitializePalette(ColorPalette * palette,PaletteType paletteType,INT optimalColors,BOOL useTransparentColor,Bitmap * bitmap)__inline__ Status Bitmap::<gdiplusimpl.h>
InitializePattern(LPPATTERNMATCH Pattern,LPVOID ptr,DWORD offset,DWORD length) extern LPPATTERNMATCH WINAPI <nmsupp.h>
InitializePrintMonitor(LPWSTR pRegistryRoot)LPMONITOREX WINAPI <winsplp.h>
InitializePrintMonitor2(PMONITORINIT pMonitorInit,PHANDLE phMonitor)LPMONITOR2 WINAPI <winsplp.h>
InitializePrintMonitorUI(VOID)PMONITORUI WINAPI <winsplp.h>
InitializePrintProvidor(LPPRINTPROVIDOR pPrintProvidor,DWORD cbPrintProvidor,LPWSTR pFullRegistryPath)<winsplp.h>
InitializeProcessForWsWatch(HANDLE hProcess) WINBOOL WINAPI <psapi.h>
InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,DWORD dwAttributeCount,DWORD dwFlags,PSIZE_T lpSize) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
InitializeReporting(BSTR bstrAdmPath)virtual HRESULT WINAPI <gpmgmt.h>
InitializeSecurityContext(PCredHandle phCredential,PCtxtHandle phContext,SEC_CHAR * pszTargetName,unsigned __LONG32 fContextReq,unsigned __LONG32 Reserved1,unsigned __LONG32 TargetDataRep,PSecBufferDesc pInput,unsigned __LONG32 Reserved2,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
InitializeSecurityContextA(PCredHandle phCredential,PCtxtHandle phContext,SEC_CHAR * pszTargetName,unsigned __LONG32 fContextReq,unsigned __LONG32 Reserved1,unsigned __LONG32 TargetDataRep,PSecBufferDesc pInput,unsigned __LONG32 Reserved2,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
InitializeSecurityContextW(PCredHandle phCredential,PCtxtHandle phContext,PSECURITY_STRING pTargetName,unsigned __LONG32 fContextReq,unsigned __LONG32 Reserved1,unsigned __LONG32 TargetDataRep,PSecBufferDesc pInput,unsigned __LONG32 Reserved2,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD dwRevision) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
InitializeSid(PSID Sid,PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,BYTE nSubAuthorityCount) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
InitializeSListHead(OUT PSLIST_HEADER SListHead)<interlockedapi.h>
InitializeSListHead(PSLIST_HEADER ListHead) WINBASEAPI VOID WINAPI <interlockedapi.h>
InitializeSRWLock(PSRWLOCK SRWLock) WINBASEAPI VOID WINAPI <synchapi.h>
InitializeSynchronizationBarrier(LPSYNCHRONIZATION_BARRIER lpBarrier,LONG lTotalThreads,LONG lSpinCount) WINBOOL WINAPI <synchapi.h>
InitializeTouchInjection(UINT32 maxCount,DWORD dwMode) WINUSERAPI WINBOOL WINAPI <winuser.h>
InitializeTransitionSite(void)virtual HRESULT WINAPI <shdeprecated.h>
InitializeTravelLog(ITravelLog * ptl,DWORD dw)virtual HRESULT WINAPI <shdeprecated.h>
InitializeUnicastIpAddressEntry(PMIB_UNICASTIPADDRESS_ROW Row) VOID NETIOAPI_API_ <netioapi.h>
Initialze(RO_INIT_TYPE it=RO_INIT_SINGLETHREADED) __inline HRESULT <roapi.h>
InitiateShutdown(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwGracePeriod,DWORD dwShutdownFlags,DWORD dwReason)WINADVAPI DWORD WINAPI <winreg.h>
InitiateShutdownA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwGracePeriod,DWORD dwShutdownFlags,DWORD dwReason)WINADVAPI DWORD WINAPI <winreg.h>
InitiateShutdownW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwGracePeriod,DWORD dwShutdownFlags,DWORD dwReason)WINADVAPI DWORD WINAPI <winreg.h>
InitiateSystemShutdown(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown) WINADVAPI WINBOOL WINAPI <winreg.h>
InitiateSystemShutdownA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown) WINADVAPI WINBOOL WINAPI <winreg.h>
InitiateSystemShutdownEx(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason) WINADVAPI WINBOOL WINAPI <winreg.h>
InitiateSystemShutdownExA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason) WINADVAPI WINBOOL WINAPI <winreg.h>
InitiateSystemShutdownExW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason) WINADVAPI WINBOOL WINAPI <winreg.h>
InitiateSystemShutdownW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown) WINADVAPI WINBOOL WINAPI <winreg.h>
InitLocalMsCtfMonitor(DWORD dwFlags)HRESULT CALLBACK <msctfmonitorapi.h>
InitMUILanguage(LANGID uiLang) void WINAPI <commctrl.h>
InitMultipleMonitorStubs(void) WINBOOL <multimon.h>
InitNetworkAddressControl(void)SHSTDAPI_<shellapi.h>
InitNew(VARIANT varTransaction)virtual HRESULT WINAPI <mqoai.h>
InitOnceBeginInitialize(LPINIT_ONCE lpInitOnce,DWORD dwFlags,PBOOL fPending,LPVOID * lpContext) WINBASEAPI WINBOOL WINAPI <synchapi.h>
InitOnceComplete(LPINIT_ONCE lpInitOnce,DWORD dwFlags,LPVOID lpContext) WINBASEAPI WINBOOL WINAPI <synchapi.h>
InitOnceExecuteOnce(PINIT_ONCE InitOnce,PINIT_ONCE_FN InitFn,PVOID Parameter,LPVOID * Context) WINBASEAPI WINBOOL WINAPI <synchapi.h>
InitOnceInitialize(PINIT_ONCE InitOnce) WINBASEAPI VOID WINAPI <synchapi.h>
InitPropVariantFromBoolean(WINBOOL fVal,PROPVARIANT * ppropvar)inline HRESULT <propvarutil.h>
InitPropVariantFromBuffer(const VOID * pv,UINT cb,PROPVARIANT * ppropvar)HRESULT WINAPI <propvarutil.h>
InitPropVariantFromGUIDAsString(REFGUID guid,PROPVARIANT * ppropvar)HRESULT WINAPI <propvarutil.h>
InitPropVariantFromInt64(LONGLONG llVal,PROPVARIANT * ppropvar)inline HRESULT <propvarutil.h>
InitPropVariantFromString(PCWSTR psz,PROPVARIANT * ppropvar)inline HRESULT <propvarutil.h>
InitRC(HWND,LPRC) VOID WINAPI <penwin.h>
InitRecognizer(LPRC) WINBOOL WINAPI <penwin.h>
InitSecurityInterface(void) PSecurityFunctionTableA WINAPI <sspi.h>
InitSecurityInterfaceA(void) PSecurityFunctionTableA WINAPI <sspi.h>
InitSecurityInterfaceW(void) KSECDDDECLSPEC PSecurityFunctionTableW WINAPI <sspi.h>
InitVariantFromBuffer(const VOID * pv,UINT cb,VARIANT * pvar)HRESULT WINAPI <propvarutil.h>
InitVariantFromGUIDAsString(REFGUID guid,VARIANT * pvar)HRESULT WINAPI <propvarutil.h>
InitVFW(void) LONG WINAPI <vfw.h>
InjectNtmsCleaner(HANDLE hSession,LPNTMS_GUID lpLibrary,LPNTMS_GUID lpInjectOperation,DWORD dwNumberOfCleansLeft,DWORD dwAction) DWORD WINAPI <ntmsapi.h>
InjectNtmsMedia(HANDLE hSession,LPNTMS_GUID lpLibraryId,LPNTMS_GUID lpInjectOperation,DWORD dwAction) DWORD WINAPI <ntmsapi.h>
InjectTouchInput(UINT32 count,CONST POINTER_TOUCH_INFO * contacts) WINUSERAPI WINBOOL WINAPI <winuser.h>
INLINE_DWORD_FLIP(out,in)<windns.h>
INLINE_HTONL(out,in)<windns.h>
INLINE_HTONS(out,in)<windns.h>
INLINE_NTOHL(out,in)<windns.h>
INLINE_NTOHS(out,in)<windns.h>
INLINE_WORD_FLIP(out,in)<windns.h>
INLINE_WRITE_FLIPPED_DWORD(pout,in)<windns.h>
INLINE_WRITE_FLIPPED_WORD(pout,in)<windns.h>
InlineIsEqualGUID(REFGUID rguid1,REFGUID rguid2)__inline int <guiddef.h>
input_blen(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,LPVOID outputbuffer,DWORD * total_outlen,DWORD) typedef DWORD __cdecl QUERYHANDLER<winreg.h>
InRange(ITextRange * pRange,__LONG32 * pb)virtual HRESULT WINAPI <tom.h>
INS_IMM64(Value,Address,Size,InstPos,ValPos)<winnt.h>
InSendMessage(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
InSendMessageEx(LPVOID lpReserved) WINUSERAPI DWORD WINAPI <winuser.h>
Insert(__LONG32 cchOffset,__LONG32 cchMaxInsert,__LONG32 * pcchActual)virtual HRESULT WINAPI <mlang.h>
Insert(BSTR bszCaption,BSTR bszVoice,__LONG32 bEnabled,__LONG32 bVisible,__LONG32 dwRefID,__LONG32 bBefore,__LONG32 * pdwID)virtual HRESULT WINAPI <mlang.h>
Insert(BSTR Name,BSTR RefName,VARIANT Before,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand ** Command)virtual HRESULT WINAPI <mlang.h>
InsertAfter(DXLISTPOS position,ARG_TYPE newElement)DXLISTPOS CDXList<dxtmpl.h>
InsertAt(int nIndex,ARG_TYPE newElement,int nCount)void CDXArray<dxtmpl.h>
InsertAt(int nIndex,ARG_TYPE newElement,int nCount=1) void <dxtmpl.h>
InsertAt(int nStartIndex,CDXArray * pNewArray)void CDXArray<dxtmpl.h>
InsertBefore(DXLISTPOS position,ARG_TYPE newElement)DXLISTPOS CDXList<dxtmpl.h>
InsertButton(int nIndex,LPMMCBUTTON lpButton)virtual HRESULT WINAPI <mmc.h>
InsertColumn(int nCol,LPCWSTR title,int nFormat,int nWidth)virtual HRESULT WINAPI <mmc.h>
InsertElement(IHTMLElement * pElementInsert,IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish)virtual HRESULT WINAPI <mshtmlc.h>
InsertEx(BSTR bszCaption,BSTR bszVoice,BSTR bszVoiceCaption,__LONG32 bEnabled,__LONG32 bVisible,__LONG32 ulHelpId,__LONG32 dwRefID,__LONG32 bBefore,__LONG32 * pdwID)virtual HRESULT WINAPI <agtsvr.h>
InsertFile(LPSTR lpstrName,FIO_CONTEXT * pContext,WINBOOL fKeepReference) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
InsertHeadList(IN OUT PLIST_ENTRY ListHead,IN OUT PLIST_ENTRY Entry)<msputils.h>
InsertHeadList(ListHead,Entry)<msputils.h>
InsertItem(ISClusNode * pNode,__LONG32 nPosition)virtual HRESULT WINAPI <msclus.h>
InsertItem(LPRESULTDATAITEM item)virtual HRESULT WINAPI <msclus.h>
InsertItem(LPSCOPEDATAITEM item)virtual HRESULT WINAPI <msclus.h>
InsertMenu(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
InsertMenuEntries(IUnknown * punk,HMENU hmenu,int nPos,int idFirst,int idLast,DWORD dwFlags)virtual HRESULT WINAPI <shdeprecated.h>
InsertMenuItemW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOW lpmi) WINUSERAPI WINBOOL WINAPI <winuser.h>
InsertMenuW(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
InsertPenData(HPENDATA,HPENDATA,UINT) int WINAPI <penwin.h>
InsertPenDataPoints(HPENDATA,UINT,UINT,UINT,LPPOINT,LPVOID) int WINAPI <penwin.h>
InsertPenDataStroke(HPENDATA,UINT,LPPOINT,LPVOID,LPSTROKEINFO) int WINAPI <penwin.h>
InsertRow(HACCESSOR hAccessor,void * pData)virtual HRESULT WINAPI <sqloledb.h>
InsertRow(HCHAPTER hReserved,HACCESSOR hAccessor,void * pData,HROW * phRow)virtual HRESULT WINAPI <sqloledb.h>
InsertSpecialFrame(DWORD FrameType,DWORD Flags,BYTE * pUserData,DWORD UserDataLength)virtual HRESULT WINAPI <netmon.h>
InsertTailList(IN OUT PLIST_ENTRY ListHead,IN OUT PLIST_ENTRY Entry)<msputils.h>
InsertTailList(ListHead,Entry)<msputils.h>
InsertText(OLECHAR * pchText,__LONG32 cch,IMarkupPointer * pPointerTarget)virtual HRESULT WINAPI <mshtmlc.h>
InsertText(OLECHAR * pText,LONG lLen)virtual HRESULT WINAPI <mshtmlc.h>
InsertTextFrag(__LONG32 iFrag,BSTR bstrInsert,IMarkupPointer * pPointerInsert)virtual HRESULT WINAPI <mshtmlc.h>
InsetRect(lprc,dx,dy)<windowsx.h>
Install(LPSYSTEMTIME pstInstall)virtual HRESULT WINAPI <shappmgr.h>
InstallAlternateWriter(VSS_ID _id1,VSS_ID _id2)HRESULT WINAPI <vswriter.h>
InstallApplication(PINSTALLDATA pInstallInfo) DWORD WINAPI <appmgmt.h>
InstallColorProfile(PCSTR,PCSTR) WINBOOL WINAPI <icm.h>
InstallColorProfileA(PCSTR,PCSTR) WINBOOL WINAPI <icm.h>
InstallColorProfileW(PCWSTR,PCWSTR) WINBOOL WINAPI <icm.h>
InstallComponent(BSTR bstrDLLFile,BSTR bstrTypelibFile,BSTR bstrProxyStubDLLFile)virtual HRESULT WINAPI <mtxadmin.h>
InstalledFontCollection()	virtual ~<gdiplusheaders.h>
InstallHinfSection(HWND Window,HINSTANCE ModuleHandle,PCSTR CommandLine,INT ShowCommand) VOID WINAPI <setupapi.h>
InstallHinfSectionA(HWND Window,HINSTANCE ModuleHandle,PCSTR CommandLine,INT ShowCommand) VOID WINAPI <setupapi.h>
InstallHinfSectionW(HWND Window,HINSTANCE ModuleHandle,PCWSTR CommandLine,INT ShowCommand) VOID WINAPI <setupapi.h>
InstallIMEA(LPSTR szIMEFileName,LPSTR szLayoutText,HKL * phKL)virtual HRESULT WINAPI <mshtmlc.h>
InstallIMEW(LPWSTR szIMEFileName,LPWSTR szLayoutText,HKL * phKL)virtual HRESULT WINAPI <mshtmlc.h>
INSTALLLOGATTRIBUTES_APPEND(1 << 1) <msi.h>
INSTALLLOGATTRIBUTES_FLUSHEACHLINE(1 << 1) INSTALLLOGATTRIBUTES_APPEND<msi.h>
INSTALLLOGMODE_ACTIONDATA(INSTALLMESSAGE_ACTIONDATA >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_ACTIONSTART(INSTALLMESSAGE_OUTOFDISKSPACE >> 24))))))))))))))))) INSTALLLOGMODE_OUTOFDISKSPACE<msi.h>
INSTALLLOGMODE_COMMONDATA(INSTALLMESSAGE_ACTIONDATA >> 24))))))))))))))))) INSTALLLOGMODE_ACTIONDATA<msi.h>
INSTALLLOGMODE_ERROR(INSTALLMESSAGE_FATALEXIT >> 24))))))))))))))))) INSTALLLOGMODE_FATALEXIT<msi.h>
INSTALLLOGMODE_EXTRADEBUG(INSTALLMESSAGE_TERMINATE >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_FATALEXIT(INSTALLMESSAGE_FATALEXIT >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_FILESINUSE(INSTALLMESSAGE_FILESINUSE >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_INFO(INSTALLMESSAGE_INFO >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_INITIALIZE(INSTALLMESSAGE_PROGRESS >> 24))))))))))))))))) INSTALLLOGMODE_PROGRESS<msi.h>
INSTALLLOGMODE_LOGONLYONERROR(INSTALLMESSAGE_TERMINATE >> 24))))))))))))))))) INSTALLLOGMODE_EXTRADEBUG<msi.h>
INSTALLLOGMODE_OUTOFDISKSPACE(INSTALLMESSAGE_OUTOFDISKSPACE >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_PROGRESS(INSTALLMESSAGE_PROGRESS >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_PROPERTYDUMP(INSTALLMESSAGE_PROGRESS >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_RESOLVESOURCE(INSTALLMESSAGE_INFO >> 24))))))))))))))))) INSTALLLOGMODE_INFO<msi.h>
INSTALLLOGMODE_SHOWDIALOG(INSTALLMESSAGE_TERMINATE >> 24))))))))))))))))) INSTALLLOGMODE_TERMINATE<msi.h>
INSTALLLOGMODE_TERMINATE(INSTALLMESSAGE_TERMINATE >> 24))))))))))))))))) <msi.h>
INSTALLLOGMODE_USER(INSTALLMESSAGE_WARNING >> 24))))))))))))))))) INSTALLLOGMODE_WARNING<msi.h>
INSTALLLOGMODE_VERBOSE(INSTALLMESSAGE_PROGRESS >> 24))))))))))))))))) INSTALLLOGMODE_PROPERTYDUMP<msi.h>
INSTALLLOGMODE_WARNING(INSTALLMESSAGE_WARNING >> 24))))))))))))))))) <msi.h>
InstallPackage(BSTR bstrPackageFile,BSTR bstrInstallPath,__LONG32 lOptions)virtual HRESULT WINAPI <mtxadmin.h>
InstallPerfDll(LPCSTR szComputerName,LPCSTR lpIniFile,ULONG_PTR dwFlags) LOADPERF_FUNCTION <loadperf.h>
InstallPerfDllA(LPCSTR szComputerName,LPCSTR lpIniFile,ULONG_PTR dwFlags) LOADPERF_FUNCTION <loadperf.h>
InstallPerfDllW(LPCWSTR szComputerName,LPCWSTR lpIniFile,ULONG_PTR dwFlags) LOADPERF_FUNCTION <loadperf.h>
InstallPKCS7(BSTR PKCS7)virtual HRESULT WINAPI <xenroll.h>
InstallPKCS7Blob(PCRYPT_DATA_BLOB pBlobPKCS7)virtual HRESULT WINAPI <xenroll.h>
InstallPKCS7BlobEx(PCRYPT_DATA_BLOB pBlobPKCS7,LONG * plCertInstalled)virtual HRESULT WINAPI <xenroll.h>
InstallPKCS7Ex(BSTR PKCS7,LONG * plCertInstalled)virtual HRESULT WINAPI <xenroll.h>
InstallPrintProcessor(HWND hWnd)WINBOOL WINAPI <winsplp.h>
InstallRecognizer(LPSTR) HREC WINAPI <penwin.h>
InstallRemoteComponent(BSTR bstrServer,BSTR bstrPackageID,BSTR bstrCLSID)virtual HRESULT WINAPI <mtxadmin.h>
InstallRemoteComponentByName(BSTR bstrServer,BSTR bstrPackageName,BSTR bstrProgID)virtual HRESULT WINAPI <mtxadmin.h>
INSTALLUI_HANDLER_RECORD(LPVOID pvContext,UINT iMessageType,MSIHANDLE hRecord)typedef int<msi.h>
INSTALLUI_HANDLERA(LPVOID pvContext,UINT iMessageType,LPCSTR szMessage)typedef int<msi.h>
INSTALLUI_HANDLERW(LPVOID pvContext,UINT iMessageType,LPCWSTR szMessage)typedef int<msi.h>
InstantMessage(__LONG32 lRow)virtual HRESULT WINAPI <msimcntl.h>
InStory(ITextRange * pRange,__LONG32 * pb)virtual HRESULT WINAPI <tom.h>
INT16_C(val)<stdint.h>
INT32_C(val)<stdint.h>
Int32x32To64(a, b)<winnt.h>
INT64_C()()()
INT64_C(val)<stdint.h>
Int64ShllMod32(a, b)<winnt.h>
Int64ShraMod32(a, b)<winnt.h>
Int64ShrlMod32(a, b)<winnt.h>
INT8_C(val)<stdint.h>
InterlockedAdd64(IN OUT LONG64 volatile * Addend,IN LONG64 Value)<winnt.h>
InterlockedAnd(LONG volatile * Destination,LONG Value) LONG __cdecl <winnt.h>
InterlockedAnd(unsigned __int64 volatile * Destination,unsigned __int64 Value) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedAnd16(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedAnd16Acquire(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedAnd16Release(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedAnd64(LONG64 volatile * Destination,LONG64 Value) LONG64 <winnt.h>
InterlockedAnd64(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winnt.h>
InterlockedAnd64_Inline(LONGLONG volatile * Destination,LONGLONG Value) FORCEINLINE LONGLONG <winbase.h>
InterlockedAnd64Acquire(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winbase.h>
InterlockedAnd64Release(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winbase.h>
InterlockedAnd8(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedAnd8Acquire(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedAnd8Release(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedAnd_Inline(LONG volatile * Target,LONG Set) FORCEINLINE LONG <winbase.h>
InterlockedAndAcquire(LONG volatile * Destination,LONG Value) LONG __cdecl <winbase.h>
InterlockedAndRelease(LONG volatile * Destination,LONG Value) LONG __cdecl <winbase.h>
InterlockedBitTestAndComplement_Inline(LONG volatile * Base,LONG Bit) FORCEINLINE BOOLEAN <winbase.h>
InterlockedBitTestAndReset(IN LONG volatile * Base,IN LONG Bit)<winbase.h>
InterlockedBitTestAndReset_Inline(LONG volatile * Base,LONG Bit) FORCEINLINE BOOLEAN <winbase.h>
InterlockedBitTestAndSet(IN LONG volatile * Base,IN LONG Bit)<winbase.h>
InterlockedBitTestAndSet_Inline(LONG volatile * Base,LONG Bit) FORCEINLINE BOOLEAN <winbase.h>
InterlockedCompare64Exchange128(LONG64 volatile * Destination,LONG64 ExchangeHigh,LONG64 ExchangeLow,LONG64 Comperand) LONG64 __cdecl <winbase.h>
InterlockedCompare64ExchangeAcquire128(LONG64 volatile * Destination,LONG64 ExchangeHigh,LONG64 ExchangeLow,LONG64 Comperand) LONG64 __cdecl <winbase.h>
InterlockedCompare64ExchangeRelease128(LONG64 volatile * Destination,LONG64 ExchangeHigh,LONG64 ExchangeLow,LONG64 Comperand) LONG64 __cdecl <winbase.h>
InterlockedCompareExchange(IN OUT LONG volatile * Destination,IN LONG Exchange,IN LONG Comparand)<winnt.h>
InterlockedCompareExchange(LONG volatile * Destination,LONG Exchange,LONG Comperand) __MINGW_INTRIN_INLINE LONG WINAPI <winnt.h>
InterlockedCompareExchange(LONG volatile * Destination,LONG ExChange,LONG Comperand) LONG __cdecl <winnt.h>
InterlockedCompareExchange(unsigned __int64 volatile * Destination,unsigned __int64 Exchange,unsigned __int64 Comperand) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedCompareExchange(unsigned long volatile * Destination,unsigned long Exchange,unsigned long Comperand) FORCEINLINE unsigned long <winnt.h>
InterlockedCompareExchange(unsigned volatile * Destination,unsigned Exchange,unsigned Comperand) FORCEINLINE unsigned <winnt.h>
InterlockedCompareExchange64(LONG64 volatile * Destination,LONG64 ExChange,LONG64 Comperand) LONG64 <winnt.h>
InterlockedCompareExchange64(LONGLONG volatile * Destination,LONGLONG Exchange,LONGLONG Comperand) __MINGW_INTRIN_INLINE LONGLONG WINAPI <winnt.h>
InterlockedCompareExchange64(LONGLONG volatile * Destination,LONGLONG ExChange,LONGLONG Comperand) LONGLONG __cdecl <winnt.h>
InterlockedCompareExchangeAcquire(LONG volatile * Destination,LONG ExChange,LONG Comperand) LONG __cdecl <winnt.h>
InterlockedCompareExchangeAcquire64(LONGLONG volatile * Destination,LONGLONG ExChange,LONGLONG Comperand) LONGLONG __cdecl <winnt.h>
InterlockedCompareExchangePointer(Destination, Exchange, Comparand)<winnt.h>
InterlockedCompareExchangePointer(Destination, ExChange, Comperand)<winnt.h>
InterlockedCompareExchangePointer(PVOID volatile * Destination,PVOID Exchange,PVOID Comperand) PVOID <winnt.h>
InterlockedCompareExchangePointer(PVOID volatile * Destination,PVOID ExChange,PVOID Comperand) PVOID __cdecl <winnt.h>
InterlockedCompareExchangePointerAcquire(PVOID volatile * Destination,PVOID Exchange,PVOID Comperand) PVOID __cdecl <winnt.h>
InterlockedCompareExchangePointerRelease(PVOID volatile * Destination,PVOID Exchange,PVOID Comperand) PVOID __cdecl <winnt.h>
InterlockedCompareExchangeRelease(LONG volatile * Destination,LONG ExChange,LONG Comperand) LONG __cdecl <winnt.h>
InterlockedCompareExchangeRelease64(LONGLONG volatile * Destination,LONGLONG ExChange,LONGLONG Comperand) LONGLONG __cdecl <winnt.h>
InterlockedDecrement(IN OUT LONG volatile * Addend)<winnt.h>
InterlockedDecrement(LONG volatile * Addend) LONG <winnt.h>
InterlockedDecrement(LONG volatile * lpAddend) LONG __cdecl <winnt.h>
InterlockedDecrement(unsigned __int64 volatile * Addend) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedDecrement(unsigned long volatile * Addend) FORCEINLINE unsigned long <winnt.h>
InterlockedDecrement(unsigned volatile * Addend) FORCEINLINE unsigned <winnt.h>
InterlockedDecrement64(LONG64 volatile * Addend) LONG64 <winnt.h>
InterlockedDecrement64(LONGLONG volatile * Addend) LONGLONG __cdecl <winnt.h>
InterlockedDecrementAcquire(LONG volatile * Addend) LONG __cdecl <winnt.h>
InterlockedDecrementRelease(LONG volatile * Addend) LONG __cdecl <winnt.h>
InterlockedDecrementSizeT(a)<winnt.h>
InterlockedExchange(IN OUT LONG volatile * Destination,IN LONG Value)<winnt.h>
InterlockedExchange(LONG volatile * Target,LONG Value) LONG __cdecl <winnt.h>
InterlockedExchange(unsigned __int64 volatile * Target,unsigned __int64 Value) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedExchange(unsigned long volatile * Target,unsigned long Value) FORCEINLINE unsigned long <winnt.h>
InterlockedExchange(unsigned volatile * Target,unsigned Value) FORCEINLINE unsigned <winnt.h>
InterlockedExchange64(LONG64 volatile * Target,LONG64 Value) LONG64 <winnt.h>
InterlockedExchange64(LONGLONG volatile * Target,LONGLONG Value) LONGLONG __cdecl <winnt.h>
InterlockedExchangeAcquire64(LONGLONG volatile * Target,LONGLONG Value) LONGLONG __cdecl <winnt.h>
InterlockedExchangeAdd(IN OUT LONG volatile * Addend,IN LONG Value)<winnt.h>
InterlockedExchangeAdd(LONG volatile * Addend,LONG Value) LONG __cdecl <winnt.h>
InterlockedExchangeAdd(unsigned __int64 volatile * Addend,unsigned __int64 Value) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedExchangeAdd(unsigned long volatile * Addend,unsigned long Value) FORCEINLINE unsigned long <winnt.h>
InterlockedExchangeAdd(unsigned volatile * Addend,unsigned Value) FORCEINLINE unsigned <winnt.h>
InterlockedExchangeAdd64(LONG64 volatile * Addend,LONG64 Value) LONG64 <winnt.h>
InterlockedExchangeAdd64(LONGLONG volatile * Addend,LONGLONG Value) LONGLONG __cdecl <winnt.h>
InterlockedExchangeAddSizeT(a, b)<winnt.h>
InterlockedExchangeAddSizeT(a,b)<winnt.h>
InterlockedExchangePointer(PVOID volatile * Target,PVOID Value) PVOID __cdecl <winnt.h>
InterlockedExchangePointer(Target, Value)<winnt.h>
InterlockedExchangeSubtract(unsigned __int64 volatile * Addend,unsigned __int64 Value) FORCEINLINE unsigned __int64 <winbase.h>
InterlockedExchangeSubtract(unsigned long volatile * Addend,unsigned long Value) FORCEINLINE unsigned long <winbase.h>
InterlockedExchangeSubtract(unsigned volatile * Addend,unsigned Value) FORCEINLINE unsigned <winbase.h>
InterlockedFlushSList(Head)<interlockedapi.h>
InterlockedFlushSList(ListHead)<interlockedapi.h>
InterlockedFlushSList(PSLIST_HEADER ListHead) WINBASEAPI PSLIST_ENTRY WINAPI <interlockedapi.h>
InterlockedIncrement(IN OUT LONG volatile * Addend)<winnt.h>
InterlockedIncrement(LONG volatile * Addend) LONG <winnt.h>
InterlockedIncrement(LONG volatile * lpAddend) LONG __cdecl <winnt.h>
InterlockedIncrement(unsigned __int64 volatile * Addend) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedIncrement(unsigned long volatile * Addend) FORCEINLINE unsigned long <winnt.h>
InterlockedIncrement(unsigned volatile * Addend) FORCEINLINE unsigned <winnt.h>
InterlockedIncrement64(LONG64 volatile * Addend) LONG64 <winnt.h>
InterlockedIncrement64(LONGLONG volatile * Addend) LONGLONG __cdecl <winnt.h>
InterlockedIncrementAcquire(LONG volatile * Addend) LONG __cdecl <winnt.h>
InterlockedIncrementRelease(LONG volatile * Addend) LONG __cdecl <winnt.h>
InterlockedIncrementSizeT(a)<winnt.h>
InterlockedOr(LONG volatile * Destination,LONG Value) LONG __cdecl <winnt.h>
InterlockedOr(unsigned __int64 volatile * Destination,unsigned __int64 Value) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedOr16(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedOr16Acquire(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedOr16Release(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedOr64(LONG64 volatile * Destination,LONG64 Value) LONG64 <winnt.h>
InterlockedOr64(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winnt.h>
InterlockedOr64_Inline(LONGLONG volatile * Destination,LONGLONG Value) FORCEINLINE LONGLONG <winbase.h>
InterlockedOr64Acquire(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winbase.h>
InterlockedOr64Release(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winbase.h>
InterlockedOr8(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedOr8Acquire(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedOr8Release(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedOr_Inline(LONG volatile * Target,LONG Set) FORCEINLINE LONG <winbase.h>
InterlockedOrAcquire(LONG volatile * Destination,LONG Value) LONG __cdecl <winbase.h>
InterlockedOrRelease(LONG volatile * Destination,LONG Value) LONG __cdecl <winbase.h>
InterlockedPopEntrySList(Head)<interlockedapi.h>
InterlockedPopEntrySList(IN PSLIST_HEADER ListHead)<interlockedapi.h>
InterlockedPopEntrySList(PSLIST_HEADER ListHead) WINBASEAPI PSLIST_ENTRY WINAPI <interlockedapi.h>
InterlockedPushEntrySList(Head, Entry)<interlockedapi.h>
InterlockedPushEntrySList(IN PSLIST_HEADER ListHead,IN PSLIST_ENTRY ListEntry)<interlockedapi.h>
InterlockedPushEntrySList(PSLIST_HEADER ListHead,PSLIST_ENTRY ListEntry) WINBASEAPI PSLIST_ENTRY WINAPI <interlockedapi.h>
InterlockedPushListSList(IN OUT PSLIST_HEADER ListHead,IN OUT PSLIST_ENTRY List,IN OUT PSLIST_ENTRY ListEnd,IN ULONG Count)<interlockedapi.h>
InterlockedPushListSListEx(PSLIST_HEADER ListHead,PSLIST_ENTRY List,PSLIST_ENTRY ListEnd,ULONG Count) WINBASEAPI PSLIST_ENTRY WINAPI <interlockedapi.h>
InterlockedXor(LONG volatile * Destination,LONG Value) LONG __cdecl <winnt.h>
InterlockedXor(unsigned __int64 volatile * Destination,unsigned __int64 Value) FORCEINLINE unsigned __int64 <winnt.h>
InterlockedXor16(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedXor16Acquire(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedXor16Release(SHORT volatile * Destination,SHORT Value) SHORT __cdecl <winbase.h>
InterlockedXor64(LONG64 volatile * Destination,LONG64 Value) LONG64 <winnt.h>
InterlockedXor64(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winnt.h>
InterlockedXor64_Inline(LONGLONG volatile * Destination,LONGLONG Value) FORCEINLINE LONGLONG <winbase.h>
InterlockedXor64Acquire(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winbase.h>
InterlockedXor64Release(LONGLONG volatile * Destination,LONGLONG Value) LONGLONG __cdecl <winbase.h>
InterlockedXor8(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedXor8Acquire(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedXor8Release(char volatile * Destination,char Value) char __cdecl <winbase.h>
InterlockedXor_Inline(LONG volatile * Target,LONG Set) FORCEINLINE LONG <winbase.h>
InterlockedXorAcquire(LONG volatile * Destination,LONG Value) LONG __cdecl <winbase.h>
InterlockedXorRelease(LONG volatile * Destination,LONG Value) LONG __cdecl <winbase.h>
InternalAddRef()       void <mspstrm.h>
InternalAuthenticate(BYTE byAlgorithmRef,BYTE bySecretRef,LPBYTEBUFFER pChallenge,LONG lReplyBytes,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
InternalCreateStream(DWORD dwMediaType,TERMINAL_DIRECTION Direction,ITStream ** ppStream) virtual HRESULT <mspcall.h>
InternalGetWindowText(HWND hWnd,LPWSTR pString,int cchMaxCount) WINUSERAPI int WINAPI <winuser.h>
InternalRelease()       unsigned long <mspstrm.h>
INTERNET_STATUS_CALLBACK(HINTERNET hInternet,DWORD_PTR dwContext,DWORD dwInternetStatus,LPVOID lpvStatusInformation,DWORD dwStatusInformationLength) typedef VOID<wininet.h>
INTERNETAPI(type)<wininet.h>
InternetAttemptConnect(DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetAuthNotifyCallback(DWORD_PTR dwContext,DWORD dwReturn,LPVOID lpReserved) DWORD <wininet.h>
InternetAutodial(DWORD dwFlags,HWND hwndParent) INTERNETAPI_<wininet.h>
InternetAutodialHangup(DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetCanonicalizeUrl(LPCSTR lpszUrl,LPSTR lpszBuffer,LPDWORD lpdwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetCanonicalizeUrlA(LPCSTR lpszUrl,LPSTR lpszBuffer,LPDWORD lpdwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetCanonicalizeUrlW(LPCWSTR lpszUrl,LPWSTR lpszBuffer,LPDWORD lpdwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetCheckConnection(LPCSTR lpszUrl,DWORD dwFlags,DWORD dwReserved) BOOLAPI <wininet.h>
InternetCheckConnectionA(LPCSTR lpszUrl,DWORD dwFlags,DWORD dwReserved) BOOLAPI <wininet.h>
InternetCheckConnectionW(LPCWSTR lpszUrl,DWORD dwFlags,DWORD dwReserved) BOOLAPI <wininet.h>
InternetClearAllPerSiteCookieDecisions() INTERNETAPI_<wininet.h>
InternetCloseHandle(HINTERNET hInternet) BOOLAPI <wininet.h>
InternetCombineUrl(LPCSTR lpszBaseUrl,LPCSTR lpszRelativeUrl,LPSTR lpszBuffer,LPDWORD lpdwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetCombineUrlA(LPCSTR lpszBaseUrl,LPCSTR lpszRelativeUrl,LPSTR lpszBuffer,LPDWORD lpdwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetCombineUrlW(LPCWSTR lpszBaseUrl,LPCWSTR lpszRelativeUrl,LPWSTR lpszBuffer,LPDWORD lpdwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetConfirmZoneCrossing(HWND hWnd,LPSTR szUrlPrev,LPSTR szUrlNew,WINBOOL bPost) INTERNETAPI_<wininet.h>
InternetConfirmZoneCrossingA(HWND hWnd,LPSTR szUrlPrev,LPSTR szUrlNew,WINBOOL bPost) INTERNETAPI_<wininet.h>
InternetConfirmZoneCrossingW(HWND hWnd,LPWSTR szUrlPrev,LPWSTR szUrlNew,WINBOOL bPost) INTERNETAPI_<wininet.h>
InternetConnect(HINTERNET hInternet,LPCSTR lpszServerName,INTERNET_PORT nServerPort,LPCSTR lpszUserName,LPCSTR lpszPassword,DWORD dwService,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetConnectA(HINTERNET hInternet,LPCSTR lpszServerName,INTERNET_PORT nServerPort,LPCSTR lpszUserName,LPCSTR lpszPassword,DWORD dwService,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetConnectW(HINTERNET hInternet,LPCWSTR lpszServerName,INTERNET_PORT nServerPort,LPCWSTR lpszUserName,LPCWSTR lpszPassword,DWORD dwService,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetCrackUrl(LPCSTR lpszUrl,DWORD dwUrlLength,DWORD dwFlags,LPURL_COMPONENTSA lpUrlComponents) BOOLAPI <wininet.h>
InternetCrackUrlA(LPCSTR lpszUrl,DWORD dwUrlLength,DWORD dwFlags,LPURL_COMPONENTSA lpUrlComponents) BOOLAPI <wininet.h>
InternetCrackUrlW(LPCWSTR lpszUrl,DWORD dwUrlLength,DWORD dwFlags,LPURL_COMPONENTSW lpUrlComponents) BOOLAPI <wininet.h>
InternetCreateUrl(LPURL_COMPONENTSA lpUrlComponents,DWORD dwFlags,LPSTR lpszUrl,LPDWORD lpdwUrlLength) BOOLAPI <wininet.h>
InternetCreateUrlA(LPURL_COMPONENTSA lpUrlComponents,DWORD dwFlags,LPSTR lpszUrl,LPDWORD lpdwUrlLength) BOOLAPI <wininet.h>
InternetCreateUrlW(LPURL_COMPONENTSW lpUrlComponents,DWORD dwFlags,LPWSTR lpszUrl,LPDWORD lpdwUrlLength) BOOLAPI <wininet.h>
InternetDeInitializeAutoProxyDll(LPSTR lpszMime,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetDial(HWND hwndParent,LPSTR lpszConnectoid,DWORD dwFlags,DWORD_PTR * lpdwConnection,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetDial(HWND hwndParent,LPSTR lpszConnectoid,DWORD dwFlags,LPDWORD lpdwConnection,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetDialA(HWND hwndParent,LPSTR lpszConnectoid,DWORD dwFlags,DWORD_PTR * lpdwConnection,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetDialW(HWND hwndParent,LPWSTR lpszConnectoid,DWORD dwFlags,DWORD_PTR * lpdwConnection,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetEnumPerSiteCookieDecision(LPSTR pszSiteName,unsigned __LONG32 * pcSiteNameSize,unsigned __LONG32 * pdwDecision,unsigned __LONG32 dwIndex) INTERNETAPI_<wininet.h>
InternetEnumPerSiteCookieDecisionA(LPSTR pszSiteName,unsigned __LONG32 * pcSiteNameSize,unsigned __LONG32 * pdwDecision,unsigned __LONG32 dwIndex) INTERNETAPI_<wininet.h>
InternetEnumPerSiteCookieDecisionW(LPWSTR pszSiteName,unsigned __LONG32 * pcSiteNameSize,unsigned __LONG32 * pdwDecision,unsigned __LONG32 dwIndex) INTERNETAPI_<wininet.h>
InternetErrorDlg(HWND hWnd,HINTERNET hRequest,DWORD dwError,DWORD dwFlags,LPVOID * lppvData) INTERNETAPI_<wininet.h>
InternetFindNextFile(HINTERNET hFind,LPVOID lpvFindData) BOOLAPI <wininet.h>
InternetFindNextFileA(HINTERNET hFind,LPVOID lpvFindData) BOOLAPI <wininet.h>
InternetFindNextFileW(HINTERNET hFind,LPVOID lpvFindData) BOOLAPI <wininet.h>
InternetGetConnectedState(LPDWORD lpdwFlags,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetGetConnectedStateEx(LPDWORD lpdwFlags,LPSTR lpszConnectionName,DWORD dwBufLen,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetGetConnectedStateEx(LPDWORD lpdwFlags,LPSTR lpszConnectionName,DWORD dwNameLen,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetGetConnectedStateExA(LPDWORD lpdwFlags,LPSTR lpszConnectionName,DWORD dwBufLen,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetGetConnectedStateExW(LPDWORD lpdwFlags,LPWSTR lpszConnectionName,DWORD dwBufLen,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetGetCookie(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPSTR lpszCookieData,LPDWORD lpdwSize) BOOLAPI <wininet.h>
InternetGetCookieA(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPSTR lpszCookieData,LPDWORD lpdwSize) BOOLAPI <wininet.h>
InternetGetCookieEx(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPSTR lpszCookieData,LPDWORD lpdwSize,DWORD dwFlags,LPVOID lpReserved) BOOLAPI <wininet.h>
InternetGetCookieExA(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPSTR lpszCookieData,LPDWORD lpdwSize,DWORD dwFlags,LPVOID lpReserved) BOOLAPI <wininet.h>
InternetGetCookieExW(LPCWSTR lpszUrl,LPCWSTR lpszCookieName,LPWSTR lpszCookieData,LPDWORD lpdwSize,DWORD dwFlags,LPVOID lpReserved) BOOLAPI <wininet.h>
InternetGetCookieW(LPCWSTR lpszUrl,LPCWSTR lpszCookieName,LPWSTR lpszCookieData,LPDWORD lpdwSize) BOOLAPI <wininet.h>
InternetGetLastResponseInfo(LPDWORD lpdwError,LPSTR lpszBuffer,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
InternetGetLastResponseInfoA(LPDWORD lpdwError,LPSTR lpszBuffer,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
InternetGetLastResponseInfoW(LPDWORD lpdwError,LPWSTR lpszBuffer,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
InternetGetPerSiteCookieDecision(LPCSTR pchHostName,unsigned __LONG32 * pResult) INTERNETAPI_<wininet.h>
InternetGetPerSiteCookieDecisionA(LPCSTR pchHostName,unsigned __LONG32 * pResult) INTERNETAPI_<wininet.h>
InternetGetPerSiteCookieDecisionW(LPCWSTR pchHostName,unsigned __LONG32 * pResult) INTERNETAPI_<wininet.h>
InternetGetProxyInfo(LPCSTR lpszUrl,DWORD dwUrlLength,LPSTR lpszUrlHostName,DWORD dwUrlHostNameLength,LPSTR * lplpszProxyHostName,LPDWORD lpdwProxyHostNameLength) INTERNETAPI_<wininet.h>
InternetGetSecurityInfoByURL(LPSTR,PCCERT_CHAIN_CONTEXT *,DWORD *)WINBOOL     WINAPI <winineti.h>
InternetGetSecurityInfoByURLA(LPSTR,PCCERT_CHAIN_CONTEXT *,DWORD *)WINBOOL     WINAPI <winineti.h>
InternetGetSecurityInfoByURLW(LPCWSTR,PCCERT_CHAIN_CONTEXT *,DWORD *)WINBOOL     WINAPI <winineti.h>
InternetGoOnline(LPSTR lpszURL,HWND hwndParent,DWORD dwFlags) INTERNETAPI_<wininet.h>
InternetGoOnlineA(LPSTR lpszURL,HWND hwndParent,DWORD dwFlags) INTERNETAPI_<wininet.h>
InternetGoOnlineW(LPWSTR lpszURL,HWND hwndParent,DWORD dwFlags) INTERNETAPI_<wininet.h>
InternetHangUp(DWORD_PTR dwConnection,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetInitializeAutoProxyDll(DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetLockRequestFile(HINTERNET hInternet,HANDLE * lphLockRequestInfo) BOOLAPI <wininet.h>
InternetOpen(LPCSTR lpszAgent,DWORD dwAccessType,LPCSTR lpszProxy,LPCSTR lpszProxyBypass,DWORD dwFlags) INTERNETAPI_<wininet.h>
InternetOpenA(LPCSTR lpszAgent,DWORD dwAccessType,LPCSTR lpszProxy,LPCSTR lpszProxyBypass,DWORD dwFlags) INTERNETAPI_<wininet.h>
InternetOpenUrl(HINTERNET hInternet,LPCSTR lpszUrl,LPCSTR lpszHeaders,DWORD dwHeadersLength,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetOpenUrlA(HINTERNET hInternet,LPCSTR lpszUrl,LPCSTR lpszHeaders,DWORD dwHeadersLength,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetOpenUrlW(HINTERNET hInternet,LPCWSTR lpszUrl,LPCWSTR lpszHeaders,DWORD dwHeadersLength,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetOpenW(LPCWSTR lpszAgent,DWORD dwAccessType,LPCWSTR lpszProxy,LPCWSTR lpszProxyBypass,DWORD dwFlags) INTERNETAPI_<wininet.h>
InternetQueryDataAvailable(HINTERNET hFile,LPDWORD lpdwNumberOfBytesAvailable,DWORD dwFlags,DWORD_PTR dwContext) BOOLAPI <wininet.h>
InternetQueryFortezzaStatus(DWORD *,DWORD_PTR)WINBOOL     WINAPI <winineti.h>
InternetQueryOption(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
InternetQueryOptionA(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
InternetQueryOptionW(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,LPDWORD lpdwBufferLength) BOOLAPI <wininet.h>
InternetReadFile(HINTERNET hFile,LPVOID lpBuffer,DWORD dwNumberOfBytesToRead,LPDWORD lpdwNumberOfBytesRead) BOOLAPI <wininet.h>
InternetReadFileEx(HINTERNET hFile,LPINTERNET_BUFFERSA lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetReadFileExA(HINTERNET hFile,LPINTERNET_BUFFERSA lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetReadFileExW(HINTERNET hFile,LPINTERNET_BUFFERSW lpBuffersOut,DWORD dwFlags,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetSetCookie(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPCSTR lpszCookieData) BOOLAPI <wininet.h>
InternetSetCookieA(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPCSTR lpszCookieData) BOOLAPI <wininet.h>
InternetSetCookieEx(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPCSTR lpszCookieData,DWORD dwFlags,DWORD_PTR dwReserved) INTERNETAPI_<wininet.h>
InternetSetCookieExA(LPCSTR lpszUrl,LPCSTR lpszCookieName,LPCSTR lpszCookieData,DWORD dwFlags,DWORD_PTR dwReserved) INTERNETAPI_<wininet.h>
InternetSetCookieExW(LPCWSTR lpszUrl,LPCWSTR lpszCookieName,LPCWSTR lpszCookieData,DWORD dwFlags,DWORD_PTR dwReserved) INTERNETAPI_<wininet.h>
InternetSetCookieW(LPCWSTR lpszUrl,LPCWSTR lpszCookieName,LPCWSTR lpszCookieData) BOOLAPI <wininet.h>
InternetSetDialState(LPCSTR lpszConnectoid,DWORD dwState,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetSetDialStateA(LPCSTR lpszConnectoid,DWORD dwState,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetSetDialStateW(LPCWSTR lpszConnectoid,DWORD dwState,DWORD dwReserved) INTERNETAPI_<wininet.h>
InternetSetFilePointer(HINTERNET hFile,LONG lDistanceToMove,PVOID pReserved,DWORD dwMoveMethod,DWORD_PTR dwContext) INTERNETAPI_<wininet.h>
InternetSetOption(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,DWORD dwBufferLength) BOOLAPI <wininet.h>
InternetSetOptionA(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,DWORD dwBufferLength) BOOLAPI <wininet.h>
InternetSetOptionEx(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,DWORD dwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetSetOptionExA(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,DWORD dwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetSetOptionExW(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,DWORD dwBufferLength,DWORD dwFlags) BOOLAPI <wininet.h>
InternetSetOptionW(HINTERNET hInternet,DWORD dwOption,LPVOID lpBuffer,DWORD dwBufferLength) BOOLAPI <wininet.h>
InternetSetPerSiteCookieDecision(LPCSTR pchHostName,DWORD dwDecision) INTERNETAPI_<wininet.h>
InternetSetPerSiteCookieDecisionA(LPCSTR pchHostName,DWORD dwDecision) INTERNETAPI_<wininet.h>
InternetSetPerSiteCookieDecisionW(LPCWSTR pchHostName,DWORD dwDecision) INTERNETAPI_<wininet.h>
InternetSetStatusCallback(HINTERNET hInternet,INTERNET_STATUS_CALLBACK lpfnInternetCallback) INTERNETAPI_<wininet.h>
InternetSetStatusCallbackA(HINTERNET hInternet,INTERNET_STATUS_CALLBACK lpfnInternetCallback) INTERNETAPI_<wininet.h>
InternetSetStatusCallbackW(HINTERNET hInternet,INTERNET_STATUS_CALLBACK lpfnInternetCallback) INTERNETAPI_<wininet.h>
InternetTimeFromSystemTimeW(CONST SYSTEMTIME * pst,DWORD dwRFC,LPWSTR lpszTime,DWORD cbTime) BOOLAPI <wininet.h>
InternetTimeToSystemTime(LPCSTR lpszTime,SYSTEMTIME * pst,DWORD dwReserved) BOOLAPI <wininet.h>
InternetTimeToSystemTimeA(LPCSTR lpszTime,SYSTEMTIME * pst,DWORD dwReserved) BOOLAPI <wininet.h>
InternetTimeToSystemTimeW(LPCWSTR lpszTime,SYSTEMTIME * pst,DWORD dwReserved) BOOLAPI <wininet.h>
InternetUnlockRequestFile(HANDLE hLockRequestInfo) BOOLAPI <wininet.h>
InternetWriteFile(HINTERNET hFile,LPCVOID lpBuffer,DWORD dwNumberOfBytesToWrite,LPDWORD lpdwNumberOfBytesWritten) BOOLAPI <wininet.h>
Interrupt(__LONG32 dwReqID,__LONG32 * pdwReqID)virtual HRESULT WINAPI <agtsvr.h>
Interrupt(IDispatch * InterruptRequest,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <agtsvr.h>
Intersect(const GraphicsPath * path)__inline__ Status Region::<gdiplustypes.h>
Intersect(const Rect & rect)	BOOL <gdiplustypes.h>
Intersect(const RectF & rect)	BOOL <gdiplustypes.h>
Intersect(const Region * region)__inline__ Status Region::<gdiplustypes.h>
Intersect(Rect & c,const Rect & a,const Rect & b)	static BOOL <gdiplustypes.h>
Intersect(RectF & c,const RectF & a,const RectF & b)	static BOOL <gdiplustypes.h>
IntersectClip(const Rect & rect)	Status <gdiplusgraphics.h>
IntersectClip(const RectF & rect)	Status <gdiplusgraphics.h>
IntersectClip(const Region * region)	Status <gdiplusgraphics.h>
IntersectClipRect(HDC hdc,int left,int top,int right,int bottom) WINGDIAPI int WINAPI <wingdi.h>
IntersectRect(LPRECT lprcDst,CONST RECT * lprcSrc1,CONST RECT * lprcSrc2) WINUSERAPI WINBOOL WINAPI <winuser.h>
IntersectRgn(hrgnResult,hrgnA,hrgnB)<windowsx.h>
IntersectsWith(const Rect & rc)	BOOL <gdiplustypes.h>
IntersectsWith(const RectF & rc)	BOOL <gdiplustypes.h>
IntlStrEqNA(s1,s2,nChar)<shlwapi.h>
IntlStrEqNIA(s1,s2,nChar)<shlwapi.h>
IntlStrEqNIW(s1,s2,nChar)<shlwapi.h>
IntlStrEqNW(s1,s2,nChar)<shlwapi.h>
IntlStrEqWorker(WINBOOL fCaseSens,LPCSTR lpString1,LPCSTR lpString2,int nChar)
IntlStrEqWorkerA(WINBOOL fCaseSens,LPCSTR lpString1,LPCSTR lpString2,int nChar) LWSTDAPI_<shlwapi.h>
IntlStrEqWorkerW(WINBOOL fCaseSens,LPCWSTR lpString1,LPCWSTR lpString2,int nChar) LWSTDAPI_<shlwapi.h>
INTMAX_C(val)<stdint.h>
Intserv_Obj_size(x)<lpmapi.h>
Intserv_Version(x)<lpmapi.h>
IntToF64vec2(const F64vec2 & a,int b)inline F64vec2 <dvec.h>
IntToPtr(const int i) static __inline void<basetsd.h>
IntToPtr(i)<basetsd.h>
Invalidate(RECT * pRect)virtual HRESULT WINAPI <mshtmlc.h>
InvalidateLayoutInfo(void)virtual HRESULT WINAPI <mshtmlc.h>
InvalidateName(PNAME_CACHE_CONTEXT pNameCache,LPBYTE lpbName,DWORD cbName) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
InvalidatePainterInfo(void)virtual HRESULT WINAPI <mshtmlc.h>
InvalidateRect(HWND hWnd,CONST RECT * lpRect,WINBOOL bErase) WINUSERAPI WINBOOL WINAPI <winuser.h>
InvalidateRect(RECT * prcInvalid)virtual HRESULT WINAPI <winuser.h>
InvalidateRegion(HRGN rgnInvalid)virtual HRESULT WINAPI <mshtmlc.h>
InvalidateRenderInfo(void)virtual HRESULT WINAPI <mshtmlc.h>
InvalidateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase) WINUSERAPI WINBOOL WINAPI <winuser.h>
InvalidateSize(void)virtual HRESULT WINAPI <mshtmlc.h>
InvalidateStyle(void)virtual HRESULT WINAPI <mshtmlc.h>
InventoryNtmsLibrary(HANDLE hSession,LPNTMS_GUID lpLibraryId,DWORD dwAction) DWORD WINAPI <ntmsapi.h>
Invert()	Status <d2d1helper.h>
InvertRect(HDC hDC,CONST RECT * lprc) WINUSERAPI WINBOOL WINAPI <winuser.h>
InvertRgn(HDC hdc,HRGN hrgn) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Invite(__LONG32 lRow)virtual HRESULT WINAPI <msimcntl.h>
Invite(BSTR EmailList,ICalendarMessage ** Request)virtual HRESULT WINAPI <msimcntl.h>
Invite(VARIANT varContact)virtual HRESULT WINAPI <msimcntl.h>
InviteContact(VARIANT vContact)virtual HRESULT WINAPI <msimcsdk.h>
InviteNetMeeting(void)virtual HRESULT WINAPI <msimcntl.h>
InviteSelected(void)virtual HRESULT WINAPI <msimcntl.h>
Invoke(IUnknown * punk)virtual HRESULT WINAPI <shdeprecated.h>
Invoke(void * pvReceiver,...)virtual HRESULT WINAPI <shdeprecated.h>
InvokeAtPresentationTime(IDeferredCommand ** pCmd,REFTIME time,GUID * iid,__LONG32 dispidMethod,short wFlags,__LONG32 cArgs,VARIANT * pDispParams,VARIANT * pvarResult,short * puArgErr)virtual HRESULT WINAPI <control.h>
InvokeAtStreamTime(IDeferredCommand ** pCmd,REFTIME time,GUID * iid,__LONG32 dispidMethod,short wFlags,__LONG32 cArgs,VARIANT * pDispParams,VARIANT * pvarResult,short * puArgErr)virtual HRESULT WINAPI <control.h>
InvokeCommand(ULONG nCommandID,IUnknown * piData)virtual HRESULT WINAPI <cluadmex.h>
InvokeService(IUnknown * pUnkInner)virtual HRESULT WINAPI <msdasc.h>
InvokeTuningWizard(OAHWND hwndParent)virtual HRESULT WINAPI <rtccore.h>
InvokeTuningWizardEx(OAHWND hwndParent,VARIANT_BOOL fAllowAudio,VARIANT_BOOL fAllowVideo)virtual HRESULT WINAPI <rtccore.h>
IoAcquireCancelSpinLock(OUT PKIRQL Irql)<wdm.h>
IoAcquireRemoveLock(RemoveLock, Tag)<wdm.h>
IoAcquireRemoveLockEx(IN PIO_REMOVE_LOCK RemoveLock,IN PVOID Tag OPTIONAL,IN PCSTR File,IN ULONG Line,IN ULONG RemlockSize)<wdm.h>
IoAcquireVpbSpinLock(OUT PKIRQL Irql)<ntifs.h>
IoAdjustPagingPathCount(_Count,\\\n_Increment)                           _Increment<wdm.h>
IoAllocateAdapterChannel(IN PADAPTER_OBJECT AdapterObject,IN PDEVICE_OBJECT DeviceObject,IN ULONG NumberOfMapRegisters,IN PDRIVER_CONTROL ExecutionRoutine,IN PVOID Context)<wdm.h>
IoAllocateAdapterChannel(IN PDMA_ADAPTER DmaAdapter,IN PDEVICE_OBJECT DeviceObject,IN ULONG NumberOfMapRegisters,IN PDRIVER_CONTROL ExecutionRoutine,IN PVOID Context)<wdm.h>
IoAllocateController(IN PCONTROLLER_OBJECT ControllerObject,IN PDEVICE_OBJECT DeviceObject,IN PDRIVER_CONTROL ExecutionRoutine,IN PVOID Context OPTIONAL)<ntddk.h>
IoAllocateDriverObjectExtension(IN PDRIVER_OBJECT DriverObject,IN PVOID ClientIdentificationAddress,IN ULONG DriverObjectExtensionSize,OUT PVOID * DriverObjectExtension)<wdm.h>
IoAllocateErrorLogEntry(IN PVOID IoObject,IN UCHAR EntrySize)<wdm.h>
IoAllocateIrp(IN CCHAR StackSize,IN BOOLEAN ChargeQuota)<wdm.h>
IoAllocateMdl(IN PVOID VirtualAddress OPTIONAL,IN ULONG Length,IN BOOLEAN SecondaryBuffer,IN BOOLEAN ChargeQuota,IN OUT PIRP Irp OPTIONAL)<wdm.h>
IoAllocateSfioStreamIdentifier(IN PFILE_OBJECT FileObject,IN ULONG Length,IN PVOID Signature,OUT PVOID * StreamIdentifier)<wdm.h>
IoAllocateWorkItem(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoAssignArcName(_ArcName, _DeviceName)<ntddk.h>
IoAssignResources(IN PUNICODE_STRING RegistryPath,IN PUNICODE_STRING DriverClassName OPTIONAL,IN PDRIVER_OBJECT DriverObject,IN PDEVICE_OBJECT DeviceObject OPTIONAL,IN PIO_RESOURCE_REQUIREMENTS_LIST RequestedResources OPTIONAL,IN OUT PCM_RESOURCE_LIST * AllocatedResources)<ntddk.h>
IoAttachDevice(IN PDEVICE_OBJECT SourceDevice,IN PUNICODE_STRING TargetDevice,OUT PDEVICE_OBJECT * AttachedDevice)<wdm.h>
IoAttachDeviceByPointer(IN PDEVICE_OBJECT SourceDevice,IN PDEVICE_OBJECT TargetDevice)<ntddk.h>
IoAttachDeviceToDeviceStack(IN PDEVICE_OBJECT SourceDevice,IN PDEVICE_OBJECT TargetDevice)<wdm.h>
IoAttachDeviceToDeviceStackSafe(IN PDEVICE_OBJECT SourceDevice,IN PDEVICE_OBJECT TargetDevice,OUT PDEVICE_OBJECT * AttachedToDeviceObject)<ntddk.h>
IoBuildAsynchronousFsdRequest(IN ULONG MajorFunction,IN PDEVICE_OBJECT DeviceObject,IN OUT PVOID Buffer OPTIONAL,IN ULONG Length OPTIONAL,IN PLARGE_INTEGER StartingOffset OPTIONAL,IN PIO_STATUS_BLOCK IoStatusBlock OPTIONAL)<wdm.h>
IoBuildDeviceIoControlRequest(IN ULONG IoControlCode,IN PDEVICE_OBJECT DeviceObject,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength,IN BOOLEAN InternalDeviceIoControl,IN PKEVENT Event,OUT PIO_STATUS_BLOCK IoStatusBlock)<wdm.h>
IoBuildPartialMdl(IN PMDL SourceMdl,IN OUT PMDL TargetMdl,IN PVOID VirtualAddress,IN ULONG Length)<wdm.h>
IoBuildSynchronousFsdRequest(IN ULONG MajorFunction,IN PDEVICE_OBJECT DeviceObject,IN OUT PVOID Buffer OPTIONAL,IN ULONG Length OPTIONAL,IN PLARGE_INTEGER StartingOffset OPTIONAL,IN PKEVENT Event,OUT PIO_STATUS_BLOCK IoStatusBlock)<wdm.h>
IoCallDriverStackSafeDefault(a, b)<wdm.h>
IoCancelFileOpen(IN PDEVICE_OBJECT DeviceObject,IN PFILE_OBJECT FileObject)<ntddk.h>
IoCancelIrp(IN PIRP Irp)<wdm.h>
IoCheckDesiredAccess(IN OUT PACCESS_MASK DesiredAccess,IN ACCESS_MASK GrantedAccess)<ntifs.h>
IoCheckEaBufferValidity(IN PFILE_FULL_EA_INFORMATION EaBuffer,IN ULONG EaLength,OUT PULONG ErrorOffset)<ntifs.h>
IoCheckFunctionAccess(IN ACCESS_MASK GrantedAccess,IN UCHAR MajorFunction,IN UCHAR MinorFunction,IN ULONG IoControlCode,IN PVOID Argument1 OPTIONAL,IN PVOID Argument2 OPTIONAL)<ntifs.h>
IoCheckQuerySetFileInformation(IN FILE_INFORMATION_CLASS FileInformationClass,IN ULONG Length,IN BOOLEAN SetOperation)<ntifs.h>
IoCheckQuerySetVolumeInformation(IN FS_INFORMATION_CLASS FsInformationClass,IN ULONG Length,IN BOOLEAN SetOperation)<ntifs.h>
IoCheckQuotaBufferValidity(IN PFILE_QUOTA_INFORMATION QuotaBuffer,IN ULONG QuotaLength,OUT PULONG ErrorOffset)<ntifs.h>
IoCheckShareAccess(IN ACCESS_MASK DesiredAccess,IN ULONG DesiredShareAccess,IN OUT PFILE_OBJECT FileObject,IN OUT PSHARE_ACCESS ShareAccess,IN BOOLEAN Update)<wdm.h>
IoCheckShareAccessEx(IN ACCESS_MASK DesiredAccess,IN ULONG DesiredShareAccess,IN OUT PFILE_OBJECT FileObject,IN OUT PSHARE_ACCESS ShareAccess,IN BOOLEAN Update,IN PBOOLEAN WritePermission)<wdm.h>
IoClearIrpExtraCreateParameter(IN OUT PIRP Irp)<ntddk.h>
IoConnectInterrupt(OUT PKINTERRUPT * InterruptObject,IN PKSERVICE_ROUTINE ServiceRoutine,IN PVOID ServiceContext OPTIONAL,IN PKSPIN_LOCK SpinLock OPTIONAL,IN ULONG Vector,IN KIRQL Irql,IN KIRQL SynchronizeIrql,IN KINTERRUPT_MODE InterruptMode,IN BOOLEAN ShareVector,IN KAFFINITY ProcessorEnableMask,IN BOOLEAN FloatingSave)<wdm.h>
IoConnectInterruptEx(IN OUT PIO_CONNECT_INTERRUPT_PARAMETERS Parameters)<wdm.h>
IoCopyCurrentIrpStackLocationToNext(IN OUT PIRP Irp)<wdm.h>
IoCreateController(IN ULONG Size)<ntddk.h>
IoCreateDevice(IN PDRIVER_OBJECT DriverObject,IN ULONG DeviceExtensionSize,IN PUNICODE_STRING DeviceName OPTIONAL,IN DEVICE_TYPE DeviceType,IN ULONG DeviceCharacteristics,IN BOOLEAN Exclusive,OUT PDEVICE_OBJECT * DeviceObject)<wdm.h>
IoCreateDisk(IN PDEVICE_OBJECT DeviceObject,IN struct _CREATE_DISK * Disk OPTIONAL)<ntddk.h>
IoCreateFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER AllocationSize OPTIONAL,IN ULONG FileAttributes,IN ULONG ShareAccess,IN ULONG Disposition,IN ULONG CreateOptions,IN PVOID EaBuffer OPTIONAL,IN ULONG EaLength,IN CREATE_FILE_TYPE CreateFileType,IN PVOID InternalParameters OPTIONAL,IN ULONG Options)<wdm.h>
IoCreateFileEx(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER AllocationSize OPTIONAL,IN ULONG FileAttributes,IN ULONG ShareAccess,IN ULONG Disposition,IN ULONG CreateOptions,IN PVOID EaBuffer OPTIONAL,IN ULONG EaLength,IN CREATE_FILE_TYPE CreateFileType,IN PVOID InternalParameters OPTIONAL,IN ULONG Options,IN PIO_DRIVER_CREATE_CONTEXT DriverContext OPTIONAL)<ntddk.h>
IoCreateFileSpecifyDeviceObjectHint(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER AllocationSize OPTIONAL,IN ULONG FileAttributes,IN ULONG ShareAccess,IN ULONG Disposition,IN ULONG CreateOptions,IN PVOID EaBuffer OPTIONAL,IN ULONG EaLength,IN CREATE_FILE_TYPE CreateFileType,IN PVOID InternalParameters OPTIONAL,IN ULONG Options,IN PVOID DeviceObject OPTIONAL)<ntddk.h>
IoCreateNotificationEvent(IN PUNICODE_STRING EventName,OUT PHANDLE EventHandle)<wdm.h>
IoCreateStreamFileObject(IN PFILE_OBJECT FileObject OPTIONAL,IN PDEVICE_OBJECT DeviceObject OPTIONAL)<ntifs.h>
IoCreateStreamFileObjectEx(IN PFILE_OBJECT FileObject OPTIONAL,IN PDEVICE_OBJECT DeviceObject OPTIONAL,OUT PHANDLE FileObjectHandle OPTIONAL)<ntifs.h>
IoCreateStreamFileObjectLite(IN PFILE_OBJECT FileObject OPTIONAL,IN PDEVICE_OBJECT DeviceObject OPTIONAL)<ntifs.h>
IoCreateSymbolicLink(IN PUNICODE_STRING SymbolicLinkName,IN PUNICODE_STRING DeviceName)<wdm.h>
IoCreateSynchronizationEvent(IN PUNICODE_STRING EventName,OUT PHANDLE EventHandle)<wdm.h>
IoCreateUnprotectedSymbolicLink(IN PUNICODE_STRING SymbolicLinkName,IN PUNICODE_STRING DeviceName)<wdm.h>
IoCsqInitialize(IN PIO_CSQ Csq,IN PIO_CSQ_INSERT_IRP CsqInsertIrp,IN PIO_CSQ_REMOVE_IRP CsqRemoveIrp,IN PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp,IN PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock,IN PIO_CSQ_RELEASE_LOCK CsqReleaseLock,IN PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp)<wdm.h>
IoCsqInitialize(PIO_CSQ Csq,PIO_CSQ_INSERT_IRP CsqInsertIrp,PIO_CSQ_REMOVE_IRP CsqRemoveIrp,PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp,PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock,PIO_CSQ_RELEASE_LOCK CsqReleaseLock,PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp)NTSTATUS NTAPI <wdm.h>
IoCsqInitializeEx(IN PIO_CSQ Csq,IN PIO_CSQ_INSERT_IRP_EX CsqInsertIrp,IN PIO_CSQ_REMOVE_IRP CsqRemoveIrp,IN PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp,IN PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock,IN PIO_CSQ_RELEASE_LOCK CsqReleaseLock,IN PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp)<wdm.h>
IoCsqInitializeEx(PIO_CSQ Csq,PIO_CSQ_INSERT_IRP_EX CsqInsertIrpEx,PIO_CSQ_REMOVE_IRP CsqRemoveIrp,PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp,PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock,PIO_CSQ_RELEASE_LOCK CsqReleaseLock,PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp)NTSTATUS NTAPI <wdm.h>
IoCsqInsertIrp(IN PIO_CSQ Csq,IN PIRP Irp,IN PIO_CSQ_IRP_CONTEXT Context OPTIONAL)<wdm.h>
IoCsqInsertIrp(PIO_CSQ Csq,PIRP Irp,PIO_CSQ_IRP_CONTEXT Context)VOID NTAPI <wdm.h>
IoCsqInsertIrpEx(IN PIO_CSQ Csq,IN PIRP Irp,IN PIO_CSQ_IRP_CONTEXT Context OPTIONAL,IN PVOID InsertContext OPTIONAL)<wdm.h>
IoCsqInsertIrpEx(PIO_CSQ Csq,PIRP Irp,PIO_CSQ_IRP_CONTEXT Context,PVOID InsertContext)NTSTATUS NTAPI <wdm.h>
IoCsqRemoveIrp(IN PIO_CSQ Csq,IN PIO_CSQ_IRP_CONTEXT Context)<wdm.h>
IoCsqRemoveIrp(PIO_CSQ Csq,PIO_CSQ_IRP_CONTEXT Context)PIRP NTAPI <wdm.h>
IoCsqRemoveNextIrp(IN PIO_CSQ Csq,IN PVOID PeekContext OPTIONAL)<wdm.h>
IoCsqRemoveNextIrp(PIO_CSQ Csq,PVOID PeekContext)PIRP NTAPI <wdm.h>
ioctlsocket(SOCKET s,__LONG32 cmd,u_long * argp) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
IoDeleteController(IN PCONTROLLER_OBJECT ControllerObject)<ntddk.h>
IoDeleteDevice(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoDeleteSymbolicLink(IN PUNICODE_STRING SymbolicLinkName)<wdm.h>
IoDetachDevice(IN OUT PDEVICE_OBJECT TargetDevice)<wdm.h>
IoDisconnectInterrupt(IN PKINTERRUPT InterruptObject)<wdm.h>
IoDisconnectInterruptEx(IN PIO_DISCONNECT_INTERRUPT_PARAMETERS Parameters)<wdm.h>
IoEnumerateDeviceObjectList(IN PDRIVER_OBJECT DriverObject,OUT PDEVICE_OBJECT * DeviceObjectList,IN ULONG DeviceObjectListSize,OUT PULONG ActualNumberDeviceObjects)<ntifs.h>
IoEnumerateRegisteredFiltersList(OUT PDRIVER_OBJECT * DriverObjectList,IN ULONG DriverObjectListSize,OUT PULONG ActualNumberDriverObjects)<ntifs.h>
IoFastQueryNetworkAttributes(IN POBJECT_ATTRIBUTES ObjectAttributes,IN ACCESS_MASK DesiredAccess,IN ULONG OpenOptions,OUT PIO_STATUS_BLOCK IoStatus,OUT PFILE_NETWORK_OPEN_INFORMATION Buffer)<ntifs.h>
IofCallDriver(IN PDEVICE_OBJECT DeviceObject,IN OUT PIRP Irp)<wdm.h>
IofCompleteRequest(IN PIRP Irp,IN CCHAR PriorityBoost)<wdm.h>
IoFlushAdapterBuffers(IN PADAPTER_OBJECT AdapterObject,IN PMDL Mdl,IN PVOID MapRegisterBase,IN PVOID CurrentVa,IN ULONG Length,IN BOOLEAN WriteToDevice)<wdm.h>
IoFlushAdapterBuffers(IN PDMA_ADAPTER DmaAdapter,IN PMDL Mdl,IN PVOID MapRegisterBase,IN PVOID CurrentVa,IN ULONG Length,IN BOOLEAN WriteToDevice)<wdm.h>
IoForwardIrpSynchronously(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp)<wdm.h>
IoFreeAdapterChannel(IN PADAPTER_OBJECT AdapterObject)<wdm.h>
IoFreeAdapterChannel(IN PDMA_ADAPTER DmaAdapter)<wdm.h>
IoFreeController(IN PCONTROLLER_OBJECT ControllerObject)<ntddk.h>
IoFreeErrorLogEntry(PVOID ElEntry)<wdm.h>
IoFreeIrp(IN PIRP Irp)<wdm.h>
IoFreeMapRegisters(IN PADAPTER_OBJECT AdapterObject,IN PVOID MapRegisterBase,IN ULONG NumberOfMapRegisters)<wdm.h>
IoFreeMapRegisters(IN PDMA_ADAPTER DmaAdapter,IN PVOID MapRegisterBase,IN ULONG NumberOfMapRegisters)<wdm.h>
IoFreeMdl(IN PMDL Mdl)<wdm.h>
IoFreeSfioStreamIdentifier(IN PFILE_OBJECT FileObject,IN PVOID Signature)<wdm.h>
IoFreeWorkItem(IN PIO_WORKITEM IoWorkItem)<wdm.h>
IoGetAffinityInterrupt(IN PKINTERRUPT InterruptObject,OUT PGROUP_AFFINITY GroupAffinity)<wdm.h>
IoGetAttachedDevice(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoGetAttachedDeviceReference(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoGetBaseFileSystemDeviceObject(IN PFILE_OBJECT FileObject)<ntifs.h>
IoGetBootDiskInformation(IN OUT PBOOTDISK_INFORMATION BootDiskInformation,IN ULONG Size)<wdm.h>
IoGetBootDiskInformationLite(OUT PBOOTDISK_INFORMATION_LITE * BootDiskInformation)<wdm.h>
IoGetConfigurationInformation(VOID)<ntifs.h>
IoGetContainerInformation(IN IO_CONTAINER_INFORMATION_CLASS InformationClass,IN PVOID ContainerObject OPTIONAL,IN OUT PVOID Buffer OPTIONAL,IN ULONG BufferLength)<wdm.h>
IoGetCurrentIrpStackLocation(IN PIRP Irp)<wdm.h>
IoGetCurrentProcess(VOID)<wdm.h>
IoGetDeviceAttachmentBaseRef(IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
IoGetDeviceInterfaceAlias(IN PUNICODE_STRING SymbolicLinkName,IN CONST GUID * AliasInterfaceClassGuid,OUT PUNICODE_STRING AliasSymbolicLinkName)<wdm.h>
IoGetDeviceInterfaces(IN CONST GUID * InterfaceClassGuid,IN PDEVICE_OBJECT PhysicalDeviceObject OPTIONAL,IN ULONG Flags,OUT PWSTR * SymbolicLinkList)<wdm.h>
IoGetDeviceNumaNode(IN PDEVICE_OBJECT Pdo,OUT PUSHORT NodeNumber)<wdm.h>
IoGetDeviceObjectPointer(IN PUNICODE_STRING ObjectName,IN ACCESS_MASK DesiredAccess,OUT PFILE_OBJECT * FileObject,OUT PDEVICE_OBJECT * DeviceObject)<wdm.h>
IoGetDeviceProperty(IN PDEVICE_OBJECT DeviceObject,IN DEVICE_REGISTRY_PROPERTY DeviceProperty,IN ULONG BufferLength,OUT PVOID PropertyBuffer,OUT PULONG ResultLength)<wdm.h>
IoGetDevicePropertyData(PDEVICE_OBJECT Pdo,CONST DEVPROPKEY * PropertyKey,LCID Lcid,ULONG Flags,ULONG Size,PVOID Data,PULONG RequiredSize,PDEVPROPTYPE Type)<wdm.h>
IoGetDeviceToVerify(IN PETHREAD Thread)<ntddk.h>
IoGetDiskDeviceObject(IN PDEVICE_OBJECT FileSystemDeviceObject,OUT PDEVICE_OBJECT * DiskDeviceObject)<ntifs.h>
IoGetDmaAdapter(IN PDEVICE_OBJECT PhysicalDeviceObject OPTIONAL,IN PDEVICE_DESCRIPTION DeviceDescription,IN OUT PULONG NumberOfMapRegisters)<wdm.h>
IoGetDriverObjectExtension(IN PDRIVER_OBJECT DriverObject,IN PVOID ClientIdentificationAddress)<wdm.h>
IoGetFileObjectGenericMapping(VOID)<ntddk.h>
IoGetFunctionCodeFromCtlCode(_ControlCode)<wdm.h>
IoGetInitialStack(VOID)<wdm.h>
IoGetIoPriorityHint(IN PIRP Irp)<wdm.h>
IoGetIrpExtraCreateParameter(IN PIRP Irp,OUT struct _ECP_LIST ** ExtraCreateParameter OPTIONAL)<ntddk.h>
IoGetLowerDeviceObject(IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
IoGetNextIrpStackLocation(IN PIRP Irp)<wdm.h>
IoGetPagingIoPriority(IN PIRP Irp)<ntddk.h>
IoGetRelatedDeviceObject(IN PFILE_OBJECT FileObject)<wdm.h>
IoGetRemainingStackSize(VOID)<wdm.h>
IoGetRequestorProcess(IN PIRP Irp)<ntifs.h>
IoGetRequestorProcessId(IN PIRP Irp)<ntifs.h>
IoGetRequestorSessionId(IN PIRP Irp,OUT PULONG pSessionId)<ntifs.h>
IoGetSfioStreamIdentifier(IN PFILE_OBJECT FileObject,IN PVOID Signature)<wdm.h>
IoGetStackLimits(OUT PULONG_PTR LowLimit,OUT PULONG_PTR HighLimit)<wdm.h>
IoGetTopLevelIrp(VOID)<wdm.h>
IoGetTransactionParameterBlock(IN PFILE_OBJECT FileObject)<ntddk.h>
IoInitializeDpcRequest(IN PDEVICE_OBJECT DeviceObject,IN PIO_DPC_ROUTINE DpcRoutine)<wdm.h>
IoInitializeDriverCreateContext(PIO_DRIVER_CREATE_CONTEXT DriverContext)<ntddk.h>
IoInitializeIrp(IN OUT PIRP Irp,IN USHORT PacketSize,IN CCHAR StackSize)<wdm.h>
IoInitializePriorityInfo(IN PIO_PRIORITY_INFO PriorityInfo)<ntifs.h>
IoInitializeRemoveLock(\\\nLock,AllocateTag,MaxLockedMinutes,HighWatermark) Lock<wdm.h>
IoInitializeRemoveLockEx(IN PIO_REMOVE_LOCK Lock,IN ULONG AllocateTag,IN ULONG MaxLockedMinutes,IN ULONG HighWatermark,IN ULONG RemlockSize)<wdm.h>
IoInitializeThreadedDpcRequest(IN PDEVICE_OBJECT DeviceObject,IN PIO_DPC_ROUTINE DpcRoutine)<wdm.h>
IoInitializeTimer(IN PDEVICE_OBJECT DeviceObject,IN PIO_TIMER_ROUTINE TimerRoutine,IN PVOID Context OPTIONAL)<wdm.h>
IoInitializeWorkItem(IN PVOID IoObject,IN PIO_WORKITEM IoWorkItem)<wdm.h>
IoInvalidateDeviceRelations(IN PDEVICE_OBJECT DeviceObject,IN DEVICE_RELATION_TYPE Type)<wdm.h>
IoInvalidateDeviceState(IN PDEVICE_OBJECT PhysicalDeviceObject)<wdm.h>
IoIs32bitProcess(IN PIRP Irp OPTIONAL)<wdm.h>
IoIsErrorUserInduced(Status)<wdm.h>
IoIsFileObjectIgnoringSharing(IN PFILE_OBJECT FileObject)<ntddk.h>
IoIsFileOpenedExclusively(FileObject)<ntifs.h>
IoIsFileOriginRemote(IN PFILE_OBJECT FileObject)<ntddk.h>
IoIsOperationSynchronous(IN PIRP Irp)<ntifs.h>
IoIsSystemThread(IN PETHREAD Thread)<ntifs.h>
IoIsValidNameGraftingBuffer(IN PIRP Irp,IN PREPARSE_DATA_BUFFER ReparseBuffer)<ntifs.h>
IoIsWdmVersionAvailable(IN UCHAR MajorVersion,IN UCHAR MinorVersion)<wdm.h>
IoMakeAssociatedIrp(IN PIRP Irp,IN CCHAR StackSize)<ntddk.h>
IoMapTransfer(IN PADAPTER_OBJECT AdapterObject,IN PMDL Mdl,IN PVOID MapRegisterBase,IN PVOID CurrentVa,IN OUT PULONG Length,IN BOOLEAN WriteToDevice)<wdm.h>
IoMapTransfer(IN PDMA_ADAPTER DmaAdapter,IN PMDL Mdl,IN PVOID MapRegisterBase,IN PVOID CurrentVa,IN OUT PULONG Length,IN BOOLEAN WriteToDevice)<wdm.h>
IoMarkIrpPending(IN OUT PIRP Irp)<wdm.h>
IoOpenDeviceInterfaceRegistryKey(IN PUNICODE_STRING SymbolicLinkName,IN ACCESS_MASK DesiredAccess,OUT PHANDLE DeviceInterfaceKey)<wdm.h>
IoOpenDeviceRegistryKey(IN PDEVICE_OBJECT DeviceObject,IN ULONG DevInstKeyType,IN ACCESS_MASK DesiredAccess,OUT PHANDLE DevInstRegKey)<wdm.h>
IoPageRead(IN PFILE_OBJECT FileObject,IN PMDL Mdl,IN PLARGE_INTEGER Offset,IN PKEVENT Event,OUT PIO_STATUS_BLOCK IoStatusBlock)<ntifs.h>
IoQueryDeviceDescription(IN PINTERFACE_TYPE BusType OPTIONAL,IN PULONG BusNumber OPTIONAL,IN PCONFIGURATION_TYPE ControllerType OPTIONAL,IN PULONG ControllerNumber OPTIONAL,IN PCONFIGURATION_TYPE PeripheralType OPTIONAL,IN PULONG PeripheralNumber OPTIONAL,IN PIO_QUERY_DEVICE_ROUTINE CalloutRoutine,IN OUT PVOID Context OPTIONAL)<ntddk.h>
IoQueryFileDosDeviceName(IN PFILE_OBJECT FileObject,OUT POBJECT_NAME_INFORMATION * ObjectNameInformation)<ntifs.h>
IoQueryFileInformation(IN PFILE_OBJECT FileObject,IN FILE_INFORMATION_CLASS FileInformationClass,IN ULONG Length,OUT PVOID FileInformation,OUT PULONG ReturnedLength)<ntifs.h>
IoQueryVolumeInformation(IN PFILE_OBJECT FileObject,IN FS_INFORMATION_CLASS FsInformationClass,IN ULONG Length,OUT PVOID FsInformation,OUT PULONG ReturnedLength)<ntifs.h>
IoQueueThreadIrp(IN PIRP Irp)<ntifs.h>
IoQueueWorkItem(IN PIO_WORKITEM IoWorkItem,IN PIO_WORKITEM_ROUTINE WorkerRoutine,IN WORK_QUEUE_TYPE QueueType,IN PVOID Context OPTIONAL)<wdm.h>
IoQueueWorkItemEx(IN PIO_WORKITEM IoWorkItem,IN PIO_WORKITEM_ROUTINE_EX WorkerRoutine,IN WORK_QUEUE_TYPE QueueType,IN PVOID Context OPTIONAL)<wdm.h>
IoRaiseHardError(IN PIRP Irp,IN PVPB Vpb OPTIONAL,IN PDEVICE_OBJECT RealDeviceObject)<ntddk.h>
IoRaiseInformationalHardError(IN NTSTATUS ErrorStatus,IN PUNICODE_STRING String OPTIONAL,IN PKTHREAD Thread OPTIONAL)<ntddk.h>
IoReadDiskSignature(IN PDEVICE_OBJECT DeviceObject,IN ULONG BytesPerSector,OUT PDISK_SIGNATURE Signature)<ntddk.h>
IoReadPartitionTable(IN PDEVICE_OBJECT DeviceObject,IN ULONG SectorSize,IN BOOLEAN ReturnRecognizedPartitions,OUT struct _DRIVE_LAYOUT_INFORMATION ** PartitionBuffer)<ntddk.h>
IoReadPartitionTableEx(IN PDEVICE_OBJECT DeviceObject,OUT struct _DRIVE_LAYOUT_INFORMATION_EX ** PartitionBuffer)<ntddk.h>
IoRegisterBootDriverReinitialization(IN PDRIVER_OBJECT DriverObject,IN PDRIVER_REINITIALIZE DriverReinitializationRoutine,IN PVOID Context OPTIONAL)<ntddk.h>
IoRegisterContainerNotification(IN IO_CONTAINER_NOTIFICATION_CLASS NotificationClass,IN PIO_CONTAINER_NOTIFICATION_FUNCTION CallbackFunction,IN PVOID NotificationInformation OPTIONAL,IN ULONG NotificationInformationLength,OUT PVOID CallbackRegistration)<wdm.h>
IoRegisterDeviceInterface(IN PDEVICE_OBJECT PhysicalDeviceObject,IN CONST GUID * InterfaceClassGuid,IN PUNICODE_STRING ReferenceString OPTIONAL,OUT PUNICODE_STRING SymbolicLinkName)<wdm.h>
IoRegisterDriverReinitialization(IN PDRIVER_OBJECT DriverObject,IN PDRIVER_REINITIALIZE DriverReinitializationRoutine,IN PVOID Context OPTIONAL)<ntddk.h>
IoRegisterFileSystem(IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
IoRegisterFsRegistrationChange(IN PDRIVER_OBJECT DriverObject,IN PDRIVER_FS_NOTIFICATION DriverNotificationRoutine)<ntifs.h>
IoRegisterFsRegistrationChangeEx(IN PDRIVER_OBJECT DriverObject,IN PDRIVER_FS_NOTIFICATION DriverNotificationRoutine)<ntifs.h>
IoRegisterFsRegistrationChangeMountAware(IN PDRIVER_OBJECT DriverObject,IN PDRIVER_FS_NOTIFICATION DriverNotificationRoutine,IN BOOLEAN SynchronizeWithMounts)<ntifs.h>
IoRegisterLastChanceShutdownNotification(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoRegisterPlugPlayNotification(IN IO_NOTIFICATION_EVENT_CATEGORY EventCategory,IN ULONG EventCategoryFlags,IN PVOID EventCategoryData OPTIONAL,IN PDRIVER_OBJECT DriverObject,IN PDRIVER_NOTIFICATION_CALLBACK_ROUTINE CallbackRoutine,IN OUT PVOID Context OPTIONAL,OUT PVOID * NotificationEntry)<wdm.h>
IoRegisterShutdownNotification(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoReleaseCancelSpinLock(IN KIRQL Irql)<wdm.h>
IoReleaseRemoveLock(_RemoveLock,\\\n_Tag)                       _Tag<wdm.h>
IoReleaseRemoveLockAndWait(_RemoveLock,\\\n_Tag)                              _Tag<wdm.h>
IoReleaseRemoveLockAndWaitEx(IN PIO_REMOVE_LOCK RemoveLock,IN PVOID Tag OPTIONAL,IN ULONG RemlockSize)<wdm.h>
IoReleaseRemoveLockEx(IN PIO_REMOVE_LOCK RemoveLock,IN PVOID Tag OPTIONAL,IN ULONG RemlockSize)<wdm.h>
IoReleaseVpbSpinLock(IN KIRQL Irql)<ntifs.h>
IoRemoveShareAccess(IN PFILE_OBJECT FileObject,IN OUT PSHARE_ACCESS ShareAccess)<wdm.h>
IoReplaceFileObjectName(IN PFILE_OBJECT FileObject,IN PWSTR NewFileName,IN USHORT FileNameLength)<ntifs.h>
IoReplacePartitionUnit(IN PDEVICE_OBJECT TargetPdo,IN PDEVICE_OBJECT SparePdo,IN ULONG Flags)<wdm.h>
IoReportDetectedDevice(IN PDRIVER_OBJECT DriverObject,IN INTERFACE_TYPE LegacyBusType,IN ULONG BusNumber,IN ULONG SlotNumber,IN PCM_RESOURCE_LIST ResourceList OPTIONAL,IN PIO_RESOURCE_REQUIREMENTS_LIST ResourceRequirements OPTIONAL,IN BOOLEAN ResourceAssigned,IN OUT PDEVICE_OBJECT * DeviceObject OPTIONAL)<ntddk.h>
IoReportResourceForDetection(IN PDRIVER_OBJECT DriverObject,IN PCM_RESOURCE_LIST DriverList OPTIONAL,IN ULONG DriverListSize OPTIONAL,IN PDEVICE_OBJECT DeviceObject OPTIONAL,IN PCM_RESOURCE_LIST DeviceList OPTIONAL,IN ULONG DeviceListSize OPTIONAL,OUT PBOOLEAN ConflictDetected)<ntddk.h>
IoReportResourceUsage(IN PUNICODE_STRING DriverClassName OPTIONAL,IN PDRIVER_OBJECT DriverObject,IN PCM_RESOURCE_LIST DriverList OPTIONAL,IN ULONG DriverListSize OPTIONAL,IN PDEVICE_OBJECT DeviceObject,IN PCM_RESOURCE_LIST DeviceList OPTIONAL,IN ULONG DeviceListSize OPTIONAL,IN BOOLEAN OverrideConflict,OUT PBOOLEAN ConflictDetected)<ntddk.h>
IoReportTargetDeviceChange(IN PDEVICE_OBJECT PhysicalDeviceObject,IN PVOID NotificationStructure)<wdm.h>
IoReportTargetDeviceChangeAsynchronous(IN PDEVICE_OBJECT PhysicalDeviceObject,IN PVOID NotificationStructure,IN PDEVICE_CHANGE_COMPLETE_CALLBACK Callback OPTIONAL,IN PVOID Context OPTIONAL)<wdm.h>
IoRequestDeviceEject(IN PDEVICE_OBJECT PhysicalDeviceObject)<wdm.h>
IoRequestDeviceEjectEx(IN PDEVICE_OBJECT PhysicalDeviceObject,IN PIO_DEVICE_EJECT_CALLBACK Callback OPTIONAL,IN PVOID Context OPTIONAL,IN PDRIVER_OBJECT DriverObject OPTIONAL)<wdm.h>
IoRequestDpc(DeviceObject, Irp, Context)<wdm.h>
IoReuseIrp(IN OUT PIRP Irp,IN NTSTATUS Status)<wdm.h>
IoSetCancelRoutine(_Irp,\\\n_CancelRoutine)                      _CancelRoutine<wdm.h>
IoSetCompletionRoutine(IN PIRP Irp,IN PIO_COMPLETION_ROUTINE CompletionRoutine OPTIONAL,IN PVOID Context OPTIONAL,IN BOOLEAN InvokeOnSuccess,IN BOOLEAN InvokeOnError,IN BOOLEAN InvokeOnCancel)<wdm.h>
IoSetCompletionRoutineEx(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp,IN PIO_COMPLETION_ROUTINE CompletionRoutine,IN PVOID Context,IN BOOLEAN InvokeOnSuccess,IN BOOLEAN InvokeOnError,IN BOOLEAN InvokeOnCancel)<wdm.h>
IoSetDeviceInterfaceState(IN PUNICODE_STRING SymbolicLinkName,IN BOOLEAN Enable)<wdm.h>
IoSetDevicePropertyData(IN PDEVICE_OBJECT Pdo,IN CONST DEVPROPKEY * PropertyKey,IN LCID Lcid,IN ULONG Flags,IN DEVPROPTYPE Type,IN ULONG Size,IN PVOID Data OPTIONAL)<wdm.h>
IoSetDeviceToVerify(IN PETHREAD Thread,IN PDEVICE_OBJECT DeviceObject OPTIONAL)<ntifs.h>
IoSetFileObjectIgnoreSharing(IN PFILE_OBJECT FileObject)<ntddk.h>
IoSetFileOrigin(IN PFILE_OBJECT FileObject,IN BOOLEAN Remote)<ntddk.h>
IoSetHardErrorOrVerifyDevice(IN PIRP Irp,IN PDEVICE_OBJECT DeviceObject)<ntddk.h>
IoSetInformation(IN PFILE_OBJECT FileObject,IN FILE_INFORMATION_CLASS FileInformationClass,IN ULONG Length,IN PVOID FileInformation)<ntifs.h>
IoSetIoPriorityHint(IN PIRP Irp,IN IO_PRIORITY_HINT PriorityHint)<wdm.h>
IoSetIrpExtraCreateParameter(IN OUT PIRP Irp,IN struct _ECP_LIST * ExtraCreateParameter)<ntddk.h>
IoSetNextIrpStackLocation(IN OUT PIRP Irp)<wdm.h>
IoSetPartitionInformation(IN PDEVICE_OBJECT DeviceObject,IN ULONG SectorSize,IN ULONG PartitionNumber,IN ULONG PartitionType)<ntddk.h>
IoSetPartitionInformationEx(IN PDEVICE_OBJECT DeviceObject,IN ULONG PartitionNumber,IN struct _SET_PARTITION_INFORMATION_EX * PartitionInfo)<ntddk.h>
IoSetShareAccess(IN ACCESS_MASK DesiredAccess,IN ULONG DesiredShareAccess,IN OUT PFILE_OBJECT FileObject,OUT PSHARE_ACCESS ShareAccess)<wdm.h>
IoSetShareAccessEx(IN ACCESS_MASK DesiredAccess,IN ULONG DesiredShareAccess,IN OUT PFILE_OBJECT FileObject,OUT PSHARE_ACCESS ShareAccess,IN PBOOLEAN WritePermission)<wdm.h>
IoSetStartIoAttributes(IN PDEVICE_OBJECT DeviceObject,IN BOOLEAN DeferredStartIo,IN BOOLEAN NonCancelable)<wdm.h>
IoSetSystemPartition(IN PUNICODE_STRING VolumeNameString)<ntddk.h>
IoSetThreadHardErrorMode(IN BOOLEAN EnableHardErrors)<ntddk.h>
IoSetTopLevelIrp(IN PIRP Irp OPTIONAL)<wdm.h>
IoSizeOfIrp(_StackSize)<wdm.h>
IoSizeofWorkItem(VOID)<wdm.h>
IoSkipCurrentIrpStackLocation(IN OUT PIRP Irp)<wdm.h>
IoStartNextPacket(IN PDEVICE_OBJECT DeviceObject,IN BOOLEAN Cancelable)<wdm.h>
IoStartNextPacketByKey(IN PDEVICE_OBJECT DeviceObject,IN BOOLEAN Cancelable,IN ULONG Key)<wdm.h>
IoStartPacket(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp,IN PULONG Key OPTIONAL,IN PDRIVER_CANCEL CancelFunction OPTIONAL)<wdm.h>
IoStartTimer(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoStopTimer(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoSynchronousPageWrite(IN PFILE_OBJECT FileObject,IN PMDL Mdl,IN PLARGE_INTEGER FileOffset,IN PKEVENT Event,OUT PIO_STATUS_BLOCK IoStatusBlock)<ntifs.h>
IoThreadToProcess(IN PETHREAD Thread)<ntifs.h>
IoTranslateBusAddress(IN INTERFACE_TYPE InterfaceType,IN ULONG BusNumber,IN PHYSICAL_ADDRESS BusAddress,IN OUT PULONG AddressSpace,OUT PPHYSICAL_ADDRESS TranslatedAddress)<ntddk.h>
IoUninitializeWorkItem(IN PIO_WORKITEM IoWorkItem)<wdm.h>
IoUnregisterContainerNotification(IN PVOID CallbackRegistration)<wdm.h>
IoUnregisterFileSystem(IN PDEVICE_OBJECT DeviceObject)<ntifs.h>
IoUnregisterFsRegistrationChange(IN PDRIVER_OBJECT DriverObject,IN PDRIVER_FS_NOTIFICATION DriverNotificationRoutine)<ntifs.h>
IoUnregisterPlugPlayNotification(IN PVOID NotificationEntry)<wdm.h>
IoUnregisterPlugPlayNotificationEx(IN PVOID NotificationEntry)<wdm.h>
IoUnregisterShutdownNotification(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoUpdateDiskGeometry(IN PDEVICE_OBJECT DeviceObject,IN struct _DISK_GEOMETRY_EX * OldDiskGeometry,IN struct _DISK_GEOMETRY_EX * NewDiskGeometry)<ntddk.h>
IoUpdateShareAccess(IN PFILE_OBJECT FileObject,IN OUT PSHARE_ACCESS ShareAccess)<wdm.h>
IoValidateDeviceIoControlAccess(IN PIRP Irp,IN ULONG RequiredAccess)<wdm.h>
IoVerifyPartitionTable(IN PDEVICE_OBJECT DeviceObject,IN BOOLEAN FixErrors)<ntddk.h>
IoVerifyVolume(IN PDEVICE_OBJECT DeviceObject,IN BOOLEAN AllowRawMount)<ntifs.h>
IoVolumeDeviceToDosName(IN PVOID VolumeDeviceObject,OUT PUNICODE_STRING DosName)<ntddk.h>
IoWithinStackLimits(IN ULONG_PTR RegionStart,IN SIZE_T RegionSize)<wdm.h>
IoWMIAllocateInstanceIds(IN GUID * Guid,IN ULONG InstanceCount,OUT ULONG * FirstInstanceId)<wdm.h>
IoWMIDeviceObjectToInstanceName(IN PVOID DataBlockObject,IN PDEVICE_OBJECT DeviceObject,OUT PUNICODE_STRING InstanceName)<wdm.h>
IoWMIDeviceObjectToProviderId(DeviceObject)<wdm.h>
IoWMIDeviceObjectToProviderId(IN PDEVICE_OBJECT DeviceObject)<wdm.h>
IoWMIExecuteMethod(IN PVOID DataBlockObject,IN PUNICODE_STRING InstanceName,IN ULONG MethodId,IN ULONG InBufferSize,IN OUT PULONG OutBufferSize,IN OUT PUCHAR InOutBuffer)<wdm.h>
IoWMIHandleToInstanceName(IN PVOID DataBlockObject,IN HANDLE FileHandle,OUT PUNICODE_STRING InstanceName)<wdm.h>
IoWMIOpenBlock(IN GUID * DataBlockGuid,IN ULONG DesiredAccess,OUT PVOID * DataBlockObject)<wdm.h>
IoWMIQueryAllData(IN PVOID DataBlockObject,IN OUT ULONG * InOutBufferSize,OUT PVOID OutBuffer)<wdm.h>
IoWMIQueryAllDataMultiple(IN PVOID * DataBlockObjectList,IN ULONG ObjectCount,IN OUT ULONG * InOutBufferSize,OUT PVOID OutBuffer)<wdm.h>
IoWMIQuerySingleInstance(IN PVOID DataBlockObject,IN PUNICODE_STRING InstanceName,IN OUT ULONG * InOutBufferSize,OUT PVOID OutBuffer)<wdm.h>
IoWMIQuerySingleInstanceMultiple(IN PVOID * DataBlockObjectList,IN PUNICODE_STRING InstanceNames,IN ULONG ObjectCount,IN OUT ULONG * InOutBufferSize,OUT PVOID OutBuffer)<wdm.h>
IoWMIRegistrationControl(IN PDEVICE_OBJECT DeviceObject,IN ULONG Action)<wdm.h>
IoWMISetNotificationCallback(IN OUT PVOID Object,IN WMI_NOTIFICATION_CALLBACK Callback,IN PVOID Context OPTIONAL)<wdm.h>
IoWMISetSingleInstance(IN PVOID DataBlockObject,IN PUNICODE_STRING InstanceName,IN ULONG Version,IN ULONG ValueBufferSize,IN PVOID ValueBuffer)<wdm.h>
IoWMISetSingleItem(IN PVOID DataBlockObject,IN PUNICODE_STRING InstanceName,IN ULONG DataItemId,IN ULONG Version,IN ULONG ValueBufferSize,IN PVOID ValueBuffer)<wdm.h>
IoWMISuggestInstanceName(IN PDEVICE_OBJECT PhysicalDeviceObject OPTIONAL,IN PUNICODE_STRING SymbolicLinkName OPTIONAL,IN BOOLEAN CombineNames,OUT PUNICODE_STRING SuggestedInstanceName)<wdm.h>
IoWMIWriteEvent(IN OUT PVOID WnodeEventItem)<wdm.h>
IoWriteErrorLogEntry(IN PVOID ElEntry)<wdm.h>
IoWritePartitionTable(IN PDEVICE_OBJECT DeviceObject,IN ULONG SectorSize,IN ULONG SectorsPerTrack,IN ULONG NumberOfHeads,IN struct _DRIVE_LAYOUT_INFORMATION * PartitionBuffer)<ntddk.h>
IoWritePartitionTableEx(IN PDEVICE_OBJECT DeviceObject,IN struct _DRIVE_LAYOUT_INFORMATION_EX * DriveLayout)<ntddk.h>
IP_FragOff(ULPIP pIP) INLINE WORD <netmon.h>
IP_HdrLen(ULPIP pIP) INLINE DWORD <netmon.h>
IP_MoreFragments(ULPIP pIP) INLINE DWORD <netmon.h>
IP_MSFILTER_SIZE(numsrc)<ws2tcpip.h>
IP_TotalLen(ULPIP pIP) INLINE DWORD <netmon.h>
IP_Version(ULPIP pIP) INLINE BYTE <netmon.h>
IpReleaseAddress(PIP_ADAPTER_INDEX_MAP AdapterInfo) DWORD WINAPI <iphlpapi.h>
IpRenewAddress(PIP_ADAPTER_INDEX_MAP AdapterInfo) DWORD WINAPI <iphlpapi.h>
IPsecDospGetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
IPsecDospGetStatistics0(HANDLE engineHandle,IPSEC_DOSP_STATISTICS0 * idpStatistics)DWORD WINAPI <fwpmu.h>
IPsecDospSetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
IPsecDospStateCreateEnumHandle0(HANDLE engineHandle,const IPSEC_DOSP_STATE_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
IPsecDospStateDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
IPsecDospStateEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IPSEC_DOSP_STATE0 *** entries,UINT32 * numEntries)DWORD WINAPI <fwpmu.h>
IPsecGetStatistics0(HANDLE engineHandle,IPSEC_STATISTICS0 * ipsecStatistics)DWORD WINAPI <fwpmu.h>
IPsecGetStatistics1(HANDLE engineHandle,IPSEC_STATISTICS1 * ipsecStatistics)DWORD WINAPI <fwpmu.h>
IPsecSaContextAddInbound0(HANDLE engineHandle,UINT64 id,const IPSEC_SA_BUNDLE0 * inboundBundle)DWORD WINAPI <fwpmu.h>
IPsecSaContextAddInbound1(HANDLE engineHandle,UINT64 id,const IPSEC_SA_BUNDLE1 * inboundBundle)DWORD WINAPI <fwpmu.h>
IPsecSaContextAddOutbound0(HANDLE engineHandle,UINT64 id,const IPSEC_SA_BUNDLE0 * outboundBundle)DWORD WINAPI <fwpmu.h>
IPsecSaContextAddOutbound1(HANDLE engineHandle,UINT64 id,const IPSEC_SA_BUNDLE1 * outboundBundle)DWORD WINAPI <fwpmu.h>
IPsecSaContextCreate0(HANDLE engineHandle,const IPSEC_TRAFFIC0 * outboundTraffic,UINT64 * inboundFilterId,UINT64 * id)DWORD WINAPI <fwpmu.h>
IPsecSaContextCreate1(HANDLE engineHandle,const IPSEC_TRAFFIC1 * outboundTraffic,const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 * virtualIfTunnelInfo,UINT64 * inboundFilterId,UINT64 * id)DWORD WINAPI <fwpmu.h>
IPsecSaContextCreateEnumHandle0(HANDLE engineHandle,const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
IPsecSaContextDeleteById0(HANDLE engineHandle,UINT64 id)DWORD WINAPI <fwpmu.h>
IPsecSaContextDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
IPsecSaContextEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IPSEC_SA_CONTEXT0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
IPsecSaContextEnum1(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IPSEC_SA_CONTEXT1 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
IPsecSaContextExpire0(HANDLE engineHandle,UINT64 id)DWORD WINAPI <fwpmu.h>
IPsecSaContextGetById0(HANDLE engineHandle,UINT64 id,IPSEC_SA_CONTEXT0 ** saContext)DWORD WINAPI <fwpmu.h>
IPsecSaContextGetById1(HANDLE engineHandle,UINT64 id,IPSEC_SA_CONTEXT1 ** saContext)DWORD WINAPI <fwpmu.h>
IPsecSaContextGetSpi0(HANDLE engineHandle,UINT64 id,const IPSEC_GETSPI0 * getSpi,IPSEC_SA_SPI * inboundSpi)DWORD WINAPI <fwpmu.h>
IPsecSaContextGetSpi1(HANDLE engineHandle,UINT64 id,const IPSEC_GETSPI1 * getSpi,IPSEC_SA_SPI * inboundSpi)DWORD WINAPI <fwpmu.h>
IPsecSaContextSetSpi0(HANDLE engineHandle,UINT64 id,const IPSEC_GETSPI1 * getSpi,IPSEC_SA_SPI inboundSpi)DWORD WINAPI <fwpmu.h>
IPsecSaContextUpdate0(HANDLE engineHandle,UINT32 flags,const IPSEC_SA_CONTEXT1 * newValues)DWORD WINAPI <fwpmu.h>
IPsecSaCreateEnumHandle0(HANDLE engineHandle,const IPSEC_SA_ENUM_TEMPLATE0 * enumTemplate,HANDLE * enumHandle)DWORD WINAPI <fwpmu.h>
IPsecSaDbGetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,PSID * sidOwner,PSID * sidGroup,PACL * dacl,PACL * sacl,PSECURITY_DESCRIPTOR * securityDescriptor)DWORD WINAPI <fwpmu.h>
IPsecSaDbSetSecurityInfo0(HANDLE engineHandle,SECURITY_INFORMATION securityInfo,const SID * sidOwner,const SID * sidGroup,const ACL * dacl,const ACL * sacl)DWORD WINAPI <fwpmu.h>
IPsecSaDestroyEnumHandle0(HANDLE engineHandle,HANDLE enumHandle)DWORD WINAPI <fwpmu.h>
IPsecSaEnum0(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IPSEC_SA_DETAILS0 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
IPsecSaEnum1(HANDLE engineHandle,HANDLE enumHandle,UINT32 numEntriesRequested,IPSEC_SA_DETAILS1 *** entries,UINT32 * numEntriesReturned)DWORD WINAPI <fwpmu.h>
IpxRecvPacket(HANDLE Handle,PUCHAR IpxPacket,ULONG IpxPacketLength,PADDRESS_RESERVED lpReserved,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine)DWORD WINAPI <adptif.h>
IpxSendPacket(HANDLE Handle,ULONG AdapterIdx,PUCHAR IpxPacket,ULONG IpxPacketLength,PADDRESS_RESERVED lpReserved,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine)DWORD WINAPI <adptif.h>
IQualProp_AddRef(IQualProp * This)static FORCEINLINE ULONG <amvideo.h>
IQualProp_get_AvgFrameRate(IQualProp * This,int * piAvgFrameRate)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_get_AvgSyncOffset(IQualProp * This,int * piAvg)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_get_DevSyncOffset(IQualProp * This,int * piDev)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_get_FramesDrawn(IQualProp * This,int * pcFramesDrawn)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_get_FramesDroppedInRenderer(IQualProp * This,int * pcFrames)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_get_Jitter(IQualProp * This,int * iJitter)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_QueryInterface(IQualProp * This,REFIID riid,void ** ppvObject)static FORCEINLINE HRESULT <amvideo.h>
IQualProp_Release(IQualProp * This)static FORCEINLINE ULONG <amvideo.h>
Is(PVIEW View,VARIANT_BOOL * TheSame)virtual HRESULT WINAPI <mmcobj.h>
Is16vec8() <dvec.h>
Is16vec8(__m128i mm) <dvec.h>
Is16vec8(const I16vec8 & a) <dvec.h>
Is16vec8(const M128 & a) <dvec.h>
Is16vec8(int count) <dvec.h>
Is16vec8(int i) signed short<dvec.h>
Is16vec8(signed short s7,signed short s6,signed short s5,signed short s4,signed short s3,signed short s2,signed short s1,signed short s0) <dvec.h>
Is16vec8(std::ostream & os,const Is16vec8 & a) friend std::ostream<dvec.h>
Is32vec4() <dvec.h>
Is32vec4(__m128i mm) <dvec.h>
Is32vec4(const I32vec4 & a) <dvec.h>
Is32vec4(const M128 & a) <dvec.h>
Is32vec4(int count) <dvec.h>
Is32vec4(int i) int<dvec.h>
Is32vec4(int i3,int i2,int i1,int i0) <dvec.h>
Is32vec4(std::ostream & os,const Is32vec4 & a) friend std::ostream<dvec.h>
Is8vec16() <dvec.h>
Is8vec16(__m128i mm) <dvec.h>
Is8vec16(const I8vec16 & a) <dvec.h>
Is8vec16(const M128 & a) <dvec.h>
Is8vec16(int i) signed char<dvec.h>
Is8vec16(std::ostream & os,const Is8vec16 & a) friend std::ostream<dvec.h>
IS_ALIGNED(p)<uastrfnc.h>
IS_ALIGNED(ptr)<uastrfnc.h>
IS_CLEANUP_REQUEST(majorFunction)<classpnp.h>
IS_COMPATIBLE_MMREG_MID(guid)<mmreg.h>
IS_COMPATIBLE_MMREG_PID(guid)<mmreg.h>
IS_COMPATIBLE_USBAUDIO_MID(guid)<ksmedia.h>
IS_COMPATIBLE_USBAUDIO_PID(guid)<ksmedia.h>
IS_DISPATCHING(f)<winnt.h>
IS_DMPUB_HIDDEN()()()
IS_DMPUB_HIDDEN(dw, DMPub)<compstui.h>
IS_DWORD_ALIGNED(p)<windns.h>
IS_ERROR(Status)<winerror.h>
IS_GOPHER_ASK(type)<wininet.h>
IS_GOPHER_BACKUP_SERVER(type)<wininet.h>
IS_GOPHER_DIRECTORY(type)<wininet.h>
IS_GOPHER_ERROR(type)<wininet.h>
IS_GOPHER_FILE(type)<wininet.h>
IS_GOPHER_INDEX_SERVER(type)<wininet.h>
IS_GOPHER_PHONE_SERVER(type)<wininet.h>
IS_GOPHER_PLUS(type)<wininet.h>
IS_GOPHER_TELNET_SESSION(type)<wininet.h>
IS_GOPHER_TN3270_SESSION(type)<wininet.h>
IS_GOPHER_TYPE_KNOWN(type)<wininet.h>
IS_HIGH_SURROGATE(wch)<winnls.h>
IS_INTERRUPT_ERROR(hRes)<agterr.h>
IS_INTRESOURCE(_r)<winuser.h>
IS_LOW_SURROGATE(wch)<winnls.h>
IS_OPC_CONFORMANCE_ERROR(x)<msopc.h>
is_operator() int <sql_1.h>
IS_POINTER_CANCELED_WPARAM(wParam)<winuser.h>
IS_POINTER_FIFTHBUTTON_WPARAM(wParam)<winuser.h>
IS_POINTER_FIRSTBUTTON_WPARAM(wParam)<winuser.h>
IS_POINTER_FLAG_SET_WPARAM()()()
IS_POINTER_FLAG_SET_WPARAM(wParam, flag)<winuser.h>
IS_POINTER_FOURTHBUTTON_WPARAM(wParam)<winuser.h>
IS_POINTER_INCONTACT_WPARAM(wParam)<winuser.h>
IS_POINTER_INRANGE_WPARAM(wParam)<winuser.h>
IS_POINTER_NEW_WPARAM(wParam)<winuser.h>
IS_POINTER_PRIMARY_WPARAM(wParam)<winuser.h>
IS_POINTER_SECONDBUTTON_WPARAM(wParam)<winuser.h>
IS_POINTER_THIRDBUTTON_WPARAM(wParam)<winuser.h>
IS_QWORD_ALIGNED(p)<windns.h>
IS_RATINGS_ENABLED()static inline WINBOOL <ratings.h>
IS_SCSIOP_READ(opCode)<classpnp.h>
IS_SCSIOP_READWRITE(opCode) <classpnp.h>
IS_SCSIOP_WRITE(opCode)<classpnp.h>
IS_SPECIAL_COOKIE(c)<mmc.h>
IS_SPECIAL_DATAOBJECT(d)<mmc.h>
IS_SPECIAL_OID_INFO_ALGID(Algid)<wincrypt.h>
IS_SURROGATE_PAIR()()()
IS_SURROGATE_PAIR(hs, ls)<winnls.h>
IS_SVCID_DNS(_g)<svcguid.h>
IS_SVCID_NETWARE(_g)<svcguid.h>
IS_SVCID_TCP(_g)<svcguid.h>
IS_SVCID_UDP(_g)<svcguid.h>
IS_TARGET_UNWIND(f)<winnt.h>
IS_UNWINDING(f)<winnt.h>
IS_VALID_WAVEFORMATEX_GUID(Guid)<mmreg.h>
IS_WORD_ALIGNED(p)<windns.h>
IS_ZIP_CONFORMANCE_ERROR(x)<msopc.h>
IsAccelerator(HACCEL hAccel,int cAccelEntries,LPMSG lpMsg,WORD * lpwCmd)WINOLEAPI_<ole2.h>
IsAccessAllowed(PTRUSTEEW pTrustee,LPWSTR lpProperty,ACCESS_RIGHTS AccessRights,WINBOOL * pfAccessAllowed)virtual HRESULT WINAPI <iaccess.h>
IsAccessAudited(PTRUSTEEW pTrustee,ACCESS_RIGHTS AuditRights,WINBOOL * pfAccessAudited)virtual HRESULT WINAPI <iaccess.h>
IsACLConsistent(VARIANT_BOOL * pvbConsistent)virtual HRESULT WINAPI <gpmgmt.h>
IsAdminOverrideActive(PADMINISTRATOR_POWER_POLICY) BOOLEAN WINAPI <powrprof.h>
IsAfContentType_Default(x)<corhdr.h>
IsAfContentType_WindowsRuntime(x)<corhdr.h>
IsAfDisableJITcompileOptimizer(x)<corhdr.h>
IsAfEnableJITcompileTracking(x)<corhdr.h>
IsAfPA_AMD64(x)<corhdr.h>
IsAfPA_IA64(x)<corhdr.h>
IsAfPA_NoPlatform(x)<corhdr.h>
IsAfPA_Specified(x)<corhdr.h>
IsAfPA_x86(x)<corhdr.h>
IsAfPublicKey(x)<corhdr.h>
IsAfPublicKeyToken(x)<corhdr.h>
IsAfRetargetable(x)<corhdr.h>
IsAlcBitAnsi(lprc,i)<penwin.h>
IsAlphaPixelFormat(PixelFormat pixfmt)static __inline__ BOOL <gdipluspixelformats.h>
IsAppThemed()THEMEAPI_<uxtheme.h>
ISARY(x)<winnt.h>
IsAssemblyDclAction(x)<corhdr.h>
IsAsyncMoniker(IMoniker * pmk)STDAPI <urlmon.h>
IsAtBOL(WINBOOL * pfBOL)virtual HRESULT WINAPI <mshtmlc.h>
IsAtWordBreak(WINBOOL * pfAtBreak)virtual HRESULT WINAPI <mshtmlc.h>
IsAudioStreamEnabled(ULONG ulStreamNum,WINBOOL * pbEnabled)virtual HRESULT WINAPI <strmif.h>
IsAvailable()	BOOL <strmif.h>
IsAvailable(const GUID * Api)virtual HRESULT WINAPI <strmif.h>
IsBadBoundedStringPtr(const void * lpsz,UINT cchMax) WINBOOL WINAPI <mapiwin.h>
IsBadCodePtr(FARPROC lpfn) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadHugeReadPtr(CONST VOID * lp,UINT_PTR ucb) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadHugeWritePtr(LPVOID lp,UINT_PTR ucb) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadReadPtr(CONST VOID * lp,UINT_PTR ucb) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadStringPtr(LPCSTR lpsz,UINT_PTR ucchMax) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadStringPtrA(LPCSTR lpsz,UINT_PTR ucchMax) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadStringPtrW(LPCWSTR lpsz,UINT_PTR ucchMax) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBadWritePtr(LPVOID lp,UINT_PTR ucb) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsBootableSystemStateBackedUp()bool WINAPI <vswriter.h>
IsCallerInRole(BSTR bstrRole,VARIANT_BOOL * pbInRole)virtual HRESULT WINAPI <comsvcs.h>
IsCallerInRole(BSTR bstrRole,VARIANT_BOOL * pfInRole)virtual HRESULT WINAPI <comsvcs.h>
IsCallerInRole(BSTR bstrRole,WINBOOL * pfIsInRole)virtual HRESULT WINAPI <comsvcs.h>
IsCanonicalPixelFormat(PixelFormat pixfmt)static __inline__ BOOL <gdipluspixelformats.h>
IsCharAlpha(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharAlphaA(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharAlphaNumeric(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharAlphaNumericA(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharAlphaNumericW(WCHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharAlphaW(WCHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharLower(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharLowerA(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharLowerW(WCHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharSpace(CHAR wch) LWSTDAPI_<shlwapi.h>
IsCharSpaceA(CHAR wch) LWSTDAPI_<shlwapi.h>
IsCharSpaceW(WCHAR wch) LWSTDAPI_<shlwapi.h>
IsCharUpper(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharUpperA(CHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsCharUpperW(WCHAR ch) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsChild(HWND hWndParent,HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsClientConnected(VARIANT_BOOL * pfIsClientConnected)virtual HRESULT WINAPI <asptlb.h>
IsClipboardFormatAvailable(UINT format) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsClipEmpty()	BOOL <gdiplusgraphics.h>
IsCodePageInstallable(UINT uiCodePage)virtual HRESULT WINAPI <mlang.h>
IsColorProfileTagPresent(HPROFILE,TAGTYPE,PBOOL) WINBOOL WINAPI <icm.h>
IsColorProfileValid(HPROFILE,PBOOL) WINBOOL WINAPI <icm.h>
IsCompositionActive(void)THEMEAPI_<uxtheme.h>
IsComputerEnabled(VARIANT_BOOL * pvbEnabled)virtual HRESULT WINAPI <gpmgmt.h>
IsContainerPartition(PartitionType)<winioctl.h>
IsControlWindowShown(UINT id,WINBOOL * pfShown)virtual HRESULT WINAPI <shdeprecated.h>
IsConvertible(DWORD dwSrcEncoding,DWORD dwDstEncoding)virtual HRESULT WINAPI <mlang.h>
IsConvertINetStringAvailable(DWORD dwSrcEncoding,DWORD dwDstEncoding) STDAPI <mlang.h>
IsCursorHidden(__LONG32 * CursorHidden)virtual HRESULT WINAPI <control.h>
IsDayChecked(sDayMask,nDay)<msfs.h>
IsDaytona(VOID) extern WINBOOL WINAPI <nmsupp.h>
IsDBCSLeadByte(BYTE TestChar) WINBASEAPI WINBOOL WINAPI <winnls.h>
IsDBCSLeadByteEx(UINT CodePage,BYTE TestChar) WINBASEAPI WINBOOL WINAPI <winnls.h>
ISDBLCLICK(x)<shobjidl.h>
IsDclActionAnyStackModifier(x)<corhdr.h>
IsDclActionNil(x)<corhdr.h>
IsDebuggerPresent(VOID) WINBASEAPI WINBOOL WINAPI <newapis.h>
IsDeletedName(strName)<corhdr.h>
IsDestinationReachable(LPCSTR lpszDestination,LPQOCINFO lpQOCInfo) WINBOOL WINAPI <sensapi.h>
IsDestinationReachableA(LPCSTR lpszDestination,LPQOCINFO lpQOCInfo) WINBOOL WINAPI <sensapi.h>
IsDestinationReachableW(LPCWSTR lpszDestination,LPQOCINFO lpQOCInfo) WINBOOL WINAPI <sensapi.h>
IsDialogMessage(HWND hDlg,LPMSG lpMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsDialogMessageA(HWND hDlg,LPMSG lpMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsDialogMessageW(HWND hDlg,LPMSG lpMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsDirectoryAvailable(VARIANT_BOOL * boolDirectoryAvailable)virtual HRESULT WINAPI <sdoias.h>
IsDirty(LPTSTR lpTemplateName)virtual HRESULT WINAPI <scesvc.h>
IsDisplay()	BOOL <gdiplusmetaheader.h>
IsDlgButtonChecked(HWND hDlg,int nIDButton) WINUSERAPI UINT WINAPI <winuser.h>
IsDone(void)virtual HRESULT WINAPI <mshtmlc.h>
IsDsmActionNonDestructive(_Action)<winioctl.h>
IsDsmActionNonDestructive(x)<winioctl.h>
IsEmf()	BOOL <gdiplusmetaheader.h>
IsEmfOrEmfPlus()	BOOL <gdiplusmetaheader.h>
IsEmfPlus()	BOOL <gdiplusmetaheader.h>
IsEmfPlusDual()	BOOL <gdiplusmetaheader.h>
IsEmfPlusOnly()	BOOL <gdiplusmetaheader.h>
IsEmpty()inline WINBOOL CDXMap<mshtmlc.h>
IsEmpty(const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsEmpty(WINBOOL * pfEmpty)virtual HRESULT WINAPI <mshtmlc.h>
IsEmptyArea()	BOOL <gdiplustypes.h>
IsENCDelta(x)<corhdr.h>
IsEndPin(void)virtual HRESULT WINAPI <strmif.h>
IsEqual(IHTMLComputedStyle * pComputedStyle,VARIANT_BOOL * pfEqual)virtual HRESULT WINAPI <tom.h>
IsEqual(ITextFont * pFont,__LONG32 * pB)virtual HRESULT WINAPI <tom.h>
IsEqual(ITextPara * pPara,__LONG32 * pB)virtual HRESULT WINAPI <tom.h>
IsEqual(ITextRange * pRange,__LONG32 * pb)virtual HRESULT WINAPI <tom.h>
IsEqualCATID(rcatid1, rcatid2)<comcat.h>
IsEqualDevPropKey(a, b)<devpropdef.h>
IsEqualGUID(rcatid1, rcatid2)<objbase.h>
IsEqualGUID(REFGUID rguid1,REFGUID rguid2)__inline int <objbase.h>
IsEqualGUIDAligned(guid1, guid2)<wdm.h>
IsEqualGUIDAligned(REFGUID guid1,REFGUID guid2)inline int <wdm.h>
IsEqualGUIDBase(const GUID & rguid1,const GUID & rguid2) static inline WINBOOL <oledb.h>
IsEqualGuidBase(rguid1,rguid2)<oledb.h>
IsEqualMAPIUID(lpuid1,lpuid2)<wabdefs.h>
IsEqualPropertyKey(a,b)<propkeydef.h>
IsEqualTo(IDisplayPointer * pDispPointer,WINBOOL * pfIsEqual)virtual HRESULT WINAPI <mshtmlc.h>
IsEqualTo(IMarkupPointer * pPointerThat,WINBOOL * pfAreEqual)virtual HRESULT WINAPI <mshtmlc.h>
IsErrorSeverity(ErrorCode)<pdh.h>
IsEvRTSpecialName(x)<corhdr.h>
IsEvSpecialName(x)<corhdr.h>
IsExpandoDispid(dispid)<mshtmdid.h>
IsExtendedPixelFormat(PixelFormat pixfmt)static __inline__ BOOL <gdipluspixelformats.h>
ISFCN(x)<winnt.h>
IsFdAssembly(x)<corhdr.h>
IsFdFamANDAssem(x)<corhdr.h>
IsFdFamily(x)<corhdr.h>
IsFdFamORAssem(x)<corhdr.h>
IsFdHasDefault(x)<corhdr.h>
IsFdHasFieldMarshal(x)<corhdr.h>
IsFdHasFieldRVA(x)<corhdr.h>
IsFdInitOnly(x)<corhdr.h>
IsFdLiteral(x)<corhdr.h>
IsFdNotSerialized(x)<corhdr.h>
IsFdPinvokeImpl(x)<corhdr.h>
IsFdPrivate(x)<corhdr.h>
IsFdPrivateScope(x)<corhdr.h>
IsFdPublic(x)<corhdr.h>
IsFdRTSpecialName(x)<corhdr.h>
IsFdSpecialName(x)<corhdr.h>
IsFdStatic(x)<corhdr.h>
IsFfContainsMetaData(x)<corhdr.h>
IsFfContainsNoMetaData(x)<corhdr.h>
IsFilled()	BOOL <gdipluslinecaps.h>
isfinite(x)<math.h>
IsFTPartition(PartitionType)<winioctl.h>
IsFullDuplex(FULLDUPLEX_SUPPORT * pSupport)virtual HRESULT WINAPI <tapi3if.h>
IsGUIThread(WINBOOL bConvert) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsHashValCompatible(lhashval1,lhashval2)<oleauto.h>
IsIconic(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsIdentity()	BOOL <d2d1helper.h>
IsIME(HKL hKL)virtual HRESULT WINAPI <mshtmlc.h>
IsImmersiveProcess(HANDLE hProcess) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsIndexed(LONG * pIndexed)virtual HRESULT WINAPI <certview.h>
IsIndexedPixelFormat(PixelFormat pixfmt)static __inline__ BOOL <gdipluspixelformats.h>
isinf(x)<math.h>
IsInfinite(const Graphics * graphics)__inline__ BOOL Region::<gdiplusimpl.h>
IsInformationalSeverity(ErrorCode)<pdh.h>
IsInsideURL(IMarkupPointer * pRight,WINBOOL * pfResult)virtual HRESULT WINAPI <mshtmlc.h>
IsInstalled(void)virtual HRESULT WINAPI <shappmgr.h>
IsInternetESCEnabled() LWSTDAPI_<shlwapi.h>
IsInTransaction(VARIANT_BOOL * pbIsInTx)virtual HRESULT WINAPI <comsvcs.h>
IsInTransaction(void)virtual WINBOOL WINAPI <comsvcs.h>
IsInvertible()	BOOL <d2d1helper.h>
ISLBUTTON(x)<shobjidl.h>
IsLButtonDown()<windowsx.h>
isleadbyte(_c)<wctype.h>
isleadbyte(c)<wctype.h>
IsLeftOf(IDisplayPointer * pDispPointer,WINBOOL * pfIsLeftOf)virtual HRESULT WINAPI <mshtmlc.h>
IsLeftOf(IMarkupPointer * pPointerThat,WINBOOL * pfResult)virtual HRESULT WINAPI <mshtmlc.h>
IsLeftOfOrEqualTo(IMarkupPointer * pPointerThat,WINBOOL * pfResult)virtual HRESULT WINAPI <mshtmlc.h>
IsLFNDrive(LPCSTR pszPath) SHSTDAPI_<shellapi.h>
IsLFNDriveA(LPCSTR pszPath) SHSTDAPI_<shellapi.h>
IsLFNDriveW(LPCWSTR pszPath) SHSTDAPI_<shellapi.h>
IsListEmpty(IN CONST LIST_ENTRY * ListHead)<msputils.h>
IsListEmpty(ListHead)<msputils.h>
IsLLCPresent(LPVOID MacHeader,DWORD MacType) WINBOOL WINAPI <netmon.h>
IsLocal(LPCWSTR wszMachine)virtual WINBOOL WINAPI <wmiutils.h>
IsLoggingEnabled(LPCSTR pszUrl)WINBOOL WINAPI <urlmon.h>
IsLoggingEnabledA(LPCSTR pszUrl)WINBOOL WINAPI <urlmon.h>
IsLoggingEnabledW(LPCWSTR pwszUrl)WINBOOL WINAPI <urlmon.h>
IsManaged(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsManagedByDefault(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsMapUpToDate(void)virtual HRESULT WINAPI <indexsrv.h>
IsMaximized(hwnd)<windowsx.h>
ISMBUTTON(x)<shobjidl.h>
IsMButtonDown()<windowsx.h>
IsMdAbstract(x)<corhdr.h>
IsMdAssem(x)<corhdr.h>
IsMdCheckAccessOnOverride(x)<corhdr.h>
IsMdClassConstructor(x, str)<corhdr.h>
IsMdFamANDAssem(x)<corhdr.h>
IsMdFamily(x)<corhdr.h>
IsMdFamORAssem(x)<corhdr.h>
IsMdFinal(x)<corhdr.h>
IsMdHasSecurity(x)<corhdr.h>
IsMdHideBySig(x)<corhdr.h>
IsMdInstanceInitializer(x, str)<corhdr.h>
IsMdNewSlot(x)<corhdr.h>
IsMdPinvokeImpl(x)<corhdr.h>
IsMdPrivate(x)<corhdr.h>
IsMdPrivateScope(x)<corhdr.h>
IsMdPublic(x)<corhdr.h>
IsMdRequireSecObject(x)<corhdr.h>
IsMdReuseSlot(x)<corhdr.h>
IsMdRTSpecialName(x)<corhdr.h>
IsMdSpecialName(x)<corhdr.h>
IsMdStatic(x)<corhdr.h>
IsMdUnmanagedExport(x)<corhdr.h>
IsMdVirtual(x)<corhdr.h>
IsMember(BSTR bstrMember,VARIANT_BOOL * bMember)virtual HRESULT WINAPI <oledb.h>
IsMember(TRUSTEE_W * pMembershipTrustee,TRUSTEE_W * pMemberTrustee,WINBOOL * pfStatus)virtual HRESULT WINAPI <oledb.h>
IsMemberOfCluster(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsMenu(HMENU hMenu) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsMiAggressiveInlining(x)<corhdr.h>
IsMiForwardRef(x)<corhdr.h>
IsMiIL(x)<corhdr.h>
IsMiInternalCall(x)<corhdr.h>
IsMiManaged(x)<corhdr.h>
IsMiNative(x)<corhdr.h>
IsMinimized(hwnd)<windowsx.h>
IsMiNoInlining(x)<corhdr.h>
IsMiNoOptimization(x)<corhdr.h>
IsMiOPTIL(x)<corhdr.h>
IsMiPreserveSig(x)<corhdr.h>
IsMiRuntime(x)<corhdr.h>
IsMiSynchronized(x)<corhdr.h>
IsMiUnmanaged(x)<corhdr.h>
IsModifiable(const GUID * Api)virtual HRESULT WINAPI <strmif.h>
IsMonikerInTerminalList(IMoniker * pMoniker) virtual HRESULT <mspaddr.h>
IsMouseInPointerEnabled(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsMousePointerEnabled(void)WINUSERAPI WINBOOL WINAPI <winuser.h>
IsMrPrivate(x)<corhdr.h>
IsMrPublic(x)<corhdr.h>
IsMsAddOn(x)<corhdr.h>
IsMsFire(x)<corhdr.h>
IsMsGetter(x)<corhdr.h>
IsMsOther(x)<corhdr.h>
IsMsRemoveOn(x)<corhdr.h>
IsMsSetter(x)<corhdr.h>
IsMultiNodeCapable(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsNameUnique(BSTR bstrName,VARIANT_BOOL * pBool)virtual HRESULT WINAPI <sdoias.h>
IsNativeVhdBoot(PBOOL NativeVhdBoot) WINBASEAPI WINBOOL WINAPI <winbase.h>
IsNetDrive(int iDrive) SHSTDAPI_<shlobj.h>
IsNetworkAlive(LPDWORD lpdwFlags) WINBOOL WINAPI <sensapi.h>
IsNGenOnlyDclAction(x)<corhdr.h>
IsNilToken(tk)<corhdr.h>
IsNLSDefinedString(NLS_FUNCTION Function,DWORD dwFlags,LPNLSVERSIONINFO lpVersionInformation,LPCWSTR lpString,INT cchStr) WINBASEAPI WINBOOL WINAPI <winnls.h>
IsNodeOnList(PLIST_ENTRY ListHead,PLIST_ENTRY Entry)WINBOOL <msputils.h>
isnormal(x)<math.h>
IsNormalizedString(NORM_FORM NormForm,LPCWSTR lpString,int cwLength) WINNORMALIZEAPI WINBOOL WINAPI <winnls.h>
IsNTAdmin(DWORD dwReserved,DWORD * lpdwReserved) WINBOOL WINAPI <advpub.h>
ISNTADMIN(DWORD,DWORD *) typedef WINBOOL<advpub.h>
ISO_SET_TP_ADDR(sa_tp,port,portlen,node,nodelen)<wshisotp.h>
IsObjectAccessAllowed(SEC_OBJECT * pObject,EXPLICIT_ACCESS_W * pAccessEntry,WINBOOL * pfResult)virtual HRESULT WINAPI <oledb.h>
IsOfCopyMemory(x)<corhdr.h>
IsOfRead(x)<corhdr.h>
IsOfReadOnly(x)<corhdr.h>
IsOfReadWrite(x)<corhdr.h>
IsOfReserved(x)<corhdr.h>
IsOfTakeOwnership(x)<corhdr.h>
IsOfType(LPCWSTR pwszName,REFIID riid)virtual HRESULT WINAPI <mstask.h>
IsolationLevel(COMAdminTxIsolationLevelOptions option)virtual HRESULT WINAPI <winnt.h>
IsOutlineVisible(const Point & point,const Pen * pen,const Graphics * g)__inline__ BOOL GraphicsPath::<gdipluspath.h>
IsOutlineVisible(const Point & point,const Pen * pen,const Graphics * g=NULL)	BOOL <gdipluspath.h>
IsOutlineVisible(const PointF & point,const Pen * pen,const Graphics * g)__inline__ BOOL GraphicsPath::<gdipluspath.h>
IsOutlineVisible(const PointF & point,const Pen * pen,const Graphics * g=NULL)	BOOL <gdipluspath.h>
IsOutlineVisible(INT x,INT y,const Pen * pen,const Graphics * g)__inline__ BOOL GraphicsPath::<gdipluspath.h>
IsOutlineVisible(INT x,INT y,const Pen * pen,const Graphics * g=NULL)	BOOL <gdipluspath.h>
IsOutlineVisible(REAL x,REAL y,const Pen * pen,const Graphics * g)__inline__ BOOL GraphicsPath::<gdipluspath.h>
IsOutlineVisible(REAL x,REAL y,const Pen * pen,const Graphics * g=NULL)	BOOL <gdipluspath.h>
IsPartialFileSupportEnabled()bool WINAPI <vswriter.h>
IsPathAffected(LPCWSTR wszPath)bool WINAPI <vswriter.h>
IsPdHasDefault(x)<corhdr.h>
IsPdHasFieldMarshal(x)<corhdr.h>
IsPdIn(x)<corhdr.h>
IsPdOptional(x)<corhdr.h>
IsPdOut(x)<corhdr.h>
IsPeerDispid(dispid)<mshtmdid.h>
IsPenEvent(UINT,LONG) WINBOOL WINAPI <penwin.h>
IsPlatformNT() WINBOOL <multimon.h>
IsPmBestFitDisabled(x)<corhdr.h>
IsPmBestFitEnabled(x)<corhdr.h>
IsPmBestFitUseAssem(x)<corhdr.h>
IsPmCallConvCdecl(x)<corhdr.h>
IsPmCallConvFastcall(x)<corhdr.h>
IsPmCallConvStdcall(x)<corhdr.h>
IsPmCallConvThiscall(x)<corhdr.h>
IsPmCallConvWinapi(x)<corhdr.h>
IsPmCharSetAnsi(x)<corhdr.h>
IsPmCharSetAuto(x)<corhdr.h>
IsPmCharSetNotSpec(x)<corhdr.h>
IsPmCharSetUnicode(x)<corhdr.h>
IsPmNoMangle(x)<corhdr.h>
IsPmSupportsLastError(x)<corhdr.h>
IsPmThrowOnUnmappableCharDisabled(x)<corhdr.h>
IsPmThrowOnUnmappableCharEnabled(x)<corhdr.h>
IsPmThrowOnUnmappableCharUseAssem(x)<corhdr.h>
IsPositioned(WINBOOL * pfPositioned)virtual HRESULT WINAPI <mshtmlc.h>
IsPrHasDefault(x)<corhdr.h>
IsPrimary(WINBOOL * pfPrimary)virtual HRESULT WINAPI <mshtmlc.h>
IsPrivate(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsProcessDPIAware(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsProcessInJob(HANDLE ProcessHandle,HANDLE JobHandle,PBOOL Result) WINBASEAPI WINBOOL WINAPI <jobapi.h>
IsProcessorFeaturePresent(DWORD ProcessorFeature) WINBOOL WINAPI <processthreadsapi.h>
IsPropertyReadOnly(BSTR bstrPropName,VARIANT_BOOL * retval)virtual HRESULT WINAPI <mtxadmin.h>
IsPropertyWriteOnly(BSTR bstrPropName,VARIANT_BOOL * retval)virtual HRESULT WINAPI <mtxadmin.h>
IsPrRTSpecialName(x)<corhdr.h>
IsPrSpecialName(x)<corhdr.h>
ISPTR(x)<winnt.h>
IsPublic(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsPwrHibernateAllowed(VOID) BOOLEAN WINAPI <powrprof.h>
IsPwrShutdownAllowed(VOID) BOOLEAN WINAPI <powrprof.h>
IsPwrSuspendAllowed(VOID) BOOLEAN WINAPI <powrprof.h>
IsQuorumCapable(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsQuorumResource(void)virtual HRESULT WINAPI <cluscfgserver.h>
IsRawIPXEnabled(LPSTR secName,LPSTR iniFile,LPSTR CurProtocol) BOOLEAN WINAPI <netmon.h>
ISRBUTTON(x)<shobjidl.h>
IsRButtonDown()<windowsx.h>
IsRecognizedPartition(PartitionType)<winioctl.h>
IsRectEmpty(CONST RECT * lprc) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsRelative(LPWSTR wszMachine,LPWSTR wszNamespace)virtual WINBOOL WINAPI <wmiutils.h>
IsRelativeOrChild(LPWSTR wszMachine,LPWSTR wszNamespace,__LONG32 lFlags)virtual WINBOOL WINAPI <wmiutils.h>
IsRemoteNPP(HBLOB hBLOB) WINBOOL __cdecl <netmon.h>
IsReparseTagMicrosoft(	_tag)<winnt.h>
IsReparseTagMicrosoft(_tag)<winnt.h>
IsReparseTagNameSurrogate(	_tag)<winnt.h>
IsReparseTagNameSurrogate(_tag)<winnt.h>
IsReparseTagValid(tag)<ntifs.h>
IsRestored(hwnd)<windowsx.h>
IsRightOf(IDisplayPointer * pDispPointer,WINBOOL * pfIsRightOf)virtual HRESULT WINAPI <mshtmlc.h>
IsRightOf(IMarkupPointer * pPointerThat,WINBOOL * pfResult)virtual HRESULT WINAPI <mshtmlc.h>
IsRightOfOrEqualTo(IMarkupPointer * pPointerThat,WINBOOL * pfResult)virtual HRESULT WINAPI <mshtmlc.h>
IsRouteLoopback(pRoute)<rtm.h>
IsRouteNonUnicast(pRoute)<rtm.h>
IsRouteValid(pRoute)<rtm.h>
IsRoutingInfoPresent(f)<netmon.h>
IsRowInChapter(HCHAPTER hChapter,HROW hRow)virtual HRESULT WINAPI <oledb.h>
IsSameClassName(LPCWSTR wszClass)virtual WINBOOL WINAPI <wmiutils.h>
IsSameRow(HROW hThisRow,HROW hThatRow)virtual HRESULT WINAPI <oledb.h>
IsSameSxsConfig(LPCWSTR wszSxsName,LPCWSTR wszSxsDirectory,LPCWSTR wszSxsAppName)virtual HRESULT WINAPI <comsvcs.h>
IsScopedElement(IHTMLElement * pElement,WINBOOL * pfScoped)virtual HRESULT WINAPI <mshtmlc.h>
IsScopeNode(PBOOL IsScopeNode)virtual HRESULT WINAPI <mmcobj.h>
IsSecurityEnabled(RTC_SECURITY_TYPE enSecurityType,VARIANT_BOOL * pfSecurityEnabled)virtual HRESULT WINAPI <rtccore.h>
IsSecurityEnabled(VARIANT_BOOL * pbIsEnabled)virtual HRESULT WINAPI <rtccore.h>
IsSecurityEnabled(VARIANT_BOOL * pfIsEnabled)virtual HRESULT WINAPI <rtccore.h>
IsSecurityEnabled(void)virtual WINBOOL WINAPI <rtccore.h>
IsSelected(PNODE Node,PBOOL IsSelected)virtual HRESULT WINAPI <mmcobj.h>
Issh_len32b(p)<lpmapi.h>
IsSingleMediaType(DWORD dwMediaType)extern __inline WINBOOL <msputils.h>
IsSortColumn(PBOOL IsSortColumn)virtual HRESULT WINAPI <mmcobj.h>
IsStandardDispid(dispid)<mshtmdid.h>
IsStyleAvailable(INT style)__inline__ BOOL FontFamily::<gdiplusimpl.h>
IsSubpictureStreamEnabled(ULONG ulStreamNum,WINBOOL * pbEnabled)virtual HRESULT WINAPI <strmif.h>
IsSubscribed(LPCWSTR pwszURL,WINBOOL * pfSubscribed)virtual HRESULT WINAPI <subsmgr.h>
IsSuccessSeverity(ErrorCode)<pdh.h>
IsSupported(const GUID * Api)virtual HRESULT WINAPI <strmif.h>
IsSurfaceLocked(void)virtual HRESULT WINAPI <strmif.h>
IsSystemResumeAutomatic(VOID) WINBASEAPI WINBOOL WINAPI <winbase.h>
ISTAG(x)<winnt.h>
IsTapingPermitted(void)virtual HRESULT WINAPI <strmif.h>
IsTaskpadViewPreferred(void)virtual HRESULT WINAPI <mmc.h>
IsTdAbstract(x)<corhdr.h>
IsTdAnsiClass(x)<corhdr.h>
IsTdAutoClass(x)<corhdr.h>
IsTdAutoLayout(x)<corhdr.h>
IsTdBeforeFieldInit(x)<corhdr.h>
IsTdClass(x)<corhdr.h>
IsTdCustomFormatClass(x)<corhdr.h>
IsTdExplicitLayout(x)<corhdr.h>
IsTdForwarder(x)<corhdr.h>
IsTdHasSecurity(x)<corhdr.h>
IsTdImport(x)<corhdr.h>
IsTdInterface(x)<corhdr.h>
IsTdNested(x)<corhdr.h>
IsTdNestedAssembly(x)<corhdr.h>
IsTdNestedFamANDAssem(x)<corhdr.h>
IsTdNestedFamily(x)<corhdr.h>
IsTdNestedFamORAssem(x)<corhdr.h>
IsTdNestedPrivate(x)<corhdr.h>
IsTdNestedPublic(x)<corhdr.h>
IsTdNotPublic(x)<corhdr.h>
IsTdPublic(x)<corhdr.h>
IsTdRTSpecialName(x)<corhdr.h>
IsTdSealed(x)<corhdr.h>
IsTdSequentialLayout(x)<corhdr.h>
IsTdSerializable(x)<corhdr.h>
IsTdSpecialName(x)<corhdr.h>
IsTdUnicodeClass(x)<corhdr.h>
IsTdWindowsRuntime(x)<corhdr.h>
IsTextUnicode(CONST VOID * lpv,int iSize,LPINT lpiResult) WINADVAPI WINBOOL WINAPI <winbase.h>
IsThemeActive()THEMEAPI_<uxtheme.h>
IsThemeBackgroundPartiallyTransparent(HTHEME hTheme,int iPartId,int iStateId)THEMEAPI_<uxtheme.h>
IsThemeDialogTextureEnabled(HWND hwnd)THEMEAPI_<uxtheme.h>
IsThemePartDefined(HTHEME hTheme,int iPartId,int iStateId)THEMEAPI_<uxtheme.h>
IsThreadAFiber(VOID) WINBASEAPI WINBOOL WINAPI <fibersapi.h>
IsThreadpoolTimerSet(PTP_TIMER pti) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
IsTokenRestricted(HANDLE TokenHandle) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
IsTokenUntrusted(HANDLE TokenHandle) WINADVAPI WINBOOL WINAPI <winbase.h>
IsTouchWindow(HWND hwnd,PULONG pulFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsUIMessageA(HWND hWndIME,UINT msg,WPARAM wParam,LPARAM lParam)virtual HRESULT WINAPI <mshtmlc.h>
IsUIMessageW(HWND hWndIME,UINT msg,WPARAM wParam,LPARAM lParam)virtual HRESULT WINAPI <mshtmlc.h>
IsUrlCacheEntryExpired(LPCSTR,DWORD,FILETIME *)WINBOOL     WINAPI <winineti.h>
IsUrlCacheEntryExpiredA(LPCSTR,DWORD,FILETIME *)WINBOOL     WINAPI <winineti.h>
IsUrlCacheEntryExpiredW(LPCWSTR,DWORD,FILETIME *)WINBOOL     WINAPI <winineti.h>
IsUserAnAdmin(void) SHSTDAPI_<shlobj.h>
IsUserEnabled(VARIANT_BOOL * pvbEnabled)virtual HRESULT WINAPI <gpmgmt.h>
IsUserInRole(VARIANT * pUser,BSTR bstrRole,VARIANT_BOOL * pfInRole)virtual HRESULT WINAPI <comsvcs.h>
IsUsingDefaultDestination(void)virtual HRESULT WINAPI <control.h>
IsUsingDefaultSource(void)virtual HRESULT WINAPI <control.h>
IsValidAcl(PACL pAcl) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
IsValidAggregatedMediaType(DWORD dwAggregatedMediaType)extern __inline WINBOOL <msputils.h>
IsValidCertificate(const BSTR strConfig,const BSTR strSerialNumber,LONG * pDisposition)virtual HRESULT WINAPI <certadm.h>
IsValidCodePage(UINT CodePage) WINBASEAPI WINBOOL WINAPI <winnls.h>
IsValidDevmode(PDEVMODEA pDevmode,size_t DevmodeSize) WINBOOL WINAPI <winspool.h>
IsValidDevmodeA(PDEVMODEA pDevmode,size_t DevmodeSize) WINBOOL WINAPI <winspool.h>
IsValidDevmodeW(PDEVMODEW pDevmode,size_t DevmodeSize) WINBOOL WINAPI <winspool.h>
IsValidIndex(PSZ pszFileName,UINT dwOptions) WINBOOL WINAPI <ftsiface.h>
IsValidLanguageGroup(LGRPID LanguageGroup,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
IsValidLocale(LCID Locale,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winnls.h>
IsValidLocaleName(LPCWSTR lpLocaleName) WINBASEAPI WINBOOL WINAPI <winnls.h>
IsValidNLSVersion(NLS_FUNCTION function,LPCWSTR lpLocaleName,LPNLSVERSIONINFOEX lpVersionInformation) WINBASEAPI DWORD WINAPI <winnls.h>
IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
IsValidSetOfMediaTypes(DWORD dwMediaType,DWORD dwMask) virtual WINBOOL <mspaddr.h>
IsValidSid(PSID pSid) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
IsValidSingleMediaType(DWORD dwMediaType,DWORD dwMask)extern __inline WINBOOL <msputils.h>
IsValidURL(LPBC pBC,LPCWSTR szURL,DWORD dwReserved)STDAPI <urlmon.h>
IsVisible(const Point & point)	BOOL <mshtmlc.h>
IsVisible(const Point & point,const Graphics * g)__inline__ BOOL GraphicsPath::<mshtmlc.h>
IsVisible(const Point & point,const Graphics * g=NULL)	BOOL <mshtmlc.h>
IsVisible(const Point & point,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(const Point & point,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(const PointF & point)	BOOL <mshtmlc.h>
IsVisible(const PointF & point,const Graphics * g)__inline__ BOOL GraphicsPath::<mshtmlc.h>
IsVisible(const PointF & point,const Graphics * g=NULL)	BOOL <mshtmlc.h>
IsVisible(const PointF & point,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(const PointF & point,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(const Rect & rect)	BOOL <mshtmlc.h>
IsVisible(const Rect & rect,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(const Rect & rect,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(const RectF & rect)	BOOL <mshtmlc.h>
IsVisible(const RectF & rect,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(const RectF & rect,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(INT x,INT y)	BOOL <mshtmlc.h>
IsVisible(INT x,INT y,const Graphics * g)__inline__ BOOL GraphicsPath::<mshtmlc.h>
IsVisible(INT x,INT y,const Graphics * g=NULL)	BOOL <mshtmlc.h>
IsVisible(INT x,INT y,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(INT x,INT y,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(INT x,INT y,INT width,INT height)	BOOL <mshtmlc.h>
IsVisible(INT x,INT y,INT width,INT height,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(INT x,INT y,INT width,INT height,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(REAL x,REAL y)	BOOL <mshtmlc.h>
IsVisible(REAL x,REAL y,const Graphics * g)__inline__ BOOL GraphicsPath::<mshtmlc.h>
IsVisible(REAL x,REAL y,const Graphics * g=NULL)	BOOL <mshtmlc.h>
IsVisible(REAL x,REAL y,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(REAL x,REAL y,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(REAL x,REAL y,REAL width,REAL height)	BOOL <mshtmlc.h>
IsVisible(REAL x,REAL y,REAL width,REAL height,const Graphics * graphics)__inline__ BOOL Region::<mshtmlc.h>
IsVisible(REAL x,REAL y,REAL width,REAL height,const Graphics * graphics=NULL)	BOOL <mshtmlc.h>
IsVisible(WINBOOL * pIsVisible)virtual HRESULT WINAPI <mshtmlc.h>
IsVisibleClipEmpty()	BOOL <gdiplusgraphics.h>
IsVolumeSnapshotted(VSS_PWSZ pwszVolumeName,BOOLEAN * pbSnapshotsPresent,LONG * plSnapshotCapability)HRESULT WINAPI <vsbackup.h>
IsVolumeSnapshottedInternal(VSS_PWSZ pwszVolumeName,BOOLEAN * pbSnapshotsPresent,LONG * plSnapshotCapability)HRESULT WINAPI <vsbackup.h>
IsVtblGapName(strName)<corhdr.h>
iswalnum(_c)<wctype.h>
iswalpha(_c)<wctype.h>
IsWarningSeverity(ErrorCode)<pdh.h>
iswascii(_c)<wctype.h>
iswcntrl(_c)<wctype.h>
iswdigit(_c)<wctype.h>
IsWellKnownSid(PSID pSid,WELL_KNOWN_SID_TYPE WellKnownSidType) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
iswgraph(_c)<wctype.h>
IsWindow(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsWindowEnabled(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsWindows7OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindows7SP1OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindows8OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindows8Point1OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsServer(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsVersionOrGreater(WORD major,WORD minor,WORD servpack)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsVistaOrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsVistaSP1OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsVistaSP2OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsXPOrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsXPSP1OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsXPSP2OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowsXPSP3OrGreater(void)VERSIONHELPERAPI <versionhelpers.h>
IsWindowUnicode(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsWindowVisible(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsWinEventHookInstalled(DWORD event) WINUSERAPI WINBOOL WINAPI <winuser.h>
iswlower(_c)<wctype.h>
IsWmf()	BOOL <gdiplusmetaheader.h>
IsWmfPlaceable()	BOOL <gdiplusmetaheader.h>
IsWow64Message(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
IsWow64Process(HANDLE hProcess,PBOOL Wow64Process) WINBASEAPI WINBOOL WINAPI <wow64apiset.h>
iswprint(_c)<wctype.h>
iswpunct(_c)<wctype.h>
IsWriterShuttingDown()bool WINAPI <vswriter.h>
iswspace(_c)<wctype.h>
iswupper(_c)<wctype.h>
iswxdigit(_c)<wctype.h>
IsZoomed(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
Item(__LONG32 Index,IDispatch ** ppIMSession)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 Index,ITextRange ** ppRange)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 Index,PPCOLUMN Column)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 Index,PPEXTENSION Extension)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 Index,PPNODE Node)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 Index,PPSNAPIN SnapIn)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 Index,PPVIEW View)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 lIndex,IUnknown ** ppUnkDispatcher)virtual HRESULT WINAPI <xmltrnsf.h>
Item(__LONG32 lItem,IUnknown ** ppUnk)virtual HRESULT WINAPI <xmltrnsf.h>
Item(BSTR Name,PPPROPERTY Property)virtual HRESULT WINAPI <xmltrnsf.h>
Item(BSTR strObjectPath,__LONG32 iFlags,IXMLDOMDocument ** ppXMLDocument)virtual HRESULT WINAPI <xmltrnsf.h>
Item(LONG i) CdbWorkspace <xmltrnsf.h>
Item(LPCTSTR pstr) CdbWorkspace <xmltrnsf.h>
Item(ULONG ulIndex,REFIID riid,void ** ppv)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT * Index,VARIANT * pvarRet)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT * Name,IDispatch ** pItem)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT * pvarIndex,BSTR * pbstrBlockFormat)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT * pvarIndex,BSTR * pbstrFontName)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT Index,LPVARIANT pItem)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT varIndex,VARIANT * pVariant)virtual HRESULT WINAPI <xmltrnsf.h>
Item(VARIANT varItem,IDispatch ** ppContact)virtual HRESULT WINAPI <xmltrnsf.h>
ITextHost() virtual void TxSetFocus<textserv.h>
ITextHost(const CHARFORMATW * pcf) virtual HRESULT OnTxCharFormatChange<textserv.h>
ITextHost(const CHARFORMATW ** ppCF) virtual HRESULT TxGetCharFormat<textserv.h>
ITextHost(const PARAFORMAT * ppf) virtual HRESULT OnTxParaFormatChange<textserv.h>
ITextHost(const PARAFORMAT ** ppPF) virtual HRESULT TxGetParaFormat<textserv.h>
ITextHost(DWORD * pdwScrollBar) virtual HRESULT TxGetScrollBars<textserv.h>
ITextHost(DWORD * plength) virtual HRESULT TxGetMaxLength<textserv.h>
ITextHost(DWORD dwMask,DWORD * pdwBits) virtual HRESULT TxGetPropertyBits<textserv.h>
ITextHost(DWORD iNotify,void * pv) virtual HRESULT TxNotify<textserv.h>
ITextHost(HBITMAP hbmp,INT xWidth,INT yHeight) virtual WINBOOL TxCreateCaret<textserv.h>
ITextHost(HCURSOR hcur,WINBOOL fText) virtual void TxSetCursor<textserv.h>
ITextHost(HDC hdc) virtual INT TxReleaseDC<textserv.h>
ITextHost(HIMC himc) virtual void TxImmReleaseContext<textserv.h>
ITextHost(INT dx,INT dy,LPCRECT lprcScroll,LPCRECT lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate,UINT fuScroll) virtual void TxScrollWindowEx<textserv.h>
ITextHost(INT fnBar,INT nPos,WINBOOL fRedraw) virtual WINBOOL TxSetScrollPos<textserv.h>
ITextHost(INT fnBar,LONG nMinPos,INT nMaxPos,WINBOOL fRedraw) virtual WINBOOL TxSetScrollRange<textserv.h>
ITextHost(INT fnBar,WINBOOL fShow) virtual WINBOOL TxShowScrollBar<textserv.h>
ITextHost(INT fuSBFlags,INT fuArrowflags) virtual WINBOOL TxEnableScrollBar<textserv.h>
ITextHost(int nIndex) virtual COLORREF TxGetSysColor<textserv.h>
ITextHost(INT x,INT y) virtual WINBOOL TxSetCaretPos<textserv.h>
ITextHost(LONG * lSelBarWidth) virtual HRESULT TxGetSelectionBarWidth<textserv.h>
ITextHost(LONG * pcp) virtual HRESULT TxGetAcceleratorPos<textserv.h>
ITextHost(LONG * plOldState) virtual HRESULT TxActivate<textserv.h>
ITextHost(LONG lNewState) virtual HRESULT TxDeactivate<textserv.h>
ITextHost(LPCRECT prc,WINBOOL fMode) virtual void TxInvalidateRect<textserv.h>
ITextHost(LPPOINT lppt) virtual WINBOOL TxScreenToClient<textserv.h>
ITextHost(LPRECT prc) virtual HRESULT TxGetViewInset<textserv.h>
ITextHost(LPSIZEL lpExtent) virtual HRESULT TxGetExtent<textserv.h>
ITextHost(TCHAR * pch) virtual HRESULT TxGetPasswordChar<textserv.h>
ITextHost(TXTBACKSTYLE * pstyle) virtual HRESULT TxGetBackStyle<textserv.h>
ITextHost(UINT idTimer) virtual void TxKillTimer<textserv.h>
ITextHost(UINT idTimer,UINT uTimeout) virtual WINBOOL TxSetTimer<textserv.h>
ITextHost(WINBOOL fCapture) virtual void TxSetCapture<textserv.h>
ITextHost(WINBOOL fShow) virtual WINBOOL TxShowCaret<textserv.h>
ITextHost(WINBOOL fUpdate) virtual void TxViewChange<textserv.h>
ITextServices() virtual HRESULT OnTxUIDeactivate<textserv.h>
ITextServices(BSTR * pbstrText) virtual HRESULT TxGetText<textserv.h>
ITextServices(DWORD * pdwWidth,DWORD * pdwHeight) virtual HRESULT TxGetCachedSize<textserv.h>
ITextServices(DWORD dwAspect,HDC hdcDraw,HDC hicTargetDev,DVTARGETDEVICE * ptd,DWORD dwMode,const SIZEL * psizelExtent,LONG * pwidth,LONG * pheight) virtual HRESULT TxGetNaturalSize<textserv.h>
ITextServices(DWORD dwDrawAspect,LONG lindex,void * pvAspect,DVTARGETDEVICE * ptd,HDC hdcDraw,HDC hicTargetDev,LPCRECT lprcClient,INT x,INT y) virtual HRESULT OnTxSetCursor<textserv.h>
ITextServices(DWORD dwDrawAspect,LONG lindex,void * pvAspect,DVTARGETDEVICE * ptd,HDC hdcDraw,HDC hicTargetDev,LPCRECT lprcClient,INT x,INT y,DWORD * pHitResult) virtual HRESULT TxQueryHitPoint<textserv.h>
ITextServices(DWORD dwMask,DWORD dwBits) virtual HRESULT OnTxPropertyBitsChange<textserv.h>
ITextServices(DWORD),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId) virtual HRESULT TxDraw<textserv.h>
ITextServices(IDropTarget ** ppDropTarget) virtual HRESULT TxGetDropTarget<textserv.h>
ITextServices(LONG * plMin,LONG * plMax,LONG * plPos,LONG * plPage,WINBOOL * pfEnabled) virtual HRESULT TxGetVScroll<textserv.h>
ITextServices(LONG *) virtual HRESULT TxGetCurTargetX<textserv.h>
ITextServices(LPCRECT prcClient) virtual HRESULT OnTxInPlaceActivate<textserv.h>
ITextServices(LPCWSTR pszText) virtual HRESULT TxSetText<textserv.h>
ITextServices(UINT msg,WPARAM wparam,LPARAM lparam,LRESULT * plresult) virtual HRESULT TxSendMessage<textserv.h>
ITIR_VALUE(key,ps)<kxia64.h>
ITransactionLastEnlistmentAsync_QueryInterface(This,riid,ppvObject) define <txcoord.h>
Iu16vec8() <dvec.h>
Iu16vec8(__m128i mm) <dvec.h>
Iu16vec8(const I16vec8 & a) <dvec.h>
Iu16vec8(const M128 & a) <dvec.h>
Iu16vec8(int count) <dvec.h>
Iu16vec8(int i) unsigned short<dvec.h>
Iu16vec8(std::ostream & os,const Iu16vec8 & a) friend std::ostream<dvec.h>
Iu16vec8(unsigned short s7,unsigned short s6,unsigned short s5,unsigned short s4,unsigned short s3,unsigned short s2,unsigned short s1,unsigned short s0) <dvec.h>
Iu32vec4() <dvec.h>
Iu32vec4(__m128i mm) <dvec.h>
Iu32vec4(const I32vec4 & a) <dvec.h>
Iu32vec4(const M128 & a) <dvec.h>
Iu32vec4(int count) <dvec.h>
Iu32vec4(int i) unsigned int<dvec.h>
Iu32vec4(std::ostream & os,const Iu32vec4 & a) friend std::ostream<dvec.h>
Iu32vec4(unsigned int ui3,unsigned int ui2,unsigned int ui1,unsigned int ui0) <dvec.h>
Iu8vec16() <dvec.h>
Iu8vec16(__m128i mm) <dvec.h>
Iu8vec16(const I8vec16 & a) <dvec.h>
Iu8vec16(const M128 & a) <dvec.h>
Iu8vec16(int i) unsigned char<dvec.h>
Iu8vec16(std::ostream & os,const Iu8vec16 & a) friend std::ostream<dvec.h>
IUMS() virtual VOID WINAPI SqlUmsSwitchPremptive<sqloledb.h>
IUMS(ULONG ticks) virtual VOID WINAPI SqlUmsYield<sqloledb.h>
IUMSInitialize(VOID * pUMS) virtual HRESULT WINAPI Initialize<sqloledb.h>
IUNKNOWN_METHODS(kind)<dxfile.h>
IVEC128_ADD_SUB(vect,element,opsize)<dvec.h>
IVEC128_LOGICALS(vect,element)<dvec.h>
IVEC128_SELECT(vect12,vect34,element,selop,arg1,arg2)<dvec.h>
JET_CALLBACK(JET_SESID sesid,JET_DBID dbid,JET_TABLEID tableid,JET_CBTYP cbtyp,void * pvArg1,void * pvArg2,void * pvContext,JET_API_PTR ulUnused)typedef JET_ERR<esent.h>
JET_PFNREALLOC(void * pvContext,void * pv,unsigned __LONG32 cb)typedef void<esent.h>
JET_PFNSTATUS(JET_SESID sesid,JET_SNP snp,JET_SNT snt,void * pv)typedef JET_ERR<esent.h>
JetAddColumn(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szColumnName,const JET_COLUMNDEF * pcolumndef,const void * pvDefault,unsigned __LONG32 cbDefault,JET_COLUMNID * pcolumnid)JET_ERR JET_API <esent.h>
JetAddColumnA(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szColumnName,const JET_COLUMNDEF * pcolumndef,const void * pvDefault,unsigned __LONG32 cbDefault,JET_COLUMNID * pcolumnid)JET_ERR JET_API <esent.h>
JetAddColumnW(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szColumnName,const JET_COLUMNDEF * pcolumndef,const void * pvDefault,unsigned __LONG32 cbDefault,JET_COLUMNID * pcolumnid)JET_ERR JET_API <esent.h>
JetAttachDatabase(JET_SESID sesid,const char * szFilename,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetAttachDatabase2(JET_SESID sesid,const char * szFilename,const unsigned __LONG32 cpgDatabaseSizeMax,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetAttachDatabase2A(JET_SESID sesid,const char * szFilename,const unsigned __LONG32 cpgDatabaseSizeMax,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetAttachDatabase2W(JET_SESID sesid,const WCHAR * szFilename,const unsigned __LONG32 cpgDatabaseSizeMax,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetAttachDatabaseA(JET_SESID sesid,const char * szFilename,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetAttachDatabaseW(JET_SESID sesid,const WCHAR * szFilename,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetBackup(JET_PCSTR szBackupPath,JET_GRBIT grbit,JET_PFNSTATUS pfnStatus)JET_ERR JET_API <esent.h>
JetBackupA(JET_PCSTR szBackupPath,JET_GRBIT grbit,JET_PFNSTATUS pfnStatus)JET_ERR JET_API <esent.h>
JetBackupInstance(JET_INSTANCE instance,JET_PCSTR szBackupPath,JET_GRBIT grbit,JET_PFNSTATUS pfnStatus)JET_ERR JET_API <esent.h>
JetBackupInstanceA(JET_INSTANCE instance,JET_PCSTR szBackupPath,JET_GRBIT grbit,JET_PFNSTATUS pfnStatus)JET_ERR JET_API <esent.h>
JetBackupInstanceW(JET_INSTANCE instance,JET_PCWSTR szBackupPath,JET_GRBIT grbit,JET_PFNSTATUS pfnStatus)JET_ERR JET_API <esent.h>
JetBackupW(JET_PCWSTR szBackupPath,JET_GRBIT grbit,JET_PFNSTATUS pfnStatus)JET_ERR JET_API <esent.h>
JetBeginExternalBackup(JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetBeginExternalBackupInstance(JET_INSTANCE instance,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetBeginSession(JET_INSTANCE instance,JET_SESID * psesid,JET_PCSTR szUserName,JET_PCSTR szPassword)JET_ERR JET_API <esent.h>
JetBeginSessionA(JET_INSTANCE instance,JET_SESID * psesid,JET_PCSTR szUserName,JET_PCSTR szPassword)JET_ERR JET_API <esent.h>
JetBeginSessionW(JET_INSTANCE instance,JET_SESID * psesid,JET_PCWSTR szUserName,JET_PCWSTR szPassword)JET_ERR JET_API <esent.h>
JetBeginTransaction(JET_SESID sesid)JET_ERR JET_API <esent.h>
JetBeginTransaction2(JET_SESID sesid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCloseDatabase(JET_SESID sesid,JET_DBID dbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCloseFile(JET_HANDLE hfFile)JET_ERR JET_API <esent.h>
JetCloseFileInstance(JET_INSTANCE instance,JET_HANDLE hfFile)JET_ERR JET_API <esent.h>
JetCloseTable(JET_SESID sesid,JET_TABLEID tableid)JET_ERR JET_API <esent.h>
JetCommitTransaction(JET_SESID sesid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCompact(JET_SESID sesid,JET_PCSTR szDatabaseSrc,JET_PCSTR szDatabaseDest,JET_PFNSTATUS pfnStatus,JET_CONVERT_A * pconvert,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCompactA(JET_SESID sesid,JET_PCSTR szDatabaseSrc,JET_PCSTR szDatabaseDest,JET_PFNSTATUS pfnStatus,JET_CONVERT_A * pconvert,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCompactW(JET_SESID sesid,JET_PCWSTR szDatabaseSrc,JET_PCWSTR szDatabaseDest,JET_PFNSTATUS pfnStatus,JET_CONVERT_W * pconvert,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetComputeStats(JET_SESID sesid,JET_TABLEID tableid)JET_ERR JET_API <esent.h>
JetCreateDatabase(JET_SESID sesid,JET_PCSTR szFilename,JET_PCSTR szConnect,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateDatabase2(JET_SESID sesid,const char * szFilename,const unsigned __LONG32 cpgDatabaseSizeMax,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateDatabase2A(JET_SESID sesid,const char * szFilename,const unsigned __LONG32 cpgDatabaseSizeMax,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateDatabase2W(JET_SESID sesid,const WCHAR * szFilename,const unsigned __LONG32 cpgDatabaseSizeMax,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateDatabaseA(JET_SESID sesid,JET_PCSTR szFilename,JET_PCSTR szConnect,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateDatabaseW(JET_SESID sesid,JET_PCWSTR szFilename,JET_PCWSTR szConnect,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateIndex(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName,JET_GRBIT grbit,const char * szKey,unsigned __LONG32 cbKey,unsigned __LONG32 lDensity)JET_ERR JET_API <esent.h>
JetCreateIndex2(JET_SESID sesid,JET_TABLEID tableid,JET_INDEXCREATE_A * pindexcreate,unsigned __LONG32 cIndexCreate)JET_ERR JET_API <esent.h>
JetCreateIndex2A(JET_SESID sesid,JET_TABLEID tableid,JET_INDEXCREATE_A * pindexcreate,unsigned __LONG32 cIndexCreate)JET_ERR JET_API <esent.h>
JetCreateIndex2W(JET_SESID sesid,JET_TABLEID tableid,JET_INDEXCREATE_W * pindexcreate,unsigned __LONG32 cIndexCreate)JET_ERR JET_API <esent.h>
JetCreateIndexA(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName,JET_GRBIT grbit,const char * szKey,unsigned __LONG32 cbKey,unsigned __LONG32 lDensity)JET_ERR JET_API <esent.h>
JetCreateIndexW(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szIndexName,JET_GRBIT grbit,const WCHAR * szKey,unsigned __LONG32 cbKey,unsigned __LONG32 lDensity)JET_ERR JET_API <esent.h>
JetCreateInstance(JET_INSTANCE * pinstance,const char * szInstanceName)JET_ERR JET_API <esent.h>
JetCreateInstance2(JET_INSTANCE * pinstance,const char * szInstanceName,const char * szDisplayName,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateInstance2A(JET_INSTANCE * pinstance,const char * szInstanceName,const char * szDisplayName,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateInstance2W(JET_INSTANCE * pinstance,const WCHAR * szInstanceName,const WCHAR * szDisplayName,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetCreateInstanceA(JET_INSTANCE * pinstance,const char * szInstanceName)JET_ERR JET_API <esent.h>
JetCreateInstanceW(JET_INSTANCE * pinstance,const WCHAR * szInstanceName)JET_ERR JET_API <esent.h>
JetCreateTableA(JET_SESID sesid,JET_DBID dbid,const char * szTableName,unsigned __LONG32 lPages,unsigned __LONG32 lDensity,JET_TABLEID * ptableid)JET_ERR JET_API <esent.h>
JetCreateTableColumnIndex2(JET_SESID sesid,JET_DBID dbid,JET_TABLECREATE2_A * ptablecreate)JET_ERR JET_API <esent.h>
JetCreateTableColumnIndex2A(JET_SESID sesid,JET_DBID dbid,JET_TABLECREATE2_A * ptablecreate)JET_ERR JET_API <esent.h>
JetCreateTableColumnIndex2W(JET_SESID sesid,JET_DBID dbid,JET_TABLECREATE2_W * ptablecreate)JET_ERR JET_API <esent.h>
JetCreateTableColumnIndexA(JET_SESID sesid,JET_DBID dbid,JET_TABLECREATE_A * ptablecreate)JET_ERR JET_API <esent.h>
JetCreateTableColumnIndexW(JET_SESID sesid,JET_DBID dbid,JET_TABLECREATE_W * ptablecreate)JET_ERR JET_API <esent.h>
JetCreateTableW(JET_SESID sesid,JET_DBID dbid,const WCHAR * szTableName,unsigned __LONG32 lPages,unsigned __LONG32 lDensity,JET_TABLEID * ptableid)JET_ERR JET_API <esent.h>
JetDefragment(JET_SESID sesid,JET_DBID dbid,JET_PCSTR szTableName,unsigned __LONG32 * pcPasses,unsigned __LONG32 * pcSeconds,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDefragment2(JET_SESID sesid,JET_DBID dbid,JET_PCSTR szTableName,unsigned __LONG32 * pcPasses,unsigned __LONG32 * pcSeconds,JET_CALLBACK callback,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDefragment2A(JET_SESID sesid,JET_DBID dbid,JET_PCSTR szTableName,unsigned __LONG32 * pcPasses,unsigned __LONG32 * pcSeconds,JET_CALLBACK callback,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDefragment2W(JET_SESID sesid,JET_DBID dbid,JET_PCWSTR szTableName,unsigned __LONG32 * pcPasses,unsigned __LONG32 * pcSeconds,JET_CALLBACK callback,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDefragmentA(JET_SESID sesid,JET_DBID dbid,JET_PCSTR szTableName,unsigned __LONG32 * pcPasses,unsigned __LONG32 * pcSeconds,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDefragmentW(JET_SESID sesid,JET_DBID dbid,JET_PCWSTR szTableName,unsigned __LONG32 * pcPasses,unsigned __LONG32 * pcSeconds,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDelete(JET_SESID sesid,JET_TABLEID tableid)JET_ERR JET_API <esent.h>
JetDeleteColumn(JET_SESID sesid,JET_TABLEID tableid,const char * szColumnName)JET_ERR JET_API <esent.h>
JetDeleteColumn2(JET_SESID sesid,JET_TABLEID tableid,const char * szColumnName,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDeleteColumn2A(JET_SESID sesid,JET_TABLEID tableid,const char * szColumnName,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDeleteColumn2W(JET_SESID sesid,JET_TABLEID tableid,const WCHAR * szColumnName,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDeleteColumnA(JET_SESID sesid,JET_TABLEID tableid,const char * szColumnName)JET_ERR JET_API <esent.h>
JetDeleteColumnW(JET_SESID sesid,JET_TABLEID tableid,const WCHAR * szColumnName)JET_ERR JET_API <esent.h>
JetDeleteIndex(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName)JET_ERR JET_API <esent.h>
JetDeleteIndexA(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName)JET_ERR JET_API <esent.h>
JetDeleteIndexW(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szIndexName)JET_ERR JET_API <esent.h>
JetDeleteTable(JET_SESID sesid,JET_DBID dbid,const char * szTableName)JET_ERR JET_API <esent.h>
JetDeleteTableA(JET_SESID sesid,JET_DBID dbid,const char * szTableName)JET_ERR JET_API <esent.h>
JetDeleteTableW(JET_SESID sesid,JET_DBID dbid,const WCHAR * szTableName)JET_ERR JET_API <esent.h>
JetDetachDatabase(JET_SESID sesid,const char * szFilename)JET_ERR JET_API <esent.h>
JetDetachDatabase2(JET_SESID sesid,const char * szFilename,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDetachDatabase2A(JET_SESID sesid,const char * szFilename,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDetachDatabase2W(JET_SESID sesid,const WCHAR * szFilename,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDetachDatabaseA(JET_SESID sesid,const char * szFilename)JET_ERR JET_API <esent.h>
JetDetachDatabaseW(JET_SESID sesid,const char * szFilename)JET_ERR JET_API <esent.h>
JetDupCursor(JET_SESID sesid,JET_TABLEID tableid,JET_TABLEID * ptableid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetDupSession(JET_SESID sesid,JET_SESID * psesid)JET_ERR JET_API <esent.h>
JetEnableMultiInstance(JET_SETSYSPARAM_A * psetsysparam,unsigned __LONG32 csetsysparam,unsigned __LONG32 * pcsetsucceed)JET_ERR JET_API <esent.h>
JetEnableMultiInstanceA(JET_SETSYSPARAM_A * psetsysparam,unsigned __LONG32 csetsysparam,unsigned __LONG32 * pcsetsucceed)JET_ERR JET_API <esent.h>
JetEnableMultiInstanceW(JET_SETSYSPARAM_W * psetsysparam,unsigned __LONG32 csetsysparam,unsigned __LONG32 * pcsetsucceed)JET_ERR JET_API <esent.h>
JetEndExternalBackup(void)JET_ERR JET_API <esent.h>
JetEndExternalBackupInstance(JET_INSTANCE instance)JET_ERR JET_API <esent.h>
JetEndExternalBackupInstance2(JET_INSTANCE instance,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetEndSession(JET_SESID sesid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetEnumerateColumns(JET_SESID sesid,JET_TABLEID tableid,unsigned __LONG32 cEnumColumnId,JET_ENUMCOLUMNID * rgEnumColumnId,unsigned __LONG32 * pcEnumColumn,JET_ENUMCOLUMN ** prgEnumColumn,JET_PFNREALLOC pfnRealloc,void * pvReallocContext,unsigned __LONG32 cbDataMost,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetEscrowUpdate(JET_SESID sesid,JET_TABLEID tableid,JET_COLUMNID columnid,void * pv,unsigned __LONG32 cbMax,void * pvOld,unsigned __LONG32 cbOldMax,unsigned __LONG32 * pcbOldActual,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetExternalRestore(JET_PSTR szCheckpointFilePath,JET_PSTR szLogPath,JET_RSTMAP_A * rgrstmap,__LONG32 crstfilemap,JET_PSTR szBackupLogPath,__LONG32 genLow,__LONG32 genHigh,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetExternalRestore2(JET_PSTR szCheckpointFilePath,JET_PSTR szLogPath,JET_RSTMAP_A * rgrstmap,__LONG32 crstfilemap,JET_PSTR szBackupLogPath,JET_LOGINFO_A * pLogInfo,JET_PSTR szTargetInstanceName,JET_PSTR szTargetInstanceLogPath,JET_PSTR szTargetInstanceCheckpointPath,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetExternalRestore2A(JET_PSTR szCheckpointFilePath,JET_PSTR szLogPath,JET_RSTMAP_A * rgrstmap,__LONG32 crstfilemap,JET_PSTR szBackupLogPath,JET_LOGINFO_A * pLogInfo,JET_PSTR szTargetInstanceName,JET_PSTR szTargetInstanceLogPath,JET_PSTR szTargetInstanceCheckpointPath,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetExternalRestore2W(JET_PWSTR szCheckpointFilePath,JET_PWSTR szLogPath,JET_RSTMAP_W * rgrstmap,__LONG32 crstfilemap,JET_PWSTR szBackupLogPath,JET_LOGINFO_W * pLogInfo,JET_PWSTR szTargetInstanceName,JET_PWSTR szTargetInstanceLogPath,JET_PWSTR szTargetInstanceCheckpointPath,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetExternalRestoreA(JET_PSTR szCheckpointFilePath,JET_PSTR szLogPath,JET_RSTMAP_A * rgrstmap,__LONG32 crstfilemap,JET_PSTR szBackupLogPath,__LONG32 genLow,__LONG32 genHigh,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetExternalRestoreW(JET_PWSTR szCheckpointFilePath,JET_PWSTR szLogPath,JET_RSTMAP_W * rgrstmap,__LONG32 crstfilemap,JET_PWSTR szBackupLogPath,__LONG32 genLow,__LONG32 genHigh,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetFreeBuffer(char * pbBuf)JET_ERR JET_API <esent.h>
JetGetAttachInfo(char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetAttachInfoA(char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetAttachInfoInstance(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetAttachInfoInstanceA(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetAttachInfoInstanceW(JET_INSTANCE instance,WCHAR * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetAttachInfoW(WCHAR * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetBookmark(JET_SESID sesid,JET_TABLEID tableid,void * pvBookmark,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetColumnInfo(JET_SESID sesid,JET_DBID dbid,const char * szTableName,const char * szColumnName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetColumnInfoA(JET_SESID sesid,JET_DBID dbid,const char * szTableName,const char * szColumnName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetColumnInfoW(JET_SESID sesid,JET_DBID dbid,const WCHAR * szTableName,const WCHAR * szColumnName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetCurrentIndex(JET_SESID sesid,JET_TABLEID tableid,JET_PSTR szIndexName,unsigned __LONG32 cchIndexName)JET_ERR JET_API <esent.h>
JetGetCurrentIndexA(JET_SESID sesid,JET_TABLEID tableid,JET_PSTR szIndexName,unsigned __LONG32 cchIndexName)JET_ERR JET_API <esent.h>
JetGetCurrentIndexW(JET_SESID sesid,JET_TABLEID tableid,JET_PWSTR szIndexName,unsigned __LONG32 cchIndexName)JET_ERR JET_API <esent.h>
JetGetCursorInfo(JET_SESID sesid,JET_TABLEID tableid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetDatabaseFileInfo(const char * szDatabaseName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetDatabaseFileInfoA(const char * szDatabaseName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetDatabaseFileInfoW(const WCHAR * szDatabaseName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetDatabaseInfo(JET_SESID sesid,JET_DBID dbid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetDatabaseInfoA(JET_SESID sesid,JET_DBID dbid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetDatabaseInfoW(JET_SESID sesid,JET_DBID dbid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetIndexInfo(JET_SESID sesid,JET_DBID dbid,const char * szTableName,const char * szIndexName,void * pvResult,unsigned __LONG32 cbResult,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetIndexInfoA(JET_SESID sesid,JET_DBID dbid,const char * szTableName,const char * szIndexName,void * pvResult,unsigned __LONG32 cbResult,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetIndexInfoW(JET_SESID sesid,JET_DBID dbid,const WCHAR * szTableName,const WCHAR * szIndexName,void * pvResult,unsigned __LONG32 cbResult,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetInstanceInfo(unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_A ** paInstanceInfo)JET_ERR JET_API <esent.h>
JetGetInstanceInfoA(unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_A ** paInstanceInfo)JET_ERR JET_API <esent.h>
JetGetInstanceInfoW(unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_W ** paInstanceInfo)JET_ERR JET_API <esent.h>
JetGetInstanceMiscInfo(JET_INSTANCE instance,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetLock(JET_SESID sesid,JET_TABLEID tableid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetGetLogInfo(char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetLogInfoA(char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetLogInfoInstance(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetLogInfoInstance2(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual,JET_LOGINFO_A * pLogInfo)JET_ERR JET_API <esent.h>
JetGetLogInfoInstance2A(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual,JET_LOGINFO_A * pLogInfo)JET_ERR JET_API <esent.h>
JetGetLogInfoInstance2W(JET_INSTANCE instance,WCHAR * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual,JET_LOGINFO_W * pLogInfo)JET_ERR JET_API <esent.h>
JetGetLogInfoInstanceA(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetLogInfoInstanceW(JET_INSTANCE instance,WCHAR * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetLogInfoW(WCHAR * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetLS(JET_SESID sesid,JET_TABLEID tableid,JET_LS * pls,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetGetObjectInfo(JET_SESID sesid,JET_DBID dbid,JET_OBJTYP objtyp,const char * szContainerName,const char * szObjectName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetObjectInfoA(JET_SESID sesid,JET_DBID dbid,JET_OBJTYP objtyp,const char * szContainerName,const char * szObjectName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetObjectInfoW(JET_SESID sesid,JET_DBID dbid,JET_OBJTYP objtyp,const WCHAR * szContainerName,const WCHAR * szObjectName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetRecordPosition(JET_SESID sesid,JET_TABLEID tableid,JET_RECPOS * precpos,unsigned __LONG32 cbRecpos)JET_ERR JET_API <esent.h>
JetGetRecordSize(JET_SESID sesid,JET_TABLEID tableid,JET_RECSIZE * precsize,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetGetSecondaryIndexBookmark(JET_SESID sesid,JET_TABLEID tableid,void * pvSecondaryKey,unsigned __LONG32 cbSecondaryKeyMax,unsigned __LONG32 * pcbSecondaryKeyActual,void * pvPrimaryBookmark,unsigned __LONG32 cbPrimaryBookmarkMax,unsigned __LONG32 * pcbPrimaryKeyActual,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetGetSystemParameter(JET_INSTANCE instance,JET_SESID sesid,unsigned __LONG32 paramid,JET_API_PTR * plParam,JET_PSTR szParam,unsigned __LONG32 cbMax)JET_ERR JET_API <esent.h>
JetGetSystemParameterA(JET_INSTANCE instance,JET_SESID sesid,unsigned __LONG32 paramid,JET_API_PTR * plParam,JET_PSTR szParam,unsigned __LONG32 cbMax)JET_ERR JET_API <esent.h>
JetGetSystemParameterW(JET_INSTANCE instance,JET_SESID sesid,unsigned __LONG32 paramid,JET_API_PTR * plParam,JET_PWSTR szParam,unsigned __LONG32 cbMax)JET_ERR JET_API <esent.h>
JetGetTableColumnInfoA(JET_SESID sesid,JET_TABLEID tableid,const char * szColumnName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableColumnInfoW(JET_SESID sesid,JET_TABLEID tableid,const WCHAR * szColumnName,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableIndexInfo(JET_SESID sesid,JET_TABLEID tableid,const char * szIndexName,void * pvResult,unsigned __LONG32 cbResult,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableIndexInfoA(JET_SESID sesid,JET_TABLEID tableid,const char * szIndexName,void * pvResult,unsigned __LONG32 cbResult,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableIndexInfoW(JET_SESID sesid,JET_TABLEID tableid,const WCHAR * szIndexName,void * pvResult,unsigned __LONG32 cbResult,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableInfo(JET_SESID sesid,JET_TABLEID tableid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableInfoA(JET_SESID sesid,JET_TABLEID tableid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetTableInfoW(JET_SESID sesid,JET_TABLEID tableid,void * pvResult,unsigned __LONG32 cbMax,unsigned __LONG32 InfoLevel)JET_ERR JET_API <esent.h>
JetGetThreadStats(void * pvResult,unsigned __LONG32 cbMax)JET_ERR JET_API <esent.h>
JetGetTruncateLogInfoInstanceA(JET_INSTANCE instance,char * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetTruncateLogInfoInstanceW(JET_INSTANCE instance,WCHAR * szz,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetGetVersion(JET_SESID sesid,unsigned __LONG32 * pwVersion)JET_ERR JET_API <esent.h>
JetGotoBookmark(JET_SESID sesid,JET_TABLEID tableid,void * pvBookmark,unsigned __LONG32 cbBookmark)JET_ERR JET_API <esent.h>
JetGotoPosition(JET_SESID sesid,JET_TABLEID tableid,JET_RECPOS * precpos)JET_ERR JET_API <esent.h>
JetGotoSecondaryIndexBookmark(JET_SESID sesid,JET_TABLEID tableid,void * pvSecondaryKey,unsigned __LONG32 cbSecondaryKey,void * pvPrimaryBookmark,unsigned __LONG32 cbPrimaryBookmark,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetGrowDatabase(JET_SESID sesid,JET_DBID dbid,unsigned __LONG32 cpg,unsigned __LONG32 * pcpgReal)JET_ERR JET_API <esent.h>
JetIdle(JET_SESID sesid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetIndexRecordCount(JET_SESID sesid,JET_TABLEID tableid,unsigned __LONG32 * pcrec,unsigned __LONG32 crecMax)JET_ERR JET_API <esent.h>
JetInit(JET_INSTANCE * pinstance)JET_ERR JET_API <esent.h>
JetInit2(JET_INSTANCE * pinstance,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetInit3(JET_INSTANCE * pinstance,JET_RSTINFO_A * prstInfo,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetInit3A(JET_INSTANCE * pinstance,JET_RSTINFO_A * prstInfo,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetInit3W(JET_INSTANCE * pinstance,JET_RSTINFO_W * prstInfo,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetIntersectIndexes(JET_SESID sesid,JET_INDEXRANGE * rgindexrange,unsigned __LONG32 cindexrange,JET_RECORDLIST * precordlist,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetMakeKey(JET_SESID sesid,JET_TABLEID tableid,const void * pvData,unsigned __LONG32 cbData,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetMove(JET_SESID sesid,JET_TABLEID tableid,__LONG32 cRow,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOpenDatabase(JET_SESID sesid,const char * szFilename,const char * szConnect,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOpenDatabaseA(JET_SESID sesid,const char * szFilename,const char * szConnect,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOpenDatabaseW(JET_SESID sesid,const WCHAR * szFilename,const WCHAR * szConnect,JET_DBID * pdbid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOpenFile(const char * szFileName,JET_HANDLE * phfFile,unsigned __LONG32 * pulFileSizeLow,unsigned __LONG32 * pulFileSizeHigh)JET_ERR JET_API <esent.h>
JetOpenFileA(const char * szFileName,JET_HANDLE * phfFile,unsigned __LONG32 * pulFileSizeLow,unsigned __LONG32 * pulFileSizeHigh)JET_ERR JET_API <esent.h>
JetOpenFileInstance(JET_INSTANCE instance,JET_PCSTR szFileName,JET_HANDLE * phfFile,unsigned __LONG32 * pulFileSizeLow,unsigned __LONG32 * pulFileSizeHigh)JET_ERR JET_API <esent.h>
JetOpenFileInstanceA(JET_INSTANCE instance,JET_PCSTR szFileName,JET_HANDLE * phfFile,unsigned __LONG32 * pulFileSizeLow,unsigned __LONG32 * pulFileSizeHigh)JET_ERR JET_API <esent.h>
JetOpenFileInstanceW(JET_INSTANCE instance,JET_PCWSTR szFileName,JET_HANDLE * phfFile,unsigned __LONG32 * pulFileSizeLow,unsigned __LONG32 * pulFileSizeHigh)JET_ERR JET_API <esent.h>
JetOpenFileW(const WCHAR * szFileName,JET_HANDLE * phfFile,unsigned __LONG32 * pulFileSizeLow,unsigned __LONG32 * pulFileSizeHigh)JET_ERR JET_API <esent.h>
JetOpenTable(JET_SESID sesid,JET_DBID dbid,const char * szTableName,const void * pvParameters,unsigned __LONG32 cbParameters,JET_GRBIT grbit,JET_TABLEID * ptableid)JET_ERR JET_API <esent.h>
JetOpenTableA(JET_SESID sesid,JET_DBID dbid,const char * szTableName,const void * pvParameters,unsigned __LONG32 cbParameters,JET_GRBIT grbit,JET_TABLEID * ptableid)JET_ERR JET_API <esent.h>
JetOpenTableW(JET_SESID sesid,JET_DBID dbid,const WCHAR * szTableName,const void * pvParameters,unsigned __LONG32 cbParameters,JET_GRBIT grbit,JET_TABLEID * ptableid)JET_ERR JET_API <esent.h>
JetOpenTemporaryTable(JET_SESID sesid,JET_OPENTEMPORARYTABLE * popentemporarytable)JET_ERR JET_API <esent.h>
JetOpenTempTable(JET_SESID sesid,const JET_COLUMNDEF * prgcolumndef,unsigned __LONG32 ccolumn,JET_GRBIT grbit,JET_TABLEID * ptableid,JET_COLUMNID * prgcolumnid)JET_ERR JET_API <esent.h>
JetOpenTempTable2(JET_SESID sesid,const JET_COLUMNDEF * prgcolumndef,unsigned __LONG32 ccolumn,unsigned __LONG32 lcid,JET_GRBIT grbit,JET_TABLEID * ptableid,JET_COLUMNID * prgcolumnid)JET_ERR JET_API <esent.h>
JetOpenTempTable3(JET_SESID sesid,const JET_COLUMNDEF * prgcolumndef,unsigned __LONG32 ccolumn,JET_UNICODEINDEX * pidxunicode,JET_GRBIT grbit,JET_TABLEID * ptableid,JET_COLUMNID * prgcolumnid)JET_ERR JET_API <esent.h>
JetOSSnapshotAbort(const JET_OSSNAPID snapId,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotEnd(const JET_OSSNAPID snapId,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotFreeze(const JET_OSSNAPID snapId,unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_A ** paInstanceInfo,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotFreezeA(const JET_OSSNAPID snapId,unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_A ** paInstanceInfo,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotFreezeW(const JET_OSSNAPID snapId,unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_W ** paInstanceInfo,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotGetFreezeInfo(const JET_OSSNAPID snapId,unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_A ** paInstanceInfo,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotGetFreezeInfoA(const JET_OSSNAPID snapId,unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_A ** paInstanceInfo,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotGetFreezeInfoW(const JET_OSSNAPID snapId,unsigned __LONG32 * pcInstanceInfo,JET_INSTANCE_INFO_W ** paInstanceInfo,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotPrepare(JET_OSSNAPID * psnapId,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotPrepareInstance(JET_OSSNAPID snapId,JET_INSTANCE instance,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotThaw(const JET_OSSNAPID snapId,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotTruncateLog(const JET_OSSNAPID snapId,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetOSSnapshotTruncateLogInstance(const JET_OSSNAPID snapId,JET_INSTANCE instance,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetPrepareUpdate(JET_SESID sesid,JET_TABLEID tableid,unsigned __LONG32 prep)JET_ERR JET_API <esent.h>
JetReadFile(JET_HANDLE hfFile,void * pv,unsigned __LONG32 cb,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetReadFileInstance(JET_INSTANCE instance,JET_HANDLE hfFile,void * pv,unsigned __LONG32 cb,unsigned __LONG32 * pcb)JET_ERR JET_API <esent.h>
JetRegisterCallback(JET_SESID sesid,JET_TABLEID tableid,JET_CBTYP cbtyp,JET_CALLBACK pCallback,void * pvContext,JET_HANDLE * phCallbackId)JET_ERR JET_API <esent.h>
JetRenameColumnA(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szName,JET_PCSTR szNameNew,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetRenameColumnW(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szName,JET_PCWSTR szNameNew,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetRenameTableA(JET_SESID sesid,JET_DBID dbid,const char * szName,const char * szNameNew)JET_ERR JET_API <esent.h>
JetRenameTableW(JET_SESID sesid,JET_DBID dbid,const WCHAR * szName,const WCHAR * szNameNew)JET_ERR JET_API <esent.h>
JetResetSessionContext(JET_SESID sesid)JET_ERR JET_API <esent.h>
JetResetTableSequential(JET_SESID sesid,JET_TABLEID tableid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetRestore(JET_PCSTR sz,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestore2(JET_PCSTR sz,JET_PCSTR szDest,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestore2A(JET_PCSTR sz,JET_PCSTR szDest,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestore2W(JET_PCWSTR sz,JET_PCWSTR szDest,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestoreA(JET_PCSTR sz,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestoreInstance(JET_INSTANCE instance,JET_PCSTR sz,JET_PCSTR szDest,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestoreInstanceA(JET_INSTANCE instance,JET_PCSTR sz,JET_PCSTR szDest,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestoreInstanceW(JET_INSTANCE instance,JET_PCWSTR sz,JET_PCWSTR szDest,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRestoreW(JET_PCWSTR sz,JET_PFNSTATUS pfn)JET_ERR JET_API <esent.h>
JetRetrieveColumn(JET_SESID sesid,JET_TABLEID tableid,JET_COLUMNID columnid,void * pvData,unsigned __LONG32 cbData,unsigned __LONG32 * pcbActual,JET_GRBIT grbit,JET_RETINFO * pretinfo)JET_ERR JET_API <esent.h>
JetRetrieveColumns(JET_SESID sesid,JET_TABLEID tableid,JET_RETRIEVECOLUMN * pretrievecolumn,unsigned __LONG32 cretrievecolumn)JET_ERR JET_API <esent.h>
JetRetrieveKey(JET_SESID sesid,JET_TABLEID tableid,void * pvData,unsigned __LONG32 cbMax,unsigned __LONG32 * pcbActual,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetRollback(JET_SESID sesid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSeek(JET_SESID sesid,JET_TABLEID tableid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetColumn(JET_SESID sesid,JET_TABLEID tableid,JET_COLUMNID columnid,const void * pvData,unsigned __LONG32 cbData,JET_GRBIT grbit,JET_SETINFO * psetinfo)JET_ERR JET_API <esent.h>
JetSetColumnDefaultValue(JET_SESID sesid,JET_DBID dbid,JET_PCSTR szTableName,JET_PCSTR szColumnName,const void * pvData,const unsigned __LONG32 cbData,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetColumnDefaultValueA(JET_SESID sesid,JET_DBID dbid,JET_PCSTR szTableName,JET_PCSTR szColumnName,const void * pvData,const unsigned __LONG32 cbData,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetColumnDefaultValueW(JET_SESID sesid,JET_DBID dbid,JET_PCWSTR szTableName,JET_PCWSTR szColumnName,const void * pvData,const unsigned __LONG32 cbData,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetColumns(JET_SESID sesid,JET_TABLEID tableid,JET_SETCOLUMN * psetcolumn,unsigned __LONG32 csetcolumn)JET_ERR JET_API <esent.h>
JetSetCurrentIndex2A(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetCurrentIndex2W(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szIndexName,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetCurrentIndex3A(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName,JET_GRBIT grbit,unsigned __LONG32 itagSequence)JET_ERR JET_API <esent.h>
JetSetCurrentIndex3W(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szIndexName,JET_GRBIT grbit,unsigned __LONG32 itagSequence)JET_ERR JET_API <esent.h>
JetSetCurrentIndex4(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName,JET_INDEXID * pindexid,JET_GRBIT grbit,unsigned __LONG32 itagSequence)JET_ERR JET_API <esent.h>
JetSetCurrentIndex4A(JET_SESID sesid,JET_TABLEID tableid,JET_PCSTR szIndexName,JET_INDEXID * pindexid,JET_GRBIT grbit,unsigned __LONG32 itagSequence)JET_ERR JET_API <esent.h>
JetSetCurrentIndex4W(JET_SESID sesid,JET_TABLEID tableid,JET_PCWSTR szIndexName,JET_INDEXID * pindexid,JET_GRBIT grbit,unsigned __LONG32 itagSequence)JET_ERR JET_API <esent.h>
JetSetCurrentIndexA(JET_SESID sesid,JET_TABLEID tableid,const char * szIndexName)JET_ERR JET_API <esent.h>
JetSetCurrentIndexW(JET_SESID sesid,JET_TABLEID tableid,const WCHAR * szIndexName)JET_ERR JET_API <esent.h>
JetSetDatabaseSize(JET_SESID sesid,JET_PCSTR szDatabaseName,unsigned __LONG32 cpg,unsigned __LONG32 * pcpgReal)JET_ERR JET_API <esent.h>
JetSetDatabaseSizeA(JET_SESID sesid,JET_PCSTR szDatabaseName,unsigned __LONG32 cpg,unsigned __LONG32 * pcpgReal)JET_ERR JET_API <esent.h>
JetSetDatabaseSizeW(JET_SESID sesid,JET_PCWSTR szDatabaseName,unsigned __LONG32 cpg,unsigned __LONG32 * pcpgReal)JET_ERR JET_API <esent.h>
JetSetIndexRange(JET_SESID sesid,JET_TABLEID tableidSrc,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetLS(JET_SESID sesid,JET_TABLEID tableid,JET_LS ls,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetSetSessionContext(JET_SESID sesid,JET_API_PTR ulContext)JET_ERR JET_API <esent.h>
JetSetSystemParameter(JET_INSTANCE * pinstance,JET_SESID sesid,unsigned __LONG32 paramid,JET_API_PTR lParam,JET_PCSTR szParam)JET_ERR JET_API <esent.h>
JetSetSystemParameterA(JET_INSTANCE * pinstance,JET_SESID sesid,unsigned __LONG32 paramid,JET_API_PTR lParam,JET_PCSTR szParam)JET_ERR JET_API <esent.h>
JetSetSystemParameterW(JET_INSTANCE * pinstance,JET_SESID sesid,unsigned __LONG32 paramid,JET_API_PTR lParam,JET_PCWSTR szParam)JET_ERR JET_API <esent.h>
JetSetTableSequential(JET_SESID sesid,JET_TABLEID tableid,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetStopBackup(void)JET_ERR JET_API <esent.h>
JetStopBackupInstance(JET_INSTANCE instance)JET_ERR JET_API <esent.h>
JetStopService(void)JET_ERR JET_API <esent.h>
JetStopServiceInstance(JET_INSTANCE instance)JET_ERR JET_API <esent.h>
JetTerm(JET_INSTANCE instance)JET_ERR JET_API <esent.h>
JetTerm2(JET_INSTANCE instance,JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JetTruncateLog(void)JET_ERR JET_API <esent.h>
JetTruncateLogInstance(JET_INSTANCE instance)JET_ERR JET_API <esent.h>
JetUnregisterCallback(JET_SESID sesid,JET_TABLEID tableid,JET_CBTYP cbtyp,JET_HANDLE hCallbackId)JET_ERR JET_API <esent.h>
JetUpdate(JET_SESID sesid,JET_TABLEID tableid,void * pvBookmark,unsigned __LONG32 cbBookmark,unsigned __LONG32 * pcbActual)JET_ERR JET_API <esent.h>
JetUpdate2(JET_SESID sesid,JET_TABLEID tableid,void * pvBookmark,unsigned __LONG32 cbBookmark,unsigned __LONG32 * pcbActual,const JET_GRBIT grbit)JET_ERR JET_API <esent.h>
JobError(IBackgroundCopyJob * pJob,IBackgroundCopyError * pError)virtual HRESULT WINAPI <bits.h>
JobModification(IBackgroundCopyJob * pJob,DWORD dwReserved)virtual HRESULT WINAPI <bits.h>
JobTransferred(IBackgroundCopyJob * pJob)virtual HRESULT WINAPI <bits.h>
JoinTransaction(IUnknown * punkTransactionCoord,ISOLEVEL isoLevel,ULONG isoFlags,ITransactionOptions * pOtherOptions)virtual HRESULT WINAPI <oledb.h>
joyGetDevCaps(UINT_PTR uJoyID,LPJOYCAPSA pjc,UINT cbjc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joyGetDevCapsA(UINT_PTR uJoyID,LPJOYCAPSA pjc,UINT cbjc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joyGetDevCapsW(UINT_PTR uJoyID,LPJOYCAPSW pjc,UINT cbjc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joyGetNumDevs(void) WINMMAPI UINT WINAPI <mmsystem.h>
joyGetPos(UINT uJoyID,LPJOYINFO pji) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joyGetPosEx(UINT uJoyID,LPJOYINFOEX pji) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joyGetThreshold(UINT uJoyID,LPUINT puThreshold) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joyReleaseCapture(UINT uJoyID) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joySetCapture(HWND hwnd,UINT uJoyID,UINT uPeriod,WINBOOL fChanged) WINMMAPI MMRESULT WINAPI <mmsystem.h>
joySetThreshold(UINT uJoyID,UINT uThreshold) WINMMAPI MMRESULT WINAPI <mmsystem.h>
KaraokeAudioPresentationModeChange(ULONG ulMode)virtual HRESULT WINAPI <strmif.h>
KCOM_New(size_t size,POOL_TYPE pool_type,ULONG tag)<stdunk.h>
KdBreakPoint() DbgBreakPoint() DbgBreakPoint() DbgBreakPoint() DbgBreakPoint() DbgBreakPoint() DbgBreakPoint() DbgBreakPoint() DbgBreakPoint()<wdm.h>
KdBreakPoint()<wdm.h>
KdBreakPointWithStatus(s)<wdm.h>
KdChangeOption(IN KD_OPTION Option,IN ULONG InBufferBytes OPTIONAL,IN PVOID InBuffer,IN ULONG OutBufferBytes OPTIONAL,OUT PVOID OutBuffer,OUT PULONG OutBufferNeeded OPTIONAL)<wdm.h>
KdDisableDebugger(VOID)<wdm.h>
KdEnableDebugger(VOID)<wdm.h>
KdHelp32To64(PKDHELP p32,PKDHELP64 p64) static __inline void <psdk>
KdPrint(_x_)<wdm.h>
KdPrintEx(_x_)<wdm.h>
KdRefreshDebuggerNotPresent(VOID)<wdm.h>
KeAcquireGuardedMutex(IN OUT PKGUARDED_MUTEX GuardedMutex)<wdm.h>
KeAcquireGuardedMutexUnsafe(IN OUT PKGUARDED_MUTEX GuardedMutex)<wdm.h>
KeAcquireInStackQueuedSpinLock(IN OUT PKSPIN_LOCK SpinLock,OUT PKLOCK_QUEUE_HANDLE LockHandle)<wdm.h>
KeAcquireInStackQueuedSpinLockAtDpcLevel(IN OUT PKSPIN_LOCK SpinLock,OUT PKLOCK_QUEUE_HANDLE LockHandle)<wdm.h>
KeAcquireInStackQueuedSpinLockForDpc(IN OUT PKSPIN_LOCK SpinLock,OUT PKLOCK_QUEUE_HANDLE LockHandle)<wdm.h>
KeAcquireInterruptSpinLock(IN OUT PKINTERRUPT Interrupt)<wdm.h>
KeAcquireQueuedSpinLock(IN OUT KSPIN_LOCK_QUEUE_NUMBER Number)<ntifs.h>
KeAcquireSpinLock(a,b)<wdm.h>
KeAcquireSpinLock(SpinLock, OldIrql)<wdm.h>
KeAcquireSpinLockAtDpcLevel(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeAcquireSpinLockAtDpcLevel(SpinLock)<wdm.h>
KeAcquireSpinLockForDpc(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeAcquireSpinLockRaiseToDpc(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeAcquireSpinLockRaiseToSynch(IN OUT PKSPIN_LOCK SpinLock)<ntifs.h>
KeAreAllApcsDisabled(VOID)<wdm.h>
KeAreApcsDisabled(VOID)<wdm.h>
KeAttachProcess(IN OUT PKPROCESS Process)<ntifs.h>
KeBugCheck(IN ULONG BugCheckCode)<ntddk.h>
KeBugCheckEx(IN ULONG BugCheckCode,IN ULONG_PTR BugCheckParameter1,IN ULONG_PTR BugCheckParameter2,IN ULONG_PTR BugCheckParameter3,IN ULONG_PTR BugCheckParameter4)<wdm.h>
KeCancelTimer(IN OUT PKTIMER)<wdm.h>
KeClearEvent(IN OUT PRKEVENT Event)<wdm.h>
KeDelayExecutionThread(IN KPROCESSOR_MODE WaitMode,IN BOOLEAN Alertable,IN PLARGE_INTEGER Interval)<wdm.h>
KeDeregisterBugCheckCallback(IN OUT PKBUGCHECK_CALLBACK_RECORD CallbackRecord)<wdm.h>
KeDeregisterBugCheckReasonCallback(IN OUT PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord)<wdm.h>
KeDeregisterNmiCallback(IN PVOID Handle)<wdm.h>
KeDeregisterProcessorChangeCallback(IN PVOID CallbackHandle)<wdm.h>
KeDetachProcess(VOID)<ntifs.h>
KeEnterCriticalRegion(VOID)<wdm.h>
KeEnterGuardedRegion(VOID)<wdm.h>
KeExpandKernelStackAndCallout(IN PEXPAND_STACK_CALLOUT Callout,IN PVOID Parameter OPTIONAL,IN SIZE_T Size)<ntddk.h>
KefAcquireSpinLockAtDpcLevel(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeFlushIoBuffers(_Mdl, _ReadOperation, _DmaOperation)<wdm.h>
KeFlushQueuedDpcs(VOID)<wdm.h>
KeFlushWriteBuffer(VOID)<wdm.h>
KefReleaseSpinLockFromDpcLevel(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeGetCurrentIrql(VOID)<wdm.h>
KeGetCurrentNodeNumber(VOID)<wdm.h>
KeGetCurrentProcessorNumber(VOID)<wdm.h>
KeGetCurrentProcessorNumberEx(OUT PPROCESSOR_NUMBER ProcNumber OPTIONAL)<wdm.h>
KeGetCurrentThread(VOID)<wdm.h>
KeGetDcacheFillSize()<wdm.h>
KeGetPcr()<wdm.h>
KeGetPcr(VOID)<wdm.h>
KeGetProcessorIndexFromNumber(IN PPROCESSOR_NUMBER ProcNumber)<wdm.h>
KeGetProcessorNumberFromIndex(IN ULONG ProcIndex,OUT PPROCESSOR_NUMBER ProcNumber)<wdm.h>
KeGetRecommendedSharedDataAlignment(VOID)<wdm.h>
KeInitializeCallbackRecord(CallbackRecord)<wdm.h>
KeInitializeDeviceQueue(OUT PKDEVICE_QUEUE DeviceQueue)<wdm.h>
KeInitializeDpc(OUT PRKDPC Dpc,IN PKDEFERRED_ROUTINE DeferredRoutine,IN PVOID DeferredContext OPTIONAL)<wdm.h>
KeInitializeEvent(OUT PRKEVENT Event,IN EVENT_TYPE Type,IN BOOLEAN State)<wdm.h>
KeInitializeGuardedMutex(OUT PKGUARDED_MUTEX GuardedMutex)<wdm.h>
KeInitializeMutant(OUT PRKMUTANT Mutant,IN BOOLEAN InitialOwner)<ntifs.h>
KeInitializeMutex(OUT PRKMUTEX Mutex,IN ULONG Level)<wdm.h>
KeInitializeQueue(OUT PRKQUEUE Queue,IN ULONG Count)<ntifs.h>
KeInitializeSemaphore(OUT PRKSEMAPHORE Semaphore,IN LONG Count,IN LONG Limit)<wdm.h>
KeInitializeSpinLock(IN PKSPIN_LOCK SpinLock)<wdm.h>
KeInitializeThreadedDpc(OUT PRKDPC Dpc,IN PKDEFERRED_ROUTINE DeferredRoutine,IN PVOID DeferredContext OPTIONAL)<wdm.h>
KeInitializeTimer(OUT PKTIMER Timer)<wdm.h>
KeInitializeTimerEx(OUT PKTIMER Timer,IN TIMER_TYPE Type)<wdm.h>
KeInsertByKeyDeviceQueue(IN OUT PKDEVICE_QUEUE DeviceQueue,IN OUT PKDEVICE_QUEUE_ENTRY DeviceQueueEntry,IN ULONG SortKey)<wdm.h>
KeInsertDeviceQueue(IN OUT PKDEVICE_QUEUE DeviceQueue,IN OUT PKDEVICE_QUEUE_ENTRY DeviceQueueEntry)<wdm.h>
KeInsertHeadQueue(IN OUT PRKQUEUE Queue,IN OUT PLIST_ENTRY Entry)<ntifs.h>
KeInsertQueue(IN OUT PRKQUEUE Queue,IN OUT PLIST_ENTRY Entry)<ntifs.h>
KeInsertQueueDpc(IN OUT PRKDPC Dpc,IN PVOID SystemArgument1 OPTIONAL,IN PVOID SystemArgument2 OPTIONAL)<wdm.h>
KeInvalidateAllCaches(VOID)<ntddk.h>
KeInvalidateRangeAllCaches(IN PVOID BaseAddress,IN ULONG Length)<ntddk.h>
KeIpiGenericCall(IN PKIPI_BROADCAST_WORKER BroadcastFunction,IN ULONG_PTR Context)<wdm.h>
KeLeaveCriticalRegion(VOID)<wdm.h>
KeLeaveGuardedRegion(VOID)<wdm.h>
KeLowerIrql(a)<wdm.h>
KeLowerIrql(IN KIRQL NewIrql)<wdm.h>
KeMemoryBarrier(VOID)<wdm.h>
KePulseEvent(IN OUT PRKEVENT Event,IN KPRIORITY Increment,IN BOOLEAN Wait)<ntddk.h>
KeQueryActiveGroupCount(VOID)<wdm.h>
KeQueryActiveProcessorCount(OUT PKAFFINITY ActiveProcessors OPTIONAL)<wdm.h>
KeQueryActiveProcessorCountEx(IN USHORT GroupNumber)<wdm.h>
KeQueryActiveProcessors(VOID)<wdm.h>
KeQueryDpcWatchdogInformation(OUT PKDPC_WATCHDOG_INFORMATION WatchdogInformation)<wdm.h>
KeQueryGroupAffinity(IN USHORT GroupNumber)<wdm.h>
KeQueryHardwareCounterConfiguration(OUT PHARDWARE_COUNTER CounterArray,IN ULONG MaximumCount,OUT PULONG Count)<ntddk.h>
KeQueryHighestNodeNumber(VOID)<wdm.h>
KeQueryInterruptTime()<wdm.h>
KeQueryInterruptTime(VOID)<wdm.h>
KeQueryLogicalProcessorRelationship(IN PPROCESSOR_NUMBER ProcessorNumber OPTIONAL,IN LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,OUT PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Information OPTIONAL,IN OUT PULONG Length)<wdm.h>
KeQueryMaximumGroupCount(VOID)<wdm.h>
KeQueryMaximumProcessorCount(VOID)<wdm.h>
KeQueryMaximumProcessorCountEx(IN USHORT GroupNumber)<wdm.h>
KeQueryNodeActiveAffinity(IN USHORT NodeNumber,OUT PGROUP_AFFINITY Affinity OPTIONAL,OUT PUSHORT Count OPTIONAL)<wdm.h>
KeQueryNodeMaximumProcessorCount(IN USHORT NodeNumber)<wdm.h>
KeQueryOwnerMutant(IN PKMUTANT Mutant,OUT PCLIENT_ID ClientId)<ntifs.h>
KeQueryPerformanceCounter(OUT PLARGE_INTEGER PerformanceFrequency OPTIONAL)<wdm.h>
KeQueryPriorityThread(IN PRKTHREAD Thread)<wdm.h>
KeQueryRuntimeThread(IN PKTHREAD Thread,OUT PULONG UserTime)<wdm.h>
KeQuerySystemTime(CurrentCount)<wdm.h>
KeQuerySystemTime(OUT PLARGE_INTEGER CurrentTime)<wdm.h>
KeQueryTickCount(CurrentCount)<wdm.h>
KeQueryTimeIncrement(VOID)<wdm.h>
KeQueryTotalCycleTimeProcess(IN OUT PKPROCESS Process,OUT PULONG64 CycleTimeStamp)<wdm.h>
KeQueryTotalCycleTimeThread(IN OUT PKTHREAD Thread,OUT PULONG64 CycleTimeStamp)<wdm.h>
KeQueryUnbiasedInterruptTime(VOID)<wdm.h>
KeRaiseIrql(a,b)<wdm.h>
KeRaiseIrqlToDpcLevel(VOID)<wdm.h>
KeRaiseIrqlToSynchLevel(VOID)<wdm.h>
KERB_IS_MS_PRINCIPAL(_x_)<ntsecapi.h>
KeReadStateEvent(IN PRKEVENT Event)<wdm.h>
KeReadStateMutant(IN PRKMUTANT Mutant)<ntifs.h>
KeReadStateMutex(IN PRKMUTEX Mutex)<wdm.h>
KeReadStateQueue(IN PRKQUEUE Queue)<ntifs.h>
KeReadStateSemaphore(IN PRKSEMAPHORE Semaphore)<wdm.h>
KeReadStateTimer(IN PKTIMER Timer)<wdm.h>
KeRegisterBugCheckCallback(OUT PKBUGCHECK_CALLBACK_RECORD CallbackRecord,IN PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine,IN PVOID Buffer,IN ULONG Length,IN PUCHAR Component)<wdm.h>
KeRegisterBugCheckReasonCallback(OUT PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord,IN PKBUGCHECK_REASON_CALLBACK_ROUTINE CallbackRoutine,IN KBUGCHECK_CALLBACK_REASON Reason,IN PUCHAR Component)<wdm.h>
KeRegisterNmiCallback(IN PNMI_CALLBACK CallbackRoutine,IN PVOID Context OPTIONAL)<wdm.h>
KeRegisterProcessorChangeCallback(IN PPROCESSOR_CALLBACK_FUNCTION CallbackFunction,IN PVOID CallbackContext OPTIONAL,IN ULONG Flags)<wdm.h>
KeReleaseGuardedMutex(IN OUT PKGUARDED_MUTEX GuardedMutex)<wdm.h>
KeReleaseGuardedMutexUnsafe(IN OUT PKGUARDED_MUTEX GuardedMutex)<wdm.h>
KeReleaseInStackQueuedSpinLock(IN PKLOCK_QUEUE_HANDLE LockHandle)<wdm.h>
KeReleaseInStackQueuedSpinLockForDpc(IN PKLOCK_QUEUE_HANDLE LockHandle)<wdm.h>
KeReleaseInStackQueuedSpinLockFromDpcLevel(IN PKLOCK_QUEUE_HANDLE LockHandle)<wdm.h>
KeReleaseInterruptSpinLock(IN OUT PKINTERRUPT Interrupt,IN KIRQL OldIrql)<wdm.h>
KeReleaseMutant(IN OUT PRKMUTANT Mutant,IN KPRIORITY Increment,IN BOOLEAN Abandoned,IN BOOLEAN Wait)<ntifs.h>
KeReleaseMutex(IN OUT PRKMUTEX Mutex,IN BOOLEAN Wait)<wdm.h>
KeReleaseQueuedSpinLock(IN OUT KSPIN_LOCK_QUEUE_NUMBER Number,IN KIRQL OldIrql)<ntifs.h>
KeReleaseSemaphore(IN OUT PRKSEMAPHORE Semaphore,IN KPRIORITY Increment,IN LONG Adjustment,IN BOOLEAN Wait)<wdm.h>
KeReleaseSpinLock(a,b)<wdm.h>
KeReleaseSpinLock(IN OUT PKSPIN_LOCK SpinLock,IN KIRQL NewIrql)<wdm.h>
KeReleaseSpinLockForDpc(IN OUT PKSPIN_LOCK SpinLock,IN KIRQL OldIrql)<wdm.h>
KeReleaseSpinLockFromDpcLevel(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeReleaseSpinLockFromDpcLevel(SpinLock) <wdm.h>
KeRemoveByKeyDeviceQueue(IN OUT PKDEVICE_QUEUE DeviceQueue,IN ULONG SortKey)<wdm.h>
KeRemoveByKeyDeviceQueueIfBusy(IN OUT PKDEVICE_QUEUE DeviceQueue,IN ULONG SortKey)<wdm.h>
KeRemoveDeviceQueue(IN OUT PKDEVICE_QUEUE DeviceQueue)<wdm.h>
KeRemoveEntryDeviceQueue(IN OUT PKDEVICE_QUEUE DeviceQueue,IN OUT PKDEVICE_QUEUE_ENTRY DeviceQueueEntry)<wdm.h>
KeRemoveQueue(IN OUT PRKQUEUE Queue,IN KPROCESSOR_MODE WaitMode,IN PLARGE_INTEGER Timeout OPTIONAL)<ntifs.h>
KeRemoveQueueDpc(IN OUT PRKDPC Dpc)<wdm.h>
KeRemoveQueueEx(IN OUT PKQUEUE Queue,IN KPROCESSOR_MODE WaitMode,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL,OUT PLIST_ENTRY * EntryArray,IN ULONG Count)<ntifs.h>
KeResetEvent(IN OUT PRKEVENT Event)<wdm.h>
KeRestoreExtendedProcessorState(IN PXSTATE_SAVE XStateSave)<wdm.h>
KeRestoreFloatingPointState(IN PKFLOATING_SAVE FloatSave)<wdm.h>
KeRevertToUserAffinityThread(VOID)<wdm.h>
KeRevertToUserAffinityThreadEx(IN KAFFINITY Affinity)<wdm.h>
KeRevertToUserGroupAffinityThread(IN PGROUP_AFFINITY PreviousAffinity)<wdm.h>
KeRundownQueue(IN OUT PRKQUEUE Queue)<ntifs.h>
KeSaveExtendedProcessorState(IN ULONG64 Mask,OUT PXSTATE_SAVE XStateSave)<wdm.h>
KeSaveFloatingPointState(OUT PKFLOATING_SAVE FloatSave)<wdm.h>
KeSetBasePriorityThread(IN OUT PRKTHREAD Thread,IN LONG Increment)<ntddk.h>
KeSetCoalescableTimer(IN OUT PKTIMER Timer,IN LARGE_INTEGER DueTime,IN ULONG Period,IN ULONG TolerableDelay,IN PKDPC Dpc OPTIONAL)<wdm.h>
KeSetEvent(IN OUT PRKEVENT Event,IN KPRIORITY Increment,IN BOOLEAN Wait)<wdm.h>
KeSetHardwareCounterConfiguration(IN PHARDWARE_COUNTER CounterArray,IN ULONG Count)<ntddk.h>
KeSetIdealProcessorThread(IN OUT PKTHREAD Thread,IN UCHAR Processor)<ntifs.h>
KeSetImportanceDpc(IN OUT PRKDPC Dpc,IN KDPC_IMPORTANCE Importance)<wdm.h>
KeSetKernelStackSwapEnable(IN BOOLEAN Enable)<ntifs.h>
KeSetPriorityThread(IN OUT PKTHREAD Thread,IN KPRIORITY Priority)<wdm.h>
KeSetSystemAffinityThread(IN KAFFINITY Affinity)<wdm.h>
KeSetSystemAffinityThreadEx(IN KAFFINITY Affinity)<wdm.h>
KeSetSystemGroupAffinityThread(IN PGROUP_AFFINITY Affinity,OUT PGROUP_AFFINITY PreviousAffinity OPTIONAL)<wdm.h>
KeSetTargetProcessorDpc(IN OUT PRKDPC Dpc,IN CCHAR Number)<wdm.h>
KeSetTargetProcessorDpcEx(IN OUT PKDPC Dpc,IN PPROCESSOR_NUMBER ProcNumber)<wdm.h>
KeSetTimer(IN OUT PKTIMER Timer,IN LARGE_INTEGER DueTime,IN PKDPC Dpc OPTIONAL)<wdm.h>
KeSetTimerEx(IN OUT PKTIMER Timer,IN LARGE_INTEGER DueTime,IN LONG Period OPTIONAL,IN PKDPC Dpc OPTIONAL)<wdm.h>
KeStackAttachProcess(IN OUT PKPROCESS Process,OUT PKAPC_STATE ApcState)<ntifs.h>
KeStallExecutionProcessor(IN ULONG MicroSeconds)<wdm.h>
KeSynchronizeExecution(IN OUT PKINTERRUPT Interrupt,IN PKSYNCHRONIZE_ROUTINE SynchronizeRoutine,IN PVOID SynchronizeContext OPTIONAL)<wdm.h>
KeTestSpinLock(IN PKSPIN_LOCK SpinLock)<wdm.h>
KeTryToAcquireGuardedMutex(IN OUT PKGUARDED_MUTEX GuardedMutex)<wdm.h>
KeTryToAcquireQueuedSpinLock(IN KSPIN_LOCK_QUEUE_NUMBER Number,OUT PKIRQL OldIrql)<ntifs.h>
KeTryToAcquireSpinLockAtDpcLevel(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KeUnstackDetachProcess(IN PKAPC_STATE ApcState)<ntifs.h>
KeWaitForMultipleObjects(IN ULONG Count,IN PVOID Object[],IN WAIT_TYPE WaitType,IN KWAIT_REASON WaitReason,IN KPROCESSOR_MODE WaitMode,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL,OUT PKWAIT_BLOCK WaitBlockArray OPTIONAL)<wdm.h>
KeWaitForSingleObject(IN PVOID Object,IN KWAIT_REASON WaitReason,IN KPROCESSOR_MODE WaitMode,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL)<wdm.h>
keybd_event(BYTE bVk,BYTE bScan,DWORD dwFlags,ULONG_PTR dwExtraInfo) WINUSERAPI VOID WINAPI <winuser.h>
KeyExchangePhase1(void)virtual HRESULT WINAPI <iadmw.h>
KeyExchangePhase2(void)virtual HRESULT WINAPI <iadmw.h>
KfAcquireSpinLock(IN OUT PKSPIN_LOCK SpinLock)<wdm.h>
KfLowerIrql(IN KIRQL NewIrql)<wdm.h>
KfRaiseIrql(IN KIRQL NewIrql)<wdm.h>
KfReleaseSpinLock(IN OUT PKSPIN_LOCK SpinLock,IN KIRQL NewIrql)<wdm.h>
Kill(void)virtual HRESULT WINAPI <iisrsta.h>
KillTimer(HWND hWnd,UINT_PTR uIDEvent) WINUSERAPI WINBOOL WINAPI <winuser.h>
KKConvert(HWND hwndConvert,HWND hwndCaller,LPSTR lpBuf,UINT cbBuf,LPPOINT lpPnt) WINBOOL WINAPI <penwin.h>
KoCreateInstance(REFCLSID ClassId,IUnknown * UnkOuter,ULONG ClsContext,REFIID InterfaceId,PVOID * Interface)<kcom.h>
KoDeviceInitialize(PDEVICE_OBJECT DeviceObject)<kcom.h>
KoDriverInitialize(PDRIVER_OBJECT DriverObject,PUNICODE_STRING RegistryPathName,KoCreateObjectHandler CreateObjectHandler)<kcom.h>
KoRelease(REFCLSID ClassId)<kcom.h>
KS__DIBSIZE(bi)<ksmedia.h>
KS_DIBSIZE(bi)<ksmedia.h>
KS_DIBWIDTHBYTES(bi)<ksmedia.h>
KS_MPEG1_SEQUENCE_INFO(pv)<ksmedia.h>
KS_SIZE_MPEG1VIDEOINFO(pv)<ksmedia.h>
KS_SIZE_MPEGVIDEOINFO2(pv)<ksmedia.h>
KS_SIZE_VIDEOHEADER(pbmi)<ksmedia.h>
KS_WIDTHBYTES(bits)<ksmedia.h>
KsAcquireControl(PVOID Object)KSDDKAPI void NTAPI <ks.h>
KsAcquireDevice(PKSDEVICE Device)KSDDKAPI void NTAPI <ks.h>
KsAcquireDeviceSecurityLock(KSDEVICE_HEADER Header,BOOLEAN Exclusive)KSDDKAPI VOID NTAPI <ks.h>
KsAcquireResetValue(PIRP Irp,KSRESET * ResetValue)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAddDevice(PDRIVER_OBJECT DriverObject,PDEVICE_OBJECT PhysicalDeviceObject)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAddEvent(PVOID Object,PKSEVENT_ENTRY EventEntry)KSDDKAPI void NTAPI <ks.h>
KsAddIrpToCancelableQueue(PLIST_ENTRY QueueHead,PKSPIN_LOCK SpinLock,PIRP Irp,KSLIST_ENTRY_LOCATION ListLocation,PDRIVER_CANCEL DriverCancel)KSDDKAPI VOID NTAPI <ks.h>
KsAddItemToObjectBag(KSOBJECT_BAG ObjectBag,PVOID Item,PFNKSFREE Free)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAddObjectCreateItemToDeviceHeader(KSDEVICE_HEADER Header,PDRIVER_DISPATCH Create,PVOID Context,PWSTR ObjectClass,PSECURITY_DESCRIPTOR SecurityDescriptor)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAddObjectCreateItemToObjectHeader(KSOBJECT_HEADER Header,PDRIVER_DISPATCH Create,PVOID Context,PWSTR ObjectClass,PSECURITY_DESCRIPTOR SecurityDescriptor)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateDefaultClock(PKSDEFAULTCLOCK * DefaultClock)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateDefaultClockEx(PKSDEFAULTCLOCK * DefaultClock,PVOID Context,PFNKSSETTIMER SetTimer,PFNKSCANCELTIMER CancelTimer,PFNKSCORRELATEDTIME CorrelatedTime,const KSRESOLUTION * Resolution,ULONG Flags)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateDeviceHeader(KSDEVICE_HEADER * Header,ULONG ItemsCount,PKSOBJECT_CREATE_ITEM ItemsList)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateExtraData(PIRP Irp,ULONG ExtraSize,PVOID * ExtraBuffer)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateObjectBag(PKSDEVICE Device,KSOBJECT_BAG * ObjectBag)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateObjectCreateItem(KSDEVICE_HEADER Header,PKSOBJECT_CREATE_ITEM CreateItem,BOOLEAN AllocateEntry,PFNKSITEMFREECALLBACK ItemFreeCallback)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsAllocateObjectHeader(KSOBJECT_HEADER * Header,ULONG ItemsCount,PKSOBJECT_CREATE_ITEM ItemsList,PIRP Irp,const KSDISPATCH_TABLE * Table)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCacheMedium(PUNICODE_STRING SymbolicLink,PKSPIN_MEDIUM Medium,ULONG PinDirection)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCancelIo(PLIST_ENTRY QueueHead,PKSPIN_LOCK SpinLock)KSDDKAPI VOID NTAPI <ks.h>
KsCancelRoutine(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI VOID NTAPI <ks.h>
KsCompletePendingRequest(PIRP Irp)KSDDKAPI void NTAPI <ks.h>
KSCONVERT_PERFORMANCE_TIME(Frequency,PerformanceTime)<ks.h>
KsCopyObjectBagItems(KSOBJECT_BAG ObjectBagDestination,KSOBJECT_BAG ObjectBagSource)KSDDKAPI NTSTATUS NTAPI <ks.h>
KSCREATE_ITEM_IRP_STORAGE(Irp)<ks.h>
KsCreateAllocator(HANDLE ConnectionHandle,PKSALLOCATOR_FRAMING AllocatorFraming,PHANDLE AllocatorHandle)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateBusEnumObject(IN PWSTR BusIdentifier,IN PDEVICE_OBJECT BusDeviceObject,IN PDEVICE_OBJECT PhysicalDeviceObject,IN PDEVICE_OBJECT PnpDeviceObject,IN REFGUID InterfaceGuid,IN PWSTR ServiceRelativePath)<swenum.h>
KsCreateClock(HANDLE ConnectionHandle,PKSCLOCK_CREATE ClockCreate,PHANDLE ClockHandle)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateDefaultAllocator(PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateDefaultAllocatorEx(PIRP Irp,PVOID InitializeContext,PFNKSDEFAULTALLOCATE DefaultAllocate,PFNKSDEFAULTFREE DefaultFree,PFNKSINITIALIZEALLOCATOR InitializeAllocator,PFNKSDELETEALLOCATOR DeleteAllocator)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateDefaultClock(PIRP Irp,PKSDEFAULTCLOCK DefaultClock)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateDefaultSecurity(PSECURITY_DESCRIPTOR ParentSecurity,PSECURITY_DESCRIPTOR * DefaultSecurity)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateDevice(PDRIVER_OBJECT DriverObject,PDEVICE_OBJECT PhysicalDeviceObject,const KSDEVICE_DESCRIPTOR * Descriptor,ULONG ExtensionSize,PKSDEVICE * Device)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateFilterFactory(PDEVICE_OBJECT DeviceObject,const KSFILTER_DESCRIPTOR * Descriptor,PWSTR RefString,PSECURITY_DESCRIPTOR SecurityDescriptor,ULONG CreateItemFlags,PFNKSFILTERFACTORYPOWER SleepCallback,PFNKSFILTERFACTORYPOWER WakeCallback,PKSFILTERFACTORY * FilterFactory)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreatePin(HANDLE FilterHandle,PKSPIN_CONNECT Connect,ACCESS_MASK DesiredAccess,PHANDLE ConnectionHandle)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsCreateTopologyNode(HANDLE ParentHandle,PKSNODE_CREATE NodeCreate,ACCESS_MASK DesiredAccess,PHANDLE NodeHandle)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDecrementCountedWorker(PKSWORKER Worker)KSDDKAPI ULONG NTAPI <ks.h>
KsDefaultAddEventHandler(PIRP Irp,PKSEVENTDATA EventData,PKSEVENT_ENTRY EventEntry)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDefaultDeviceIoCompletion(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDefaultDispatchPnp(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDefaultDispatchPower(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDefaultForwardIrp(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDereferenceBusObject(KSDEVICE_HEADER Header)KSDDKAPI VOID NTAPI <ks.h>
KsDereferenceSoftwareBusObject(IN KSDEVICE_HEADER Header)<swenum.h>
KsDeviceGetBusData(PKSDEVICE Device,ULONG DataType,PVOID Buffer,ULONG Offset,ULONG Length)KSDDKAPI ULONG NTAPI <ks.h>
KsDeviceGetFirstChildFilterFactory(PKSDEVICE Device)__forceinline PKSFILTERFACTORY <ks.h>
KsDeviceGetOuterUnknown(PKSDEVICE Device)__forceinline PUNKNOWN <ks.h>
KsDeviceRegisterAdapterObject(PKSDEVICE Device,PADAPTER_OBJECT AdapterObject,ULONG MaxMappingsByteCount,ULONG MappingTableStride)KSDDKAPI void NTAPI <ks.h>
KsDeviceRegisterAggregatedClientUnknown(PKSDEVICE Device,PUNKNOWN ClientUnknown)__forceinline PUNKNOWN <ks.h>
KsDeviceSetBusData(PKSDEVICE Device,ULONG DataType,PVOID Buffer,ULONG Offset,ULONG Length)KSDDKAPI ULONG NTAPI <ks.h>
KsDisableEvent(PIRP Irp,PLIST_ENTRY EventsList,KSEVENTS_LOCKTYPE EventsFlags,PVOID EventsLock)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDiscardEvent(PKSEVENT_ENTRY EventEntry)KSDDKAPI VOID NTAPI <ks.h>
KsDispatchFastIoDeviceControlFailure(PFILE_OBJECT FileObject,BOOLEAN Wait,PVOID InputBuffer,ULONG InputBufferLength,PVOID OutputBuffer,ULONG OutputBufferLength,ULONG IoControlCode,PIO_STATUS_BLOCK IoStatus,PDEVICE_OBJECT DeviceObject)KSDDKAPI BOOLEAN NTAPI <ks.h>
KsDispatchFastReadFailure(PFILE_OBJECT FileObject,PLARGE_INTEGER FileOffset,ULONG Length,BOOLEAN Wait,ULONG LockKey,PVOID Buffer,PIO_STATUS_BLOCK IoStatus,PDEVICE_OBJECT DeviceObject)KSDDKAPI BOOLEAN NTAPI <ks.h>
KsDispatchInvalidDeviceRequest(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDispatchIrp(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDispatchQuerySecurity(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDispatchSetSecurity(PDEVICE_OBJECT DeviceObject,PIRP Irp)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDispatchSpecificMethod(PIRP Irp,PFNKSHANDLER Handler)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsDispatchSpecificProperty(PIRP Irp,PFNKSHANDLER Handler)KSDDKAPI NTSTATUS NTAPI <ks.h>
KSEC_CREATE_CONTEXT_LIST(KSEC_CONTEXT_TYPE Type) typedef PVOID<ntsecpkg.h>
KSEC_DEREFERENCE_LIST_ENTRY(PKSEC_LIST_ENTRY Entry,BOOLEAN * Delete) typedef VOID<ntsecpkg.h>
KSEC_INSERT_LIST_ENTRY(PVOID List,PKSEC_LIST_ENTRY Entry) typedef VOID<ntsecpkg.h>
KSEC_REFERENCE_LIST_ENTRY(PKSEC_LIST_ENTRY Entry,ULONG Signature,BOOLEAN RemoveNoRef) typedef NTSTATUS<ntsecpkg.h>
KSEC_SERIALIZE_SCHANNEL_AUTH_DATA(PVOID pvAuthData,PULONG Size,PVOID * SerializedData) typedef NTSTATUS<ntsecpkg.h>
KSEC_SERIALIZE_WINNT_AUTH_DATA(PVOID pvAuthData,PULONG Size,PVOID * SerializedData) typedef NTSTATUS<ntsecpkg.h>
KsecInitializeListEntry(Entry,SigValue)<ntsecpkg.h>
KSecRegisterSecurityProvider(PSECURITY_STRING ProviderName,PSECPKG_KERNEL_FUNCTION_TABLE Table) SECURITY_STATUS SEC_ENTRY <ntsecpkg.h>
KsEnableEvent(PIRP Irp,ULONG EventSetsCount,const KSEVENT_SET * EventSet,PLIST_ENTRY EventsList,KSEVENTS_LOCKTYPE EventsFlags,PVOID EventsLock)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsEnableEventWithAllocator(PIRP Irp,ULONG EventSetsCount,const KSEVENT_SET * EventSet,PLIST_ENTRY EventsList,KSEVENTS_LOCKTYPE EventsFlags,PVOID EventsLock,PFNKSALLOCATOR Allocator,ULONG EventItemSize)KSDDKAPI NTSTATUS NTAPI <ks.h>
KSEVENT_ENTRY_IRP_STORAGE(Irp)<ks.h>
KSEVENT_ITEM_IRP_STORAGE(Irp)<ks.h>
KSEVENT_SET_IRP_STORAGE(Irp)<ks.h>
KsFastMethodHandler(PFILE_OBJECT FileObject,PKSMETHOD Method,ULONG MethodLength,PVOID Data,ULONG DataLength,PIO_STATUS_BLOCK IoStatus,ULONG MethodSetsCount,const KSMETHOD_SET * MethodSet)KSDDKAPI BOOLEAN NTAPI <ks.h>
KsFastPropertyHandler(PFILE_OBJECT FileObject,PKSPROPERTY Property,ULONG PropertyLength,PVOID Data,ULONG DataLength,PIO_STATUS_BLOCK IoStatus,ULONG PropertySetsCount,const KSPROPERTY_SET * PropertySet)KSDDKAPI BOOLEAN NTAPI <ks.h>
KsFilterAcquireControl(PKSFILTER Filter)__forceinline void <ks.h>
KsFilterAcquireProcessingMutex(PKSFILTER Filter)KSDDKAPI void NTAPI <ks.h>
KsFilterAddEvent(PKSFILTER Filter,PKSEVENT_ENTRY EventEntry)__forceinline void <ks.h>
KsFilterAddTopologyConnections(PKSFILTER Filter,ULONG NewConnectionsCount,const KSTOPOLOGY_CONNECTION * const NewTopologyConnections)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFilterAttemptProcessing(PKSFILTER Filter,BOOLEAN Asynchronous)KSDDKAPI void NTAPI <ks.h>
KsFilterCreateNode(PKSFILTER Filter,const KSNODE_DESCRIPTOR * const NodeDescriptor,PULONG NodeID)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFilterCreatePinFactory(PKSFILTER Filter,const KSPIN_DESCRIPTOR_EX * const PinDescriptor,PULONG PinID)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFilterFactoryAddCreateItem(PKSFILTERFACTORY FilterFactory,PWSTR RefString,PSECURITY_DESCRIPTOR SecurityDescriptor,ULONG CreateItemFlags)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFilterFactoryGetDevice(PKSFILTERFACTORY FilterFactory)__forceinline PKSDEVICE <ks.h>
KsFilterFactoryGetFirstChildFilter(PKSFILTERFACTORY FilterFactory)__forceinline PKSFILTER <ks.h>
KsFilterFactoryGetNextSiblingFilterFactory(PKSFILTERFACTORY FilterFactory)__forceinline PKSFILTERFACTORY <ks.h>
KsFilterFactoryGetOuterUnknown(PKSFILTERFACTORY FilterFactory)__forceinline PUNKNOWN <ks.h>
KsFilterFactoryGetParentDevice(PKSFILTERFACTORY FilterFactory)__forceinline PKSDEVICE <ks.h>
KsFilterFactoryGetSymbolicLink(PKSFILTERFACTORY FilterFactory)KSDDKAPI PUNICODE_STRING NTAPI <ks.h>
KsFilterFactoryRegisterAggregatedClientUnknown(PKSFILTERFACTORY FilterFactory,PUNKNOWN ClientUnknown)__forceinline PUNKNOWN <ks.h>
KsFilterFactorySetDeviceClassesState(PKSFILTERFACTORY FilterFactory,BOOLEAN NewState)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFilterFactoryUpdateCacheData(PKSFILTERFACTORY FilterFactory,const KSFILTER_DESCRIPTOR * FilterDescriptor)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFilterGenerateEvents(PKSFILTER Filter,const GUID * EventSet,ULONG EventId,ULONG DataSize,PVOID Data,PFNKSGENERATEEVENTCALLBACK CallBack,PVOID CallBackContext)__forceinline void <ks.h>
KsFilterGetAndGate(PKSFILTER Filter)KSDDKAPI PKSGATE NTAPI <ks.h>
KsFilterGetChildPinCount(PKSFILTER Filter,ULONG PinId)KSDDKAPI ULONG NTAPI <ks.h>
KsFilterGetDevice(PKSFILTER Filter)__forceinline PKSDEVICE <ks.h>
KsFilterGetFirstChildPin(PKSFILTER Filter,ULONG PinId)KSDDKAPI PKSPIN NTAPI <ks.h>
KsFilterGetNextSiblingFilter(PKSFILTER Filter)__forceinline PKSFILTER <ks.h>
KsFilterGetOuterUnknown(PKSFILTER Filter)__forceinline PUNKNOWN <ks.h>
KsFilterGetParentFilterFactory(PKSFILTER Filter)__forceinline PKSFILTERFACTORY <ks.h>
KsFilterRegisterAggregatedClientUnknown(PKSFILTER Filter,PUNKNOWN ClientUnknown)__forceinline PUNKNOWN <ks.h>
KsFilterRegisterPowerCallbacks(PKSFILTER Filter,PFNKSFILTERPOWER Sleep,PFNKSFILTERPOWER Wake)KSDDKAPI void NTAPI <ks.h>
KsFilterReleaseControl(PKSFILTER Filter)__forceinline void <ks.h>
KsFilterReleaseProcessingMutex(PKSFILTER Filter)KSDDKAPI void NTAPI <ks.h>
KsForwardAndCatchIrp(PDEVICE_OBJECT DeviceObject,PIRP Irp,PFILE_OBJECT FileObject,KSSTACK_USE StackUse)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsForwardIrp(PIRP Irp,PFILE_OBJECT FileObject,BOOLEAN ReuseStackLocation)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFreeDefaultClock(PKSDEFAULTCLOCK DefaultClock)KSDDKAPI VOID NTAPI <ks.h>
KsFreeDeviceHeader(KSDEVICE_HEADER Header)KSDDKAPI VOID NTAPI <ks.h>
KsFreeEventList(PFILE_OBJECT FileObject,PLIST_ENTRY EventsList,KSEVENTS_LOCKTYPE EventsFlags,PVOID EventsLock)KSDDKAPI VOID NTAPI <ks.h>
KsFreeObjectBag(KSOBJECT_BAG ObjectBag)KSDDKAPI void NTAPI <ks.h>
KsFreeObjectCreateItem(KSDEVICE_HEADER Header,PUNICODE_STRING CreateItem)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFreeObjectCreateItemsByContext(KSDEVICE_HEADER Header,PVOID Context)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsFreeObjectHeader(KSOBJECT_HEADER Header)KSDDKAPI VOID NTAPI <ks.h>
KsGateAddOffInputToAnd(PKSGATE AndGate)__forceinline void <ks.h>
KsGateAddOffInputToOr(PKSGATE OrGate)__forceinline void <ks.h>
KsGateAddOnInputToAnd(PKSGATE AndGate)__forceinline void <ks.h>
KsGateAddOnInputToOr(PKSGATE OrGate)__forceinline void <ks.h>
KsGateCaptureThreshold(PKSGATE Gate)__forceinline BOOLEAN <ks.h>
KsGateGetStateUnsafe(PKSGATE Gate)__forceinline BOOLEAN <ks.h>
KsGateInitialize(PKSGATE Gate,LONG InitialCount,PKSGATE NextGate,BOOLEAN StateToPropagate)__forceinline void <ks.h>
KsGateInitializeAnd(PKSGATE AndGate,PKSGATE NextOrGate)__forceinline void <ks.h>
KsGateInitializeOr(PKSGATE OrGate,PKSGATE NextAndGate)__forceinline void <ks.h>
KsGateRemoveOffInputFromAnd(PKSGATE AndGate)__forceinline void <ks.h>
KsGateRemoveOffInputFromOr(PKSGATE OrGate)__forceinline void <ks.h>
KsGateRemoveOnInputFromAnd(PKSGATE AndGate)__forceinline void <ks.h>
KsGateRemoveOnInputFromOr(PKSGATE OrGate)__forceinline void <ks.h>
KsGateTerminateAnd(PKSGATE AndGate)__forceinline void <ks.h>
KsGateTerminateOr(PKSGATE OrGate)__forceinline void <ks.h>
KsGateTurnInputOff(PKSGATE Gate)__forceinline void <ks.h>
KsGateTurnInputOn(PKSGATE Gate)__forceinline void <ks.h>
KsGenerateDataEvent(PKSEVENT_ENTRY EventEntry,ULONG DataSize,PVOID Data)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsGenerateEvent(PKSEVENT_ENTRY EventEntry)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsGenerateEventList(GUID * Set,ULONG EventId,PLIST_ENTRY EventsList,KSEVENTS_LOCKTYPE EventsFlags,PVOID EventsLock)KSDDKAPI VOID NTAPI <ks.h>
KsGenerateEvents(PVOID Object,const GUID * EventSet,ULONG EventId,ULONG DataSize,PVOID Data,PFNKSGENERATEEVENTCALLBACK CallBack,PVOID CallBackContext)KSDDKAPI void NTAPI <ks.h>
KsGetBusEnumIdentifier(IN OUT PIRP Irp)<swenum.h>
KsGetBusEnumParentFDOFromChildPDO(IN PDEVICE_OBJECT DeviceObject,OUT PDEVICE_OBJECT * FunctionalDeviceObject)<swenum.h>
KsGetBusEnumPnpDeviceObject(IN PDEVICE_OBJECT DeviceObject,OUT PDEVICE_OBJECT * PnpDeviceObject)<swenum.h>
KsGetDefaultClockState(PKSDEFAULTCLOCK DefaultClock)KSDDKAPI KSSTATE NTAPI <ks.h>
KsGetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock)KSDDKAPI LONGLONG NTAPI <ks.h>
KsGetDevice(PVOID Object)KSDDKAPI PKSDEVICE NTAPI <ks.h>
KsGetDeviceForDeviceObject(PDEVICE_OBJECT FunctionalDeviceObject)KSDDKAPI PKSDEVICE NTAPI <ks.h>
KsGetFilterFromFileObject(PFILE_OBJECT FileObject)__forceinline PKSFILTER <ks.h>
KsGetFilterFromIrp(PIRP Irp)KSDDKAPI PKSFILTER NTAPI <ks.h>
KsGetFirstChild(PVOID Object)KSDDKAPI PVOID NTAPI <ks.h>
KsGetImageNameAndResourceId(HANDLE RegKey,PUNICODE_STRING ImageName,PULONG_PTR ResourceId,PULONG ValueType)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsGetMediaType(int Position,AM_MEDIA_TYPE * AmMediaType,HANDLE FilterHandle,ULONG PinFactoryId)KSDDKAPI HRESULT WINAPI <ksproxy.h>
KsGetMediaTypeCount(HANDLE FilterHandle,ULONG PinFactoryId,ULONG * MediaTypeCount)KSDDKAPI HRESULT WINAPI <ksproxy.h>
KsGetMultiplePinFactoryItems(HANDLE FilterHandle,ULONG PinFactoryId,ULONG PropertyId,PVOID * Items)KSDDKAPI HRESULT WINAPI <ksproxy.h>
KsGetNextSibling(PVOID Object)KSDDKAPI PVOID NTAPI <ks.h>
KsGetNodeIdFromIrp(PIRP Irp)KSDDKAPI ULONG NTAPI <ks.h>
KsGetObjectFromFileObject(PFILE_OBJECT FileObject)KSDDKAPI PVOID NTAPI <ks.h>
KsGetObjectTypeFromFileObject(PFILE_OBJECT FileObject)KSDDKAPI KSOBJECTTYPE NTAPI <ks.h>
KsGetObjectTypeFromIrp(PIRP Irp)KSDDKAPI KSOBJECTTYPE NTAPI <ks.h>
KsGetOuterUnknown(PVOID Object)KSDDKAPI PUNKNOWN NTAPI <ks.h>
KsGetParent(PVOID Object)KSDDKAPI PVOID NTAPI <ks.h>
KsGetPinFromFileObject(PFILE_OBJECT FileObject)__forceinline PKSPIN <ks.h>
KsGetPinFromIrp(PIRP Irp)KSDDKAPI PKSPIN NTAPI <ks.h>
KsHandleSizedListQuery(PIRP Irp,ULONG DataItemsCount,ULONG DataItemSize,const VOID * DataItems)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsIncrementCountedWorker(PKSWORKER Worker)KSDDKAPI ULONG NTAPI <ks.h>
KsInitializeDevice(PDEVICE_OBJECT FunctionalDeviceObject,PDEVICE_OBJECT PhysicalDeviceObject,PDEVICE_OBJECT NextDeviceObject,const KSDEVICE_DESCRIPTOR * Descriptor)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsInitializeDriver(PDRIVER_OBJECT DriverObject,PUNICODE_STRING RegistryPathName,const KSDEVICE_DESCRIPTOR * Descriptor)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsInstallBusEnumInterface(IN PIRP Irp)<swenum.h>
KsIsBusEnumChildDevice(IN PDEVICE_OBJECT DeviceObject,OUT PBOOLEAN ChildDevice)<swenum.h>
KsLoadResource(PVOID ImageBase,POOL_TYPE PoolType,ULONG_PTR ResourceName,ULONG ResourceType,PVOID * Resource,PULONG ResourceSize)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsMapModuleName(PDEVICE_OBJECT PhysicalDeviceObject,PUNICODE_STRING ModuleName,PUNICODE_STRING ImageName,PULONG_PTR ResourceId,PULONG ValueType)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsMergeAutomationTables(PKSAUTOMATION_TABLE * AutomationTableAB,PKSAUTOMATION_TABLE AutomationTableA,PKSAUTOMATION_TABLE AutomationTableB,KSOBJECT_BAG Bag)KSDDKAPI NTSTATUS NTAPI <ks.h>
KSMETHOD_ITEM_IRP_STORAGE(Irp)<ks.h>
KSMETHOD_SET_IRP_STORAGE(Irp)<ks.h>
KSMETHOD_TYPE_IRP_STORAGE(Irp)<ks.h>
KsMethodHandler(PIRP Irp,ULONG MethodSetsCount,const KSMETHOD_SET * MethodSet)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsMethodHandlerWithAllocator(PIRP Irp,ULONG MethodSetsCount,const KSMETHOD_SET * MethodSet,PFNKSALLOCATOR Allocator,ULONG MethodItemSize)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsMoveIrpsOnCancelableQueue(PLIST_ENTRY SourceList,PKSPIN_LOCK SourceLock,PLIST_ENTRY DestinationList,PKSPIN_LOCK DestinationLock,KSLIST_ENTRY_LOCATION ListLocation,PFNKSIRPLISTCALLBACK ListCallback,PVOID Context)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsNullDriverUnload(PDRIVER_OBJECT DriverObject)KSDDKAPI VOID NTAPI <ks.h>
KsOpenDefaultDevice(REFGUID Category,ACCESS_MASK Access,PHANDLE DeviceHandle)KSDDKAPI HRESULT WINAPI <ksproxy.h>
KspCompleteTokenFn(LSA_SEC_HANDLE ContextId,PSecBufferDesc Token) typedef NTSTATUS<ntsecpkg.h>
KspDeleteContextFn(LSA_SEC_HANDLE ContextId,PLSA_SEC_HANDLE LsaContextId) typedef NTSTATUS<ntsecpkg.h>
KspGetTokenFn(LSA_SEC_HANDLE ContextId,PHANDLE ImpersonationToken,PACCESS_TOKEN * RawToken) typedef NTSTATUS<ntsecpkg.h>
KsPinAcquireControl(PKSPIN Pin)__forceinline void <ks.h>
KsPinAcquireProcessingMutex(PKSPIN Pin)KSDDKAPI void NTAPI <ks.h>
KsPinAddEvent(PKSPIN Pin,PKSEVENT_ENTRY EventEntry)__forceinline void <ks.h>
KsPinAttachAndGate(PKSPIN Pin,PKSGATE AndGate)KSDDKAPI void NTAPI <ks.h>
KsPinAttachOrGate(PKSPIN Pin,PKSGATE OrGate)KSDDKAPI void NTAPI <ks.h>
KsPinAttemptProcessing(PKSPIN Pin,BOOLEAN Asynchronous)KSDDKAPI void NTAPI <ks.h>
KsPinDataIntersection(PIRP Irp,PKSP_PIN Pin,PVOID Data,ULONG DescriptorsCount,const KSPIN_DESCRIPTOR * Descriptor,PFNKSINTERSECTHANDLER IntersectHandler)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinDataIntersectionEx(PIRP Irp,PKSP_PIN Pin,PVOID Data,ULONG DescriptorsCount,const KSPIN_DESCRIPTOR * Descriptor,ULONG DescriptorSize,PFNKSINTERSECTHANDLEREX IntersectHandler,PVOID HandlerContext)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinGenerateEvents(PKSPIN Pin,const GUID * EventSet,ULONG EventId,ULONG DataSize,PVOID Data,PFNKSGENERATEEVENTCALLBACK CallBack,PVOID CallBackContext)__forceinline void <ks.h>
KsPinGetAndGate(PKSPIN Pin)KSDDKAPI PKSGATE NTAPI <ks.h>
KsPinGetAvailableByteCount(PKSPIN Pin,PLONG InputDataBytes,PLONG OutputBufferBytes)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinGetConnectedFilterInterface(PKSPIN Pin,const GUID * InterfaceId,PVOID * Interface)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinGetConnectedPinDeviceObject(PKSPIN Pin)KSDDKAPI PDEVICE_OBJECT NTAPI <ks.h>
KsPinGetConnectedPinFileObject(PKSPIN Pin)KSDDKAPI PFILE_OBJECT NTAPI <ks.h>
KsPinGetConnectedPinInterface(PKSPIN Pin,const GUID * InterfaceId,PVOID * Interface)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinGetCopyRelationships(PKSPIN Pin,PKSPIN * CopySource,PKSPIN * DelegateBranch)KSDDKAPI void NTAPI <ks.h>
KsPinGetDevice(PKSPIN Pin)__forceinline PKSDEVICE <ks.h>
KsPinGetFirstCloneStreamPointer(PKSPIN Pin)KSDDKAPI PKSSTREAM_POINTER NTAPI <ks.h>
KsPinGetLeadingEdgeStreamPointer(PKSPIN Pin,KSSTREAM_POINTER_STATE State)KSDDKAPI PKSSTREAM_POINTER NTAPI <ks.h>
KsPinGetNextSiblingPin(PKSPIN Pin)KSDDKAPI PKSPIN NTAPI <ks.h>
KsPinGetOuterUnknown(PKSPIN Pin)__forceinline PUNKNOWN <ks.h>
KsPinGetParentFilter(PKSPIN Pin)KSDDKAPI PKSFILTER NTAPI <ks.h>
KsPinGetReferenceClockInterface(PKSPIN Pin,PIKSREFERENCECLOCK * Interface)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinGetTrailingEdgeStreamPointer(PKSPIN Pin,KSSTREAM_POINTER_STATE State)KSDDKAPI PKSSTREAM_POINTER NTAPI <ks.h>
KsPinHandshake(PKSPIN Pin,PKSHANDSHAKE In,PKSHANDSHAKE Out)KSDDKAPI NTSTATUS NTAPI <ks.h>
KspInitContextFn(LSA_SEC_HANDLE ContextId,PSecBuffer ContextData,PLSA_SEC_HANDLE NewContextId) typedef NTSTATUS<ntsecpkg.h>
KspInitPackageFn(PSECPKG_KERNEL_FUNCTIONS FunctionTable) typedef NTSTATUS<ntsecpkg.h>
KsPinPropertyHandler(PIRP Irp,PKSPROPERTY Property,PVOID Data,ULONG DescriptorsCount,const KSPIN_DESCRIPTOR * Descriptor)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinRegisterAggregatedClientUnknown(PKSPIN Pin,PUNKNOWN ClientUnknown)__forceinline PUNKNOWN <ks.h>
KsPinRegisterFrameReturnCallback(PKSPIN Pin,PFNKSPINFRAMERETURN FrameReturn)KSDDKAPI void NTAPI <ks.h>
KsPinRegisterHandshakeCallback(PKSPIN Pin,PFNKSPINHANDSHAKE Handshake)KSDDKAPI void NTAPI <ks.h>
KsPinRegisterIrpCompletionCallback(PKSPIN Pin,PFNKSPINIRPCOMPLETION IrpCompletion)KSDDKAPI void NTAPI <ks.h>
KsPinRegisterPowerCallbacks(PKSPIN Pin,PFNKSPINPOWER Sleep,PFNKSPINPOWER Wake)KSDDKAPI void NTAPI <ks.h>
KsPinReleaseControl(PKSPIN Pin)__forceinline void <ks.h>
KsPinReleaseProcessingMutex(PKSPIN Pin)KSDDKAPI void NTAPI <ks.h>
KsPinSetPinClockTime(PKSPIN Pin,LONGLONG Time)KSDDKAPI VOID NTAPI <ks.h>
KsPinSubmitFrame(PKSPIN Pin,PVOID Data,ULONG Size,PKSSTREAM_HEADER StreamHeader,PVOID Context)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPinSubmitFrameMdl(PKSPIN Pin,PMDL Mdl,PKSSTREAM_HEADER StreamHeader,PVOID Context)KSDDKAPI NTSTATUS NTAPI <ks.h>
KspMakeSignatureFn(LSA_SEC_HANDLE ContextId,ULONG fQOP,PSecBufferDesc Message,ULONG MessageSeqNo) typedef NTSTATUS<ntsecpkg.h>
KspMapHandleFn(LSA_SEC_HANDLE ContextId,PLSA_SEC_HANDLE LsaContextId) typedef NTSTATUS<ntsecpkg.h>
KspQueryAttributesFn(LSA_SEC_HANDLE ContextId,ULONG Attribute,PVOID Buffer) typedef NTSTATUS<ntsecpkg.h>
KsProbeStreamIrp(PIRP Irp,ULONG ProbeFlags,ULONG HeaderSize)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsProcessPinUpdate(PKSPROCESSPIN ProcessPin)KSDDKAPI BOOLEAN NTAPI <ks.h>
KSPROPERTY_ATTRIBUTES_IRP_STORAGE(Irp)<ks.h>
KSPROPERTY_ITEM_IRP_STORAGE(Irp)<ks.h>
KSPROPERTY_SET_IRP_STORAGE(Irp)<ks.h>
KsPropertyHandler(PIRP Irp,ULONG PropertySetsCount,const KSPROPERTY_SET * PropertySet)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsPropertyHandlerWithAllocator(PIRP Irp,ULONG PropertySetsCount,const KSPROPERTY_SET * PropertySet,PFNKSALLOCATOR Allocator,ULONG PropertyItemSize)KSDDKAPI NTSTATUS NTAPI <ks.h>
KspSealMessageFn(LSA_SEC_HANDLE ContextId,ULONG fQOP,PSecBufferDesc Message,ULONG MessageSeqNo) typedef NTSTATUS<ntsecpkg.h>
KspSerializeAuthDataFn(PVOID pvAuthData,PULONG Size,PVOID * SerializedData) typedef NTSTATUS<ntsecpkg.h>
KspSetPagingModeFn(BOOLEAN PagingMode) typedef NTSTATUS<ntsecpkg.h>
KspUnsealMessageFn(LSA_SEC_HANDLE ContextId,PSecBufferDesc Message,ULONG MessageSeqNo,PULONG pfQOP) typedef NTSTATUS<ntsecpkg.h>
KspVerifySignatureFn(LSA_SEC_HANDLE ContextId,PSecBufferDesc Message,ULONG MessageSeqNo,PULONG pfQOP) typedef NTSTATUS<ntsecpkg.h>
KsQueryDevicePnpObject(KSDEVICE_HEADER Header)KSDDKAPI PDEVICE_OBJECT NTAPI <ks.h>
KsQueryInformationFile(PFILE_OBJECT FileObject,PVOID FileInformation,ULONG Length,FILE_INFORMATION_CLASS FileInformationClass)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsQueryObjectAccessMask(KSOBJECT_HEADER Header)KSDDKAPI ACCESS_MASK NTAPI <ks.h>
KsQueryObjectCreateItem(KSOBJECT_HEADER Header)KSDDKAPI PKSOBJECT_CREATE_ITEM NTAPI <ks.h>
KsQuerySoftwareBusInterface(IN PDEVICE_OBJECT PnpDeviceObject,OUT PBUS_INTERFACE_SWENUM BusInterface)<swenum.h>
KSQUEUE_SPINLOCK_IRP_STORAGE(Irp)<ks.h>
KsQueueWorkItem(PKSWORKER Worker,PWORK_QUEUE_ITEM WorkItem)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsReadFile(PFILE_OBJECT FileObject,PKEVENT Event,PVOID PortContext,PIO_STATUS_BLOCK IoStatusBlock,PVOID Buffer,ULONG Length,ULONG Key,KPROCESSOR_MODE RequestorMode)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsRecalculateStackDepth(KSDEVICE_HEADER Header,BOOLEAN ReuseStackLocation)KSDDKAPI VOID NTAPI <ks.h>
KsReferenceBusObject(KSDEVICE_HEADER Header)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsReferenceSoftwareBusObject(IN KSDEVICE_HEADER Header)<swenum.h>
KsRegisterAggregatedClientUnknown(PVOID Object,PUNKNOWN ClientUnknown)KSDDKAPI PUNKNOWN NTAPI <ks.h>
KsRegisterCountedWorker(WORK_QUEUE_TYPE WorkQueueType,PWORK_QUEUE_ITEM CountedWorkItem,PKSWORKER * Worker)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsRegisterFilterWithNoKSPins(PDEVICE_OBJECT DeviceObject,const GUID * InterfaceClassGUID,ULONG PinCount,WINBOOL * PinDirection,KSPIN_MEDIUM * MediumList,GUID * CategoryList)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsRegisterWorker(WORK_QUEUE_TYPE WorkQueueType,PKSWORKER * Worker)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsReleaseControl(PVOID Object)KSDDKAPI void NTAPI <ks.h>
KsReleaseDevice(PKSDEVICE Device)KSDDKAPI void NTAPI <ks.h>
KsReleaseDeviceSecurityLock(KSDEVICE_HEADER Header)KSDDKAPI VOID NTAPI <ks.h>
KsReleaseIrpOnCancelableQueue(PIRP Irp,PDRIVER_CANCEL DriverCancel)KSDDKAPI VOID NTAPI <ks.h>
KsRemoveBusEnumInterface(IN PIRP Irp)<swenum.h>
KsRemoveIrpFromCancelableQueue(PLIST_ENTRY QueueHead,PKSPIN_LOCK SpinLock,KSLIST_ENTRY_LOCATION ListLocation,KSIRP_REMOVAL_OPERATION RemovalOperation)KSDDKAPI PIRP NTAPI <ks.h>
KsRemoveItemFromObjectBag(KSOBJECT_BAG ObjectBag,PVOID Item,BOOLEAN Free)KSDDKAPI ULONG NTAPI <ks.h>
KsRemoveSpecificIrpFromCancelableQueue(PIRP Irp)KSDDKAPI VOID NTAPI <ks.h>
KsResolveRequiredAttributes(PKSDATARANGE DataRange,PKSMULTIPLE_ITEM Attributes)KSDDKAPI HRESULT WINAPI <ksproxy.h>
KsServiceBusEnumCreateRequest(IN PDEVICE_OBJECT DeviceObject,IN OUT PIRP Irp)<swenum.h>
KsServiceBusEnumPnpRequest(IN PDEVICE_OBJECT DeviceObject,IN OUT PIRP Irp)<swenum.h>
KsSetDefaultClockState(PKSDEFAULTCLOCK DefaultClock,KSSTATE State)KSDDKAPI VOID NTAPI <ks.h>
KsSetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock,LONGLONG Time)KSDDKAPI VOID NTAPI <ks.h>
KsSetDevicePnpAndBaseObject(KSDEVICE_HEADER Header,PDEVICE_OBJECT PnpDeviceObject,PDEVICE_OBJECT BaseObject)KSDDKAPI VOID NTAPI <ks.h>
KsSetInformationFile(PFILE_OBJECT FileObject,PVOID FileInformation,ULONG Length,FILE_INFORMATION_CLASS FileInformationClass)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsSetMajorFunctionHandler(PDRIVER_OBJECT DriverObject,ULONG MajorFunction)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsSetPowerDispatch(KSOBJECT_HEADER Header,PFNKSCONTEXT_DISPATCH PowerDispatch,PVOID PowerContext)KSDDKAPI VOID NTAPI <ks.h>
KsSetTargetDeviceObject(KSOBJECT_HEADER Header,PDEVICE_OBJECT TargetDevice)KSDDKAPI VOID NTAPI <ks.h>
KsSetTargetState(KSOBJECT_HEADER Header,KSTARGET_STATE TargetState)KSDDKAPI VOID NTAPI <ks.h>
KsStreamIo(PFILE_OBJECT FileObject,PKEVENT Event,PVOID PortContext,PIO_COMPLETION_ROUTINE CompletionRoutine,PVOID CompletionContext,KSCOMPLETION_INVOCATION CompletionInvocationFlags,PIO_STATUS_BLOCK IoStatusBlock,PVOID StreamHeaders,ULONG Length,ULONG Flags,KPROCESSOR_MODE RequestorMode)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsStreamPointerAdvance(PKSSTREAM_POINTER StreamPointer)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsStreamPointerAdvanceOffsets(PKSSTREAM_POINTER StreamPointer,ULONG InUsed,ULONG OutUsed,BOOLEAN Eject)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsStreamPointerAdvanceOffsetsAndUnlock(PKSSTREAM_POINTER StreamPointer,ULONG InUsed,ULONG OutUsed,BOOLEAN Eject)KSDDKAPI void NTAPI <ks.h>
KsStreamPointerCancelTimeout(PKSSTREAM_POINTER StreamPointer)KSDDKAPI void NTAPI <ks.h>
KsStreamPointerClone(PKSSTREAM_POINTER StreamPointer,PFNKSSTREAMPOINTER CancelCallback,ULONG ContextSize,PKSSTREAM_POINTER * CloneStreamPointer)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsStreamPointerDelete(PKSSTREAM_POINTER StreamPointer)KSDDKAPI void NTAPI <ks.h>
KsStreamPointerGetIrp(PKSSTREAM_POINTER StreamPointer,PBOOLEAN FirstFrameInIrp,PBOOLEAN LastFrameInIrp)KSDDKAPI PIRP NTAPI <ks.h>
KsStreamPointerGetMdl(PKSSTREAM_POINTER StreamPointer)KSDDKAPI PMDL NTAPI <ks.h>
KsStreamPointerGetNextClone(PKSSTREAM_POINTER StreamPointer)KSDDKAPI PKSSTREAM_POINTER NTAPI <ks.h>
KsStreamPointerLock(PKSSTREAM_POINTER StreamPointer)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsStreamPointerScheduleTimeout(PKSSTREAM_POINTER StreamPointer,PFNKSSTREAMPOINTER Callback,ULONGLONG Interval)KSDDKAPI void NTAPI <ks.h>
KsStreamPointerSetStatusCode(PKSSTREAM_POINTER StreamPointer,NTSTATUS Status)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsStreamPointerUnlock(PKSSTREAM_POINTER StreamPointer,BOOLEAN Eject)KSDDKAPI void NTAPI <ks.h>
KsSynchronousDeviceControl(HANDLE Handle,ULONG IoControl,PVOID InBuffer,ULONG InLength,PVOID OutBuffer,ULONG OutLength,PULONG BytesReturned)KSDDKAPI HRESULT WINAPI <ksproxy.h>
KsSynchronousIoControlDevice(PFILE_OBJECT FileObject,KPROCESSOR_MODE RequestorMode,ULONG IoControl,PVOID InBuffer,ULONG InSize,PVOID OutBuffer,ULONG OutSize,PULONG BytesReturned)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsTerminateDevice(PDEVICE_OBJECT DeviceObject)KSDDKAPI void NTAPI <ks.h>
KsTopologyPropertyHandler(PIRP Irp,PKSPROPERTY Property,PVOID Data,const KSTOPOLOGY * Topology)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsUnregisterWorker(PKSWORKER Worker)KSDDKAPI VOID NTAPI <ks.h>
KsUnserializeObjectPropertiesFromRegistry(PFILE_OBJECT FileObject,HANDLE ParentKey,PUNICODE_STRING RegistryPath)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsValidateAllocatorCreateRequest(PIRP Irp,PKSALLOCATOR_FRAMING * AllocatorFraming)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsValidateAllocatorFramingEx(PKSALLOCATOR_FRAMING_EX Framing,ULONG BufferSize,const KSALLOCATOR_FRAMING_EX * PinFraming)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsValidateClockCreateRequest(PIRP Irp,PKSCLOCK_CREATE * ClockCreate)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsValidateConnectRequest(PIRP Irp,ULONG DescriptorsCount,const KSPIN_DESCRIPTOR * Descriptor,PKSPIN_CONNECT * Connect)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsValidateTopologyNodeCreateRequest(PIRP Irp,PKSTOPOLOGY Topology,PKSNODE_CREATE * NodeCreate)KSDDKAPI NTSTATUS NTAPI <ks.h>
KsWriteFile(PFILE_OBJECT FileObject,PKEVENT Event,PVOID PortContext,PIO_STATUS_BLOCK IoStatusBlock,PVOID Buffer,ULONG Length,ULONG Key,KPROCESSOR_MODE RequestorMode)KSDDKAPI NTSTATUS NTAPI <ks.h>
L_tmpnam(_P_tmpdir)))))))))<stdio.h>
LANGGROUPLOCALE_ENUMPROCA(LGRPID,LCID,LPSTR,LONG_PTR) typedef WINBOOL<winnls.h>
LANGGROUPLOCALE_ENUMPROCW(LGRPID,LCID,LPWSTR,LONG_PTR) typedef WINBOOL<winnls.h>
LANGIDFROMLCID(lcid)<winnt.h>
LANGUAGEGROUP_ENUMPROCA(LGRPID,LPSTR,LPSTR,DWORD,LONG_PTR) typedef WINBOOL<winnls.h>
LANGUAGEGROUP_ENUMPROCW(LGRPID,LPWSTR,LPWSTR,DWORD,LONG_PTR) typedef WINBOOL<winnls.h>
LastRelease(void)virtual HRESULT WINAPI <comsvcs.h>
LaunchEmail(void)virtual HRESULT WINAPI <msimcntl.h>
LaunchINFSection(HWND,HINSTANCE,PSTR,INT) INT WINAPI <advpub.h>
LAUNCHINFSECTIONEX(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow) typedef HRESULT<advpub.h>
LaunchINFSectionEx(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow) HRESULT WINAPI <advpub.h>
LaunchInstantMessage(void)virtual HRESULT WINAPI <msimcntl.h>
LaunchNetMeeting(void)virtual HRESULT WINAPI <msimcntl.h>
LAUNCHWIZARDENTRY(HWND hParentWnd,ULONG ulFlags,LPCTSTR * lppszServiceNameToAdd,ULONG cbBufferMax,LPTSTR lpszNewProfileName)typedef HRESULT<mapiwz.h>
LayerParameters(),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS layerOptions=D2D1_LAYER_OPTIONS_NONE)D2D1FORCEINLINE D2D1_LAYER_PARAMETERS <d2d1helper.h>
LayerParameters1(),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE),FLOAT opacity=1.0,ID2D1Brush * opacityBrush=NULL,D2D1_LAYER_OPTIONS1 layerOptions=D2D1_LAYER_OPTIONS1_NONE)D2D1FORCEINLINE D2D1_LAYER_PARAMETERS1 <d2d1_1helper.h>
LBItemFromPt(HWND hLB,POINT pt,WINBOOL bAutoScroll) WINCOMMCTRLAPI int WINAPI <commctrl.h>
LCID(WINAPI * GetLocale) <wtypes.h>
LCIDToLocaleName(LCID Locale,LPWSTR lpName,int cchName,DWORD dwFlags) WINBASEAPI int WINAPI <winnls.h>
LcidToRfc1766(LCID Locale,LPSTR pszRfc1766,int iMaxLength) STDAPI <mlang.h>
LcidToRfc1766A(LCID Locale,LPSTR pszRfc1766,int iMaxLength) STDAPI <mlang.h>
LcidToRfc1766W(LCID Locale,LPWSTR pszRfc1766,int nChar) STDAPI <mlang.h>
LCMapString(LCID Locale,DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest) WINBASEAPI int WINAPI <winnls.h>
LCMapStringA(LCID Locale,DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest) WINBASEAPI int WINAPI <winnls.h>
LCMapStringEx(LPCWSTR lpLocaleName,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest,LPNLSVERSIONINFO lpVersionInformation,LPVOID lpReserved,LPARAM sortHandle) WINBASEAPI int WINAPI <winnls.h>
LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest) WINBASEAPI int WINAPI <winnls.h>
ldap(ULONG))))))))))))))))) UCHAR Reserved2<winldap.h>
ldap_abandon(LDAP * ld,ULONG msgid) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add(LDAP * ld,PCHAR dn,LDAPMod * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add(LDAP * ld,PCHAR dn,LDAPModA * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_ext(LDAP * ld,const PCHAR dn,LDAPModA * attrs[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_ext_s(LDAP * ld,const PCHAR dn,LDAPModA * attrs[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_ext_sA(LDAP * ld,const PCHAR dn,LDAPModA * attrs[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_ext_sW(LDAP * ld,const PWCHAR dn,LDAPModW * attrs[],PLDAPControlW * ServerControls,PLDAPControlW * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_extA(LDAP * ld,const PCHAR dn,LDAPModA * attrs[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_extW(LDAP * ld,const PWCHAR dn,LDAPModW * attrs[],PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_s(LDAP * ld,PCHAR dn,LDAPMod * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_s(LDAP * ld,PCHAR dn,LDAPModA * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_sA(LDAP * ld,PCHAR dn,LDAPModA * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_add_sW(LDAP * ld,PWCHAR dn,LDAPModW * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_addA(LDAP * ld,PCHAR dn,LDAPModA * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_addW(LDAP * ld,PWCHAR dn,LDAPModW * attrs[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bind(LDAP * ld,const PCHAR dn,const PCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bind(LDAP * ld,PCHAR dn,PCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bind_s(LDAP * ld,const PCHAR dn,const PCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bind_s(LDAP * ld,PCHAR dn,PCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bind_sA(LDAP * ld,PCHAR dn,PCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bind_sW(LDAP * ld,PWCHAR dn,PWCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bindA(LDAP * ld,PCHAR dn,PCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_bindW(LDAP * ld,PWCHAR dn,PWCHAR cred,ULONG method) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_check_filter(LDAP * ld,PCHAR SearchFilter)<winldap.h>
ldap_check_filterA(LDAP * ld,PCHAR SearchFilter) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_check_filterW(LDAP * ld,PWCHAR SearchFilter) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_cleanup(HANDLE hInstance) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_close_extended_op(LDAP * ld,ULONG MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare(LDAP * ld,const PCHAR dn,const PCHAR attr,PCHAR value) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_ext(LDAP * ld,const PCHAR dn,const PCHAR Attr,const PCHAR Value,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_ext_s(LDAP * ld,const PCHAR dn,const PCHAR Attr,const PCHAR Value,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_ext_sA(LDAP * ld,const PCHAR dn,const PCHAR Attr,const PCHAR Value,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_ext_sW(LDAP * ld,const PWCHAR dn,const PWCHAR Attr,const PWCHAR Value,struct berval * Data,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_extA(LDAP * ld,const PCHAR dn,const PCHAR Attr,const PCHAR Value,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_extW(LDAP * ld,const PWCHAR dn,const PWCHAR Attr,const PWCHAR Value,struct berval * Data,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_s(LDAP * ld,const PCHAR dn,const PCHAR attr,PCHAR value) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_sA(LDAP * ld,const PCHAR dn,const PCHAR attr,PCHAR value) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compare_sW(LDAP * ld,const PWCHAR dn,const PWCHAR attr,PWCHAR value) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compareA(LDAP * ld,const PCHAR dn,const PCHAR attr,PCHAR value) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_compareW(LDAP * ld,const PWCHAR dn,const PWCHAR attr,PWCHAR value) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_conn_from_msg(LDAP * PrimaryConn,LDAPMessage * res) WINLDAPAPI LDAP<winldap.h>
ldap_connect(LDAP * ld,struct l_timeval * timeout) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_control_free(LDAPControlA * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_control_free(LDAPControlA * Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_control_freeA(LDAPControlA * Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_control_freeW(LDAPControlW * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_controls_free(LDAPControlA ** Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_controls_freeA(LDAPControlA ** Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_controls_freeW(LDAPControlW ** Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_count_entries(LDAP * ld,LDAPMessage * res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_count_references(LDAP * ld,LDAPMessage * res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_count_values(PCHAR * vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_count_values_len(struct berval ** vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_count_valuesA(PCHAR * vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_count_valuesW(PWCHAR * vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_page_control(PLDAP ExternalHandle,ULONG PageSize,struct berval * Cookie,UCHAR IsCritical,PLDAPControlA * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_page_controlA(PLDAP ExternalHandle,ULONG PageSize,struct berval * Cookie,UCHAR IsCritical,PLDAPControlA * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_page_controlW(PLDAP ExternalHandle,ULONG PageSize,struct berval * Cookie,UCHAR IsCritical,PLDAPControlW * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_sort_control(PLDAP ExternalHandle,PLDAPSortKeyA * SortKeys,UCHAR IsCritical,PLDAPControlA * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_sort_controlA(PLDAP ExternalHandle,PLDAPSortKeyA * SortKeys,UCHAR IsCritical,PLDAPControlA * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_sort_controlW(PLDAP ExternalHandle,PLDAPSortKeyW * SortKeys,UCHAR IsCritical,PLDAPControlW * Control) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_create_vlv_control(PLDAP ExternalHandle,PLDAPVLVInfo VlvInfo,UCHAR IsCritical,PLDAPControlA * Control)<winldap.h>
ldap_create_vlv_controlA(PLDAP ExternalHandle,PLDAPVLVInfo VlvInfo,UCHAR IsCritical,PLDAPControlA * Control) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_create_vlv_controlW(PLDAP ExternalHandle,PLDAPVLVInfo VlvInfo,UCHAR IsCritical,PLDAPControlW * Control) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_delete(LDAP * ld,const PCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete(LDAP * ld,PCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_ext(LDAP * ld,const PCHAR dn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_ext_s(LDAP * ld,const PCHAR dn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_ext_sA(LDAP * ld,const PCHAR dn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_ext_sW(LDAP * ld,const PWCHAR dn,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_extA(LDAP * ld,const PCHAR dn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_extW(LDAP * ld,const PWCHAR dn,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_s(LDAP * ld,const PCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_s(LDAP * ld,PCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_sA(LDAP * ld,const PCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_delete_sW(LDAP * ld,const PWCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_deleteA(LDAP * ld,const PCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_deleteW(LDAP * ld,const PWCHAR dn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_dn2ufn(const PCHAR dn) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_dn2ufnA(const PCHAR dn) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_dn2ufnW(const PWCHAR dn) WINLDAPAPI PWCHAR LDAPAPI <winldap.h>
ldap_encode_sort_control(PLDAP ExternalHandle,PLDAPSortKeyA * SortKeys,PLDAPControlA Control,BOOLEAN Criticality) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_encode_sort_controlA(PLDAP ExternalHandle,PLDAPSortKeyA * SortKeys,PLDAPControlA Control,BOOLEAN Criticality) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_encode_sort_controlW(PLDAP ExternalHandle,PLDAPSortKeyW * SortKeys,PLDAPControlW Control,BOOLEAN Criticality) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_err2string(ULONG err) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_err2stringA(ULONG err) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_err2stringW(ULONG err) WINLDAPAPI PWCHAR LDAPAPI <winldap.h>
ldap_escape_filter_element(PCHAR sourceFilterElement,ULONG sourceLength,PCHAR destFilterElement,ULONG destLength) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_escape_filter_elementA(PCHAR sourceFilterElement,ULONG sourceLength,PCHAR destFilterElement,ULONG destLength) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_escape_filter_elementW(PCHAR sourceFilterElement,ULONG sourceLength,PWCHAR destFilterElement,ULONG destLength) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_explode_dn(const PCHAR dn,ULONG notypes) WINLDAPAPI PCHAR<winldap.h>
ldap_explode_dnA(const PCHAR dn,ULONG notypes) WINLDAPAPI PCHAR<winldap.h>
ldap_explode_dnW(const PWCHAR dn,ULONG notypes) WINLDAPAPI PWCHAR<winldap.h>
ldap_extended_operation(LDAP * ld,const PCHAR Oid,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_extended_operation_s(LDAP * ExternalHandle,PCHAR Oid,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,PCHAR * ReturnedOid,struct berval ** ReturnedData)<winldap.h>
ldap_extended_operation_sA(LDAP * ExternalHandle,PCHAR Oid,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,PCHAR * ReturnedOid,struct berval ** ReturnedData) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_extended_operation_sW(LDAP * ExternalHandle,PWCHAR Oid,struct berval * Data,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,PWCHAR * ReturnedOid,struct berval ** ReturnedData) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_extended_operationA(LDAP * ld,const PCHAR Oid,struct berval * Data,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_extended_operationW(LDAP * ld,const PWCHAR Oid,struct berval * Data,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_first_attribute(LDAP * ld,LDAPMessage * entry,BerElement ** ptr) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_first_attributeA(LDAP * ld,LDAPMessage * entry,BerElement ** ptr) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_first_attributeW(LDAP * ld,LDAPMessage * entry,BerElement ** ptr) WINLDAPAPI PWCHAR LDAPAPI <winldap.h>
ldap_first_entry(LDAP * ld,LDAPMessage * res) WINLDAPAPI LDAPMessage<winldap.h>
ldap_first_reference(LDAP * ld,LDAPMessage * res) WINLDAPAPI LDAPMessage<winldap.h>
ldap_free_controls(LDAPControlA ** Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_free_controlsA(LDAPControlA ** Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_free_controlsW(LDAPControlW ** Controls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_get_dn(LDAP * ld,LDAPMessage * entry) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_get_dnA(LDAP * ld,LDAPMessage * entry) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_get_dnW(LDAP * ld,LDAPMessage * entry) WINLDAPAPI PWCHAR LDAPAPI <winldap.h>
ldap_get_next_page(PLDAP ExternalHandle,PLDAPSearch SearchHandle,ULONG PageSize,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_get_next_page_s(PLDAP ExternalHandle,PLDAPSearch SearchHandle,struct l_timeval * timeout,ULONG PageSize,ULONG * TotalCount,LDAPMessage ** Results) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_get_option(LDAP * ld,int option,void * outvalue) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_get_optionW(LDAP * ld,int option,void * outvalue) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_get_paged_count(PLDAP ExternalHandle,PLDAPSearch SearchBlock,ULONG * TotalCount,PLDAPMessage Results) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_get_values(LDAP * ld,LDAPMessage * entry,const PCHAR attr) WINLDAPAPI PCHAR<winldap.h>
ldap_get_values_len(LDAP * ExternalHandle,LDAPMessage * Message,const PCHAR attr) WINLDAPAPI struct berval<winldap.h>
ldap_get_values_lenA(LDAP * ExternalHandle,LDAPMessage * Message,const PCHAR attr) WINLDAPAPI struct berval<winldap.h>
ldap_get_values_lenW(LDAP * ExternalHandle,LDAPMessage * Message,const PWCHAR attr) WINLDAPAPI struct berval<winldap.h>
ldap_get_valuesA(LDAP * ld,LDAPMessage * entry,const PCHAR attr) WINLDAPAPI PCHAR<winldap.h>
ldap_get_valuesW(LDAP * ld,LDAPMessage * entry,const PWCHAR attr) WINLDAPAPI PWCHAR<winldap.h>
ldap_init(const PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_init(PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_initA(const PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_initW(const PWCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
LDAP_IS_CLDAP(ld)<winldap.h>
ldap_memfree(PCHAR Block) WINLDAPAPI VOID LDAPAPI <winldap.h>
ldap_memfreeA(PCHAR Block) WINLDAPAPI VOID LDAPAPI <winldap.h>
ldap_memfreeW(PWCHAR Block) WINLDAPAPI VOID LDAPAPI <winldap.h>
ldap_modify(LDAP * ld,PCHAR dn,LDAPModA * mods[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_ext(LDAP * ld,const PCHAR dn,LDAPModA * mods[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_ext_s(LDAP * ld,const PCHAR dn,LDAPModA * mods[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_ext_sA(LDAP * ld,const PCHAR dn,LDAPModA * mods[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_ext_sW(LDAP * ld,const PWCHAR dn,LDAPModW * mods[],PLDAPControlW * ServerControls,PLDAPControlW * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_extA(LDAP * ld,const PCHAR dn,LDAPModA * mods[],PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_extW(LDAP * ld,const PWCHAR dn,LDAPModW * mods[],PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_s(LDAP * ld,PCHAR dn,LDAPModA * mods[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_sA(LDAP * ld,PCHAR dn,LDAPModA * mods[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modify_sW(LDAP * ld,PWCHAR dn,LDAPModW * mods[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modifyA(LDAP * ld,PCHAR dn,LDAPModA * mods[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modifyW(LDAP * ld,PWCHAR dn,LDAPModW * mods[]) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn2(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName,INT DeleteOldRdn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn2_s(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName,INT DeleteOldRdn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn2_sA(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName,INT DeleteOldRdn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn2_sW(LDAP * ExternalHandle,const PWCHAR DistinguishedName,const PWCHAR NewDistinguishedName,INT DeleteOldRdn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn2A(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName,INT DeleteOldRdn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn2W(LDAP * ExternalHandle,const PWCHAR DistinguishedName,const PWCHAR NewDistinguishedName,INT DeleteOldRdn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn_s(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn_sA(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdn_sW(LDAP * ExternalHandle,const PWCHAR DistinguishedName,const PWCHAR NewDistinguishedName) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdnA(LDAP * ExternalHandle,const PCHAR DistinguishedName,const PCHAR NewDistinguishedName) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_modrdnW(LDAP * ExternalHandle,const PWCHAR DistinguishedName,const PWCHAR NewDistinguishedName) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_msgfree(LDAPMessage * res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_next_attribute(LDAP * ld,LDAPMessage * entry,BerElement * ptr) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_next_attributeA(LDAP * ld,LDAPMessage * entry,BerElement * ptr) WINLDAPAPI PCHAR LDAPAPI <winldap.h>
ldap_next_attributeW(LDAP * ld,LDAPMessage * entry,BerElement * ptr) WINLDAPAPI PWCHAR LDAPAPI <winldap.h>
ldap_next_entry(LDAP * ld,LDAPMessage * entry) WINLDAPAPI LDAPMessage<winldap.h>
ldap_next_reference(LDAP * ld,LDAPMessage * entry) WINLDAPAPI LDAPMessage<winldap.h>
ldap_open(const PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_open(PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_openA(const PCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_openW(const PWCHAR HostName,ULONG PortNumber) WINLDAPAPI LDAP<winldap.h>
ldap_parse_extended_result(LDAP * Connection,LDAPMessage * ResultMessage,PCHAR * ResultOID,struct berval ** ResultData,BOOLEAN Freeit)<winldap.h>
ldap_parse_extended_resultA(LDAP * Connection,LDAPMessage * ResultMessage,PCHAR * ResultOID,struct berval ** ResultData,BOOLEAN Freeit) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_extended_resultW(LDAP * Connection,LDAPMessage * ResultMessage,PWCHAR * ResultOID,struct berval ** ResultData,BOOLEAN Freeit) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_page_control(PLDAP ExternalHandle,PLDAPControlA * ServerControls,ULONG * TotalCount,struct berval ** Cookie) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_page_controlA(PLDAP ExternalHandle,PLDAPControlA * ServerControls,ULONG * TotalCount,struct berval ** Cookie) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_page_controlW(PLDAP ExternalHandle,PLDAPControlW * ServerControls,ULONG * TotalCount,struct berval ** Cookie) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_reference(LDAP * Connection,LDAPMessage * ResultMessage,PCHAR ** Referrals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_referenceA(LDAP * Connection,LDAPMessage * ResultMessage,PCHAR ** Referrals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_referenceW(LDAP * Connection,LDAPMessage * ResultMessage,PWCHAR ** Referrals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_result(LDAP * Connection,LDAPMessage * ResultMessage,ULONG * ReturnCode,PCHAR * MatchedDNs,PCHAR * ErrorMessage,PCHAR ** Referrals,PLDAPControlA ** ServerControls,BOOLEAN Freeit) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_resultA(LDAP * Connection,LDAPMessage * ResultMessage,ULONG * ReturnCode,PCHAR * MatchedDNs,PCHAR * ErrorMessage,PCHAR ** Referrals,PLDAPControlA ** ServerControls,BOOLEAN Freeit) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_resultW(LDAP * Connection,LDAPMessage * ResultMessage,ULONG * ReturnCode,PWCHAR * MatchedDNs,PWCHAR * ErrorMessage,PWCHAR ** Referrals,PLDAPControlW ** ServerControls,BOOLEAN Freeit) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_sort_control(PLDAP ExternalHandle,PLDAPControlA * Control,ULONG * Result,PCHAR * Attribute) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_sort_controlA(PLDAP ExternalHandle,PLDAPControlA * Control,ULONG * Result,PCHAR * Attribute) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_sort_controlW(PLDAP ExternalHandle,PLDAPControlW * Control,ULONG * Result,PWCHAR * Attribute) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_parse_vlv_control(PLDAP ExternalHandle,PLDAPControlA * Control,PULONG TargetPos,PULONG ListCount,PBERVAL * Context,PINT ErrCode)<winldap.h>
ldap_parse_vlv_controlA(PLDAP ExternalHandle,PLDAPControlA * Control,PULONG TargetPos,PULONG ListCount,PBERVAL * Context,PINT ErrCode) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_parse_vlv_controlW(PLDAP ExternalHandle,PLDAPControlW * Control,PULONG TargetPos,PULONG ListCount,PBERVAL * Context,PINT ErrCode) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_perror(LDAP * ld,const PCHAR msg) WINLDAPAPI void LDAPAPI <winldap.h>
ldap_rename_ext(LDAP * ld,const PCHAR dn,const PCHAR NewRDN,const PCHAR NewParent,INT DeleteOldRdn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_rename_ext_s(LDAP * ld,const PCHAR dn,const PCHAR NewRDN,const PCHAR NewParent,INT DeleteOldRdn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_rename_ext_sA(LDAP * ld,const PCHAR dn,const PCHAR NewRDN,const PCHAR NewParent,INT DeleteOldRdn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_rename_ext_sW(LDAP * ld,const PWCHAR dn,const PWCHAR NewRDN,const PWCHAR NewParent,INT DeleteOldRdn,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_rename_extA(LDAP * ld,const PCHAR dn,const PCHAR NewRDN,const PCHAR NewParent,INT DeleteOldRdn,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_rename_extW(LDAP * ld,const PWCHAR dn,const PWCHAR NewRDN,const PWCHAR NewParent,INT DeleteOldRdn,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_result(LDAP * ld,ULONG msgid,ULONG all,struct l_timeval * timeout,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_result2error(LDAP * ld,LDAPMessage * res,ULONG freeit) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_sasl_bind(LDAP * ExternalHandle,const PCHAR DistName,const PCHAR AuthMechanism,const BERVAL * cred,PLDAPControlA * ServerCtrls,PLDAPControlA * ClientCtrls,int * MessageNumber)<winldap.h>
ldap_sasl_bind_s(LDAP * ExternalHandle,const PCHAR DistName,const PCHAR AuthMechanism,const BERVAL * cred,PLDAPControlA * ServerCtrls,PLDAPControlA * ClientCtrls,PBERVAL * ServerData)<winldap.h>
ldap_sasl_bind_sA(LDAP * ExternalHandle,const PCHAR DistName,const PCHAR AuthMechanism,const BERVAL * cred,PLDAPControlA * ServerCtrls,PLDAPControlA * ClientCtrls,PBERVAL * ServerData) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_sasl_bind_sW(LDAP * ExternalHandle,const PWCHAR DistName,const PWCHAR AuthMechanism,const BERVAL * cred,PLDAPControlW * ServerCtrls,PLDAPControlW * ClientCtrls,PBERVAL * ServerData) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_sasl_bindA(LDAP * ExternalHandle,const PCHAR DistName,const PCHAR AuthMechanism,const BERVAL * cred,PLDAPControlA * ServerCtrls,PLDAPControlA * ClientCtrls,int * MessageNumber) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_sasl_bindW(LDAP * ExternalHandle,const PWCHAR DistName,const PWCHAR AuthMechanism,const BERVAL * cred,PLDAPControlW * ServerCtrls,PLDAPControlW * ClientCtrls,int * MessageNumber) WINLDAPAPI INT LDAPAPI <winldap.h>
ldap_search(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search(LDAP * ld,PCHAR base,ULONG scope,PCHAR filter,PCHAR attrs[],ULONG attrsonly) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_abandon_page(PLDAP ExternalHandle,PLDAPSearch SearchBlock) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_ext(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG TimeLimit,ULONG SizeLimit,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_ext(LDAP * ld,PCHAR base,ULONG scope,PCHAR filter,PCHAR attrs[],ULONG attrsonly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG TimeLimit,ULONG SizeLimit,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_ext_s(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,struct l_timeval * timeout,ULONG SizeLimit,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_ext_s(LDAP * ld,PCHAR base,ULONG scope,PCHAR filter,PCHAR attrs[],ULONG attrsonly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,struct l_timeval * timeout,ULONG SizeLimit,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_ext_sA(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,struct l_timeval * timeout,ULONG SizeLimit,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_ext_sW(LDAP * ld,const PWCHAR base,ULONG scope,const PWCHAR filter,PWCHAR attrs[],ULONG attrsonly,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,struct l_timeval * timeout,ULONG SizeLimit,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_extA(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG TimeLimit,ULONG SizeLimit,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_extW(LDAP * ld,const PWCHAR base,ULONG scope,const PWCHAR filter,PWCHAR attrs[],ULONG attrsonly,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG TimeLimit,ULONG SizeLimit,ULONG * MessageNumber) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_init_page(PLDAP ExternalHandle,const PCHAR DistinguishedName,ULONG ScopeOfSearch,const PCHAR SearchFilter,PCHAR AttributeList[],ULONG AttributesOnly,PLDAPControl * ServerControls,PLDAPControl * ClientControls,ULONG PageTimeLimit,ULONG TotalSizeLimit,PLDAPSortKey * SortKeys) WINLDAPAPI PLDAPSearch LDAPAPI <winldap.h>
ldap_search_init_page(PLDAP ExternalHandle,const PCHAR DistinguishedName,ULONG ScopeOfSearch,const PCHAR SearchFilter,PCHAR AttributeList[],ULONG AttributesOnly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG PageTimeLimit,ULONG TotalSizeLimit,PLDAPSortKeyA * SortKeys) WINLDAPAPI PLDAPSearch LDAPAPI <winldap.h>
ldap_search_init_pageA(PLDAP ExternalHandle,const PCHAR DistinguishedName,ULONG ScopeOfSearch,const PCHAR SearchFilter,PCHAR AttributeList[],ULONG AttributesOnly,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls,ULONG PageTimeLimit,ULONG TotalSizeLimit,PLDAPSortKeyA * SortKeys) WINLDAPAPI PLDAPSearch LDAPAPI <winldap.h>
ldap_search_init_pageW(PLDAP ExternalHandle,const PWCHAR DistinguishedName,ULONG ScopeOfSearch,const PWCHAR SearchFilter,PWCHAR AttributeList[],ULONG AttributesOnly,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls,ULONG PageTimeLimit,ULONG TotalSizeLimit,PLDAPSortKeyW * SortKeys) WINLDAPAPI PLDAPSearch LDAPAPI <winldap.h>
ldap_search_s(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_s(LDAP * ld,PCHAR base,ULONG scope,PCHAR filter,PCHAR attrs[],ULONG attrsonly,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_sA(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_st(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,struct l_timeval * timeout,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_st(LDAP * ld,PCHAR base,ULONG scope,PCHAR filter,PCHAR attrs[],ULONG attrsonly,struct l_timeval * timeout,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_stA(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly,struct l_timeval * timeout,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_stW(LDAP * ld,const PWCHAR base,ULONG scope,const PWCHAR filter,PWCHAR attrs[],ULONG attrsonly,struct l_timeval * timeout,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_search_sW(LDAP * ld,const PWCHAR base,ULONG scope,const PWCHAR filter,PWCHAR attrs[],ULONG attrsonly,LDAPMessage ** res) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_searchA(LDAP * ld,const PCHAR base,ULONG scope,const PCHAR filter,PCHAR attrs[],ULONG attrsonly) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_searchW(LDAP * ld,const PWCHAR base,ULONG scope,const PWCHAR filter,PWCHAR attrs[],ULONG attrsonly) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_set_dbg_flags(ULONG NewFlags) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_set_dbg_routine(DBGPRINT DebugPrintRoutine) WINLDAPAPI VOID LDAPAPI <winldap.h>
ldap_set_option(LDAP * ld,int option,const void * invalue) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_set_optionW(LDAP * ld,int option,const void * invalue) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bind(LDAP * ld,const PCHAR dn,const PCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bind(LDAP * ld,PCHAR dn,PCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bind_s(LDAP * ld,const PCHAR dn,const PCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bind_s(LDAP * ld,PCHAR dn,PCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bind_sA(LDAP * ld,PCHAR dn,PCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bind_sW(LDAP * ld,PWCHAR dn,PWCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bindA(LDAP * ld,PCHAR dn,PCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_simple_bindW(LDAP * ld,PWCHAR dn,PWCHAR passwd) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_sslinit(PCHAR HostName,ULONG PortNumber,int secure) WINLDAPAPI LDAP<winldap.h>
ldap_sslinitA(PCHAR HostName,ULONG PortNumber,int secure) WINLDAPAPI LDAP<winldap.h>
ldap_sslinitW(PWCHAR HostName,ULONG PortNumber,int secure) WINLDAPAPI LDAP<winldap.h>
ldap_start_tls_s(PLDAP ExternalHandle,PULONG ServerReturnValue,LDAPMessage ** result,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls)<winldap.h>
ldap_start_tls_sA(PLDAP ExternalHandle,PULONG ServerReturnValue,LDAPMessage ** result,PLDAPControlA * ServerControls,PLDAPControlA * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_start_tls_sW(PLDAP ExternalHandle,PULONG ServerReturnValue,LDAPMessage ** result,PLDAPControlW * ServerControls,PLDAPControlW * ClientControls) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_startup(PLDAP_VERSION_INFO version,HANDLE * Instance) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_stop_tls_s(PLDAP ExternalHandle) WINLDAPAPI BOOLEAN LDAPAPI <winldap.h>
ldap_ufn2dn(const PCHAR ufn,PCHAR * pDn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_ufn2dnA(const PCHAR ufn,PCHAR * pDn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_ufn2dnW(const PWCHAR ufn,PWCHAR * pDn) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_unbind(LDAP * ld) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_unbind_s(LDAP * ld) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_value_free(PCHAR * vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_value_free_len(struct berval ** vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_value_freeA(PCHAR * vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
ldap_value_freeW(PWCHAR * vals) WINLDAPAPI ULONG LDAPAPI <winldap.h>
LdapGetLastError(VOID) WINLDAPAPI ULONG LDAPAPI <winldap.h>
LdapMapErrorToWin32(ULONG LdapError) WINLDAPAPI ULONG LDAPAPI <winldap.h>
LdapUnicodeToUTF8(LPCWSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest) WINLDAPAPI int LDAPAPI <winldap.h>
LdapUTF8ToUnicode(LPCSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest) WINLDAPAPI int LDAPAPI <winldap.h>
LDPTR(rD,rPtr)<kxia64.h>
LDPTRINC(rD,rPtr,imm)<kxia64.h>
leading_ident_expr() int <sql_1.h>
LEAF_ENTRY(Name)<kxia64.h>
LEAF_EXIT(Name)<kxia64.h>
LEAF_SETUP(i,l,o,r)<kxia64.h>
Leave() void <stllock.h>
LeaveCriticalPolicySection(HANDLE hSection) USERENVAPI WINBOOL WINAPI <userenv.h>
LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection) WINBASEAPI VOID WINAPI <synchapi.h>
LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,PCRITICAL_SECTION pcs) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
LeaveSession(void)virtual HRESULT WINAPI <msimcsdk.h>
Left(WINBOOL fMove,MARKUP_CONTEXT_TYPE * pContext,IHTMLElement ** ppElement,__LONG32 * pcch,OLECHAR * pchText)virtual HRESULT WINAPI <wincon.h>
LeftButtonSelect(void)virtual HRESULT WINAPI <strmif.h>
length()inline unsigned int _bstr_t::<xpsobjectmodel.h>
Length()inline unsigned int _bstr_t::Data_t::<winusb.h>
LengthOfDataCopied(IN PVOID BusContext,IN OUT PVOID ControllerInformationBuffer,IN ULONG ControllerInformationBufferLength,IN OUT PULONG) IN OUT PULONG <hubbusif.h>
LengthOfDataCopied(IN PVOID BusContext,IN PDEVICE_OBJECT HubPhysicalDeviceObject,IN PVOID HubInformationBuffer,IN ULONG HubInformationBufferLength,OUT PULONG) OUT PULONG <hubbusif.h>
LengthOfDataCopied(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE DeviceHandle,OUT PVOID DeviceInformationBuffer,IN ULONG DeviceInformationBufferLength,IN OUT PULONG) IN OUT PULONG <hubbusif.h>
LHashValOfName(lcid,szName)<oleauto.h>
LHashValOfNameSys(SYSKIND syskind,LCID lcid,const OLECHAR * szName)WINOLEAUTAPI_<oleauto.h>
LHashValOfNameSys(SYSKIND syskind,LCID lcid,LPCSTR szName)WINOLEAUTAPI_<oleauto.h>
LHashValOfNameSysA(SYSKIND syskind,LCID lcid,LPCSTR szName)WINOLEAUTAPI_<oleauto.h>
lineAccept(HCALL hCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tapi.h>
lineAddProvider(LPCSTR lpszProviderFilename,HWND hwndOwner,LPDWORD lpdwPermanentProviderID) LONG WINAPI <tapi.h>
lineAddProviderA(LPCSTR lpszProviderFilename,HWND hwndOwner,LPDWORD lpdwPermanentProviderID) LONG WINAPI <tapi.h>
lineAddProviderW(LPCWSTR lpszProviderFilename,HWND hwndOwner,LPDWORD lpdwPermanentProviderID) LONG WINAPI <tapi.h>
lineAddToConference(HCALL hConfCall,HCALL hConsultCall) LONG WINAPI <tapi.h>
lineAgentSpecific(HLINE hLine,DWORD dwAddressID,DWORD dwAgentExtensionIDIndex,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tapi.h>
lineAnswer(HCALL hCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tapi.h>
LinearGradientBrush()	Status ResetTransform<gdiplusbrush.h>
LinearGradientBrush(BOOL useGammaCorrection)	Status SetGammaCorrection<gdiplusbrush.h>
LinearGradientBrush(Color * colors)	Status GetLinearColors<gdiplusbrush.h>
LinearGradientBrush(Color * presetColors,REAL * blendPositions,INT count)	Status GetInterpolationColors<gdiplusbrush.h>
LinearGradientBrush(const Color & color1,const Color & color2)	Status SetLinearColors<gdiplusbrush.h>
LinearGradientBrush(const Color * presetColors,const REAL * blendPositions,INT count)	Status SetInterpolationColors<gdiplusbrush.h>
LinearGradientBrush(const LinearGradientBrush & brush)	<gdiplusbrush.h>
LinearGradientBrush(const LinearGradientBrush &)	<gdiplusbrush.h>
LinearGradientBrush(const Matrix * matrix)	Status SetTransform<gdiplusbrush.h>
LinearGradientBrush(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status MultiplyTransform<gdiplusbrush.h>
LinearGradientBrush(const Point & point1,const Point & point2,const Color & color1,const Color & color2)	<gdiplusbrush.h>
LinearGradientBrush(const PointF & point1,const PointF & point2,const Color & color1,const Color & color2)	<gdiplusbrush.h>
LinearGradientBrush(const REAL * blendFactors,const REAL * blendPositions,INT count)	Status SetBlend<gdiplusbrush.h>
LinearGradientBrush(const Rect & rect,const Color & color1,const Color & color2,LinearGradientMode mode)	<gdiplusbrush.h>
LinearGradientBrush(const Rect & rect,const Color & color1,const Color & color2,REAL angle,BOOL isAngleScalable=FALSE)	<gdiplusbrush.h>
LinearGradientBrush(const RectF & rect,const Color & color1,const Color & color2,LinearGradientMode mode)	<gdiplusbrush.h>
LinearGradientBrush(const RectF & rect,const Color & color1,const Color & color2,REAL angle,BOOL isAngleScalable=FALSE)	<gdiplusbrush.h>
LinearGradientBrush(GpBrush * brush,Status status)	<gdiplusbrush.h>
LinearGradientBrush(Matrix * matrix)	Status GetTransform<gdiplusbrush.h>
LinearGradientBrush(REAL * blendFactors,REAL * blendPositions,INT count)	Status GetBlend<gdiplusbrush.h>
LinearGradientBrush(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status RotateTranform<gdiplusbrush.h>
LinearGradientBrush(REAL dx,REAL dy,MatrixOrder order=MatrixOrderPrepend)	Status TranslateTransform<gdiplusbrush.h>
LinearGradientBrush(REAL focus,REAL scale=1.0f)	Status SetBlendTriangularShape<gdiplusbrush.h>
LinearGradientBrush(REAL sx,REAL sy,MatrixOrder order=MatrixOrderPrepend)	Status ScaleTransform<gdiplusbrush.h>
LinearGradientBrush(Rect * rect)	Status GetRectangle<gdiplusbrush.h>
LinearGradientBrush(RectF * rect)	Status GetRectangle<gdiplusbrush.h>
LinearGradientBrush(WrapMode wrapMode)	Status SetWrapMode<gdiplusbrush.h>
LinearGradientBrushProperties(const D2D1_POINT_2F & startPoint,const D2D1_POINT_2F & endPoint)D2D1FORCEINLINE D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES <d2d1helper.h>
lineBlindTransfer(HCALL hCall,LPCSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineBlindTransferA(HCALL hCall,LPCSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineBlindTransferW(HCALL hCall,LPCWSTR lpszDestAddressW,DWORD dwCountryCode) LONG WINAPI <tapi.h>
LINECALLBACK(DWORD hDevice,DWORD dwMessage,DWORD_PTR dwInstance,DWORD_PTR dwParam1,DWORD_PTR dwParam2,DWORD_PTR dwParam3) typedef void<tapi.h>
lineClose(HLINE hLine) LONG WINAPI <tapi.h>
lineCompleteCall(HCALL hCall,LPDWORD lpdwCompletionID,DWORD dwCompletionMode,DWORD dwMessageID) LONG WINAPI <tapi.h>
lineCompleteTransfer(HCALL hCall,HCALL hConsultCall,LPHCALL lphConfCall,DWORD dwTransferMode) LONG WINAPI <tapi.h>
lineConfigDialog(DWORD dwDeviceID,HWND hwndOwner,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineConfigDialogA(DWORD dwDeviceID,HWND hwndOwner,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineConfigDialogEdit(DWORD dwDeviceID,HWND hwndOwner,LPCSTR lpszDeviceClass,LPVOID const lpDeviceConfigIn,DWORD dwSize,LPVARSTRING lpDeviceConfigOut) LONG WINAPI <tapi.h>
lineConfigDialogEditA(DWORD dwDeviceID,HWND hwndOwner,LPCSTR lpszDeviceClass,LPVOID const lpDeviceConfigIn,DWORD dwSize,LPVARSTRING lpDeviceConfigOut) LONG WINAPI <tapi.h>
lineConfigDialogEditW(DWORD dwDeviceID,HWND hwndOwner,LPCWSTR lpszDeviceClass,LPVOID const lpDeviceConfigIn,DWORD dwSize,LPVARSTRING lpDeviceConfigOut) LONG WINAPI <tapi.h>
lineConfigDialogW(DWORD dwDeviceID,HWND hwndOwner,LPCWSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineConfigProvider(HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tapi.h>
lineCreateAgent(HLINE hLine,LPSTR lpszAgentID,LPSTR lpszAgentPIN,LPHAGENT lphAgent)<tapi.h>
lineCreateAgentA(HLINE hLine,LPSTR lpszAgentID,LPSTR lpszAgentPIN,LPHAGENT lphAgent) LONG WINAPI <tapi.h>
lineCreateAgentSession(HLINE hLine,HAGENT hAgent,LPSTR lpszAgentPIN,DWORD dwWorkingAddressID,LPGUID lpGroupID,LPHAGENTSESSION lphAgentSession)
lineCreateAgentSessionA(HLINE hLine,HAGENT hAgent,LPSTR lpszAgentPIN,DWORD dwWorkingAddressID,LPGUID lpGroupID,LPHAGENTSESSION lphAgentSession) LONG WINAPI <tapi.h>
lineCreateAgentSessionW(HLINE hLine,HAGENT hAgent,LPWSTR lpszAgentPIN,DWORD dwWorkingAddressID,LPGUID lpGroupID,LPHAGENTSESSION lphAgentSession) LONG WINAPI <tapi.h>
lineCreateAgentW(HLINE hLine,LPWSTR lpszAgentID,LPWSTR lpszAgentPIN,LPHAGENT lphAgent) LONG WINAPI <tapi.h>
LineDD(int xStart,int yStart,int xEnd,int yEnd,LINEDDAPROC lpProc,LPARAM data)
LineDDA(int xStart,int yStart,int xEnd,int yEnd,LINEDDAPROC lpProc,LPARAM data) WINGDIAPI WINBOOL WINAPI <wingdi.h>
LINEDDAPROC(int,int,LPARAM) typedef VOID<wingdi.h>
lineDeallocateCall(HCALL hCall) LONG WINAPI <tapi.h>
lineDevSpecific(HLINE hLine,DWORD dwAddressID,HCALL hCall,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tapi.h>
lineDevSpecificFeature(HLINE hLine,DWORD dwFeature,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tapi.h>
lineDial(HCALL hCall,LPCSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineDialA(HCALL hCall,LPCSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineDialW(HCALL hCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineDrop(HCALL hCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tapi.h>
LINEEVENT(HTAPILINE htLine,HTAPICALL htCall,DWORD dwMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2,DWORD_PTR dwParam3) typedef void<tspi.h>
lineForward(HLINE hLine,DWORD bAllAddresses,DWORD dwAddressID,LPLINEFORWARDLIST const lpForwardList,DWORD dwNumRingsNoAnswer,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineForwardA(HLINE hLine,DWORD bAllAddresses,DWORD dwAddressID,LPLINEFORWARDLIST const lpForwardList,DWORD dwNumRingsNoAnswer,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineForwardW(HLINE hLine,DWORD bAllAddresses,DWORD dwAddressID,LPLINEFORWARDLIST const lpForwardList,DWORD dwNumRingsNoAnswer,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineGatherDigits(HCALL hCall,DWORD dwDigitModes,LPSTR lpsDigits,DWORD dwNumDigits,LPCSTR lpszTerminationDigits,DWORD dwFirstDigitTimeout,DWORD dwInterDigitTimeout) LONG WINAPI <tapi.h>
lineGatherDigitsA(HCALL hCall,DWORD dwDigitModes,LPSTR lpsDigits,DWORD dwNumDigits,LPCSTR lpszTerminationDigits,DWORD dwFirstDigitTimeout,DWORD dwInterDigitTimeout) LONG WINAPI <tapi.h>
lineGatherDigitsW(HCALL hCall,DWORD dwDigitModes,LPWSTR lpsDigits,DWORD dwNumDigits,LPCWSTR lpszTerminationDigits,DWORD dwFirstDigitTimeout,DWORD dwInterDigitTimeout) LONG WINAPI <tapi.h>
lineGenerateDigits(HCALL hCall,DWORD dwDigitMode,LPCSTR lpszDigits,DWORD dwDuration) LONG WINAPI <tapi.h>
lineGenerateDigitsA(HCALL hCall,DWORD dwDigitMode,LPCSTR lpszDigits,DWORD dwDuration) LONG WINAPI <tapi.h>
lineGenerateDigitsW(HCALL hCall,DWORD dwDigitMode,LPCWSTR lpszDigits,DWORD dwDuration) LONG WINAPI <tapi.h>
lineGenerateTone(HCALL hCall,DWORD dwToneMode,DWORD dwDuration,DWORD dwNumTones,LPLINEGENERATETONE const lpTones) LONG WINAPI <tapi.h>
lineGetAddressCaps(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAddressID,DWORD dwAPIVersion,DWORD dwExtVersion,LPLINEADDRESSCAPS lpAddressCaps) LONG WINAPI <tapi.h>
lineGetAddressCapsA(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAddressID,DWORD dwAPIVersion,DWORD dwExtVersion,LPLINEADDRESSCAPS lpAddressCaps) LONG WINAPI <tapi.h>
lineGetAddressCapsW(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAddressID,DWORD dwAPIVersion,DWORD dwExtVersion,LPLINEADDRESSCAPS lpAddressCaps) LONG WINAPI <tapi.h>
lineGetAddressID(HLINE hLine,LPDWORD lpdwAddressID,DWORD dwAddressMode,LPCSTR lpsAddress,DWORD dwSize) LONG WINAPI <tapi.h>
lineGetAddressIDA(HLINE hLine,LPDWORD lpdwAddressID,DWORD dwAddressMode,LPCSTR lpsAddress,DWORD dwSize) LONG WINAPI <tapi.h>
lineGetAddressIDW(HLINE hLine,LPDWORD lpdwAddressID,DWORD dwAddressMode,LPCWSTR lpsAddress,DWORD dwSize) LONG WINAPI <tapi.h>
lineGetAddressStatus(HLINE hLine,DWORD dwAddressID,LPLINEADDRESSSTATUS lpAddressStatus) LONG WINAPI <tapi.h>
lineGetAddressStatusA(HLINE hLine,DWORD dwAddressID,LPLINEADDRESSSTATUS lpAddressStatus) LONG WINAPI <tapi.h>
lineGetAddressStatusW(HLINE hLine,DWORD dwAddressID,LPLINEADDRESSSTATUS lpAddressStatus) LONG WINAPI <tapi.h>
lineGetAgentActivityList(HLINE hLine,DWORD dwAddressID,LPLINEAGENTACTIVITYLIST lpAgentActivityList)<tapi.h>
lineGetAgentActivityListA(HLINE hLine,DWORD dwAddressID,LPLINEAGENTACTIVITYLIST lpAgentActivityList) LONG WINAPI <tapi.h>
lineGetAgentActivityListW(HLINE hLine,DWORD dwAddressID,LPLINEAGENTACTIVITYLIST lpAgentActivityList) LONG WINAPI <tapi.h>
lineGetAgentCaps(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAddressID,DWORD dwAppAPIVersion,LPLINEAGENTCAPS lpAgentCaps)<tapi.h>
lineGetAgentCapsA(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAddressID,DWORD dwAppAPIVersion,LPLINEAGENTCAPS lpAgentCaps) LONG WINAPI <tapi.h>
lineGetAgentCapsW(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAddressID,DWORD dwAppAPIVersion,LPLINEAGENTCAPS lpAgentCaps) LONG WINAPI <tapi.h>
lineGetAgentGroupList(HLINE hLine,DWORD dwAddressID,LPLINEAGENTGROUPLIST lpAgentGroupList)<tapi.h>
lineGetAgentGroupListA(HLINE hLine,DWORD dwAddressID,LPLINEAGENTGROUPLIST lpAgentGroupList) LONG WINAPI <tapi.h>
lineGetAgentGroupListW(HLINE hLine,DWORD dwAddressID,LPLINEAGENTGROUPLIST lpAgentGroupList) LONG WINAPI <tapi.h>
lineGetAgentInfo(HLINE hLine,HAGENT hAgent,LPLINEAGENTINFO lpAgentInfo) LONG WINAPI <tapi.h>
lineGetAgentSessionInfo(HLINE hLine,HAGENTSESSION hAgentSession,LPLINEAGENTSESSIONINFO lpAgentSessionInfo) LONG WINAPI <tapi.h>
lineGetAgentSessionList(HLINE hLine,HAGENT hAgent,LPLINEAGENTSESSIONLIST lpAgentSessionList) LONG WINAPI <tapi.h>
lineGetAgentStatus(HLINE hLine,DWORD dwAddressID,LPLINEAGENTSTATUS lpAgentStatus)<tapi.h>
lineGetAgentStatusA(HLINE hLine,DWORD dwAddressID,LPLINEAGENTSTATUS lpAgentStatus) LONG WINAPI <tapi.h>
lineGetAgentStatusW(HLINE hLine,DWORD dwAddressID,LPLINEAGENTSTATUS lpAgentStatus) LONG WINAPI <tapi.h>
lineGetAppPriority(LPCSTR lpszAppFilename,DWORD dwMediaMode,LPLINEEXTENSIONID lpExtensionID,DWORD dwRequestMode,LPVARSTRING lpExtensionName,LPDWORD lpdwPriority) LONG WINAPI <tapi.h>
lineGetAppPriorityA(LPCSTR lpszAppFilename,DWORD dwMediaMode,LPLINEEXTENSIONID lpExtensionID,DWORD dwRequestMode,LPVARSTRING lpExtensionName,LPDWORD lpdwPriority) LONG WINAPI <tapi.h>
lineGetAppPriorityW(LPCWSTR lpszAppFilename,DWORD dwMediaMode,LPLINEEXTENSIONID lpExtensionID,DWORD dwRequestMode,LPVARSTRING lpExtensionName,LPDWORD lpdwPriority) LONG WINAPI <tapi.h>
lineGetCallInfo(HCALL hCall,LPLINECALLINFO lpCallInfo) LONG WINAPI <tapi.h>
lineGetCallInfoA(HCALL hCall,LPLINECALLINFO lpCallInfo) LONG WINAPI <tapi.h>
lineGetCallInfoW(HCALL hCall,LPLINECALLINFO lpCallInfo) LONG WINAPI <tapi.h>
lineGetCallStatus(HCALL hCall,LPLINECALLSTATUS lpCallStatus) LONG WINAPI <tapi.h>
lineGetConfRelatedCalls(HCALL hCall,LPLINECALLLIST lpCallList) LONG WINAPI <tapi.h>
lineGetCountry(DWORD dwCountryID,DWORD dwAPIVersion,LPLINECOUNTRYLIST lpLineCountryList) LONG WINAPI <tapi.h>
lineGetCountryA(DWORD dwCountryID,DWORD dwAPIVersion,LPLINECOUNTRYLIST lpLineCountryList) LONG WINAPI <tapi.h>
lineGetCountryW(DWORD dwCountryID,DWORD dwAPIVersion,LPLINECOUNTRYLIST lpLineCountryList) LONG WINAPI <tapi.h>
lineGetDevCaps(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtVersion,LPLINEDEVCAPS lpLineDevCaps) LONG WINAPI <tapi.h>
lineGetDevCapsA(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtVersion,LPLINEDEVCAPS lpLineDevCaps) LONG WINAPI <tapi.h>
lineGetDevCapsW(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtVersion,LPLINEDEVCAPS lpLineDevCaps) LONG WINAPI <tapi.h>
lineGetDevConfig(DWORD dwDeviceID,LPVARSTRING lpDeviceConfig,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineGetDevConfigA(DWORD dwDeviceID,LPVARSTRING lpDeviceConfig,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineGetDevConfigW(DWORD dwDeviceID,LPVARSTRING lpDeviceConfig,LPCWSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineGetGroupList(HLINE hLine,LPLINEAGENTGROUPLIST lpGroupList)<tapi.h>
lineGetGroupListA(HLINE hLine,LPLINEAGENTGROUPLIST lpGroupList) LONG WINAPI <tapi.h>
lineGetGroupListW(HLINE hLine,LPLINEAGENTGROUPLIST lpGroupList) LONG WINAPI <tapi.h>
lineGetIcon(DWORD dwDeviceID,LPCSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tapi.h>
lineGetIconA(DWORD dwDeviceID,LPCSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tapi.h>
lineGetIconW(DWORD dwDeviceID,LPCWSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tapi.h>
lineGetID(HLINE hLine,DWORD dwAddressID,HCALL hCall,DWORD dwSelect,LPVARSTRING lpDeviceID,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineGetIDA(HLINE hLine,DWORD dwAddressID,HCALL hCall,DWORD dwSelect,LPVARSTRING lpDeviceID,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineGetIDW(HLINE hLine,DWORD dwAddressID,HCALL hCall,DWORD dwSelect,LPVARSTRING lpDeviceID,LPCWSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineGetLineDevStatus(HLINE hLine,LPLINEDEVSTATUS lpLineDevStatus) LONG WINAPI <tapi.h>
lineGetLineDevStatusA(HLINE hLine,LPLINEDEVSTATUS lpLineDevStatus) LONG WINAPI <tapi.h>
lineGetLineDevStatusW(HLINE hLine,LPLINEDEVSTATUS lpLineDevStatus) LONG WINAPI <tapi.h>
lineGetMessage(HLINEAPP hLineApp,LPLINEMESSAGE lpMessage,DWORD dwTimeout) LONG WINAPI <tapi.h>
lineGetNewCalls(HLINE hLine,DWORD dwAddressID,DWORD dwSelect,LPLINECALLLIST lpCallList) LONG WINAPI <tapi.h>
lineGetNumRings(HLINE hLine,DWORD dwAddressID,LPDWORD lpdwNumRings) LONG WINAPI <tapi.h>
lineGetProviderList(DWORD dwAPIVersion,LPLINEPROVIDERLIST lpProviderList) LONG WINAPI <tapi.h>
lineGetProviderListA(DWORD dwAPIVersion,LPLINEPROVIDERLIST lpProviderList) LONG WINAPI <tapi.h>
lineGetProviderListW(DWORD dwAPIVersion,LPLINEPROVIDERLIST lpProviderList) LONG WINAPI <tapi.h>
lineGetProxyStatus(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAppAPIVersion,LPLINEPROXYREQUESTLIST lpLineProxyReqestList) LONG WINAPI <tapi.h>
lineGetQueueInfo(HLINE hLine,DWORD dwQueueID,LPLINEQUEUEINFO lpLineQueueInfo) LONG WINAPI <tapi.h>
lineGetQueueList(HLINE hLine,LPGUID lpGroupID,LPLINEQUEUELIST lpQueueList)<tapi.h>
lineGetQueueListA(HLINE hLine,LPGUID lpGroupID,LPLINEQUEUELIST lpQueueList) LONG WINAPI <tapi.h>
lineGetQueueListW(HLINE hLine,LPGUID lpGroupID,LPLINEQUEUELIST lpQueueList) LONG WINAPI <tapi.h>
lineGetRequest(HLINEAPP hLineApp,DWORD dwRequestMode,LPVOID lpRequestBuffer) LONG WINAPI <tapi.h>
lineGetRequestA(HLINEAPP hLineApp,DWORD dwRequestMode,LPVOID lpRequestBuffer) LONG WINAPI <tapi.h>
lineGetRequestW(HLINEAPP hLineApp,DWORD dwRequestMode,LPVOID lpRequestBuffer) LONG WINAPI <tapi.h>
lineGetStatusMessages(HLINE hLine,LPDWORD lpdwLineStates,LPDWORD lpdwAddressStates) LONG WINAPI <tapi.h>
lineGetTranslateCaps(HLINEAPP hLineApp,DWORD dwAPIVersion,LPLINETRANSLATECAPS lpTranslateCaps) LONG WINAPI <tapi.h>
lineGetTranslateCapsA(HLINEAPP hLineApp,DWORD dwAPIVersion,LPLINETRANSLATECAPS lpTranslateCaps) LONG WINAPI <tapi.h>
lineGetTranslateCapsW(HLINEAPP hLineApp,DWORD dwAPIVersion,LPLINETRANSLATECAPS lpTranslateCaps) LONG WINAPI <tapi.h>
lineHandoff(HCALL hCall,LPCSTR lpszFileName,DWORD dwMediaMode) LONG WINAPI <tapi.h>
lineHandoffA(HCALL hCall,LPCSTR lpszFileName,DWORD dwMediaMode) LONG WINAPI <tapi.h>
lineHandoffW(HCALL hCall,LPCWSTR lpszFileName,DWORD dwMediaMode) LONG WINAPI <tapi.h>
lineHold(HCALL hCall) LONG WINAPI <tapi.h>
lineInitialize(LPHLINEAPP lphLineApp,HINSTANCE hInstance,LINECALLBACK lpfnCallback,LPCSTR lpszAppName,LPDWORD lpdwNumDevs) LONG WINAPI <tapi.h>
lineInitializeEx(LPHLINEAPP lphLineApp,HINSTANCE hInstance,LINECALLBACK lpfnCallback,LPCSTR lpszFriendlyAppName,LPDWORD lpdwNumDevs,LPDWORD lpdwAPIVersion,LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams)<tapi.h>
lineInitializeExA(LPHLINEAPP lphLineApp,HINSTANCE hInstance,LINECALLBACK lpfnCallback,LPCSTR lpszFriendlyAppName,LPDWORD lpdwNumDevs,LPDWORD lpdwAPIVersion,LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams) LONG WINAPI <tapi.h>
lineInitializeExW(LPHLINEAPP lphLineApp,HINSTANCE hInstance,LINECALLBACK lpfnCallback,LPCWSTR lpszFriendlyAppName,LPDWORD lpdwNumDevs,LPDWORD lpdwAPIVersion,LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams) LONG WINAPI <tapi.h>
lineMakeCall(HLINE hLine,LPHCALL lphCall,LPCSTR lpszDestAddress,DWORD dwCountryCode,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineMakeCallA(HLINE hLine,LPHCALL lphCall,LPCSTR lpszDestAddress,DWORD dwCountryCode,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineMakeCallW(HLINE hLine,LPHCALL lphCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineMonitorDigits(HCALL hCall,DWORD dwDigitModes) LONG WINAPI <tapi.h>
lineMonitorMedia(HCALL hCall,DWORD dwMediaModes) LONG WINAPI <tapi.h>
lineMonitorTones(HCALL hCall,LPLINEMONITORTONE const lpToneList,DWORD dwNumEntries) LONG WINAPI <tapi.h>
lineNegotiateAPIVersion(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPILowVersion,DWORD dwAPIHighVersion,LPDWORD lpdwAPIVersion,LPLINEEXTENSIONID lpExtensionID) LONG WINAPI <tapi.h>
lineNegotiateExtVersion(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtLowVersion,DWORD dwExtHighVersion,LPDWORD lpdwExtVersion) LONG WINAPI <tapi.h>
lineOpen(HLINEAPP hLineApp,DWORD dwDeviceID,LPHLINE lphLine,DWORD dwAPIVersion,DWORD dwExtVersion,DWORD_PTR dwCallbackInstance,DWORD dwPrivileges,DWORD dwMediaModes,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineOpenA(HLINEAPP hLineApp,DWORD dwDeviceID,LPHLINE lphLine,DWORD dwAPIVersion,DWORD dwExtVersion,DWORD_PTR dwCallbackInstance,DWORD dwPrivileges,DWORD dwMediaModes,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineOpenW(HLINEAPP hLineApp,DWORD dwDeviceID,LPHLINE lphLine,DWORD dwAPIVersion,DWORD dwExtVersion,DWORD_PTR dwCallbackInstance,DWORD dwPrivileges,DWORD dwMediaModes,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
linePark(HCALL hCall,DWORD dwParkMode,LPCSTR lpszDirAddress,LPVARSTRING lpNonDirAddress) LONG WINAPI <tapi.h>
lineParkA(HCALL hCall,DWORD dwParkMode,LPCSTR lpszDirAddress,LPVARSTRING lpNonDirAddress) LONG WINAPI <tapi.h>
lineParkW(HCALL hCall,DWORD dwParkMode,LPCWSTR lpszDirAddress,LPVARSTRING lpNonDirAddress) LONG WINAPI <tapi.h>
linePickup(HLINE hLine,DWORD dwAddressID,LPHCALL lphCall,LPCSTR lpszDestAddress,LPCSTR lpszGroupID) LONG WINAPI <tapi.h>
linePickupA(HLINE hLine,DWORD dwAddressID,LPHCALL lphCall,LPCSTR lpszDestAddress,LPCSTR lpszGroupID) LONG WINAPI <tapi.h>
linePickupW(HLINE hLine,DWORD dwAddressID,LPHCALL lphCall,LPCWSTR lpszDestAddress,LPCWSTR lpszGroupID) LONG WINAPI <tapi.h>
linePrepareAddToConference(HCALL hConfCall,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
linePrepareAddToConferenceA(HCALL hConfCall,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
linePrepareAddToConferenceW(HCALL hConfCall,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineProxyMessage(HLINE hLine,HCALL hCall,DWORD dwMsg,DWORD dwParam1,DWORD dwParam2,DWORD dwParam3) LONG WINAPI <tapi.h>
lineProxyResponse(HLINE hLine,LPLINEPROXYREQUEST lpProxyRequest,DWORD dwResult) LONG WINAPI <tapi.h>
lineRedirect(HCALL hCall,LPCSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineRedirectA(HCALL hCall,LPCSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineRedirectW(HCALL hCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tapi.h>
lineRegisterRequestRecipient(HLINEAPP hLineApp,DWORD dwRegistrationInstance,DWORD dwRequestMode,DWORD bEnable) LONG WINAPI <tapi.h>
lineReleaseUserUserInfo(HCALL hCall) LONG WINAPI <tapi.h>
lineRemoveFromConference(HCALL hCall) LONG WINAPI <tapi.h>
lineRemoveProvider(DWORD dwPermanentProviderID,HWND hwndOwner) LONG WINAPI <tapi.h>
lineSecureCall(HCALL hCall) LONG WINAPI <tapi.h>
lineSendUserUserInfo(HCALL hCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tapi.h>
lineSetAgentActivity(HLINE hLine,DWORD dwAddressID,DWORD dwActivityID) LONG WINAPI <tapi.h>
lineSetAgentGroup(HLINE hLine,DWORD dwAddressID,LPLINEAGENTGROUPLIST lpAgentGroupList) LONG WINAPI <tapi.h>
lineSetAgentMeasurementPeriod(HLINE hLine,HAGENT hAgent,DWORD dwMeasurementPeriod) LONG WINAPI <tapi.h>
lineSetAgentSessionState(HLINE hLine,HAGENTSESSION hAgentSession,DWORD dwAgentSessionState,DWORD dwNextAgentSessionState) LONG WINAPI <tapi.h>
lineSetAgentState(HLINE hLine,DWORD dwAddressID,DWORD dwAgentState,DWORD dwNextAgentState) LONG WINAPI <tapi.h>
lineSetAgentStateEx(HLINE hLine,HAGENT hAgent,DWORD dwAgentState,DWORD dwNextAgentState) LONG WINAPI <tapi.h>
lineSetAppPriority(LPCSTR lpszAppFilename,DWORD dwMediaMode,LPLINEEXTENSIONID lpExtensionID,DWORD dwRequestMode,LPCSTR lpszExtensionName,DWORD dwPriority) LONG WINAPI <tapi.h>
lineSetAppPriorityA(LPCSTR lpszAppFilename,DWORD dwMediaMode,LPLINEEXTENSIONID lpExtensionID,DWORD dwRequestMode,LPCSTR lpszExtensionName,DWORD dwPriority) LONG WINAPI <tapi.h>
lineSetAppPriorityW(LPCWSTR lpszAppFilename,DWORD dwMediaMode,LPLINEEXTENSIONID lpExtensionID,DWORD dwRequestMode,LPCWSTR lpszExtensionName,DWORD dwPriority) LONG WINAPI <tapi.h>
lineSetAppSpecific(HCALL hCall,DWORD dwAppSpecific) LONG WINAPI <tapi.h>
lineSetCallData(HCALL hCall,LPVOID lpCallData,DWORD dwSize) LONG WINAPI <tapi.h>
lineSetCallParams(HCALL hCall,DWORD dwBearerMode,DWORD dwMinRate,DWORD dwMaxRate,LPLINEDIALPARAMS const lpDialParams) LONG WINAPI <tapi.h>
lineSetCallPrivilege(HCALL hCall,DWORD dwCallPrivilege) LONG WINAPI <tapi.h>
lineSetCallQualityOfService(HCALL hCall,LPVOID lpSendingFlowspec,DWORD dwSendingFlowspecSize,LPVOID lpReceivingFlowspec,DWORD dwReceivingFlowspecSize) LONG WINAPI <tapi.h>
lineSetCallTreatment(HCALL hCall,DWORD dwTreatment) LONG WINAPI <tapi.h>
lineSetCurrentLocation(HLINEAPP hLineApp,DWORD dwLocation) LONG WINAPI <tapi.h>
lineSetDevConfig(DWORD dwDeviceID,LPVOID const lpDeviceConfig,DWORD dwSize,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineSetDevConfigA(DWORD dwDeviceID,LPVOID const lpDeviceConfig,DWORD dwSize,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineSetDevConfigW(DWORD dwDeviceID,LPVOID const lpDeviceConfig,DWORD dwSize,LPCWSTR lpszDeviceClass) LONG WINAPI <tapi.h>
lineSetLineDevStatus(HLINE hLine,DWORD dwStatusToChange,DWORD fStatus) LONG WINAPI <tapi.h>
lineSetMediaControl(HLINE hLine,DWORD dwAddressID,HCALL hCall,DWORD dwSelect,LPLINEMEDIACONTROLDIGIT const lpDigitList,DWORD dwDigitNumEntries,LPLINEMEDIACONTROLMEDIA const lpMediaList,DWORD dwMediaNumEntries,LPLINEMEDIACONTROLTONE const lpToneList,DWORD dwToneNumEntries,LPLINEMEDIACONTROLCALLSTATE const lpCallStateList,DWORD dwCallStateNumEntries) LONG WINAPI <tapi.h>
lineSetMediaMode(HCALL hCall,DWORD dwMediaModes) LONG WINAPI <tapi.h>
lineSetNumRings(HLINE hLine,DWORD dwAddressID,DWORD dwNumRings) LONG WINAPI <tapi.h>
lineSetQueueMeasurementPeriod(HLINE hLine,DWORD dwQueueID,DWORD dwMeasurementPeriod) LONG WINAPI <tapi.h>
lineSetStatusMessages(HLINE hLine,DWORD dwLineStates,DWORD dwAddressStates) LONG WINAPI <tapi.h>
lineSetTerminal(HLINE hLine,DWORD dwAddressID,HCALL hCall,DWORD dwSelect,DWORD dwTerminalModes,DWORD dwTerminalID,DWORD bEnable) LONG WINAPI <tapi.h>
lineSetTollList(HLINEAPP hLineApp,DWORD dwDeviceID,LPCSTR lpszAddressIn,DWORD dwTollListOption) LONG WINAPI <tapi.h>
lineSetTollListA(HLINEAPP hLineApp,DWORD dwDeviceID,LPCSTR lpszAddressIn,DWORD dwTollListOption) LONG WINAPI <tapi.h>
lineSetTollListW(HLINEAPP hLineApp,DWORD dwDeviceID,LPCWSTR lpszAddressInW,DWORD dwTollListOption) LONG WINAPI <tapi.h>
lineSetupConference(HCALL hCall,HLINE hLine,LPHCALL lphConfCall,LPHCALL lphConsultCall,DWORD dwNumParties,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineSetupConferenceA(HCALL hCall,HLINE hLine,LPHCALL lphConfCall,LPHCALL lphConsultCall,DWORD dwNumParties,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineSetupConferenceW(HCALL hCall,HLINE hLine,LPHCALL lphConfCall,LPHCALL lphConsultCall,DWORD dwNumParties,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineSetupTransfer(HCALL hCall,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineSetupTransferA(HCALL hCall,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineSetupTransferW(HCALL hCall,LPHCALL lphConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tapi.h>
lineShutdown(HLINEAPP hLineApp) LONG WINAPI <tapi.h>
lineSwapHold(HCALL hActiveCall,HCALL hHeldCall) LONG WINAPI <tapi.h>
LineTo(HDC hdc,int x,int y) WINGDIAPI WINBOOL WINAPI <wingdi.h>
lineTranslateAddress(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,LPCSTR lpszAddressIn,DWORD dwCard,DWORD dwTranslateOptions,LPLINETRANSLATEOUTPUT lpTranslateOutput) LONG WINAPI <tapi.h>
lineTranslateAddressA(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,LPCSTR lpszAddressIn,DWORD dwCard,DWORD dwTranslateOptions,LPLINETRANSLATEOUTPUT lpTranslateOutput) LONG WINAPI <tapi.h>
lineTranslateAddressW(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,LPCWSTR lpszAddressIn,DWORD dwCard,DWORD dwTranslateOptions,LPLINETRANSLATEOUTPUT lpTranslateOutput) LONG WINAPI <tapi.h>
lineTranslateDialog(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,HWND hwndOwner,LPCSTR lpszAddressIn) LONG WINAPI <tapi.h>
lineTranslateDialogA(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,HWND hwndOwner,LPCSTR lpszAddressIn) LONG WINAPI <tapi.h>
lineTranslateDialogW(HLINEAPP hLineApp,DWORD dwDeviceID,DWORD dwAPIVersion,HWND hwndOwner,LPCWSTR lpszAddressIn) LONG WINAPI <tapi.h>
lineUncompleteCall(HLINE hLine,DWORD dwCompletionID) LONG WINAPI <tapi.h>
lineUnhold(HCALL hCall) LONG WINAPI <tapi.h>
lineUnpark(HLINE hLine,DWORD dwAddressID,LPHCALL lphCall,LPCSTR lpszDestAddress) LONG WINAPI <tapi.h>
lineUnparkA(HLINE hLine,DWORD dwAddressID,LPHCALL lphCall,LPCSTR lpszDestAddress) LONG WINAPI <tapi.h>
lineUnparkW(HLINE hLine,DWORD dwAddressID,LPHCALL lphCall,LPCWSTR lpszDestAddress) LONG WINAPI <tapi.h>
List(BSTR bstrListName,IDispatch ** ppList)virtual HRESULT WINAPI <ntsecpkg.h>
ListApplications(VARIANT * bstrBuffer)virtual HRESULT WINAPI <iiisext.h>
ListBox_AddFile(hwndCtl,lpszFilename)
ListBox_AddItemData(hwndCtl,data)<windowsx.h>
ListBox_AddString(hwndCtl,lpsz)<windowsx.h>
ListBox_DeleteString(hwndCtl,index)<windowsx.h>
ListBox_Dir(hwndCtl,attrs,lpszFileSpec)<windowsx.h>
ListBox_Enable(hwndCtl,fEnable)<windowsx.h>
ListBox_FindItemData(hwndCtl,indexStart,data)<windowsx.h>
ListBox_FindString(hwndCtl,indexStart,lpszFind)<windowsx.h>
ListBox_FindStringExact(hwndCtl,indexStart,lpszFind)<windowsx.h>
ListBox_GetAnchorIndex(hwndCtl)
ListBox_GetCaretIndex(hwndCtl)<windowsx.h>
ListBox_GetCount(hwndCtl)<windowsx.h>
ListBox_GetCurSel(hwndCtl)<windowsx.h>
ListBox_GetHorizontalExtent(hwndCtl)<windowsx.h>
ListBox_GetItemData(hwndCtl,index)<windowsx.h>
ListBox_GetItemHeight(hwndCtl,index)<windowsx.h>
ListBox_GetItemRect(hwndCtl,index,lprc)<windowsx.h>
ListBox_GetSel(hwndCtl,index)<windowsx.h>
ListBox_GetSelCount(hwndCtl)<windowsx.h>
ListBox_GetSelItems(hwndCtl,cItems,lpItems)<windowsx.h>
ListBox_GetText(hwndCtl,index,lpszBuffer)<windowsx.h>
ListBox_GetTextLen(hwndCtl,index)<windowsx.h>
ListBox_GetTopIndex(hwndCtl)<windowsx.h>
ListBox_InsertItemData(hwndCtl,index,data)<windowsx.h>
ListBox_InsertString(hwndCtl,index,lpsz)<windowsx.h>
ListBox_ResetContent(hwndCtl)<windowsx.h>
ListBox_SelectItemData(hwndCtl,indexStart,data)<windowsx.h>
ListBox_SelectString(hwndCtl,indexStart,lpszFind)<windowsx.h>
ListBox_SelItemRange(hwndCtl,fSelect,first,last)<windowsx.h>
ListBox_SetAnchorIndex(hwndCtl,index)
ListBox_SetCaretIndex(hwndCtl,index)<windowsx.h>
ListBox_SetColumnWidth(hwndCtl,cxColumn)<windowsx.h>
ListBox_SetCurSel(hwndCtl,index)<windowsx.h>
ListBox_SetHorizontalExtent(hwndCtl,cxExtent)<windowsx.h>
ListBox_SetItemData(hwndCtl,index,data)<windowsx.h>
ListBox_SetItemHeight(hwndCtl,index,cy)<windowsx.h>
ListBox_SetSel(hwndCtl,fSelect,index)<windowsx.h>
ListBox_SetTabStops(hwndCtl,cTabs,lpTabs)<windowsx.h>
ListBox_SetTopIndex(hwndCtl,indexTop)<windowsx.h>
ListCardInterfaces(BSTR bstrCardName,LPSAFEARRAY * ppInterfaceGuids)virtual HRESULT WINAPI <scardssp.h>
ListCards(LPBYTEBUFFER pAtr,LPSAFEARRAY pInterfaceGuids,__LONG32 localeId,LPSAFEARRAY * ppCardNames)virtual HRESULT WINAPI <scardssp.h>
Listen(__LONG32 bListen)virtual HRESULT WINAPI <ipxsap.h>
listen(SOCKET s,int backlog) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
Listen(VARIANT_BOOL Listen,VARIANT_BOOL * StartedListening)virtual HRESULT WINAPI <ipxsap.h>
ListeningState(__LONG32 dwCharID,__LONG32 bListening,__LONG32 dwCause)virtual HRESULT WINAPI <agtsvr.h>
ListExtensionFiles(VARIANT * bstrBuffer)virtual HRESULT WINAPI <iiisext.h>
ListKeys(DBORDINAL * pcColumns,DBORDINAL ** prgColumns)virtual HRESULT WINAPI <oledbdep.h>
ListReaderGroups(__LONG32 localeId,LPSAFEARRAY * ppReaderGroups)virtual HRESULT WINAPI <scardssp.h>
ListReaders(__LONG32 localeId,LPSAFEARRAY * ppReaders)virtual HRESULT WINAPI <scardssp.h>
ListView_ApproximateViewRect(hwnd,iWidth,iHeight,iCount)<commctrl.h>
ListView_Arrange(hwndLV,code)<commctrl.h>
ListView_CancelEditLabel(hwnd)<commctrl.h>
ListView_CreateDragImage(hwnd,i,lpptUpLeft)<commctrl.h>
ListView_DeleteAllItems(hwnd)<commctrl.h>
ListView_DeleteColumn(hwnd,iCol)<commctrl.h>
ListView_DeleteItem(hwnd,i)<commctrl.h>
ListView_EditLabel(hwndLV,i)<commctrl.h>
ListView_EnableGroupView(hwnd,fEnable)<commctrl.h>
ListView_EnsureVisible(hwndLV,i,fPartialOK)<commctrl.h>
ListView_FindItem(hwnd,iStart,plvfi)<commctrl.h>
ListView_GetBkColor(hwnd)<commctrl.h>
ListView_GetBkImage(hwnd,plvbki)<commctrl.h>
ListView_GetCallbackMask(hwnd)<commctrl.h>
ListView_GetCheckState(hwndLV,i)<commctrl.h>
ListView_GetColumn(hwnd,iCol,pcol)<commctrl.h>
ListView_GetColumnOrderArray(hwnd,iCount,pi)<commctrl.h>
ListView_GetColumnWidth(hwnd,iCol)<commctrl.h>
ListView_GetCountPerPage(hwndLV)<commctrl.h>
ListView_GetEditControl(hwndLV)<commctrl.h>
ListView_GetEmptyText(hwnd, pszText, cchText)<commctrl.h>
ListView_GetExtendedListViewStyle(hwndLV)<commctrl.h>
ListView_GetFocusedGroup(hwnd)<commctrl.h>
ListView_GetFooterInfo(hwnd, plvfi)<commctrl.h>
ListView_GetFooterItem(hwnd, iItem, pfi)<commctrl.h>
ListView_GetFooterItemRect(hwnd, iItem, prc)<commctrl.h>
ListView_GetFooterRect(hwnd, prc)<commctrl.h>
ListView_GetGroupCount(hwnd)<commctrl.h>
ListView_GetGroupHeaderImageList(hwnd)<commctrl.h>
ListView_GetGroupInfo(hwnd,iGroupId,pgrp)<commctrl.h>
ListView_GetGroupInfoByIndex(hwnd, iIndex, pgrp)<commctrl.h>
ListView_GetGroupMetrics(hwnd,pGroupMetrics)<commctrl.h>
ListView_GetGroupRect(hwnd, iGroupId, type, prc)<commctrl.h>
ListView_GetGroupState(hwnd, dwGroupId, dwMask)<commctrl.h>
ListView_GetHeader(hwnd)<commctrl.h>
ListView_GetHotCursor(hwnd)<commctrl.h>
ListView_GetHotItem(hwnd)<commctrl.h>
ListView_GetHoverTime(hwndLV)<commctrl.h>
ListView_GetImageList(hwnd,iImageList)<commctrl.h>
ListView_GetInsertMark(hwnd,lvim)<commctrl.h>
ListView_GetInsertMarkColor(hwnd)<commctrl.h>
ListView_GetInsertMarkRect(hwnd,rc)<commctrl.h>
ListView_GetISearchString(hwndLV,lpsz)<commctrl.h>
ListView_GetItem(hwnd,pitem)<commctrl.h>
ListView_GetItemCount(hwnd)<commctrl.h>
ListView_GetItemIndexRect(hwnd, plvii, iSubItem, code, prc)<commctrl.h>
ListView_GetItemPosition(hwndLV,i,ppt)<commctrl.h>
ListView_GetItemRect(hwnd,i,prc,code)<commctrl.h>
ListView_GetItemSpacing(hwndLV,fSmall)<commctrl.h>
ListView_GetItemState(hwndLV,i,mask)<commctrl.h>
ListView_GetItemText(hwndLV,i,iSubItem_,pszText_,cchTextMax_)<commctrl.h>
ListView_GetNextItem(hwnd,i,flags)<commctrl.h>
ListView_GetNextItemIndex(hwnd, plvii, flags)<commctrl.h>
ListView_GetNumberOfWorkAreas(hwnd,pnWorkAreas)<commctrl.h>
ListView_GetOrigin(hwndLV,ppt)<commctrl.h>
ListView_GetOutlineColor(hwnd)<commctrl.h>
ListView_GetSelectedColumn(hwnd)<commctrl.h>
ListView_GetSelectedCount(hwndLV)<commctrl.h>
ListView_GetSelectionMark(hwnd)<commctrl.h>
ListView_GetStringWidth(hwndLV,psz)<commctrl.h>
ListView_GetSubItemRect(hwnd,iItem,iSubItem,code,prc)<commctrl.h>
ListView_GetTextBkColor(hwnd)<commctrl.h>
ListView_GetTextColor(hwnd)<commctrl.h>
ListView_GetTileInfo(hwnd,pti)<commctrl.h>
ListView_GetTileViewInfo(hwnd,ptvi)<commctrl.h>
ListView_GetToolTips(hwndLV)<commctrl.h>
ListView_GetTopIndex(hwndLV)<commctrl.h>
ListView_GetUnicodeFormat(hwnd)<commctrl.h>
ListView_GetView(hwnd)<commctrl.h>
ListView_GetViewRect(hwnd,prc)<commctrl.h>
ListView_GetWorkAreas(hwnd,nWorkAreas,prc)<commctrl.h>
ListView_HasGroup(hwnd,dwGroupId)<commctrl.h>
ListView_HitTest(hwndLV,pinfo)<commctrl.h>
ListView_InsertColumn(hwnd,iCol,pcol)<commctrl.h>
ListView_InsertGroup(hwnd,index,pgrp)<commctrl.h>
ListView_InsertGroupSorted(hwnd,structInsert)<commctrl.h>
ListView_InsertItem(hwnd,pitem)<commctrl.h>
ListView_InsertMarkHitTest(hwnd,point,lvim)<commctrl.h>
ListView_IsGroupViewEnabled(hwnd)<commctrl.h>
ListView_IsItemVisible(hwnd,index)<commctrl.h>
ListView_MapIDToIndex(hwnd,id)<commctrl.h>
ListView_MapIndexToID(hwnd,index)<commctrl.h>
ListView_MoveGroup(hwnd,iGroupId,toIndex)<commctrl.h>
ListView_MoveItemToGroup(hwnd,idItemFrom,idGroupTo)<commctrl.h>
ListView_RedrawItems(hwndLV,iFirst,iLast)<commctrl.h>
ListView_RemoveAllGroups(hwnd)<commctrl.h>
ListView_RemoveGroup(hwnd,iGroupId)<commctrl.h>
ListView_Scroll(hwndLV,dx,dy)<commctrl.h>
ListView_SetBkColor(hwnd,clrBk)<commctrl.h>
ListView_SetBkImage(hwnd,plvbki)<commctrl.h>
ListView_SetCallbackMask(hwnd,mask)<commctrl.h>
ListView_SetCheckState(hwndLV,i,fCheck)<commctrl.h>
ListView_SetColumn(hwnd,iCol,pcol)<commctrl.h>
ListView_SetColumnOrderArray(hwnd,iCount,pi)<commctrl.h>
ListView_SetColumnWidth(hwnd,iCol,cx)<commctrl.h>
ListView_SetExtendedListViewStyle(hwndLV,dw)<commctrl.h>
ListView_SetExtendedListViewStyleEx(hwndLV,dwMask,dw)<commctrl.h>
ListView_SetGroupHeaderImageList(hwnd, himl)<commctrl.h>
ListView_SetGroupInfo(hwnd,iGroupId,pgrp)<commctrl.h>
ListView_SetGroupMetrics(hwnd,pGroupMetrics)<commctrl.h>
ListView_SetGroupState(hwnd, dwGroupId, dwMask, dwState)<commctrl.h>
ListView_SetHotCursor(hwnd,hcur)<commctrl.h>
ListView_SetHotItem(hwnd,i)<commctrl.h>
ListView_SetHoverTime(hwndLV,dwHoverTimeMs)<commctrl.h>
ListView_SetIconSpacing(hwndLV,cx,cy)<commctrl.h>
ListView_SetImageList(hwnd,himl,iImageList)<commctrl.h>
ListView_SetInfoTip(hwndLV,plvInfoTip)<commctrl.h>
ListView_SetInsertMark(hwnd,lvim)<commctrl.h>
ListView_SetInsertMarkColor(hwnd,color)<commctrl.h>
ListView_SetItem(hwnd,pitem)<commctrl.h>
ListView_SetItemCount(hwndLV,cItems)<commctrl.h>
ListView_SetItemCountEx(hwndLV,cItems,dwFlags)<commctrl.h>
ListView_SetItemIndexState(hwndLV, plvii, data, mask)<commctrl.h>
ListView_SetItemPosition(hwndLV,i,x,y)<commctrl.h>
ListView_SetItemPosition32(hwndLV,i,x0,y0)<commctrl.h>
ListView_SetItemState(hwndLV,i,data,mask)<commctrl.h>
ListView_SetItemText(hwndLV,i,iSubItem_,pszText_)<commctrl.h>
ListView_SetOutlineColor(hwnd,color)<commctrl.h>
ListView_SetSelectedColumn(hwnd,iCol)<commctrl.h>
ListView_SetSelectionMark(hwnd,i)<commctrl.h>
ListView_SetTextBkColor(hwnd,clrTextBk)<commctrl.h>
ListView_SetTextColor(hwnd,clrText)<commctrl.h>
ListView_SetTileInfo(hwnd,pti)<commctrl.h>
ListView_SetTileViewInfo(hwnd,ptvi)<commctrl.h>
ListView_SetTileWidth(hwnd,cpWidth)<commctrl.h>
ListView_SetToolTips(hwndLV,hwndNewHwnd)<commctrl.h>
ListView_SetUnicodeFormat(hwnd,fUnicode)<commctrl.h>
ListView_SetView(hwnd,iView)<commctrl.h>
ListView_SetWorkAreas(hwnd,nWorkAreas,prc)<commctrl.h>
ListView_SortGroups(hwnd,_pfnGroupCompate,_plv)<commctrl.h>
ListView_SortItems(hwndLV,_pfnCompare,_lPrm)<commctrl.h>
ListView_SortItemsEx(hwndLV,_pfnCompare,_lPrm)<commctrl.h>
ListView_SubItemHitTest(hwnd,plvhti)<commctrl.h>
ListView_SubItemHitTestEx(hwnd, plvhti)<commctrl.h>
ListView_Update(hwndLV,i)<commctrl.h>
ListWebServiceExtensions(VARIANT * bstrBuffer)virtual HRESULT WINAPI <iiisext.h>
LLC_TRANSMIT2_VAR_PARMS(a)<dlcapi.h>
LMP_3_SLOT_PACKETS(X)<bthdef.h>
LMP_FLOW_CONTROL_LAG(X)<bthdef.h>
LMP_HV2_PACKETS(X)<bthdef.h>
LMP_HV3_PACKETS(X)<bthdef.h>
LO32(UINT64 up) inline UINT32 <mfapi.h>
Load(BSTR CharacterID,VARIANT LoadKey,IAgentCtlRequest ** ppidRequest)virtual HRESULT WINAPI <mmcobj.h>
Load(BSTR Filename)virtual HRESULT WINAPI <mmcobj.h>
Load(CdoConfigSource LoadFrom,BSTR URL)virtual HRESULT WINAPI <mmcobj.h>
Load(VARIANT vLoadKey,__LONG32 * pdwCharID,__LONG32 * pdwReqID)virtual HRESULT WINAPI <mmcobj.h>
LoadAccelerators(HINSTANCE hInstance,LPCSTR lpTableName) WINUSERAPI HACCEL WINAPI <winuser.h>
LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName) WINUSERAPI HACCEL WINAPI <winuser.h>
LoadAcceleratorsW(HINSTANCE hInstance,LPCWSTR lpTableName) WINUSERAPI HACCEL WINAPI <winuser.h>
LoadBitmap(HINSTANCE hInstance,LPCSTR lpBitmapName) WINUSERAPI HBITMAP WINAPI <winuser.h>
LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName) WINUSERAPI HBITMAP WINAPI <winuser.h>
LoadBitmapW(HINSTANCE hInstance,LPCWSTR lpBitmapName) WINUSERAPI HBITMAP WINAPI <winuser.h>
LoadCommand(DBID * pCommandID,DWORD dwFlags)virtual HRESULT WINAPI <oledb.h>
LoadCursor(HINSTANCE hInstance,LPCSTR lpCursorName) WINUSERAPI HCURSOR WINAPI <winuser.h>
LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName) WINUSERAPI HCURSOR WINAPI <winuser.h>
LoadCursorFromFile(LPCSTR lpFileName) WINUSERAPI HCURSOR WINAPI <winuser.h>
LoadCursorFromFileA(LPCSTR lpFileName) WINUSERAPI HCURSOR WINAPI <winuser.h>
LoadCursorFromFileW(LPCWSTR lpFileName) WINUSERAPI HCURSOR WINAPI <winuser.h>
LoadCursorW(HINSTANCE hInstance,LPCWSTR lpCursorName) WINUSERAPI HCURSOR WINAPI <winuser.h>
LoadDocument(VARIANT * pathIn,VARIANT * promptUser)virtual HRESULT WINAPI <dhtmled.h>
LoadDtcHelper(void) DTC_GET_TRANSACTION_MANAGER __cdecl <dtchelp.h>
LoadDtcHelperEx(void) DTC_GET_TRANSACTION_MANAGER_EX_A __cdecl <dtchelp.h>
LoadDtcHelperExA(void) DTC_GET_TRANSACTION_MANAGER_EX_A __cdecl <dtchelp.h>
LoadDtcHelperExW(void) DTC_GET_TRANSACTION_MANAGER_EX_W __cdecl <dtchelp.h>
LoadGroup(HSEARCHER hsrch,PSZ pszFileName) ERRORCODE WINAPI <ftsiface.h>
LoadHistory(IStream * pStream,IBindCtx * pbc)virtual HRESULT WINAPI <perhist.h>
LoadIcon(HINSTANCE hInstance,LPCSTR lpIconName) WINUSERAPI HICON WINAPI <winuser.h>
LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName) WINUSERAPI HICON WINAPI <winuser.h>
LoadIconMetric(HINSTANCE hinst,PCWSTR pszName,int lims,HICON * phico) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
LoadIconW(HINSTANCE hInstance,LPCWSTR lpIconName) WINUSERAPI HICON WINAPI <winuser.h>
LoadIconWithScaleDown(HINSTANCE hinst,PCWSTR pszName,int cx,int cy,HICON * phico) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
LoadIFilter(WCHAR const * pwcsPath,IUnknown * pUnkOuter,void ** ppIUnk) STDAPI <ntquery.h>
LoadIFilterEx(WCHAR const * pwcsPath,DWORD dwFlags,REFIID riid,void ** ppIUnk) STDAPI <ntquery.h>
LoadImage(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad) WINUSERAPI HANDLE WINAPI <winuser.h>
LoadImageA(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad) WINUSERAPI HANDLE WINAPI <winuser.h>
LoadImageW(HINSTANCE hInst,LPCWSTR name,UINT type,int cx,int cy,UINT fuLoad) WINUSERAPI HANDLE WINAPI <winuser.h>
LoadKeyboardLayout(LPCSTR pwszKLID,UINT Flags) WINUSERAPI HKL WINAPI <winuser.h>
LoadKeyboardLayoutA(LPCSTR pwszKLID,UINT Flags) WINUSERAPI HKL WINAPI <winuser.h>
LoadKeyboardLayoutW(LPCWSTR pwszKLID,UINT Flags) WINUSERAPI HKL WINAPI <winuser.h>
LoadLibrary(LPCSTR lpLibFileName) WINBASEAPI HMODULE WINAPI <winbase.h>
LoadLibraryA(LPCSTR lpLibFileName) WINBASEAPI HMODULE WINAPI <winbase.h>
LoadLibraryEx(LPCSTR lpLibFileName,HANDLE hFile,DWORD dwFlags) WINBASEAPI HMODULE WINAPI <libloaderapi.h>
LoadLibraryEx32W(LPCSTR lpszLibFile,DWORD hFile,DWORD dwFlags) DWORD WINAPI <wownt16.h>
LoadLibraryExA(LPCSTR lpLibFileName,HANDLE hFile,DWORD dwFlags) WINBASEAPI HMODULE WINAPI <libloaderapi.h>
LoadLibraryExW(LPCWSTR lpLibFileName,HANDLE hFile,DWORD dwFlags) WINBASEAPI HMODULE WINAPI <libloaderapi.h>
LoadLibraryShim(LPCWSTR,LPCWSTR,LPVOID,HMODULE *)HRESULT     WINAPI <mscoree.h>
LoadLibraryW(LPCWSTR lpLibFileName) WINBASEAPI HMODULE WINAPI <winbase.h>
LoadMenu(HINSTANCE hInstance,LPCSTR lpMenuName) WINUSERAPI HMENU WINAPI <winuser.h>
LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName) WINUSERAPI HMENU WINAPI <winuser.h>
LoadMenuIndirect(CONST MENUTEMPLATEA * lpMenuTemplate) WINUSERAPI HMENU WINAPI <winuser.h>
LoadMenuIndirectA(CONST MENUTEMPLATEA * lpMenuTemplate) WINUSERAPI HMENU WINAPI <winuser.h>
LoadMenuIndirectW(CONST MENUTEMPLATEW * lpMenuTemplate) WINUSERAPI HMENU WINAPI <winuser.h>
LoadMenuW(HINSTANCE hInstance,LPCWSTR lpMenuName) WINUSERAPI HMENU WINAPI <winuser.h>
LoadModule(LPCSTR lpModuleName,LPVOID lpParameterBlock) WINBASEAPI DWORD WINAPI <winbase.h>
LoadMUILibrary(LPCTSTR pszFullModuleName,DWORD dwLangConvention,LANGID LangID) HINSTANCE WINAPI <muiload.h>
LoadPackagedLibrary(LPCWSTR lpwLibFileName,DWORD Reserved) WINBASEAPI HMODULE WINAPI <winbase.h>
LoadPerfCounterTextStrings(LPSTR lpCommandLine,WINBOOL bQuietModeArg) LOADPERF_FUNCTION <loadperf.h>
LoadPerfCounterTextStringsA(LPSTR lpCommandLine,WINBOOL bQuietModeArg) LOADPERF_FUNCTION <loadperf.h>
LoadPerfCounterTextStringsW(LPWSTR lpCommandLine,WINBOOL bQuietModeArg) LOADPERF_FUNCTION <loadperf.h>
LoadRegTypeLib(REFGUID rguid,WORD wVerMajor,WORD wVerMinor,LCID lcid,ITypeLib ** pptlib)WINOLEAUTAPI <oleauto.h>
LoadResource(HMODULE hModule,HRSRC hResInfo) WINBASEAPI HGLOBAL WINAPI <libloaderapi.h>
LoadString(HINSTANCE hInstance,UINT uID,LPSTR lpBuffer,int cchBufferMax) WINUSERAPI int WINAPI <winuser.h>
LoadStringA(HINSTANCE hInstance,UINT uID,LPSTR lpBuffer,int cchBufferMax) WINUSERAPI int WINAPI <winuser.h>
LoadStringByReference(DWORD Flags,PCWSTR Language,PCWSTR SourceString,PWSTR Buffer,ULONG cchBuffer,PCWSTR Directory,PULONG pcchBufferOut) WINBASEAPI WINBOOL WINAPI <winnls.h>
LoadStringFromStorage(LPCOLESTR pwszFileName,LPOLESTR * ppwszInitializationString)virtual HRESULT WINAPI <msdasc.h>
LoadStringW(HINSTANCE hInstance,UINT uID,LPWSTR lpBuffer,int cchBufferMax) WINUSERAPI int WINAPI <winuser.h>
LoadTypeLib(const OLECHAR * szFile,ITypeLib ** pptlib)WINOLEAUTAPI <oleauto.h>
LoadTypeLibEx(LPCOLESTR szFile,REGKIND regkind,ITypeLib ** pptlib)WINOLEAUTAPI <oleauto.h>
LoadTypeLibWithResolver(LPCOLESTR szFile,REGKIND regkind,ITypeLibResolver * pTlbResolver,ITypeLib ** pptlib)STDAPI <tlbref.h>
LoadURL(BSTR url)virtual HRESULT WINAPI <dhtmled.h>
LoadUserProfile(HANDLE hToken,LPPROFILEINFOA lpProfileInfo) USERENVAPI WINBOOL WINAPI <userenv.h>
LoadUserProfileA(HANDLE hToken,LPPROFILEINFOA lpProfileInfo) USERENVAPI WINBOOL WINAPI <userenv.h>
LoadUserProfileW(HANDLE hToken,LPPROFILEINFOW lpProfileInfo) USERENVAPI WINBOOL WINAPI <userenv.h>
LOBYTE(w)<minwindef.h>
LocalAlloc(UINT uFlags,SIZE_T uBytes) WINBASEAPI HLOCAL WINAPI <winbase.h>
LocalCompact(UINT uMinFree) WINBASEAPI SIZE_T WINAPI <winbase.h>
LocalDiscard(h)<minwinbase.h>
LOCALE_ENUMPROCA(LPSTR) typedef WINBOOL<winnls.h>
LOCALE_ENUMPROCEX(LPWSTR,DWORD,LPARAM) typedef WINBOOL<winnls.h>
LOCALE_ENUMPROCW(LPWSTR) typedef WINBOOL<winnls.h>
LocaleNameToLCID(LPCWSTR lpName,DWORD dwFlags) WINBASEAPI LCID WINAPI <winnls.h>
LocalFileTimeToFileTime(CONST FILETIME * lpLocalFileTime,LPFILETIME lpFileTime) WINBASEAPI WINBOOL WINAPI <fileapi.h>
LocalFlags(HLOCAL hMem) WINBASEAPI UINT WINAPI <winbase.h>
LocalFree(HLOCAL hMem) WINBASEAPI HLOCAL WINAPI <winbase.h>
LocalHandle(LPCVOID pMem) WINBASEAPI HLOCAL WINAPI <winbase.h>
LocalLock(HLOCAL hMem) WINBASEAPI LPVOID WINAPI <winbase.h>
LocalReAlloc(HLOCAL hMem,SIZE_T uBytes,UINT uFlags) WINBASEAPI HLOCAL WINAPI <winbase.h>
LocalShrink(HLOCAL hMem,UINT cbNewSize) WINBASEAPI SIZE_T WINAPI <winbase.h>
LocalSize(HLOCAL hMem) WINBASEAPI SIZE_T WINAPI <winbase.h>
LocalUnlock(HLOCAL hMem) WINBASEAPI WINBOOL WINAPI <winbase.h>
LocateCatalogs(char const * pwszScope,ULONG iBmk,char * pwszMachine,ULONG * pccMachine,char * pwszCat,ULONG * pccCat) STDAPI <ntquery.h>
LocateCatalogsA(char const * pwszScope,ULONG iBmk,char * pwszMachine,ULONG * pccMachine,char * pwszCat,ULONG * pccCat) STDAPI <ntquery.h>
LocateCatalogsW(WCHAR const * pwszScope,ULONG iBmk,WCHAR * pwszMachine,ULONG * pccMachine,WCHAR * pwszCat,ULONG * pccCat) STDAPI <ntquery.h>
LocateXStateFeature(PCONTEXT Context,DWORD FeatureId,PDWORD Length) WINBASEAPI PVOID WINAPI <winbase.h>
Lock() void <rpcasync.h>
Lock(void)virtual HRESULT WINAPI <rpcasync.h>
LockAStr(__LONG32 lSrcPos,__LONG32 lSrcLen,__LONG32 lFlags,UINT uCodePageIn,__LONG32 cchRequest,UINT * puCodePageOut,CHAR ** ppszDest,__LONG32 * pcchDest,__LONG32 * plDestLen)virtual HRESULT WINAPI <mlang.h>
LockBits(const Rect * rect,UINT flags,PixelFormat format,BitmapData * lockedBitmapData)__inline__ Status Bitmap::<gdiplusimpl.h>
LockBlob(HBLOB hBlob) DWORD __cdecl <netmon.h>
LockBuf(__LONG32 cchOffset,__LONG32 cchMaxLock,CHAR ** ppszBuf,__LONG32 * pcchBuf)virtual HRESULT WINAPI <mlang.h>
LockBuf(__LONG32 cchOffset,__LONG32 cchMaxLock,WCHAR ** ppszBuf,__LONG32 * pcchBuf)virtual HRESULT WINAPI <mlang.h>
LockClrVersion(FLockClrVersionCallback,FLockClrVersionCallback *,FLockClrVersionCallback *)HRESULT     WINAPI <mscoree.h>
LockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh) WINBASEAPI WINBOOL WINAPI <fileapi.h>
LockFileEx(HANDLE hFile,DWORD dwFlags,DWORD dwReserved,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <fileapi.h>
LockRegion(LONG libOffset,LONG cb,LONG dwLockType)virtual HRESULT WINAPI <scardssp.h>
LockResource(HGLOBAL hResData) WINBASEAPI LPVOID WINAPI <libloaderapi.h>
LockSCard(void)virtual HRESULT WINAPI <scardssp.h>
LockSegment(w)<winbase.h>
LockServiceDatabase(SC_HANDLE hSCManager) WINADVAPI SC_LOCK WINAPI <winsvc.h>
LockSetForegroundWindow(UINT uLockCode) WINUSERAPI WINBOOL WINAPI <winuser.h>
LockSurface(BYTE ** lpSurface)virtual HRESULT WINAPI <strmif.h>
LockWindowUpdate(HWND hWndLock) WINUSERAPI WINBOOL WINAPI <winuser.h>
LockWorkStation(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
LockWStr(__LONG32 lSrcPos,__LONG32 lSrcLen,__LONG32 lFlags,__LONG32 cchRequest,WCHAR ** ppszDest,__LONG32 * pcchDest,__LONG32 * plDestLen)virtual HRESULT WINAPI <mlang.h>
LOG(arg)<msplog.h>
Log(const BSTR Message)virtual HRESULT WINAPI <wia.h>
Log(LONG lFlags,LONG lResID,LONG lDetail,BSTR bstrText)virtual HRESULT WINAPI <wia.h>
LogCustomInformation(DWORD cCount,PCUSTOM_LOG_DATA pCustomLogData,LPSTR szHeaderSuffix) virtual HRESULT WINAPI <ilogobj.h>
LogError(DWORD dwErrorLevel,LPCWSTR lpcErrorText,LPSYNCMGRLOGERRORINFO lpSyncLogError)virtual HRESULT WINAPI <rtutils.h>
LogError(DWORD dwMessageId,DWORD cNumberOfSubStrings,LPSTR * plpwsSubStrings,DWORD dwErrorCode) VOID WINAPI <rtutils.h>
LogErrorA(DWORD dwMessageId,DWORD cNumberOfSubStrings,LPSTR * plpwsSubStrings,DWORD dwErrorCode) VOID WINAPI <rtutils.h>
LogErrorW(DWORD dwMessageId,DWORD cNumberOfSubStrings,LPWSTR * plpwsSubStrings,DWORD dwErrorCode) VOID <rtutils.h>
LogEvent(DWORD wEventType,DWORD dwMessageId,DWORD cNumberOfSubStrings,LPSTR * plpwsSubStrings) VOID WINAPI <rtutils.h>
LogEventA(DWORD wEventType,DWORD dwMessageId,DWORD cNumberOfSubStrings,LPSTR * plpwsSubStrings) VOID WINAPI <rtutils.h>
LogEventW(DWORD wEventType,DWORD dwMessageId,DWORD cNumberOfSubStrings,LPWSTR * plpwsSubStrings) VOID <rtutils.h>
LogEx(LONG lMethodId,LONG lFlags,LONG lResID,LONG lDetail,BSTR bstrText)virtual HRESULT WINAPI <wia.h>
LoggingEnumerateUsers(VARIANT * varVal)virtual HRESULT WINAPI <gpmgmt.h>
LogicalToPhysicalPoint(HWND hWnd,LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
LogInformation(IInetLogInformation * pLogObj) virtual HRESULT WINAPI <ilogobj.h>
LoginIScsiTargetA(PCHAR TargetName,BOOLEAN IsInformationalSession,PCHAR InitiatorName,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA TargetPortal,ISCSI_SECURITY_FLAGS SecurityFlags,PISCSI_TARGET_MAPPINGA Mappings,PISCSI_LOGIN_OPTIONS LoginOptions,ULONG KeySize,PCHAR Key,BOOLEAN IsPersistent,PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId)HRESULT WINAPI <iscsidsc.h>
LoginIScsiTargetW(PWCHAR TargetName,BOOLEAN IsInformationalSession,PWCHAR InitiatorName,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALW TargetPortal,ISCSI_SECURITY_FLAGS SecurityFlags,PISCSI_TARGET_MAPPINGW Mappings,PISCSI_LOGIN_OPTIONS LoginOptions,ULONG KeySize,PCHAR Key,BOOLEAN IsPersistent,PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId)HRESULT WINAPI <iscsidsc.h>
Logoff(BSTR bstrUserName)virtual HRESULT WINAPI <sensevts.h>
Logoff(BSTR bstrUserName,DWORD dwSessionId)virtual HRESULT WINAPI <sensevts.h>
Logoff(void)virtual HRESULT WINAPI <sensevts.h>
Logon(BSTR bstrAddress=L"",BSTR bstrName=L"",BSTR bstrPassword=L"",BSTR bstrDomain=L"")virtual HRESULT WINAPI <strmif.h>
Logon(BSTR bstrUserName)virtual HRESULT WINAPI <strmif.h>
Logon(BSTR bstrUserName,DWORD dwSessionId)virtual HRESULT WINAPI <strmif.h>
Logon(HANDLE hCurrentUser)virtual HRESULT WINAPI <strmif.h>
Logon(VARIANT varParameter)virtual HRESULT WINAPI <strmif.h>
LogonSMTP(VARIANT DisplayName,VARIANT Address)virtual HRESULT WINAPI <cdonts.h>
LogonUser(LPCSTR lpszUsername,LPCSTR lpszDomain,LPCSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken) WINADVAPI WINBOOL WINAPI <winbase.h>
LogonUserA(LPCSTR lpszUsername,LPCSTR lpszDomain,LPCSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken) WINADVAPI WINBOOL WINAPI <winbase.h>
LogonUserEx(LPCSTR lpszUsername,LPCSTR lpszDomain,LPCSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken,PSID * ppLogonSid,PVOID * ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits) WINADVAPI WINBOOL WINAPI <winbase.h>
LogonUserExA(LPCSTR lpszUsername,LPCSTR lpszDomain,LPCSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken,PSID * ppLogonSid,PVOID * ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits) WINADVAPI WINBOOL WINAPI <winbase.h>
LogonUserExW(LPCWSTR lpszUsername,LPCWSTR lpszDomain,LPCWSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken,PSID * ppLogonSid,PVOID * ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits) WINADVAPI WINBOOL WINAPI <winbase.h>
LogonUserW(LPCWSTR lpszUsername,LPCWSTR lpszDomain,LPCWSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken) WINADVAPI WINBOOL WINAPI <winbase.h>
Logout(void)virtual HRESULT WINAPI <strmif.h>
LogoutIScsiTarget(PISCSI_UNIQUE_SESSION_ID UniqueSessionId)HRESULT WINAPI <iscsidsc.h>
LogPrint(DWORD dwDbgLevel,LPCSTR DbgMessage,...)void NTAPI <msplog.h>
LogTailAdvanceFailure(HANDLE hLog,DWORD dwReason)WINBOOL WINAPI <clfsmgmtw32.h>
LogTimeProvEventFunc(WORD wType,WCHAR * wszProvName,WCHAR * wszMessage) typedef HRESULT<timeprov.h>
LONG(CALLBACK * GetData)<winsplp.h>
LONG(CALLBACK * PutData)<winsplp.h>
LONG(CALLBACK * Status)<winsplp.h>
LONG(WINAPI * fpCloseKey) <winsplp.h>
LONG(WINAPI * fpCreateKey) <winsplp.h>
LONG(WINAPI * fpDeleteKey) <winsplp.h>
LONG(WINAPI * fpDeleteValue) <winsplp.h>
LONG(WINAPI * fpEnumKey) <winsplp.h>
LONG(WINAPI * fpEnumValue) <winsplp.h>
LONG(WINAPI * fpOpenKey) <winsplp.h>
LONG(WINAPI * fpQueryInfoKey) <winsplp.h>
LONG(WINAPI * fpQueryValue) <winsplp.h>
LONG(WINAPI * fpSetValue) <winsplp.h>
LONG(WINAPI * GetObjectCount) <winsplp.h>
LongToHandle(const __LONG32 h) static __inline void<basetsd.h>
LongToHandle(h)<basetsd.h>
LongToPtr(const __LONG32 l) static __inline void<basetsd.h>
LongToPtr(l)<basetsd.h>
LONIBBLE(b)<netmon.h>
LOOKASIDE_CHECK(f)<wdm.h>
LOOKASIDE_CHECK(Future)<wdm.h>
LOOKASIDE_CHECK(Tag)<wdm.h>
LOOKASIDE_CHECK(TotalFrees)<wdm.h>
Lookup(ARG_KEY key,VALUE & rValue)WINBOOL CDXMap<txdtc.h>
Lookup(ITransaction ** ppTransaction)virtual HRESULT WINAPI <txdtc.h>
Lookup(XID * pXID,ITransaction ** ppTransaction)virtual HRESULT WINAPI <txdtc.h>
LookupAccountName(LPCSTR lpSystemName,LPCSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountNameA(LPCSTR lpSystemName,LPCSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountNameLocal(LPCSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountNameLocal(n, s, cs, d, cd, u)<winbase.h>
LookupAccountNameLocalA(LPCSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountNameLocalW(LPCWSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPWSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountNameW(LPCWSTR lpSystemName,LPCWSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPWSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountSid(LPCSTR lpSystemName,PSID Sid,LPSTR Name,LPDWORD cchName,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountSidA(LPCSTR lpSystemName,PSID Sid,LPSTR Name,LPDWORD cchName,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountSidLocal(PSID Sid,LPSTR Name,LPDWORD cchName,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountSidLocal(s, n, cn, d, cd, u)<winbase.h>
LookupAccountSidLocalA(PSID Sid,LPSTR Name,LPDWORD cchName,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountSidLocalW(PSID Sid,LPWSTR Name,LPDWORD cchName,LPWSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupAccountSidW(LPCWSTR lpSystemName,PSID Sid,LPWSTR Name,LPDWORD cchName,LPWSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupByteSetString(LPSET lpSet,BYTE Value) LPBYTE WINAPI <netmon.h>
LookupDwordSetString(LPSET lpSet,DWORD Value) LPBYTE WINAPI <netmon.h>
LookupIconIdFromDirectory(PBYTE presbits,WINBOOL fIcon) WINUSERAPI int WINAPI <winuser.h>
LookupIconIdFromDirectoryEx(PBYTE presbits,WINBOOL fIcon,int cxDesired,int cyDesired,UINT Flags) WINUSERAPI int WINAPI <winuser.h>
LookupPersistentTcpPortReservation(USHORT StartPort,USHORT NumberOfPorts,PULONG64 Token) ULONG WINAPI <iphlpapi.h>
LookupPersistentUdpPortReservation(USHORT StartPort,USHORT NumberOfPorts,PULONG64 Token) ULONG WINAPI <iphlpapi.h>
LookupPrivilegeDisplayName(LPCSTR lpSystemName,LPCSTR lpName,LPSTR lpDisplayName,LPDWORD cchDisplayName,LPDWORD lpLanguageId) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeDisplayNameA(LPCSTR lpSystemName,LPCSTR lpName,LPSTR lpDisplayName,LPDWORD cchDisplayName,LPDWORD lpLanguageId) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeDisplayNameW(LPCWSTR lpSystemName,LPCWSTR lpName,LPWSTR lpDisplayName,LPDWORD cchDisplayName,LPDWORD lpLanguageId) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeName(LPCSTR lpSystemName,PLUID lpLuid,LPSTR lpName,LPDWORD cchName) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeNameA(LPCSTR lpSystemName,PLUID lpLuid,LPSTR lpName,LPDWORD cchName) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeNameW(LPCWSTR lpSystemName,PLUID lpLuid,LPWSTR lpName,LPDWORD cchName) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeValue(LPCSTR lpSystemName,LPCSTR lpName,PLUID lpLuid) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeValueA(LPCSTR lpSystemName,LPCSTR lpName,PLUID lpLuid) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupPrivilegeValueW(LPCWSTR lpSystemName,LPCWSTR lpName,PLUID lpLuid) WINADVAPI WINBOOL WINAPI <winbase.h>
LookupQueue(VARIANT * QueueGuid,VARIANT * ServiceTypeGuid,VARIANT * Label,VARIANT * CreateTime,VARIANT * ModifyTime,VARIANT * RelServiceType,VARIANT * RelLabel,VARIANT * RelCreateTime,VARIANT * RelModifyTime,IMSMQQueueInfos ** ppqinfos)virtual HRESULT WINAPI <mqoai.h>
LookupQueue(VARIANT * QueueGuid,VARIANT * ServiceTypeGuid,VARIANT * Label,VARIANT * CreateTime,VARIANT * ModifyTime,VARIANT * RelServiceType,VARIANT * RelLabel,VARIANT * RelCreateTime,VARIANT * RelModifyTime,IMSMQQueueInfos2 ** ppqinfos)virtual HRESULT WINAPI <mqoai.h>
LookupQueue(VARIANT * QueueGuid,VARIANT * ServiceTypeGuid,VARIANT * Label,VARIANT * CreateTime,VARIANT * ModifyTime,VARIANT * RelServiceType,VARIANT * RelLabel,VARIANT * RelCreateTime,VARIANT * RelModifyTime,VARIANT * MulticastAddress,VARIANT * RelMulticastAddress,IMSMQQueueInfos3 ** ppqinfos)virtual HRESULT WINAPI <mqoai.h>
LookupQueue_v2(VARIANT * QueueGuid,VARIANT * ServiceTypeGuid,VARIANT * Label,VARIANT * CreateTime,VARIANT * ModifyTime,VARIANT * RelServiceType,VARIANT * RelLabel,VARIANT * RelCreateTime,VARIANT * RelModifyTime,IMSMQQueueInfos3 ** ppqinfos)virtual HRESULT WINAPI <mqoai.h>
LookupSecurityDescriptorParts(PTRUSTEE_A * ppOwner,PTRUSTEE_A * ppGroup,PULONG pcCountOfAccessEntries,PEXPLICIT_ACCESS_A * ppListOfAccessEntries,PULONG pcCountOfAuditEntries,PEXPLICIT_ACCESS_A * ppListOfAuditEntries,PSECURITY_DESCRIPTOR pSD) WINADVAPI DWORD WINAPI <aclapi.h>
LookupSecurityDescriptorPartsA(PTRUSTEE_A * ppOwner,PTRUSTEE_A * ppGroup,PULONG pcCountOfAccessEntries,PEXPLICIT_ACCESS_A * ppListOfAccessEntries,PULONG pcCountOfAuditEntries,PEXPLICIT_ACCESS_A * ppListOfAuditEntries,PSECURITY_DESCRIPTOR pSD) WINADVAPI DWORD WINAPI <aclapi.h>
LookupSecurityDescriptorPartsW(PTRUSTEE_W * ppOwner,PTRUSTEE_W * ppGroup,PULONG pcCountOfAccessEntries,PEXPLICIT_ACCESS_W * ppListOfAccessEntries,PULONG pcCountOfAuditEntries,PEXPLICIT_ACCESS_W * ppListOfAuditEntries,PSECURITY_DESCRIPTOR pSD) WINADVAPI DWORD WINAPI <aclapi.h>
LookupWordSetString(LPSET lpSet,WORD Value) LPBYTE WINAPI <netmon.h>
LOW_NIBBLE(Byte)<ndrtypes.h>
LowerButtonSelect(void)virtual HRESULT WINAPI <strmif.h>
LOWORD(l)<minwindef.h>
lParam(WPARAM wParam,LPARAM)typedef void __stdcall SPNOTIFYCALLBACK<wtypes.h>
LPBASEBROWSERDATA(WINAPI * PutBaseBrowserData) <shdeprecated.h>
LPBLOCKINGCALLBACK(DWORD_PTR dwContext) typedef WINBOOL<ws2spi.h>
LpbOfTrp(_p)<tnef.h>
LPCCHOOKPROC(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPCFHOOKPROC(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPCONDITIONPROC(LPWSABUF lpCallerId,LPWSABUF lpCallerData,LPQOS lpSQOS,LPQOS lpGQOS,LPWSABUF lpCalleeId,LPWSABUF lpCalleeData,GROUP * g,DWORD_PTR dwCallbackData) typedef int<winsock2.h>
LPCQADDFORMSPROC(LPARAM lParam,LPCQFORM pForm)typedef HRESULT<cmnquery.h>
LPCQADDPAGESPROC(LPARAM lParam,REFCLSID clsidForm,LPCQPAGE pPage)typedef HRESULT<cmnquery.h>
LPCQPAGEPROC(LPCQPAGE pPage,HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam)typedef HRESULT<cmnquery.h>
LPD3DENUMDEVICESCALLBACK(GUID * guid,char * description,char * name,D3DDEVICEDESC * hal_desc,D3DDEVICEDESC * hel_desc,void * ctx)typedef HRESULT<d3dcaps.h>
LPD3DENUMDEVICESCALLBACK7(char * description,char * name,D3DDEVICEDESC7 * desc,void * ctx)typedef HRESULT<d3dcaps.h>
LPD3DENUMPIXELFORMATSCALLBACK(DDPIXELFORMAT * format,void * ctx)typedef HRESULT<d3dtypes.h>
LPD3DENUMTEXTUREFORMATSCALLBACK(DDSURFACEDESC * surface_desc,void * ctx)typedef HRESULT<d3dtypes.h>
LPD3DHAL_CLEAR2CB(LPD3DHAL_CLEAR2DATA)typedef DWORD<d3dhal.h>
LPD3DHAL_CLEARCB(LPD3DHAL_CLEARDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_CONTEXTCREATECB(LPD3DHAL_CONTEXTCREATEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_CONTEXTDESTROYALLCB(LPD3DHAL_CONTEXTDESTROYALLDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_CONTEXTDESTROYCB(LPD3DHAL_CONTEXTDESTROYDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_DRAWONEINDEXEDPRIMITIVECB(LPD3DHAL_DRAWONEINDEXEDPRIMITIVEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_DRAWONEPRIMITIVECB(LPD3DHAL_DRAWONEPRIMITIVEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_DRAWPRIMITIVES2CB(LPD3DHAL_DRAWPRIMITIVES2DATA)typedef DWORD<d3dhal.h>
LPD3DHAL_DRAWPRIMITIVESCB(LPD3DHAL_DRAWPRIMITIVESDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_GETSTATECB(LPD3DHAL_GETSTATEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_RENDERPRIMITIVECB(LPD3DHAL_RENDERPRIMITIVEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_RENDERSTATECB(LPD3DHAL_RENDERSTATEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_SCENECAPTURECB(LPD3DHAL_SCENECAPTUREDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_SETRENDERTARGETCB(LPD3DHAL_SETRENDERTARGETDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_TEXTURECREATECB(LPD3DHAL_TEXTURECREATEDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_TEXTUREDESTROYCB(LPD3DHAL_TEXTUREDESTROYDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_TEXTUREGETSURFCB(LPD3DHAL_TEXTUREGETSURFDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_TEXTURESWAPCB(LPD3DHAL_TEXTURESWAPDATA)typedef DWORD<d3dhal.h>
LPD3DHAL_VALIDATETEXTURESTAGESTATECB(LPD3DHAL_VALIDATETEXTURESTAGESTATEDATA)typedef DWORD<d3dhal.h>
LPD3DVALIDATECALLBACK(void * ctx,DWORD offset)typedef HRESULT<d3dtypes.h>
LPD3DXFILL2D(D3DXVECTOR4 * out,const D3DXVECTOR2 * texcoord,const D3DXVECTOR2 * texelsize,void * data)typedef void<d3dx9tex.h>
LPD3DXFILL3D(D3DXVECTOR4 * out,const D3DXVECTOR3 * texcoord,const D3DXVECTOR3 * texelsize,void * data)typedef void<d3dx9tex.h>
LPD3DXIMTSIGNALCALLBACK(const D3DXVECTOR2 *,UINT,UINT,void *,FLOAT *)typedef HRESULT<d3dx9mesh.h>
LPD3DXSHPRTSIMCB(float complete,void * ctx)typedef HRESULT<d3dx9mesh.h>
LPD3DXUVATLASCB(float complete,void * ctx)typedef HRESULT<d3dx9mesh.h>
LPDAOBINDFUNC(ULONG cb,DWORD dwUser,LPVOID * ppData)typedef HRESULT<daogetrw.h>
LPDD32BITDRIVERINIT(DWORD dwContext)typedef DWORD<ddrawi.h>
LPDDENUMCALLBACKA(GUID *,LPSTR,LPSTR,LPVOID)typedef BOOL<ddraw.h>
LPDDENUMCALLBACKEXA(GUID *,LPSTR,LPSTR,LPVOID,HMONITOR)typedef BOOL<ddraw.h>
LPDDENUMCALLBACKEXW(GUID *,LPWSTR,LPWSTR,LPVOID,HMONITOR)typedef BOOL<ddraw.h>
LPDDENUMCALLBACKW(GUID *,LPWSTR,LPWSTR,LPVOID)typedef BOOL<ddraw.h>
LPDDENUMMODESCALLBACK(LPDDSURFACEDESC,LPVOID)typedef HRESULT<ddraw.h>
LPDDENUMMODESCALLBACK2(LPDDSURFACEDESC2,LPVOID)typedef HRESULT<ddraw.h>
LPDDENUMSURFACESCALLBACK(LPDIRECTDRAWSURFACE,LPDDSURFACEDESC,LPVOID)typedef HRESULT<ddraw.h>
LPDDENUMSURFACESCALLBACK2(LPDIRECTDRAWSURFACE4,LPDDSURFACEDESC2,LPVOID)typedef HRESULT<ddraw.h>
LPDDENUMSURFACESCALLBACK7(LPDIRECTDRAWSURFACE7,LPDDSURFACEDESC2,LPVOID)typedef HRESULT<ddraw.h>
LPDDGAMMACALIBRATORPROC(LPDDGAMMARAMP,LPBYTE)typedef HRESULT<ddrawi.h>
LPDDHAL_CANCREATESURFACE(LPDDHAL_CANCREATESURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_CREATEPALETTE(LPDDHAL_CREATEPALETTEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_CREATESURFACE(LPDDHAL_CREATESURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_CREATESURFACEEX(LPDDHAL_CREATESURFACEEXDATA)typedef DWORD<ddrawi.h>
LPDDHAL_DESTROYDDLOCAL(LPDDHAL_DESTROYDDLOCALDATA)typedef DWORD<ddrawi.h>
LPDDHAL_DESTROYDRIVER(LPDDHAL_DESTROYDRIVERDATA)typedef DWORD<ddrawi.h>
LPDDHAL_FLIPTOGDISURFACE(LPDDHAL_FLIPTOGDISURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_GETAVAILDRIVERMEMORY(LPDDHAL_GETAVAILDRIVERMEMORYDATA)typedef DWORD<ddrawi.h>
LPDDHAL_GETDRIVERINFO(LPDDHAL_GETDRIVERINFODATA)typedef DWORD<ddrawi.h>
LPDDHAL_GETDRIVERSTATE(LPDDHAL_GETDRIVERSTATEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_GETHEAPALIGNMENT(LPDDHAL_GETHEAPALIGNMENTDATA)typedef DWORD<ddrawi.h>
LPDDHAL_GETSCANLINE(LPDDHAL_GETSCANLINEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_SETCOLORKEY(LPDDHAL_DRVSETCOLORKEYDATA)typedef DWORD<ddrawi.h>
LPDDHAL_SETEXCLUSIVEMODE(LPDDHAL_SETEXCLUSIVEMODEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_SETINFO(LPDDHALINFO lpDDHalInfo,BOOL reset)typedef BOOL<ddrawi.h>
LPDDHAL_SETMODE(LPDDHAL_SETMODEDATA)typedef DWORD<ddrawi.h>
LPDDHAL_UPDATENONLOCALHEAP(LPDDHAL_UPDATENONLOCALHEAPDATA)typedef DWORD<ddrawi.h>
LPDDHAL_VIDMEMALLOC(LPDDRAWI_DIRECTDRAW_GBL lpDD,int heap,DWORD dwWidth,DWORD dwHeight)typedef FLATPTR<ddrawi.h>
LPDDHAL_VIDMEMFREE(LPDDRAWI_DIRECTDRAW_GBL lpDD,int heap,FLATPTR fpMem)typedef void<ddrawi.h>
LPDDHAL_WAITFORVERTICALBLANK(LPDDHAL_WAITFORVERTICALBLANKDATA)typedef DWORD<ddrawi.h>
LPDDHALEXEBUFCB_CANCREATEEXEBUF(LPDDHAL_CANCREATESURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHALEXEBUFCB_CREATEEXEBUF(LPDDHAL_CREATESURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHALEXEBUFCB_DESTROYEXEBUF(LPDDHAL_DESTROYSURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHALEXEBUFCB_LOCKEXEBUF(LPDDHAL_LOCKDATA)typedef DWORD<ddrawi.h>
LPDDHALEXEBUFCB_UNLOCKEXEBUF(LPDDHAL_UNLOCKDATA)typedef DWORD<ddrawi.h>
LPDDHALPALCB_DESTROYPALETTE(LPDDHAL_DESTROYPALETTEDATA)typedef DWORD<ddrawi.h>
LPDDHALPALCB_SETENTRIES(LPDDHAL_SETENTRIESDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_ADDATTACHEDSURFACE(LPDDHAL_ADDATTACHEDSURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_BLT(LPDDHAL_BLTDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_DESTROYSURFACE(LPDDHAL_DESTROYSURFACEDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_FLIP(LPDDHAL_FLIPDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_GETBLTSTATUS(LPDDHAL_GETBLTSTATUSDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_GETFLIPSTATUS(LPDDHAL_GETFLIPSTATUSDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_LOCK(LPDDHAL_LOCKDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_SETCLIPLIST(LPDDHAL_SETCLIPLISTDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_SETCOLORKEY(LPDDHAL_SETCOLORKEYDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_SETOVERLAYPOSITION(LPDDHAL_SETOVERLAYPOSITIONDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_SETPALETTE(LPDDHAL_SETPALETTEDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_UNLOCK(LPDDHAL_UNLOCKDATA)typedef DWORD<ddrawi.h>
LPDDHALSURFCB_UPDATEOVERLAY(LPDDHAL_UPDATEOVERLAYDATA)typedef DWORD<ddrawi.h>
LPDF(int,LPVOID,LPVOID,int,DWORD,DWORD) typedef int<penwin.h>
LPDHCP_CONTROL(DWORD dwControlCode,LPVOID lpReserved) typedef DWORD<dhcpssdk.h>
LPDHCP_DELETE_CLIENT(DWORD IpAddress,LPBYTE HwAddress,ULONG HwAddressLength,DWORD Reserved,DWORD ClientType) typedef DWORD<dhcpssdk.h>
LPDHCP_DROP_SEND(LPBYTE * Packet,DWORD * PacketSize,DWORD ControlCode,DWORD IpAddress,LPVOID Reserved,LPVOID PktContext) typedef DWORD<dhcpssdk.h>
LPDHCP_ENTRY_POINT_FUNC(LPWSTR ChainDlls,DWORD CalloutVersion,LPDHCP_CALLOUT_TABLE CalloutTbl) typedef DWORD<dhcpssdk.h>
LPDHCP_GIVE_ADDRESS(LPBYTE Packet,DWORD PacketSize,DWORD ControlCode,DWORD IpAddress,DWORD AltAddress,DWORD AddrType,DWORD LeaseTime,LPVOID Reserved,LPVOID PktContext) typedef DWORD<dhcpssdk.h>
LPDHCP_HANDLE_OPTIONS(LPBYTE Packet,DWORD PacketSize,LPVOID Reserved,LPVOID PktContext,LPDHCP_SERVER_OPTIONS ServerOptions) typedef DWORD<dhcpssdk.h>
LPDHCP_NEWPKT(LPBYTE * Packet,DWORD * PacketSize,DWORD IpAddress,LPVOID Reserved,LPVOID * PktContext,LPBOOL ProcessIt) typedef DWORD<dhcpssdk.h>
LPDHCP_PROB(LPBYTE Packet,DWORD PacketSize,DWORD ControlCode,DWORD IpAddress,DWORD AltAddress,LPVOID Reserved,LPVOID PktContext) typedef DWORD<dhcpssdk.h>
LPDICONFIGUREDEVICESCALLBACK(LPUNKNOWN,LPVOID)typedef BOOL<dinput.h>
LPDIENUMCREATEDEFFECTOBJECTSCALLBACK(LPDIRECTINPUTEFFECT,LPVOID)typedef BOOL<dinput.h>
LPDIENUMDEVICEOBJECTSCALLBACKA(LPCDIDEVICEOBJECTINSTANCEA,LPVOID)typedef BOOL<dinput.h>
LPDIENUMDEVICEOBJECTSCALLBACKW(LPCDIDEVICEOBJECTINSTANCEW,LPVOID)typedef BOOL<dinput.h>
LPDIENUMDEVICESBYSEMANTICSCBA(LPCDIDEVICEINSTANCEA,LPDIRECTINPUTDEVICE8A,DWORD,DWORD,LPVOID)typedef BOOL<dinput.h>
LPDIENUMDEVICESBYSEMANTICSCBW(LPCDIDEVICEINSTANCEW,LPDIRECTINPUTDEVICE8W,DWORD,DWORD,LPVOID)typedef BOOL<dinput.h>
LPDIENUMDEVICESCALLBACKA(LPCDIDEVICEINSTANCEA,LPVOID)typedef BOOL<dinput.h>
LPDIENUMDEVICESCALLBACKW(LPCDIDEVICEINSTANCEW,LPVOID)typedef BOOL<dinput.h>
LPDIENUMEFFECTSCALLBACKA(LPCDIEFFECTINFOA,LPVOID)typedef BOOL<dinput.h>
LPDIENUMEFFECTSCALLBACKW(LPCDIEFFECTINFOW,LPVOID)typedef BOOL<dinput.h>
LPDIENUMEFFECTSINFILECALLBACK(LPCDIFILEEFFECT,LPVOID)typedef BOOL<dinput.h>
LPDIRECTDRAWENUMERATEEXA(LPDDENUMCALLBACKEXA lpCallback,LPVOID lpContext,DWORD dwFlags)typedef HRESULT<ddraw.h>
LPDIRECTDRAWENUMERATEEXW(LPDDENUMCALLBACKEXW lpCallback,LPVOID lpContext,DWORD dwFlags)typedef HRESULT<ddraw.h>
LPDNETADDR(const char *)typedef struct dn_naddr<ws2dnet.h>
LPDNETEOF(SOCKET)typedef int<ws2dnet.h>
LPDNETGETACC(const struct dnet_accent *)typedef struct dnet_accent<ws2dnet.h>
LPDNETGETALIAS(const char *)typedef char<ws2dnet.h>
LPDNETHTOA(const struct dn_naddr *)typedef char<ws2dnet.h>
LPDNETNTOA(const struct dn_naddr *)typedef char<ws2dnet.h>
LPDPENUMADDRESSCALLBACK(REFGUID guidDataType,DWORD dwDataSize,LPCVOID lpData,LPVOID lpContext)typedef WINBOOL<dplobby.h>
LPDPENUMCONNECTIONSCALLBACK(LPCGUID lpguidSP,LPVOID lpConnection,DWORD dwConnectionSize,LPCDPNAME lpName,DWORD dwFlags,LPVOID lpContext)typedef WINBOOL<dplay.h>
LPDPENUMDPCALLBACKA(LPGUID lpguidSP,LPSTR lpSPName,DWORD dwMajorVersion,DWORD dwMinorVersion,LPVOID lpContext)typedef WINBOOL<dplay.h>
LPDPENUMDPCALLBACKW(LPGUID lpguidSP,LPWSTR lpSPName,DWORD dwMajorVersion,DWORD dwMinorVersion,LPVOID lpContext)typedef WINBOOL<dplay.h>
LPDPENUMPLAYERSCALLBACK(DPID dpId,LPSTR lpFriendlyName,LPSTR lpFormalName,DWORD dwFlags,LPVOID lpContext)typedef WINBOOL<dplay.h>
LPDPENUMPLAYERSCALLBACK2(DPID dpId,DWORD dwPlayerType,LPCDPNAME lpName,DWORD dwFlags,LPVOID lpContext)typedef WINBOOL<dplay.h>
LPDPENUMSESSIONSCALLBACK(LPDPSESSIONDESC lpDPSessionDesc,LPVOID lpContext,LPDWORD lpdwTimeOut,DWORD dwFlags)typedef WINBOOL<dplay.h>
LPDPENUMSESSIONSCALLBACK2(LPCDPSESSIONDESC2 lpThisSD,LPDWORD lpdwTimeOut,DWORD dwFlags,LPVOID lpContext)typedef WINBOOL<dplay.h>
LPDPLENUMADDRESSTYPESCALLBACK(REFGUID guidDataType,LPVOID lpContext,DWORD dwFlags)typedef WINBOOL<dplobby.h>
LPDPLENUMLOCALAPPLICATIONSCALLBACK(LPCDPLAPPINFO lpAppInfo,LPVOID lpContext,DWORD dwFlags)typedef WINBOOL<dplobby.h>
LPDSENUMATTRIBUTES(LPARAM lParam,LPCWSTR pszAttributeName,LPCWSTR pszDisplayName,DWORD dwFlags)typedef HRESULT<dsclient.h>
LPDSENUMCALLBACKA(LPGUID,LPCSTR,LPCSTR,LPVOID)typedef WINBOOL<dsound.h>
LPDSENUMCALLBACKW(LPGUID,LPCWSTR,LPCWSTR,LPVOID)typedef WINBOOL<dsound.h>
LPFN_ACCEPT(SOCKET s,struct sockaddr * addr,int * addrlen) typedef SOCKET<winsock2.h>
LPFN_ACCEPTEX(SOCKET sListenSocket,SOCKET sAcceptSocket,PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,LPDWORD lpdwBytesReceived,LPOVERLAPPED lpOverlapped) typedef WINBOOL<mswsock.h>
LPFN_BIND(SOCKET s,const struct sockaddr * name,int namelen) typedef int<winsock2.h>
LPFN_CLOSESOCKET(SOCKET s) typedef int<winsock2.h>
LPFN_CONNECT(SOCKET s,const struct sockaddr * name,int namelen) typedef int<winsock2.h>
LPFN_CONNECTEX(SOCKET s,const struct sockaddr * name,int namelen,PVOID lpSendBuffer,DWORD dwSendDataLength,LPDWORD lpdwBytesSent,LPOVERLAPPED lpOverlapped) typedef WINBOOL<mswsock.h>
LPFN_DISCONNECTEX(SOCKET s,LPOVERLAPPED lpOverlapped,DWORD dwFlags,DWORD dwReserved) typedef WINBOOL<mswsock.h>
LPFN_FREEADDRINFO(struct addrinfo * ai) typedef void<ws2tcpip.h>
LPFN_FREEADDRINFOEXA(PADDRINFOEXA pAddrInfo) typedef void<ws2tcpip.h>
LPFN_FREEADDRINFOEXW(PADDRINFOEXW pAddrInfo) typedef void<ws2tcpip.h>
LPFN_FREEADDRINFOW(PADDRINFOW pAddrInfo) typedef void<ws2tcpip.h>
LPFN_GETACCEPTEXSOCKADDRS(PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,struct sockaddr ** LocalSockaddr,LPINT LocalSockaddrLength,struct sockaddr ** RemoteSockaddr,LPINT RemoteSockaddrLength) typedef VOID<mswsock.h>
LPFN_GETADDRINFO(const char * nodename,const char * servname,const struct addrinfo * hints,struct addrinfo ** res) typedef int<ws2tcpip.h>
LPFN_GETADDRINFOEXA(PCSTR pName,PCSTR pServiceName,DWORD dwNameSpace,LPGUID lpNspId,const ADDRINFOEXA * pHints,PADDRINFOEXA * ppResult,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle) typedef int<ws2tcpip.h>
LPFN_GETADDRINFOEXW(PCWSTR pName,PCWSTR pServiceName,DWORD dwNameSpace,LPGUID lpNspId,const ADDRINFOEXW * pHints,PADDRINFOEXW * ppResult,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle) typedef int<ws2tcpip.h>
LPFN_GETADDRINFOW(PCWSTR pNodeName,PCWSTR pServiceName,const ADDRINFOW * pHints,PADDRINFOW * ppResult) typedef int<ws2tcpip.h>
LPFN_GETHOSTBYADDR(const char * addr,int len,int type) typedef struct hostent<winsock2.h>
LPFN_GETHOSTBYNAME(const char * name) typedef struct hostent<winsock2.h>
LPFN_GETHOSTNAME(char * name,int namelen) typedef int<winsock2.h>
LPFN_GETNAMEINFO(const struct sockaddr * sa,socklen_t salen,char * host,DWORD hostlen,char * serv,DWORD servlen,int flags) typedef int<ws2tcpip.h>
LPFN_GETNAMEINFOW(const SOCKADDR * pSockaddr,socklen_t SockaddrLength,PWCHAR pNodeBuffer,DWORD NodeBufferSize,PWCHAR pServiceBuffer,DWORD ServiceBufferSize,INT Flags) typedef INT<ws2tcpip.h>
LPFN_GETPEERNAME(SOCKET s,struct sockaddr * name,int * namelen) typedef int<winsock2.h>
LPFN_GETPROTOBYNAME(const char * name) typedef struct protoent<winsock2.h>
LPFN_GETPROTOBYNUMBER(int number) typedef struct protoent<winsock2.h>
LPFN_GETSERVBYNAME(const char * name,const char * proto) typedef struct servent<winsock2.h>
LPFN_GETSERVBYPORT(int port,const char * proto) typedef struct servent<winsock2.h>
LPFN_GETSOCKNAME(SOCKET s,struct sockaddr * name,int * namelen) typedef int<winsock2.h>
LPFN_GETSOCKOPT(SOCKET s,int level,int optname,char * optval,int * optlen) typedef int<winsock2.h>
LPFN_HTONL(u_long hostlong) typedef u_long<winsock2.h>
LPFN_HTONS(u_short hostshort) typedef u_short<winsock2.h>
LPFN_INET_ADDR(const char * cp) typedef unsigned __LONG32<winsock2.h>
LPFN_INET_NTOA(struct in_addr in) typedef char<winsock2.h>
LPFN_IOCTLSOCKET(SOCKET s,__LONG32 cmd,u_long * argp) typedef int<winsock2.h>
LPFN_LISTEN(SOCKET s,int backlog) typedef int<winsock2.h>
LPFN_NSPAPI(VOID) typedef DWORD<nspapi.h>
LPFN_NTOHL(u_long netlong) typedef u_long<winsock2.h>
LPFN_NTOHS(u_short netshort) typedef u_short<winsock2.h>
LPFN_RECV(SOCKET s,char * buf,int len,int flags) typedef int<winsock2.h>
LPFN_RECVFROM(SOCKET s,char * buf,int len,int flags,struct sockaddr * from,int * fromlen) typedef int<winsock2.h>
LPFN_SELECT(int nfds,fd_set * readfds,fd_set * writefds,fd_set * exceptfds,const PTIMEVAL timeout) typedef int<winsock2.h>
LPFN_SEND(SOCKET s,const char * buf,int len,int flags) typedef int<winsock2.h>
LPFN_SENDTO(SOCKET s,const char * buf,int len,int flags,const struct sockaddr * to,int tolen) typedef int<winsock2.h>
LPFN_SETADDRINFOEXA(PCSTR pName,PCSTR pServiceName,SOCKET_ADDRESS * pAddresses,DWORD dwAddressCount,LPBLOB lpBlob,DWORD dwFlags,DWORD dwNameSpace,LPGUID lpNspId,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle) typedef int<ws2tcpip.h>
LPFN_SETADDRINFOEXW(PCWSTR pName,PCWSTR pServiceName,SOCKET_ADDRESS * pAddresses,DWORD dwAddressCount,LPBLOB lpBlob,DWORD dwFlags,DWORD dwNameSpace,LPGUID lpNspId,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle) typedef int<ws2tcpip.h>
LPFN_SETSOCKOPT(SOCKET s,int level,int optname,const char * optval,int optlen) typedef int<winsock2.h>
LPFN_SHUTDOWN(SOCKET s,int how) typedef int<winsock2.h>
LPFN_SOCKET(int af,int type,int protocol) typedef SOCKET<winsock2.h>
LPFN_TRANSMITFILE(SOCKET hSocket,HANDLE hFile,DWORD nNumberOfBytesToWrite,DWORD nNumberOfBytesPerSend,LPOVERLAPPED lpOverlapped,LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,DWORD dwReserved) typedef WINBOOL<mswsock.h>
LPFN_TRANSMITPACKETS(SOCKET hSocket,LPTRANSMIT_PACKETS_ELEMENT lpPacketArray,DWORD nElementCount,DWORD nSendSize,LPOVERLAPPED lpOverlapped,DWORD dwFlags) typedef WINBOOL<mswsock.h>
LPFN_WSAACCEPT(SOCKET s,struct sockaddr * addr,LPINT addrlen,LPCONDITIONPROC lpfnCondition,DWORD_PTR dwCallbackData) typedef SOCKET<winsock2.h>
LPFN_WSAADDRESSTOSTRINGA(LPSOCKADDR lpsaAddress,DWORD dwAddressLength,LPWSAPROTOCOL_INFOA lpProtocolInfo,LPSTR lpszAddressString,LPDWORD lpdwAddressStringLength) typedef INT<winsock2.h>
LPFN_WSAADDRESSTOSTRINGW(LPSOCKADDR lpsaAddress,DWORD dwAddressLength,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPWSTR lpszAddressString,LPDWORD lpdwAddressStringLength) typedef INT<winsock2.h>
LPFN_WSAASYNCGETHOSTBYADDR(HWND hWnd,u_int wMsg,const char * addr,int len,int type,char * buf,int buflen) typedef HANDLE<winsock2.h>
LPFN_WSAASYNCGETHOSTBYNAME(HWND hWnd,u_int wMsg,const char * name,char * buf,int buflen) typedef HANDLE<winsock2.h>
LPFN_WSAASYNCGETPROTOBYNAME(HWND hWnd,u_int wMsg,const char * name,char * buf,int buflen) typedef HANDLE<winsock2.h>
LPFN_WSAASYNCGETPROTOBYNUMBER(HWND hWnd,u_int wMsg,int number,char * buf,int buflen) typedef HANDLE<winsock2.h>
LPFN_WSAASYNCGETSERVBYNAME(HWND hWnd,u_int wMsg,const char * name,const char * proto,char * buf,int buflen) typedef HANDLE<winsock2.h>
LPFN_WSAASYNCGETSERVBYPORT(HWND hWnd,u_int wMsg,int port,const char * proto,char * buf,int buflen) typedef HANDLE<winsock2.h>
LPFN_WSAASYNCSELECT(SOCKET s,HWND hWnd,u_int wMsg,__LONG32 lEvent) typedef int<winsock2.h>
LPFN_WSACANCELASYNCREQUEST(HANDLE hAsyncTaskHandle) typedef int<winsock2.h>
LPFN_WSACANCELBLOCKINGCALL(void) typedef int<winsock2.h>
LPFN_WSACLEANUP(void) typedef int<winsock2.h>
LPFN_WSACLOSEEVENT(WSAEVENT hEvent) typedef WINBOOL<winsock2.h>
LPFN_WSACONNECT(SOCKET s,const struct sockaddr * name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS) typedef int<winsock2.h>
LPFN_WSACREATEEVENT(void) typedef WSAEVENT<winsock2.h>
LPFN_WSADUPLICATESOCKETA(SOCKET s,DWORD dwProcessId,LPWSAPROTOCOL_INFOA lpProtocolInfo) typedef int<winsock2.h>
LPFN_WSADUPLICATESOCKETW(SOCKET s,DWORD dwProcessId,LPWSAPROTOCOL_INFOW lpProtocolInfo) typedef int<winsock2.h>
LPFN_WSAENUMNAMESPACEPROVIDERSA(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOA lpnspBuffer) typedef INT<winsock2.h>
LPFN_WSAENUMNAMESPACEPROVIDERSW(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOW lpnspBuffer) typedef INT<winsock2.h>
LPFN_WSAENUMNETWORKEVENTS(SOCKET s,WSAEVENT hEventObject,LPWSANETWORKEVENTS lpNetworkEvents) typedef int<winsock2.h>
LPFN_WSAENUMPROTOCOLSA(LPINT lpiProtocols,LPWSAPROTOCOL_INFOA lpProtocolBuffer,LPDWORD lpdwBufferLength) typedef int<winsock2.h>
LPFN_WSAENUMPROTOCOLSW(LPINT lpiProtocols,LPWSAPROTOCOL_INFOW lpProtocolBuffer,LPDWORD lpdwBufferLength) typedef int<winsock2.h>
LPFN_WSAEVENTSELECT(SOCKET s,WSAEVENT hEventObject,__LONG32 lNetworkEvents) typedef int<winsock2.h>
LPFN_WSAGETLASTERROR(void) typedef int<winsock2.h>
LPFN_WSAGETOVERLAPPEDRESULT(SOCKET s,LPWSAOVERLAPPED lpOverlapped,LPDWORD lpcbTransfer,WINBOOL fWait,LPDWORD lpdwFlags) typedef WINBOOL<winsock2.h>
LPFN_WSAGETQOSBYNAME(SOCKET s,LPWSABUF lpQOSName,LPQOS lpQOS) typedef WINBOOL<winsock2.h>
LPFN_WSAGETSERVICECLASSINFOA(LPGUID lpProviderId,LPGUID lpServiceClassId,LPDWORD lpdwBufSize,LPWSASERVICECLASSINFOA lpServiceClassInfo) typedef INT<winsock2.h>
LPFN_WSAGETSERVICECLASSINFOW(LPGUID lpProviderId,LPGUID lpServiceClassId,LPDWORD lpdwBufSize,LPWSASERVICECLASSINFOW lpServiceClassInfo) typedef INT<winsock2.h>
LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA(LPGUID lpServiceClassId,LPSTR lpszServiceClassName,LPDWORD lpdwBufferLength) typedef INT<winsock2.h>
LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW(LPGUID lpServiceClassId,LPWSTR lpszServiceClassName,LPDWORD lpdwBufferLength) typedef INT<winsock2.h>
LPFN_WSAHTONL(SOCKET s,u_long hostlong,u_long * lpnetlong) typedef int<winsock2.h>
LPFN_WSAHTONS(SOCKET s,u_short hostshort,u_short * lpnetshort) typedef int<winsock2.h>
LPFN_WSAINSTALLSERVICECLASSA(LPWSASERVICECLASSINFOA lpServiceClassInfo) typedef INT<winsock2.h>
LPFN_WSAINSTALLSERVICECLASSW(LPWSASERVICECLASSINFOW lpServiceClassInfo) typedef INT<winsock2.h>
LPFN_WSAIOCTL(SOCKET s,DWORD dwIoControlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOutBuffer,DWORD cbOutBuffer,LPDWORD lpcbBytesReturned,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef int<winsock2.h>
LPFN_WSAISBLOCKING(void) typedef WINBOOL<winsock2.h>
LPFN_WSAJOINLEAF(SOCKET s,const struct sockaddr * name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS,DWORD dwFlags) typedef SOCKET<winsock2.h>
LPFN_WSALOOKUPSERVICEBEGINA(LPWSAQUERYSETA lpqsRestrictions,DWORD dwControlFlags,LPHANDLE lphLookup) typedef INT<winsock2.h>
LPFN_WSALOOKUPSERVICEBEGINW(LPWSAQUERYSETW lpqsRestrictions,DWORD dwControlFlags,LPHANDLE lphLookup) typedef INT<winsock2.h>
LPFN_WSALOOKUPSERVICEEND(HANDLE hLookup) typedef INT<winsock2.h>
LPFN_WSALOOKUPSERVICENEXTA(HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSETA lpqsResults) typedef INT<winsock2.h>
LPFN_WSALOOKUPSERVICENEXTW(HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSETW lpqsResults) typedef INT<winsock2.h>
LPFN_WSANSPIOCTL(HANDLE hLookup,DWORD dwControlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOutBuffer,DWORD cbOutBuffer,LPDWORD lpcbBytesReturned,LPWSACOMPLETION lpCompletion) typedef INT<winsock2.h>
LPFN_WSANTOHL(SOCKET s,u_long netlong,u_long * lphostlong) typedef int<winsock2.h>
LPFN_WSANTOHS(SOCKET s,u_short netshort,u_short * lphostshort) typedef int<winsock2.h>
LPFN_WSAPOLL(LPWSAPOLLFD fdarray,ULONG nfds,INT timeout) typedef INT<mswsock.h>
LPFN_WSAPROVIDERCONFIGCHANGE(LPHANDLE lpNotificationHandle,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef INT<winsock2.h>
LPFN_WSARECV(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesRecvd,LPDWORD lpFlags,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef int<winsock2.h>
LPFN_WSARECVDISCONNECT(SOCKET s,LPWSABUF lpInboundDisconnectData) typedef int<winsock2.h>
LPFN_WSARECVFROM(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesRecvd,LPDWORD lpFlags,struct sockaddr * lpFrom,LPINT lpFromlen,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef int<winsock2.h>
LPFN_WSARECVMSG(SOCKET s,LPWSAMSG lpMsg,LPDWORD lpdwNumberOfBytesRecvd,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef INT<mswsock.h>
LPFN_WSAREMOVESERVICECLASS(LPGUID lpServiceClassId) typedef INT<winsock2.h>
LPFN_WSARESETEVENT(WSAEVENT hEvent) typedef WINBOOL<winsock2.h>
LPFN_WSASEND(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesSent,DWORD dwFlags,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef int<winsock2.h>
LPFN_WSASENDDISCONNECT(SOCKET s,LPWSABUF lpOutboundDisconnectData) typedef int<winsock2.h>
LPFN_WSASENDMSG(SOCKET s,LPWSAMSG lpMsg,DWORD dwFlags,LPDWORD lpNumberOfBytesSent,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef INT<mswsock.h>
LPFN_WSASENDTO(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesSent,DWORD dwFlags,const struct sockaddr * lpTo,int iTolen,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) typedef int<winsock2.h>
LPFN_WSASETBLOCKINGHOOK(FARPROC lpBlockFunc) typedef FARPROC<winsock2.h>
LPFN_WSASETEVENT(WSAEVENT hEvent) typedef WINBOOL<winsock2.h>
LPFN_WSASETLASTERROR(int iError) typedef void<winsock2.h>
LPFN_WSASETSERVICEA(LPWSAQUERYSETA lpqsRegInfo,WSAESETSERVICEOP essoperation,DWORD dwControlFlags) typedef INT<winsock2.h>
LPFN_WSASETSERVICEW(LPWSAQUERYSETW lpqsRegInfo,WSAESETSERVICEOP essoperation,DWORD dwControlFlags) typedef INT<winsock2.h>
LPFN_WSASOCKETA(int af,int type,int protocol,LPWSAPROTOCOL_INFOA lpProtocolInfo,GROUP g,DWORD dwFlags) typedef SOCKET<winsock2.h>
LPFN_WSASOCKETW(int af,int type,int protocol,LPWSAPROTOCOL_INFOW lpProtocolInfo,GROUP g,DWORD dwFlags) typedef SOCKET<winsock2.h>
LPFN_WSASTARTUP(WORD wVersionRequested,LPWSADATA lpWSAData) typedef int<winsock2.h>
LPFN_WSASTRINGTOADDRESSA(LPSTR AddressString,INT AddressFamily,LPWSAPROTOCOL_INFOA lpProtocolInfo,LPSOCKADDR lpAddress,LPINT lpAddressLength) typedef INT<winsock2.h>
LPFN_WSASTRINGTOADDRESSW(LPWSTR AddressString,INT AddressFamily,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPSOCKADDR lpAddress,LPINT lpAddressLength) typedef INT<winsock2.h>
LPFN_WSAUNHOOKBLOCKINGHOOK(void) typedef int<winsock2.h>
LPFN_WSAWAITFORMULTIPLEEVENTS(DWORD cEvents,const WSAEVENT * lphEvents,WINBOOL fWaitAll,DWORD dwTimeout,WINBOOL fAlertable) typedef DWORD<winsock2.h>
LPFNACCESSIBLECHILDREN(IAccessible * paccContainer,LONG iChildStart,LONG cChildren,VARIANT * rgvarChildren,LONG * pcObtained) typedef HRESULT<oleacc.h>
LPFNACCESSIBLEOBJECTFROMPOINT(POINT ptScreen,IAccessible ** ppacc,VARIANT * pvarChild) typedef HRESULT<oleacc.h>
LPFNACCESSIBLEOBJECTFROMWINDOW(HWND hwnd,DWORD dwId,REFIID riid,void ** ppvObject) typedef HRESULT<oleacc.h>
LPFNADDPROPSHEETPAGE(HPROPSHEETPAGE,LPARAM) typedef WINBOOL<prsht.h>
LPFNADDPROPSHEETPAGES(LPVOID,LPFNADDPROPSHEETPAGE,LPARAM) typedef WINBOOL<prsht.h>
LPFNBUTTON(ULONG ulUIParam,LPVOID lpvContext,ULONG cbEntryID,LPENTRYID lpSelection,ULONG ulFlags) typedef SCODE<wabdefs.h>
LPFNCANUNLOADNOW(void)typedef HRESULT<combaseapi.h>
LPFNCCINFOA(LPCCINFOA acci) typedef UINT<custcntl.h>
LPFNCCINFOW(LPCCINFOW acci) typedef UINT<custcntl.h>
LPFNCCSIZETOTEXTA(DWORD flStyle,DWORD flExtStyle,HFONT hfont,LPSTR pszText) typedef INT<custcntl.h>
LPFNCCSIZETOTEXTW(DWORD flStyle,DWORD flExtStyle,HFONT hfont,LPWSTR pszText) typedef INT<custcntl.h>
LPFNCCSTYLEA(HWND hwndParent,LPCCSTYLEA pccs) typedef WINBOOL<custcntl.h>
LPFNCCSTYLEW(HWND hwndParent,LPCCSTYLEW pccs) typedef WINBOOL<custcntl.h>
LPFNCREATESTDACCESSIBLEOBJECT(HWND hwnd,LONG idObject,REFIID riid,void ** ppvObject) typedef HRESULT<oleacc.h>
LPFNDEVCAPS(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE) typedef DWORD<wingdi.h>
LPFNDEVMODE(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT) typedef UINT<wingdi.h>
LPFNDFMCALLBACK(IShellFolder * psf,HWND hwnd,IDataObject * pdtobj,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef HRESULT<shlobj.h>
LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA,LPVOID)typedef BOOL<dsconf.h>
LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA,LPVOID)typedef BOOL<dsconf.h>
LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA,LPVOID)typedef BOOL<dsconf.h>
LPFNGETCLASSOBJECT(REFCLSID,REFIID,LPVOID *)typedef HRESULT<combaseapi.h>
LPFNLRESULTFROMOBJECT(REFIID riid,WPARAM wParam,LPUNKNOWN punk) typedef LRESULT<oleacc.h>
LPFNOBJECTFROMLRESULT(LRESULT lResult,REFIID riid,WPARAM wParam,void ** ppvObject) typedef HRESULT<oleacc.h>
LPFNOLEUIHOOK(HWND,UINT,WPARAM,LPARAM) typedef UINT<oledlg.h>
LPFNPSPCALLBACKA(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEA * ppsp) typedef UINT<prsht.h>
LPFNPSPCALLBACKW(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEW * ppsp) typedef UINT<prsht.h>
LPFNRAWHOOK(LPPENPACKET) typedef WINBOOL<penwin.h>
LPFNVIEWCALLBACK(IShellView * psvOuter,IShellFolder * psf,HWND hwndMain,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef HRESULT<shlobj.h>
LPFRHOOKPROC(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPFUNCRESULTS(LPRCRESULT,REC) typedef int<penwin.h>
LPGETNODEADD(void)typedef struct dn_naddr<ws2dnet.h>
LPGETNODEBYADDR(const unsigned char * addr,int,int)typedef struct nodeent_f<ws2dnet.h>
LPGETNODEBYNAME(const char *)typedef struct nodeent_f<ws2dnet.h>
LPGETNODENAME(void)typedef char<ws2dnet.h>
LPGETTNEFSTREAMCODEPAGE(LPSTREAM lpStream,ULONG * lpulCodepage,ULONG * lpulSubCodepage) typedef HRESULT<tnef.h>
LPHANDLER_FUNCTION(DWORD dwControl) typedef VOID<winsvc.h>
LPHANDLER_FUNCTION_EX(DWORD dwControl,DWORD dwEventType,LPVOID lpEventData,LPVOID lpContext) typedef DWORD<winsvc.h>
lPitch(return value only)		LONG	<ksmedia.h>
LPM_AdmitRsvpMsg(RHANDLE PcmReqHandle,RSVP_HOP * pRecvdIntf,RSVP_MSG_OBJS * pRsvpMsgObjs,int RcvdRsvpMsgLength,UCHAR * RcvdRsvpMsg,ULONG * pulPcmActionFlags,POLICY_DECISION * pPolicyDecisions,void * Reserved) ULONG WINAPI <lpmapi.h>
LPM_CommitResv(RSVP_SESSION * RsvpSession,RSVP_HOP * FlowInstalledIntf,RESV_STYLE * RsvpStyle,int FilterSpecCount,FILTER_SPEC ** ppFilterSpecList,IS_FLOWSPEC * pMergedFlowSpec,ULONG CommitDecision) VOID WINAPI <lpmapi.h>
LPM_Deinitialize(LPM_HANDLE LpmHandle) ULONG WINAPI <lpmapi.h>
LPM_DeleteState(RSVP_HOP * pRcvdIfAddr,MSG_TYPE RsvpMsgType,RSVP_SESSION * pRsvpSession,RSVP_HOP * pRsvpFromHop,RESV_STYLE * pResvStyle,int FilterSpecCount,FILTER_SPEC ** ppFilterSpecList,int TearDownReason) VOID WINAPI <lpmapi.h>
LPM_GetRsvpObjects(RHANDLE PcmReqHandle,ULONG MaxPdSize,RSVP_HOP * SendingIntfAddr,RSVP_MSG_OBJS * pRsvpMsgObjs,int * pRsvpObjectsCount,RsvpObjHdr *** pppRsvpObjects,void * Reserved) ULONG WINAPI <lpmapi.h>
LPM_Initialize(LPM_HANDLE LpmHandle,LPM_INIT_INFO * pLpmInitInfo,DWORD * pLpmVersionNumber,PETYPE * pSupportedPeType,VOID * Reserved) ULONG WINAPI <lpmapi.h>
LPM_IpAddressTable(ULONG cIpAddrTable,LPMIPTABLE * pIpAddrTable) WINBOOL WINAPI <lpmapi.h>
LPMAPIFREEBUFFER(LPVOID pv) typedef ULONG<wabmem.h>
LPNETWORKCALLBACKPROC(UPDATE_EVENT) typedef DWORD<netmon.h>
LPNSPCLEANUP(LPGUID lpProviderId) typedef INT<ws2spi.h>
LPNSPGETSERVICECLASSINFO(LPGUID lpProviderId,LPDWORD lpdwBufSize,LPWSASERVICECLASSINFOW lpServiceClassInfo) typedef INT<ws2spi.h>
LPNSPINSTALLSERVICECLASS(LPGUID lpProviderId,LPWSASERVICECLASSINFOW lpServiceClassInfo) typedef INT<ws2spi.h>
LPNSPIOCTL(HANDLE hLookup,DWORD dwControlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOutBuffer,DWORD cbOutBuffer,LPDWORD lpcbBytesReturned,LPWSACOMPLETION lpCompletion,LPWSATHREADID lpThreadId) typedef INT<ws2spi.h>
LPNSPLOOKUPSERVICEBEGIN(LPGUID lpProviderId,LPWSAQUERYSETW lpqsRestrictions,LPWSASERVICECLASSINFOW lpServiceClassInfo,DWORD dwControlFlags,LPHANDLE lphLookup) typedef INT<ws2spi.h>
LPNSPLOOKUPSERVICEEND(HANDLE hLookup) typedef INT<ws2spi.h>
LPNSPLOOKUPSERVICENEXT(HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSETW lpqsResults) typedef INT<ws2spi.h>
LPNSPREMOVESERVICECLASS(LPGUID lpProviderId,LPGUID lpServiceClassId) typedef INT<ws2spi.h>
LPNSPSETSERVICE(LPGUID lpProviderId,LPWSASERVICECLASSINFOW lpServiceClassInfo,LPWSAQUERYSETW lpqsRegInfo,WSAESETSERVICEOP essOperation,DWORD dwControlFlags) typedef INT<ws2spi.h>
LPNSPSTARTUP(LPGUID lpProviderId,LPNSP_ROUTINE lpnspRoutines) typedef INT<ws2spi.h>
LPNSPV2CLEANUP(LPGUID lpProviderId,LPVOID pvClientSessionArg)typedef int<ws2spi.h>
LPNSPV2CLIENTSESSIONRUNDOWN(LPGUID lpProviderId,LPVOID pvClientSessionArg)typedef int<ws2spi.h>
LPNSPV2LOOKUPSERVICEBEGIN(LPGUID lpProviderId,LPWSAQUERYSET2W lpqsRestrictions,DWORD dwControlFlags,LPVOID lpvClientSessionArg,LPHANDLE lphLookup)typedef int<ws2spi.h>
LPNSPV2LOOKUPSERVICEEND(HANDLE hLookup)typedef int<ws2spi.h>
LPNSPV2LOOKUPSERVICENEXTEX(HANDLE hAsyncCall,HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSET2W lpqsResults)typedef int<ws2spi.h>
LPNSPV2SETSERVICEEX(HANDLE hAsyncCall,LPGUID lpProviderId,LPWSAQUERYSET2W lpqsRegInfo,WSAESETSERVICEOP essOperation,DWORD dwControlFlags,LPVOID lpvClientSessionArg)typedef int<ws2spi.h>
LPNSPV2STARTUP(LPGUID lpProviderId,LPVOID * ppvClientSessionArg)typedef int<ws2spi.h>
LPOCNCHKPROC(SCARDCONTEXT,SCARDHANDLE,PVOID) typedef WINBOOL<winscard.h>
LPOCNCONNPROCA(SCARDCONTEXT,LPSTR,LPSTR,PVOID) typedef SCARDHANDLE<winscard.h>
LPOCNCONNPROCW(SCARDCONTEXT,LPWSTR,LPWSTR,PVOID) typedef SCARDHANDLE<winscard.h>
LPOCNDSCPROC(SCARDCONTEXT,SCARDHANDLE,PVOID) typedef void<winscard.h>
LPOFNHOOKPROC(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPOPENSTREAMONFILE(LPALLOCATEBUFFER lpAllocateBuffer,LPFREEBUFFER lpFreeBuffer,ULONG ulFlags,LPTSTR lpszFileName,LPTSTR lpszPrefix,LPSTREAM * lppStream) typedef HRESULT<wabutil.h>
LPOPENTNEFSTREAM(LPVOID lpvSupport,LPSTREAM lpStream,LPTSTR lpszStreamName,ULONG ulFlags,LPMESSAGE lpMessage,WORD wKeyVal,LPITNEF * lppTNEF) typedef HRESULT<tnef.h>
LPOPENTNEFSTREAMEX(LPVOID lpvSupport,LPSTREAM lpStream,LPTSTR lpszStreamName,ULONG ulFlags,LPMESSAGE lpMessage,WORD wKeyVal,LPADRBOOK lpAdressBook,LPITNEF * lppTNEF) typedef HRESULT<tnef.h>
LPOVERLAPPED_COMPLETION_ROUTINE(DWORD dwErrorCode,DWORD dwNumberOfBytesTransfered,LPOVERLAPPED lpOverlapped) typedef VOID<minwinbase.h>
LPPAGEPAINTHOOK(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPPAGESETUPHOOK(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPPRINTHOOKPROC(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LPPROGRESS_ROUTINE(LARGE_INTEGER TotalFileSize,LARGE_INTEGER TotalBytesTransferred,LARGE_INTEGER StreamSize,LARGE_INTEGER StreamBytesTransferred,DWORD dwStreamNumber,DWORD dwCallbackReason,HANDLE hSourceFile,HANDLE hDestinationFile,LPVOID lpData) typedef DWORD<winbase.h>
LPRESOURCE_CALLBACK(HRESOURCE,HRESOURCE,PVOID) typedef DWORD<resapi.h>
LPRESOURCE_CALLBACK_EX(HCLUSTER,HRESOURCE,HRESOURCE,PVOID) typedef DWORD<resapi.h>
LPRGLPVOID(*)typedef LPVOID<dplay.h>
LPropCompareProp(LPSPropValue lpSPropValueA,LPSPropValue lpSPropValueB) STDAPI_<wabutil.h>
LPSAFEARRAY_UserFree(ULONG *,LPSAFEARRAY *)void            __RPC_USER <wincodec.h>
LPSAFEARRAY_UserMarshal(ULONG *,unsigned char *,LPSAFEARRAY *)unsigned char<wincodec.h>
LPSAFEARRAY_UserSize(ULONG *,ULONG,LPSAFEARRAY *)ULONG           __RPC_USER <wincodec.h>
LPSAFEARRAY_UserUnmarshal(ULONG *,unsigned char *,LPSAFEARRAY *)unsigned char<wincodec.h>
LPSERVICE_CALLBACK_PROC(LPARAM lParam,HANDLE hAsyncTaskHandle) typedef VOID<nspapi.h>
LPSERVICE_MAIN_FUNCTIONA(DWORD dwNumServicesArgs,LPSTR * lpServiceArgVectors) typedef VOID<winsvc.h>
LPSERVICE_MAIN_FUNCTIONW(DWORD dwNumServicesArgs,LPWSTR * lpServiceArgVectors) typedef VOID<winsvc.h>
LPSETUPHOOKPROC(HWND,UINT,WPARAM,LPARAM) typedef UINT_PTR<commdlg.h>
LpszOfTrp(_p)<tnef.h>
LPtoDP(HDC hdc,LPPOINT lppt,int c) WINGDIAPI WINBOOL WINAPI <wingdi.h>
LPTOOLBARITEM(WINAPI * _GetToolbarItem) <shdeprecated.h>
LptrpNext(_p)<tnef.h>
LpValFindProp(ULONG ulPropTag,ULONG cValues,LPSPropValue lpPropArray) STDAPI_<wabutil.h>
LPWPUCLOSEEVENT(WSAEVENT hEvent,LPINT lpErrno) typedef WINBOOL<ws2spi.h>
LPWPUCLOSESOCKETHANDLE(SOCKET s,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUCLOSETHREAD(LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUCOMPLETEOVERLAPPEDREQUEST(SOCKET s,LPWSAOVERLAPPED lpOverlapped,DWORD dwError,DWORD cbTransferred,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUCREATEEVENT(LPINT lpErrno) typedef WSAEVENT<ws2spi.h>
LPWPUCREATESOCKETHANDLE(DWORD dwCatalogEntryId,DWORD_PTR dwContext,LPINT lpErrno) typedef SOCKET<ws2spi.h>
LPWPUFDISSET(SOCKET s,fd_set * fdset) typedef int<ws2spi.h>
LPWPUGETPROVIDERPATH(LPGUID lpProviderId,WCHAR * lpszProviderDllPath,LPINT lpProviderDllPathLen,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUMODIFYIFSHANDLE(DWORD dwCatalogEntryId,SOCKET ProposedHandle,LPINT lpErrno) typedef SOCKET<ws2spi.h>
LPWPUOPENCURRENTTHREAD(LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUPOSTMESSAGE(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) typedef WINBOOL<ws2spi.h>
LPWPUQUERYBLOCKINGCALLBACK(DWORD dwCatalogEntryId,LPBLOCKINGCALLBACK * lplpfnCallback,PDWORD_PTR lpdwContext,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUQUERYSOCKETHANDLECONTEXT(SOCKET s,PDWORD_PTR lpContext,LPINT lpErrno) typedef int<ws2spi.h>
LPWPUQUEUEAPC(LPWSATHREADID lpThreadId,LPWSAUSERAPC lpfnUserApc,DWORD_PTR dwContext,LPINT lpErrno) typedef int<ws2spi.h>
LPWPURESETEVENT(WSAEVENT hEvent,LPINT lpErrno) typedef WINBOOL<ws2spi.h>
LPWPUSETEVENT(WSAEVENT hEvent,LPINT lpErrno) typedef WINBOOL<ws2spi.h>
LPWSAOVERLAPPED_COMPLETION_ROUTINE(DWORD dwError,DWORD cbTransferred,LPWSAOVERLAPPED lpOverlapped,DWORD dwFlags) typedef void<winsock2.h>
LPWSAUSERAPC(DWORD_PTR dwContext) typedef VOID<ws2spi.h>
LPWSCDEINSTALLPROVIDER(LPGUID lpProviderId,LPINT lpErrno) typedef int<ws2spi.h>
LPWSCENABLENSPROVIDER(LPGUID lpProviderId,WINBOOL fEnable) typedef INT<ws2spi.h>
LPWSCENUMPROTOCOLS(LPINT lpiProtocols,LPWSAPROTOCOL_INFOW lpProtocolBuffer,LPDWORD lpdwBufferLength,LPINT lpErrno) typedef int<ws2spi.h>
LPWSCGETPROVIDERPATH(LPGUID lpProviderId,WCHAR * lpszProviderDllPath,LPINT lpProviderDllPathLen,LPINT lpErrno) typedef int<ws2spi.h>
LPWSCINSTALLNAMESPACE(LPWSTR lpszIdentifier,LPWSTR lpszPathName,DWORD dwNameSpace,DWORD dwVersion,LPGUID lpProviderId) typedef INT<ws2spi.h>
LPWSCINSTALLPROVIDER(LPGUID lpProviderId,const WCHAR * lpszProviderDllPath,const LPWSAPROTOCOL_INFOW lpProtocolInfoList,DWORD dwNumberOfEntries,LPINT lpErrno) typedef int<ws2spi.h>
LPWSCINSTALLQOSTEMPLATE(const LPGUID Guid,LPWSABUF QosName,LPQOS Qos) typedef int<ws2spi.h>
LPWSCREMOVEQOSTEMPLATE(const LPGUID Guid,LPWSABUF QosName) typedef int<ws2spi.h>
LPWSCUNINSTALLNAMESPACE(LPGUID lpProviderId) typedef INT<ws2spi.h>
LPWSCUPDATEPROVIDER(LPGUID lpProviderId,const WCHAR * lpszProviderDllPath,const LPWSAPROTOCOL_INFOW lpProtocolInfoList,DWORD dwNumberOfEntries,LPINT lpErrno) typedef int<ws2spi.h>
LPWSCWRITENAMESPACEORDER(LPGUID lpProviderId,DWORD dwNumberOfEntries) typedef int<sporder.h>
LPWSCWRITEPROVIDERORDER(LPDWORD lpwdCatalogEntryId,DWORD dwNumberOfEntries) typedef int<sporder.h>
LPWSPACCEPT(SOCKET s,struct sockaddr * addr,LPINT addrlen,LPCONDITIONPROC lpfnCondition,DWORD_PTR dwCallbackData,LPINT lpErrno) typedef SOCKET<ws2spi.h>
LPWSPADDRESSTOSTRING(LPSOCKADDR lpsaAddress,DWORD dwAddressLength,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPWSTR lpszAddressString,LPDWORD lpdwAddressStringLength,LPINT lpErrno) typedef INT<ws2spi.h>
LPWSPASYNCSELECT(SOCKET s,HWND hWnd,unsigned int wMsg,__LONG32 lEvent,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPBIND(SOCKET s,const struct sockaddr * name,int namelen,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPCANCELBLOCKINGCALL(LPINT lpErrno) typedef int<ws2spi.h>
LPWSPCLEANUP(LPINT lpErrno) typedef int<ws2spi.h>
LPWSPCLOSESOCKET(SOCKET s,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPCONNECT(SOCKET s,const struct sockaddr * name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPDUPLICATESOCKET(SOCKET s,DWORD dwProcessId,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPENUMNETWORKEVENTS(SOCKET s,WSAEVENT hEventObject,LPWSANETWORKEVENTS lpNetworkEvents,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPEVENTSELECT(SOCKET s,WSAEVENT hEventObject,__LONG32 lNetworkEvents,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPGETOVERLAPPEDRESULT(SOCKET s,LPWSAOVERLAPPED lpOverlapped,LPDWORD lpcbTransfer,WINBOOL fWait,LPDWORD lpdwFlags,LPINT lpErrno) typedef WINBOOL<ws2spi.h>
LPWSPGETPEERNAME(SOCKET s,struct sockaddr * name,LPINT namelen,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPGETQOSBYNAME(SOCKET s,LPWSABUF lpQOSName,LPQOS lpQOS,LPINT lpErrno) typedef WINBOOL<ws2spi.h>
LPWSPGETSOCKNAME(SOCKET s,struct sockaddr * name,LPINT namelen,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPGETSOCKOPT(SOCKET s,int level,int optname,char * optval,LPINT optlen,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPIOCTL(SOCKET s,DWORD dwIoControlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOutBuffer,DWORD cbOutBuffer,LPDWORD lpcbBytesReturned,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPJOINLEAF(SOCKET s,const struct sockaddr * name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS,DWORD dwFlags,LPINT lpErrno) typedef SOCKET<ws2spi.h>
LPWSPLISTEN(SOCKET s,int backlog,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPRECV(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesRecvd,LPDWORD lpFlags,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPRECVDISCONNECT(SOCKET s,LPWSABUF lpInboundDisconnectData,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPRECVFROM(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesRecvd,LPDWORD lpFlags,struct sockaddr * lpFrom,LPINT lpFromlen,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSELECT(int nfds,fd_set * readfds,fd_set * writefds,fd_set * exceptfds,const PTIMEVAL timeout,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSEND(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesSent,DWORD dwFlags,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSENDDISCONNECT(SOCKET s,LPWSABUF lpOutboundDisconnectData,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSENDTO(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesSent,DWORD dwFlags,const struct sockaddr * lpTo,int iTolen,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,LPWSATHREADID lpThreadId,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSETSOCKOPT(SOCKET s,int level,int optname,const char * optval,int optlen,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSHUTDOWN(SOCKET s,int how,LPINT lpErrno) typedef int<ws2spi.h>
LPWSPSOCKET(int af,int type,int protocol,LPWSAPROTOCOL_INFOW lpProtocolInfo,GROUP g,DWORD dwFlags,LPINT lpErrno) typedef SOCKET<ws2spi.h>
LPWSPSTARTUP(WORD wVersionRequested,LPWSPDATA lpWSPData,LPWSAPROTOCOL_INFOW lpProtocolInfo,WSPUPCALLTABLE UpcallTable,LPWSPPROC_TABLE lpProcTable) typedef int<ws2spi.h>
LPWSPSTRINGTOADDRESS(LPWSTR AddressString,INT AddressFamily,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPSOCKADDR lpAddress,LPINT lpAddressLength,LPINT lpErrno) typedef INT<ws2spi.h>
LRESULT(WINAPI * ForwardViewMsg) <shdeprecated.h>
LRESULT(WINAPI * OnCommand) <shdeprecated.h>
LRESULT(WINAPI * OnNotify) <shdeprecated.h>
LRESULT(WINAPI * WndProcBS) <shdeprecated.h>
LresultFromObject(REFIID riid,WPARAM wParam,LPUNKNOWN punk) STDAPI_<oleacc.h>
LSA_ADD_CREDENTIAL(PLUID LogonId,ULONG AuthenticationPackage,PLSA_STRING PrimaryKeyValue,PLSA_STRING Credentials) typedef NTSTATUS<ntsecpkg.h>
LSA_ALLOCATE_CLIENT_BUFFER(PLSA_CLIENT_REQUEST ClientRequest,ULONG LengthRequired,PVOID * ClientBaseAddress) typedef NTSTATUS<ntsecpkg.h>
LSA_ALLOCATE_LSA_HEAP(ULONG Length) typedef PVOID<ntsecpkg.h>
LSA_ALLOCATE_PRIVATE_HEAP(SIZE_T Length) typedef PVOID<ntsecpkg.h>
LSA_ALLOCATE_SHARED_MEMORY(PVOID SharedMem,ULONG Size) typedef PVOID<ntsecpkg.h>
LSA_AP_CALL_PACKAGE(PLSA_CLIENT_REQUEST ClientRequest,PVOID ProtocolSubmitBuffer,PVOID ClientBufferBase,ULONG SubmitBufferLength,PVOID * ProtocolReturnBuffer,PULONG ReturnBufferLength,PNTSTATUS ProtocolStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_AP_CALL_PACKAGE_PASSTHROUGH(PLSA_CLIENT_REQUEST ClientRequest,PVOID ProtocolSubmitBuffer,PVOID ClientBufferBase,ULONG SubmitBufferLength,PVOID * ProtocolReturnBuffer,PULONG ReturnBufferLength,PNTSTATUS ProtocolStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_AP_INITIALIZE_PACKAGE(ULONG AuthenticationPackageId,PLSA_DISPATCH_TABLE LsaDispatchTable,PLSA_STRING Database,PLSA_STRING Confidentiality,PLSA_STRING * AuthenticationPackageName) typedef NTSTATUS<ntsecpkg.h>
LSA_AP_LOGON_TERMINATED(PLUID LogonId) typedef VOID<ntsecpkg.h>
LSA_AP_LOGON_USER(PLSA_CLIENT_REQUEST ClientRequest,SECURITY_LOGON_TYPE LogonType,PVOID AuthenticationInformation,PVOID ClientAuthenticationBase,ULONG AuthenticationInformationLength,PVOID * ProfileBuffer,PULONG ProfileBufferLength,PLUID LogonId,PNTSTATUS SubStatus,PLSA_TOKEN_INFORMATION_TYPE TokenInformationType,PVOID * TokenInformation,PLSA_UNICODE_STRING * AccountName,PLSA_UNICODE_STRING * AuthenticatingAuthority) typedef NTSTATUS<ntsecpkg.h>
LSA_AP_LOGON_USER_EX(PLSA_CLIENT_REQUEST ClientRequest,SECURITY_LOGON_TYPE LogonType,PVOID AuthenticationInformation,PVOID ClientAuthenticationBase,ULONG AuthenticationInformationLength,PVOID * ProfileBuffer,PULONG ProfileBufferLength,PLUID LogonId,PNTSTATUS SubStatus,PLSA_TOKEN_INFORMATION_TYPE TokenInformationType,PVOID * TokenInformation,PUNICODE_STRING * AccountName,PUNICODE_STRING * AuthenticatingAuthority,PUNICODE_STRING * MachineName) typedef NTSTATUS<ntsecpkg.h>
LSA_AP_LOGON_USER_EX2(PLSA_CLIENT_REQUEST ClientRequest,SECURITY_LOGON_TYPE LogonType,PVOID AuthenticationInformation,PVOID ClientAuthenticationBase,ULONG AuthenticationInformationLength,PVOID * ProfileBuffer,PULONG ProfileBufferLength,PLUID LogonId,PNTSTATUS SubStatus,PLSA_TOKEN_INFORMATION_TYPE TokenInformationType,PVOID * TokenInformation,PUNICODE_STRING * AccountName,PUNICODE_STRING * AuthenticatingAuthority,PUNICODE_STRING * MachineName,PSECPKG_PRIMARY_CRED PrimaryCredentials,PSECPKG_SUPPLEMENTAL_CRED_ARRAY * CachedCredentials) typedef NTSTATUS<ntsecpkg.h>
LSA_AUDIT_ACCOUNT_LOGON(ULONG AuditId,BOOLEAN Success,PUNICODE_STRING Source,PUNICODE_STRING ClientName,PUNICODE_STRING MappedName,NTSTATUS Status) typedef NTSTATUS<ntsecpkg.h>
LSA_AUDIT_LOGON(NTSTATUS Status,NTSTATUS SubStatus,PUNICODE_STRING AccountName,PUNICODE_STRING AuthenticatingAuthority,PUNICODE_STRING WorkstationName,PSID UserSid,SECURITY_LOGON_TYPE LogonType,PTOKEN_SOURCE TokenSource,PLUID LogonId) typedef VOID<ntsecpkg.h>
LSA_CALL_PACKAGE(PUNICODE_STRING AuthenticationPackage,PVOID ProtocolSubmitBuffer,ULONG SubmitBufferLength,PVOID * ProtocolReturnBuffer,PULONG ReturnBufferLength,PNTSTATUS ProtocolStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_CALL_PACKAGE_PASSTHROUGH(PUNICODE_STRING AuthenticationPackage,PVOID ClientBufferBase,PVOID ProtocolSubmitBuffer,ULONG SubmitBufferLength,PVOID * ProtocolReturnBuffer,PULONG ReturnBufferLength,PNTSTATUS ProtocolStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_CALL_PACKAGEEX(PUNICODE_STRING AuthenticationPackage,PVOID ClientBufferBase,PVOID ProtocolSubmitBuffer,ULONG SubmitBufferLength,PVOID * ProtocolReturnBuffer,PULONG ReturnBufferLength,PNTSTATUS ProtocolStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_CALLBACK_FUNCTION(ULONG_PTR Argument1,ULONG_PTR Argument2,PSecBuffer InputBuffer,PSecBuffer OutputBuffer) typedef NTSTATUS<ntsecpkg.h>
LSA_CANCEL_NOTIFICATION(HANDLE NotifyHandle) typedef NTSTATUS<ntsecpkg.h>
LSA_CLIENT_CALLBACK(PCHAR Callback,ULONG_PTR Argument1,ULONG_PTR Argument2,PSecBuffer Input,PSecBuffer Output) typedef NTSTATUS<ntsecpkg.h>
LSA_CLOSE_SAM_USER(PVOID UserHandle) typedef NTSTATUS<ntsecpkg.h>
LSA_CONVERT_AUTH_DATA_TO_TOKEN(PVOID UserAuthData,ULONG UserAuthDataSize,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,PTOKEN_SOURCE TokenSource,SECURITY_LOGON_TYPE LogonType,PUNICODE_STRING AuthorityName,PHANDLE Token,PLUID LogonId,PUNICODE_STRING AccountName,PNTSTATUS SubStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_COPY_FROM_CLIENT_BUFFER(PLSA_CLIENT_REQUEST ClientRequest,ULONG Length,PVOID BufferToCopy,PVOID ClientBaseAddress) typedef NTSTATUS<ntsecpkg.h>
LSA_COPY_TO_CLIENT_BUFFER(PLSA_CLIENT_REQUEST ClientRequest,ULONG Length,PVOID ClientBaseAddress,PVOID BufferToCopy) typedef NTSTATUS<ntsecpkg.h>
LSA_CRACK_SINGLE_NAME(ULONG FormatOffered,BOOLEAN PerformAtGC,PUNICODE_STRING NameInput,PUNICODE_STRING Prefix,ULONG RequestedFormat,PUNICODE_STRING CrackedName,PUNICODE_STRING DnsDomainName,PULONG SubStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_CREATE_LOGON_SESSION(PLUID LogonId) typedef NTSTATUS<ntsecpkg.h>
LSA_CREATE_SHARED_MEMORY(ULONG MaxSize,ULONG InitialSize) typedef PVOID<ntsecpkg.h>
LSA_CREATE_THREAD(SEC_ATTRS SecurityAttributes,ULONG StackSize,SEC_THREAD_START StartFunction,PVOID ThreadParameter,ULONG CreationFlags,PULONG ThreadId) typedef HANDLE<ntsecpkg.h>
LSA_CREATE_TOKEN(PLUID LogonId,PTOKEN_SOURCE TokenSource,SECURITY_LOGON_TYPE LogonType,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,LSA_TOKEN_INFORMATION_TYPE TokenInformationType,PVOID TokenInformation,PTOKEN_GROUPS TokenGroups,PUNICODE_STRING AccountName,PUNICODE_STRING AuthorityName,PUNICODE_STRING Workstation,PUNICODE_STRING ProfilePath,PHANDLE Token,PNTSTATUS SubStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_CREATE_TOKEN_EX(PLUID LogonId,PTOKEN_SOURCE TokenSource,SECURITY_LOGON_TYPE LogonType,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,LSA_TOKEN_INFORMATION_TYPE TokenInformationType,PVOID TokenInformation,PTOKEN_GROUPS TokenGroups,PUNICODE_STRING Workstation,PUNICODE_STRING ProfilePath,PVOID SessionInformation,SECPKG_SESSIONINFO_TYPE SessionInformationType,PHANDLE Token,PNTSTATUS SubStatus) typedef NTSTATUS<ntsecpkg.h>
LSA_DELETE_CREDENTIAL(PLUID LogonId,ULONG AuthenticationPackage,PLSA_STRING PrimaryKeyValue) typedef NTSTATUS<ntsecpkg.h>
LSA_DELETE_LOGON_SESSION(PLUID LogonId) typedef NTSTATUS<ntsecpkg.h>
LSA_DELETE_SHARED_MEMORY(PVOID SharedMem) typedef BOOLEAN<ntsecpkg.h>
LSA_DUPLICATE_HANDLE(HANDLE SourceHandle,PHANDLE DestionationHandle) typedef NTSTATUS<ntsecpkg.h>
LSA_EXPAND_AUTH_DATA_FOR_DOMAIN(PUCHAR UserAuthData,ULONG UserAuthDataSize,PVOID Reserved,PUCHAR * ExpandedAuthData,PULONG ExpandedAuthDataSize) typedef NTSTATUS<ntsecpkg.h>
LSA_FREE_CLIENT_BUFFER(PLSA_CLIENT_REQUEST ClientRequest,PVOID ClientBaseAddress) typedef NTSTATUS<ntsecpkg.h>
LSA_FREE_LSA_HEAP(PVOID Base) typedef VOID<ntsecpkg.h>
LSA_FREE_PRIVATE_HEAP(PVOID Base) typedef VOID<ntsecpkg.h>
LSA_FREE_SHARED_MEMORY(PVOID SharedMem,PVOID Memory) typedef VOID<ntsecpkg.h>
LSA_GET_AUTH_DATA_FOR_USER(PSECURITY_STRING Name,SECPKG_NAME_TYPE NameType,PSECURITY_STRING Prefix,PUCHAR * UserAuthData,PULONG UserAuthDataSize,PUNICODE_STRING UserFlatName) typedef NTSTATUS<ntsecpkg.h>
LSA_GET_CALL_INFO(PSECPKG_CALL_INFO Info) typedef BOOLEAN<ntsecpkg.h>
LSA_GET_CLIENT_INFO(PSECPKG_CLIENT_INFO ClientInfo) typedef NTSTATUS<ntsecpkg.h>
LSA_GET_CREDENTIALS(PLUID LogonId,ULONG AuthenticationPackage,PULONG QueryContext,BOOLEAN RetrieveAllCredentials,PLSA_STRING PrimaryKeyValue,PULONG PrimaryKeyLength,PLSA_STRING Credentials) typedef NTSTATUS<ntsecpkg.h>
LSA_GET_USER_AUTH_DATA(PVOID UserHandle,PUCHAR * UserAuthData,PULONG UserAuthDataSize) typedef NTSTATUS<ntsecpkg.h>
LSA_GET_USER_CREDENTIALS(PVOID UserHandle,PVOID * PrimaryCreds,PULONG PrimaryCredsSize,PVOID * SupplementalCreds,PULONG SupplementalCredsSize) typedef NTSTATUS<ntsecpkg.h>
LSA_IMPERSONATE_CLIENT(VOID) typedef NTSTATUS<ntsecpkg.h>
LSA_MAP_BUFFER(PSecBuffer InputBuffer,PSecBuffer OutputBuffer) typedef NTSTATUS<ntsecpkg.h>
LSA_OPEN_SAM_USER(PSECURITY_STRING Name,SECPKG_NAME_TYPE NameType,PSECURITY_STRING Prefix,BOOLEAN AllowGuest,ULONG Reserved,PVOID * UserHandle) typedef NTSTATUS<ntsecpkg.h>
LSA_OPEN_TOKEN_BY_LOGON_ID(PLUID LogonId,HANDLE * RetTokenHandle) typedef NTSTATUS<ntsecpkg.h>
LSA_PROTECT_MEMORY(PVOID Buffer,ULONG BufferSize) typedef VOID<ntsecpkg.h>
LSA_REGISTER_CALLBACK(ULONG CallbackId,PLSA_CALLBACK_FUNCTION Callback) typedef NTSTATUS<ntsecpkg.h>
LSA_REGISTER_NOTIFICATION(SEC_THREAD_START StartFunction,PVOID Parameter,ULONG NotificationType,ULONG NotificationClass,ULONG NotificationFlags,ULONG IntervalMinutes,HANDLE WaitEvent) typedef HANDLE<ntsecpkg.h>
LSA_SAVE_SUPPLEMENTAL_CREDENTIALS(PLUID LogonId,ULONG SupplementalCredSize,PVOID SupplementalCreds,BOOLEAN Synchronous) typedef NTSTATUS<ntsecpkg.h>
LSA_SUCCESS(Error)<ntsecapi.h>
LSA_UNLOAD_PACKAGE(VOID) typedef NTSTATUS<ntsecpkg.h>
LSA_UPDATE_PRIMARY_CREDENTIALS(PSECPKG_PRIMARY_CRED PrimaryCredentials,PSECPKG_SUPPLEMENTAL_CRED_ARRAY Credentials) typedef NTSTATUS<ntsecpkg.h>
LsaAddAccountRights(LSA_HANDLE PolicyHandle,PSID AccountSid,PLSA_UNICODE_STRING UserRights,ULONG CountOfRights) NTSTATUS NTAPI <ntsecapi.h>
LsaCallAuthenticationPackage(HANDLE LsaHandle,ULONG AuthenticationPackage,PVOID ProtocolSubmitBuffer,ULONG SubmitBufferLength,PVOID * ProtocolReturnBuffer,PULONG ReturnBufferLength,PNTSTATUS ProtocolStatus) NTSTATUS NTAPI <ntsecapi.h>
LsaClose(LSA_HANDLE ObjectHandle) NTSTATUS NTAPI <ntsecapi.h>
LsaConnectUntrusted(PHANDLE LsaHandle) NTSTATUS NTAPI <ntsecapi.h>
LsaCreateTrustedDomainEx(LSA_HANDLE PolicyHandle,PTRUSTED_DOMAIN_INFORMATION_EX TrustedDomainInformation,PTRUSTED_DOMAIN_AUTH_INFORMATION AuthenticationInformation,ACCESS_MASK DesiredAccess,PLSA_HANDLE TrustedDomainHandle) NTSTATUS NTAPI <ntsecapi.h>
LsaDeleteTrustedDomain(LSA_HANDLE PolicyHandle,PSID TrustedDomainSid) NTSTATUS NTAPI <ntsecapi.h>
LsaDeregisterLogonProcess(HANDLE LsaHandle) NTSTATUS NTAPI <ntsecapi.h>
LsaEnumerateAccountRights(LSA_HANDLE PolicyHandle,PSID AccountSid,PLSA_UNICODE_STRING * UserRights,PULONG CountOfRights) NTSTATUS NTAPI <ntsecapi.h>
LsaEnumerateAccountsWithUserRight(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING UserRight,PVOID * Buffer,PULONG CountReturned) NTSTATUS NTAPI <ntsecapi.h>
LsaEnumerateLogonSessions(PULONG LogonSessionCount,PLUID * LogonSessionList) NTSTATUS NTAPI <ntsecapi.h>
LsaEnumerateTrustedDomains(LSA_HANDLE PolicyHandle,PLSA_ENUMERATION_HANDLE EnumerationContext,PVOID * Buffer,ULONG PreferedMaximumLength,PULONG CountReturned) NTSTATUS NTAPI <ntsecapi.h>
LsaEnumerateTrustedDomainsEx(LSA_HANDLE PolicyHandle,PLSA_ENUMERATION_HANDLE EnumerationContext,PVOID * Buffer,ULONG PreferedMaximumLength,PULONG CountReturned) NTSTATUS NTAPI <ntsecapi.h>
LsaForestTrustFindMatch(LSA_HANDLE PolicyHandle,ULONG Type,PLSA_UNICODE_STRING Name,PLSA_UNICODE_STRING * Match) NTSTATUS NTAPI <ntsecapi.h>
LsaFreeMemory(PVOID Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaFreeReturnBuffer(IN PVOID Buffer)<ntsecapi.h>
LsaFreeReturnBuffer(PVOID Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaGetLogonSessionData(PLUID LogonId,PSECURITY_LOGON_SESSION_DATA * ppLogonSessionData) NTSTATUS NTAPI <ntsecapi.h>
LsaLogonUser(HANDLE LsaHandle,PLSA_STRING OriginName,SECURITY_LOGON_TYPE LogonType,ULONG AuthenticationPackage,PVOID AuthenticationInformation,ULONG AuthenticationInformationLength,PTOKEN_GROUPS LocalGroups,PTOKEN_SOURCE SourceContext,PVOID * ProfileBuffer,PULONG ProfileBufferLength,PLUID LogonId,PHANDLE Token,PQUOTA_LIMITS Quotas,PNTSTATUS SubStatus) NTSTATUS NTAPI <ntsecapi.h>
LsaLogonUser(IN HANDLE LsaHandle,IN PLSA_STRING OriginName,IN SECURITY_LOGON_TYPE LogonType,IN ULONG AuthenticationPackage,IN PVOID AuthenticationInformation,IN ULONG AuthenticationInformationLength,IN PTOKEN_GROUPS LocalGroups OPTIONAL,IN PTOKEN_SOURCE SourceContext,OUT PVOID * ProfileBuffer,OUT PULONG ProfileBufferLength,OUT PLUID LogonId,OUT PHANDLE Token,OUT PQUOTA_LIMITS Quotas,OUT PNTSTATUS SubStatus)<ntsecapi.h>
LsaLookupAuthenticationPackage(HANDLE LsaHandle,PLSA_STRING PackageName,PULONG AuthenticationPackage) NTSTATUS NTAPI <ntsecapi.h>
LsaLookupNames(LSA_HANDLE PolicyHandle,ULONG Count,PLSA_UNICODE_STRING Names,PLSA_REFERENCED_DOMAIN_LIST * ReferencedDomains,PLSA_TRANSLATED_SID * Sids) NTSTATUS NTAPI <ntsecapi.h>
LsaLookupNames2(LSA_HANDLE PolicyHandle,ULONG Flags,ULONG Count,PLSA_UNICODE_STRING Names,PLSA_REFERENCED_DOMAIN_LIST * ReferencedDomains,PLSA_TRANSLATED_SID2 * Sids) NTSTATUS NTAPI <ntsecapi.h>
LsaLookupSids(LSA_HANDLE PolicyHandle,ULONG Count,PSID * Sids,PLSA_REFERENCED_DOMAIN_LIST * ReferencedDomains,PLSA_TRANSLATED_NAME * Names) NTSTATUS NTAPI <ntsecapi.h>
LsaNtStatusToWinError(NTSTATUS Status) ULONG NTAPI <ntsecapi.h>
LsaOpenPolicy(PLSA_UNICODE_STRING SystemName,PLSA_OBJECT_ATTRIBUTES ObjectAttributes,ACCESS_MASK DesiredAccess,PLSA_HANDLE PolicyHandle) NTSTATUS NTAPI <ntsecapi.h>
LsaOpenTrustedDomainByName(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,ACCESS_MASK DesiredAccess,PLSA_HANDLE TrustedDomainHandle) NTSTATUS NTAPI <ntsecapi.h>
LSAP_SE_ADT_PARAMETER_ARRAY_TRUE_SIZE(Parameters)<wdm.h>
LsaQueryDomainInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_DOMAIN_INFORMATION_CLASS InformationClass,PVOID * Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaQueryForestTrustInformation(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,PLSA_FOREST_TRUST_INFORMATION * ForestTrustInfo) NTSTATUS NTAPI <ntsecapi.h>
LsaQueryInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_INFORMATION_CLASS InformationClass,PVOID * Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaQueryTrustedDomainInfo(LSA_HANDLE PolicyHandle,PSID TrustedDomainSid,TRUSTED_INFORMATION_CLASS InformationClass,PVOID * Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaQueryTrustedDomainInfoByName(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,TRUSTED_INFORMATION_CLASS InformationClass,PVOID * Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaRegisterLogonProcess(IN PLSA_STRING LogonProcessName,OUT PHANDLE LsaHandle,OUT PLSA_OPERATIONAL_MODE SecurityMode)<ntsecapi.h>
LsaRegisterLogonProcess(PLSA_STRING LogonProcessName,PHANDLE LsaHandle,PLSA_OPERATIONAL_MODE SecurityMode) NTSTATUS NTAPI <ntsecapi.h>
LsaRegisterPolicyChangeNotification(POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass,HANDLE NotificationEventHandle) NTSTATUS NTAPI <ntsecapi.h>
LsaRemoveAccountRights(LSA_HANDLE PolicyHandle,PSID AccountSid,BOOLEAN AllRights,PLSA_UNICODE_STRING UserRights,ULONG CountOfRights) NTSTATUS NTAPI <ntsecapi.h>
LsaRetrievePrivateData(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING KeyName,PLSA_UNICODE_STRING * PrivateData) NTSTATUS NTAPI <ntsecapi.h>
LsaSetDomainInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_DOMAIN_INFORMATION_CLASS InformationClass,PVOID Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaSetForestTrustInformation(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo,BOOLEAN CheckOnly,PLSA_FOREST_TRUST_COLLISION_INFORMATION * CollisionInfo) NTSTATUS NTAPI <ntsecapi.h>
LsaSetInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_INFORMATION_CLASS InformationClass,PVOID Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaSetTrustedDomainInfoByName(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,TRUSTED_INFORMATION_CLASS InformationClass,PVOID Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaSetTrustedDomainInformation(LSA_HANDLE PolicyHandle,PSID TrustedDomainSid,TRUSTED_INFORMATION_CLASS InformationClass,PVOID Buffer) NTSTATUS NTAPI <ntsecapi.h>
LsaStorePrivateData(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING KeyName,PLSA_UNICODE_STRING PrivateData) NTSTATUS NTAPI <ntsecapi.h>
LsaUnregisterPolicyChangeNotification(POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass,HANDLE NotificationEventHandle) NTSTATUS NTAPI <ntsecapi.h>
LSIGN(x)<xmath.h>
LsnBlockOffset(const CLFS_LSN * plsn)ULONG WINAPI <clfsw32.h>
LsnContainer(const CLFS_LSN * plsn)CLFS_CONTAINER_ID WINAPI <clfsw32.h>
LsnCreate(CLFS_CONTAINER_ID cidContainer,ULONG offBlock,ULONG cRecord)CLFS_LSN WINAPI <clfsw32.h>
LsnEqual(const CLFS_LSN * plsn1,const CLFS_LSN * plsn2)WINBOOL WINAPI <clfs.h>
LsnGreater(const CLFS_LSN * plsn1,const CLFS_LSN * plsn2)WINBOOL WINAPI <clfs.h>
LsnLess(const CLFS_LSN * plsn1,const CLFS_LSN * plsn2)WINBOOL WINAPI <clfs.h>
LsnNull(const CLFS_LSN * plsn)WINBOOL WINAPI <clfs.h>
LsnRecordSequence(const CLFS_LSN * plsn)ULONG WINAPI <clfsw32.h>
lstrcmp(LPCSTR lpString1,LPCSTR lpString2)<winbase.h>
lstrcmpA(LPCSTR lpString1,LPCSTR lpString2) WINBASEAPI int WINAPI <winbase.h>
lstrcmpi(LPCSTR lpString1,LPCSTR lpString2)<winbase.h>
lstrcmpiA(LPCSTR lpString1,LPCSTR lpString2) WINBASEAPI int WINAPI <winbase.h>
lstrcmpiW(LPCWSTR lpString1,LPCWSTR lpString2) WINBASEAPI int WINAPI <winbase.h>
lstrcmpW(LPCWSTR lpString1,LPCWSTR lpString2) WINBASEAPI int WINAPI <winbase.h>
lstrlen(LPCSTR lpString)<winbase.h>
lstrlenA(LPCSTR lpString) WINBASEAPI int WINAPI <winbase.h>
lstrlenW(LPCWSTR lpString) WINBASEAPI int WINAPI <winbase.h>
LTOFX(x)<winddi.h>
LVER_PRODUCTVERSION_MAJORMINOR1(x,y)<ntverp.h>
LVER_PRODUCTVERSION_MAJORMINOR2()()()
LVER_PRODUCTVERSION_MAJORMINOR2(x,y)<ntverp.h>
LVER_PRODUCTVERSION_STR1(x,y)<ntverp.h>
LVER_PRODUCTVERSION_STR2()()()
LVER_PRODUCTVERSION_STR2(x,y)<ntverp.h>
LWSTDAPI(type)<shlwapi.h>
LWSTDAPIV(type)<shlwapi.h>
LZClose(INT) VOID WINAPI <lzexpand.h>
LZCopy(INT,INT) LONG WINAPI <lzexpand.h>
LZDone(VOID) VOID WINAPI <lzexpand.h>
LZInit(INT) INT WINAPI <lzexpand.h>
LZOpenFile(LPSTR,LPOFSTRUCT,WORD) INT WINAPI <lzexpand.h>
LZOpenFileA(LPSTR,LPOFSTRUCT,WORD) INT WINAPI <lzexpand.h>
LZOpenFileW(LPWSTR,LPOFSTRUCT,WORD) INT WINAPI <lzexpand.h>
LZRead(INT,LPSTR,INT) INT WINAPI <lzexpand.h>
LZSeek(INT,LONG,INT) LONG WINAPI <lzexpand.h>
LZStart(VOID) INT WINAPI <lzexpand.h>
LZXCompressionWindowFromTCOMP(tc)<fdi.h>
M128() <dvec.h>
M128(__m128i mm) <dvec.h>
M128(const M128 & a) <dvec.h>
M64()<ivec.h>
M64(__int64 mm)<ivec.h>
M64(__m64 mm)<ivec.h>
M64(const M64 & a)<ivec.h>
M64(int i)<ivec.h>
MachineIdOfMachineName(BSTR MachineName,BSTR * pbstrGuid)virtual HRESULT WINAPI <mqoai.h>
MachineNameOfMachineId(BSTR bstrGuid,BSTR * pbstrMachineName)virtual HRESULT WINAPI <mqoai.h>
MacReserved(PVOID) UCHAR <ndis.h>
MacTypeToAddressType(DWORD MacType) DWORD WINAPI <netmon.h>
Magnitude(const _D3DVECTOR & v)inline D3DVALUE <d3dtypes.h>
MailDisable(void)virtual HRESULT WINAPI <cdoexm.h>
MailEnable(BSTR TargetMailAddress)virtual HRESULT WINAPI <cdoexm.h>
MAKE_AVIERR(error)<vfw.h>
MAKE_CMY332_MASK(c,m,y)<winddi.h>
MAKE_CMYMASK_BYTE(c,m,y)<winddi.h>
MAKE_D3D10_HRESULT(code)<d3d10.h>
MAKE_D3D10_STATUS(code)<d3d10.h>
MAKE_D3D11_HRESULT(code)<d3d11.h>
MAKE_D3DHRESULT()()()
MAKE_D3DSTATUS()()()
MAKE_DDHRESULT( code )<dxfile.h>
MAKE_DDHRESULT()()()
MAKE_DDHRESULT(code)<dxfile.h>
MAKE_DMHRESULTERROR(code)<dmerror.h>
MAKE_DMHRESULTSUCCESS(code)<dmerror.h>
MAKE_DMPUB_HIDEBIT(DMPub)<compstui.h>
MAKE_DPHRESULT( code )<dplay.h>
MAKE_DPHRESULT()()()
MAKE_DPNHFAILURE(code)<dpnathlp.h>
MAKE_DPNHRESULT(code)<dplay8.h>
MAKE_DPNHSUCCESS(code)<dpnathlp.h>
MAKE_DXDIAGHRESULT( code )<dxdiag.h>
MAKE_DXDIAGHRESULT()()()
MAKE_DXGI_HRESULT(x)<dxgi.h>
MAKE_DXGI_STATUS(x)<dxgi.h>
MAKE_ENDPOINT_ADDRESS(num, dir)<usbprotocoldefs.h>
MAKE_ENUM(Method,Interface)<mapival.h>
MAKE_HRESULT(sev,fac,code)<winerror.h>
MAKE_IDENTIFIER(a,b,c,d)<netmon.h>
MAKE_LONG(l,h)<netmon.h>
MAKE_MAPI_E(err)<wabcode.h>
MAKE_MAPI_S(warn)<wabcode.h>
MAKE_MAPI_SCODE(sev,fac,code)<wabcode.h>
MAKE_ROUTE_PROTOCOL(BBN, 12) <nldef.h>
MAKE_ROUTE_PROTOCOL(BGP, 14) <nldef.h>
MAKE_ROUTE_PROTOCOL(CISCO, 11) <nldef.h>
MAKE_ROUTE_PROTOCOL(EGP, 5) <nldef.h>
MAKE_ROUTE_PROTOCOL(ES_IS, 10) <nldef.h>
MAKE_ROUTE_PROTOCOL(GGP, 6) <nldef.h>
MAKE_ROUTE_PROTOCOL(HELLO, 7) <nldef.h>
MAKE_ROUTE_PROTOCOL(ICMP, 4) <nldef.h>
MAKE_ROUTE_PROTOCOL(IS_IS, 9) <nldef.h>
MAKE_ROUTE_PROTOCOL(LOCAL, 2) <nldef.h>
MAKE_ROUTE_PROTOCOL(NETMGMT, 3) <nldef.h>
MAKE_ROUTE_PROTOCOL(NT_AUTOSTATIC, 10002) <nldef.h>
MAKE_ROUTE_PROTOCOL(NT_STATIC, 10006) <nldef.h>
MAKE_ROUTE_PROTOCOL(NT_STATIC_NON_DOD, 10007) <nldef.h>
MAKE_ROUTE_PROTOCOL(OSPF, 13) <nldef.h>
MAKE_ROUTE_PROTOCOL(OTHER, 1) <nldef.h>
MAKE_ROUTE_PROTOCOL(RIP, 8) <nldef.h>
MAKE_SAPI_ERROR(err)<sperror.h>
MAKE_SAPI_HRESULT()()()
MAKE_SAPI_HRESULT(sev, err)<sperror.h>
MAKE_SAPI_SCODE(scode)<sperror.h>
MAKE_SCODE(sev,fac,code)<winerror.h>
MAKE_SIG(a,b,c,d)<netmon.h>
MAKE_SIGNATURE_FN(PCtxtHandle,unsigned __LONG32,PSecBufferDesc,unsigned __LONG32) typedef SECURITY_STATUS<sspi.h>
MAKE_TNEF_VERSION(_mj,_mn)<tnef.h>
MAKE_WORD(l,h)<netmon.h>
MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,LPDWORD lpdwAbsoluteSecurityDescriptorSize,PACL pDacl,LPDWORD lpdwDaclSize,PACL pSacl,LPDWORD lpdwSaclSize,PSID pOwner,LPDWORD lpdwOwnerSize,PSID pPrimaryGroup,LPDWORD lpdwPrimaryGroupSize) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
MakeAbsTime(lpat,sec,ms)<penwin.h>
MakeACLConsistent(void)virtual HRESULT WINAPI <gpmgmt.h>
MakeArg1(idx,a1)<mapival.h>
MakeArg10(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
MakeArg11(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)<mapival.h>
MakeArg12(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)<mapival.h>
MakeArg13(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
MakeArg14(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)<mapival.h>
MakeArg15(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)<mapival.h>
MakeArg16(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)<mapival.h>
MakeArg2(idx,a1,a2)<mapival.h>
MakeArg3(idx,a1,a2,a3)<mapival.h>
MakeArg4(idx,a1,a2,a3,a4)<mapival.h>
MakeArg5(idx,a1,a2,a3,a4,a5)<mapival.h>
MakeArg6(idx,a1,a2,a3,a4,a5,a6)<mapival.h>
MakeArg7(idx,a1,a2,a3,a4,a5,a6,a7)<mapival.h>
MakeArg8(idx,a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
MakeArg9(idx,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
MakeARGB(BYTE a,BYTE r,BYTE g,BYTE b)	static ARGB <gdipluscolor.h>
MakeArray1(a1)<mapival.h>
MakeArray10(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
MakeArray11(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)<mapival.h>
MakeArray12(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)<mapival.h>
MakeArray13(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
MakeArray14(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)<mapival.h>
MakeArray15(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)<mapival.h>
MakeArray16(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)<mapival.h>
MakeArray2(a1,a2)<mapival.h>
MakeArray3(a1,a2,a3)<mapival.h>
MakeArray4(a1,a2,a3,a4)<mapival.h>
MakeArray5(a1,a2,a3,a4,a5)<mapival.h>
MakeArray6(a1,a2,a3,a4,a5,a6)<mapival.h>
MakeArray7(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
MakeArray8(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
MakeArray9(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
MAKEAVICKID()()()
MAKEAVICKID(tcc, stream)<vfw.h>
MAKEAVICKID(tcc,stream)<vfw.h>
MakeCall(BSTR pDestAddress,BSTR pAppName,BSTR pCalledParty,BSTR pComment)virtual HRESULT WINAPI <tapi3if.h>
MAKEDIPROP(prop)<dinput.h>
MAKEDLLVERULL(major,minor,build,qfe)<shlwapi.h>
MakeDragList(HWND hLB) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
MakeEmpty()__inline__ Status Region::<gdiplusimpl.h>
MAKEFOURCC()()()
MAKEFOURCC(ch0, ch1, ch2, ch3)<mmsystem.h>
MAKEFOURCC(ch0,ch1,ch2,ch3)<mmsystem.h>
MakeInfinite()__inline__ Status Region::<gdiplusimpl.h>
MAKEINTATOM(i)<winbase.h>
MAKEINTRESOURCE(r)<winuser.h>
MAKEINTRESOURCEA(i)<winuser.h>
MAKEINTRESOURCEW(i)<winuser.h>
MAKEIPADDRESS(b1,b2,b3,b4)<commctrl.h>
MAKEIPRANGE(low,high)<commctrl.h>
MAKELANGID()()()
MAKELANGID(p, s)<winnt.h>
MAKELANGID(p,s)<winnt.h>
MAKELCID()()()
MAKELCID(lgid, srtid)<winnt.h>
MAKELCID(lgid,srtid)<winnt.h>
MAKELONG()()()
MAKELONG(a, b)<minwindef.h>
MAKELPARAM(l,h)<winuser.h>
MAKELRESULT(l,h)<winuser.h>
MAKEPOINTS(l)<wingdi.h>
MakeProcInstance(lpProc,hInstance)<winbase.h>
MakeResult(	_s)<wabcode.h>
MakeResult(_s)<wabcode.h>
MAKEROP4(fore,back)<wingdi.h>
MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,LPDWORD lpdwBufferLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
MakeSignature(PCtxtHandle phContext,unsigned __LONG32 fQOP,PSecBufferDesc pMessage,unsigned __LONG32 MessageSeqNo) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
MakeSingleton(boolean bSet)virtual HRESULT WINAPI <wmiutils.h>
MAKESORTLCID()()()
MAKESORTLCID(lgid, srtid, ver)<winnt.h>
MAKESORTLCID(lgid,srtid,ver)<winnt.h>
MakeSureDirectoryPathExists(PCSTR DirPath) WINBOOL IMAGEAPI <psdk>
MakeVersion(Major,Minor)<netmon.h>
MAKEWORD(a,b)<winsock2.h>
MAKEWORD(low,high)<winsock2.h>
MAKEWPARAM(l,h)<winuser.h>
ManageChannel(BYTE byChannelState,BYTE byChannel,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
MANDATORY_LEVEL_TO_MANDATORY_RID(IL)<winnt.h>
MapAndLoad(PCSTR ImageName,PCSTR DllPath,PLOADED_IMAGE LoadedImage,WINBOOL DotDll,WINBOOL ReadOnly) WINBOOL IMAGEAPI <imagehlp.h>
MapColumnIDs(DBORDINAL cColumnIDs,const DBID rgColumnIDs[],DBORDINAL rgColumns[])virtual HRESULT WINAPI <oledb.h>
MapDebugInformation(HANDLE FileHandle,PSTR FileName,PSTR SymbolPath,DWORD ImageBase) PIMAGE_DEBUG_INFORMATION IMAGEAPI <psdk>
MapDialogRect(HWND hDlg,LPRECT lpRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
MapFileAndCheckSum(PCSTR Filename,PDWORD HeaderSum,PDWORD CheckSum) DWORD IMAGEAPI <imagehlp.h>
MapFileAndCheckSumA(PCSTR Filename,PDWORD HeaderSum,PDWORD CheckSum) DWORD IMAGEAPI <imagehlp.h>
MapFileAndCheckSumW(PCWSTR Filename,PDWORD HeaderSum,PDWORD CheckSum) DWORD IMAGEAPI <imagehlp.h>
MapFont(HDC hDC,DWORD dwCodePages,HFONT hSrcFont,HFONT * phDestFont)virtual HRESULT WINAPI <mlang.h>
MapFont(HDC hDC,DWORD dwCodePages,WCHAR chSrc,HFONT * pFont)virtual HRESULT WINAPI <mlang.h>
MapGenericMask(PDWORD AccessMask,PGENERIC_MAPPING GenericMapping) WINADVAPI VOID WINAPI <securitybaseapi.h>
MAPI_DIAG(_code)<wabdefs.h>
MAPI_GETLASTERROR_METHOD(IPURE)<mapiform.h>
MAPI_IABCONTAINER_METHODS(IPURE)<wabdefs.h>
MAPI_IABPROVIDER_METHODS(IPURE)<mapispi.h>
MAPI_IDISTLIST_METHODS(IPURE)<wabdefs.h>
MAPI_IMAPIADVISESINK_METHODS(IPURE)<wabdefs.h>
MAPI_IMAPICONTROL_METHODS(IPURE)<wabdefs.h>
MAPI_IMAPIFORM_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIFORMADVISESINK_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIFORMCONTAINER_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIFORMFACTORY_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIFORMINFO_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIMESSAGESITE_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIPROGRESS_METHODS(IPURE)<wabdefs.h>
MAPI_IMAPISTATUS_METHODS(IPURE)<wabdefs.h>
MAPI_IMAPISUPPORT_METHODS1(IPURE)<mapispi.h>
MAPI_IMAPITABLE_METHODS(IPURE)<wabdefs.h>
MAPI_IMAPIVIEWADVISESINK_METHODS(IPURE)<mapiform.h>
MAPI_IMAPIVIEWCONTEXT_METHODS(IPURE)<mapiform.h>
MAPI_IPERSISTMESSAGE_METHODS(IPURE)<mapiform.h>
MAPI_IPROFADMIN_METHODS(IPURE)<mapix.h>
MAPI_IPROPDATA_METHODS(IPURE)<wabutil.h>
MAPI_ISPOOLERHOOK_METHODS(IPURE)<mapihook.h>
MAPI_ITABLEDATA_METHODS(IPURE)<wabutil.h>
MAPI_ITNEF_METHODS(IPURE)<tnef.h>
MAPI_IXPPROVIDER_METHODS(IPURE)<mapispi.h>
MAPIADDRESS(LHANDLE lhSession,ULONG_PTR ulUIParam,LPSTR lpszCaption,ULONG nEditFields,LPSTR lpszLabels,ULONG nRecips,lpMapiRecipDesc lpRecips,FLAGS flFlags,ULONG ulReserved,LPULONG lpnNewRecips,lpMapiRecipDesc * lppNewRecips) typedef ULONG<mapi.h>
MAPIADMINPROFILES(ULONG ulFlags,LPPROFADMIN * lppProfAdmin) typedef HRESULT<mapix.h>
MAPIALLOCATEBUFFER(ULONG cbSize,LPVOID * lppBuffer)typedef SCODE<wabmem.h>
MAPIALLOCATEMORE(ULONG cbSize,LPVOID lpObject,LPVOID * lppBuffer)typedef SCODE<wabmem.h>
MAPIDeinitIdle(VOID) STDAPI_<wabutil.h>
MAPIDELETEMAIL(LHANDLE lhSession,ULONG_PTR ulUIParam,LPSTR lpszMessageID,FLAGS flFlags,ULONG ulReserved) typedef ULONG<mapi.h>
MAPIDETAILS(LHANDLE lhSession,ULONG_PTR ulUIParam,lpMapiRecipDesc lpRecip,FLAGS flFlags,ULONG ulReserved) typedef ULONG<mapi.h>
MAPIFINDNEXT(LHANDLE lhSession,ULONG_PTR ulUIParam,LPSTR lpszMessageType,LPSTR lpszSeedMessageID,FLAGS flFlags,ULONG ulReserved,LPSTR lpszMessageID) typedef ULONG<mapi.h>
MAPIFREEBUFFER(LPVOID lpBuffer)typedef ULONG<wabmem.h>
MAPIFreeBuffer(LPVOID pv) ULONG WINAPI <mapix.h>
MAPIGetDefaultMalloc(VOID) STDAPI_<wabutil.h>
MAPIINITIALIZE(LPVOID lpMapiInit) typedef HRESULT<mapix.h>
MAPIInitIdle(LPVOID lpvReserved) STDAPI_<wabutil.h>
MAPILOGOFF(LHANDLE lhSession,ULONG_PTR ulUIParam,FLAGS flFlags,ULONG ulReserved) typedef ULONG<mapi.h>
MAPILOGON(ULONG_PTR ulUIParam,LPSTR lpszProfileName,LPSTR lpszPassword,FLAGS flFlags,ULONG ulReserved,LPLHANDLE lplhSession) typedef ULONG<mapi.h>
MAPILOGONEX(ULONG_PTR ulUIParam,LPTSTR lpszProfileName,LPTSTR lpszPassword,ULONG ulFlags,LPMAPISESSION * lppSession) typedef HRESULT<mapix.h>
MAPIMETHOD(method)<wabdefs.h>
MAPIMETHOD(type,method)<wabdefs.h>
MAPIMETHOD_DECLARE(type,method,prefix)<wabdefs.h>
MAPIMETHOD_TYPEDEF(type,method,prefix)<wabdefs.h>
MAPIOpenFormMgr(LPMAPISESSION pSession,LPMAPIFORMMGR * ppmgr)STDAPI <mapiform.h>
MAPIOpenLocalFormContainer(LPMAPIFORMCONTAINER * ppfcnt)STDAPI <mapiform.h>
MAPIREADMAIL(LHANDLE lhSession,ULONG_PTR ulUIParam,LPSTR lpszMessageID,FLAGS flFlags,ULONG ulReserved,lpMapiMessage * lppMessage) typedef ULONG<mapi.h>
MAPIRESOLVENAME(LHANDLE lhSession,ULONG_PTR ulUIParam,LPSTR lpszName,FLAGS flFlags,ULONG ulReserved,lpMapiRecipDesc * lppRecip) typedef ULONG<mapi.h>
MAPISAVEMAIL(LHANDLE lhSession,ULONG_PTR ulUIParam,lpMapiMessage lpMessage,FLAGS flFlags,ULONG ulReserved,LPSTR lpszMessageID) typedef ULONG<mapi.h>
MAPISENDDOCUMENTS(ULONG_PTR ulUIParam,LPSTR lpszDelimChar,LPSTR lpszFilePaths,LPSTR lpszFileNames,ULONG ulReserved) typedef ULONG<mapi.h>
MAPISENDMAIL(LHANDLE lhSession,ULONG_PTR ulUIParam,lpMapiMessage lpMessage,FLAGS flFlags,ULONG ulReserved) typedef ULONG<mapi.h>
MAPIUNINITIALIZE(void) typedef void<mapix.h>
MapMIMEToCLSID(LPCOLESTR pszMIMEType,CLSID * pCLSID)virtual HRESULT WINAPI <ocmm.h>
MapParameterNames(DB_UPARAMS cParamNames,const OLECHAR * rgParamNames[],DB_LPARAMS rgParamOrdinals[])virtual HRESULT WINAPI <oledb.h>
MapPath(BSTR bstrLogicalPath,BSTR * pbstrPhysicalPath)virtual HRESULT WINAPI <asptlb.h>
MappingDoAction(PMAPPING_PROPERTY_BAG pBag,DWORD dwRangeIndex,LPCWSTR pszActionId)ELSCOREAPI HRESULT WINAPI <elscore.h>
MappingFreePropertyBag(PMAPPING_PROPERTY_BAG pBag)ELSCOREAPI HRESULT WINAPI <elscore.h>
MappingFreeServices(PMAPPING_SERVICE_INFO pServiceInfo)ELSCOREAPI HRESULT WINAPI <elscore.h>
MappingGetServices(PMAPPING_ENUM_OPTIONS pOptions,PMAPPING_SERVICE_INFO * prgServices,DWORD * pdwServicesCount)ELSCOREAPI HRESULT WINAPI <elscore.h>
MappingRecognizeText(PMAPPING_SERVICE_INFO pServiceInfo,LPCWSTR pszText,DWORD dwLength,DWORD dwIndex,PMAPPING_OPTIONS pOptions,PMAPPING_PROPERTY_BAG pBag)ELSCOREAPI HRESULT WINAPI <elscore.h>
MapSize(SIZE * psizeIn,RECT * prcOut)virtual HRESULT WINAPI <mshtmlc.h>
MapStorageSCode(SCODE StgSCode) STDAPI_<imessage.h>
MapStreamId(ULONG ulStreamId,DWORD MediaSampleContent,ULONG ulSubstreamFilterValue,int iDataOffset)virtual HRESULT WINAPI <strmif.h>
MapUserPhysicalPages(PVOID VirtualAddress,ULONG_PTR NumberOfPages,PULONG_PTR PageArray) WINBASEAPI WINBOOL WINAPI <winbase.h>
MapUserPhysicalPagesScatter(PVOID * VirtualAddresses,ULONG_PTR NumberOfPages,PULONG_PTR PageArray) WINBASEAPI WINBOOL WINAPI <winbase.h>
MapViewOfFile(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap) WINBASEAPI LPVOID WINAPI <memoryapi.h>
MapViewOfFileEx(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap,LPVOID lpBaseAddress) WINBASEAPI LPVOID WINAPI <memoryapi.h>
MapViewOfFileExNuma(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap,LPVOID lpBaseAddress,DWORD nndPreferred) WINBASEAPI LPVOID WINAPI <winbase.h>
MapViewOfFileFromApp(HANDLE hFileMappingObject,ULONG DesiredAccess,ULONG64 FileOffset,SIZE_T NumberOfBytesToMap) WINBASEAPI PVOID WINAPI <memoryapi.h>
MapVirtualKey(UINT uCode,UINT uMapType) WINUSERAPI UINT WINAPI <winuser.h>
MapVirtualKeyA(UINT uCode,UINT uMapType) WINUSERAPI UINT WINAPI <winuser.h>
MapVirtualKeyEx(UINT uCode,UINT uMapType,HKL dwhkl) WINUSERAPI UINT WINAPI <winuser.h>
MapVirtualKeyExA(UINT uCode,UINT uMapType,HKL dwhkl) WINUSERAPI UINT WINAPI <winuser.h>
MapVirtualKeyExW(UINT uCode,UINT uMapType,HKL dwhkl) WINUSERAPI UINT WINAPI <winuser.h>
MapVirtualKeyW(UINT uCode,UINT uMapType) WINUSERAPI UINT WINAPI <winuser.h>
MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints) WINUSERAPI int WINAPI <winuser.h>
MapWindowRect(hwndFrom,hwndTo,lprc)<windowsx.h>
Marshal(CALLFRAME_MARSHALCONTEXT * pmshlContext,MSHLFLAGS mshlflags,PVOID pBuffer,ULONG cbBuffer,ULONG * pcbBufferUsed,RPCOLEDATAREP * pdataRep,ULONG * prpcFlags)virtual HRESULT WINAPI <callobj.h>
MarshalBlob(HBLOB hBlob,DWORD * pSize,BYTE ** ppBytes) DWORD __cdecl <netmon.h>
MarshalPropagationToken(ULONG cbToken,byte * rgbToken,ULONG * pcbUsed)virtual HRESULT WINAPI <txdtc.h>
MarshalReturnToken(ULONG cbReturnToken,byte * rgbReturnToken,ULONG * pcbUsed)virtual HRESULT WINAPI <txdtc.h>
MASK_IA64(bp,value)<kxia64.h>
MaskBlt(HDC hdcDest,int xDest,int yDest,int width,int height,HDC hdcSrc,int xSrc,int ySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD rop) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Matrix()	~<gdiplusmatrix.h>
Matrix(const Matrix &)	<gdiplusmatrix.h>
Matrix(const Matrix * matrix)	BOOL Equals<gdiplusmatrix.h>
Matrix(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status Multiply<gdiplusmatrix.h>
Matrix(const Rect & rect,const Point * dstplg)	<gdiplusmatrix.h>
Matrix(const RectF & rect,const PointF * dstplg)	<gdiplusmatrix.h>
Matrix(GpMatrix * matrix,Status status)	<gdiplusmatrix.h>
Matrix(Point * pts,INT count=1)	Status TransformVectors<gdiplusmatrix.h>
Matrix(PointF * pts,INT count=1)	Status TransformVectors<gdiplusmatrix.h>
Matrix(REAL * m)	Status GetElements<gdiplusmatrix.h>
Matrix(REAL angle,const PointF & center,MatrixOrder order=MatrixOrderPrepend)	Status RotateAt<gdiplusmatrix.h>
Matrix(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status Rotate<gdiplusmatrix.h>
Matrix(REAL m11,REAL m12,REAL m21,REAL m22,REAL dx,REAL dy)	Status SetElements<gdiplusmatrix.h>
Matrix(REAL offsetX,REAL offsetY,MatrixOrder order=MatrixOrderPrepend)	Status Translate<gdiplusmatrix.h>
Matrix(REAL scaleX,REAL scaleY,MatrixOrder order=MatrixOrderPrepend)	Status Scale<gdiplusmatrix.h>
Matrix(REAL shearX,REAL shearY,MatrixOrder order=MatrixOrderPrepend)	Status Shear<gdiplusmatrix.h>
Matrix(Status newStatus)	Status updateStatus<gdiplusmatrix.h>
Matrix3x2F()D2D1FORCEINLINE <d2d1helper.h>
Matrix3x2F(FLOAT __11,FLOAT __12,FLOAT __21,FLOAT __22,FLOAT __31,FLOAT __32)D2D1FORCEINLINE <d2d1helper.h>
Matrix5x4F()   inline <d2d1_1helper.h>
Matrix5x4F(FLOAT m11,FLOAT m12,FLOAT m13,FLOAT m14,FLOAT m21,FLOAT m22,FLOAT m23,FLOAT m24,FLOAT m31,FLOAT m32,FLOAT m33,FLOAT m34,FLOAT m41,FLOAT m42,FLOAT m43,FLOAT m44,FLOAT m51,FLOAT m52,FLOAT m53,FLOAT m54)   inline <d2d1_1helper.h>
max(a,b)<pdh.h>
Maximize(void)virtual HRESULT WINAPI <mmcobj.h>
MAXMEDIALABEL(DWORD * const pMaxSize)typedef DWORD<ntmsmli.h>
MBLOB_TABLE_SIZE(DWORD dwNumBlobs) static __inline DWORD <netmon.h>
McastApiCleanup(VOID) VOID WINAPI <madcapcl.h>
McastApiStartup(PDWORD Version) DWORD WINAPI <madcapcl.h>
McastEnumerateScopes(IP_ADDR_FAMILY AddrFamily,WINBOOL ReQuery,PMCAST_SCOPE_ENTRY pScopeList,PDWORD pScopeLen,PDWORD pScopeCount) DWORD WINAPI <madcapcl.h>
McastGenUID(LPMCAST_CLIENT_UID pRequestID) DWORD WINAPI <madcapcl.h>
McastReleaseAddress(IP_ADDR_FAMILY AddrFamily,LPMCAST_CLIENT_UID pRequestID,PMCAST_LEASE_REQUEST pReleaseRequest) DWORD WINAPI <madcapcl.h>
McastRenewAddress(IP_ADDR_FAMILY AddrFamily,LPMCAST_CLIENT_UID pRequestID,PMCAST_LEASE_REQUEST pRenewRequest,PMCAST_LEASE_RESPONSE pRenewResponse) DWORD WINAPI <madcapcl.h>
McastRequestAddress(IP_ADDR_FAMILY AddrFamily,LPMCAST_CLIENT_UID pRequestID,PMCAST_SCOPE_CTX pScopeCtx,PMCAST_LEASE_REQUEST pAddrRequest,PMCAST_LEASE_RESPONSE pAddrResponse) DWORD WINAPI <madcapcl.h>
MCI_HMS_HOUR(hms)<mmsystem.h>
MCI_HMS_MINUTE(hms)<mmsystem.h>
MCI_HMS_SECOND(hms)<mmsystem.h>
MCI_MAKE_HMS(h,m,s)<mmsystem.h>
MCI_MAKE_MSF(m,s,f)<mmsystem.h>
MCI_MAKE_TMSF(t,m,s,f)<mmsystem.h>
MCI_MSF_FRAME(msf)<mmsystem.h>
MCI_MSF_MINUTE(msf)<mmsystem.h>
MCI_MSF_SECOND(msf)<mmsystem.h>
MCI_TMSF_FRAME(tmsf)<mmsystem.h>
MCI_TMSF_MINUTE(tmsf)<mmsystem.h>
MCI_TMSF_SECOND(tmsf)<mmsystem.h>
MCI_TMSF_TRACK(tmsf)<mmsystem.h>
mciGetCreatorTask(MCIDEVICEID mciId) WINMMAPI HTASK WINAPI <mmsystem.h>
mciGetDeviceID(LPCSTR pszDevice) WINMMAPI MCIDEVICEID WINAPI <mmsystem.h>
mciGetDeviceIDA(LPCSTR pszDevice) WINMMAPI MCIDEVICEID WINAPI <mmsystem.h>
mciGetDeviceIDFromElementID(DWORD dwElementID,LPCSTR lpstrType)<mmsystem.h>
mciGetDeviceIDFromElementIDA(DWORD dwElementID,LPCSTR lpstrType) WINMMAPI MCIDEVICEID WINAPI <mmsystem.h>
mciGetDeviceIDFromElementIDW(DWORD dwElementID,LPCWSTR lpstrType) WINMMAPI MCIDEVICEID WINAPI <mmsystem.h>
mciGetDeviceIDW(LPCWSTR pszDevice) WINMMAPI MCIDEVICEID WINAPI <mmsystem.h>
mciGetErrorString(MCIERROR mcierr,LPSTR pszText,UINT cchText) WINMMAPI WINBOOL WINAPI <mmsystem.h>
mciGetErrorStringA(MCIERROR mcierr,LPSTR pszText,UINT cchText) WINMMAPI WINBOOL WINAPI <mmsystem.h>
mciGetErrorStringW(MCIERROR mcierr,LPWSTR pszText,UINT cchText) WINMMAPI WINBOOL WINAPI <mmsystem.h>
mciGetYieldProc(MCIDEVICEID mciId,LPDWORD pdwYieldData) WINMMAPI YIELDPROC WINAPI <mmsystem.h>
mciSendCommand(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2) WINMMAPI MCIERROR WINAPI <mmsystem.h>
mciSendCommandA(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2) WINMMAPI MCIERROR WINAPI <mmsystem.h>
mciSendCommandW(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2) WINMMAPI MCIERROR WINAPI <mmsystem.h>
mciSendString(LPCSTR lpstrCommand,LPSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback) WINMMAPI MCIERROR WINAPI <mmsystem.h>
mciSendStringA(LPCSTR lpstrCommand,LPSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback) WINMMAPI MCIERROR WINAPI <mmsystem.h>
mciSendStringW(LPCWSTR lpstrCommand,LPWSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback) WINMMAPI MCIERROR WINAPI <mmsystem.h>
mciSetYieldProc(MCIDEVICEID mciId,YIELDPROC fpYieldProc,DWORD dwYieldData) WINMMAPI WINBOOL WINAPI <mmsystem.h>
MCIWndCanConfig(hwnd)<vfw.h>
MCIWndCanEject(hwnd)<vfw.h>
MCIWndCanPlay(hwnd)<vfw.h>
MCIWndCanRecord(hwnd)<vfw.h>
MCIWndCanSave(hwnd)<vfw.h>
MCIWndCanWindow(hwnd)<vfw.h>
MCIWndChangeStyles(hwnd,mask,value)<vfw.h>
MCIWndClose(hwnd)<vfw.h>
MCIWndCreate(HWND hwndParent,HINSTANCE hInstance,DWORD dwStyle,LPCSTR szFile) HWND WINAPIV <vfw.h>
MCIWndCreateA(HWND hwndParent,HINSTANCE hInstance,DWORD dwStyle,LPCSTR szFile) HWND WINAPIV <vfw.h>
MCIWndCreateW(HWND hwndParent,HINSTANCE hInstance,DWORD dwStyle,LPCWSTR szFile) HWND WINAPIV <vfw.h>
MCIWndDestroy(hwnd)<vfw.h>
MCIWndEject(hwnd)<vfw.h>
MCIWndEnd(hwnd)<vfw.h>
MCIWndGetActiveTimer(hwnd)<vfw.h>
MCIWndGetAlias(hwnd)<vfw.h>
MCIWndGetDest(hwnd,prc)<vfw.h>
MCIWndGetDevice(hwnd,lp,len)<vfw.h>
MCIWndGetDeviceID(hwnd)<vfw.h>
MCIWndGetEnd(hwnd)<vfw.h>
MCIWndGetError(hwnd,lp,len)<vfw.h>
MCIWndGetFileName(hwnd,lp,len)<vfw.h>
MCIWndGetInactiveTimer(hwnd)<vfw.h>
MCIWndGetLength(hwnd)<vfw.h>
MCIWndGetMode(hwnd,lp,len)<vfw.h>
MCIWndGetPalette(hwnd)<vfw.h>
MCIWndGetPosition(hwnd)<vfw.h>
MCIWndGetPositionString(hwnd,lp,len)<vfw.h>
MCIWndGetRepeat(hwnd)<vfw.h>
MCIWndGetSource(hwnd,prc)<vfw.h>
MCIWndGetSpeed(hwnd)<vfw.h>
MCIWndGetStart(hwnd)<vfw.h>
MCIWndGetStyles(hwnd)<vfw.h>
MCIWndGetTimeFormat(hwnd,lp,len)<vfw.h>
MCIWndGetVolume(hwnd)<vfw.h>
MCIWndGetZoom(hwnd)<vfw.h>
MCIWndHome(hwnd)<vfw.h>
MCIWndNew(hwnd,lp)<vfw.h>
MCIWndOpen(hwnd,sz,f)<vfw.h>
MCIWndOpenDialog(hwnd)<vfw.h>
MCIWndOpenInterface(hwnd,pUnk)<vfw.h>
MCIWndPaletteKick(hwnd)<vfw.h>
MCIWndPause(hwnd)<vfw.h>
MCIWndPlay(hwnd)<vfw.h>
MCIWndPlayFrom(hwnd,lPos)<vfw.h>
MCIWndPlayFromTo(hwnd,lStart,lEnd)<vfw.h>
MCIWndPlayReverse(hwnd)<vfw.h>
MCIWndPlayTo(hwnd,lPos)<vfw.h>
MCIWndPutDest(hwnd,prc)<vfw.h>
MCIWndPutSource(hwnd,prc)<vfw.h>
MCIWndRealize(hwnd,fBkgnd)<vfw.h>
MCIWndRecord(hwnd)<vfw.h>
MCIWndRegisterClass(void) WINBOOL WINAPIV <vfw.h>
MCIWndResume(hwnd)<vfw.h>
MCIWndReturnString(hwnd,lp,len)<vfw.h>
MCIWndSave(hwnd,szFile)<vfw.h>
MCIWndSaveDialog(hwnd)<vfw.h>
MCIWndSeek(hwnd,lPos)<vfw.h>
MCIWndSendString(hwnd,sz)<vfw.h>
MCIWndSetActiveTimer(hwnd,active)<vfw.h>
MCIWndSetInactiveTimer(hwnd,inactive)<vfw.h>
MCIWndSetOwner(hwnd,hwndP)<vfw.h>
MCIWndSetPalette(hwnd,hpal)<vfw.h>
MCIWndSetRepeat(hwnd,f)<vfw.h>
MCIWndSetSpeed(hwnd,iSpeed)<vfw.h>
MCIWndSetTimeFormat(hwnd,lp)<vfw.h>
MCIWndSetTimers(hwnd,active,inactive)<vfw.h>
MCIWndSetVolume(hwnd,iVol)<vfw.h>
MCIWndSetZoom(hwnd,iZoom)<vfw.h>
MCIWndStep(hwnd,n)<vfw.h>
MCIWndStop(hwnd)<vfw.h>
MCIWndUseFrames(hwnd)<vfw.h>
MCIWndUseTime(hwnd)<vfw.h>
MCIWndValidateMedia(hwnd)<vfw.h>
MD_SET_DATA_RECORD(_pMDR,_id,_attr,_utype,_dtype,_dlen,_pData)<iiscnfg.h>
MDAXISINFO_GETAT(rgAxisInfo,iAxis)<oledb.h>
MDM_GEN_ANALOG_PROTOCOL_DATA(_rlp)<mcx.h>
MDM_GEN_AUTO_PROTOCOL_DATA(_speed,_ml)<mcx.h>
MDM_GEN_EXTENDEDINFO(_bearermode,_pinfo)<mcx.h>
MDM_GEN_HDLCPPP_PROTOCOL_DATA(_speed,_auth,_ml)<mcx.h>
MDM_GEN_PROTOCOLINFO(_pid,_pdata)<mcx.h>
MDM_GEN_V110_PROTOCOL_DATA(_data)<mcx.h>
MDM_GEN_V120_PROTOCOL_DATA(_speed,_ml)<mcx.h>
MDM_GEN_X75_PROTOCOL_DATA(_data)<mcx.h>
MDM_GET_BEARERMODE(_dwOptions)<mcx.h>
MDM_GET_EXTENDEDINFO(_dwOptions)<mcx.h>
MDM_GET_PROTOCOLDATA(_dwOptions)<mcx.h>
MDM_GET_PROTOCOLID(_dwOptions)<mcx.h>
MDM_GET_PROTOCOLINFO(_dwOptions)<mcx.h>
MDM_SET_BEARERMODE(_dwOptions,_bm)<mcx.h>
MDM_SET_EXTENDEDINFO(_dwOptions,_extinfo)<mcx.h>
MDM_SET_PROTOCOLDATA(_dwOptions,_pd)<mcx.h>
MDM_SET_PROTOCOLID(_dwOptions,_prot)<mcx.h>
MDM_SET_PROTOCOLINFO(_dwOptions,_pinfo)<mcx.h>
MeasureCharacterRanges(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,const StringFormat * stringFormat,INT regionCount,Region * regions)	Status <gdiplusgraphics.h>
MeasureDriverString(const UINT16 * text,INT length,const Font * font,const PointF * positions,INT flags,const Matrix * matrix,RectF * boundingBox)	Status <gdiplusgraphics.h>
MeasureString(const WCHAR * string,INT length,const Font * font,const PointF & origin,const StringFormat * stringFormat,RectF * boundingBox)	Status <gdiplusgraphics.h>
MeasureString(const WCHAR * string,INT length,const Font * font,const PointF & origin,RectF * boundingBox)	Status <gdiplusgraphics.h>
MeasureString(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,const StringFormat * stringFormat,RectF * boundingBox,INT * codepointsFitted=NULL,INT * linesFitted=NULL)	Status <gdiplusgraphics.h>
MeasureString(const WCHAR * string,INT length,const Font * font,const RectF & layoutRect,RectF * boundingBox)	Status <gdiplusgraphics.h>
MeasureString(const WCHAR * string,INT length,const Font * font,const SizeF & layoutRectSize,const StringFormat * stringFormat,SizeF * size,INT * codepointsFitted=NULL,INT * linesFitted=NULL)	Status <gdiplusgraphics.h>
MEDIASUBTYPE_D3D_DX7_RT(mt)<uuids.h>
MEDIASUBTYPE_D3D_DX9_RT(mt)<uuids.h>
MEDIASUBTYPE_HASALPHA(mt)<uuids.h>
MEDIASUBTYPE_HASALPHA7(mt)<uuids.h>
MEDIASUBTYPE_HASALPHA9(mt)<uuids.h>
MediaTypeSupported(__LONG32 lMediaType) WINBOOL <mspterm.h>
MEM_SIZE_TO_PS(MemSize,TrPageSize)<kxia64.h>
memcpy_inline(void * dst,const void * src,size_t size)__CRT_INLINE PVOID __cdecl <winnt.h>
MEMORY_BARRIER()()
MEMORY_BARRIER()()()
MemoryBarrier(VOID)VOID <winnt.h>
MemoryHandle(LPBYTE ptr) extern HANDLE WINAPI <nmsupp.h>
MemorySize(LPVOID ptr) extern SIZE_T WINAPI <rpcndr.h>
MenuCall(DVD_MENU_ID MenuID)virtual HRESULT WINAPI <strmif.h>
MenuHelp(UINT uMsg,WPARAM wParam,LPARAM lParam,HMENU hMainMenu,HINSTANCE hInst,HWND hwndStatus,UINT * lpwIDs) WINCOMMCTRLAPI void WINAPI <commctrl.h>
MenuItemFromPoint(HWND hWnd,HMENU hMenu,POINT ptScreen) WINUSERAPI int WINAPI <winuser.h>
MenuLanguageSelect(LCID Language)virtual HRESULT WINAPI <strmif.h>
Merge(const BSTR Feature,const BSTR RedirectDir)virtual HRESULT WINAPI <mergemod.h>
MergeBlob(HBLOB hDstBlob,HBLOB hSrcBlob) DWORD __cdecl <netmon.h>
MergeEx(const BSTR Feature,const BSTR RedirectDir,IUnknown * pConfiguration)virtual HRESULT WINAPI <mergemod.h>
MergeVirtualDisk(HANDLE VirtualDiskHandle,MERGE_VIRTUAL_DISK_FLAG Flags,PMERGE_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
MesBufferHandleReset(handle_t Handle,unsigned __LONG32 HandleStyle,MIDL_ES_CODE Operation,char ** pBuffer,unsigned __LONG32 BufferSize,unsigned __LONG32 * pEncodedSize) RPC_STATUS RPC_ENTRY <midles.h>
MesDecodeBufferHandleCreate(char * pBuffer,unsigned __LONG32 BufferSize,handle_t * pHandle) RPC_STATUS RPC_ENTRY <midles.h>
MesDecodeIncrementalHandleCreate(void * UserState,MIDL_ES_READ ReadFn,handle_t * pHandle) RPC_STATUS RPC_ENTRY <midles.h>
MesEncodeDynBufferHandleCreate(char ** pBuffer,unsigned __LONG32 * pEncodedSize,handle_t * pHandle) RPC_STATUS RPC_ENTRY <midles.h>
MesEncodeFixedBufferHandleCreate(char * pBuffer,unsigned __LONG32 BufferSize,unsigned __LONG32 * pEncodedSize,handle_t * pHandle) RPC_STATUS RPC_ENTRY <midles.h>
MesEncodeIncrementalHandleCreate(void * UserState,MIDL_ES_ALLOC AllocFn,MIDL_ES_WRITE WriteFn,handle_t * pHandle) RPC_STATUS RPC_ENTRY <midles.h>
MesHandleFree(handle_t Handle) RPC_STATUS RPC_ENTRY <midles.h>
MesIncrementalHandleReset(handle_t Handle,void * UserState,MIDL_ES_ALLOC AllocFn,MIDL_ES_WRITE WriteFn,MIDL_ES_READ ReadFn,MIDL_ES_CODE Operation) RPC_STATUS RPC_ENTRY <midles.h>
MesInqProcEncodingId(handle_t Handle,PRPC_SYNTAX_IDENTIFIER pInterfaceId,unsigned __LONG32 * pProcNum) RPC_STATUS RPC_ENTRY <midles.h>
MessageBeep(UINT uType) WINUSERAPI WINBOOL WINAPI <winuser.h>
MessageBox(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType) WINUSERAPI int WINAPI <winuser.h>
MessageBox(LPCWSTR lpszText,LPCWSTR lpszTitle,UINT fuStyle,int * piRetval)virtual HRESULT WINAPI <winuser.h>
MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType) WINUSERAPI int WINAPI <winuser.h>
MessageBoxEx(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId) WINUSERAPI int WINAPI <winuser.h>
MessageBoxExA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId) WINUSERAPI int WINAPI <winuser.h>
MessageBoxExW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType,WORD wLanguageId) WINUSERAPI int WINAPI <winuser.h>
MessageBoxIndirectW(CONST MSGBOXPARAMSW * lpmbp) WINUSERAPI int WINAPI <winuser.h>
MessageBoxW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType) WINUSERAPI int WINAPI <winuser.h>
Metafile()	virtual ~<wintrust.h>
Metafile(const Metafile &)	<wintrust.h>
Metafile(const WCHAR * filename)	<wintrust.h>
Metafile(const WCHAR * filename,const WmfPlaceableFileHeader * wmfPlaceableFileHeader)	<wintrust.h>
Metafile(const WCHAR * filename,HDC referenceHdc,const Rect & frameRect,MetafileFrameUnit frameUnit=MetafileFrameUnitGdi,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(const WCHAR * filename,HDC referenceHdc,const RectF & frameRect,MetafileFrameUnit frameUnit=MetafileFrameUnitGdi,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(const WCHAR * filename,HDC referenceHdc,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(const WCHAR * filename,MetafileHeader * header)	static Status GetHeader<wintrust.h>
Metafile(EmfPlusRecordType recordType,UINT flags,UINT dataSize,const BYTE * data)	Status PlayRecord<wintrust.h>
Metafile(GpImage * image,Status status)	<wintrust.h>
Metafile(HDC referenceHdc,const Rect & frameRect,MetafileFrameUnit frameUnit=MetafileFrameUnitGdi,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(HDC referenceHdc,const RectF & frameRect,MetafileFrameUnit frameUnit=MetafileFrameUnitGdi,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(HDC referenceHdc,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(HENHMETAFILE hEmf,BOOL deleteEmf=FALSE)	<wintrust.h>
Metafile(HENHMETAFILE hEmf,MetafileHeader * header)	static Status GetHeader<wintrust.h>
Metafile(HENHMETAFILE hEmf,UINT cbData16,LPBYTE pData16,INT iMapMode=MM_ANISOTROPIC,EmfToWmfBitsFlags eFlags=EmfToWmfBitsFlagsDefault)	static UINT EmfToWmfBits<wintrust.h>
Metafile(HMETAFILE hWmf,const WmfPlaceableFileHeader * wmfPlaceableFileHeader,BOOL deleteWmf=FALSE)	<wintrust.h>
Metafile(IStream * stream)	<wintrust.h>
Metafile(IStream * stream,HDC referenceHdc,const Rect & frameRect,MetafileFrameUnit frameUnit=MetafileFrameUnitGdi,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(IStream * stream,HDC referenceHdc,const RectF & frameRect,MetafileFrameUnit frameUnit=MetafileFrameUnitGdi,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(IStream * stream,HDC referenceHdc,EmfType type=EmfTypeEmfPlusDual,const WCHAR * description=NULL)	<wintrust.h>
Metafile(IStream * stream,MetafileHeader * header)	static Status GetHeader<wintrust.h>
Metafile(MetafileHeader * header)	Status GetHeader<wintrust.h>
Metafile(UINT limitDpi)	Status SetDownLevelRasterizationLimit<wintrust.h>
MetafileHeader()	BOOL IsWmfPlaceable<gdiplusmetaheader.h>
MetafileHeader(Rect * rect)	void GetBounds<gdiplusmetaheader.h>
METHOD_FROM_CTL_CODE(ctrlCode)<devioctl.h>
MetricScalePenData(HPENDATA,UINT) WINBOOL WINAPI <penwin.h>
MEVT_EVENTPARM(x)<mmsystem.h>
MEVT_EVENTTYPE(x)<mmsystem.h>
MF2DBuffer_LockFlags_LockTypeMask(0x1 | 0x2)<mfobjects.h>
MF_Plugin_Type_Other(DWORD)<mfobjects.h>
MFAddPeriodicCallback(MFPERIODICCALLBACK Callback,IUnknown * pContext,DWORD * pdwKey) STDAPI <mfapi.h>
MFAllocateSerialWorkQueue(DWORD dwWorkQueue,DWORD * pdwWorkQueue) STDAPI <mfapi.h>
MFAllocateWorkQueue(DWORD * pdwWorkQueue) STDAPI <mfapi.h>
MFAllocateWorkQueueEx(MFASYNC_WORKQUEUE_TYPE WorkQueueType,DWORD * pdwWorkQueue) STDAPI <mfapi.h>
MFAverageTimePerFrameToFrameRate(UINT64 unAverageTimePerFrame,UINT32 * punNumerator,UINT32 * punDenominator) STDAPI <mfapi.h>
MFBeginCreateFile(MF_FILE_ACCESSMODE AccessMode,MF_FILE_OPENMODE OpenMode,MF_FILE_FLAGS fFlags,LPCWSTR pwszFilePath,IMFAsyncCallback * pCallback,IUnknown * pState,IUnknown ** ppCancelCookie) STDAPI <mfapi.h>
MFBeginRegisterWorkQueueWithMMCSS(DWORD dwWorkQueueId,LPCWSTR wszClass,DWORD dwTaskId,IMFAsyncCallback * pDoneCallback,IUnknown * pDoneState) STDAPI <mfapi.h>
MFBeginRegisterWorkQueueWithMMCSSEx(DWORD dwWorkQueueId,LPCWSTR wszClass,DWORD dwTaskId,LONG lPriority,IMFAsyncCallback * pDoneCallback,IUnknown * pDoneState) STDAPI <mfapi.h>
MFBeginUnregisterWorkQueueWithMMCSS(DWORD dwWorkQueueId,IMFAsyncCallback * pDoneCallback,IUnknown * pDoneState) STDAPI <mfapi.h>
MFCalculateBitmapImageSize(const BITMAPINFOHEADER * pBMIH,UINT32 cbBufSize,UINT32 * pcbImageSize,WINBOOL * pbKnown=NULL) STDAPI <mfapi.h>
MFCalculateImageSize(REFGUID guidSubtype,UINT32 unWidth,UINT32 unHeight,UINT32 * pcbImageSize) STDAPI <mfapi.h>
MFCancelCreateFile(IUnknown * pCancelCookie) STDAPI <mfapi.h>
MFCancelWorkItem(MFWORKITEM_KEY Key) STDAPI <mfapi.h>
MFCompareFullToPartialMediaType(IMFMediaType * pMFTypeFull,IMFMediaType * pMFTypePartial) STDAPI_<mfapi.h>
MFConvertColorInfoFromDXV(MFVIDEOFORMAT * pToFormat,DWORD dwFromDXVA)
MFConvertColorInfoFromDXVA(MFVIDEOFORMAT * pToFormat,DWORD dwFromDXVA) STDAPI <mfapi.h>
MFConvertColorInfoToDXV(DWORD * pdwToDXVA,const MFVIDEOFORMAT * pFromFormat)
MFConvertColorInfoToDXVA(DWORD * pdwToDXVA,const MFVIDEOFORMAT * pFromFormat) STDAPI <mfapi.h>
MFConvertFromFP16Array(float * pDest,const WORD * pSrc,DWORD dwCount) STDAPI <mfapi.h>
MFConvertToFP16Array(WORD * pDest,const float * pSrc,DWORD dwCount) STDAPI <mfapi.h>
MFCopyImage(BYTE * pDest,LONG lDestStride,const BYTE * pSrc,LONG lSrcStride,DWORD dwWidthInBytes,DWORD dwLines) STDAPI <mfapi.h>
MFCreate2DMediaBuffer(DWORD dwWidth,DWORD dwHeight,DWORD dwFourCC,WINBOOL fBottomUp,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreate3GPMediaSink(IMFByteStream * pIByteStream,IMFMediaType * pVideoMediaType,IMFMediaType * pAudioMediaType,IMFMediaSink ** ppIMediaSink)HRESULT <mfidl.h>
MFCreateAggregateSource(IMFCollection * pSourceCollection,IMFMediaSource ** ppAggSource)HRESULT <mfidl.h>
MFCreateAlignedMemoryBuffer(DWORD cbMaxLength,DWORD cbAligment,IMFMediaBuffer ** ppBuffer) STDAPI <mfidl.h>
MFCreateAlignedMemoryBuffer(DWORD cbMaxLength,DWORD fAlignmentFlags,IMFMediaBuffer ** ppBuffer)HRESULT WINAPI <mfidl.h>
MFCreateAMMediaTypeFromMFMediaType(IMFMediaType * pMFType,GUID guidFormatBlockType,AM_MEDIA_TYPE ** ppAMType) STDAPI <mfapi.h>
MFCreateASFContentInfo(IMFASFContentInfo ** ppIContentInfo)STDAPI <wmcontainer.h>
MFCreateASFIndexer(IMFASFIndexer ** ppIIndexer)STDAPI <wmcontainer.h>
MFCreateASFIndexerByteStream(IMFByteStream * pIContentByteStream,QWORD cbIndexStartOffset,IMFByteStream ** pIIndexByteStream)STDAPI <wmcontainer.h>
MFCreateASFMediaSink(IMFByteStream * pIByteStream,IMFMediaSink ** ppIMediaSink)STDAPI <wmcontainer.h>
MFCreateASFMediaSinkActivate(LPCWSTR pwszFileName,IMFASFContentInfo * pContentInfo,IMFActivate ** ppIActivate)STDAPI <wmcontainer.h>
MFCreateASFMultiplexer(IMFASFMultiplexer ** ppIMultiplexer)STDAPI <wmcontainer.h>
MFCreateASFProfile(IMFASFProfile ** ppIProfile)STDAPI <wmcontainer.h>
MFCreateASFProfileFromPresentationDescriptor(IMFPresentationDescriptor * pIPD,IMFASFProfile ** ppIProfile)STDAPI <wmcontainer.h>
MFCreateASFSplitter(IMFASFSplitter ** ppISplitter)STDAPI <wmcontainer.h>
MFCreateASFStreamingMediaSink(IMFByteStream * pIByteStream,IMFMediaSink ** ppIMediaSink)STDAPI <wmcontainer.h>
MFCreateASFStreamingMediaSinkActivate(IMFActivate * pByteStreamActivate,IMFASFContentInfo * pContentInfo,IMFActivate ** ppIActivate)STDAPI <wmcontainer.h>
MFCreateASFStreamSelector(IMFASFProfile * pIASFProfile,IMFASFStreamSelector ** ppSelector)STDAPI <wmcontainer.h>
MFCreateAsyncResult(IUnknown * punkObject,IMFAsyncCallback * pCallback,IUnknown * punkState,IMFAsyncResult ** ppAsyncResult) STDAPI <mfapi.h>
MFCreateAttributes(IMFAttributes ** ppMFAttributes,UINT32 cInitialSize) STDAPI <mfapi.h>
MFCreateAudioMediaType(const WAVEFORMATEX * pAudioFormat,IMFAudioMediaType ** ppIAudioMediaType) STDAPI <mfapi.h>
MFCreateCollection(IMFCollection ** ppIMFCollection) STDAPI <mfapi.h>
MFCreateDXGIDeviceManager(UINT * resetToken,IMFDXGIDeviceManager ** ppDeviceManager) STDAPI <mfapi.h>
MFCreateDXGISurfaceBuffer(REFIID riid,IUnknown * punkSurface,UINT uSubresourceIndex,WINBOOL fBottomUpWhenLinear,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreateDXSurfaceBuffer(REFIID riid,IUnknown * punkSurface,WINBOOL fBottomUpWhenLinear,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreateEventQueue(IMFMediaEventQueue ** ppMediaEventQueue) STDAPI <mfapi.h>
MFCreateFile(MF_FILE_ACCESSMODE AccessMode,MF_FILE_OPENMODE OpenMode,MF_FILE_FLAGS fFlags,LPCWSTR pwszFileURL,IMFByteStream ** ppIByteStream) STDAPI <mfapi.h>
MFCreateLegacyMediaBufferOnMFMediaBuffer(IMFSample * pSample,IMFMediaBuffer * pMFMediaBuffer,DWORD cbOffset,IMediaBuffer ** ppMediaBuffer) STDAPI <mfapi.h>
MFCreateMediaBufferFromMediaType(IMFMediaType * pMediaType,LONGLONG llDuration,DWORD dwMinLength,DWORD dwMinAlignment,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreateMediaBufferWrapper(IMFMediaBuffer * pBuffer,DWORD cbOffset,DWORD dwLength,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreateMediaEvent(MediaEventType met,REFGUID guidExtendedType,HRESULT hrStatus,const PROPVARIANT * pvValue,IMFMediaEvent ** ppEvent) STDAPI <mfapi.h>
MFCreateMediaExtensionActivate(PCWSTR szActivatableClassId,IUnknown * pConfiguration,REFIID riid,LPVOID * ppvObject) STDAPI <mfapi.h>
MFCreateMediaSession(IMFAttributes * pConfiguration,IMFMediaSession ** ppMS)HRESULT WINAPI <mfidl.h>
MFCreateMediaType(IMFMediaType ** ppMFType) STDAPI <mfapi.h>
MFCreateMediaTypeFromRepresentation(GUID guidRepresentation,LPVOID pvRepresentation,IMFMediaType ** ppIMediaType) STDAPI <mfapi.h>
MFCreateMemoryBuffer(DWORD cbMaxLength,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreateMFByteStreamWrapper(IMFByteStream * pStream,IMFByteStream ** ppStreamWrapper) STDAPI <mfapi.h>
MFCreateMFVideoFormatFromMFMediaType(IMFMediaType * pMFType,MFVIDEOFORMAT ** ppMFVF,UINT32 * pcbSize) STDAPI <mfapi.h>
MFCreateMP3MediaSink(IMFByteStream * pTargetByteStream,IMFMediaSink ** ppMediaSink)HRESULT WINAPI <mfidl.h>
MFCreateMPEG4MediaSink(IMFByteStream * pIByteStream,IMFMediaType * pVideoMediaType,IMFMediaType * pAudioMediaType,IMFMediaSink ** ppIMediaSink)HRESULT WINAPI <mfidl.h>
MFCreateNetSchemePlugin(REFIID riid,LPVOID * ppvHandler)HRESULT WINAPI <mfidl.h>
MFCreatePathFromURL(LPCWSTR pwszFileURL,LPWSTR * ppwszFilePath)HRESULT WINAPI <mfidl.h>
MFCreatePMPMediaSession(DWORD dwCreationFlags,IMFAttributes * pConfiguration,IMFMediaSession ** ppMediaSession,IMFActivate ** ppEnablerActivate)HRESULT WINAPI <mfidl.h>
MFCreatePMPServer(DWORD dwCreationFlags,IMFPMPServer ** ppPMPServer)HRESULT WINAPI <mfidl.h>
MFCreatePresentationClock(IMFPresentationClock ** ppPresentationClock)HRESULT WINAPI <mfidl.h>
MFCreatePresentationDescriptor(DWORD cStreamDescriptors,IMFStreamDescriptor ** apStreamDescriptors,IMFPresentationDescriptor ** ppPresentationDescriptor)HRESULT WINAPI <mfidl.h>
MFCreatePresentationDescriptorFromASFProfile(IMFASFProfile * pIProfile,IMFPresentationDescriptor ** ppIPD)STDAPI <wmcontainer.h>
MFCreateProxyLocator(LPCWSTR pszProtocol,IPropertyStore * pProxyConfig,IMFNetProxyLocator ** ppProxyLocator)HRESULT WINAPI <mfidl.h>
MFCreateRemoteDesktopPlugin(IMFRemoteDesktopPlugin ** ppPlugin)HRESULT WINAPI <mfidl.h>
MFCreateSample(IMFSample ** ppIMFSample)HRESULT WINAPI <mfidl.h>
MFCreateSampleCopierMFT(IMFTransform ** ppCopierMFT)HRESULT WINAPI <mfidl.h>
MFCreateSampleGrabberSinkActivate(IMFMediaType * pIMFMediaType,IMFSampleGrabberSinkCallback * pIMFSampleGrabberSinkCallback,IMFActivate ** ppIActivate)HRESULT WINAPI <mfidl.h>
MFCreateSequencerSource(IUnknown * pReserved,IMFSequencerSource ** ppSequencerSource)HRESULT WINAPI <mfidl.h>
MFCreateSimpleTypeHandler(IMFMediaTypeHandler ** ppHandler)HRESULT WINAPI <mfidl.h>
MFCreateSinkWriterFromMediaSink(IMFMediaSink * pMediaSink,IMFAttributes * pAttributes,IMFSinkWriter ** ppSinkWriter)HRESULT WINAPI <mfreadwrite.h>
MFCreateSinkWriterFromURL(LPCWSTR pwszOutputURL,IMFByteStream * pByteStream,IMFAttributes * pAttributes,IMFSinkWriter ** ppSinkWriter)HRESULT WINAPI <mfreadwrite.h>
MFCreateSourceReaderFromByteStream(IMFByteStream * pByteStream,IMFAttributes * pAttributes,IMFSourceReader ** ppSourceReader)HRESULT WINAPI <mfreadwrite.h>
MFCreateSourceReaderFromMediaSource(IMFMediaSource * pMediaSource,IMFAttributes * pAttributes,IMFSourceReader ** ppSourceReader)HRESULT WINAPI <mfreadwrite.h>
MFCreateSourceReaderFromURL(LPCWSTR pwszURL,IMFAttributes * pAttributes,IMFSourceReader ** ppSourceReader)HRESULT WINAPI <mfreadwrite.h>
MFCreateSourceResolver(IMFSourceResolver ** ppISourceResolver)HRESULT WINAPI <mfidl.h>
MFCreateStandardQualityManager(IMFQualityManager ** ppQualityManager)HRESULT WINAPI <mfidl.h>
MFCreateStreamDescriptor(DWORD dwStreamIdentifier,DWORD cMediaTypes,IMFMediaType ** apMediaTypes,IMFStreamDescriptor ** ppDescriptor)HRESULT WINAPI <mfidl.h>
MFCreateSystemTimeSource(IMFPresentationTimeSource ** ppSystemTimeSource)HRESULT WINAPI <mfidl.h>
MFCreateTempFile(MF_FILE_ACCESSMODE AccessMode,MF_FILE_OPENMODE OpenMode,MF_FILE_FLAGS fFlags,IMFByteStream ** ppIByteStream) STDAPI <mfapi.h>
MFCreateTopoLoader(IMFTopoLoader ** ppObj)HRESULT WINAPI <mfidl.h>
MFCreateTopology(IMFTopology ** ppTopo)HRESULT WINAPI <mfidl.h>
MFCreateTopologyNode(MF_TOPOLOGY_TYPE NodeType,IMFTopologyNode ** ppNode)HRESULT WINAPI <mfidl.h>
MFCreateTranscodeProfile(IMFTranscodeProfile ** ppTranscodeProfile)HRESULT WINAPI <mfidl.h>
MFCreateTranscodeSinkActivate(IMFActivate ** ppActivate)HRESULT WINAPI <mfidl.h>
MFCreateTranscodeTopology(IMFMediaSource * pSrc,LPCWSTR pwszOutputFilePath,IMFTranscodeProfile * pProfile,IMFTopology ** ppTranscodeTopo)HRESULT WINAPI <mfidl.h>
MFCreateTransformActivate(IMFActivate ** ppActivate)HRESULT WINAPI <mftransform.h>
MFCreateVideoMediaType(const MFVIDEOFORMAT * pVideoFormat,IMFVideoMediaType ** ppIVideoMediaType) STDAPI <mfapi.h>
MFCreateVideoMediaTypeFromBitMapInfoHeader(const BITMAPINFOHEADER * pbmihBitMapInfoHeader,DWORD dwPixelAspectRatioX,DWORD dwPixelAspectRatioY,MFVideoInterlaceMode InterlaceMode,QWORD VideoFlags,QWORD qwFramesPerSecondNumerator,QWORD qwFramesPerSecondDenominator,DWORD dwMaxBitRate,IMFVideoMediaType ** ppIVideoMediaType) STDAPI <mfapi.h>
MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(const BITMAPINFOHEADER * pbmihBitMapInfoHeader,UINT32 cbBitMapInfoHeader,DWORD dwPixelAspectRatioX,DWORD dwPixelAspectRatioY,MFVideoInterlaceMode InterlaceMode,QWORD VideoFlags,DWORD dwFramesPerSecondNumerator,DWORD dwFramesPerSecondDenominator,DWORD dwMaxBitRate,IMFVideoMediaType ** ppIVideoMediaType) STDAPI <mfapi.h>
MFCreateVideoMediaTypeFromSubtype(const GUID * pAMSubtype,IMFVideoMediaType ** ppIVideoMediaType) STDAPI <mfapi.h>
MFCreateVideoMediaTypeFromVideoInfoHeader(const KS_VIDEOINFOHEADER * pVideoInfoHeader,DWORD cbVideoInfoHeader,DWORD dwPixelAspectRatioX,DWORD dwPixelAspectRatioY,MFVideoInterlaceMode InterlaceMode,QWORD VideoFlags,const GUID * pSubtype,IMFVideoMediaType ** ppIVideoMediaType) STDAPI <mfapi.h>
MFCreateVideoMediaTypeFromVideoInfoHeader2(const KS_VIDEOINFOHEADER2 * pVideoInfoHeader,DWORD cbVideoInfoHeader,QWORD AdditionalVideoFlags,const GUID * pSubtype,IMFVideoMediaType ** ppIVideoMediaType) STDAPI <mfapi.h>
MFCreateVideoMixer(IUnknown * pOwner,REFIID riidDevice,REFIID riid,void ** ppVideoMixer)HRESULT WINAPI <evr.h>
MFCreateVideoMixerAndPresenter(IUnknown * pMixerOwner,IUnknown * pPresenterOwner,REFIID riidMixer,void ** ppvVideoMixer,REFIID riidPresenter,void ** ppvVideoPresenter)HRESULT WINAPI <evr.h>
MFCreateVideoPresenter(IUnknown * pOwner,REFIID riidDevice,REFIID riid,void ** ppvVideoPresenter)HRESULT WINAPI <evr.h>
MFCreateVideoRenderer(REFIID riidRenderer,void ** ppVideoRenderer)HRESULT WINAPI <mfidl.h>
MFCreateVideoRendererActivate(HWND hwndVideo,IMFActivate ** ppActivate)HRESULT WINAPI <mfidl.h>
MFCreateVideoSampleAllocator(REFIID riid,void ** ppSampleAllocator)HRESULT WINAPI <evr.h>
MFCreateVideoSampleAllocatorEx(REFIID riid,void ** ppSampleAllocator) STDAPI <mfapi.h>
MFCreateVideoSampleFromSurface(IUnknown * pUnkSurface,IMFSample ** ppSample)HRESULT WINAPI <evr.h>
MFCreateWaveFormatExFromMFMediaType(IMFMediaType * pMFType,WAVEFORMATEX ** ppWF,UINT32 * pcbSize,UINT32 Flags=MFWaveFormatExConvertFlag_Normal) STDAPI <mfapi.h>
MFCreateWICBitmapBuffer(REFIID riid,IUnknown * punkSurface,IMFMediaBuffer ** ppBuffer) STDAPI <mfapi.h>
MFCreateWMAEncoderActivate(IMFMediaType * pMediaType,IPropertyStore * pEncodingConfigurationProperties,IMFActivate ** ppActivate)HRESULT STDMETHODCALLTYPE <wmcontainer.h>
MFCreateWMVEncoderActivate(IMFMediaType * pMediaType,IPropertyStore * pEncodingConfigurationProperties,IMFActivate ** ppActivate)HRESULT STDMETHODCALLTYPE <wmcontainer.h>
MFDeserializeAttributesFromStream(IMFAttributes * pAttr,DWORD dwOptions,IStream * pStm)STDAPI <mfobjects.h>
MFEndCreateFile(IMFAsyncResult * pResult,IMFByteStream ** ppFile) STDAPI <mfapi.h>
MFEndRegisterWorkQueueWithMMCSS(IMFAsyncResult * pResult,DWORD * pdwTaskId) STDAPI <mfapi.h>
MFEndUnregisterWorkQueueWithMMCSS(IMFAsyncResult * pResult) STDAPI <mfapi.h>
MFEnumDeviceSources(IMFAttributes * pAttributes,IMFActivate *** pppSourceActivate,UINT32 * pcSourceActivate)HRESULT WINAPI <mfidl.h>
MFENUMPROC(HDC hdc,HANDLETABLE * lpht,METARECORD * lpMR,int nObj,LPARAM lParam) typedef int<wingdi.h>
MFFrameRateToAverageTimePerFrame(UINT32 unNumerator,UINT32 unDenominator,UINT64 * punAverageTimePerFrame) STDAPI <mfapi.h>
MFGetAttribute2UINT32asUINT64(IMFAttributes * pattr,REFGUID guid,UINT32 * puh,UINT32 * pul) inline HRESULT <mfapi.h>
MFGetAttributeDouble(IMFAttributes * pattr,REFGUID guid,double fdef) inline double <mfapi.h>
MFGetAttributeRatio(IMFAttributes * pattr,REFGUID guid,UINT32 * pn,UINT32 * pd) inline HRESULT <mfapi.h>
MFGetAttributesAsBlob(IMFAttributes * pAttributes,UINT8 * pBuf,UINT cbBufSize) STDAPI <mfapi.h>
MFGetAttributesAsBlobSize(IMFAttributes * pAttributes,UINT32 * pcbBufSize) STDAPI <mfapi.h>
MFGetAttributeSize(IMFAttributes * pattr,REFGUID guid,UINT32 * pw,UINT32 * ph) inline HRESULT <mfapi.h>
MFGetAttributeString(IMFAttributes * pattr,REFGUID guid,PWSTR * ppsz) inline HRESULT <mfapi.h>
MFGetAttributeUINT32(IMFAttributes * pattr,REFGUID guid,UINT32 udef) inline UINT32 <mfapi.h>
MFGetAttributeUINT64(IMFAttributes * pattr,REFGUID guid,UINT64 udef) inline UINT64 <mfapi.h>
MFGetContentProtectionSystemCLSID(REFGUID guidProtectionSystemID,CLSID * pclsid) STDAPI <mfapi.h>
MFGetMFTMerit(IUnknown * pMFT,UINT32 cbVerifier,const BYTE * verifier,DWORD * merit) STDAPI <mfapi.h>
MFGetPlaneSize(DWORD format,DWORD dwWidth,DWORD dwHeight,DWORD * pdwPlaneSize) STDAPI <mfapi.h>
MFGetPluginControl(IMFPluginControl ** ppPluginControl) STDAPI <mfapi.h>
MFGetService(IUnknown * punkObject,REFGUID guidService,REFIID riid,LPVOID * ppvObject)HRESULT WINAPI <mfidl.h>
MFGetStrideForBitmapInfoHeader(DWORD format,DWORD dwWidth,LONG * pStride) STDAPI <mfapi.h>
MFGetSupportedMimeTypes(PROPVARIANT * pPropVarMimeTypeArray)HRESULT WINAPI <mfidl.h>
MFGetSupportedSchemes(PROPVARIANT * pPropVarSchemeArray)HRESULT WINAPI <mfidl.h>
MFGetSystemTime(void)MFTIME WINAPI <mfidl.h>
MFGetTimerPeriodicity(DWORD * Periodicity) STDAPI <mfapi.h>
MFGetTopoNodeCurrentType(IMFTopologyNode * pNode,DWORD dwStreamIndex,WINBOOL fOutput,IMFMediaType ** ppType)HRESULT WINAPI <mfidl.h>
MFGetUncompressedVideoFormat(const MFVIDEOFORMAT * pVideoFormat) DWORD STDMETHODCALLTYPE <mfapi.h>
MFGetWorkQueueMMCSSClass(DWORD dwWorkQueueId,LPWSTR pwszClass,DWORD * pcchClass) STDAPI <mfapi.h>
MFGetWorkQueueMMCSSPriority(DWORD dwWorkQueueId,LONG * lPriority) STDAPI <mfapi.h>
MFGetWorkQueueMMCSSTaskId(DWORD dwWorkQueueId,LPDWORD pdwTaskId) STDAPI <mfapi.h>
MFHeapAlloc(size_t nSize,ULONG dwFlags,char * pszFile,int line,EAllocationType eat) EXTERN_C void<mfapi.h>
MFHeapFree(void * pv) EXTERN_C void WINAPI <mfapi.h>
MFInitAMMediaTypeFromMFMediaType(IMFMediaType * pMFType,GUID guidFormatBlockType,AM_MEDIA_TYPE * pAMType) STDAPI <mfapi.h>
MFInitAttributesFromBlob(IMFAttributes * pAttributes,const UINT8 * pBuf,UINT cbBufSize) STDAPI <mfapi.h>
MFInitMediaTypeFromAMMediaType(IMFMediaType * pMFType,const AM_MEDIA_TYPE * pAMType) STDAPI <mfapi.h>
MFInitMediaTypeFromMFVideoFormat(IMFMediaType * pMFType,const MFVIDEOFORMAT * pMFVF,UINT32 cbBufSize) STDAPI <mfapi.h>
MFInitMediaTypeFromMPEG1VideoInfo(IMFMediaType * pMFType,const MPEG1VIDEOINFO * pMP1VI,UINT32 cbBufSize,const GUID * pSubtype=NULL) STDAPI <mfapi.h>
MFInitMediaTypeFromMPEG2VideoInfo(IMFMediaType * pMFType,const MPEG2VIDEOINFO * pMP2VI,UINT32 cbBufSize,const GUID * pSubtype=NULL) STDAPI <mfapi.h>
MFInitMediaTypeFromVideoInfoHeader(IMFMediaType * pMFType,const VIDEOINFOHEADER * pVIH,UINT32 cbBufSize,const GUID * pSubtype=NULL) STDAPI <mfapi.h>
MFInitMediaTypeFromVideoInfoHeader2(IMFMediaType * pMFType,const VIDEOINFOHEADER2 * pVIH2,UINT32 cbBufSize,const GUID * pSubtype=NULL) STDAPI <mfapi.h>
MFInitMediaTypeFromWaveFormatEx(IMFMediaType * pMFType,const WAVEFORMATEX * pWaveFormat,UINT32 cbBufSize) STDAPI <mfapi.h>
MFInitVideoFormat(MFVIDEOFORMAT * pVideoFormat,MFStandardVideoFormat type) STDAPI <mfapi.h>
MFInitVideoFormat_RGB(MFVIDEOFORMAT * pVideoFormat,DWORD dwWidth,DWORD dwHeight,DWORD D3Dfmt) STDAPI <mfapi.h>
MFInvokeCallback(IMFAsyncResult * pAsyncResult) STDAPI <mfapi.h>
MFIsFormatYUV(DWORD Format) STDAPI_<mfapi.h>
MFllMulDiv(LONGLONG a,LONGLONG b,LONGLONG c,LONGLONG d) LONGLONG WINAPI <mfapi.h>
MFLockDXGIDeviceManager(UINT * pResetToken,IMFDXGIDeviceManager ** ppManager) STDAPI <mfapi.h>
MFLockPlatform(void) STDAPI <mfapi.h>
MFLockSharedWorkQueue(PCWSTR wszClass,LONG BasePriority,DWORD * pdwTaskId,DWORD * pID) STDAPI <mfapi.h>
MFLockWorkQueue(DWORD dwWorkQueue) STDAPI <mfapi.h>
MFMapDX9FormatToDXGIFormat(DWORD dx9) STDAPI_<mfapi.h>
MFMapDXGIFormatToDX9Format(DXGI_FORMAT dx11) STDAPI_<mfapi.h>
MFPCreateMediaPlayer(LPCWSTR pwszURL,WINBOOL fStartPlayback,MFP_CREATION_OPTIONS creationOptions,IMFPMediaPlayerCallback * pCallback,HWND hWnd,IMFPMediaPlayer ** ppMediaPlayer)HRESULT WINAPI <mfplay.h>
MFPERIODICCALLBACK(IUnknown * pContext) typedef void<mfapi.h>
MFPutWaitingWorkItem(HANDLE hEvent,LONG Priority,IMFAsyncResult * pResult,MFWORKITEM_KEY * pKey) STDAPI <mfapi.h>
MFPutWorkItem(DWORD dwQueue,IMFAsyncCallback * pCallback,IUnknown * pState) STDAPI <mfapi.h>
MFPutWorkItem2(DWORD dwQueue,LONG Priority,IMFAsyncCallback * pCallback,IUnknown * pState) STDAPI <mfapi.h>
MFPutWorkItemEx(DWORD dwQueue,IMFAsyncResult * pResult) STDAPI <mfapi.h>
MFPutWorkItemEx2(DWORD dwQueue,LONG Priority,IMFAsyncResult * pResult) STDAPI <mfapi.h>
MFRegisterLocalByteStreamHandler(PCWSTR szFileExtension,PCWSTR szMimeType,IMFActivate * pActivate) STDAPI <mfapi.h>
MFRegisterLocalSchemeHandler(PCWSTR szScheme,IMFActivate * pActivate) STDAPI <mfapi.h>
MFRegisterPlatformWithMMCSS(PCWSTR wszClass,DWORD * pdwTaskId,LONG lPriority) STDAPI <mfapi.h>
MFRemovePeriodicCallback(DWORD dwKey) STDAPI <mfapi.h>
MFRequireProtectedEnvironment(IMFPresentationDescriptor * pPresentationDescriptor)HRESULT WINAPI <mfidl.h>
MFScheduleWorkItem(IMFAsyncCallback * pCallback,IUnknown * pState,INT64 Timeout,MFWORKITEM_KEY * pKey) STDAPI <mfapi.h>
MFScheduleWorkItemEx(IMFAsyncResult * pResult,INT64 Timeout,MFWORKITEM_KEY * pKey) STDAPI <mfapi.h>
MFSerializeAttributesToStream(IMFAttributes * pAttr,DWORD dwOptions,IStream * pStm)STDAPI <mfobjects.h>
MFSerializePresentationDescriptor(IMFPresentationDescriptor * pPD,DWORD * pcbData,BYTE ** ppbData)HRESULT WINAPI <mfidl.h>
MFSetAttribute2UINT32asUINT64(IMFAttributes * pattr,REFGUID guid,UINT32 uh,UINT32 ul) inline HRESULT <mfapi.h>
MFSetAttributeRatio(IMFAttributes * pattr,REFGUID guid,UINT32 un,UINT32 ud) inline HRESULT <mfapi.h>
MFSetAttributeSize(IMFAttributes * pattr,REFGUID guid,UINT32 uw,UINT32 uh) inline HRESULT <mfapi.h>
MFShutdown(void) STDAPI <mfapi.h>
MFShutdownObject(IUnknown * pUnk)HRESULT WINAPI <mfidl.h>
MFStartup(ULONG Version,DWORD dwFlags=MFSTARTUP_FULL) STDAPI <mfapi.h>
MFTEnum(GUID guidCategory,UINT32 Flags,MFT_REGISTER_TYPE_INFO * pInputType,MFT_REGISTER_TYPE_INFO * pOutputType,IMFAttributes * pAttributes,CLSID ** ppclsidMFT,UINT32 * pcMFTs) STDAPI <mfapi.h>
MFTEnumEx(GUID guidCategory,UINT32 Flags,const MFT_REGISTER_TYPE_INFO * pInputType,const MFT_REGISTER_TYPE_INFO * pOutputType,IMFActivate *** pppMFTActivate,UINT32 * pnumMFTActivate) STDAPI <mfapi.h>
MFTGetInfo(CLSID clsidMFT,LPWSTR * pszName,MFT_REGISTER_TYPE_INFO ** ppInputTypes,UINT32 * pcInputTypes,MFT_REGISTER_TYPE_INFO ** ppOutputTypes,UINT32 * pcOutputTypes,IMFAttributes ** ppAttributes) STDAPI <mfapi.h>
MFTranscodeGetAudioOutputAvailableTypes(REFGUID guidSubType,DWORD dwMFTFlags,IMFAttributes * pCodecConfig,IMFCollection ** ppAvailableTypes)HRESULT WINAPI <mfidl.h>
MFTRegister(CLSID clsidMFT,GUID guidCategory,LPWSTR pszName,UINT32 Flags,UINT32 cInputTypes,MFT_REGISTER_TYPE_INFO * pInputTypes,UINT32 cOutputTypes,MFT_REGISTER_TYPE_INFO * pOutputTypes,IMFAttributes * pAttributes) STDAPI <mfapi.h>
MFTRegisterLocal(IClassFactory * pClassFactory,REFGUID guidCategory,LPCWSTR pszName,UINT32 Flags,UINT32 cInputTypes,const MFT_REGISTER_TYPE_INFO * pInputTypes,UINT32 cOutputTypes,const MFT_REGISTER_TYPE_INFO * pOutputTypes) STDAPI <mfapi.h>
MFTRegisterLocalByCLSID(REFCLSID clisdMFT,REFGUID guidCategory,LPCWSTR pszName,UINT32 Flags,UINT32 cInputTypes,const MFT_REGISTER_TYPE_INFO * pInputTypes,UINT32 cOutputTypes,const MFT_REGISTER_TYPE_INFO * pOutputTypes) STDAPI <mfapi.h>
MFTUnregister(CLSID clsidMFT) STDAPI <mfapi.h>
MFTUnregisterLocal(IClassFactory * pClassFactory) STDAPI <mfapi.h>
MFTUnregisterLocalByCLSID(CLSID clsidMFT) STDAPI <mfapi.h>
MFUnlockDXGIDeviceManager(void) STDAPI <mfapi.h>
MFUnlockPlatform(void) STDAPI <mfapi.h>
MFUnlockWorkQueue(DWORD dwWorkQueue) STDAPI <mfapi.h>
MFUnregisterPlatformFromMMCSS(void) STDAPI <mfapi.h>
MFUnwrapMediaType(IMFMediaType * pWrap,IMFMediaType ** ppOrig) STDAPI <mfapi.h>
MFValidateMediaTypeSize(GUID FormatType,UINT8 * pBlock,UINT32 cbSize) STDAPI <mfapi.h>
MFVideoFlag_FieldRepeatCountMask(0x100 | 0x200)<mfobjects.h>
MFVideoFlag_SrcContentHintMask(0x4 | 0x8)<mfobjects.h>
MFWrapMediaType(IMFMediaType * pOrig,REFGUID MajorType,REFGUID SubType,IMFMediaType ** ppWrap) STDAPI <mfapi.h>
MgmAddGroupMembershipEntry(HANDLE hProtocol,DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,DWORD dwIfIndex,DWORD dwIfNextHopIPAddr,DWORD dwFlags)DWORD <mgm.h>
MgmDeleteGroupMembershipEntry(HANDLE hProtocol,DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,DWORD dwIfIndex,DWORD dwIfNextHopIPAddr,DWORD dwFlags)DWORD <mgm.h>
MgmDeRegisterMProtocol(HANDLE hProtocol)DWORD <mgm.h>
MgmGetFirstMfe(PDWORD pdwBufferSize,PBYTE pbBuffer,PDWORD pdwNumEntries)DWORD <mgm.h>
MgmGetFirstMfeStats(PDWORD pdwBufferSize,PBYTE pbBuffer,PDWORD pdwNumEntries,DWORD dwFlags)DWORD <mgm.h>
MgmGetMfe(PMIB_IPMCAST_MFE pimm,PDWORD pdwBufferSize,PBYTE pbBuffer)DWORD <mgm.h>
MgmGetMfeStats(PMIB_IPMCAST_MFE pimm,PDWORD pdwBufferSize,PBYTE pbBuffer,DWORD dwFlags)DWORD <mgm.h>
MgmGetNextMfe(PMIB_IPMCAST_MFE pimmStart,PDWORD pdwBufferSize,PBYTE pbBuffer,PDWORD pdwNumEntries)DWORD <mgm.h>
MgmGetNextMfeStats(PMIB_IPMCAST_MFE pimmStart,PDWORD pdwBufferSize,PBYTE pbBuffer,PDWORD pdwNumEntries,DWORD dwFlags)DWORD <mgm.h>
MgmGetProtocolOnInterface(DWORD dwIfIndex,DWORD dwIfNextHopAddr,PDWORD pdwIfProtocolId,PDWORD pdwIfComponentId)DWORD <mgm.h>
MgmGroupEnumerationEnd(HANDLE hEnum)DWORD <mgm.h>
MgmGroupEnumerationGetNext(HANDLE hEnum,PDWORD pdwBufferSize,PBYTE pbBuffer,PDWORD pdwNumEntries)DWORD <mgm.h>
MgmGroupEnumerationStart(HANDLE hProtocol,MGM_ENUM_TYPES metEnumType,HANDLE * phEnumHandle)DWORD <mgm.h>
MgmRegisterMProtocol(PROUTING_PROTOCOL_CONFIG prpiInfo,DWORD dwProtocolId,DWORD dwComponentId,HANDLE * phProtocol)DWORD <mgm.h>
MgmReleaseInterfaceOwnership(HANDLE hProtocol,DWORD dwIfIndex,DWORD dwIfNextHopAddr)DWORD <mgm.h>
MgmSetMfe(HANDLE hProtocol,PMIB_IPMCAST_MFE pmimm)DWORD <mgm.h>
MgmTakeInterfaceOwnership(HANDLE hProtocol,DWORD dwIfIndex,DWORD dwIfNextHopAddr)DWORD <mgm.h>
MIB_INFO_SIZE(S)<iprtrmib.h>
MIB_INFO_SIZE_IN_DWORDS(S)<iprtrmib.h>
Microsoft(& str)[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])            explicit HStringReference<corewrappers.h>
Microsoft(& strRef)[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])[sizeDest])           explicit HStringReference<corewrappers.h>
Microsoft()           ~RoInitializeWrapper<corewrappers.h>
Microsoft(ComPtr & r)       void Swap<corewrappers.h>
Microsoft(ComPtr && other)       ComPtr<corewrappers.h>
Microsoft(ComPtr && r)       void Swap<corewrappers.h>
Microsoft(ComPtr<U> && other)       ComPtr<corewrappers.h>
Microsoft(ComPtr<U> * p)       HRESULT As<corewrappers.h>
Microsoft(const ComPtr & other)       ComPtr<corewrappers.h>
Microsoft(const ComPtr<U> & other)       ComPtr<corewrappers.h>
Microsoft(const HStringReference & other)           HStringReference<corewrappers.h>
Microsoft(const T & strRef)           explicit HStringReference<corewrappers.h>
Microsoft(const wchar_t * str,unsigned int len)           void Init<corewrappers.h>
Microsoft(Details::ComPtrRef<ComPtr<U>> p)       HRESULT As<corewrappers.h>
Microsoft(HRESULT hr,DWORD flags=EXCEPTION_NONCONTINUABLE)       inline void DECLSPEC_NORETURN RaiseException<corewrappers.h>
Microsoft(HSTRING * str)           HRESULT CopyTo<corewrappers.h>
Microsoft(IInspectable,InterfaceType)               static_assert<corewrappers.h>
Microsoft(InterfaceType * other)       ComPtr<corewrappers.h>
Microsoft(InterfaceType ** ptr)       HRESULT CopyTo<corewrappers.h>
Microsoft(IUnknown,InterfaceType)               static_assert<corewrappers.h>
Microsoft(nullptr)))))))))))))))))       ComPtr<corewrappers.h>
Microsoft(REFIID riid,ComPtr<IUnknown> * p)       HRESULT AsIID<corewrappers.h>
Microsoft(REFIID riid,void ** ptr)       HRESULT CopyTo<corewrappers.h>
Microsoft(RO_INIT_TYPE flags)           RoInitializeWrapper<corewrappers.h>
Microsoft(T * ptr)           ComPtrRef<corewrappers.h>
Microsoft(U * other)       ComPtr<corewrappers.h>
Microsoft(U ** ptr)       HRESULT CopyTo<corewrappers.h>
Microsoft(unsigned int * len)           const wchar_t<corewrappers.h>
MIDI_CTL_CODE()()()
MIDI_CTL_CODE(subcode, iomethod, access)<ntddsnd.h>
midiConnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiDisconnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInAddBuffer(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInClose(HMIDIIN hmi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetDevCaps(UINT_PTR uDeviceID,LPMIDIINCAPSA pmic,UINT cbmic) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetDevCapsA(UINT_PTR uDeviceID,LPMIDIINCAPSA pmic,UINT cbmic) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetDevCapsW(UINT_PTR uDeviceID,LPMIDIINCAPSW pmic,UINT cbmic) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetErrorText(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetID(HMIDIIN hmi,LPUINT puDeviceID) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInGetNumDevs(void) WINMMAPI UINT WINAPI <mmsystem.h>
midiInMessage(HMIDIIN hmi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInOpen(LPHMIDIIN phmi,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInPrepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInReset(HMIDIIN hmi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInStart(HMIDIIN hmi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInStop(HMIDIIN hmi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiInUnprepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutCacheDrumPatches(HMIDIOUT hmo,UINT uPatch,LPWORD pwkya,UINT fuCache) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutCachePatches(HMIDIOUT hmo,UINT uBank,LPWORD pwpa,UINT fuCache) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutClose(HMIDIOUT hmo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetDevCaps(UINT_PTR uDeviceID,LPMIDIOUTCAPSA pmoc,UINT cbmoc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetDevCapsA(UINT_PTR uDeviceID,LPMIDIOUTCAPSA pmoc,UINT cbmoc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetDevCapsW(UINT_PTR uDeviceID,LPMIDIOUTCAPSW pmoc,UINT cbmoc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetErrorText(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetID(HMIDIOUT hmo,LPUINT puDeviceID) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutGetNumDevs(void) WINMMAPI UINT WINAPI <mmsystem.h>
midiOutGetVolume(HMIDIOUT hmo,LPDWORD pdwVolume) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutLongMsg(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutMessage(HMIDIOUT hmo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutOpen(LPHMIDIOUT phmo,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutPrepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutReset(HMIDIOUT hmo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutSetVolume(HMIDIOUT hmo,DWORD dwVolume) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutShortMsg(HMIDIOUT hmo,DWORD dwMsg) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiOutUnprepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamClose(HMIDISTRM hms) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamOpen(LPHMIDISTRM phms,LPUINT puDeviceID,DWORD cMidi,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamOut(HMIDISTRM hms,LPMIDIHDR pmh,UINT cbmh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamPause(HMIDISTRM hms) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamPosition(HMIDISTRM hms,LPMMTIME lpmmt,UINT cbmmt) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamRestart(HMIDISTRM hms) WINMMAPI MMRESULT WINAPI <mmsystem.h>
midiStreamStop(HMIDISTRM hms) WINMMAPI MMRESULT WINAPI <mmsystem.h>
MIDL(x)<aqadmtyp.h>
MIDL_ascii_strcpy(target,source)<rpcndr.h>
MIDL_ascii_strlen(string)<rpcndr.h>
MIDL_ES_ALLOC(void * state,char ** pbuffer,unsigned int * psize) typedef void<midles.h>
MIDL_ES_READ(void * state,char ** pbuffer,unsigned int * psize) typedef void<midles.h>
MIDL_ES_WRITE(void * state,char * buffer,unsigned int size) typedef void<midles.h>
MIDL_INTERFACE(x)<rpcndr.h>
MIDL_memset(s,c,n)<rpcndr.h>
MIDL_SIZE_IS(x)<audiosessiontypes.h>
MIDL_user_allocate(SIZE_T) void<xmltrnsf.h>
MIDL_user_allocate(size_t) void<xmltrnsf.h>
MIDL_user_free(void *) void __RPC_API <xmltrnsf.h>
MIMEAssociationDialog(HWND hwndParent,DWORD dwInFlags,PCSTR pcszFile,PCSTR pcszMIMEContentType,PSTR pszAppBuf,UINT ucAppBufLen) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
MIMEAssociationDialogA(HWND hwndParent,DWORD dwInFlags,PCSTR pcszFile,PCSTR pcszMIMEContentType,PSTR pszAppBuf,UINT ucAppBufLen) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
MIMEAssociationDialogW(HWND hwndParent,DWORD dwInFlags,PCWSTR pcszFile,PCWSTR pcszMIMEContentType,PWSTR pszAppBuf,UINT ucAppBufLen) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
min(a,b)<winnls32.h>
MINIDUMP_CALLBACK_ROUTINE(PVOID CallbackParam,CONST PMINIDUMP_CALLBACK_INPUT CallbackInput,PMINIDUMP_CALLBACK_OUTPUT CallbackOutput) typedef WINBOOL<psdk>
MiniDumpReadDumpStream(PVOID BaseOfDump,ULONG StreamNumber,PMINIDUMP_DIRECTORY * Dir,PVOID * StreamPointer,ULONG * StreamSize) WINBOOL WINAPI <psdk>
MiniDumpWriteDump(HANDLE hProcess,DWORD ProcessId,HANDLE hFile,MINIDUMP_TYPE DumpType,CONST PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,CONST PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,CONST PMINIDUMP_CALLBACK_INFORMATION CallbackParam) WINBOOL WINAPI <psdk>
Minimize(void)virtual HRESULT WINAPI <mmcobj.h>
MiniportReserved(PVOID) UCHAR <ntddndis.h>
MiniportReservedEx(PVOID) UCHAR <ndis.h>
MirrorVirtualDisk(HANDLE VirtualDiskHandle,MIRROR_VIRTUAL_DISK_FLAG Flags,PMIRROR_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
MIX_CTL_CODE()()()
MIX_CTL_CODE(subcode, iomethod, access)<ntddsnd.h>
mixerClose(HMIXER hmx) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetControlDetails(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetControlDetailsA(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetControlDetailsW(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetDevCapsW(UINT_PTR uMxId,LPMIXERCAPSW pmxcaps,UINT cbmxcaps) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetID(HMIXEROBJ hmxobj,UINT * puMxId,DWORD fdwId) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetLineControlsW(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSW pmxlc,DWORD fdwControls) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetLineInfoW(HMIXEROBJ hmxobj,LPMIXERLINEW pmxl,DWORD fdwInfo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerGetNumDevs(void) WINMMAPI UINT WINAPI <mmsystem.h>
mixerMessage(HMIXER hmx,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2) WINMMAPI DWORD WINAPI <mmsystem.h>
mixerOpen(LPHMIXER phmx,UINT uMxId,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mixerSetControlDetails(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails) WINMMAPI MMRESULT WINAPI <mmsystem.h>
MKFOURCC(ch0,ch1,ch2,ch3)<vfw.h>
MkParseDisplayName(LPBC pbc,LPCOLESTR szUserName,ULONG * pchEaten,LPMONIKER * ppmk)WINOLEAPI <objbase.h>
MkParseDisplayNameEx(IBindCtx * pbc,LPCWSTR szDisplayName,ULONG * pchEaten,LPMONIKER * ppmk)STDAPI <urlmon.h>
MmAddPhysicalMemory(IN PPHYSICAL_ADDRESS StartAddress,IN OUT PLARGE_INTEGER NumberOfBytes)<ntddk.h>
MmAddVerifierThunks(IN PVOID ThunkBuffer,IN ULONG ThunkBufferSize)<wdm.h>
MmAdvanceMdl(IN OUT PMDL Mdl,IN ULONG NumberOfBytes)<wdm.h>
MmAllocateContiguousMemory(IN SIZE_T NumberOfBytes,IN PHYSICAL_ADDRESS HighestAcceptableAddress)<wdm.h>
MmAllocateContiguousMemorySpecifyCache(IN SIZE_T NumberOfBytes,IN PHYSICAL_ADDRESS LowestAcceptableAddress,IN PHYSICAL_ADDRESS HighestAcceptableAddress,IN PHYSICAL_ADDRESS BoundaryAddressMultiple OPTIONAL,IN MEMORY_CACHING_TYPE CacheType)<wdm.h>
MmAllocateContiguousMemorySpecifyCacheNode(IN SIZE_T NumberOfBytes,IN PHYSICAL_ADDRESS LowestAcceptableAddress,IN PHYSICAL_ADDRESS HighestAcceptableAddress,IN PHYSICAL_ADDRESS BoundaryAddressMultiple OPTIONAL,IN MEMORY_CACHING_TYPE CacheType,IN NODE_REQUIREMENT PreferredNode)<wdm.h>
MmAllocateMappingAddress(IN SIZE_T NumberOfBytes,IN ULONG PoolTag)<wdm.h>
MmAllocateNonCachedMemory(IN SIZE_T NumberOfBytes)<ntddk.h>
MmAllocatePagesForMdl(IN PHYSICAL_ADDRESS LowAddress,IN PHYSICAL_ADDRESS HighAddress,IN PHYSICAL_ADDRESS SkipBytes,IN SIZE_T TotalBytes)<wdm.h>
MmAllocatePagesForMdlEx(IN PHYSICAL_ADDRESS LowAddress,IN PHYSICAL_ADDRESS HighAddress,IN PHYSICAL_ADDRESS SkipBytes,IN SIZE_T TotalBytes,IN MEMORY_CACHING_TYPE CacheType,IN ULONG Flags)<wdm.h>
MmBuildMdlForNonPagedPool(IN OUT PMDLX MemoryDescriptorList)<wdm.h>
MMC_CALLBACK(unsigned short *) static unsigned short<mmc.h>
MmCanFileBeTruncated(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN PLARGE_INTEGER NewFileSize OPTIONAL)<ntifs.h>
MMCFreeNotifyHandle(LONG_PTR lNotifyHandle) STDAPI <mmc.h>
MMCPropertyChangeNotify(LONG_PTR lNotifyHandle,LPARAM param) STDAPI <mmc.h>
MMCPropertyHelp(LPOLESTR pszHelpTopic) STDAPI <mmc.h>
MMCPropPageCallback(void * vpsp) STDAPI <mmc.h>
MmCreateMdl(IN PMDL MemoryDescriptorList OPTIONAL,IN PVOID Base,IN SIZE_T Length)<wdm.h>
MmCreateMirror(VOID)<ntddk.h>
MmDoesFileHaveUserWritableReferences(IN PSECTION_OBJECT_POINTERS SectionPointer)<ntifs.h>
MmFlushImageSection(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN MMFLUSH_TYPE FlushType)<ntifs.h>
MmForceSectionClosed(IN PSECTION_OBJECT_POINTERS SectionObjectPointer,IN BOOLEAN DelayClose)<ntifs.h>
MmFreeContiguousMemory(IN PVOID BaseAddress)<wdm.h>
MmFreeContiguousMemorySpecifyCache(IN PVOID BaseAddress,IN SIZE_T NumberOfBytes,IN MEMORY_CACHING_TYPE CacheType)<wdm.h>
MmFreeMappingAddress(IN PVOID BaseAddress,IN ULONG PoolTag)<wdm.h>
MmFreeNonCachedMemory(IN PVOID BaseAddress,IN SIZE_T NumberOfBytes)<ntddk.h>
MmFreePagesFromMdl(IN PMDLX MemoryDescriptorList)<wdm.h>
MmGetMdlBaseVa(Mdl)<wdm.h>
MmGetMdlByteCount(_Mdl)<wdm.h>
MmGetMdlByteOffset(_Mdl)<wdm.h>
MmGetMdlPfnArray(_Mdl)<wdm.h>
MmGetMdlVirtualAddress(_Mdl)<wdm.h>
MmGetPhysicalAddress(IN PVOID BaseAddress)<ntddk.h>
MmGetPhysicalMemoryRanges(VOID)<ntddk.h>
MmGetProcedureAddress(Address)<wdm.h>
MmGetSystemAddressForMdl(Mdl)<wdm.h>
MmGetSystemAddressForMdlSafe(_Mdl, _Priority)<wdm.h>
MmGetSystemRoutineAddress(IN PUNICODE_STRING SystemRoutineName)<wdm.h>
MmGetVirtualForPhysical(IN PHYSICAL_ADDRESS PhysicalAddress)<ntddk.h>
MmInitializeMdl(_MemoryDescriptorList,\\\n_BaseVa,\\\n_Length)                   _Length<wdm.h>
mmioAdvance(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuAdvance) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioAscend(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuAscend) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioClose(HMMIO hmmio,UINT fuClose) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioCreateChunk(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuCreate) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioDescend(HMMIO hmmio,LPMMCKINFO pmmcki,const MMCKINFO * pmmckiParent,UINT fuDescend) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioFlush(HMMIO hmmio,UINT fuFlush) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioFOURCC(ch0,ch1,ch2,ch3)<vfw.h>
mmioGetInfo(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuInfo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioInstallIOProc(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags) WINMMAPI LPMMIOPROC WINAPI <mmsystem.h>
mmioInstallIOProcA(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags) WINMMAPI LPMMIOPROC WINAPI <mmsystem.h>
mmioInstallIOProcW(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags) WINMMAPI LPMMIOPROC WINAPI <mmsystem.h>
mmioOpen(LPSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen) WINMMAPI HMMIO WINAPI <mmsystem.h>
MMIOPROC(LPSTR lpmmioinfo,UINT uMsg,LPARAM lParam1,LPARAM lParam2) typedef LRESULT<mmsystem.h>
mmioRead(HMMIO hmmio,HPSTR pch,LONG cch) WINMMAPI LONG WINAPI <mmsystem.h>
mmioRename(LPCSTR pszFileName,LPCSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioRenameA(LPCSTR pszFileName,LPCSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioRenameW(LPCWSTR pszFileName,LPCWSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioSeek(HMMIO hmmio,LONG lOffset,int iOrigin) WINMMAPI LONG WINAPI <mmsystem.h>
mmioSendMessage(HMMIO hmmio,UINT uMsg,LPARAM lParam1,LPARAM lParam2) WINMMAPI LRESULT WINAPI <mmsystem.h>
mmioSetBuffer(HMMIO hmmio,LPSTR pchBuffer,LONG cchBuffer,UINT fuBuffer) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioSetInfo(HMMIO hmmio,LPCMMIOINFO pmmioinfo,UINT fuInfo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
mmioStringToFOURCC(LPCSTR sz,UINT uFlags) WINMMAPI FOURCC WINAPI <mmsystem.h>
mmioStringToFOURCCA(LPCSTR sz,UINT uFlags) WINMMAPI FOURCC WINAPI <mmsystem.h>
mmioStringToFOURCCW(LPCWSTR sz,UINT uFlags) WINMMAPI FOURCC WINAPI <mmsystem.h>
mmioWrite(HMMIO hmmio,const char _huge * pch,LONG cch) WINMMAPI LONG WINAPI <mmsystem.h>
MmIsAddressValid(IN PVOID VirtualAddress)<ntddk.h>
MmIsDriverVerifying(IN struct _DRIVER_OBJECT * DriverObject)<wdm.h>
MmIsDriverVerifyingByAddress(IN PVOID AddressWithinSection)<wdm.h>
MmIsIoSpaceActive(IN PHYSICAL_ADDRESS StartAddress,IN SIZE_T NumberOfBytes)<wdm.h>
MmIsNonPagedSystemAddressValid(IN PVOID VirtualAddress)<ntddk.h>
MmIsRecursiveIoFault(VOID)<ntifs.h>
MmIsThisAnNtAsSystem(VOID)<ntddk.h>
MmIsVerifierEnabled(OUT PULONG VerifierFlags)<wdm.h>
MmLockPagableCodeSection(Address)<wdm.h>
MmLockPagableDataSection(IN PVOID AddressWithinSection)<wdm.h>
MmLockPagableSectionByHandle(IN PVOID ImageSectionHandle)<ntddk.h>
MmMapIoSpace(IN PHYSICAL_ADDRESS PhysicalAddress,IN SIZE_T NumberOfBytes,IN MEMORY_CACHING_TYPE CacheEnable)<wdm.h>
MmMapLockedPages(IN PMDL MemoryDescriptorList,IN KPROCESSOR_MODE AccessMode)<wdm.h>
MmMapLockedPagesSpecifyCache(IN PMDLX MemoryDescriptorList,IN KPROCESSOR_MODE AccessMode,IN MEMORY_CACHING_TYPE CacheType,IN PVOID BaseAddress OPTIONAL,IN ULONG BugCheckOnFailure,IN MM_PAGE_PRIORITY Priority)<wdm.h>
MmMapLockedPagesWithReservedMapping(IN PVOID MappingAddress,IN ULONG PoolTag,IN PMDL MemoryDescriptorList,IN MEMORY_CACHING_TYPE CacheType)<wdm.h>
MmMapUserAddressesToPage(IN PVOID BaseAddress,IN SIZE_T NumberOfBytes,IN PVOID PageAddress)<ntddk.h>
MmMapVideoDisplay(IN PHYSICAL_ADDRESS PhysicalAddress,IN SIZE_T NumberOfBytes,IN MEMORY_CACHING_TYPE CacheType)<ntddk.h>
MmMapViewInSessionSpace(IN PVOID Section,OUT PVOID * MappedBase,IN OUT PSIZE_T ViewSize)<ntddk.h>
MmMapViewInSystemSpace(IN PVOID Section,OUT PVOID * MappedBase,IN OUT PSIZE_T ViewSize)<ntddk.h>
MmPageEntireDriver(IN PVOID AddressWithinSection)<wdm.h>
MmPrefetchPages(IN ULONG NumberOfLists,IN PREAD_LIST * ReadLists)<ntifs.h>
MmPrepareMdlForReuse(_Mdl)<wdm.h>
MmProbeAndLockPages(IN OUT PMDL MemoryDescriptorList,IN KPROCESSOR_MODE AccessMode,IN LOCK_OPERATION Operation)<wdm.h>
MmProbeAndLockProcessPages(IN OUT PMDL MemoryDescriptorList,IN PEPROCESS Process,IN KPROCESSOR_MODE AccessMode,IN LOCK_OPERATION Operation)<wdm.h>
MmProtectMdlSystemAddress(IN PMDL MemoryDescriptorList,IN ULONG NewProtect)<wdm.h>
MmQuerySystemSize(VOID)<wdm.h>
MmRemovePhysicalMemory(IN PPHYSICAL_ADDRESS StartAddress,IN OUT PLARGE_INTEGER NumberOfBytes)<ntddk.h>
MmResetDriverPaging(IN PVOID AddressWithinSection)<wdm.h>
MmRotatePhysicalView(IN PVOID VirtualAddress,IN OUT PSIZE_T NumberOfBytes,IN PMDLX NewMdl OPTIONAL,IN MM_ROTATE_DIRECTION Direction,IN PMM_ROTATE_COPY_CALLBACK_FUNCTION CopyFunction,IN PVOID Context OPTIONAL)<ntddk.h>
MmSecureVirtualMemory(IN PVOID Address,IN SIZE_T Size,IN ULONG ProbeMode)<ntddk.h>
MmSetAddressRangeModified(IN PVOID Address,IN SIZE_T Length)<ntifs.h>
MmSizeOfMdl(IN PVOID Base,IN SIZE_T Length)<wdm.h>
MmUnlockPagableImageSection(IN PVOID ImageSectionHandle)<wdm.h>
MmUnlockPages(IN OUT PMDL MemoryDescriptorList)<wdm.h>
MmUnmapIoSpace(IN PVOID BaseAddress,IN SIZE_T NumberOfBytes)<wdm.h>
MmUnmapLockedPages(IN PVOID BaseAddress,IN PMDL MemoryDescriptorList)<wdm.h>
MmUnmapReservedMapping(IN PVOID BaseAddress,IN ULONG PoolTag,IN PMDL MemoryDescriptorList)<wdm.h>
MmUnmapVideoDisplay(IN PVOID BaseAddress,IN SIZE_T NumberOfBytes)<ntddk.h>
MmUnmapViewInSessionSpace(IN PVOID MappedBase)<ntddk.h>
MmUnmapViewInSystemSpace(IN PVOID MappedBase)<ntddk.h>
MmUnsecureVirtualMemory(IN HANDLE SecureHandle)<ntddk.h>
MNLS_CompareString(LCID Locale,DWORD dwCmpFlags,LPCSTR lpString1,int cchCount1,LPCSTR lpString2,int cchCount2)
MNLS_CompareStringA(LCID Locale,DWORD dwCmpFlags,LPCSTR lpString1,int cchCount1,LPCSTR lpString2,int cchCount2) int WINAPI <mapinls.h>
MNLS_CompareStringW(LCID Locale,DWORD dwCmpFlags,LPCWSTR lpString1,int cchCount1,LPCWSTR lpString2,int cchCount2) int WINAPI <mapinls.h>
MNLS_GetACP(void) UINT WINAPI <mapinls.h>
MNLS_GetUserDefaultLCID(void) LCID WINAPI <mapinls.h>
MNLS_IsBadStringPtrW(LPCWSTR lpsz,UINT ucchMax) WINBOOL WINAPI <mapinls.h>
MNLS_lstrcmpW(LPCWSTR lpString1,LPCWSTR lpString2) int WINAPI <mapinls.h>
MNLS_lstrcpyW(LPWSTR lpString1,LPCWSTR lpString2) LPWSTR WINAPI <mapinls.h>
MNLS_lstrlenW(LPCWSTR lpString) int WINAPI <mapinls.h>
MNLS_MultiByteToWideChar(UINT uCodePage,DWORD dwFlags,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int cchWideChar) int WINAPI <mapinls.h>
MNLS_WideCharToMultiByte(UINT uCodePage,DWORD dwFlags,LPCWSTR lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cchMultiByte,LPCSTR lpDefaultChar,WINBOOL * lpfUsedDefaultChar) int WINAPI <mapinls.h>
MoCopyMediaType(DMO_MEDIA_TYPE *,const DMO_MEDIA_TYPE *)HRESULT WINAPI <dmort.h>
MoCreateMediaType(DMO_MEDIA_TYPE **,DWORD)HRESULT WINAPI <dmort.h>
Mode(IN PVOID BusContext,IN ULONG) IN ULONG <wsdtypes.h>
MoDeleteMediaType(DMO_MEDIA_TYPE *)HRESULT WINAPI <dmort.h>
ModifyDataSource(ULONG cPropertySets,DBPROPSET rgPropertySets[])virtual HRESULT WINAPI <oledb.h>
ModifyDirectoryObject(ITDirectoryObject * pDirectoryObject)virtual HRESULT WINAPI <rend.h>
ModifyFrame(HCAPTURE hCapture,DWORD FrameNumber,LPBYTE FrameData,DWORD FrameLength,__int64 TimeStamp) __MINGW_EXTENSION HFRAME WINAPI <netmon.h>
ModifyItemState(int nIndex,HRESULTITEM itemID,UINT uAdd,UINT uRemove)virtual HRESULT WINAPI <mmc.h>
ModifyMenu(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
ModifyMenuW(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem) WINUSERAPI WINBOOL WINAPI <winuser.h>
ModifyVhdSet(HANDLE VirtualDiskHandle,const PMODIFY_VHDSET_PARAMETERS Parameters,MODIFY_VHDSET_FLAG Flags)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
ModifyViewStyle(MMC_RESULT_VIEW_STYLE add,MMC_RESULT_VIEW_STYLE remove)virtual HRESULT WINAPI <mmc.h>
ModifyWorldTransform(HDC hdc,CONST XFORM * lpxf,DWORD mode) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Module32First(HANDLE hSnapshot,LPMODULEENTRY32 lpme) WINBOOL WINAPI <tlhelp32.h>
Module32FirstW(HANDLE hSnapshot,LPMODULEENTRY32W lpme) WINBOOL WINAPI <tlhelp32.h>
Module32Next(HANDLE hSnapshot,LPMODULEENTRY32 lpme) WINBOOL WINAPI <tlhelp32.h>
Module32NextW(HANDLE hSnapshot,LPMODULEENTRY32W lpme) WINBOOL WINAPI <tlhelp32.h>
MoDuplicateMediaType(DMO_MEDIA_TYPE **,const DMO_MEDIA_TYPE *)HRESULT WINAPI <dmort.h>
MoFreeMediaType(DMO_MEDIA_TYPE *)HRESULT WINAPI <dmort.h>
MoInitMediaType(DMO_MEDIA_TYPE *,DWORD)HRESULT WINAPI <dmort.h>
MonikerCommonPrefixWith(LPMONIKER pmkThis,LPMONIKER pmkOther,LPMONIKER * ppmkCommon)WINOLEAPI <objbase.h>
MonikerRelativePathTo(LPMONIKER pmkSrc,LPMONIKER pmkDest,LPMONIKER * ppmkRelPath,WINBOOL dwReserved)WINOLEAPI <objbase.h>
MONITORENUMPROC(HMONITOR,HDC,LPRECT,LPARAM) typedef WINBOOL<winuser.h>
MonitorFromPoint(POINT pt,DWORD dwFlags) WINUSERAPI HMONITOR WINAPI <winuser.h>
MonitorFromRect(LPCRECT lprc,DWORD dwFlags) WINUSERAPI HMONITOR WINAPI <winuser.h>
MonitorFromWindow(HWND hwnd,DWORD dwFlags) WINUSERAPI HMONITOR WINAPI <winuser.h>
MonitorMedia(__LONG32 lMediaType)virtual HRESULT WINAPI <tapi3if.h>
MonthCal_GetCalendarBorder(hmc)<commctrl.h>
MonthCal_GetCalendarCount(hmc)<commctrl.h>
MonthCal_GetCalendarGridInfo(hmc, pmcGridInfo)<commctrl.h>
MonthCal_GetCALID(hmc)<commctrl.h>
MonthCal_GetColor(hmc,iColor)<commctrl.h>
MonthCal_GetCurrentView(hmc)<commctrl.h>
MonthCal_GetCurSel(hmc,pst)<commctrl.h>
MonthCal_GetFirstDayOfWeek(hmc)<commctrl.h>
MonthCal_GetMaxSelCount(hmc)<commctrl.h>
MonthCal_GetMaxTodayWidth(hmc)<commctrl.h>
MonthCal_GetMinReqRect(hmc,prc)<commctrl.h>
MonthCal_GetMonthDelta(hmc)<commctrl.h>
MonthCal_GetMonthRange(hmc,gmr,rgst)<commctrl.h>
MonthCal_GetRange(hmc,rgst)<commctrl.h>
MonthCal_GetSelRange(hmc,rgst)<commctrl.h>
MonthCal_GetToday(hmc,pst)<commctrl.h>
MonthCal_GetUnicodeFormat(hwnd)<commctrl.h>
MonthCal_HitTest(hmc,pinfo)<commctrl.h>
MonthCal_SetCalendarBorder(hmc, fset, xyborder)<commctrl.h>
MonthCal_SetColor(hmc,iColor,clr)<commctrl.h>
MonthCal_SetCurrentView(hmc, dwNewView)<commctrl.h>
MonthCal_SetCurSel(hmc,pst)<commctrl.h>
MonthCal_SetDayState(hmc,cbds,rgds)<commctrl.h>
MonthCal_SetFirstDayOfWeek(hmc,iDay)<commctrl.h>
MonthCal_SetMaxSelCount(hmc,n)<commctrl.h>
MonthCal_SetMonthDelta(hmc,n)<commctrl.h>
MonthCal_SetRange(hmc,gd,rgst)<commctrl.h>
MonthCal_SetSelRange(hmc,rgst)<commctrl.h>
MonthCal_SetToday(hmc,pst)<commctrl.h>
MonthCal_SetUnicodeFormat(hwnd,fUnicode)<commctrl.h>
MonthCal_SizeRectToMin(hmc, prc)<commctrl.h>
Mount(__LONG32 Timeout)virtual HRESULT WINAPI <emostore.h>
MOUNTMGR_IS_DOS_VOLUME_NAME(s)<mountmgr.h>
MOUNTMGR_IS_DOS_VOLUME_NAME_WB(s)<mountmgr.h>
MOUNTMGR_IS_DRIVE_LETTER(s)<mountmgr.h>
MOUNTMGR_IS_NT_VOLUME_NAME(s)<mountmgr.h>
MOUNTMGR_IS_NT_VOLUME_NAME_WB(s)<mountmgr.h>
MOUNTMGR_IS_VOLUME_NAME(s)<mountmgr.h>
MountNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId,LPNTMS_GUID lpDriveId,DWORD dwCount,DWORD dwOptions,int dwPriority,DWORD dwTimeout,LPNTMS_MOUNT_INFORMATION lpMountInformation) DWORD WINAPI <ntmsapi.h>
mouse_event(DWORD dwFlags,DWORD dx,DWORD dy,DWORD dwData,ULONG_PTR dwExtraInfo) WINUSERAPI VOID WINAPI <winuser.h>
MouseActivate(POINT point)virtual HRESULT WINAPI <strmif.h>
MouseSelect(POINT point)virtual HRESULT WINAPI <strmif.h>
Move(__LONG32 dwCharID,__LONG32 x,__LONG32 y,__LONG32 dwCause)virtual HRESULT WINAPI <tom.h>
Move(__LONG32 nX,__LONG32 nY,__LONG32 nWidth,__LONG32 nHeight)virtual HRESULT WINAPI <tom.h>
Move(__LONG32 Unit,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
Move(DBCOUNTITEM cRows,LPCOLESTR rgpwszSourceURLs[],LPCOLESTR rgpwszDestURLs[],DWORD dwMoveFlags,IAuthenticate * pAuthenticate,DBSTATUS rgdwStatus[],LPOLESTR rgpwszNewURLs[],OLECHAR ** ppStringsBuffer)virtual HRESULT WINAPI <tom.h>
Move(IMarkupPointer * pPointerSourceStart,IMarkupPointer * pPointerSourceFinish,IMarkupPointer * pPointerTarget)virtual HRESULT WINAPI <tom.h>
Move(VARIANT varTimeout,VARIANT varNode,VARIANT * pvarPending)virtual HRESULT WINAPI <tom.h>
MoveAdjacentToElement(IHTMLElement * pElement,ELEMENT_ADJACENCY eAdj)virtual HRESULT WINAPI <mshtmlc.h>
MoveCaretToPointer(IDisplayPointer * pDispPointer,WINBOOL fScrollIntoView,CARET_DIRECTION eDir)virtual HRESULT WINAPI <mshtmlc.h>
MoveCaretToPointerEx(IDisplayPointer * pDispPointer,WINBOOL fVisible,WINBOOL fScrollIntoView,CARET_DIRECTION eDir)virtual HRESULT WINAPI <mshtmlc.h>
MoveClusterGroup(HGROUP hGroup,HNODE hDestinationNode) DWORD WINAPI <clusapi.h>
MoveDataFiles(BSTR DBPath,BSTR SLVPath,__LONG32 Flags)virtual HRESULT WINAPI <emostore.h>
MoveDisplayPointerToCaret(IDisplayPointer * pDispPointer)virtual HRESULT WINAPI <mshtmlc.h>
MoveDown(__LONG32 Unit,__LONG32 Count,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveEnd(__LONG32 Unit,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveEndUntil(VARIANT * Cset,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveEndWhile(VARIANT * Cset,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveFile(LPCSTR lpExistingFileName,LPCSTR lpNewFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileEx(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileExA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileExW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileTransacted(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileTransactedA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileTransactedW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileWithProgress(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileWithProgressA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveFileWithProgressW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
MoveHere(BSTR SourceName,BSTR NewName,IDispatch ** ppObject)virtual HRESULT WINAPI <iads.h>
MoveLeft(__LONG32 Unit,__LONG32 Count,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveLogFiles(BSTR LogFilePath,__LONG32 Flags)virtual HRESULT WINAPI <emostore.h>
MoveMailbox(BSTR HomeMDBURL)virtual HRESULT WINAPI <cdoexm.h>
MoveMarkupPointerToCaret(IMarkupPointer * pIMarkupPointer)virtual HRESULT WINAPI <mshtmlc.h>
MoveMemory(Destination, Source, Length)<minwinbase.h>
MoveMessages(__LONG32 * plMessagesMoved)virtual HRESULT WINAPI <comsvcs.h>
MovePointersToRange(IHTMLTxtRange * pIRange,IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish)virtual HRESULT WINAPI <mshtmlc.h>
MoveRangeToPointers(IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish,IHTMLTxtRange * pIRange)virtual HRESULT WINAPI <mshtmlc.h>
MoveRight(__LONG32 Unit,__LONG32 Count,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveSegmentToPointers(IHighlightSegment * pISegment,IDisplayPointer * pDispPointerStart,IDisplayPointer * pDispPointerEnd)virtual HRESULT WINAPI <mshtmlc.h>
MoveStart(__LONG32 Unit,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveStartUntil(VARIANT * Cset,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveStartWhile(VARIANT * Cset,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveSystemFiles(BSTR SystemFilePath,__LONG32 Flags)virtual HRESULT WINAPI <emostore.h>
MoveTo(short x,short y,__LONG32 lSpeed,__LONG32 * pdwReqID)virtual HRESULT WINAPI <agtsvr.h>
MoveTo(short x,short y,VARIANT Speed,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <agtsvr.h>
MoveToContainer(BSTR ContainerURL)virtual HRESULT WINAPI <mshtmlc.h>
MoveToContainer(IMarkupContainer * pContainer,WINBOOL fAtStart)virtual HRESULT WINAPI <mshtmlc.h>
MoveToContent(IHTMLElement * pIElement,WINBOOL fAtStart)virtual HRESULT WINAPI <mshtmlc.h>
MoveToEx(HDC hdc,int x,int y,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
MoveToMarkupPointer(IMarkupPointer * pPointer,IDisplayPointer * pDispLineContext)virtual HRESULT WINAPI <mshtmlc.h>
MoveToMarkupPosition(IMarkupContainer * pContainer,__LONG32 lMP)virtual HRESULT WINAPI <mshtmlc.h>
MoveToNtmsMediaPool(HANDLE hSession,LPNTMS_GUID lpMediaId,LPNTMS_GUID lpPoolId) DWORD WINAPI <ntmsapi.h>
MoveToPoint(POINT ptPoint,COORD_SYSTEM eCoordSystem,IHTMLElement * pElementContext,DWORD dwHitTestOptions,DWORD * pdwHitTestResults)virtual HRESULT WINAPI <mshtmlc.h>
MoveToPointer(IDisplayPointer * pDispPointer)virtual HRESULT WINAPI <mshtmlc.h>
MoveToPointer(IMarkupPointer * pPointer)virtual HRESULT WINAPI <mshtmlc.h>
MoveToSelectionAnchor(IMarkupPointer * pIStartAnchor)virtual HRESULT WINAPI <mshtmlc.h>
MoveToSelectionAnchorEx(IDisplayPointer * pIStartAnchor)virtual HRESULT WINAPI <mshtmlc.h>
MoveToSelectionEnd(IMarkupPointer * pIEndAnchor)virtual HRESULT WINAPI <mshtmlc.h>
MoveToSelectionEndEx(IDisplayPointer * pIEndAnchor)virtual HRESULT WINAPI <mshtmlc.h>
MoveUnit(DISPLAY_MOVEUNIT eMoveUnit,LONG lXPos)virtual HRESULT WINAPI <mshtmlc.h>
MoveUnit(MOVEUNIT_ACTION muAction)virtual HRESULT WINAPI <mshtmlc.h>
MoveUnitBounded(MOVEUNIT_ACTION muAction,IMarkupPointer * pIBoundary)virtual HRESULT WINAPI <mshtmlc.h>
MoveUntil(VARIANT * Cset,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveUp(__LONG32 Unit,__LONG32 Count,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveWhile(VARIANT * Cset,__LONG32 Count,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
MoveWindow(HWND hWnd,int X,int Y,int nWidth,int nHeight,WINBOOL bRepaint) WINUSERAPI WINBOOL WINAPI <winuser.h>
MpAlcB(lprc,i)<penwin.h>
MPEG1_SEQUENCE_INFO(pv)<amvideo.h>
MpIbf(i)<penwin.h>
MPPF_BOTTOM(int)<shobjidl.h>
MPPF_POS_MASK(int)<shobjidl.h>
MprAdminAcceptNewConnection(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1) WINBOOL WINAPI <mprapi.h>
MprAdminAcceptNewConnection2(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1,RAS_CONNECTION_2 * pRasConnection2) WINBOOL WINAPI <mprapi.h>
MprAdminAcceptNewConnection3(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1,RAS_CONNECTION_2 * pRasConnection2,RAS_CONNECTION_3 * pRasConnection3)WINBOOL CALLBACK <mprapi.h>
MprAdminAcceptNewLink(RAS_PORT_0 * pRasPort0,RAS_PORT_1 * pRasPort1) WINBOOL WINAPI <mprapi.h>
MprAdminAcceptReauthentication(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1,RAS_CONNECTION_2 * pRasConnection2,RAS_CONNECTION_3 * pRasConnection3)WINBOOL CALLBACK <mprapi.h>
MprAdminBufferFree(LPVOID pBuffer) DWORD WINAPI <mprapi.h>
MprAdminConnectionClearStats(RAS_SERVER_HANDLE hRasServer,HANDLE hConnection) DWORD WINAPI <mprapi.h>
MprAdminConnectionEnum(RAS_SERVER_HANDLE hRasServer,DWORD dwLevel,LPBYTE * lplpbBuffer,DWORD dwPrefMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,LPDWORD lpdwResumeHandle) DWORD WINAPI <mprapi.h>
MprAdminConnectionEnumEx(RAS_SERVER_HANDLE hRasServer,PMPRAPI_OBJECT_HEADER pObjectHeader,DWORD dwPreferedMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,PRAS_CONNECTION_EX * ppRasConn,LPDWORD lpdwResumeHandle)DWORD APIENTRY <mprapi.h>
MprAdminConnectionGetInfo(RAS_SERVER_HANDLE hRasServer,DWORD dwLevel,HANDLE hConnection,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminConnectionGetInfoEx(RAS_SERVER_HANDLE hRasServer,HANDLE hConnection,PRAS_CONNECTION_EX pRasConnection)DWORD APIENTRY <mprapi.h>
MprAdminConnectionHangupNotification(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1) VOID WINAPI <mprapi.h>
MprAdminConnectionHangupNotification2(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1,RAS_CONNECTION_2 * pRasConnection2) VOID WINAPI <mprapi.h>
MprAdminConnectionHangupNotification3(RAS_CONNECTION_0 * pRasConnection0,RAS_CONNECTION_1 * pRasConnection1,RAS_CONNECTION_2 * pRasConnection2,RAS_CONNECTION_3 * pRasConnection3)void CALLBACK <mprapi.h>
MprAdminConnectionRemoveQuarantine(HANDLE hRasServer,HANDLE hRasConnection,WINBOOL fIsIpAddress) DWORD WINAPI <mprapi.h>
MprAdminDeregisterConnectionNotification(MPR_SERVER_HANDLE hMprServer,HANDLE hEventNotification) DWORD WINAPI <mprapi.h>
MprAdminDeviceEnum(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE * lplpbBuffer,LPDWORD lpdwTotalEntries) DWORD WINAPI <mprapi.h>
MprAdminEstablishDomainRasServer(PWCHAR pszDomain,PWCHAR pszMachine,WINBOOL bEnable) DWORD WINAPI <mprapi.h>
MprAdminGetErrorString(DWORD dwError,LPWSTR * lpwsErrorString) DWORD WINAPI <mprapi.h>
MprAdminGetIpAddressForUser(WCHAR * lpwszUserName,WCHAR * lpwszPortName,DWORD * lpdwIpAddress,WINBOOL * bNotifyRelease) DWORD WINAPI <mprapi.h>
MprAdminGetIpv6AddressForUser(WCHAR * lpwszUserName,WCHAR * lpwszPortName,IN6_ADDR * lpdwIpv6Address,WINBOOL * bNotifyRelease)DWORD CALLBACK <mprapi.h>
MprAdminGetPDCServer(const WCHAR * lpszDomain,const WCHAR * lpszServer,LPWSTR lpszPDCServer) DWORD WINAPI <mprapi.h>
MprAdminInitializeDll(VOID) DWORD WINAPI <mprapi.h>
MprAdminInitializeDllEx(PMPRAPI_ADMIN_DLL_CALLBACKS pAdminCallbacks)DWORD APIENTRY <mprapi.h>
MprAdminInterfaceConnect(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,HANDLE hEvent,WINBOOL fSynchronous) DWORD WINAPI <mprapi.h>
MprAdminInterfaceCreate(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE lpbBuffer,HANDLE * phInterface) DWORD WINAPI <mprapi.h>
MprAdminInterfaceDelete(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface) DWORD WINAPI <mprapi.h>
MprAdminInterfaceDeviceGetInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwIndex,DWORD dwLevel,LPBYTE * lplpBuffer) DWORD WINAPI <mprapi.h>
MprAdminInterfaceDeviceSetInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwIndex,DWORD dwLevel,LPBYTE lplpBuffer) DWORD WINAPI <mprapi.h>
MprAdminInterfaceDisconnect(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface) DWORD WINAPI <mprapi.h>
MprAdminInterfaceEnum(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE * lplpbBuffer,DWORD dwPrefMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,LPDWORD lpdwResumeHandle) DWORD WINAPI <mprapi.h>
MprAdminInterfaceGetCredentials(LPWSTR lpwsServer,LPWSTR lpwsInterfaceName,LPWSTR lpwsUserName,LPWSTR lpwsPassword,LPWSTR lpwsDomainName) DWORD WINAPI <mprapi.h>
MprAdminInterfaceGetCredentialsEx(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwLevel,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminInterfaceGetHandle(MPR_SERVER_HANDLE hMprServer,LPWSTR lpwsInterfaceName,HANDLE * phInterface,WINBOOL fIncludeClientInterfaces) DWORD WINAPI <mprapi.h>
MprAdminInterfaceGetInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwLevel,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminInterfaceQueryUpdateResult(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwProtocolId,LPDWORD lpdwUpdateResult) DWORD WINAPI <mprapi.h>
MprAdminInterfaceSetCredentials(LPWSTR lpwsServer,LPWSTR lpwsInterfaceName,LPWSTR lpwsUserName,LPWSTR lpwsDomainName,LPWSTR lpwsPassword) DWORD WINAPI <mprapi.h>
MprAdminInterfaceSetCredentialsEx(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminInterfaceSetInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminInterfaceTransportAdd(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwTransportId,LPBYTE pInterfaceInfo,DWORD dwInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprAdminInterfaceTransportGetInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwTransportId,LPBYTE * ppInterfaceInfo,LPDWORD lpdwpInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprAdminInterfaceTransportRemove(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwTransportId) DWORD WINAPI <mprapi.h>
MprAdminInterfaceTransportSetInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwTransportId,LPBYTE pInterfaceInfo,DWORD dwInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprAdminInterfaceUpdatePhonebookInfo(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface) DWORD WINAPI <mprapi.h>
MprAdminInterfaceUpdateRoutes(MPR_SERVER_HANDLE hMprServer,HANDLE hInterface,DWORD dwProtocolId,HANDLE hEvent) DWORD WINAPI <mprapi.h>
MprAdminIsDomainRasServer(PWCHAR pszDomain,PWCHAR pszMachine,PBOOL pbIsRasServer) DWORD WINAPI <mprapi.h>
MprAdminIsServiceInitialized(LPWSTR lpwsServerName,WINBOOL * fIsServiceInitialized)DWORD APIENTRY <mprapi.h>
MprAdminIsServiceRunning(LPWSTR lpwsServerName) WINBOOL WINAPI <mprapi.h>
MprAdminLinkHangupNotification(RAS_PORT_0 * pRasPort0,RAS_PORT_1 * pRasPort1) VOID WINAPI <mprapi.h>
MprAdminMIBBufferFree(LPVOID pBuffer) DWORD WINAPI <mprapi.h>
MprAdminMIBEntryCreate(MIB_SERVER_HANDLE hMibServer,DWORD dwPid,DWORD dwRoutingPid,LPVOID lpEntry,DWORD dwEntrySize) DWORD WINAPI <mprapi.h>
MprAdminMIBEntryDelete(MIB_SERVER_HANDLE hMibServer,DWORD dwProtocolId,DWORD dwRoutingPid,LPVOID lpEntry,DWORD dwEntrySize) DWORD WINAPI <mprapi.h>
MprAdminMIBEntryGet(MIB_SERVER_HANDLE hMibServer,DWORD dwProtocolId,DWORD dwRoutingPid,LPVOID lpInEntry,DWORD dwInEntrySize,LPVOID * lplpOutEntry,LPDWORD lpOutEntrySize) DWORD WINAPI <mprapi.h>
MprAdminMIBEntryGetFirst(MIB_SERVER_HANDLE hMibServer,DWORD dwProtocolId,DWORD dwRoutingPid,LPVOID lpInEntry,DWORD dwInEntrySize,LPVOID * lplpOutEntry,LPDWORD lpOutEntrySize) DWORD WINAPI <mprapi.h>
MprAdminMIBEntryGetNext(MIB_SERVER_HANDLE hMibServer,DWORD dwProtocolId,DWORD dwRoutingPid,LPVOID lpInEntry,DWORD dwInEntrySize,LPVOID * lplpOutEntry,LPDWORD lpOutEntrySize) DWORD WINAPI <mprapi.h>
MprAdminMIBEntrySet(MIB_SERVER_HANDLE hMibServer,DWORD dwProtocolId,DWORD dwRoutingPid,LPVOID lpEntry,DWORD dwEntrySize) DWORD WINAPI <mprapi.h>
MprAdminMIBGetTrapInfo(MIB_SERVER_HANDLE hMibServer,DWORD dwProtocolId,DWORD dwRoutingPid,LPVOID lpInData,DWORD dwInDataSize,LPVOID * lplpOutData,LPDWORD lpOutDataSize) DWORD WINAPI <mprapi.h>
MprAdminMIBServerConnect(LPWSTR lpwsServerName,MIB_SERVER_HANDLE * phMibServer) DWORD WINAPI <mprapi.h>
MprAdminMIBServerDisconnect(MIB_SERVER_HANDLE hMibServer) VOID WINAPI <mprapi.h>
MprAdminMIBSetTrapInfo(DWORD dwProtocolId,DWORD dwRoutingPid,HANDLE hEvent,LPVOID lpInData,DWORD dwInDataSize,LPVOID * lplpOutData,LPDWORD lpOutDataSize) DWORD WINAPI <mprapi.h>
MprAdminPortClearStats(RAS_SERVER_HANDLE hRasServer,HANDLE hPort) DWORD WINAPI <mprapi.h>
MprAdminPortDisconnect(RAS_SERVER_HANDLE hRasServer,HANDLE hPort) DWORD WINAPI <mprapi.h>
MprAdminPortEnum(RAS_SERVER_HANDLE hRasServer,DWORD dwLevel,HANDLE hConnection,LPBYTE * lplpbBuffer,DWORD dwPrefMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,LPDWORD lpdwResumeHandle) DWORD WINAPI <mprapi.h>
MprAdminPortGetInfo(RAS_SERVER_HANDLE hRasServer,DWORD dwLevel,HANDLE hPort,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminPortReset(RAS_SERVER_HANDLE hRasServer,HANDLE hPort) DWORD WINAPI <mprapi.h>
MprAdminRegisterConnectionNotification(MPR_SERVER_HANDLE hMprServer,HANDLE hEventNotification) DWORD WINAPI <mprapi.h>
MprAdminReleaseIpAddress(WCHAR * lpszUserName,WCHAR * lpszPortName,DWORD * lpdwIpAddress) VOID WINAPI <mprapi.h>
MprAdminReleaseIpv6AddressForUser(WCHAR * lpwszUserName,WCHAR * lpwszPortName,IN6_ADDR * lpdwIpv6Address)DWORD CALLBACK <mprapi.h>
MprAdminSendUserMessage(MPR_SERVER_HANDLE hMprServer,HANDLE hConnection,LPWSTR lpwszMessage) DWORD WINAPI <mprapi.h>
MprAdminServerConnect(LPWSTR lpwsServerName,MPR_SERVER_HANDLE * phMprServer) DWORD WINAPI <mprapi.h>
MprAdminServerDisconnect(MPR_SERVER_HANDLE hMprServer) VOID WINAPI <mprapi.h>
MprAdminServerGetCredentials(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminServerGetInfo(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminServerGetInfoEx(MPR_SERVER_HANDLE hMprServer,MPR_SERVER_EX * pServerInfo)DWORD APIENTRY <mprapi.h>
MprAdminServerSetCredentials(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminServerSetInfo(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminServerSetInfoEx(MPR_SERVER_HANDLE hMprServer,MPR_SERVER_SET_CONFIG_EX * pServerInfo)DWORD APIENTRY <mprapi.h>
MprAdminTerminateDll(VOID) DWORD WINAPI <mprapi.h>
MprAdminTransportCreate(MPR_SERVER_HANDLE hMprServer,DWORD dwTransportId,LPWSTR lpwsTransportName,LPBYTE pGlobalInfo,DWORD dwGlobalInfoSize,LPBYTE pClientInterfaceInfo,DWORD dwClientInterfaceInfoSize,LPWSTR lpwsDLLPath) DWORD WINAPI <mprapi.h>
MprAdminTransportGetInfo(MPR_SERVER_HANDLE hMprServer,DWORD dwTransportId,LPBYTE * ppGlobalInfo,LPDWORD lpdwGlobalInfoSize,LPBYTE * ppClientInterfaceInfo,LPDWORD lpdwClientInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprAdminTransportSetInfo(MPR_SERVER_HANDLE hMprServer,DWORD dwTransportId,LPBYTE pGlobalInfo,DWORD dwGlobalInfoSize,LPBYTE pClientInterfaceInfo,DWORD dwClientInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprAdminUserGetInfo(const WCHAR * lpszServer,const WCHAR * lpszUser,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprAdminUserSetInfo(const WCHAR * lpszServer,const WCHAR * lpszUser,DWORD dwLevel,const LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprConfigBufferFree(LPVOID pBuffer) DWORD WINAPI <mprapi.h>
MprConfigFilterGetInfo(HANDLE hMprConfig,DWORD dwLevel,DWORD dwTransportId,LPBYTE lpBuffer)DWORD WINAPI <mprapi.h>
MprConfigFilterSetInfo(HANDLE hMprConfig,DWORD dwLevel,DWORD dwTransportId,LPBYTE lpBuffer)DWORD WINAPI <mprapi.h>
MprConfigGetFriendlyName(HANDLE hMprConfig,PWCHAR pszGuidName,PWCHAR pszBuffer,DWORD dwBufferSize) DWORD WINAPI <mprapi.h>
MprConfigGetGuidName(HANDLE hMprConfig,PWCHAR pszFriendlyName,PWCHAR pszBuffer,DWORD dwBufferSize) DWORD WINAPI <mprapi.h>
MprConfigInterfaceCreate(HANDLE hMprConfig,DWORD dwLevel,LPBYTE lpbBuffer,HANDLE * phRouterInterface) DWORD WINAPI <mprapi.h>
MprConfigInterfaceDelete(HANDLE hMprConfig,HANDLE hRouterInterface) DWORD WINAPI <mprapi.h>
MprConfigInterfaceEnum(HANDLE hMprConfig,DWORD dwLevel,LPBYTE * lplpBuffer,DWORD dwPrefMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,LPDWORD lpdwResumeHandle) DWORD WINAPI <mprapi.h>
MprConfigInterfaceGetHandle(HANDLE hMprConfig,LPWSTR lpwsInterfaceName,HANDLE * phRouterInterface) DWORD WINAPI <mprapi.h>
MprConfigInterfaceGetInfo(HANDLE hMprConfig,HANDLE hRouterInterface,DWORD dwLevel,LPBYTE * lplpBuffer,LPDWORD lpdwBufferSize) DWORD WINAPI <mprapi.h>
MprConfigInterfaceSetInfo(HANDLE hMprConfig,HANDLE hRouterInterface,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprConfigInterfaceTransportAdd(HANDLE hMprConfig,HANDLE hRouterInterface,DWORD dwTransportId,LPWSTR lpwsTransportName,LPBYTE pInterfaceInfo,DWORD dwInterfaceInfoSize,HANDLE * phRouterIfTransport) DWORD WINAPI <mprapi.h>
MprConfigInterfaceTransportEnum(HANDLE hMprConfig,HANDLE hRouterInterface,DWORD dwLevel,LPBYTE * lplpBuffer,DWORD dwPrefMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,LPDWORD lpdwResumeHandle) DWORD WINAPI <mprapi.h>
MprConfigInterfaceTransportGetHandle(HANDLE hMprConfig,HANDLE hRouterInterface,DWORD dwTransportId,HANDLE * phRouterIfTransport) DWORD WINAPI <mprapi.h>
MprConfigInterfaceTransportGetInfo(HANDLE hMprConfig,HANDLE hRouterInterface,HANDLE hRouterIfTransport,LPBYTE * ppInterfaceInfo,LPDWORD lpdwInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprConfigInterfaceTransportRemove(HANDLE hMprConfig,HANDLE hRouterInterface,HANDLE hRouterIfTransport) DWORD WINAPI <mprapi.h>
MprConfigInterfaceTransportSetInfo(HANDLE hMprConfig,HANDLE hRouterInterface,HANDLE hRouterIfTransport,LPBYTE pInterfaceInfo,DWORD dwInterfaceInfoSize) DWORD WINAPI <mprapi.h>
MprConfigServerBackup(HANDLE hMprConfig,LPWSTR lpwsPath) DWORD WINAPI <mprapi.h>
MprConfigServerConnect(LPWSTR lpwsServerName,HANDLE * phMprConfig) DWORD WINAPI <mprapi.h>
MprConfigServerDisconnect(HANDLE hMprConfig) VOID WINAPI <mprapi.h>
MprConfigServerGetInfo(HANDLE hMprConfig,DWORD dwLevel,LPBYTE * lplpbBuffer) DWORD WINAPI <mprapi.h>
MprConfigServerGetInfoEx(HANDLE hMprConfig,MPR_SERVER_EX * pServerInfo)DWORD APIENTRY <mprapi.h>
MprConfigServerInstall(DWORD dwLevel,PVOID pBuffer) DWORD WINAPI <mprapi.h>
MprConfigServerRefresh(HANDLE hMprConfig) DWORD WINAPI <mprapi.h>
MprConfigServerRestore(HANDLE hMprConfig,LPWSTR lpwsPath) DWORD WINAPI <mprapi.h>
MprConfigServerSetInfo(MPR_SERVER_HANDLE hMprServer,DWORD dwLevel,LPBYTE lpbBuffer) DWORD WINAPI <mprapi.h>
MprConfigServerSetInfoEx(HANDLE hMprConfig,MPR_SERVER_SET_CONFIG_EX * pSetServerConfig)DWORD APIENTRY <mprapi.h>
MprConfigTransportCreate(HANDLE hMprConfig,DWORD dwTransportId,LPWSTR lpwsTransportName,LPBYTE pGlobalInfo,DWORD dwGlobalInfoSize,LPBYTE pClientInterfaceInfo,DWORD dwClientInterfaceInfoSize,LPWSTR lpwsDLLPath,HANDLE * phRouterTransport) DWORD WINAPI <mprapi.h>
MprConfigTransportDelete(HANDLE hMprConfig,HANDLE hRouterTransport) DWORD WINAPI <mprapi.h>
MprConfigTransportEnum(HANDLE hMprConfig,DWORD dwLevel,LPBYTE * lplpBuffer,DWORD dwPrefMaxLen,LPDWORD lpdwEntriesRead,LPDWORD lpdwTotalEntries,LPDWORD lpdwResumeHandle) DWORD WINAPI <mprapi.h>
MprConfigTransportGetHandle(HANDLE hMprConfig,DWORD dwTransportId,HANDLE * phRouterTransport) DWORD WINAPI <mprapi.h>
MprConfigTransportGetInfo(HANDLE hMprConfig,HANDLE hRouterTransport,LPBYTE * ppGlobalInfo,LPDWORD lpdwGlobalInfoSize,LPBYTE * ppClientInterfaceInfo,LPDWORD lpdwClientInterfaceInfoSize,LPWSTR * lplpwsDLLPath) DWORD WINAPI <mprapi.h>
MprConfigTransportSetInfo(HANDLE hMprConfig,HANDLE hRouterTransport,LPBYTE pGlobalInfo,DWORD dwGlobalInfoSize,LPBYTE pClientInterfaceInfo,DWORD dwClientInterfaceInfoSize,LPWSTR lpwsDLLPath) DWORD WINAPI <mprapi.h>
MprInfoBlockAdd(LPVOID lpHeader,DWORD dwInfoType,DWORD dwItemSize,DWORD dwItemCount,LPBYTE lpItemData,LPVOID * lplpNewHeader) DWORD WINAPI <mprapi.h>
MprInfoBlockExists(h,t)<mprapi.h>
MprInfoBlockFind(LPVOID lpHeader,DWORD dwInfoType,LPDWORD lpdwItemSize,LPDWORD lpdwItemCount,LPBYTE * lplpItemData) DWORD WINAPI <mprapi.h>
MprInfoBlockQuerySize(LPVOID lpHeader) DWORD WINAPI <mprapi.h>
MprInfoBlockRemove(LPVOID lpHeader,DWORD dwInfoType,LPVOID * lplpNewHeader) DWORD WINAPI <mprapi.h>
MprInfoBlockSet(LPVOID lpHeader,DWORD dwInfoType,DWORD dwItemSize,DWORD dwItemCount,LPBYTE lpItemData,LPVOID * lplpNewHeader) DWORD WINAPI <mprapi.h>
MprInfoCreate(DWORD dwVersion,LPVOID * lplpNewHeader) DWORD WINAPI <mprapi.h>
MprInfoDelete(LPVOID lpHeader) DWORD WINAPI <mprapi.h>
MprInfoDuplicate(LPVOID lpHeader,LPVOID * lplpNewHeader) DWORD WINAPI <mprapi.h>
MprInfoRemoveAll(LPVOID lpHeader,LPVOID * lplpNewHeader) DWORD WINAPI <mprapi.h>
MprSetupIpInIpInterfaceFriendlyNameCreate(PWCHAR pwszMachineName,PMPR_IPINIP_INTERFACE_0 pNameInformation) DWORD WINAPI <mprapi.h>
MprSetupIpInIpInterfaceFriendlyNameDelete(PWCHAR pwszMachineName,GUID * pGuid) DWORD WINAPI <mprapi.h>
MprSetupIpInIpInterfaceFriendlyNameEnum(PWCHAR pwszMachineName,LPBYTE * lplpBuffer,LPDWORD lpdwEntriesRead) DWORD WINAPI <mprapi.h>
MprSetupIpInIpInterfaceFriendlyNameFree(LPVOID lpBuffer) DWORD WINAPI <mprapi.h>
MprSetupProtocolEnum(DWORD dwTransportId,LPBYTE * lplpBuffer,LPDWORD lpdwEntriesRead) DWORD WINAPI <rtutils.h>
MprSetupProtocolFree(LPVOID lpBuffer) DWORD WINAPI <rtutils.h>
MQADsPathToFormatName(LPCWSTR lpwcsADsPath,LPWSTR lpwcsFormatName,LPDWORD lpdwFormatNameLength) HRESULT WINAPI <mq.h>
MQBeginTransaction(ITransaction ** ppTransaction) HRESULT WINAPI <mq.h>
MQCLASS_CODE(s,r,code)<mq.h>
MQCLASS_NACK(c)<mq.h>
MQCLASS_NACK_HTTP(c)<mq.h>
MQCLASS_RECEIVE(c)<mq.h>
MQCloseCursor(HANDLE hCursor) HRESULT WINAPI <mq.h>
MQCloseQueue(QUEUEHANDLE hQueue) HRESULT WINAPI <mq.h>
MQCreateCursor(QUEUEHANDLE hQueue,PHANDLE phCursor) HRESULT WINAPI <mq.h>
MQCreateQueue(PSECURITY_DESCRIPTOR pSecurityDescriptor,MQQUEUEPROPS * pQueueProps,LPWSTR lpwcsFormatName,LPDWORD lpdwFormatNameLength) HRESULT WINAPI <mq.h>
MQDeleteQueue(LPCWSTR lpwcsFormatName) HRESULT WINAPI <mq.h>
MQFreeMemory(PVOID pvMemory) VOID WINAPI <mq.h>
MQFreeSecurityContext(HANDLE hSecurityContext) VOID WINAPI <mq.h>
MQGetMachineProperties(LPCWSTR lpwcsMachineName,const GUID * pguidMachineId,MQQMPROPS * pQMProps) HRESULT WINAPI <mq.h>
MQGetOverlappedResult(LPOVERLAPPED lpOverlapped) HRESULT WINAPI <mq.h>
MQGetPrivateComputerInformation(LPCWSTR lpwcsComputerName,MQPRIVATEPROPS * pPrivateProps) HRESULT WINAPI <mq.h>
MQGetQueueProperties(LPCWSTR lpwcsFormatName,MQQUEUEPROPS * pQueueProps) HRESULT WINAPI <mq.h>
MQGetQueueSecurity(LPCWSTR lpwcsFormatName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded) HRESULT WINAPI <mq.h>
MQGetSecurityContext(PVOID lpCertBuffer,DWORD dwCertBufferLength,HANDLE * phSecurityContext) HRESULT WINAPI <mq.h>
MQGetSecurityContextEx(PVOID lpCertBuffer,DWORD dwCertBufferLength,HANDLE * phSecurityContext) HRESULT WINAPI <mq.h>
MQHandleToFormatName(QUEUEHANDLE hQueue,LPWSTR lpwcsFormatName,LPDWORD lpdwFormatNameLength) HRESULT WINAPI <mq.h>
MQInstanceToFormatName(GUID * pGuid,LPWSTR lpwcsFormatName,LPDWORD lpdwFormatNameLength) HRESULT WINAPI <mq.h>
MQLocateBegin(LPCWSTR lpwcsContext,MQRESTRICTION * pRestriction,MQCOLUMNSET * pColumns,MQSORTSET * pSort,PHANDLE phEnum) HRESULT WINAPI <mq.h>
MQLocateEnd(HANDLE hEnum) HRESULT WINAPI <mq.h>
MQLocateNext(HANDLE hEnum,DWORD * pcProps,MQPROPVARIANT aPropVar[]) HRESULT WINAPI <mq.h>
MQMailComposeBody(LPMQMailEMail pEMail,ULONG * pcbBuffer,LPBYTE * ppbBuffer) STDAPI <mqmail.h>
MQMailFreeMemory(LPVOID lpBuffer) STDAPI_<mqmail.h>
MQMailParseBody(ULONG cbBuffer,LPBYTE pbBuffer,LPMQMailEMail * ppEMail) STDAPI <mqmail.h>
MQMgmtAction(LPCWSTR pComputerName,LPCWSTR pObjectName,LPCWSTR pAction) HRESULT WINAPI <mq.h>
MQMgmtGetInfo(LPCWSTR pComputerName,LPCWSTR pObjectName,MQMGMTPROPS * pMgmtProps) HRESULT WINAPI <mq.h>
MQOpenQueue(LPCWSTR lpwcsFormatName,DWORD dwAccess,DWORD dwShareMode,QUEUEHANDLE * phQueue) HRESULT WINAPI <mq.h>
MQPathNameToFormatName(LPCWSTR lpwcsPathName,LPWSTR lpwcsFormatName,LPDWORD lpdwFormatNameLength) HRESULT WINAPI <mq.h>
MQPurgeQueue(QUEUEHANDLE hQueue) HRESULT WINAPI <mq.h>
MQReceiveMessage(QUEUEHANDLE hSource,DWORD dwTimeout,DWORD dwAction,MQMSGPROPS * pMessageProps,LPOVERLAPPED lpOverlapped,PMQRECEIVECALLBACK fnReceiveCallback,HANDLE hCursor,ITransaction * pTransaction) HRESULT WINAPI <mq.h>
MQReceiveMessageByLookupId(QUEUEHANDLE hSource,ULONGLONG ullLookupId,DWORD dwLookupAction,MQMSGPROPS * pMessageProps,LPOVERLAPPED lpOverlapped,PMQRECEIVECALLBACK fnReceiveCallback,ITransaction * pTransaction) HRESULT WINAPI <mq.h>
MQRegisterCertificate(DWORD dwFlags,PVOID lpCertBuffer,DWORD dwCertBufferLength) HRESULT WINAPI <mq.h>
MQSendMessage(QUEUEHANDLE hDestinationQueue,MQMSGPROPS * pMessageProps,ITransaction * pTransaction) HRESULT WINAPI <mq.h>
MQSetQueueProperties(LPCWSTR lpwcsFormatName,MQQUEUEPROPS * pQueueProps) HRESULT WINAPI <mq.h>
MQSetQueueSecurity(LPCWSTR lpwcsFormatName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) HRESULT WINAPI <mq.h>
MS_ERROR_CODE(x)<mmstream.h>
MS_SUCCESS_CODE(x)<mmstream.h>
MSChapSrvChangePassword(LPWSTR ServerName,LPWSTR UserName,BOOLEAN LmOldPresent,PLM_OWF_PASSWORD LmOldOwfPassword,PLM_OWF_PASSWORD LmNewOwfPassword,PNT_OWF_PASSWORD NtOldOwfPassword,PNT_OWF_PASSWORD NtNewOwfPassword)extern WINADVAPI DWORD WINAPI <mschapp.h>
MSChapSrvChangePassword2(LPWSTR ServerName,LPWSTR UserName,PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldNt,PENCRYPTED_NT_OWF_PASSWORD OldNtOwfPasswordEncryptedWithNewNt,BOOLEAN LmPresent,PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldLm,PENCRYPTED_LM_OWF_PASSWORD OldLmOwfPasswordEncryptedWithNewLmOrNt)extern WINADVAPI DWORD WINAPI <mschapp.h>
MSGBOXCALLBACK(LPHELPINFO lpHelpInfo) typedef VOID<winuser.h>
MSGCALLRELEASE(ULONG ulCallerData,LPMESSAGE lpMessage) typedef void<imessage.h>
MSGSERVICEENTRY(HINSTANCE hInstance,LPMALLOC lpMalloc,LPMAPISUP lpMAPISup,ULONG ulUIParam,ULONG ulFlags,ULONG ulContext,ULONG cValues,LPSPropValue lpProps,LPPROVIDERADMIN lpProviderAdmin,LPMAPIERROR * lppMapiError) typedef HRESULT<mapispi.h>
MsgWaitForMultipleObjects(DWORD nCount,CONST HANDLE * pHandles,WINBOOL fWaitAll,DWORD dwMilliseconds,DWORD dwWakeMask) WINUSERAPI DWORD WINAPI <winuser.h>
MsgWaitForMultipleObjectsEx(DWORD nCount,CONST HANDLE * pHandles,DWORD dwMilliseconds,DWORD dwWakeMask,DWORD dwFlags) WINUSERAPI DWORD WINAPI <winuser.h>
MsiAdvertiseProduct(LPCSTR szPackagePath,LPCSTR szScriptfilePath,LPCSTR szTransforms,LANGID lgidLanguage) UINT WINAPI <msi.h>
MsiAdvertiseProductA(LPCSTR szPackagePath,LPCSTR szScriptfilePath,LPCSTR szTransforms,LANGID lgidLanguage) UINT WINAPI <msi.h>
MsiAdvertiseProductEx(LPCSTR szPackagePath,LPCSTR szScriptfilePath,LPCSTR szTransforms,LANGID lgidLanguage,DWORD dwPlatform,DWORD dwOptions) UINT WINAPI <msi.h>
MsiAdvertiseProductExA(LPCSTR szPackagePath,LPCSTR szScriptfilePath,LPCSTR szTransforms,LANGID lgidLanguage,DWORD dwPlatform,DWORD dwOptions) UINT WINAPI <msi.h>
MsiAdvertiseProductExW(LPCWSTR szPackagePath,LPCWSTR szScriptfilePath,LPCWSTR szTransforms,LANGID lgidLanguage,DWORD dwPlatform,DWORD dwOptions) UINT WINAPI <msi.h>
MsiAdvertiseProductW(LPCWSTR szPackagePath,LPCWSTR szScriptfilePath,LPCWSTR szTransforms,LANGID lgidLanguage) UINT WINAPI <msi.h>
MsiAdvertiseScript(LPCSTR szScriptFile,DWORD dwFlags,PHKEY phRegData,WINBOOL fRemoveItems) UINT WINAPI <msi.h>
MsiAdvertiseScriptA(LPCSTR szScriptFile,DWORD dwFlags,PHKEY phRegData,WINBOOL fRemoveItems) UINT WINAPI <msi.h>
MsiAdvertiseScriptW(LPCWSTR szScriptFile,DWORD dwFlags,PHKEY phRegData,WINBOOL fRemoveItems) UINT WINAPI <msi.h>
MsiApplyMultiplePatches(LPCSTR szPatchPackages,LPCSTR szProductCode,LPCSTR szPropertiesList) UINT WINAPI <msi.h>
MsiApplyMultiplePatchesA(LPCSTR szPatchPackages,LPCSTR szProductCode,LPCSTR szPropertiesList) UINT WINAPI <msi.h>
MsiApplyMultiplePatchesW(LPCWSTR szPatchPackages,LPCWSTR szProductCode,LPCWSTR szPropertiesList) UINT WINAPI <msi.h>
MsiApplyPatch(LPCSTR szPatchPackage,LPCSTR szInstallPackage,INSTALLTYPE eInstallType,LPCSTR szCommandLine) UINT WINAPI <msi.h>
MsiApplyPatchA(LPCSTR szPatchPackage,LPCSTR szInstallPackage,INSTALLTYPE eInstallType,LPCSTR szCommandLine) UINT WINAPI <msi.h>
MsiApplyPatchW(LPCWSTR szPatchPackage,LPCWSTR szInstallPackage,INSTALLTYPE eInstallType,LPCWSTR szCommandLine) UINT WINAPI <msi.h>
MsiBeginTransaction(LPCSTR szName,DWORD dwTransactionAttributes,MSIHANDLE * phTransactionHandle,HANDLE * phChangeOfOwnerEvent)UINT WINAPI <msi.h>
MsiBeginTransactionA(LPCSTR szName,DWORD dwTransactionAttributes,MSIHANDLE * phTransactionHandle,HANDLE * phChangeOfOwnerEvent)UINT WINAPI <msi.h>
MsiBeginTransactionW(LPCWSTR szName,DWORD dwTransactionAttributes,MSIHANDLE * phTransactionHandle,HANDLE * phChangeOfOwnerEvent)UINT WINAPI <msi.h>
MsiCloseAllHandles() UINT WINAPI <msi.h>
MsiCloseHandle(MSIHANDLE hAny) UINT WINAPI <msi.h>
MsiCollectUserInfo(LPCSTR szProduct) UINT WINAPI <msi.h>
MsiCollectUserInfoA(LPCSTR szProduct) UINT WINAPI <msi.h>
MsiCollectUserInfoW(LPCWSTR szProduct) UINT WINAPI <msi.h>
MsiConfigureFeature(LPCSTR szProduct,LPCSTR szFeature,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiConfigureFeatureA(LPCSTR szProduct,LPCSTR szFeature,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiConfigureFeatureW(LPCWSTR szProduct,LPCWSTR szFeature,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiConfigureProduct(LPCSTR szProduct,int iInstallLevel,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiConfigureProductA(LPCSTR szProduct,int iInstallLevel,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiConfigureProductEx(LPCSTR szProduct,int iInstallLevel,INSTALLSTATE eInstallState,LPCSTR szCommandLine) UINT WINAPI <msi.h>
MsiConfigureProductExA(LPCSTR szProduct,int iInstallLevel,INSTALLSTATE eInstallState,LPCSTR szCommandLine) UINT WINAPI <msi.h>
MsiConfigureProductExW(LPCWSTR szProduct,int iInstallLevel,INSTALLSTATE eInstallState,LPCWSTR szCommandLine) UINT WINAPI <msi.h>
MsiConfigureProductW(LPCWSTR szProduct,int iInstallLevel,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiCreateRecord(UINT cParams) MSIHANDLE WINAPI <msiquery.h>
MsiCreateTransformSummaryInfo(MSIHANDLE hDatabase,MSIHANDLE hDatabaseReference,LPCSTR szTransformFile,int iErrorConditions,int iValidation) UINT WINAPI <msiquery.h>
MsiCreateTransformSummaryInfoA(MSIHANDLE hDatabase,MSIHANDLE hDatabaseReference,LPCSTR szTransformFile,int iErrorConditions,int iValidation) UINT WINAPI <msiquery.h>
MsiCreateTransformSummaryInfoW(MSIHANDLE hDatabase,MSIHANDLE hDatabaseReference,LPCWSTR szTransformFile,int iErrorConditions,int iValidation) UINT WINAPI <msiquery.h>
MsiDatabaseApplyTransform(MSIHANDLE hDatabase,LPCSTR szTransformFile,int iErrorConditions) UINT WINAPI <msiquery.h>
MsiDatabaseApplyTransformA(MSIHANDLE hDatabase,LPCSTR szTransformFile,int iErrorConditions) UINT WINAPI <msiquery.h>
MsiDatabaseApplyTransformW(MSIHANDLE hDatabase,LPCWSTR szTransformFile,int iErrorConditions) UINT WINAPI <msiquery.h>
MsiDatabaseCommit(MSIHANDLE hDatabase) UINT WINAPI <msiquery.h>
MsiDatabaseExport(MSIHANDLE hDatabase,LPCSTR szTableName,LPCSTR szFolderPath,LPCSTR szFileName) UINT WINAPI <msiquery.h>
MsiDatabaseExportA(MSIHANDLE hDatabase,LPCSTR szTableName,LPCSTR szFolderPath,LPCSTR szFileName) UINT WINAPI <msiquery.h>
MsiDatabaseExportW(MSIHANDLE hDatabase,LPCWSTR szTableName,LPCWSTR szFolderPath,LPCWSTR szFileName) UINT WINAPI <msiquery.h>
MsiDatabaseGenerateTransform(MSIHANDLE hDatabase,MSIHANDLE hDatabaseReference,LPCSTR szTransformFile,int iReserved1,int iReserved2) UINT WINAPI <msiquery.h>
MsiDatabaseGenerateTransformA(MSIHANDLE hDatabase,MSIHANDLE hDatabaseReference,LPCSTR szTransformFile,int iReserved1,int iReserved2) UINT WINAPI <msiquery.h>
MsiDatabaseGenerateTransformW(MSIHANDLE hDatabase,MSIHANDLE hDatabaseReference,LPCWSTR szTransformFile,int iReserved1,int iReserved2) UINT WINAPI <msiquery.h>
MsiDatabaseGetPrimaryKeys(MSIHANDLE hDatabase,LPCSTR szTableName,MSIHANDLE * phRecord) UINT WINAPI <msiquery.h>
MsiDatabaseGetPrimaryKeysA(MSIHANDLE hDatabase,LPCSTR szTableName,MSIHANDLE * phRecord) UINT WINAPI <msiquery.h>
MsiDatabaseGetPrimaryKeysW(MSIHANDLE hDatabase,LPCWSTR szTableName,MSIHANDLE * phRecord) UINT WINAPI <msiquery.h>
MsiDatabaseImport(MSIHANDLE hDatabase,LPCSTR szFolderPath,LPCSTR szFileName) UINT WINAPI <msiquery.h>
MsiDatabaseImportA(MSIHANDLE hDatabase,LPCSTR szFolderPath,LPCSTR szFileName) UINT WINAPI <msiquery.h>
MsiDatabaseImportW(MSIHANDLE hDatabase,LPCWSTR szFolderPath,LPCWSTR szFileName) UINT WINAPI <msiquery.h>
MsiDatabaseIsTablePersistent(MSIHANDLE hDatabase,LPCSTR szTableName) MSICONDITION WINAPI <msiquery.h>
MsiDatabaseIsTablePersistentA(MSIHANDLE hDatabase,LPCSTR szTableName) MSICONDITION WINAPI <msiquery.h>
MsiDatabaseIsTablePersistentW(MSIHANDLE hDatabase,LPCWSTR szTableName) MSICONDITION WINAPI <msiquery.h>
MsiDatabaseMerge(MSIHANDLE hDatabase,MSIHANDLE hDatabaseMerge,LPCSTR szTableName) UINT WINAPI <msiquery.h>
MsiDatabaseMergeA(MSIHANDLE hDatabase,MSIHANDLE hDatabaseMerge,LPCSTR szTableName) UINT WINAPI <msiquery.h>
MsiDatabaseMergeW(MSIHANDLE hDatabase,MSIHANDLE hDatabaseMerge,LPCWSTR szTableName) UINT WINAPI <msiquery.h>
MsiDatabaseOpenView(MSIHANDLE hDatabase,LPCSTR szQuery,MSIHANDLE * phView) UINT WINAPI <msiquery.h>
MsiDatabaseOpenViewA(MSIHANDLE hDatabase,LPCSTR szQuery,MSIHANDLE * phView) UINT WINAPI <msiquery.h>
MsiDatabaseOpenViewW(MSIHANDLE hDatabase,LPCWSTR szQuery,MSIHANDLE * phView) UINT WINAPI <msiquery.h>
MsiDetermineApplicablePatches(LPCSTR szProductPackagePath,DWORD cPatchInfo,PMSIPATCHSEQUENCEINFOA pPatchInfo) UINT WINAPI <msi.h>
MsiDetermineApplicablePatchesA(LPCSTR szProductPackagePath,DWORD cPatchInfo,PMSIPATCHSEQUENCEINFOA pPatchInfo) UINT WINAPI <msi.h>
MsiDetermineApplicablePatchesW(LPCWSTR szProductPackagePath,DWORD cPatchInfo,PMSIPATCHSEQUENCEINFOW pPatchInfo) UINT WINAPI <msi.h>
MsiDeterminePatchSequence(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD cPatchInfo,PMSIPATCHSEQUENCEINFOA pPatchInfo) UINT WINAPI <msi.h>
MsiDeterminePatchSequenceA(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD cPatchInfo,PMSIPATCHSEQUENCEINFOA pPatchInfo) UINT WINAPI <msi.h>
MsiDeterminePatchSequenceW(LPCWSTR szProductCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD cPatchInfo,PMSIPATCHSEQUENCEINFOW pPatchInfo) UINT WINAPI <msi.h>
MsiDoAction(MSIHANDLE hInstall,LPCSTR szAction) UINT WINAPI <msiquery.h>
MsiDoActionA(MSIHANDLE hInstall,LPCSTR szAction) UINT WINAPI <msiquery.h>
MsiDoActionW(MSIHANDLE hInstall,LPCWSTR szAction) UINT WINAPI <msiquery.h>
MsiEnableLog(DWORD dwLogMode,LPCSTR szLogFile,DWORD dwLogAttributes) UINT WINAPI <msi.h>
MsiEnableLogA(DWORD dwLogMode,LPCSTR szLogFile,DWORD dwLogAttributes) UINT WINAPI <msi.h>
MsiEnableLogW(DWORD dwLogMode,LPCWSTR szLogFile,DWORD dwLogAttributes) UINT WINAPI <msi.h>
MsiEnableUIPreview(MSIHANDLE hDatabase,MSIHANDLE * phPreview) UINT WINAPI <msiquery.h>
MsiEndTransaction(DWORD dwTransactionState)UINT WINAPI <msi.h>
MsiEnumClients(LPCSTR szComponent,DWORD iProductIndex,LPSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumClientsA(LPCSTR szComponent,DWORD iProductIndex,LPSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumClientsW(LPCWSTR szComponent,DWORD iProductIndex,LPWSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumComponentCosts(MSIHANDLE hInstall,LPCSTR szComponent,DWORD dwIndex,INSTALLSTATE iState,LPSTR szDriveBuf,DWORD * pcchDriveBuf,INT * piCost,INT * piTempCost) UINT WINAPI <msiquery.h>
MsiEnumComponentCostsA(MSIHANDLE hInstall,LPCSTR szComponent,DWORD dwIndex,INSTALLSTATE iState,LPSTR szDriveBuf,DWORD * pcchDriveBuf,INT * piCost,INT * piTempCost) UINT WINAPI <msiquery.h>
MsiEnumComponentCostsW(MSIHANDLE hInstall,LPCWSTR szComponent,DWORD dwIndex,INSTALLSTATE iState,LPWSTR szDriveBuf,DWORD * pcchDriveBuf,INT * piCost,INT * piTempCost) UINT WINAPI <msiquery.h>
MsiEnumComponentQualifiers(LPCSTR szComponent,DWORD iIndex,LPSTR lpQualifierBuf,DWORD * pcchQualifierBuf,LPSTR lpApplicationDataBuf,DWORD * pcchApplicationDataBuf) UINT WINAPI <msi.h>
MsiEnumComponentQualifiersA(LPCSTR szComponent,DWORD iIndex,LPSTR lpQualifierBuf,DWORD * pcchQualifierBuf,LPSTR lpApplicationDataBuf,DWORD * pcchApplicationDataBuf) UINT WINAPI <msi.h>
MsiEnumComponentQualifiersW(LPCWSTR szComponent,DWORD iIndex,LPWSTR lpQualifierBuf,DWORD * pcchQualifierBuf,LPWSTR lpApplicationDataBuf,DWORD * pcchApplicationDataBuf) UINT WINAPI <msi.h>
MsiEnumComponents(DWORD iComponentIndex,LPSTR lpComponentBuf) UINT WINAPI <msi.h>
MsiEnumComponentsA(DWORD iComponentIndex,LPSTR lpComponentBuf) UINT WINAPI <msi.h>
MsiEnumComponentsW(DWORD iComponentIndex,LPWSTR lpComponentBuf) UINT WINAPI <msi.h>
MsiEnumFeatures(LPCSTR szProduct,DWORD iFeatureIndex,LPSTR lpFeatureBuf,LPSTR lpParentBuf) UINT WINAPI <msi.h>
MsiEnumFeaturesA(LPCSTR szProduct,DWORD iFeatureIndex,LPSTR lpFeatureBuf,LPSTR lpParentBuf) UINT WINAPI <msi.h>
MsiEnumFeaturesW(LPCWSTR szProduct,DWORD iFeatureIndex,LPWSTR lpFeatureBuf,LPWSTR lpParentBuf) UINT WINAPI <msi.h>
MsiEnumPatches(LPCSTR szProduct,DWORD iPatchIndex,LPSTR lpPatchBuf,LPSTR lpTransformsBuf,DWORD * pcchTransformsBuf) UINT WINAPI <msi.h>
MsiEnumPatchesA(LPCSTR szProduct,DWORD iPatchIndex,LPSTR lpPatchBuf,LPSTR lpTransformsBuf,DWORD * pcchTransformsBuf) UINT WINAPI <msi.h>
MsiEnumPatchesEx(LPCSTR szProductCode,LPCSTR szUserSid,DWORD dwContext,DWORD dwFilter,DWORD dwIndex,CHAR szPatchCode[39],CHAR szTargetProductCode[39],MSIINSTALLCONTEXT * pdwTargetProductContext,LPSTR szTargetUserSid,LPDWORD pcchTargetUserSid) UINT WINAPI <msi.h>
MsiEnumPatchesExA(LPCSTR szProductCode,LPCSTR szUserSid,DWORD dwContext,DWORD dwFilter,DWORD dwIndex,CHAR szPatchCode[39],CHAR szTargetProductCode[39],MSIINSTALLCONTEXT * pdwTargetProductContext,LPSTR szTargetUserSid,LPDWORD pcchTargetUserSid) UINT WINAPI <msi.h>
MsiEnumPatchesExW(LPCWSTR szProductCode,LPCWSTR szUserSid,DWORD dwContext,DWORD dwFilter,DWORD dwIndex,WCHAR szPatchCode[39],WCHAR szTargetProductCode[39],MSIINSTALLCONTEXT * pdwTargetProductContext,LPWSTR szTargetUserSid,LPDWORD pcchTargetUserSid) UINT WINAPI <msi.h>
MsiEnumPatchesW(LPCWSTR szProduct,DWORD iPatchIndex,LPWSTR lpPatchBuf,LPWSTR lpTransformsBuf,DWORD * pcchTransformsBuf) UINT WINAPI <msi.h>
MsiEnumProducts(DWORD iProductIndex,LPSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumProductsA(DWORD iProductIndex,LPSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumProductsEx(LPCSTR szProductCode,LPCSTR szUserSid,DWORD dwContext,DWORD dwIndex,CHAR szInstalledProductCode[39],MSIINSTALLCONTEXT * pdwInstalledContext,LPSTR szSid,LPDWORD pcchSid) UINT WINAPI <msi.h>
MsiEnumProductsExA(LPCSTR szProductCode,LPCSTR szUserSid,DWORD dwContext,DWORD dwIndex,CHAR szInstalledProductCode[39],MSIINSTALLCONTEXT * pdwInstalledContext,LPSTR szSid,LPDWORD pcchSid) UINT WINAPI <msi.h>
MsiEnumProductsExW(LPCWSTR szProductCode,LPCWSTR szUserSid,DWORD dwContext,DWORD dwIndex,WCHAR szInstalledProductCode[39],MSIINSTALLCONTEXT * pdwInstalledContext,LPWSTR szSid,LPDWORD pcchSid) UINT WINAPI <msi.h>
MsiEnumProductsW(DWORD iProductIndex,LPWSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumRelatedProducts(LPCSTR lpUpgradeCode,DWORD dwReserved,DWORD iProductIndex,LPSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumRelatedProductsA(LPCSTR lpUpgradeCode,DWORD dwReserved,DWORD iProductIndex,LPSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEnumRelatedProductsW(LPCWSTR lpUpgradeCode,DWORD dwReserved,DWORD iProductIndex,LPWSTR lpProductBuf) UINT WINAPI <msi.h>
MsiEvaluateCondition(MSIHANDLE hInstall,LPCSTR szCondition) MSICONDITION WINAPI <msiquery.h>
MsiEvaluateConditionA(MSIHANDLE hInstall,LPCSTR szCondition) MSICONDITION WINAPI <msiquery.h>
MsiEvaluateConditionW(MSIHANDLE hInstall,LPCWSTR szCondition) MSICONDITION WINAPI <msiquery.h>
MsiExtractPatchXMLData(LPCSTR szPatchPath,DWORD dwReserved,LPSTR szXMLData,DWORD * pcchXMLData) UINT WINAPI <msi.h>
MsiExtractPatchXMLDataA(LPCSTR szPatchPath,DWORD dwReserved,LPSTR szXMLData,DWORD * pcchXMLData) UINT WINAPI <msi.h>
MsiExtractPatchXMLDataW(LPCWSTR szPatchPath,DWORD dwReserved,LPWSTR szXMLData,DWORD * pcchXMLData) UINT WINAPI <msi.h>
MsiFormatRecord(MSIHANDLE hInstall,MSIHANDLE hRecord,LPSTR szResultBuf,DWORD * pcchResultBuf) UINT WINAPI <msiquery.h>
MsiFormatRecordA(MSIHANDLE hInstall,MSIHANDLE hRecord,LPSTR szResultBuf,DWORD * pcchResultBuf) UINT WINAPI <msiquery.h>
MsiFormatRecordW(MSIHANDLE hInstall,MSIHANDLE hRecord,LPWSTR szResultBuf,DWORD * pcchResultBuf) UINT WINAPI <msiquery.h>
MsiGetActiveDatabase(MSIHANDLE hInstall) MSIHANDLE WINAPI <msiquery.h>
MsiGetComponentPath(LPCSTR szProduct,LPCSTR szComponent,LPSTR lpPathBuf,DWORD * pcchBuf) INSTALLSTATE WINAPI <msi.h>
MsiGetComponentPathA(LPCSTR szProduct,LPCSTR szComponent,LPSTR lpPathBuf,DWORD * pcchBuf) INSTALLSTATE WINAPI <msi.h>
MsiGetComponentPathW(LPCWSTR szProduct,LPCWSTR szComponent,LPWSTR lpPathBuf,DWORD * pcchBuf) INSTALLSTATE WINAPI <msi.h>
MsiGetComponentState(MSIHANDLE hInstall,LPCSTR szComponent,INSTALLSTATE * piInstalled,INSTALLSTATE * piAction) UINT WINAPI <msiquery.h>
MsiGetComponentStateA(MSIHANDLE hInstall,LPCSTR szComponent,INSTALLSTATE * piInstalled,INSTALLSTATE * piAction) UINT WINAPI <msiquery.h>
MsiGetComponentStateW(MSIHANDLE hInstall,LPCWSTR szComponent,INSTALLSTATE * piInstalled,INSTALLSTATE * piAction) UINT WINAPI <msiquery.h>
MsiGetDatabaseState(MSIHANDLE hDatabase) MSIDBSTATE WINAPI <msiquery.h>
MsiGetFeatureCost(MSIHANDLE hInstall,LPCSTR szFeature,MSICOSTTREE iCostTree,INSTALLSTATE iState,INT * piCost) UINT WINAPI <msiquery.h>
MsiGetFeatureCostA(MSIHANDLE hInstall,LPCSTR szFeature,MSICOSTTREE iCostTree,INSTALLSTATE iState,INT * piCost) UINT WINAPI <msiquery.h>
MsiGetFeatureCostW(MSIHANDLE hInstall,LPCWSTR szFeature,MSICOSTTREE iCostTree,INSTALLSTATE iState,INT * piCost) UINT WINAPI <msiquery.h>
MsiGetFeatureInfo(MSIHANDLE hProduct,LPCSTR szFeature,DWORD * lpAttributes,LPSTR lpTitleBuf,DWORD * pcchTitleBuf,LPSTR lpHelpBuf,DWORD * pcchHelpBuf) UINT WINAPI <msi.h>
MsiGetFeatureInfoA(MSIHANDLE hProduct,LPCSTR szFeature,DWORD * lpAttributes,LPSTR lpTitleBuf,DWORD * pcchTitleBuf,LPSTR lpHelpBuf,DWORD * pcchHelpBuf) UINT WINAPI <msi.h>
MsiGetFeatureInfoW(MSIHANDLE hProduct,LPCWSTR szFeature,DWORD * lpAttributes,LPWSTR lpTitleBuf,DWORD * pcchTitleBuf,LPWSTR lpHelpBuf,DWORD * pcchHelpBuf) UINT WINAPI <msi.h>
MsiGetFeatureState(MSIHANDLE hInstall,LPCSTR szFeature,INSTALLSTATE * piInstalled,INSTALLSTATE * piAction) UINT WINAPI <msiquery.h>
MsiGetFeatureStateA(MSIHANDLE hInstall,LPCSTR szFeature,INSTALLSTATE * piInstalled,INSTALLSTATE * piAction) UINT WINAPI <msiquery.h>
MsiGetFeatureStateW(MSIHANDLE hInstall,LPCWSTR szFeature,INSTALLSTATE * piInstalled,INSTALLSTATE * piAction) UINT WINAPI <msiquery.h>
MsiGetFeatureUsage(LPCSTR szProduct,LPCSTR szFeature,DWORD * pdwUseCount,WORD * pwDateUsed) UINT WINAPI <msi.h>
MsiGetFeatureUsageA(LPCSTR szProduct,LPCSTR szFeature,DWORD * pdwUseCount,WORD * pwDateUsed) UINT WINAPI <msi.h>
MsiGetFeatureUsageW(LPCWSTR szProduct,LPCWSTR szFeature,DWORD * pdwUseCount,WORD * pwDateUsed) UINT WINAPI <msi.h>
MsiGetFeatureValidStates(MSIHANDLE hInstall,LPCSTR szFeature,DWORD * dwInstallStates) UINT WINAPI <msiquery.h>
MsiGetFeatureValidStatesA(MSIHANDLE hInstall,LPCSTR szFeature,DWORD * dwInstallStates) UINT WINAPI <msiquery.h>
MsiGetFeatureValidStatesW(MSIHANDLE hInstall,LPCWSTR szFeature,DWORD * dwInstallStates) UINT WINAPI <msiquery.h>
MsiGetFileHash(LPCSTR szFilePath,DWORD dwOptions,PMSIFILEHASHINFO pHash) UINT WINAPI <msi.h>
MsiGetFileHashA(LPCSTR szFilePath,DWORD dwOptions,PMSIFILEHASHINFO pHash) UINT WINAPI <msi.h>
MsiGetFileHashW(LPCWSTR szFilePath,DWORD dwOptions,PMSIFILEHASHINFO pHash) UINT WINAPI <msi.h>
MsiGetFileSignatureInformation(LPCSTR szSignedObjectPath,DWORD dwFlags,PCCERT_CONTEXT * ppcCertContext,BYTE * pbHashData,DWORD * pcbHashData) HRESULT WINAPI <msi.h>
MsiGetFileSignatureInformationA(LPCSTR szSignedObjectPath,DWORD dwFlags,PCCERT_CONTEXT * ppcCertContext,BYTE * pbHashData,DWORD * pcbHashData) HRESULT WINAPI <msi.h>
MsiGetFileSignatureInformationW(LPCWSTR szSignedObjectPath,DWORD dwFlags,PCCERT_CONTEXT * ppcCertContext,BYTE * pbHashData,DWORD * pcbHashData) HRESULT WINAPI <msi.h>
MsiGetFileVersion(LPCSTR szFilePath,LPSTR lpVersionBuf,DWORD * pcchVersionBuf,LPSTR lpLangBuf,DWORD * pcchLangBuf) UINT WINAPI <msi.h>
MsiGetFileVersionA(LPCSTR szFilePath,LPSTR lpVersionBuf,DWORD * pcchVersionBuf,LPSTR lpLangBuf,DWORD * pcchLangBuf) UINT WINAPI <msi.h>
MsiGetFileVersionW(LPCWSTR szFilePath,LPWSTR lpVersionBuf,DWORD * pcchVersionBuf,LPWSTR lpLangBuf,DWORD * pcchLangBuf) UINT WINAPI <msi.h>
MsiGetLanguage(MSIHANDLE hInstall) LANGID WINAPI <msiquery.h>
MsiGetLastErrorRecord() MSIHANDLE WINAPI <msiquery.h>
MsiGetMode(MSIHANDLE hInstall,MSIRUNMODE eRunMode) WINBOOL WINAPI <msiquery.h>
MsiGetPatchFileList(LPCSTR szProductCode,LPCSTR szPatchPackages,LPDWORD pcFiles,MSIHANDLE ** pphFileRecords)UINT WINAPI <msi.h>
MsiGetPatchFileListA(LPCSTR szProductCode,LPCSTR szPatchPackages,LPDWORD pcFiles,MSIHANDLE ** pphFileRecords)UINT WINAPI <msi.h>
MsiGetPatchFileListW(LPCWSTR szProductCode,LPCWSTR szPatchPackages,LPDWORD pcFiles,MSIHANDLE ** pphFileRecords)UINT WINAPI <msi.h>
MsiGetPatchInfo(LPCSTR szPatch,LPCSTR szAttribute,LPSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetPatchInfoA(LPCSTR szPatch,LPCSTR szAttribute,LPSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetPatchInfoEx(LPCSTR szPatchCode,LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szProperty,LPSTR lpValue,DWORD * pcchValue) UINT WINAPI <msi.h>
MsiGetPatchInfoExA(LPCSTR szPatchCode,LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szProperty,LPSTR lpValue,DWORD * pcchValue) UINT WINAPI <msi.h>
MsiGetPatchInfoExW(LPCWSTR szPatchCode,LPCWSTR szProductCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCWSTR szProperty,LPWSTR lpValue,DWORD * pcchValue) UINT WINAPI <msi.h>
MsiGetPatchInfoW(LPCWSTR szPatch,LPCWSTR szAttribute,LPWSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProductCode(LPCSTR szComponent,LPSTR lpBuf39) UINT WINAPI <msi.h>
MsiGetProductCodeA(LPCSTR szComponent,LPSTR lpBuf39) UINT WINAPI <msi.h>
MsiGetProductCodeW(LPCWSTR szComponent,LPWSTR lpBuf39) UINT WINAPI <msi.h>
MsiGetProductInfo(LPCSTR szProduct,LPCSTR szAttribute,LPSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProductInfoA(LPCSTR szProduct,LPCSTR szAttribute,LPSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProductInfoEx(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szProperty,LPSTR szValue,LPDWORD pcchValue) UINT WINAPI <msi.h>
MsiGetProductInfoExA(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szProperty,LPSTR szValue,LPDWORD pcchValue) UINT WINAPI <msi.h>
MsiGetProductInfoExW(LPCWSTR szProductCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCWSTR szProperty,LPWSTR szValue,LPDWORD pcchValue) UINT WINAPI <msi.h>
MsiGetProductInfoFromScript(LPCSTR szScriptFile,LPSTR lpProductBuf39,LANGID * plgidLanguage,DWORD * pdwVersion,LPSTR lpNameBuf,DWORD * pcchNameBuf,LPSTR lpPackageBuf,DWORD * pcchPackageBuf) UINT WINAPI <msi.h>
MsiGetProductInfoFromScriptA(LPCSTR szScriptFile,LPSTR lpProductBuf39,LANGID * plgidLanguage,DWORD * pdwVersion,LPSTR lpNameBuf,DWORD * pcchNameBuf,LPSTR lpPackageBuf,DWORD * pcchPackageBuf) UINT WINAPI <msi.h>
MsiGetProductInfoFromScriptW(LPCWSTR szScriptFile,LPWSTR lpProductBuf39,LANGID * plgidLanguage,DWORD * pdwVersion,LPWSTR lpNameBuf,DWORD * pcchNameBuf,LPWSTR lpPackageBuf,DWORD * pcchPackageBuf) UINT WINAPI <msi.h>
MsiGetProductInfoW(LPCWSTR szProduct,LPCWSTR szAttribute,LPWSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProductProperty(MSIHANDLE hProduct,LPCSTR szProperty,LPSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProductPropertyA(MSIHANDLE hProduct,LPCSTR szProperty,LPSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProductPropertyW(MSIHANDLE hProduct,LPCWSTR szProperty,LPWSTR lpValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msi.h>
MsiGetProperty(MSIHANDLE hInstall,LPCSTR szName,LPSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiGetPropertyA(MSIHANDLE hInstall,LPCSTR szName,LPSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiGetPropertyW(MSIHANDLE hInstall,LPCWSTR szName,LPWSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiGetShortcutTarget(LPCSTR szShortcutPath,LPSTR szProductCode,LPSTR szFeatureId,LPSTR szComponentCode) UINT WINAPI <msi.h>
MsiGetShortcutTargetA(LPCSTR szShortcutPath,LPSTR szProductCode,LPSTR szFeatureId,LPSTR szComponentCode) UINT WINAPI <msi.h>
MsiGetShortcutTargetW(LPCWSTR szShortcutPath,LPWSTR szProductCode,LPWSTR szFeatureId,LPWSTR szComponentCode) UINT WINAPI <msi.h>
MsiGetSourcePath(MSIHANDLE hInstall,LPCSTR szFolder,LPSTR szPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msiquery.h>
MsiGetSourcePathA(MSIHANDLE hInstall,LPCSTR szFolder,LPSTR szPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msiquery.h>
MsiGetSourcePathW(MSIHANDLE hInstall,LPCWSTR szFolder,LPWSTR szPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msiquery.h>
MsiGetSummaryInformation(MSIHANDLE hDatabase,LPCSTR szDatabasePath,UINT uiUpdateCount,MSIHANDLE * phSummaryInfo) UINT WINAPI <msiquery.h>
MsiGetSummaryInformationA(MSIHANDLE hDatabase,LPCSTR szDatabasePath,UINT uiUpdateCount,MSIHANDLE * phSummaryInfo) UINT WINAPI <msiquery.h>
MsiGetSummaryInformationW(MSIHANDLE hDatabase,LPCWSTR szDatabasePath,UINT uiUpdateCount,MSIHANDLE * phSummaryInfo) UINT WINAPI <msiquery.h>
MsiGetTargetPath(MSIHANDLE hInstall,LPCSTR szFolder,LPSTR szPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msiquery.h>
MsiGetTargetPathA(MSIHANDLE hInstall,LPCSTR szFolder,LPSTR szPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msiquery.h>
MsiGetTargetPathW(MSIHANDLE hInstall,LPCWSTR szFolder,LPWSTR szPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msiquery.h>
MsiGetUserInfo(LPCSTR szProduct,LPSTR lpUserNameBuf,DWORD * pcchUserNameBuf,LPSTR lpOrgNameBuf,DWORD * pcchOrgNameBuf,LPSTR lpSerialBuf,DWORD * pcchSerialBuf) USERINFOSTATE WINAPI <msi.h>
MsiGetUserInfoA(LPCSTR szProduct,LPSTR lpUserNameBuf,DWORD * pcchUserNameBuf,LPSTR lpOrgNameBuf,DWORD * pcchOrgNameBuf,LPSTR lpSerialBuf,DWORD * pcchSerialBuf) USERINFOSTATE WINAPI <msi.h>
MsiGetUserInfoW(LPCWSTR szProduct,LPWSTR lpUserNameBuf,DWORD * pcchUserNameBuf,LPWSTR lpOrgNameBuf,DWORD * pcchOrgNameBuf,LPWSTR lpSerialBuf,DWORD * pcchSerialBuf) USERINFOSTATE WINAPI <msi.h>
MsiInstallMissingComponent(LPCSTR szProduct,LPCSTR szComponent,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiInstallMissingComponentA(LPCSTR szProduct,LPCSTR szComponent,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiInstallMissingComponentW(LPCWSTR szProduct,LPCWSTR szComponent,INSTALLSTATE eInstallState) UINT WINAPI <msi.h>
MsiInstallMissingFile(LPCSTR szProduct,LPCSTR szFile) UINT WINAPI <msi.h>
MsiInstallMissingFileA(LPCSTR szProduct,LPCSTR szFile) UINT WINAPI <msi.h>
MsiInstallMissingFileW(LPCWSTR szProduct,LPCWSTR szFile) UINT WINAPI <msi.h>
MsiInstallProduct(LPCSTR szPackagePath,LPCSTR szCommandLine) UINT WINAPI <msi.h>
MsiInstallProductA(LPCSTR szPackagePath,LPCSTR szCommandLine) UINT WINAPI <msi.h>
MsiInstallProductW(LPCWSTR szPackagePath,LPCWSTR szCommandLine) UINT WINAPI <msi.h>
MsiIsProductElevated(LPCSTR szProduct,WINBOOL * pfElevated) UINT WINAPI <msi.h>
MsiIsProductElevatedA(LPCSTR szProduct,WINBOOL * pfElevated) UINT WINAPI <msi.h>
MsiIsProductElevatedW(LPCWSTR szProduct,WINBOOL * pfElevated) UINT WINAPI <msi.h>
MsiJoinTransaction(MSIHANDLE hTransactionHandle,DWORD dwTransactionAttributes,HANDLE * phChangeOfOwnerEvent)UINT WINAPI <msi.h>
MsiLocateComponent(LPCSTR szComponent,LPSTR lpPathBuf,DWORD * pcchBuf) INSTALLSTATE WINAPI <msi.h>
MsiLocateComponentA(LPCSTR szComponent,LPSTR lpPathBuf,DWORD * pcchBuf) INSTALLSTATE WINAPI <msi.h>
MsiLocateComponentW(LPCWSTR szComponent,LPWSTR lpPathBuf,DWORD * pcchBuf) INSTALLSTATE WINAPI <msi.h>
MsiNotifySidChange(LPCSTR pOldSid,LPCSTR pNewSid) UINT WINAPI <msi.h>
MsiNotifySidChangeA(LPCSTR pOldSid,LPCSTR pNewSid) UINT WINAPI <msi.h>
MsiNotifySidChangeW(LPCWSTR pOldSid,LPCWSTR pNewSid) UINT WINAPI <msi.h>
MsiOpenDatabase(LPCSTR szDatabasePath,LPCSTR szPersist,MSIHANDLE * phDatabase) UINT WINAPI <msiquery.h>
MsiOpenDatabaseA(LPCSTR szDatabasePath,LPCSTR szPersist,MSIHANDLE * phDatabase) UINT WINAPI <msiquery.h>
MsiOpenDatabaseW(LPCWSTR szDatabasePath,LPCWSTR szPersist,MSIHANDLE * phDatabase) UINT WINAPI <msiquery.h>
MsiOpenPackage(LPCSTR szPackagePath,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenPackageA(LPCSTR szPackagePath,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenPackageEx(LPCSTR szPackagePath,DWORD dwOptions,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenPackageExA(LPCSTR szPackagePath,DWORD dwOptions,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenPackageExW(LPCWSTR szPackagePath,DWORD dwOptions,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenPackageW(LPCWSTR szPackagePath,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenProduct(LPCSTR szProduct,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenProductA(LPCSTR szProduct,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiOpenProductW(LPCWSTR szProduct,MSIHANDLE * hProduct) UINT WINAPI <msi.h>
MsiPreviewBillboard(MSIHANDLE hPreview,LPCSTR szControlName,LPCSTR szBillboard) UINT WINAPI <msiquery.h>
MsiPreviewBillboardA(MSIHANDLE hPreview,LPCSTR szControlName,LPCSTR szBillboard) UINT WINAPI <msiquery.h>
MsiPreviewBillboardW(MSIHANDLE hPreview,LPCWSTR szControlName,LPCWSTR szBillboard) UINT WINAPI <msiquery.h>
MsiPreviewDialog(MSIHANDLE hPreview,LPCSTR szDialogName) UINT WINAPI <msiquery.h>
MsiPreviewDialogA(MSIHANDLE hPreview,LPCSTR szDialogName) UINT WINAPI <msiquery.h>
MsiPreviewDialogW(MSIHANDLE hPreview,LPCWSTR szDialogName) UINT WINAPI <msiquery.h>
MsiProcessAdvertiseScript(LPCSTR szScriptFile,LPCSTR szIconFolder,HKEY hRegData,WINBOOL fShortcuts,WINBOOL fRemoveItems) UINT WINAPI <msi.h>
MsiProcessAdvertiseScriptA(LPCSTR szScriptFile,LPCSTR szIconFolder,HKEY hRegData,WINBOOL fShortcuts,WINBOOL fRemoveItems) UINT WINAPI <msi.h>
MsiProcessAdvertiseScriptW(LPCWSTR szScriptFile,LPCWSTR szIconFolder,HKEY hRegData,WINBOOL fShortcuts,WINBOOL fRemoveItems) UINT WINAPI <msi.h>
MsiProcessMessage(MSIHANDLE hInstall,INSTALLMESSAGE eMessageType,MSIHANDLE hRecord) int WINAPI <msiquery.h>
MsiProvideAssembly(LPCSTR szAssemblyName,LPCSTR szAppContext,DWORD dwInstallMode,DWORD dwAssemblyInfo,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideAssemblyA(LPCSTR szAssemblyName,LPCSTR szAppContext,DWORD dwInstallMode,DWORD dwAssemblyInfo,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideAssemblyW(LPCWSTR szAssemblyName,LPCWSTR szAppContext,DWORD dwInstallMode,DWORD dwAssemblyInfo,LPWSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideComponent(LPCSTR szProduct,LPCSTR szFeature,LPCSTR szComponent,DWORD dwInstallMode,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideComponentA(LPCSTR szProduct,LPCSTR szFeature,LPCSTR szComponent,DWORD dwInstallMode,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideComponentW(LPCWSTR szProduct,LPCWSTR szFeature,LPCWSTR szComponent,DWORD dwInstallMode,LPWSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideQualifiedComponent(LPCSTR szCategory,LPCSTR szQualifier,DWORD dwInstallMode,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideQualifiedComponentA(LPCSTR szCategory,LPCSTR szQualifier,DWORD dwInstallMode,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideQualifiedComponentEx(LPCSTR szCategory,LPCSTR szQualifier,DWORD dwInstallMode,LPCSTR szProduct,DWORD dwUnused1,DWORD dwUnused2,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideQualifiedComponentExA(LPCSTR szCategory,LPCSTR szQualifier,DWORD dwInstallMode,LPCSTR szProduct,DWORD dwUnused1,DWORD dwUnused2,LPSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideQualifiedComponentExW(LPCWSTR szCategory,LPCWSTR szQualifier,DWORD dwInstallMode,LPCWSTR szProduct,DWORD dwUnused1,DWORD dwUnused2,LPWSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiProvideQualifiedComponentW(LPCWSTR szCategory,LPCWSTR szQualifier,DWORD dwInstallMode,LPWSTR lpPathBuf,DWORD * pcchPathBuf) UINT WINAPI <msi.h>
MsiQueryComponentState(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szComponentCode,INSTALLSTATE * pdwState) UINT WINAPI <msi.h>
MsiQueryComponentStateA(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szComponentCode,INSTALLSTATE * pdwState) UINT WINAPI <msi.h>
MsiQueryComponentStateW(LPCWSTR szProductCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCWSTR szComponentCode,INSTALLSTATE * pdwState) UINT WINAPI <msi.h>
MsiQueryFeatureState(LPCSTR szProduct,LPCSTR szFeature) INSTALLSTATE WINAPI <msi.h>
MsiQueryFeatureStateA(LPCSTR szProduct,LPCSTR szFeature) INSTALLSTATE WINAPI <msi.h>
MsiQueryFeatureStateEx(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szFeature,INSTALLSTATE * pdwState) UINT WINAPI <msi.h>
MsiQueryFeatureStateExA(LPCSTR szProductCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCSTR szFeature,INSTALLSTATE * pdwState) UINT WINAPI <msi.h>
MsiQueryFeatureStateExW(LPCWSTR szProductCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,LPCWSTR szFeature,INSTALLSTATE * pdwState) UINT WINAPI <msi.h>
MsiQueryFeatureStateW(LPCWSTR szProduct,LPCWSTR szFeature) INSTALLSTATE WINAPI <msi.h>
MsiQueryProductState(LPCSTR szProduct) INSTALLSTATE WINAPI <msi.h>
MsiQueryProductStateA(LPCSTR szProduct) INSTALLSTATE WINAPI <msi.h>
MsiQueryProductStateW(LPCWSTR szProduct) INSTALLSTATE WINAPI <msi.h>
MsiRecordClearData(MSIHANDLE hRecord) UINT WINAPI <msiquery.h>
MsiRecordDataSize(MSIHANDLE hRecord,UINT iField) UINT WINAPI <msiquery.h>
MsiRecordGetFieldCount(MSIHANDLE hRecord) UINT WINAPI <msiquery.h>
MsiRecordGetInteger(MSIHANDLE hRecord,UINT iField) int WINAPI <msiquery.h>
MsiRecordGetString(MSIHANDLE hRecord,UINT iField,LPSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiRecordGetStringA(MSIHANDLE hRecord,UINT iField,LPSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiRecordGetStringW(MSIHANDLE hRecord,UINT iField,LPWSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiRecordIsNull(MSIHANDLE hRecord,UINT iField) WINBOOL WINAPI <msiquery.h>
MsiRecordReadStream(MSIHANDLE hRecord,UINT iField,char * szDataBuf,DWORD * pcbDataBuf) UINT WINAPI <msiquery.h>
MsiRecordSetInteger(MSIHANDLE hRecord,UINT iField,int iValue) UINT WINAPI <msiquery.h>
MsiRecordSetStream(MSIHANDLE hRecord,UINT iField,LPCSTR szFilePath) UINT WINAPI <msiquery.h>
MsiRecordSetStreamA(MSIHANDLE hRecord,UINT iField,LPCSTR szFilePath) UINT WINAPI <msiquery.h>
MsiRecordSetStreamW(MSIHANDLE hRecord,UINT iField,LPCWSTR szFilePath) UINT WINAPI <msiquery.h>
MsiRecordSetString(MSIHANDLE hRecord,UINT iField,LPCSTR szValue) UINT WINAPI <msiquery.h>
MsiRecordSetStringA(MSIHANDLE hRecord,UINT iField,LPCSTR szValue) UINT WINAPI <msiquery.h>
MsiRecordSetStringW(MSIHANDLE hRecord,UINT iField,LPCWSTR szValue) UINT WINAPI <msiquery.h>
MsiReinstallFeature(LPCSTR szProduct,LPCSTR szFeature,DWORD dwReinstallMode) UINT WINAPI <msi.h>
MsiReinstallFeatureA(LPCSTR szProduct,LPCSTR szFeature,DWORD dwReinstallMode) UINT WINAPI <msi.h>
MsiReinstallFeatureW(LPCWSTR szProduct,LPCWSTR szFeature,DWORD dwReinstallMode) UINT WINAPI <msi.h>
MsiReinstallProduct(LPCSTR szProduct,DWORD szReinstallMode) UINT WINAPI <msi.h>
MsiReinstallProductA(LPCSTR szProduct,DWORD szReinstallMode) UINT WINAPI <msi.h>
MsiReinstallProductW(LPCWSTR szProduct,DWORD szReinstallMode) UINT WINAPI <msi.h>
MsiRemovePatches(LPCSTR szPatchList,LPCSTR szProductCode,INSTALLTYPE eUninstallType,LPCSTR szPropertyList) UINT WINAPI <msi.h>
MsiRemovePatchesA(LPCSTR szPatchList,LPCSTR szProductCode,INSTALLTYPE eUninstallType,LPCSTR szPropertyList) UINT WINAPI <msi.h>
MsiRemovePatchesW(LPCWSTR szPatchList,LPCWSTR szProductCode,INSTALLTYPE eUninstallType,LPCWSTR szPropertyList) UINT WINAPI <msi.h>
MsiSequence(MSIHANDLE hInstall,LPCSTR szTable,INT iSequenceMode) UINT WINAPI <msiquery.h>
MsiSequenceA(MSIHANDLE hInstall,LPCSTR szTable,INT iSequenceMode) UINT WINAPI <msiquery.h>
MsiSequenceW(MSIHANDLE hInstall,LPCWSTR szTable,INT iSequenceMode) UINT WINAPI <msiquery.h>
MsiSetComponentState(MSIHANDLE hInstall,LPCSTR szComponent,INSTALLSTATE iState) UINT WINAPI <msiquery.h>
MsiSetComponentStateA(MSIHANDLE hInstall,LPCSTR szComponent,INSTALLSTATE iState) UINT WINAPI <msiquery.h>
MsiSetComponentStateW(MSIHANDLE hInstall,LPCWSTR szComponent,INSTALLSTATE iState) UINT WINAPI <msiquery.h>
MsiSetExternalUI(INSTALLUI_HANDLERA puiHandler,DWORD dwMessageFilter,LPVOID pvContext) INSTALLUI_HANDLERA WINAPI <msi.h>
MsiSetExternalUIA(INSTALLUI_HANDLERA puiHandler,DWORD dwMessageFilter,LPVOID pvContext) INSTALLUI_HANDLERA WINAPI <msi.h>
MsiSetExternalUIRecord(INSTALLUI_HANDLER_RECORD puiHandler,DWORD dwMessageFilter,LPVOID pvContext,PINSTALLUI_HANDLER_RECORD ppuiPrevHandler) UINT WINAPI <msi.h>
MsiSetExternalUIW(INSTALLUI_HANDLERW puiHandler,DWORD dwMessageFilter,LPVOID pvContext) INSTALLUI_HANDLERW WINAPI <msi.h>
MsiSetFeatureAttributes(MSIHANDLE hInstall,LPCSTR szFeature,DWORD dwAttributes) UINT WINAPI <msiquery.h>
MsiSetFeatureAttributesA(MSIHANDLE hInstall,LPCSTR szFeature,DWORD dwAttributes) UINT WINAPI <msiquery.h>
MsiSetFeatureAttributesW(MSIHANDLE hInstall,LPCWSTR szFeature,DWORD dwAttributes) UINT WINAPI <msiquery.h>
MsiSetFeatureState(MSIHANDLE hInstall,LPCSTR szFeature,INSTALLSTATE iState) UINT WINAPI <msiquery.h>
MsiSetFeatureStateA(MSIHANDLE hInstall,LPCSTR szFeature,INSTALLSTATE iState) UINT WINAPI <msiquery.h>
MsiSetFeatureStateW(MSIHANDLE hInstall,LPCWSTR szFeature,INSTALLSTATE iState) UINT WINAPI <msiquery.h>
MsiSetInstallLevel(MSIHANDLE hInstall,int iInstallLevel) UINT WINAPI <msiquery.h>
MsiSetInternalUI(INSTALLUILEVEL dwUILevel,HWND * phWnd) INSTALLUILEVEL WINAPI <msi.h>
MsiSetMode(MSIHANDLE hInstall,MSIRUNMODE eRunMode,WINBOOL fState) UINT WINAPI <msiquery.h>
MsiSetProperty(MSIHANDLE hInstall,LPCSTR szName,LPCSTR szValue) UINT WINAPI <msiquery.h>
MsiSetPropertyA(MSIHANDLE hInstall,LPCSTR szName,LPCSTR szValue) UINT WINAPI <msiquery.h>
MsiSetPropertyW(MSIHANDLE hInstall,LPCWSTR szName,LPCWSTR szValue) UINT WINAPI <msiquery.h>
MsiSetTargetPath(MSIHANDLE hInstall,LPCSTR szFolder,LPCSTR szFolderPath) UINT WINAPI <msiquery.h>
MsiSetTargetPathA(MSIHANDLE hInstall,LPCSTR szFolder,LPCSTR szFolderPath) UINT WINAPI <msiquery.h>
MsiSetTargetPathW(MSIHANDLE hInstall,LPCWSTR szFolder,LPCWSTR szFolderPath) UINT WINAPI <msiquery.h>
MsiSourceListAddMediaDisk(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwDiskId,LPCSTR szVolumeLabel,LPCSTR szDiskPrompt) UINT WINAPI <msi.h>
MsiSourceListAddMediaDiskA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwDiskId,LPCSTR szVolumeLabel,LPCSTR szDiskPrompt) UINT WINAPI <msi.h>
MsiSourceListAddMediaDiskW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwDiskId,LPCWSTR szVolumeLabel,LPCWSTR szDiskPrompt) UINT WINAPI <msi.h>
MsiSourceListAddSource(LPCSTR szProduct,LPCSTR szUserName,DWORD dwReserved,LPCSTR szSource) UINT WINAPI <msi.h>
MsiSourceListAddSourceA(LPCSTR szProduct,LPCSTR szUserName,DWORD dwReserved,LPCSTR szSource) UINT WINAPI <msi.h>
MsiSourceListAddSourceEx(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szSource,DWORD dwIndex) UINT WINAPI <msi.h>
MsiSourceListAddSourceExA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szSource,DWORD dwIndex) UINT WINAPI <msi.h>
MsiSourceListAddSourceExW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCWSTR szSource,DWORD dwIndex) UINT WINAPI <msi.h>
MsiSourceListAddSourceW(LPCWSTR szProduct,LPCWSTR szUserName,DWORD dwReserved,LPCWSTR szSource) UINT WINAPI <msi.h>
MsiSourceListClearAll(LPCSTR szProduct,LPCSTR szUserName,DWORD dwReserved) UINT WINAPI <msi.h>
MsiSourceListClearAllA(LPCSTR szProduct,LPCSTR szUserName,DWORD dwReserved) UINT WINAPI <msi.h>
MsiSourceListClearAllEx(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions) UINT WINAPI <msi.h>
MsiSourceListClearAllExA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions) UINT WINAPI <msi.h>
MsiSourceListClearAllExW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions) UINT WINAPI <msi.h>
MsiSourceListClearAllW(LPCWSTR szProduct,LPCWSTR szUserName,DWORD dwReserved) UINT WINAPI <msi.h>
MsiSourceListClearMediaDisk(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwDiskId) UINT WINAPI <msi.h>
MsiSourceListClearMediaDiskA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwDiskId) UINT WINAPI <msi.h>
MsiSourceListClearMediaDiskW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwDiskId) UINT WINAPI <msi.h>
MsiSourceListClearSource(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szSource) UINT WINAPI <msi.h>
MsiSourceListClearSourceA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szSource) UINT WINAPI <msi.h>
MsiSourceListClearSourceW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCWSTR szSource) UINT WINAPI <msi.h>
MsiSourceListEnumMediaDisks(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwIndex,LPDWORD pdwDiskId,LPSTR szVolumeLabel,LPDWORD pcchVolumeLabel,LPSTR szDiskPrompt,LPDWORD pcchDiskPrompt) UINT WINAPI <msi.h>
MsiSourceListEnumMediaDisksA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwIndex,LPDWORD pdwDiskId,LPSTR szVolumeLabel,LPDWORD pcchVolumeLabel,LPSTR szDiskPrompt,LPDWORD pcchDiskPrompt) UINT WINAPI <msi.h>
MsiSourceListEnumMediaDisksW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwIndex,LPDWORD pdwDiskId,LPWSTR szVolumeLabel,LPDWORD pcchVolumeLabel,LPWSTR szDiskPrompt,LPDWORD pcchDiskPrompt) UINT WINAPI <msi.h>
MsiSourceListEnumSources(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwIndex,LPSTR szSource,LPDWORD pcchSource) UINT WINAPI <msi.h>
MsiSourceListEnumSourcesA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwIndex,LPSTR szSource,LPDWORD pcchSource) UINT WINAPI <msi.h>
MsiSourceListEnumSourcesW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,DWORD dwIndex,LPWSTR szSource,LPDWORD pcchSource) UINT WINAPI <msi.h>
MsiSourceListForceResolution(LPCSTR szProduct,LPCSTR szUserName,DWORD dwReserved) UINT WINAPI <msi.h>
MsiSourceListForceResolutionA(LPCSTR szProduct,LPCSTR szUserName,DWORD dwReserved) UINT WINAPI <msi.h>
MsiSourceListForceResolutionEx(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions) UINT WINAPI <msi.h>
MsiSourceListForceResolutionExA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions) UINT WINAPI <msi.h>
MsiSourceListForceResolutionExW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions) UINT WINAPI <msi.h>
MsiSourceListForceResolutionW(LPCWSTR szProduct,LPCWSTR szUserName,DWORD dwReserved) UINT WINAPI <msi.h>
MsiSourceListGetInfo(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szProperty,LPSTR szValue,LPDWORD pcchValue) UINT WINAPI <msi.h>
MsiSourceListGetInfoA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szProperty,LPSTR szValue,LPDWORD pcchValue) UINT WINAPI <msi.h>
MsiSourceListGetInfoW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCWSTR szProperty,LPWSTR szValue,LPDWORD pcchValue) UINT WINAPI <msi.h>
MsiSourceListSetInfo(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szProperty,LPCSTR szValue) UINT WINAPI <msi.h>
MsiSourceListSetInfoA(LPCSTR szProductCodeOrPatchCode,LPCSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCSTR szProperty,LPCSTR szValue) UINT WINAPI <msi.h>
MsiSourceListSetInfoW(LPCWSTR szProductCodeOrPatchCode,LPCWSTR szUserSid,MSIINSTALLCONTEXT dwContext,DWORD dwOptions,LPCWSTR szProperty,LPCWSTR szValue) UINT WINAPI <msi.h>
MsiSummaryInfoGetProperty(MSIHANDLE hSummaryInfo,UINT uiProperty,UINT * puiDataType,INT * piValue,FILETIME * pftValue,LPSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiSummaryInfoGetPropertyA(MSIHANDLE hSummaryInfo,UINT uiProperty,UINT * puiDataType,INT * piValue,FILETIME * pftValue,LPSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiSummaryInfoGetPropertyCount(MSIHANDLE hSummaryInfo,UINT * puiPropertyCount) UINT WINAPI <msiquery.h>
MsiSummaryInfoGetPropertyW(MSIHANDLE hSummaryInfo,UINT uiProperty,UINT * puiDataType,INT * piValue,FILETIME * pftValue,LPWSTR szValueBuf,DWORD * pcchValueBuf) UINT WINAPI <msiquery.h>
MsiSummaryInfoPersist(MSIHANDLE hSummaryInfo) UINT WINAPI <msiquery.h>
MsiSummaryInfoSetProperty(MSIHANDLE hSummaryInfo,UINT uiProperty,UINT uiDataType,INT iValue,FILETIME * pftValue,LPCSTR szValue) UINT WINAPI <msiquery.h>
MsiSummaryInfoSetPropertyA(MSIHANDLE hSummaryInfo,UINT uiProperty,UINT uiDataType,INT iValue,FILETIME * pftValue,LPCSTR szValue) UINT WINAPI <msiquery.h>
MsiSummaryInfoSetPropertyW(MSIHANDLE hSummaryInfo,UINT uiProperty,UINT uiDataType,INT iValue,FILETIME * pftValue,LPCWSTR szValue) UINT WINAPI <msiquery.h>
MsiUseFeature(LPCSTR szProduct,LPCSTR szFeature) INSTALLSTATE WINAPI <msi.h>
MsiUseFeatureA(LPCSTR szProduct,LPCSTR szFeature) INSTALLSTATE WINAPI <msi.h>
MsiUseFeatureEx(LPCSTR szProduct,LPCSTR szFeature,DWORD dwInstallMode,DWORD dwReserved) INSTALLSTATE WINAPI <msi.h>
MsiUseFeatureExA(LPCSTR szProduct,LPCSTR szFeature,DWORD dwInstallMode,DWORD dwReserved) INSTALLSTATE WINAPI <msi.h>
MsiUseFeatureExW(LPCWSTR szProduct,LPCWSTR szFeature,DWORD dwInstallMode,DWORD dwReserved) INSTALLSTATE WINAPI <msi.h>
MsiUseFeatureW(LPCWSTR szProduct,LPCWSTR szFeature) INSTALLSTATE WINAPI <msi.h>
MsiVerifyDiskSpace(MSIHANDLE hInstall) UINT WINAPI <msiquery.h>
MsiVerifyPackage(LPCSTR szPackagePath) UINT WINAPI <msi.h>
MsiVerifyPackageA(LPCSTR szPackagePath) UINT WINAPI <msi.h>
MsiVerifyPackageW(LPCWSTR szPackagePath) UINT WINAPI <msi.h>
MsiViewClose(MSIHANDLE hView) UINT WINAPI <msiquery.h>
MsiViewExecute(MSIHANDLE hView,MSIHANDLE hRecord) UINT WINAPI <msiquery.h>
MsiViewFetch(MSIHANDLE hView,MSIHANDLE * phRecord) UINT WINAPI <msiquery.h>
MsiViewGetColumnInfo(MSIHANDLE hView,MSICOLINFO eColumnInfo,MSIHANDLE * phRecord) UINT WINAPI <msiquery.h>
MsiViewGetError(MSIHANDLE hView,LPSTR szColumnNameBuffer,DWORD * pcchBuf) MSIDBERROR WINAPI <msiquery.h>
MsiViewGetErrorA(MSIHANDLE hView,LPSTR szColumnNameBuffer,DWORD * pcchBuf) MSIDBERROR WINAPI <msiquery.h>
MsiViewGetErrorW(MSIHANDLE hView,LPWSTR szColumnNameBuffer,DWORD * pcchBuf) MSIDBERROR WINAPI <msiquery.h>
MsiViewModify(MSIHANDLE hView,MSIMODIFY eModifyMode,MSIHANDLE hRecord) UINT WINAPI <msiquery.h>
MsoFAnyAntiVirus(HMSOINST hmsoinst)MSOAPI_<msoav.h>
MsoFDoAntiVirusScan(HMSOINST hmsoinst,MSOAVINFO * msoavinfo)MSOAPI_<msoav.h>
MsoFDoSecurityLevelDlg(HMSOINST hmsoinst,DWORD msorid,int * pSecurityLevel,WINBOOL * pfTrustInstalled,HWND hwndParent,WINBOOL fShowVirusCheckers,WCHAR * wzHelpFile,DWORD dwHelpId)MSOAPI_<msoav.h>
MsoFreeMsoavStuff(HMSOINST hmsoinst)MSOAPI_<msoav.h>
MsoMsoedmDialog(HMSOINST hmsoinst,WINBOOL fAppIsActive,WINBOOL fHasVBMacros,WINBOOL fHasXLMMacros,void * pvDigSigStore,void * pvMacro,int nAppID,HWND hwnd,const WCHAR * pwtzPath,int iClient,int iSecurityLevel,int * pmsodsv,WCHAR * wzHelpFile,DWORD dwHelpId,HANDLE hFileDLL,WINBOOL fUserControl)MSOAPI_<msoav.h>
MsoMsoslGetSL(HMSOINST hmsoinst)MSOAPI_<msoav.h>
MsoMsoslSetSL(DWORD msorid,HMSOINST hmsoinst)MSOAPI_<msoav.h>
MSP(hr)<msputils.h>
MSPAddRefHelper(T * pMyThis)template<msputils.h>
MSPAddressAddRef(void) virtual ULONG <mspaddr.h>
MSPAddressRelease(void) virtual ULONG <mspaddr.h>
MSPCallAddRef(void) virtual ULONG <mspcall.h>
MSPCallRelease(void) virtual ULONG <mspcall.h>
MSPLOGDEREGISTER()()
MSPLOGDEREGISTER()()()
MSPLogDeRegister()void NTAPI <msplog.h>
MSPLOGREGISTER(arg)<msplog.h>
MSPLogRegister(LPCTSTR szName)WINBOOL NTAPI <msplog.h>
MSPReleaseHelper(T * pMyThis)template<msputils.h>
MSPROVIDERINIT(HINSTANCE hInstance,LPMALLOC lpMalloc,LPALLOCATEBUFFER lpAllocateBuffer,LPALLOCATEMORE lpAllocateMore,LPFREEBUFFER lpFreeBuffer,ULONG ulFlags,ULONG ulMAPIVer,ULONG * lpulProviderVer,LPMSPROVIDER * lppMSProvider) typedef HRESULT<mapispi.h>
MTAGetMaxThreadCount(DWORD * pdwMaxThreads)virtual HRESULT WINAPI <comsvcs.h>
MTAGetThrottleValue(DWORD * pdwThrottle)virtual HRESULT WINAPI <comsvcs.h>
MTASetMaxThreadCount(DWORD dwMaxThreads)virtual HRESULT WINAPI <comsvcs.h>
MTASetThrottleValue(DWORD dwThrottle)virtual HRESULT WINAPI <comsvcs.h>
MTSCreateActivity(REFIID riid,void ** ppobj) EXTERN_C HRESULT WINAPI <comsvcs.h>
mtsErrAlreadyInstalled(HRESULT)<mtxadmin.h>
mtsErrApplidMatchesClsid(HRESULT)mtsErrPropertyOverflow<mtsadmin.h>
mtsErrAuthenticationLevel(HRESULT)mtsErrNoRegistryCLSID<mtxadmin.h>
mtsErrBadPath(HRESULT)mtsErrPDFReadFail<mtxadmin.h>
mtsErrBadRegistryLibID(HRESULT)mtsErrDllLoadFailed<mtxadmin.h>
mtsErrBadRegistryProgID(HRESULT)mtsErrNoRegistryCLSID<mtxadmin.h>
mtsErrCantCopyFile(HRESULT)mtsErrPackageExists<mtxadmin.h>
mtsErrCLSIDOrIIDMismatch(HRESULT)mtsErrNoRegistryRepair<mtxadmin.h>
mtsErrCompFileBadTLB(HRESULT)mtsErrCompFileClassNotAvail<mtxadmin.h>
mtsErrCompFileClassNotAvail(HRESULT)<mtxadmin.h>
mtsErrCompFileDoesNotExist(HRESULT)<mtxadmin.h>
mtsErrCompFileGetClassObj(HRESULT)mtsErrCompFileDoesNotExist<mtxadmin.h>
mtsErrCompFileLoadDLLFail(HRESULT)mtsErrCompFileDoesNotExist<mtxadmin.h>
mtsErrCompFileNoRegistrar(HRESULT)mtsErrSystemPack<mtxadmin.h>
mtsErrCompFileNotInstallable(HRESULT)mtsErrCompFileClassNotAvail<mtxadmin.h>
mtsErrCompMoveBadDest(HRESULT)mtsErrCompMoveLocked<mtsadmin.h>
mtsErrCompMoveLocked(HRESULT)<mtsadmin.h>
mtsErrCoReqCompInstalled(HRESULT)mtsErrSystemPack<mtxadmin.h>
mtsErrDllLoadFailed(HRESULT)<mtxadmin.h>
mtsErrDllRegisterServer(HRESULT)<mtxadmin.h>
mtsErrInvalidUserids(HRESULT)mtsErrNoTypeLib<mtxadmin.h>
mtsErrKeyMissing(HRESULT)mtsErrObjectErrors<mtxadmin.h>
mtsErrNoRegistryCLSID(HRESULT)<mtxadmin.h>
mtsErrNoServerShare(HRESULT)mtsErrDllRegisterServer<mtxadmin.h>
mtsErrNotChangeable(HRESULT)<mtxadmin.h>
mtsErrNotDeletable(HRESULT)mtsErrNotChangeable<mtxadmin.h>
mtsErrNotInRegistry(HRESULT)mtsErrPropertyOverflow<mtsadmin.h>
mtsErrNoUser(HRESULT)mtsErrNoTypeLib<mtxadmin.h>
mtsErrObjectDoesNotExist(HRESULT)mtsErrRoleDoesNotExist<mtsadmin.h>
mtsErrObjectExists(HRESULT)mtsErrPropSaveFailed<mtsadmin.h>
mtsErrObjectInvalid(HRESULT)mtsErrObjectErrors<mtxadmin.h>
mtsErrObjectParentMissing(HRESULT)mtsErrRoleDoesNotExist<mtsadmin.h>
mtsErrPackageExists(HRESULT)<mtxadmin.h>
mtsErrPackDirNotFound(HRESULT)mtsErrDllLoadFailed<mtxadmin.h>
mtsErrPDFReadFail(HRESULT)<mtxadmin.h>
mtsErrPDFVersion(HRESULT)mtsErrPDFReadFail<mtxadmin.h>
mtsErrPDFWriteFail(HRESULT)mtsErrAlreadyInstalled<mtxadmin.h>
mtsErrPropertyOverflow(HRESULT)<mtsadmin.h>
mtsErrPropSaveFailed(HRESULT)<mtsadmin.h>
mtsErrRegFileCorrupt(HRESULT)mtsErrPropSaveFailed<mtsadmin.h>
mtsErrRegisterTLB(HRESULT)mtsErrCompMoveLocked<mtsadmin.h>
mtsErrRemoteInterface(HRESULT)mtsErrNoRegistryRepair<mtxadmin.h>
mtsErrRoleDoesNotExist(HRESULT)<mtsadmin.h>
mtsErrRoleExists(HRESULT)mtsErrPackageExists<mtxadmin.h>
mtsErrSession(HRESULT)mtsErrNotChangeable<mtxadmin.h>
mtsErrSystemPack(HRESULT)<mtsadmin.h>
mtsErrUserPasswdNotValid(HRESULT)<mtxadmin.h>
MulDiv(int nNumber,int nNumerator,int nDenominator) WINBASEAPI int WINAPI <winbase.h>
MULDIV(x,y,z)<mapiwin.h>
MULTI_GRAPH_EVENT_DATA() <mspcall.h>
MultiByteToWideChar(UINT CodePage,DWORD dwFlags,LPCCH lpMultiByteStr,int cbMultiByte,LPWSTR lpWideCharStr,int cchWideChar) WINBASEAPI int WINAPI <stringapiset.h>
MultinetGetConnectionPerformance(LPNETRESOURCEA lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct) DWORD WINAPI <winnetwk.h>
MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct) DWORD WINAPI <winnetwk.h>
MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct) DWORD WINAPI <winnetwk.h>
Multiply(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status <gdiplusmatrix.h>
Multiply128(LONG64 Multiplier,LONG64 Multiplicand,LONG64 * HighProduct)LONG64 <winnt.h>
MultiplyExtract128(LONG64 Multiplier,LONG64 Multiplicand,BYTE Shift)__CRT_INLINE LONG64 <winnt.h>
MultiplyHigh(LONGLONG Multiplier,LONGLONG Multiplicand)LONGLONG <winnt.h>
MultiplyTransform(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status <gdipluspen.h>
MultiSendRecv(const LPCWSTR pszAction,IBidiRequestContainer * pRequestContainer)virtual HRESULT WINAPI <bidispl.h>
MVI_PROP(tag)<wabdefs.h>
MxdcGetPDEVAdjustment(HANDLE hPrinter,ULONG cbDevMode,const DEVMODE * pDevMode,ULONG cbIn,const VOID * pvIn,ULONG cbPrintPropertiesCollection,PrintPropertiesCollection * pPrintPropertiesCollection) HRESULT WINAPI <mxdc.h>
Name(BSTR * Name)virtual HRESULT WINAPI <wsdxmldom.h>
Name(IMAGE_SYMBOL_EX)	BYTE <wsdxmldom.h>
NAME_ERROR(n)<winldap.h>
NAMEENUMPROCA(LPSTR,LPARAM) typedef WINBOOL<winuser.h>
NAMEENUMPROCW(LPWSTR,LPARAM) typedef WINBOOL<winuser.h>
Navigate(DWORD grfHLNF,LPBC pbc,IBindStatusCallback * pibsc,IHlink * pihlNavigate)virtual HRESULT WINAPI <hlink.h>
Navigate(DWORD grfHLNF,LPBC pibc,IBindStatusCallback * pibsc,IHlinkBrowseContext * pihlbc)virtual HRESULT WINAPI <hlink.h>
Navigate(DWORD grfHLNF,LPCWSTR pwzJumpLocation)virtual HRESULT WINAPI <hlink.h>
NavigateHack(DWORD grfHLNF,LPBC pbc,IBindStatusCallback * pibsc,LPCWSTR pszTargetName,LPCWSTR pszUrl,LPCWSTR pszLocation)virtual HRESULT WINAPI <htiface.h>
NavigateToPidl(LPCITEMIDLIST pidl,DWORD grfHLNF)virtual HRESULT WINAPI <shdeprecated.h>
NcFreeNetconProperties(NETCON_PROPERTIES * pProps) STDAPI_<netcon.h>
NcIsValidConnectionName(PCWSTR pszwName) STDAPI_<netcon.h>
NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE hProvider,NCRYPT_KEY_HANDLE * phKey,LPCWSTR pszAlgId,LPCWSTR pszKeyName,DWORD dwLegacyKeySpec,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptDecrypt(NCRYPT_KEY_HANDLE hKey,PBYTE pbInput,DWORD cbInput,VOID * pPaddingInfo,PBYTE pbOutput,DWORD cbOutput,DWORD * pcbResult,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptDeleteKey(NCRYPT_KEY_HANDLE hKey,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptDeriveKey(NCRYPT_SECRET_HANDLE hSharedSecret,LPCWSTR pwszKDF,NCryptBufferDesc * pParameterList,PBYTE pbDerivedKey,DWORD cbDerivedKey,DWORD * pcbResult,ULONG dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptEncrypt(NCRYPT_KEY_HANDLE hKey,PBYTE pbInput,DWORD cbInput,VOID * pPaddingInfo,PBYTE pbOutput,DWORD cbOutput,DWORD * pcbResult,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE hProvider,DWORD dwAlgOperations,DWORD * pdwAlgCount,NCryptAlgorithmName ** ppAlgList,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptEnumKeys(NCRYPT_PROV_HANDLE hProvider,LPCWSTR pszScope,NCryptKeyName ** ppKeyName,PVOID * ppEnumState,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptEnumStorageProviders(DWORD * pdwProviderCount,NCryptProviderName ** ppProviderList,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptExportKey(NCRYPT_KEY_HANDLE hKey,NCRYPT_KEY_HANDLE hExportKey,LPCWSTR pszBlobType,NCryptBufferDesc * pParameterList,PBYTE pbOutput,DWORD cbOutput,DWORD * pcbResult,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptFinalizeKey(NCRYPT_KEY_HANDLE hKey,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptFreeBuffer(PVOID pvInput) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptFreeObject(NCRYPT_HANDLE hObject) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptGetProperty(NCRYPT_HANDLE hObject,LPCWSTR pszProperty,PBYTE pbOutput,DWORD cbOutput,DWORD * pcbResult,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptImportKey(NCRYPT_PROV_HANDLE hProvider,NCRYPT_KEY_HANDLE hImportKey,LPCWSTR pszBlobType,NCryptBufferDesc * pParameterList,NCRYPT_KEY_HANDLE * phKey,PBYTE pbData,DWORD cbData,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptIsAlgSupported(NCRYPT_PROV_HANDLE hProvider,LPCWSTR pszAlgId,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptIsKeyHandle(NCRYPT_KEY_HANDLE hKey) WINBOOL WINAPI <ncrypt.h>
NCryptKeyDerivation(NCRYPT_KEY_HANDLE hKey,NCryptBufferDesc * pParameterList,PUCHAR pbDerivedKey,DWORD cbDerivedKey,DWORD * pcbResult,ULONG dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE hProvider,HANDLE * phEvent,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptOpenKey(NCRYPT_PROV_HANDLE hProvider,NCRYPT_KEY_HANDLE * phKey,LPCWSTR pszKeyName,DWORD dwLegacyKeySpec,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE * phProvider,LPCWSTR pszProviderName,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptSecretAgreement(NCRYPT_KEY_HANDLE hPrivKey,NCRYPT_KEY_HANDLE hPubKey,NCRYPT_SECRET_HANDLE * phAgreedSecret,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptSetProperty(NCRYPT_HANDLE hObject,LPCWSTR pszProperty,PBYTE pbInput,DWORD cbInput,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptSignHash(NCRYPT_KEY_HANDLE hKey,VOID * pPaddingInfo,PBYTE pbHashValue,DWORD cbHashValue,PBYTE pbSignature,DWORD cbSignature,DWORD * pcbResult,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptTranslateHandle(NCRYPT_PROV_HANDLE * phProvider,NCRYPT_KEY_HANDLE * phKey,HCRYPTPROV hLegacyProv,HCRYPTKEY hLegacyKey,DWORD dwLegacyKeySpec,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NCryptVerifySignature(NCRYPT_KEY_HANDLE hKey,VOID * pPaddingInfo,PBYTE pbHashValue,DWORD cbHashValue,PBYTE pbSignature,DWORD cbSignature,DWORD dwFlags) SECURITY_STATUS WINAPI <ncrypt.h>
NdfCloseIncident(NDFHANDLE handle)HRESULT <ndfapi.h>
NdfCreateConnectivityIncident(NDFHANDLE * handle)HRESULT WINAPI <ndfapi.h>
NdfCreateDNSIncident(LPCWSTR hostname,WORD querytype,NDFHANDLE * handle)HRESULT WINAPI <ndfapi.h>
NdfCreateIncident(LPCWSTR helperClassName,ULONG celt,HELPER_ATTRIBUTE * attributes,NDFHANDLE * handle)HRESULT <ndfapi.h>
NdfCreateSharingIncident(LPCWSTR sharename,NDFHANDLE * handle)HRESULT WINAPI <ndfapi.h>
NdfCreateWebIncident(LPCWSTR url,NDFHANDLE * handle)HRESULT WINAPI <ndfapi.h>
NdfCreateWebIncidentEx(LPCWSTR url,WINBOOL useWinHTTP,LPWSTR moduleName,NDFHANDLE * handle)HRESULT WINAPI <ndfapi.h>
NdfCreateWinSockIncident(SOCKET sock,LPCWSTR host,USHORT port,LPCWSTR appID,SID * userId,NDFHANDLE * handle)HRESULT <ndfapi.h>
NdfExecuteDiagnosis(NDFHANDLE handle,HWND hwnd)HRESULT <ndfapi.h>
NDIS_BUFFER_LINKAGE(Buffer) (Buffer) (Buffer) (Buffer) (Buffer) (Buffer) (Buffer) (Buffer) (Buffer)<ndis.h>
NDIS_BUFFER_LINKAGE(Buffer)<ndis.h>
NDIS_BUFFER_TO_SPAN_PAGES(IN PNDIS_BUFFER Buffer)<ndis.h>
NDIS_GET_ORIGINAL_PACKET(Packet)<ndis.h>
NDIS_GET_PACKET_CANCEL_ID(Packet)<ndis.h>
NDIS_GET_PACKET_HEADER_SIZE(_Packet)<ndis.h>
NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO(_Packet,\\\n_pMediaSpecificInfo,\\\n_pSizeMediaSpecificInfo)                                       _pSizeMediaSpecificInfo<ndis.h>
NDIS_GET_PACKET_PROTOCOL_TYPE(_Packet)<ndis.h>
NDIS_GET_PACKET_STATUS(_Packet)<ndis.h>
NDIS_GET_PACKET_TIME_RECEIVED(_Packet)<ndis.h>
NDIS_GET_PACKET_TIME_SENT(_Packet)<ndis.h>
NDIS_GET_PACKET_TIME_TO_SEND(_Packet)<ndis.h>
NDIS_INIT_FUNCTION(FunctionName)<ndis.h>
NDIS_MAKE_NET_LUID()()()
NDIS_MAKE_NET_LUID(PNLUID, IFTYPE, NLUIDIDX)<ntddndis.h>
NDIS_NDK_PERFORMANCE_COUNTER_MASK(CNTFIELD)<ntddndis.h>
NDIS_OOB_DATA_FROM_PACKET(_Packet)<ndis.h>
NDIS_PACKET_EXTENSION_FROM_PACKET(Packet)<ndis.h>
NDIS_PACKET_FIRST_NDIS_BUFFER(_Packet) ((_Packet)->Private.Head) ((_Packet)->Private.Head) ((_Packet)->Private.Head) ((_Packet)->Private.Head) ((_Packet)->Private.Head) ((_Packet)->Private.Head) ((_Packet)->Private.Head) ((_Packet)->Private.Head)<ndis.h>
NDIS_PACKET_FIRST_NDIS_BUFFER(_Packet)<ndis.h>
NDIS_PACKET_LAST_NDIS_BUFFER(_Packet) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail) ((_Packet)->Private.Tail)<ndis.h>
NDIS_PACKET_LAST_NDIS_BUFFER(_Packet)<ndis.h>
NDIS_PACKET_VALID_COUNTS(_Packet) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts) ((_Packet)->Private.ValidCounts)<ndis.h>
NDIS_PACKET_VALID_COUNTS(_Packet)<ndis.h>
NDIS_PAGEABLE_FUNCTION(FunctionName)<ndis.h>
NDIS_PER_PACKET_INFO_FROM_PACKET()()()
NDIS_PER_PACKET_INFO_FROM_PACKET(Packet, InfoType)<ndis.h>
NDIS_PHYSICAL_ADDRESS_CONST()()()
NDIS_PHYSICAL_ADDRESS_CONST(Low, High)<ndis.h>
NDIS_PROC(struct _NDIS_WORK_ITEM *,PVOID)typedef VOID<ndis.h>
NDIS_SET_ORIGINAL_PACKET()()()
NDIS_SET_ORIGINAL_PACKET(Packet, OriginalPacket)<ndis.h>
NDIS_SET_PACKET_CANCEL_ID()()()
NDIS_SET_PACKET_CANCEL_ID(Packet, CancelId)<ndis.h>
NDIS_SET_PACKET_HEADER_SIZE()()()
NDIS_SET_PACKET_HEADER_SIZE(_Packet, _HdrSize)<ndis.h>
NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO(_Packet,\\\n_MediaSpecificInfo,\\\n_SizeMediaSpecificInfo)                                       _SizeMediaSpecificInfo<ndis.h>
NDIS_SET_PACKET_STATUS()()()
NDIS_SET_PACKET_STATUS(_Packet, _Status)<ndis.h>
NDIS_SET_PACKET_TIME_RECEIVED()()()
NDIS_SET_PACKET_TIME_RECEIVED(_Packet, _TimeReceived)<ndis.h>
NDIS_SET_PACKET_TIME_SENT()()()
NDIS_SET_PACKET_TIME_SENT(_Packet, _TimeSent)<ndis.h>
NDIS_SET_PACKET_TIME_TO_SEND()()()
NDIS_SET_PACKET_TIME_TO_SEND(_Packet, _TimeToSend)<ndis.h>
NDIS_SIZEOF_NDK_CONNECTIONS_REVISION_1(n)<ntddndis.h>
NDIS_SIZEOF_NDK_LOCAL_ENDPOINTS_REVISION_1(n)<ntddndis.h>
NDIS_SWITCH_NIC_AT_ARRAY_INDEX()()()
NDIS_SWITCH_NIC_AT_ARRAY_INDEX(NA, IDX)<ntddndis.h>
NDIS_SWITCH_PORT_AT_ARRAY_INDEX()()()
NDIS_SWITCH_PORT_AT_ARRAY_INDEX(PA, IDX)<ntddndis.h>
NDIS_SWITCH_PORT_PROPERTY_CUSTOM_GET_BUFFER(PPROPC)<ntddndis.h>
NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_GET_NEXT(PEINFO)<ntddndis.h>
NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_GET_PROPERTY(PEINFO)<ntddndis.h>
NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_GET_FIRST_INFO(PEPARM)<ntddndis.h>
NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_GET_PROPERTY(PPARM)<ntddndis.h>
NDIS_SWITCH_PROPERTY_CUSTOM_GET_BUFFER(SWPROPC)<ntddndis.h>
NDIS_SWITCH_PROPERTY_ENUM_INFO_GET_NEXT(SWEINFO)<ntddndis.h>
NDIS_SWITCH_PROPERTY_ENUM_INFO_GET_PROPERTY(SWEINFO)<ntddndis.h>
NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_GET_FIRST_INFO(SWEPARM)<ntddndis.h>
NDIS_SWITCH_PROPERTY_PARAMETERS_GET_PROPERTY(SWPARA)<ntddndis.h>
NDIS_WM_SEND_COMPLETE_HANDLER(IN NDIS_HANDLE MiniportAdapterHandle,IN PVOID Packet,IN NDIS_STATUS Status)typedef VOID<ndis.h>
NdisAcquireReadWriteLock(IN OUT PNDIS_RW_LOCK Lock,IN BOOLEAN fWrite,OUT PLOCK_STATE LockState)<ndis.h>
NdisAcquireSpinLock(_SpinLock) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql) KeAcquireSpinLock(&(_SpinLock)->SpinLock, &(_SpinLock)->OldIrql)<ndis.h>
NdisAdjustBufferLength(Buffer, Length)<ndis.h>
NdisAdjustMdlLength(_Mdl, _Length)<ndis.h>
NdisAllocateBuffer(OUT PNDIS_STATUS Status,OUT PNDIS_BUFFER * Buffer,IN NDIS_HANDLE PoolHandle OPTIONAL,IN PVOID VirtualAddress,IN UINT Length)<ndis.h>
NdisAllocateBufferPool(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE PoolHandle,IN UINT NumberOfDescriptors)<ndis.h>
NdisAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L) ExAllocateFromNPagedLookasideList(_L)<ndis.h>
NdisAllocateGenericObject(PDRIVER_OBJECT DriverObject OPTIONAL,ULONG Tag,USHORT Size)<ndis.h>
NdisAllocateMemory(OUT PVOID * VirtualAddress,IN UINT Length,IN UINT MemoryFlags,IN NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress)<ndis.h>
NdisAllocateMemoryWithTag(OUT PVOID * VirtualAddress,IN UINT Length,IN ULONG Tag)<ndis.h>
NdisAllocatePacket(OUT PNDIS_STATUS Status,OUT PNDIS_PACKET * Packet,IN NDIS_HANDLE PoolHandle)<ndis.h>
NdisAllocatePacketPool(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE PoolHandle,IN UINT NumberOfDescriptors,IN UINT ProtocolReservedLength)<ndis.h>
NdisAllocatePacketPoolEx(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE PoolHandle,IN UINT NumberOfDescriptors,IN UINT NumberOfOverflowDescriptors,IN UINT ProtocolReservedLength)<ndis.h>
NdisAllocateSpinLock(_SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock) KeInitializeSpinLock(&(_SpinLock)->SpinLock)<ndis.h>
NdisAnsiStringToUnicodeString(_us, _as) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE) RtlAnsiStringToUnicodeString(_us, _as, FALSE)<ndis.h>
NdisCancelSendPackets(IN NDIS_HANDLE NdisBindingHandle,IN PVOID CancelId)<ndis.h>
NdisCancelTimer(PNDIS_TIMER Timer,PBOOLEAN TimerCancelled)<ndis.h>
NdisChainBufferAtBack(Packet,\\\nBuffer)                         Buffer<ndis.h>
NdisChainBufferAtFront(Packet,\\\nBuffer)                          Buffer<ndis.h>
NdisClAddParty(IN NDIS_HANDLE NdisVcHandle,IN NDIS_HANDLE ProtocolPartyContext,IN OUT PCO_CALL_PARAMETERS CallParameters,OUT PNDIS_HANDLE NdisPartyHandle)<ndis.h>
NdisClCloseAddressFamily(IN NDIS_HANDLE NdisAfHandle)<ndis.h>
NdisClCloseCall(IN NDIS_HANDLE NdisVcHandle,IN NDIS_HANDLE NdisPartyHandle OPTIONAL,IN PVOID Buffer OPTIONAL,IN UINT Size)<ndis.h>
NdisClDeregisterSap(IN NDIS_HANDLE NdisSapHandle)<ndis.h>
NdisClDropParty(IN NDIS_HANDLE NdisPartyHandle,IN PVOID Buffer OPTIONAL,IN UINT Size)<ndis.h>
NdisClearPacketFlags(Packet, Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags) (Packet)->Private.Flags &= ~(Flags)<ndis.h>
NdisClIncomingCallComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisClMakeCall(IN NDIS_HANDLE NdisVcHandle,IN OUT PCO_CALL_PARAMETERS CallParameters,IN NDIS_HANDLE ProtocolPartyContext OPTIONAL,OUT PNDIS_HANDLE NdisPartyHandle OPTIONAL)<ndis.h>
NdisClModifyCallQoS(IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisClOpenAddressFamily(IN NDIS_HANDLE NdisBindingHandle,IN PCO_ADDRESS_FAMILY AddressFamily,IN NDIS_HANDLE ProtocolAfContext,IN PNDIS_CLIENT_CHARACTERISTICS ClCharacteristics,IN UINT SizeOfClCharacteristics,OUT PNDIS_HANDLE NdisAfHandle)<ndis.h>
NdisCloseAdapter(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle)<ndis.h>
NdisCloseConfiguration(IN NDIS_HANDLE ConfigurationHandle)<ndis.h>
NdisCloseFile(IN NDIS_HANDLE FileHandle)<ndis.h>
NdisClRegisterSap(IN NDIS_HANDLE NdisAfHandle,IN NDIS_HANDLE ProtocolSapContext,IN PCO_SAP Sap,OUT PNDIS_HANDLE NdisSapHandle)<ndis.h>
NdisCmActivateVc(IN NDIS_HANDLE NdisVcHandle,IN OUT PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisCmAddPartyComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisPartyHandle,IN NDIS_HANDLE CallMgrPartyContext OPTIONAL,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisCmCloseAddressFamilyComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisAfHandle)<ndis.h>
NdisCmCloseCallComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle,IN NDIS_HANDLE NdisPartyHandle OPTIONAL)<ndis.h>
NdisCmDeactivateVc(IN NDIS_HANDLE NdisVcHandle)<ndis.h>
NdisCmDeregisterSapComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisSapHandle)<ndis.h>
NdisCmDispatchCallConnected(IN NDIS_HANDLE NdisVcHandle)<ndis.h>
NdisCmDispatchIncomingCall(IN NDIS_HANDLE NdisSapHandle,IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisCmDispatchIncomingCallQoSChange(IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisCmDispatchIncomingCloseCall(IN NDIS_STATUS CloseStatus,IN NDIS_HANDLE NdisVcHandle,IN PVOID Buffer OPTIONAL,IN UINT Size)<ndis.h>
NdisCmDispatchIncomingDropParty(IN NDIS_STATUS DropStatus,IN NDIS_HANDLE NdisPartyHandle,IN PVOID Buffer OPTIONAL,IN UINT Size)<ndis.h>
NdisCmDropPartyComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisPartyHandle)<ndis.h>
NdisCmMakeCallComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle,IN NDIS_HANDLE NdisPartyHandle OPTIONAL,IN NDIS_HANDLE CallMgrPartyContext OPTIONAL,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisCmModifyCallQoSComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisCmOpenAddressFamilyComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisAfHandle,IN NDIS_HANDLE CallMgrAfContext)<ndis.h>
NdisCmRegisterAddressFamily(IN NDIS_HANDLE NdisBindingHandle,IN PCO_ADDRESS_FAMILY AddressFamily,IN PNDIS_CALL_MANAGER_CHARACTERISTICS CmCharacteristics,IN UINT SizeOfCmCharacteristics)<ndis.h>
NdisCmRegisterSapComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisSapHandle,IN NDIS_HANDLE CallMgrSapContext)<ndis.h>
NdisCoCreateVc(IN NDIS_HANDLE NdisBindingHandle,IN NDIS_HANDLE NdisAfHandle OPTIONAL,IN NDIS_HANDLE ProtocolVcContext,IN OUT PNDIS_HANDLE NdisVcHandle)<ndis.h>
NdisCoDeleteVc(IN NDIS_HANDLE NdisVcHandle)<ndis.h>
NdisCompleteBindAdapter(IN NDIS_HANDLE BindAdapterContext,IN NDIS_STATUS Status,IN NDIS_STATUS OpenStatus)<ndis.h>
NdisCompletePnPEvent(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle,IN PNET_PNP_EVENT NetPnPEvent)<ndis.h>
NdisCompleteUnbindAdapter(IN NDIS_HANDLE UnbindAdapterContext,IN NDIS_STATUS Status)<ndis.h>
NdisCopyBuffer(OUT PNDIS_STATUS Status,OUT PNDIS_BUFFER * Buffer,IN NDIS_HANDLE PoolHandle,IN PVOID MemoryDescriptor,IN UINT Offset,IN UINT Length)<ndis.h>
NdisCopyFromPacketToPacket(IN PNDIS_PACKET Destination,IN UINT DestinationOffset,IN UINT BytesToCopy,IN PNDIS_PACKET Source,IN UINT SourceOffset,OUT PUINT BytesCopied)<ndis.h>
NdisCopyFromPacketToPacketSafe(IN PNDIS_PACKET Destination,IN UINT DestinationOffset,IN UINT BytesToCopy,IN PNDIS_PACKET Source,IN UINT SourceOffset,OUT PUINT BytesCopied,IN MM_PAGE_PRIORITY Priority)<ndis.h>
NdisCopyLookaheadData(Destination, Source, Length, MacOptions)<ndis.h>
NdisCoRequest(IN NDIS_HANDLE NdisBindingHandle,IN NDIS_HANDLE NdisAfHandle OPTIONAL,IN NDIS_HANDLE NdisVcHandle OPTIONAL,IN NDIS_HANDLE NdisPartyHandle OPTIONAL,IN OUT PNDIS_REQUEST NdisRequest)<ndis.h>
NdisCoRequestComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisAfHandle,IN NDIS_HANDLE NdisVcHandle OPTIONAL,IN NDIS_HANDLE NdisPartyHandle OPTIONAL,IN PNDIS_REQUEST NdisRequest)<ndis.h>
NdisCoSendPackets(IN NDIS_HANDLE NdisVcHandle,IN PPNDIS_PACKET PacketArray,IN UINT NumberOfPackets)<ndis.h>
NdisCreateLookaheadBufferFromSharedMemory(_S, _L, _B) ((*(_B)) = (_S)) ((*(_B)) = (_S)) ((*(_B)) = (_S)) ((*(_B)) = (_S)) ((*(_B)) = (_S)) ((*(_B)) = (_S)) ((*(_B)) = (_S)) ((*(_B)) = (_S))<ndis.h>
NdisDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L) ExDeleteNPagedLookasideList(_L)<ndis.h>
NdisDeregisterProtocol(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisProtocolHandle)<ndis.h>
NdisDeregisterTdiCallBack(VOID)<ndis.h>
NdisDestroyLookaheadBufferFromSharedMemory(IN PVOID pLookaheadBuffer)<ndis.h>
NdisDprAcquireReadWriteLock(IN PNDIS_RW_LOCK Lock,IN BOOLEAN fWrite,IN PLOCK_STATE LockState)<ndis.h>
NdisDprAcquireSpinLock(_SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock) KeAcquireSpinLockAtDpcLevel(&(_SpinLock)->SpinLock)<ndis.h>
NdisDprAllocatePacket(OUT PNDIS_STATUS Status,OUT PNDIS_PACKET * Packet,IN NDIS_HANDLE PoolHandle)<ndis.h>
NdisDprAllocatePacketNonInterlocked(OUT PNDIS_STATUS Status,OUT PNDIS_PACKET * Packet,IN NDIS_HANDLE PoolHandle)<ndis.h>
NdisDprFreePacket(IN PNDIS_PACKET Packet)<ndis.h>
NdisDprFreePacketNonInterlocked(IN PNDIS_PACKET Packet)<ndis.h>
NdisDprReleaseReadWriteLock(IN PNDIS_RW_LOCK Lock,IN PLOCK_STATE LockState)<ndis.h>
NdisDprReleaseSpinLock(_SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock) KeReleaseSpinLockFromDpcLevel(&(_SpinLock)->SpinLock)<ndis.h>
NdisEqualMemory(Source1, Source2, Length)<ndis.h>
NdisFillMemory(Destination, Length, Fill)<ndis.h>
NdisFlushBuffer(Buffer,WriteToDevice)<ndis.h>
NdisFreeBufferPool(IN NDIS_HANDLE PoolHandle)<ndis.h>
NdisFreeDmaChannel(IN PNDIS_HANDLE NdisDmaHandle)<ndis.h>
NdisFreeGenericObject(IN PNDIS_GENERIC_OBJECT NdisObject)<ndis.h>
NdisFreeMemory(IN PVOID VirtualAddress,IN UINT Length,IN UINT MemoryFlags)<ndis.h>
NdisFreeMemoryWithTag(IN PVOID VirtualAddress,IN ULONG Tag)<ndis.h>
NdisFreePacket(IN PNDIS_PACKET Packet)<ndis.h>
NdisFreePacketPool(IN NDIS_HANDLE PoolHandle)<ndis.h>
NdisFreeSpinLock(_SpinLock)<ndis.h>
NdisFreeString(_s) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0) NdisFreeMemory((_s).Buffer, (_s).MaximumLength, 0)<ndis.h>
NdisFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E) ExFreeToNPagedLookasideList(_L, _E)<ndis.h>
NdisGeneratePartialCancelId(VOID)<ndis.h>
NdisGetBufferPhysicalArraySize(Buffer, ArraySize)<ndis.h>
NdisGetCurrentProcessorCounts(OUT PULONG pIdleCount,OUT PULONG pKernelAndUser,OUT PULONG pIndex)<ndis.h>
NdisGetCurrentProcessorCpuUsage(OUT PULONG pCpuUsage)<ndis.h>
NdisGetDriverHandle(IN PNDIS_HANDLE NdisBindingHandle,OUT PNDIS_HANDLE NdisDriverHandle)<ndis.h>
NdisGetFirstBufferFromPacket(IN PNDIS_PACKET _Packet,OUT PNDIS_BUFFER * _FirstBuffer,OUT PVOID * _FirstBufferVA,OUT PUINT _FirstBufferLength,OUT PUINT _TotalBufferLength)<ndis.h>
NdisGetFirstBufferFromPacketSafe(_Packet,\\\n_FirstBuffer,\\\n_FirstBufferVA,\\\n_FirstBufferLength,\\\n_TotalBufferLength,\\\n_Priority)                                _Priority<ndis.h>
NdisGetNextBuffer(CurrentBuffer,\\\nNextBuffer)                     NextBuffer<ndis.h>
NdisGetPacketCancelId(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet) NDIS_GET_PACKET_CANCEL_ID(_Packet)<ndis.h>
NdisGetPacketFlags(Packet) (Packet) (Packet) (Packet) (Packet) (Packet) (Packet) (Packet) (Packet)<ndis.h>
NdisGetPhysicalAddressHigh(PhysicalAddress)<ndis.h>
NdisGetPhysicalAddressLow(PhysicalAddress)<ndis.h>
NdisGetPoolFromPacket(IN PNDIS_PACKET Packet)<ndis.h>
NdisGetReceivedPacket(IN PNDIS_HANDLE NdisBindingHandle,IN PNDIS_HANDLE MacContext)<ndis.h>
NdisGetRoutineAddress(PNDIS_STRING NdisRoutineName)<ndis.h>
NdisGetSharedDataAlignment(VOID)<ndis.h>
NdisGetSystemUpTime(OUT PULONG pSystemUpTime)<ndis.h>
NdisGetVersion(VOID)<ndis.h>
NdisIMAssociateMiniport(IN NDIS_HANDLE DriverHandle,IN NDIS_HANDLE ProtocolHandle)<ndis.h>
NdisIMCancelInitializeDeviceInstance(IN NDIS_HANDLE DriverHandle,IN PNDIS_STRING DeviceInstance)<ndis.h>
NdisIMCopySendCompletePerPacketInfo(IN PNDIS_PACKET DstPacket,IN PNDIS_PACKET SrcPacket)<ndis.h>
NdisIMCopySendPerPacketInfo(IN PNDIS_PACKET DstPacket,IN PNDIS_PACKET SrcPacket)<ndis.h>
NdisIMDeInitializeDeviceInstance(IN NDIS_HANDLE NdisMiniportHandle)<ndis.h>
NdisIMDeregisterLayeredMiniport(IN NDIS_HANDLE DriverHandle)<ndis.h>
NdisIMGetBindingContext(IN NDIS_HANDLE NdisBindingHandle)<ndis.h>
NdisIMGetCurrentPacketStack(IN PNDIS_PACKET Packet,OUT BOOLEAN * StacksRemaining)<ndis.h>
NdisIMGetDeviceContext(IN NDIS_HANDLE MiniportAdapterHandle)<ndis.h>
NdisIMInitializeDeviceInstance(DriverHandle, DeviceInstance)<ndis.h>
NdisIMInitializeDeviceInstanceEx(IN NDIS_HANDLE DriverHandle,IN PNDIS_STRING DriverInstance,IN NDIS_HANDLE DeviceContext OPTIONAL)<ndis.h>
NdisImmediateReadSharedMemory(IN NDIS_HANDLE WrapperConfigurationContext,IN ULONG SharedMemoryAddress,OUT PUCHAR Buffer,IN ULONG Length)<ndis.h>
NdisImmediateWriteSharedMemory(IN NDIS_HANDLE WrapperConfigurationContext,IN ULONG SharedMemoryAddress,IN PUCHAR Buffer,IN ULONG Length)<ndis.h>
NdisIMRegisterLayeredMiniport(IN NDIS_HANDLE NdisWrapperHandle,IN PNDIS_MINIPORT_CHARACTERISTICS MiniportCharacteristics,IN UINT CharacteristicsLength,OUT PNDIS_HANDLE DriverHandle)<ndis.h>
NdisInitializeEvent(OUT PNDIS_EVENT Event)<ndis.h>
NdisInitializeNPagedLookasideList(_L, _AR, _FR, _Fl, _S, _T, _D)<ndis.h>
NdisInitializeReadWriteLock(OUT PNDIS_RW_LOCK Lock)<ndis.h>
NdisInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead) ExInitializeSListHead(SListHead)<ndis.h>
NdisInitializeString(OUT PNDIS_STRING Destination,IN PUCHAR Source)<ndis.h>
NdisInitializeTimer(PNDIS_TIMER Timer,PNDIS_TIMER_FUNCTION TimerFunction,PVOID FunctionContext)<ndis.h>
NdisInitializeWorkItem(_WI_, _R_, _C_)<ndis.h>
NdisInitializeWrapper(OUT PNDIS_HANDLE NdisWrapperHandle,IN PVOID SystemSpecific1,IN PVOID SystemSpecific2,IN PVOID SystemSpecific3)<ndis.h>
NdisInitUnicodeString(IN OUT PNDIS_STRING DestinationString,IN PCWSTR SourceString)<ndis.h>
NdisInterlockedAddUlong(_Addend, _Increment, _SpinLock)<ndis.h>
NdisInterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend) InterlockedDecrement(Addend)<ndis.h>
NdisInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead) ExInterlockedFlushSList(SListHead)<ndis.h>
NdisInterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend) InterlockedIncrement(Addend)<ndis.h>
NdisInterlockedInsertHeadList(_ListHead, _ListEntry, _SpinLock)<ndis.h>
NdisInterlockedInsertTailList(_ListHead, _ListEntry, _SpinLock)<ndis.h>
NdisInterlockedPopEntryList(ListHead, Lock)<ndis.h>
NdisInterlockedPopEntrySList(SListHead, Lock)<ndis.h>
NdisInterlockedPushEntryList(ListHead, ListEntry, Lock)<ndis.h>
NdisInterlockedPushEntrySList(SListHead, SListEntry, Lock)<ndis.h>
NdisInterlockedRemoveHeadList(_ListHead, _SpinLock)<ndis.h>
NdisMAllocateMapRegisters(IN NDIS_HANDLE MiniportAdapterHandle,IN UINT DmaChannel,IN NDIS_DMA_SIZE DmaSize,IN ULONG PhysicalMapRegistersNeeded,IN ULONG MaximumPhysicalMapping)<ndis.h>
NdisMAllocateSharedMemory(IN NDIS_HANDLE MiniportAdapterHandle,IN ULONG Length,IN BOOLEAN Cached,OUT PVOID * VirtualAddress,OUT PNDIS_PHYSICAL_ADDRESS PhysicalAddress)<ndis.h>
NdisMAllocateSharedMemoryAsync(IN NDIS_HANDLE MiniportAdapterHandle,IN ULONG Length,IN BOOLEAN Cached,IN PVOID Context)<ndis.h>
NdisMapFile(OUT PNDIS_STATUS Status,OUT PVOID * MappedBuffer,IN NDIS_HANDLE FileHandle)<ndis.h>
NdisMArcIndicateReceive(MiniportAdapterHandle,\\\nHeaderBuffer,\\\nDataBuffer,\\\nLength)                           Length<ndis.h>
NdisMArcIndicateReceiveComplete(MiniportAdapterHandle)<ndis.h>
NdisMCancelTimer(IN PNDIS_MINIPORT_TIMER Timer,OUT PBOOLEAN TimerCancelled)<ndis.h>
NdisMCloseLog(IN NDIS_HANDLE LogHandle)<ndis.h>
NdisMCmActivateVc(IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisMCmCreateVc(IN NDIS_HANDLE MiniportAdapterHandle,IN NDIS_HANDLE NdisAfHandle,IN NDIS_HANDLE MiniportVcContext,OUT PNDIS_HANDLE NdisVcHandle)<ndis.h>
NdisMCmDeactivateVc(IN NDIS_HANDLE NdisVcHandle)<ndis.h>
NdisMCmDeleteVc(IN NDIS_HANDLE NdisVcHandle)<ndis.h>
NdisMCmRegisterAddressFamily(IN NDIS_HANDLE MiniportAdapterHandle,IN PCO_ADDRESS_FAMILY AddressFamily,IN PNDIS_CALL_MANAGER_CHARACTERISTICS CmCharacteristics,IN UINT SizeOfCmCharacteristics)<ndis.h>
NdisMCmRequest(IN NDIS_HANDLE NdisAfHandle,IN NDIS_HANDLE NdisVcHandle OPTIONAL,IN NDIS_HANDLE NdisPartyHandle OPTIONAL,IN OUT PNDIS_REQUEST NdisRequest)<ndis.h>
NdisMCoActivateVcComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle,IN PCO_CALL_PARAMETERS CallParameters)<ndis.h>
NdisMCoDeactivateVcComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle)<ndis.h>
NdisMCoIndicateReceivePacket(IN NDIS_HANDLE NdisVcHandle,IN PPNDIS_PACKET PacketArray,IN UINT NumberOfPackets)<ndis.h>
NdisMCoIndicateStatus(IN NDIS_HANDLE MiniportAdapterHandle,IN NDIS_HANDLE NdisVcHandle OPTIONAL,IN NDIS_STATUS GeneralStatus,IN PVOID StatusBuffer OPTIONAL,IN ULONG StatusBufferSize)<ndis.h>
NdisMCoReceiveComplete(IN NDIS_HANDLE MiniportAdapterHandle)<ndis.h>
NdisMCoRequestComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE MiniportAdapterHandle,IN PNDIS_REQUEST Request)<ndis.h>
NdisMCoSendComplete(IN NDIS_STATUS Status,IN NDIS_HANDLE NdisVcHandle,IN PNDIS_PACKET Packet)<ndis.h>
NdisMCreateLog(IN NDIS_HANDLE MiniportAdapterHandle,IN UINT Size,OUT PNDIS_HANDLE LogHandle)<ndis.h>
NdisMDeregisterAdapterShutdownHandler(IN NDIS_HANDLE MiniportHandle)<ndis.h>
NdisMDeregisterDevice(IN NDIS_HANDLE NdisDeviceHandle)<ndis.h>
NdisMDeregisterInterrupt(IN PNDIS_MINIPORT_INTERRUPT Interrupt)<ndis.h>
NdisMDeregisterIoPortRange(IN NDIS_HANDLE MiniportAdapterHandle,IN UINT InitialPort,IN UINT NumberOfPorts,IN PVOID PortOffset)<ndis.h>
NdisMEthIndicateReceive(MiniportAdapterHandle,\\\nMiniportReceiveContext,\\\nHeaderBuffer,\\\nHeaderBufferSize,\\\nLookaheadBuffer,\\\nLookaheadBufferSize,\\\nPacketSize)                           PacketSize<ndis.h>
NdisMEthIndicateReceiveComplete(MiniportAdapterHandle)<ndis.h>
NdisMFddiIndicateReceive(MiniportAdapterHandle,\\\nMiniportReceiveContext,\\\nHeaderBuffer,\\\nHeaderBufferSize,\\\nLookaheadBuffer,\\\nLookaheadBufferSize,\\\nPacketSize)                            PacketSize<ndis.h>
NdisMFddiIndicateReceiveComplete(MiniportAdapterHandle)<ndis.h>
NdisMFlushLog(IN NDIS_HANDLE LogHandle)<ndis.h>
NdisMFreeMapRegisters(IN NDIS_HANDLE MiniportAdapterHandle)<ndis.h>
NdisMFreeSharedMemory(IN NDIS_HANDLE MiniportAdapterHandle,IN ULONG Length,IN BOOLEAN Cached,IN PVOID VirtualAddress,IN NDIS_PHYSICAL_ADDRESS PhysicalAddress)<ndis.h>
NdisMGetDeviceProperty(IN NDIS_HANDLE MiniportAdapterHandle,IN OUT PDEVICE_OBJECT * PhysicalDeviceObject OPTIONAL,IN OUT PDEVICE_OBJECT * FunctionalDeviceObject OPTIONAL,IN OUT PDEVICE_OBJECT * NextDeviceObject OPTIONAL,IN OUT PCM_RESOURCE_LIST * AllocatedResources OPTIONAL,IN OUT PCM_RESOURCE_LIST * AllocatedResourcesTranslated OPTIONAL)<ndis.h>
NdisMIndicateReceivePacket(MiniportAdapterHandle,\\\nReceivePackets,NumberOfPackets) ReceivePackets<ndis.h>
NdisMIndicateStatus(MiniportAdapterHandle,\\\nGeneralStatus,StatusBuffer,StatusBufferSize)  GeneralStatus<ndis.h>
NdisMIndicateStatusComplete(MiniportAdapterHandle)<ndis.h>
NdisMInitializeScatterGatherDma(IN NDIS_HANDLE MiniportAdapterHandle,IN BOOLEAN Dma64BitAddresses,IN ULONG MaximumPhysicalMapping)<ndis.h>
NdisMInitializeTimer(IN OUT PNDIS_MINIPORT_TIMER Timer,IN NDIS_HANDLE MiniportAdapterHandle,IN PNDIS_TIMER_FUNCTION TimerFunction,IN PVOID FunctionContext)<ndis.h>
NdisMInitializeWrapper(NdisWrapperHandle,\\\nSystemSpecific1,\\\nSystemSpecific2,\\\nSystemSpecific3)                          SystemSpecific3<ndis.h>
NdisMMapIoSpace(OUT PVOID * VirtualAddress,IN NDIS_HANDLE MiniportAdapterHandle,IN NDIS_PHYSICAL_ADDRESS PhysicalAddress,IN UINT Length)<ndis.h>
NdisMoveFromMappedMemory(Destination, Source, Length)<ndis.h>
NdisMoveMappedMemory(Destination, Source, Length)<ndis.h>
NdisMoveMemory(Destination, Source, Length)<ndis.h>
NdisMoveToMappedMemory(Destination, Source, Length)<ndis.h>
NdisMPromoteMiniport(IN NDIS_HANDLE MiniportAdapterHandle)<ndis.h>
NdisMQueryAdapterInstanceName(OUT PNDIS_STRING AdapterInstanceName,IN NDIS_HANDLE MiniportAdapterHandle)<ndis.h>
NdisMQueryAdapterResources(OUT PNDIS_STATUS Status,IN NDIS_HANDLE WrapperConfigurationContext,OUT PNDIS_RESOURCE_LIST ResourceList,IN OUT PUINT BufferSize)<ndis.h>
NdisMQueryInformationComplete(MiniportAdapterHandle, Status)<ndis.h>
NdisMRegisterAdapterShutdownHandler(IN NDIS_HANDLE MiniportHandle,IN PVOID ShutdownContext,IN ADAPTER_SHUTDOWN_HANDLER ShutdownHandler)<ndis.h>
NdisMRegisterDevice(IN NDIS_HANDLE NdisWrapperHandle,IN PNDIS_STRING DeviceName,IN PNDIS_STRING SymbolicName,IN PDRIVER_DISPATCH MajorFunctions[],OUT PDEVICE_OBJECT * pDeviceObject,OUT NDIS_HANDLE * NdisDeviceHandle)<ndis.h>
NdisMRegisterInterrupt(OUT PNDIS_MINIPORT_INTERRUPT Interrupt,IN NDIS_HANDLE MiniportAdapterHandle,IN UINT InterruptVector,IN UINT InterruptLevel,IN BOOLEAN RequestIsr,IN BOOLEAN SharedInterrupt,IN NDIS_INTERRUPT_MODE InterruptMode)<ndis.h>
NdisMRegisterIoPortRange(OUT PVOID * PortOffset,IN NDIS_HANDLE MiniportAdapterHandle,IN UINT InitialPort,IN UINT NumberOfPorts)<ndis.h>
NdisMRegisterMiniport(IN NDIS_HANDLE NdisWrapperHandle,IN PNDIS_MINIPORT_CHARACTERISTICS MiniportCharacteristics,IN UINT CharacteristicsLength)<ndis.h>
NdisMRegisterUnloadHandler(IN NDIS_HANDLE NdisWrapperHandle,IN PDRIVER_UNLOAD UnloadHandler)<ndis.h>
NdisMRemoveMiniport(IN NDIS_HANDLE MiniportAdapterHandle)<ndis.h>
NdisMResetComplete(MiniportAdapterHandle,\\\nStatus,\\\nAddressingReset)                      AddressingReset<ndis.h>
NdisMSendComplete(MiniportAdapterHandle,\\\nPacket,\\\nStatus)                     Status<ndis.h>
NdisMSetAttributes(MiniportAdapterHandle,\\\nMiniportAdapterContext,\\\nBusMaster,\\\nAdapterType)                      AdapterType<ndis.h>
NdisMSetAttributesEx(IN NDIS_HANDLE MiniportAdapterHandle,IN NDIS_HANDLE MiniportAdapterContext,IN UINT CheckForHangTimeInSeconds OPTIONAL,IN ULONG AttributeFlags,IN NDIS_INTERFACE_TYPE AdapterType)<ndis.h>
NdisMSetInformationComplete(MiniportAdapterHandle,\\\nStatus)                               Status<ndis.h>
NdisMSetMiniportSecondary(IN NDIS_HANDLE MiniportAdapterHandle,IN NDIS_HANDLE PrimaryMiniportAdapterHandle)<ndis.h>
NdisMSetPeriodicTimer(IN PNDIS_MINIPORT_TIMER Timer,IN UINT MillisecondPeriod)<ndis.h>
NdisMSetTimer(IN PNDIS_MINIPORT_TIMER Timer,IN UINT MillisecondsToDelay)<ndis.h>
NdisMSleep(IN ULONG MicrosecondsToSleep)<ndis.h>
NdisMSynchronizeWithInterrupt(IN PNDIS_MINIPORT_INTERRUPT Interrupt,IN PVOID SynchronizeFunction,IN PVOID SynchronizeContext)<ndis.h>
NdisMTransferDataComplete(MiniportAdapterHandle,\\\nPacket,\\\nStatus,\\\nBytesTransferred)                             BytesTransferred<ndis.h>
NdisMTrIndicateReceive(MiniportAdapterHandle,\\\nMiniportReceiveContext,\\\nHeaderBuffer,\\\nHeaderBufferSize,\\\nLookaheadBuffer,\\\nLookaheadBufferSize,\\\nPacketSize)                          PacketSize<ndis.h>
NdisMTrIndicateReceiveComplete(MiniportAdapterHandle)<ndis.h>
NdisMUnmapIoSpace(IN NDIS_HANDLE MiniportAdapterHandle,IN PVOID VirtualAddress,IN UINT Length)<ndis.h>
NdisMUpdateSharedMemory(_H, _L, _V, _P)<ndis.h>
NdisMWanIndicateReceive(OUT PNDIS_STATUS Status,IN NDIS_HANDLE MiniportAdapterHandle,IN NDIS_HANDLE NdisLinkContext,IN PUCHAR PacketBuffer,IN UINT PacketSize)<ndis.h>
NdisMWanIndicateReceiveComplete(IN NDIS_HANDLE MiniportAdapterHandle IN NDIS_HANDLE NdisLinkContext)<ndis.h>
NdisMWanInitializeWrapper(NdisWrapperHandle,\\\nSystemSpecific1,\\\nSystemSpecific2,\\\nSystemSpecific3)                             SystemSpecific3<ndiswan.h>
NdisMWanSendComplete(IN NDIS_HANDLE MiniportAdapterHandle,IN PNDIS_WAN_PACKET Packet,IN NDIS_STATUS Status)<ndis.h>
NdisMWriteLogData(IN NDIS_HANDLE LogHandle,IN PVOID LogBuffer,IN UINT LogBufferSize)<ndis.h>
NdisOpenAdapter(OUT PNDIS_STATUS Status,OUT PNDIS_STATUS OpenErrorStatus,OUT PNDIS_HANDLE NdisBindingHandle,OUT PUINT SelectedMediumIndex,IN PNDIS_MEDIUM MediumArray,IN UINT MediumArraySize,IN NDIS_HANDLE NdisProtocolHandle,IN NDIS_HANDLE ProtocolBindingContext,IN PNDIS_STRING AdapterName,IN UINT OpenOptions,IN PSTRING AddressingInformation OPTIONAL)<ndis.h>
NdisOpenConfiguration(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE ConfigurationHandle,IN NDIS_HANDLE WrapperConfigurationContext)<ndis.h>
NdisOpenConfigurationKeyByIndex(OUT PNDIS_STATUS Status,IN NDIS_HANDLE ConfigurationHandle,IN ULONG Index,OUT PNDIS_STRING KeyName,OUT PNDIS_HANDLE KeyHandle)<ndis.h>
NdisOpenConfigurationKeyByName(OUT PNDIS_STATUS Status,IN NDIS_HANDLE ConfigurationHandle,IN PNDIS_STRING SubKeyName,OUT PNDIS_HANDLE SubKeyHandle)<ndis.h>
NdisOpenFile(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE FileHandle,OUT PUINT FileLength,IN PNDIS_STRING FileName,IN NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress)<ndis.h>
NdisOpenProtocolConfiguration(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE ConfigurationHandle,IN PNDIS_STRING ProtocolSection)<ndis.h>
NdisPacketPoolUsage(IN NDIS_HANDLE PoolHandle)<ndis.h>
NdisPacketSize(IN UINT ProtocolReservedSize)<ndis.h>
NdisPciAssignResources(IN NDIS_HANDLE NdisMacHandle,IN NDIS_HANDLE NdisWrapperHandle,IN NDIS_HANDLE WrapperConfigurationContext,IN ULONG SlotNumber,OUT PNDIS_RESOURCE_LIST * AssignedResources)<ndis.h>
NdisPrintString(_s) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer) DbgPrint("%ls", (_s).Buffer)<ndis.h>
NdisQueryAdapterInstanceName(OUT PNDIS_STRING AdapterInstanceName,IN NDIS_HANDLE NdisBindingHandle)<ndis.h>
NdisQueryBindInstanceName(OUT PNDIS_STRING pAdapterInstanceName,IN NDIS_HANDLE BindingContext)<ndis.h>
NdisQueryBuffer(_Buffer, _VirtualAddress, _Length)<ndis.h>
NdisQueryBufferOffset(_Buffer, _Offset, _Length)<ndis.h>
NdisQueryBufferSafe(_Buffer, _VirtualAddress, _Length, _Priority)<ndis.h>
NdisQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead) ExQueryDepthSList(SListHead)<ndis.h>
NdisQueryPacket(IN PNDIS_PACKET Packet,OUT PUINT PhysicalBufferCount OPTIONAL,OUT PUINT BufferCount OPTIONAL,OUT PNDIS_BUFFER * FirstBuffer OPTIONAL,OUT PUINT TotalPacketLength OPTIONAL)<ndis.h>
NdisQueryPacketLength(_Packet,\\\n_TotalPacketLength)                         _TotalPacketLength<ndis.h>
NdisQueryPendingIOCount(IN PVOID NdisBindingHandle,OUT PULONG IoCount)<ndis.h>
NdisQuerySendFlags(_Packet,_Flags) *(_Flags) = (_Packet) *(_Flags) = (_Packet) *(_Flags) = (_Packet) *(_Flags) = (_Packet) *(_Flags) = (_Packet) *(_Flags) = (_Packet) *(_Flags) = (_Packet) *(_Flags) = (_Packet)<ndis.h>
NdisRawReadPortBufferUchar(Port, Buffer, Length)<ndis.h>
NdisRawReadPortBufferUlong(Port, Buffer, Length)<ndis.h>
NdisRawReadPortBufferUshort(Port, Buffer, Length)<ndis.h>
NdisRawReadPortUchar(Port, Data)<ndis.h>
NdisRawReadPortUlong(Port, Data)<ndis.h>
NdisRawReadPortUshort(Port, Data)<ndis.h>
NdisRawWritePortBufferUchar(Port, Buffer, Length)<ndis.h>
NdisRawWritePortBufferUlong(Port, Buffer, Length)<ndis.h>
NdisRawWritePortBufferUshort(Port, Buffer, Length)<ndis.h>
NdisRawWritePortUchar(Port, Data)<ndis.h>
NdisRawWritePortUlong(Port, Data)<ndis.h>
NdisRawWritePortUshort(Port, Data)<ndis.h>
NdisReadConfiguration(OUT PNDIS_STATUS Status,OUT PNDIS_CONFIGURATION_PARAMETER * ParameterValue,IN NDIS_HANDLE ConfigurationHandle,IN PNDIS_STRING Keyword,IN NDIS_PARAMETER_TYPE ParameterType)<ndis.h>
NdisReadEisaSlotInformation(OUT PNDIS_STATUS Status,IN NDIS_HANDLE WrapperConfigurationContext,OUT PUINT SlotNumber,OUT PNDIS_EISA_FUNCTION_INFORMATION EisaData)<ndis.h>
NdisReadEisaSlotInformationEx(OUT PNDIS_STATUS Status,IN NDIS_HANDLE WrapperConfigurationContext,OUT PUINT SlotNumber,OUT PNDIS_EISA_FUNCTION_INFORMATION * EisaData,OUT PUINT NumberOfFunctions)<ndis.h>
NdisReadNetworkAddress(OUT PNDIS_STATUS Status,OUT PVOID * NetworkAddress,OUT PUINT NetworkAddressLength,IN NDIS_HANDLE ConfigurationHandle)<ndis.h>
NdisReadPciSlotInformation(IN NDIS_HANDLE NdisAdapterHandle,IN ULONG SlotNumber,IN ULONG Offset,OUT PVOID Buffer,IN ULONG Length)<ndis.h>
NdisReadPcmciaAttributeMemory(IN NDIS_HANDLE NdisAdapterHandle,IN ULONG Offset,OUT PVOID Buffer,IN ULONG Length)<ndis.h>
NdisReadRegisterUchar(Register, Data)<ndis.h>
NdisReadRegisterUlong(Register, Data)<ndis.h>
NdisReadRegisterUshort(Register, Data)<ndis.h>
NdisRecalculatePacketCounts(Packet)<ndis.h>
NdisReEnumerateProtocolBindings(IN NDIS_HANDLE NdisProtocolHandle)<ndis.h>
NdisRegisterProtocol(OUT PNDIS_STATUS Status,OUT PNDIS_HANDLE NdisProtocolHandle,IN PNDIS_PROTOCOL_CHARACTERISTICS ProtocolCharacteristics,IN UINT CharacteristicsLength)<ndis.h>
NdisRegisterTdiCallBack(IN TDI_REGISTER_CALLBACK RegisterCallback,IN TDI_PNP_HANDLER PnPHandler)<ndis.h>
NdisReinitializePacket(Packet)<ndis.h>
NdisReleaseReadWriteLock(IN OUT PNDIS_RW_LOCK Lock,IN PLOCK_STATE LockState)<ndis.h>
NdisReleaseSpinLock(_SpinLock) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql) KeReleaseSpinLock(&(_SpinLock)->SpinLock,(_SpinLock)->OldIrql)<ndis.h>
NdisRequest(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle,IN PNDIS_REQUEST NdisRequest)<ndis.h>
NdisReserved(PVOID) UCHAR <ntddndis.h>
NdisReset(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle)<ndis.h>
NdisResetEvent(IN PNDIS_EVENT Event)<ndis.h>
NdisRetrieveUlong(DestinationAddress, SourceAddress)<ndis.h>
NdisReturnPackets(IN PNDIS_PACKET * PacketsToReturn,IN UINT NumberOfPackets)<ndis.h>
NdisScheduleWorkItem(IN PNDIS_WORK_ITEM WorkItem)<ndis.h>
NdisSend(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle,IN PNDIS_PACKET Packet)<ndis.h>
NdisSendPackets(IN NDIS_HANDLE NdisBindingHandle,IN PPNDIS_PACKET PacketArray,IN UINT NumberOfPackets)<ndis.h>
NdisSetEvent(IN PNDIS_EVENT Event)<ndis.h>
NdisSetPacketCancelId(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId) NDIS_SET_PACKET_CANCEL_ID(_Packet, _CancelId)<ndis.h>
NdisSetPacketFlags(Packet, Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags) (Packet)->Private.Flags |= (Flags)<ndis.h>
NdisSetPacketPoolProtocolId(IN NDIS_HANDLE PacketPoolHandle,IN UINT ProtocolId)<ndis.h>
NdisSetPacketStatus(IN PNDIS_PACKET Packet,IN NDIS_STATUS Status,IN NDIS_HANDLE Handle,IN ULONG Code)<ndis.h>
NdisSetPeriodicTimer(PNDIS_TIMER NdisTimer,UINT MillisecondsPeriod)<ndis.h>
NdisSetPhysicalAddressHigh(PhysicalAddress, Value)<ndis.h>
NdisSetPhysicalAddressLow(PhysicalAddress, Value)<ndis.h>
NdisSetProtocolFilter(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle,IN RECEIVE_HANDLER ReceiveHandler,IN RECEIVE_PACKET_HANDLER ReceivePacketHandler,IN NDIS_MEDIUM Medium,IN UINT Offset,IN UINT Size,IN PUCHAR Pattern)<ndis.h>
NdisSetSendFlags(_Packet,_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)(_Packet)->Private.Flags = (_Flags)<ndis.h>
NdisSetTimer(PNDIS_TIMER Timer,UINT MillisecondsToDelay)<ndis.h>
NdisSetTimerEx(PNDIS_TIMER NdisTimer,UINT MillisecondsToDelay,PVOID FunctionContext)<ndis.h>
NdisSetupDmaTransfer(OUT PNDIS_STATUS Status,IN PNDIS_HANDLE NdisDmaHandle,IN PNDIS_BUFFER Buffer,IN ULONG Offset,IN ULONG Length,IN BOOLEAN WriteToDevice)<ndis.h>
NdisStoreUlong(DestinationAddress, Value)<ndis.h>
NdisSystemProcessorCount(VOID)<ndis.h>
NdisTerminateWrapper(IN NDIS_HANDLE NdisWrapperHandle,IN PVOID SystemSpecific)<ndis.h>
NdisTransferData(OUT PNDIS_STATUS Status,IN NDIS_HANDLE NdisBindingHandle,IN NDIS_HANDLE MacReceiveContext,IN UINT ByteOffset,IN UINT BytesToTransfer,IN OUT PNDIS_PACKET Packet,OUT PUINT BytesTransferred)<ndis.h>
NdisUnchainBufferAtBack(IN OUT PNDIS_PACKET Packet,OUT PNDIS_BUFFER * Buffer)<ndis.h>
NdisUnchainBufferAtFront(IN OUT PNDIS_PACKET Packet,OUT PNDIS_BUFFER * Buffer)<ndis.h>
NdisUnicodeStringToAnsiString(_as, _us) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE) RtlUnicodeStringToAnsiString(_as, _us, FALSE)<ndis.h>
NdisUnmapFile(IN NDIS_HANDLE FileHandle)<ndis.h>
NdisUpcaseUnicodeString(_d, _s) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE) RtlUpcaseUnicodeString(_d, _s, FALSE)<ndis.h>
NdisUpdateSharedMemory(IN NDIS_HANDLE NdisAdapterHandle,IN ULONG Length,IN PVOID VirtualAddress,IN NDIS_PHYSICAL_ADDRESS PhysicalAddress)<ndis.h>
NdisUpdateSharedMemory(NdisAdapterHandle,\\\nLength,\\\nVirtualAddress,\\\nPhysicalAddress)                          PhysicalAddress<ndis.h>
NdisWaitEvent(IN PNDIS_EVENT Event,IN UINT MsToWait)<ndis.h>
NdisWriteConfiguration(OUT PNDIS_STATUS Status,IN NDIS_HANDLE WrapperConfigurationContext,IN PNDIS_STRING Keyword,IN PNDIS_CONFIGURATION_PARAMETER ParameterValue)<ndis.h>
NdisWriteErrorLogEntry(IN NDIS_HANDLE NdisAdapterHandle,IN NDIS_ERROR_CODE ErrorCode,IN ULONG NumberOfErrorValues,IN...)<ndis.h>
NdisWriteEventLogEntry(IN PVOID LogHandle,IN NDIS_STATUS EventCode,IN ULONG UniqueEventValue,IN USHORT NumStrings,IN PVOID StringsList OPTIONAL,IN ULONG DataSize,IN PVOID Data OPTIONAL)<ndis.h>
NdisWritePciSlotInformation(IN NDIS_HANDLE NdisAdapterHandle,IN ULONG SlotNumber,IN ULONG Offset,IN PVOID Buffer,IN ULONG Length)<ndis.h>
NdisWritePcmciaAttributeMemory(IN NDIS_HANDLE NdisAdapterHandle,IN ULONG Offset,IN PVOID Buffer,IN ULONG Length)<ndis.h>
NdisWriteRegisterUchar(Register, Data)<ndis.h>
NdisWriteRegisterUlong(Register, Data)<ndis.h>
NdisWriteRegisterUshort(Register, Data)<ndis.h>
NdisZeroMappedMemory(Destination, Length)<ndis.h>
NdisZeroMemory(Destination, Length)<ndis.h>
Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO * pProxyInfo,unsigned __LONG32 nProcNum,void * pReturnValue,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
Ndr64AsyncStubCall(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO * pProxyInfo,unsigned __LONG32 nProcNum,void * pReturnValue,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
Ndr64DcomAsyncStubCall(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
NDR_NOTIFY2_ROUTINE(boolean flag) typedef void<rpcndr.h>
NDR_NOTIFY_ROUTINE(void) typedef void<rpcndr.h>
NDR_RUNDOWN(void * context) typedef void<rpcndr.h>
NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg,size_t Len) RPCRTAPI void<rpcndr.h>
NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrAsyncStubCall(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NDRCContextBinding(NDR_CCONTEXT CContext) RPCRTAPI RPC_BINDING_HANDLE RPC_ENTRY <rpcndr.h>
NDRCContextMarshall(NDR_CCONTEXT CContext,void * pBuff) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NDRCContextUnmarshall(NDR_CCONTEXT * pCContext,RPC_BINDING_HANDLE hBinding,void * pBuff,unsigned __LONG32 DataRepresentation) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,void * ArgAddr) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
NdrClientCall3(MIDL_STUBLESS_PROXY_INFO * pProxyInfo,unsigned __LONG32 nProcNum,void * pReturnValue,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT ContextHandle,int fCheck) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT * pContextHandle,RPC_BINDING_HANDLE BindHandle) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE * pInf,unsigned __LONG32 * pCount,MIDL_SYNTAX_INFO ** pArr) RPC_STATUS RPC_ENTRY <rpcndr.h>
NdrClientInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI NDR_SCONTEXT RPC_ENTRY <rpcndr.h>
NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConvert(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,__LONG32 NumberParams) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg,void * pMemory,unsigned __LONG32 CacheSize,unsigned __LONG32 flags) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer * pStub,RPC_SERVER_INTERFACE * pServerIf) RPC_STATUS RPC_ENTRY <rpcndr.h>
NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrCStdStubBuffer2_Release(IRpcStubBuffer * This,IPSFactoryBuffer * pPSF) ULONG WINAPI <rpcproxy.h>
NdrCStdStubBuffer_Release(IRpcStubBuffer * This,IPSFactoryBuffer * pPSF) ULONG WINAPI <rpcproxy.h>
NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
NdrDcomAsyncStubCall(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
NdrDllCanUnloadNow(CStdPSFactoryBuffer * pPSFactoryBuffer) RPCRTAPI HRESULT RPC_ENTRY <rpcproxy.h>
NdrDllGetClassObject(REFCLSID rclsid,REFIID riid,void ** ppv,const ProxyFileInfo ** pProxyFileList,const CLSID * pclsid,CStdPSFactoryBuffer * pPSFactoryBuffer) RPCRTAPI HRESULT RPC_ENTRY <rpcproxy.h>
NdrDllRegisterProxy(HMODULE hDll,const ProxyFileInfo ** pProxyFileList,const CLSID * pclsid) RPCRTAPI HRESULT RPC_ENTRY <rpcproxy.h>
NdrDllUnregisterProxy(HMODULE hDll,const ProxyFileInfo ** pProxyFileList,const CLSID * pclsid) RPCRTAPI HRESULT RPC_ENTRY <rpcproxy.h>
NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrFcLong(s)<rpcndr.h>
NdrFcShort(s)<rpcndr.h>
NdrFieldOffset(s,f)<rpcndr.h>
NdrFieldPad(s,f,p,t)<rpcndr.h>
NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrFullPointerFree(PFULL_PTR_XLAT_TABLES pXlatTables,void * Pointer) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrFullPointerInsertRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned __LONG32 RefId,void * pPointer) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrFullPointerQueryPointer(PFULL_PTR_XLAT_TABLES pXlatTables,void * pPointer,unsigned char QueryType,unsigned __LONG32 * pRefId) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrFullPointerQueryRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned __LONG32 RefId,unsigned char QueryType,void ** ppPointer) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrFullPointerXlatInit(unsigned __LONG32 NumberOfPointers,XLAT_SIDE XlatSide) RPCRTAPI PFULL_PTR_XLAT_TABLES RPC_ENTRY <rpcndr.h>
NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned __LONG32 BufferLength,RPC_BINDING_HANDLE Handle) RPCRTAPI unsigned char<rpcndr.h>
NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg,RPC_VERSION * pVersion) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
NdrGetUserMarshalInfo(unsigned __LONG32 * pFlags,unsigned __LONG32 InformationLevel,NDR_USER_MARSHAL_INFO * pMarshalInfo) RPC_STATUS RPC_ENTRY <rpcndr.h>
NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg,unsigned __LONG32 * pCommStatus,unsigned __LONG32 * pFaultStatus,RPC_STATUS Status) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
NdrMarshCCtxtHdl(pc,p)<rpcndr.h>
NdrMarshConfStringHdr(p,s,l)<rpcndr.h>
NdrMarshSCtxtHdl(pc,p,rd)<rpcndr.h>
NdrMesProcEncodeDecode(handle_t Handle,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,...) void RPC_VAR_ENTRY <midles.h>
NdrMesProcEncodeDecode2(handle_t Handle,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <midles.h>
NdrMesProcEncodeDecode3(handle_t Handle,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,unsigned __LONG32 nProcNum,void * pReturnValue,...) CLIENT_CALL_RETURN RPC_VAR_ENTRY <midles.h>
NdrMesSimpleTypeAlignSize(handle_t) size_t RPC_ENTRY <midles.h>
NdrMesSimpleTypeAlignSizeAll(handle_t Handle,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo) size_t RPC_ENTRY <midles.h>
NdrMesSimpleTypeDecode(handle_t Handle,void * pObject,short Size) void RPC_ENTRY <midles.h>
NdrMesSimpleTypeDecodeAll(handle_t Handle,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,void * pObject,short Size) void RPC_ENTRY <midles.h>
NdrMesSimpleTypeEncode(handle_t Handle,const MIDL_STUB_DESC * pStubDesc,const void * pObject,short Size) void RPC_ENTRY <midles.h>
NdrMesSimpleTypeEncodeAll(handle_t Handle,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,const void * pObject,short Size) void RPC_ENTRY <midles.h>
NdrMesTypeAlignSize(handle_t Handle,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,const void * pObject) size_t RPC_ENTRY <midles.h>
NdrMesTypeAlignSize2(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,const void * pObject) size_t RPC_ENTRY <midles.h>
NdrMesTypeAlignSize3(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,const unsigned __LONG32 ** ArrTypeOffset,unsigned __LONG32 nTypeIndex,const void * pObject) size_t RPC_ENTRY <midles.h>
NdrMesTypeDecode(handle_t Handle,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeDecode2(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeDecode3(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,const unsigned __LONG32 ** ArrTypeOffset,unsigned __LONG32 nTypeIndex,void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeEncode(handle_t Handle,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,const void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeEncode2(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,const void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeEncode3(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,const unsigned __LONG32 ** ArrTypeOffset,unsigned __LONG32 nTypeIndex,const void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeFree2(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUB_DESC * pStubDesc,PFORMAT_STRING pFormatString,void * pObject) void RPC_ENTRY <midles.h>
NdrMesTypeFree3(handle_t Handle,const MIDL_TYPE_PICKLING_INFO * pPicklingInfo,const MIDL_STUBLESS_PROXY_INFO * pProxyInfo,const unsigned __LONG32 ** ArrTypeOffset,unsigned __LONG32 nTypeIndex,void * pObject) void RPC_ENTRY <midles.h>
NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned __LONG32 BufferLength,RPC_BINDING_HANDLE Handle) RPCRTAPI unsigned char<rpcndr.h>
NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pBufferEnd,RPC_BINDING_HANDLE * pAutoHandle) RPCRTAPI unsigned char<rpcndr.h>
NdrOleAllocate(size_t Size) RPCRTAPI void<rpcndr.h>
NdrOleFree(void * NodeToFree) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg,void * pMemory) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg,void * pMemory) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg,void ** ppMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,void ** ppMemory) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrpClientCall2(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,unsigned char * StartofStack) CLIENT_CALL_RETURN RPC_VAR_ENTRY <rpcndr.h>
NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrProxyErrorHandler(DWORD dwExceptionCode) RPCRTAPI HRESULT RPC_ENTRY <rpcproxy.h>
NdrProxyFreeBuffer(void * This,MIDL_STUB_MESSAGE * pStubMsg) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrProxyGetBuffer(void * This,PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrProxyInitialize(void * This,PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrProxySendReceive(void * This,MIDL_STUB_MESSAGE * pStubMsg) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrRpcSmClientAllocate(size_t Size) RPCRTAPI void<rpcndr.h>
NdrRpcSmClientFree(void * NodeToFree) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrRpcSsDefaultAllocate(size_t Size) RPCRTAPI void<rpcndr.h>
NdrRpcSsDefaultFree(void * NodeToFree) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NDRSContextMarshall(NDR_SCONTEXT CContext,void * pBuff,NDR_RUNDOWN userRunDownIn) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void * pBuff,NDR_RUNDOWN userRunDownIn,void * CtxGuard,unsigned __LONG32 Flags) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void * pBuff,NDR_RUNDOWN userRunDownIn) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NDRSContextUnmarshall(void * pBuff,unsigned __LONG32 DataRepresentation) RPCRTAPI NDR_SCONTEXT RPC_ENTRY <rpcndr.h>
NDRSContextUnmarshall2(RPC_BINDING_HANDLE BindingHandle,void * pBuff,unsigned __LONG32 DataRepresentation,void * CtxGuard,unsigned __LONG32 Flags) RPCRTAPI NDR_SCONTEXT RPC_ENTRY <rpcndr.h>
NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle,void * pBuff,unsigned __LONG32 DataRepresentation) RPCRTAPI NDR_SCONTEXT RPC_ENTRY <rpcndr.h>
NDRSContextValue(hContext)<rpcndr.h>
NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pBufferEnd) RPCRTAPI unsigned char<rpcndr.h>
NdrServerCall(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerCall2(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerCall3(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerCallAll(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI NDR_SCONTEXT RPC_ENTRY <rpcndr.h>
NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI NDR_SCONTEXT RPC_ENTRY <rpcndr.h>
NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE * pInf,unsigned __LONG32 * pCount,MIDL_SYNTAX_INFO ** pArr,unsigned __LONG32 * pPreferSyntaxIndex) RPC_STATUS RPC_ENTRY <rpcndr.h>
NdrServerInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor) RPCRTAPI unsigned char<rpcndr.h>
NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor) RPCRTAPI unsigned char<rpcndr.h>
NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned __LONG32 RequestedBufferSize) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PRPC_MESSAGE pRpcMsg) RPCRTAPI unsigned char<rpcndr.h>
NdrServerMarshall(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrServerUnmarshall(struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,void * pParamList) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSH_Copy(unsigned char * pStubMsg,unsigned char * pPtrInMem,unsigned __LONG32 Count) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrSH_IfAlloc(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem,unsigned __LONG32 Count) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSH_IfAllocCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem,unsigned __LONG32 Count) RPCRTAPI RPC_BUFPTR RPC_ENTRY <rpcndr.h>
NdrSH_IfAllocRef(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem,unsigned __LONG32 Count) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSH_IfAllocSet(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem,unsigned __LONG32 Count) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSH_IfCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem,unsigned __LONG32 Count) RPCRTAPI RPC_BUFPTR RPC_ENTRY <rpcndr.h>
NdrSH_IfFree(PMIDL_STUB_MESSAGE pMessage,unsigned char * pPtr) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrSH_StringMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char * pMemory,unsigned __LONG32 Count,int Size) RPCRTAPI RPC_BUFPTR RPC_ENTRY <rpcndr.h>
NdrSH_StringUnMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char ** pMemory,int Size) RPCRTAPI RPC_BUFPTR RPC_ENTRY <rpcndr.h>
NdrSH_TLUPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSH_TLUPDecisionBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSH_UPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** pPtrInMem,RPC_BUFPTR pBuffer) RPCRTAPI int RPC_ENTRY <rpcndr.h>
NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,unsigned char FormatChar) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,unsigned char FormatChar) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrStubCall(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
NdrStubCall2(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
NdrStubCall3(struct IRpcStubBuffer * pThis,struct IRpcChannelBuffer * pChannel,PRPC_MESSAGE pRpcMsg,unsigned __LONG32 * pdwStubPhase) RPCRTAPI __LONG32 RPC_ENTRY <rpcndr.h>
NdrStubErrorHandler(DWORD dwExceptionCode) RPCRTAPI HRESULT RPC_ENTRY <rpcproxy.h>
NdrStubForwardingFunction(IRpcStubBuffer * This,IRpcChannelBuffer * pChannel,PRPC_MESSAGE pmsg,DWORD * pdwStubPhase) void __RPC_STUB <rpcproxy.h>
NdrStubGetBuffer(IRpcStubBuffer * This,IRpcChannelBuffer * pRpcChannelBuffer,PMIDL_STUB_MESSAGE pStubMsg) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrStubInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,IRpcChannelBuffer * pRpcChannelBuffer) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrStubInitializePartial(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,IRpcChannelBuffer * pRpcChannelBuffer,unsigned __LONG32 RequestedBufferSize) RPCRTAPI void RPC_ENTRY <rpcproxy.h>
NdrUnMarshCCtxtHdl(pc,p,h,drep)<rpcndr.h>
NdrUnMarshConfStringHdr(p,s,l)<rpcndr.h>
NdrUnMarshSCtxtHdl(pc,p,drep)<rpcndr.h>
NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrUserMarshalSimpleTypeConvert(unsigned __LONG32 * pFlags,unsigned char * pBuffer,unsigned char FormatChar) RPCRTAPI unsigned char<rpcndr.h>
NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI void RPC_ENTRY <rpcndr.h>
NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char * pMemory,PFORMAT_STRING pFormat) RPCRTAPI unsigned char<rpcndr.h>
NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat) RPCRTAPI unsigned __LONG32 RPC_ENTRY <rpcndr.h>
NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char ** ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc) RPCRTAPI unsigned char<rpcndr.h>
NEARPROC() typedef int<minwindef.h>
NeedCurrentDirectoryForExePath(LPCSTR ExeName) WINBASEAPI WINBOOL WINAPI <processenv.h>
NeedCurrentDirectoryForExePathA(LPCSTR ExeName) WINBASEAPI WINBOOL WINAPI <processenv.h>
NeedCurrentDirectoryForExePathW(LPCWSTR ExeName) WINBASEAPI WINBOOL WINAPI <processenv.h>
NEEDREBOOT(DWORD dwRebootCheck) typedef WINBOOL<advpub.h>
NeedReboot(DWORD dwRebootCheck) WINBOOL WINAPI <advpub.h>
NeedRebootInit(VOID) DWORD WINAPI <advpub.h>
NEEDREBOOTINIT(VOID) typedef DWORD<advpub.h>
NegatePattern(LPPATTERNMATCH Pattern) extern LPPATTERNMATCH WINAPI <nmsupp.h>
NegotiateExtVersion(__LONG32 lLowVersion,__LONG32 lHighVersion,__LONG32 * plExtVersion)virtual HRESULT WINAPI <tapi3if.h>
NESTED_ENTRY(Name)<kxia64.h>
NESTED_ENTRY_EX(Name,Handler)<kxia64.h>
NESTED_EXIT(Name)<kxia64.h>
NESTED_SETUP(i,l,o,r)<kxia64.h>
NetAccessAdd(const char * pszServer,short sLevel,char * pbBuffer,unsigned short cbBuffer) extern API_FUNCTION <svrapi.h>
NetAccessAdd(LPCWSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <svrapi.h>
NetAccessCheck(char * pszReserved,char * pszUserName,char * pszResource,unsigned short usOperation,unsigned short * pusResult) extern API_FUNCTION <svrapi.h>
NetAccessDel(const char * pszServer,char * pszResource) extern API_FUNCTION <svrapi.h>
NetAccessDel(LPCWSTR servername,LPCWSTR resource) NET_API_STATUS WINAPI <svrapi.h>
NetAccessEnum(const char * pszServer,char * pszBasePath,short fsRecursive,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcEntriesRead,unsigned short * pcTotalAvail) extern API_FUNCTION <svrapi.h>
NetAccessEnum(LPCWSTR servername,LPCWSTR BasePath,DWORD Recursive,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <svrapi.h>
NetAccessGetInfo(const char * pszServer,char * pszResource,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcbTotalAvail) extern API_FUNCTION <svrapi.h>
NetAccessGetInfo(LPCWSTR servername,LPCWSTR resource,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <svrapi.h>
NetAccessGetUserPerms(char * pszServer,char * pszUgName,char * pszResource,unsigned short * pusPerms) extern API_FUNCTION <svrapi.h>
NetAccessGetUserPerms(LPCWSTR servername,LPCWSTR UGname,LPCWSTR resource,LPDWORD Perms) NET_API_STATUS WINAPI <svrapi.h>
NetAccessSetInfo(const char * pszServer,char * pszResource,short sLevel,char * pbBuffer,unsigned short cbBuffer,short sParmNum) extern API_FUNCTION <svrapi.h>
NetAccessSetInfo(LPCWSTR servername,LPCWSTR resource,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <svrapi.h>
NetAddAlternateComputerName(LPCWSTR Server,LPCWSTR AlternateName,LPCWSTR DomainAccount,LPCWSTR DomainAccountPassword,ULONG Reserved) NET_API_STATUS WINAPI <lmjoin.h>
NetAddr_DisplayErrorTip(hwnd)<shellapi.h>
NetAddr_GetAddress(hwnd, pv)<shellapi.h>
NetAddr_GetAllowType(hwnd)<shellapi.h>
NetAddr_SetAllowType(hwnd, addrMask)<shellapi.h>
NetAddServiceAccount(LPWSTR ServerName,LPWSTR AccountName,LPWSTR Reserved,DWORD Flags) NTSTATUS WINAPI <lmaccess.h>
NetAlertRaise(LPCWSTR AlertEventName,LPVOID Buffer,DWORD BufferSize) NET_API_STATUS WINAPI <lmalert.h>
NetAlertRaiseEx(LPCWSTR AlertEventName,LPVOID VariableInfo,DWORD VariableInfoSize,LPCWSTR ServiceName) NET_API_STATUS WINAPI <lmalert.h>
NetApiBufferAllocate(DWORD ByteCount,LPVOID * Buffer) NET_API_STATUS WINAPI <lmapibuf.h>
NetApiBufferFree(LPVOID Buffer) NET_API_STATUS WINAPI <lmapibuf.h>
NetApiBufferReallocate(LPVOID OldBuffer,DWORD NewByteCount,LPVOID * NewBuffer) NET_API_STATUS WINAPI <lmapibuf.h>
NetApiBufferSize(LPVOID Buffer,LPDWORD ByteCount) NET_API_STATUS WINAPI <lmapibuf.h>
NetapipBufferAllocate(DWORD ByteCount,LPVOID * Buffer) NET_API_STATUS WINAPI <lmapibuf.h>
NetAuditClear(LPCWSTR server,LPCWSTR backupfile,LPCWSTR service) DWORD WINAPI <lmaudit.h>
NetAuditRead(LPCWSTR server,LPCWSTR service,LPHLOG auditloghandle,DWORD offset,LPDWORD reserved1,DWORD reserved2,DWORD offsetflag,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD bytesread,LPDWORD totalavailable) DWORD WINAPI <lmaudit.h>
NetAuditWrite(DWORD type,LPBYTE buf,DWORD numbytes,LPCWSTR service,LPBYTE reserved) DWORD WINAPI <lmaudit.h>
Netbios(PNCB pncb) UCHAR WINAPI <nb30.h>
NetConfigGet(LPCWSTR server,LPCWSTR component,LPCWSTR parameter,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmconfig.h>
NetConfigGetAll(LPCWSTR server,LPCWSTR component,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmconfig.h>
NetConfigSet(LPCWSTR server,LPCWSTR reserved1,LPCWSTR component,DWORD level,DWORD reserved2,LPBYTE buf,DWORD reserved3) NET_API_STATUS WINAPI <lmconfig.h>
NetConnectionEnum(const char * pszServer,const char * pszQualifier,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcEntriesRead,unsigned short * pcTotalAvail) extern API_FUNCTION <svrapi.h>
NetConnectionEnum(LMSTR servername,LMSTR qualifier,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <svrapi.h>
NetDfsAdd(LPWSTR DfsEntryPath,LPWSTR ServerName,LPWSTR ShareName,LPWSTR Comment,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsAddFtRoot(LPWSTR ServerName,LPWSTR RootShare,LPWSTR FtDfsName,LPWSTR Comment,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsAddRootTarget(LPWSTR pDfsPath,LPWSTR pTargetPath,ULONG MajorVersion,LPWSTR pComment,ULONG Flags)NET_API_STATUS NET_API_FUNCTION <lmdfs.h>
NetDfsAddStdRoot(LPWSTR ServerName,LPWSTR RootShare,LPWSTR Comment,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsAddStdRootForced(LPWSTR ServerName,LPWSTR RootShare,LPWSTR Comment,LPWSTR Store) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsEnum(LPWSTR DfsName,DWORD Level,DWORD PrefMaxLen,LPBYTE * Buffer,LPDWORD EntriesRead,LPDWORD ResumeHandle) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetClientInfo(LPWSTR DfsEntryPath,LPWSTR ServerName,LPWSTR ShareName,DWORD Level,LPBYTE * Buffer) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetDcAddress(LPWSTR ServerName,LPWSTR * DcIpAddress,BOOLEAN * IsRoot,ULONG * Timeout) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetFtContainerSecurity(LPWSTR DomainName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR * ppSecurityDescriptor,LPDWORD lpcbSecurityDescriptor) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetInfo(LPWSTR DfsEntryPath,LPWSTR ServerName,LPWSTR ShareName,DWORD Level,LPBYTE * Buffer) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetSecurity(LPWSTR DfsEntryPath,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR * ppSecurityDescriptor,LPDWORD lpcbSecurityDescriptor) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetStdContainerSecurity(LPWSTR MachineName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR * ppSecurityDescriptor,LPDWORD lpcbSecurityDescriptor) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsGetSupportedNamespaceVersion(DFS_NAMESPACE_VERSION_ORIGIN Origin,PWSTR pName,PDFS_SUPPORTED_NAMESPACE_VERSION_INFO * ppVersionInfo)NET_API_STATUS NET_API_FUNCTION <lmdfs.h>
NetDfsManagerInitialize(LPWSTR ServerName,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsMove(LPWSTR DfsEntryPath,LPWSTR DfsNewEntryPath,ULONG Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsRemove(LPWSTR DfsEntryPath,LPWSTR ServerName,LPWSTR ShareName) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsRemoveFtRoot(LPWSTR ServerName,LPWSTR RootShare,LPWSTR FtDfsName,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsRemoveFtRootForced(LPWSTR DomainName,LPWSTR ServerName,LPWSTR RootShare,LPWSTR FtDfsName,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsRemoveRootTarget(LPWSTR pDfsPath,LPWSTR pTargetPath,ULONG Flags)NET_API_STATUS NET_API_FUNCTION <lmdfs.h>
NetDfsRemoveStdRoot(LPWSTR ServerName,LPWSTR RootShare,DWORD Flags) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsRename(LPWSTR Path,LPWSTR NewPath) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsSetClientInfo(LPWSTR DfsEntryPath,LPWSTR ServerName,LPWSTR ShareName,DWORD Level,LPBYTE Buffer) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsSetFtContainerSecurity(LPWSTR DomainName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsSetInfo(LPWSTR DfsEntryPath,LPWSTR ServerName,LPWSTR ShareName,DWORD Level,LPBYTE Buffer) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsSetSecurity(LPWSTR DfsEntryPath,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) NET_API_STATUS WINAPI <lmdfs.h>
NetDfsSetStdContainerSecurity(LPWSTR MachineName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) NET_API_STATUS WINAPI <lmdfs.h>
NetEnumerateComputerNames(LPCWSTR Server,NET_COMPUTER_NAME_TYPE NameType,ULONG Reserved,PDWORD EntryCount,LPWSTR ** ComputerNames) NET_API_STATUS WINAPI <lmjoin.h>
NetEnumerateServiceAccounts(LPWSTR ServerName,DWORD Flags,DWORD * AccountsCount,PZPWSTR * Accounts) NTSTATUS WINAPI <lmaccess.h>
NetEnumerateTrustedDomains(LPWSTR ServerName,LPWSTR * DomainNames) NTSTATUS WINAPI <lmaccess.h>
NetErrorLogClear(LPCWSTR server,LPCWSTR backupfile,LPBYTE reserved) NET_API_STATUS WINAPI <lmerrlog.h>
NetErrorLogRead(LPCWSTR server,LPWSTR reserved1,LPHLOG errloghandle,DWORD offset,LPDWORD reserved2,DWORD reserved3,DWORD offsetflag,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD bytesread,LPDWORD totalbytes) NET_API_STATUS WINAPI <lmerrlog.h>
NetErrorLogWrite(LPBYTE reserved1,DWORD code,LPCWSTR component,LPBYTE buffer,DWORD numbytes,LPBYTE msgbuf,DWORD strcount,LPBYTE reserved2) NET_API_STATUS WINAPI <lmerrlog.h>
NetFileClose(LMSTR servername,DWORD fileid) NET_API_STATUS WINAPI <lmshare.h>
NetFileClose2(const char * pszServer,unsigned __LONG32 ulFileId) extern API_FUNCTION <svrapi.h>
NetFileEnum(const char * pszServer,const char * pszBasePath,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcEntriesRead,unsigned short * pcTotalAvail) extern API_FUNCTION <svrapi.h>
NetFileEnum(LMSTR servername,LMSTR basepath,LMSTR username,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resume_handle) NET_API_STATUS WINAPI <svrapi.h>
NetFileGetInfo(LMSTR servername,DWORD fileid,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmshare.h>
NetGetAnyDCName(LPCWSTR servername,LPCWSTR domainname,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmaccess.h>
NetGetDCName(LPCWSTR servername,LPCWSTR domainname,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmaccess.h>
NetGetDisplayInformationIndex(LPCWSTR ServerName,DWORD Level,LPCWSTR Prefix,LPDWORD Index) NET_API_STATUS WINAPI <lmaccess.h>
NetGetJoinableOUs(LPCWSTR lpServer,LPCWSTR lpDomain,LPCWSTR lpAccount,LPCWSTR lpPassword,DWORD * OUCount,LPWSTR ** OUs) NET_API_STATUS WINAPI <lmjoin.h>
NetGetJoinInformation(LPCWSTR lpServer,LPWSTR * lpNameBuffer,PNETSETUP_JOIN_STATUS BufferType) NET_API_STATUS WINAPI <lmjoin.h>
NetGroupAdd(LPCWSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupAddUser(LPCWSTR servername,LPCWSTR GroupName,LPCWSTR username) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupDel(LPCWSTR servername,LPCWSTR groupname) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupDelUser(LPCWSTR servername,LPCWSTR GroupName,LPCWSTR Username) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupEnum(LPCWSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resume_handle) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupGetInfo(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupGetUsers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR ResumeHandle) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupSetInfo(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetGroupSetUsers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,DWORD totalentries) NET_API_STATUS WINAPI <lmaccess.h>
NETIO_SUCCESS(x)<netioapi.h>
NetIsServiceAccount(LPWSTR ServerName,LPWSTR AccountName,BOOL * IsService) NTSTATUS WINAPI <lmaccess.h>
NetJoinDomain(LPCWSTR lpServer,LPCWSTR lpDomain,LPCWSTR lpAccountOU,LPCWSTR lpAccount,LPCWSTR lpPassword,DWORD fJoinOptions) NET_API_STATUS WINAPI <lmjoin.h>
NetLocalGroupAdd(LPCWSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupAddMember(LPCWSTR servername,LPCWSTR groupname,PSID membersid) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupAddMembers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,DWORD totalentries) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupDel(LPCWSTR servername,LPCWSTR groupname) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupDelMember(LPCWSTR servername,LPCWSTR groupname,PSID membersid) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupDelMembers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,DWORD totalentries) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupEnum(LPCWSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resumehandle) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupGetInfo(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupGetMembers(LPCWSTR servername,LPCWSTR localgroupname,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,PDWORD_PTR resumehandle) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupSetInfo(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetLocalGroupSetMembers(LPCWSTR servername,LPCWSTR groupname,DWORD level,LPBYTE buf,DWORD totalentries) NET_API_STATUS WINAPI <lmaccess.h>
NetMeetingInvite(IDispatch * pIMSession,IDispatch * pContact,__LONG32 lInviteCookie)virtual HRESULT WINAPI <msimcntl.h>
NetMessageBufferSend(LPCWSTR servername,LPCWSTR msgname,LPCWSTR fromname,LPBYTE buf,DWORD buflen) NET_API_STATUS WINAPI <lmmsg.h>
NetMessageNameAdd(LPCWSTR servername,LPCWSTR msgname) NET_API_STATUS WINAPI <lmmsg.h>
NetMessageNameDel(LPCWSTR servername,LPCWSTR msgname) NET_API_STATUS WINAPI <lmmsg.h>
NetMessageNameEnum(LPCWSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <lmmsg.h>
NetMessageNameGetInfo(LPCWSTR servername,LPCWSTR msgname,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmmsg.h>
NetQueryDisplayInformation(LPCWSTR ServerName,DWORD Level,DWORD Index,DWORD EntriesRequested,DWORD PreferredMaximumLength,LPDWORD ReturnedEntryCount,PVOID * SortedBuffer) NET_API_STATUS WINAPI <lmaccess.h>
NetRegisterDomainNameChangeNotification(PHANDLE NotificationEventHandle) NET_API_STATUS WINAPI <lmconfig.h>
NetRemoteComputerSupports(LPCWSTR UncServerName,DWORD OptionsWanted,LPDWORD OptionsSupported) NET_API_STATUS WINAPI <lmremutl.h>
NetRemoteTOD(LPCWSTR UncServerName,LPBYTE * BufferPtr) NET_API_STATUS WINAPI <lmremutl.h>
NetRemoveAlternateComputerName(LPCWSTR Server,LPCWSTR AlternateName,LPCWSTR DomainAccount,LPCWSTR DomainAccountPassword,ULONG Reserved) NET_API_STATUS WINAPI <lmjoin.h>
NetRemoveServiceAccount(LPWSTR ServerName,LPWSTR AccountName,DWORD Flags) NTSTATUS WINAPI <lmaccess.h>
NetRenameMachineInDomain(LPCWSTR lpServer,LPCWSTR lpNewMachineName,LPCWSTR lpAccount,LPCWSTR lpPassword,DWORD fRenameOptions) NET_API_STATUS WINAPI <lmjoin.h>
NetReplExportDirAdd(LPCWSTR servername,DWORD level,const LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmrepl.h>
NetReplExportDirDel(LPCWSTR servername,LPCWSTR dirname) NET_API_STATUS WINAPI <lmrepl.h>
NetReplExportDirEnum(LPCWSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resumehandle) NET_API_STATUS WINAPI <lmrepl.h>
NetReplExportDirGetInfo(LPCWSTR servername,LPCWSTR dirname,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmrepl.h>
NetReplExportDirLock(LPCWSTR servername,LPCWSTR dirname) NET_API_STATUS WINAPI <lmrepl.h>
NetReplExportDirSetInfo(LPCWSTR servername,LPCWSTR dirname,DWORD level,const LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmrepl.h>
NetReplExportDirUnlock(LPCWSTR servername,LPCWSTR dirname,DWORD unlockforce) NET_API_STATUS WINAPI <lmrepl.h>
NetReplGetInfo(LPCWSTR servername,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmrepl.h>
NetReplImportDirAdd(LPCWSTR servername,DWORD level,const LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmrepl.h>
NetReplImportDirDel(LPCWSTR servername,LPCWSTR dirname) NET_API_STATUS WINAPI <lmrepl.h>
NetReplImportDirEnum(LPCWSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resumehandle) NET_API_STATUS WINAPI <lmrepl.h>
NetReplImportDirGetInfo(LPCWSTR servername,LPCWSTR dirname,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmrepl.h>
NetReplImportDirLock(LPCWSTR servername,LPCWSTR dirname) NET_API_STATUS WINAPI <lmrepl.h>
NetReplImportDirUnlock(LPCWSTR servername,LPCWSTR dirname,DWORD unlockforce) NET_API_STATUS WINAPI <lmrepl.h>
NetReplSetInfo(LPCWSTR servername,DWORD level,const LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmrepl.h>
NetScheduleJobAdd(LPCWSTR Servername,LPBYTE Buffer,LPDWORD JobId) NET_API_STATUS WINAPI <lmat.h>
NetScheduleJobDel(LPCWSTR Servername,DWORD MinJobId,DWORD MaxJobId) NET_API_STATUS WINAPI <lmat.h>
NetScheduleJobEnum(LPCWSTR Servername,LPBYTE * PointerToBuffer,DWORD PrefferedMaximumLength,LPDWORD EntriesRead,LPDWORD TotalEntries,LPDWORD ResumeHandle) NET_API_STATUS WINAPI <lmat.h>
NetScheduleJobGetInfo(LPCWSTR Servername,DWORD JobId,LPBYTE * PointerToBuffer) NET_API_STATUS WINAPI <lmat.h>
NetSecurityGetInfo(const char * pszServer,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcbTotalAvail) extern API_FUNCTION <svrapi.h>
NetServerComputerNameAdd(LMSTR ServerName,LMSTR EmulatedDomainName,LMSTR EmulatedServerName) NET_API_STATUS WINAPI <lmserver.h>
NetServerComputerNameDel(LMSTR ServerName,LMSTR EmulatedServerName) NET_API_STATUS WINAPI <lmserver.h>
NetServerDiskEnum(LMSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <lmserver.h>
NetServerEnum(LMCSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,DWORD servertype,LMCSTR domain,LPDWORD resume_handle) NET_API_STATUS WINAPI <lmserver.h>
NetServerEnumEx(LMCSTR ServerName,DWORD Level,LPBYTE * Bufptr,DWORD PrefMaxlen,LPDWORD EntriesRead,LPDWORD totalentries,DWORD servertype,LMCSTR domain,LMCSTR FirstNameToReturn) NET_API_STATUS WINAPI <lmserver.h>
NetServerGetInfo(const char * pszServer,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcbTotalAvail) extern API_FUNCTION <svrapi.h>
NetServerGetInfo(LMSTR servername,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <svrapi.h>
NetServerSetInfo(LMSTR servername,DWORD level,LPBYTE buf,LPDWORD ParmError) NET_API_STATUS WINAPI <lmserver.h>
NetServerSetInfoCommandLine(WORD argc,LMSTR argv[]) NET_API_STATUS <lmserver.h>
NetServerTransportAdd(LMSTR servername,DWORD level,LPBYTE bufptr) NET_API_STATUS WINAPI <lmserver.h>
NetServerTransportAddEx(LMSTR servername,DWORD level,LPBYTE bufptr) NET_API_STATUS WINAPI <lmserver.h>
NetServerTransportDel(LMSTR servername,DWORD level,LPBYTE bufptr) NET_API_STATUS WINAPI <lmserver.h>
NetServerTransportEnum(LMSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resumehandle) NET_API_STATUS WINAPI <lmserver.h>
NetServiceControl(LPCWSTR servername,LPCWSTR service,DWORD opcode,DWORD arg,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmsvc.h>
NetServiceEnum(LPCWSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <lmsvc.h>
NetServiceGetInfo(LPCWSTR servername,LPCWSTR service,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmsvc.h>
NetServiceInstall(LPCWSTR servername,LPCWSTR service,DWORD argc,LPCWSTR argv[],LPBYTE * bufptr) NET_API_STATUS WINAPI <lmsvc.h>
NetSessionDel(const char * pszServer,const char * pszClientName,short sReserved) extern API_FUNCTION <svrapi.h>
NetSessionDel(LMSTR servername,LMSTR UncClientName,LMSTR username) NET_API_STATUS WINAPI <svrapi.h>
NetSessionEnum(const char * pszServer,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcEntriesRead,unsigned short * pcTotalAvail) extern API_FUNCTION <svrapi.h>
NetSessionEnum(LMSTR servername,LMSTR UncClientName,LMSTR username,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <svrapi.h>
NetSessionGetInfo(const char * pszServer,const char * pszClientName,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcbTotalAvail) extern API_FUNCTION <svrapi.h>
NetSessionGetInfo(LMSTR servername,LMSTR UncClientName,LMSTR username,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <svrapi.h>
NetSetPrimaryComputerName(LPCWSTR Server,LPCWSTR PrimaryName,LPCWSTR DomainAccount,LPCWSTR DomainAccountPassword,ULONG Reserved) NET_API_STATUS WINAPI <lmjoin.h>
NetShareAdd(const char * pszServer,short sLevel,const char * pbBuffer,unsigned short cbBuffer) extern API_FUNCTION <svrapi.h>
NetShareAdd(LMSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <svrapi.h>
NetShareCheck(LMSTR servername,LMSTR device,LPDWORD type) NET_API_STATUS WINAPI <lmshare.h>
NetShareDel(const char * pszServer,const char * pszNetName,unsigned short usReserved) extern API_FUNCTION <svrapi.h>
NetShareDel(LMSTR servername,LMSTR netname,DWORD reserved) NET_API_STATUS WINAPI <svrapi.h>
NetShareDelEx(LMSTR servername,DWORD level,LPBYTE buf)NET_API_STATUS WINAPI <lmdfs.h>
NetShareDelSticky(LMSTR servername,LMSTR netname,DWORD reserved) NET_API_STATUS WINAPI <lmshare.h>
NetShareEnum(const char * pszServer,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcEntriesRead,unsigned short * pcTotalAvail) extern API_FUNCTION <svrapi.h>
NetShareEnum(LMSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <svrapi.h>
NetShareEnumSticky(LMSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <lmshare.h>
NetShareGetInfo(const char * pszServer,const char * pszNetName,short sLevel,char * pbBuffer,unsigned short cbBuffer,unsigned short * pcbTotalAvail) extern API_FUNCTION <svrapi.h>
NetShareGetInfo(LMSTR servername,LMSTR netname,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <svrapi.h>
NetShareSetInfo(const char * pszServer,const char * pszNetName,short sLevel,const char * pbBuffer,unsigned short cbBuffer,short sParmNum) extern API_FUNCTION <svrapi.h>
NetShareSetInfo(LMSTR servername,LMSTR netname,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <svrapi.h>
NetStatisticsGet(LMSTR server,LMSTR service,DWORD level,DWORD options,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmstats.h>
NetUnjoinDomain(LPCWSTR lpServer,LPCWSTR lpAccount,LPCWSTR lpPassword,DWORD fUnjoinOptions) NET_API_STATUS WINAPI <lmjoin.h>
NetUnregisterDomainNameChangeNotification(HANDLE NotificationEventHandle) NET_API_STATUS WINAPI <lmconfig.h>
NetUseAdd(LMSTR UncServerName,DWORD Level,LPBYTE Buf,LPDWORD ParmError) NET_API_STATUS WINAPI <lmuse.h>
NetUseDel(LMSTR UncServerName,LMSTR UseName,DWORD ForceCond) NET_API_STATUS WINAPI <lmuse.h>
NetUseEnum(LMSTR UncServerName,DWORD Level,LPBYTE * BufPtr,DWORD PreferedMaximumSize,LPDWORD EntriesRead,LPDWORD TotalEntries,LPDWORD ResumeHandle) NET_API_STATUS WINAPI <lmuse.h>
NetUseGetInfo(LMSTR UncServerName,LMSTR UseName,DWORD Level,LPBYTE * BufPtr) NET_API_STATUS WINAPI <lmuse.h>
NetUserAdd(LPCWSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetUserChangePassword(LPCWSTR domainname,LPCWSTR username,LPCWSTR oldpassword,LPCWSTR newpassword) NET_API_STATUS WINAPI <lmaccess.h>
NetUserDel(LPCWSTR servername,LPCWSTR username) NET_API_STATUS WINAPI <lmaccess.h>
NetUserEnum(LPCWSTR servername,DWORD level,DWORD filter,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resume_handle) NET_API_STATUS WINAPI <lmaccess.h>
NetUserGetGroups(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries) NET_API_STATUS WINAPI <lmaccess.h>
NetUserGetInfo(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmaccess.h>
NetUserGetLocalGroups(LPCWSTR servername,LPCWSTR username,DWORD level,DWORD flags,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries) NET_API_STATUS WINAPI <lmaccess.h>
NetUserModalsGet(LPCWSTR servername,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmaccess.h>
NetUserModalsSet(LPCWSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetUserSetGroups(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE buf,DWORD num_entries) NET_API_STATUS WINAPI <lmaccess.h>
NetUserSetInfo(LPCWSTR servername,LPCWSTR username,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmaccess.h>
NetValidateName(LPCWSTR lpServer,LPCWSTR lpName,LPCWSTR lpAccount,LPCWSTR lpPassword,NETSETUP_NAME_TYPE NameType) NET_API_STATUS WINAPI <lmjoin.h>
NetValidatePasswordPolicy(LPCWSTR ServerName,LPVOID Qualifier,NET_VALIDATE_PASSWORD_TYPE ValidationType,LPVOID InputArg,LPVOID * OutputArg) NET_API_STATUS WINAPI <lmaccess.h>
NetValidatePasswordPolicyFree(LPVOID * OutputArg) NET_API_STATUS WINAPI <lmaccess.h>
NetWkstaGetInfo(LMSTR servername,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaSetInfo(LMSTR servername,DWORD level,LPBYTE buffer,LPDWORD parm_err) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaTransportAdd(LMSTR servername,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaTransportDel(LMSTR servername,LMSTR transportname,DWORD ucond) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaTransportEnum(LMSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resumehandle) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaUserEnum(LMSTR servername,DWORD level,LPBYTE * bufptr,DWORD prefmaxlen,LPDWORD entriesread,LPDWORD totalentries,LPDWORD resumehandle) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaUserGetInfo(LMSTR reserved,DWORD level,LPBYTE * bufptr) NET_API_STATUS WINAPI <lmwksta.h>
NetWkstaUserSetInfo(LMSTR reserved,DWORD level,LPBYTE buf,LPDWORD parm_err) NET_API_STATUS WINAPI <lmwksta.h>
New(void)virtual HRESULT WINAPI <tom.h>
NewAssoc()CDXMap<dxtmpl.h>
NewCompressor(UINT iCharsetDefault) HCOMPRESSOR WINAPI <ftsiface.h>
NewDeviceArrival(void)virtual HRESULT WINAPI <wia.h>
NewDeviceHandle(IN PVOID BusContext,IN OUT PUSB_DEVICE_HANDLE OldDeviceHandle,IN OUT PUSB_DEVICE_HANDLE) IN OUT PUSB_DEVICE_HANDLE <hubbusif.h>
NewDocument(void)virtual HRESULT WINAPI <dhtmled.h>
NewHiliter(HSEARCHER hSearch) HHILITER WINAPI <ftsiface.h>
NewIdleReadyState(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE DeviceHandle,IN ULONG) IN ULONG <hubbusif.h>
NewIndex(const PBYTE pbSourceName,UINT uiTime1,UINT uiTime2,UINT iCharsetDefault,UINT lcidDefault,UINT fdwOptions) HINDEX WINAPI <ftsiface.h>
NewList(BSTR bstrListName,__LONG32 bfProperties,IDispatch ** ppList)virtual HRESULT WINAPI <msimcsdk.h>
NewNode(CNode * pPrev,CNode * pNext)CDXList<dxtmpl.h>
NewNode(CNode *,CNode *) CNode<dxtmpl.h>
NewSearcher() HSEARCHER WINAPI <ftsiface.h>
NewTransactionDescription(LPCWSTR szTxDesc)virtual HRESULT WINAPI <comsvcs.h>
NewWindow(HSCOPEITEM hScopeItem,unsigned __LONG32 lOptions)virtual HRESULT WINAPI <mmc.h>
NewWorkItem(LPCWSTR pwszTaskName,REFCLSID rclsid,REFIID riid,IUnknown ** ppUnk)virtual HRESULT WINAPI <mstask.h>
Next() WINBOOL <wsdxmldom.h>
Next(BSTR * pbstrUrl,BSTR * pbstrPolicyRef,LONG * pdwReserved,DWORD * pdwPrivacyFlags)virtual HRESULT WINAPI <wsdxmldom.h>
Next(DWORD celt,GUID * rgelt,DWORD * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(DWORD celt,LPWSTR * rgelt,DWORD * pceltFetched) virtual HRESULT WINAPI <wsdxmldom.h>
Next(DWORD celt,PST_PROVIDERINFO ** rgelt,DWORD * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(IMSMQQueueInfo ** ppqinfoNext)virtual HRESULT WINAPI <wsdxmldom.h>
Next(IMSMQQueueInfo2 ** ppqinfoNext)virtual HRESULT WINAPI <wsdxmldom.h>
Next(IMSMQQueueInfo3 ** ppqinfoNext)virtual HRESULT WINAPI <wsdxmldom.h>
Next(IPublishedApp ** pia)virtual HRESULT WINAPI <wsdxmldom.h>
Next(LONG * pIndex)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,BSTR * ppElements,ULONG * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,BSTR * ppStrings,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,CHANNELENUMINFO * rgChanInf,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,GUID * pElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,GUID * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,HLITEM * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IBackgroundCopyFile ** rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IBackgroundCopyJob ** rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IMcastScope ** ppScopes,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,INetConnection ** rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCBuddy ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCBuddyGroup ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCParticipant ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCPresenceDevice ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCProfile ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCUserSearchResult ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IRTCWatcher ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITACDGroup ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITAddress ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITAgent ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITAgentHandler ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITAgentSession ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITCallHub ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITCallInfo ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITCallingCard ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITDirectory ** ppElements,ULONG * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITDirectoryObject ** pVal,ULONG * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITEMPROP * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITLocationInfo ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITMedia ** pVal,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITParticipant ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITPhone ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITPluggableTerminalClassInfo ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITPluggableTerminalSuperclassInfo ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITQueue ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITStream ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITSubStream ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITTerminal ** ppElements,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,ITTime ** pVal,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IWiaItem ** ppIWiaItem,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,IWiaPropertyStorage ** rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,LPSYNCMGRITEM rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,LPWSTR ** rgpwszNames,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,MMC_TASK * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,PMIMECPINFO rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,PRFC1766INFO rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,PSCRIPTINFO rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,SUBSCRIPTIONCOOKIE * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,VARIANT * rgVar,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,VARIANT * rgVar,ULONG * pCeltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,WIA_DEV_CAP * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG celt,WIA_FORMAT_INFO * rgelt,ULONG * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG cNumberRequestedIn,IClusCfgIPAddressInfo ** rgpIPAddressInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG cNumberRequestedIn,IClusCfgManagedResourceInfo ** rgpManagedResourceInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG cNumberRequestedIn,IClusCfgNetworkInfo ** rgpNetworkInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG cNumberRequestedIn,IClusCfgPartitionInfo ** rgpPartitionInfoOut,ULONG * pcNumberFetchedOut)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG cReqElem,IUnknown ** ppInterface,ULONG * cRetElem)virtual HRESULT WINAPI <wsdxmldom.h>
Next(ULONG cRequest,STREAM_ID_MAP * pStreamIdMap,ULONG * pcReceived)virtual HRESULT WINAPI <wsdxmldom.h>
Next(unsigned __LONG32 celt,BSTR * rgname,unsigned __LONG32 * pceltFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(unsigned __LONG32 cFetch,BSTR * rgbstrStrings,unsigned __LONG32 * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(unsigned __LONG32 cFetch,IMsmConfigurableItem ** rgmsmItems,unsigned __LONG32 * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(unsigned __LONG32 cFetch,IMsmDependency ** rgmsmDependencies,unsigned __LONG32 * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(unsigned __LONG32 cFetch,IMsmError ** rgmsmErrors,unsigned __LONG32 * pcFetched)virtual HRESULT WINAPI <wsdxmldom.h>
Next(VARIANT * pVariant)virtual HRESULT WINAPI <wsdxmldom.h>
Next_Main_Hdr(p)<lpmapi.h>
Next_Parm_Hdr(p)<lpmapi.h>
Next_Serv_Hdr(p)<lpmapi.h>
NextDocument(IXMLDOMDocument ** ppDoc)virtual HRESULT WINAPI <xmltrnsf.h>
NextMarker(GraphicsPath * path)	INT <gdipluspath.h>
NextMarker(INT * startIndex,INT * endIndex)	INT <gdipluspath.h>
NextPathType(BYTE * pathType,INT * startIndex,INT * endIndex)	INT <gdipluspath.h>
NextPGSearch(void)virtual HRESULT WINAPI <strmif.h>
NEXTRAWINPUTBLOCK(ptr)<winuser.h>
NextRedirectedUser(void)virtual HRESULT WINAPI <rtccore.h>
NextSubpath(GraphicsPath * path,BOOL * isClosed)	INT <gdipluspath.h>
NextSubpath(INT * startIndex,INT * endIndex,BOOL * isClosed)	INT <gdipluspath.h>
NFAssert(t)<mapidbg.h>
NFAssertSz(t,psz)<mapidbg.h>
NFAssertSz1(t,psz,a1)<mapidbg.h>
NFAssertSz2(t,psz,a1,a2)<mapidbg.h>
NFAssertSz3(t,psz,a1,a2,a3)<mapidbg.h>
NFAssertSz4(t,psz,a1,a2,a3,a4)<mapidbg.h>
NFAssertSz5(t,psz,a1,a2,a3,a4,a5)<mapidbg.h>
NFAssertSz6(t,psz,a1,a2,a3,a4,a5,a6)<mapidbg.h>
NFAssertSz7(t,psz,a1,a2,a3,a4,a5,a6,a7)<mapidbg.h>
NFAssertSz8(t,psz,a1,a2,a3,a4,a5,a6,a7,a8)<mapidbg.h>
NFAssertSz9(t,psz,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapidbg.h>
NFSideAssert(t)<mapidbg.h>
NFSideAssertSz(t,psz)<mapidbg.h>
NFSideAssertSz1(t,psz,a1)<mapidbg.h>
NFSideAssertSz2(t,psz,a1,a2)<mapidbg.h>
NFSideAssertSz3(t,psz,a1,a2,a3)<mapidbg.h>
NFSideAssertSz4(t,psz,a1,a2,a3,a4)<mapidbg.h>
NFSideAssertSz5(t,psz,a1,a2,a3,a4,a5)<mapidbg.h>
NFSideAssertSz6(t,psz,a1,a2,a3,a4,a5,a6)<mapidbg.h>
NFSideAssertSz7(t,psz,a1,a2,a3,a4,a5,a6,a7)<mapidbg.h>
NFSideAssertSz8(t,psz,a1,a2,a3,a4,a5,a6,a7,a8)<mapidbg.h>
NFSideAssertSz9(t,psz,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapidbg.h>
NhpAllocateAndGetInterfaceInfoFromStack(IP_INTERFACE_NAME_INFO ** ppTable,PDWORD pdwCount,WINBOOL bOrder,HANDLE hHeap,DWORD dwFlags) DWORD WINAPI <iphlpapi.h>
NlsDllCodePageTranslation(DWORD CodePage,DWORD dwFlags,LPSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int cchWideChar,LPCPINFO lpCPInfo)STDAPI_<gb18030.h>
NMERR_TO_HRESULT(DWORD nmerror) INLINE HRESULT <netmon.h>
NMRtlIpv6AddressToString(const BYTE IP6Addr[],LPSTR S)
NMRtlIpv6AddressToStringA(const BYTE IP6Addr[],LPSTR S) LPSTR WINAPI <netmon.h>
NMRtlIpv6AddressToStringW(const BYTE IP6Addr[],LPWSTR S) LPWSTR WINAPI <netmon.h>
NMRtlIpv6StringToAddress(LPCSTR S,LPCSTR * Terminator,BYTE IP6Addr[])
NMRtlIpv6StringToAddressA(LPCSTR S,LPCSTR * Terminator,BYTE IP6Addr[]) ULONG WINAPI <netmon.h>
NMRtlIpv6StringToAddressW(LPCWSTR S,LPCWSTR * Terminator,BYTE IP6Addr[]) ULONG WINAPI <netmon.h>
NonDelegatedQueryInterface(REFIID InterfaceId,PVOID * Interface)COMDDKMETHOD STDMETHODIMP <kcom.h>
NonDelegatingAddRef()   STDMETHODIMP_<stdunk.h>
NonDelegatingQueryInterface(REFIID rIID,PVOID * ppVoid)   STDMETHODIMP_<stdunk.h>
NonDelegatingRelease()   STDMETHODIMP_<stdunk.h>
Normalize(const _D3DVECTOR & v)inline _D3DVECTOR <d3dtypes.h>
NormalizeAddress(LPADDRESS Address) extern LPADDRESS WINAPI <nmsupp.h>
NormalizeAddress(LPADDRESS2 Address) LPADDRESS2 WINAPI <nmsupp.h>
NormalizeAddressTable(LPADDRESSTABLE AddressTable) extern LPADDRESSTABLE WINAPI <nmsupp.h>
NormalizeAddressTable(LPADDRESSTABLE2 AddressTable) LPADDRESSTABLE2 WINAPI <nmsupp.h>
NormalizeString(NORM_FORM NormForm,LPCWSTR lpSrcString,int cwSrcLength,LPWSTR lpDstString,int cwDstLength) WINNORMALIZEAPI int WINAPI <winnls.h>
NOTIFCALLBACK(LPVOID lpvContext,ULONG cNotification,LPNOTIFICATION lpNotifications) typedef __LONG32<wabdefs.h>
NotificationHandler(GUID connectionId,VOID * pContextData)typedef VOID<eappapis.h>
NotificationHookProc(ULONG_PTR * token)typedef GpStatus WINGDIPAPI<gdiplusinit.h>
NotificationUnhookProc(ULONG_PTR token)typedef VOID WINGDIPAPI<gdiplusinit.h>
NotifWndProc(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) static LRESULT CALLBACK <mspthrd.h>
Notify(__LONG32 Notify)virtual HRESULT WINAPI <tom.h>
Notify(IUnknown * punkClusterInfoIn)virtual HRESULT WINAPI <tom.h>
Notify(IUnknown * punkIn)virtual HRESULT WINAPI <tom.h>
Notify(LONG ExitEvent,LONG Context)virtual HRESULT WINAPI <tom.h>
Notify(LONG lEvent,VARIANT * pVar)virtual HRESULT WINAPI <tom.h>
Notify(LPDATAOBJECT lpDataObject,MMC_NOTIFY_TYPE event,LPARAM arg,LPARAM param)virtual HRESULT WINAPI <tom.h>
Notify(void)virtual HRESULT WINAPI <tom.h>
NotifyAddrChange(PHANDLE Handle,LPOVERLAPPED overlapped) DWORD WINAPI <iphlpapi.h>
NotifyBootConfigStatus(WINBOOL BootAcceptable) WINADVAPI WINBOOL WINAPI <winsvc.h>
NotifyChanged(void)virtual HRESULT WINAPI <subsmgr.h>
NotifyChangeEventLog(HANDLE hEventLog,HANDLE hEvent) WINADVAPI WINBOOL WINAPI <winbase.h>
NotifyEndOfStream(HANDLE hNotifyEvent)virtual HRESULT WINAPI <strmif.h>
NotifyEvent(LONG EventCode,LONG_PTR Param1,LONG_PTR Param2)virtual HRESULT WINAPI <strmif.h>
NotifyGraphChange(void)virtual HRESULT WINAPI <strmif.h>
NotifyIME(HIMC hIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue)virtual HRESULT WINAPI <mshtmlc.h>
NotifyIpInterfaceChange(ADDRESS_FAMILY Family,PIPINTERFACE_CHANGE_CALLBACK Callback,PVOID CallerContext,BOOLEAN InitialNotification,HANDLE * NotificationHandle) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
NOTIFYOFNEWCONNECTION(PLDAP PrimaryConnection,PLDAP ReferralFromConnection,PWCHAR NewDN,PCHAR HostName,PLDAP NewConnection,ULONG PortNumber,PVOID SecAuthIdentity,PVOID CurrentUser,ULONG ErrorCodeFromBind) typedef BOOLEAN<winldap.h>
NotifyOwnerMessage(OAHWND hwnd,__LONG32 uMsg,LONG_PTR wParam,LONG_PTR lParam)virtual HRESULT WINAPI <control.h>
NotifyRedirect(IShellView * psv,LPCITEMIDLIST pidl,WINBOOL * pfDidBrowse)virtual HRESULT WINAPI <shdeprecated.h>
NotifyRouteChange(PHANDLE Handle,LPOVERLAPPED overlapped) DWORD WINAPI <iphlpapi.h>
NotifyRouteChange2(ADDRESS_FAMILY AddressFamily,PIPFORWARD_CHANGE_CALLBACK Callback,PVOID CallerContext,BOOLEAN InitialNotification,HANDLE * NotificationHandle) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
NotifyServiceStatusChange(SC_HANDLE hService,DWORD dwNotifyMask,PSERVICE_NOTIFYA pNotifyBuffer)DWORD WINAPI <winsvc.h>
NotifyServiceStatusChangeA(SC_HANDLE hService,DWORD dwNotifyMask,PSERVICE_NOTIFYA pNotifyBuffer)DWORD WINAPI <winsvc.h>
NotifyServiceStatusChangeW(SC_HANDLE hService,DWORD dwNotifyMask,PSERVICE_NOTIFYW pNotifyBuffer)DWORD WINAPI <winsvc.h>
NotifyStableUnicastIpAddressTable(ADDRESS_FAMILY Family,PMIB_UNICASTIPADDRESS_TABLE * Table,PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK CallerCallback,PVOID CallerContext,HANDLE * NotificationHandle) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
NotifyTeredoPortChange(PTEREDO_PORT_CHANGE_CALLBACK Callback,PVOID CallerContext,BOOLEAN InitialNotification,HANDLE * NotificationHandle) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
NotifyUILanguageChange(DWORD dwFlags,PCWSTR pcwstrNewLanguage,PCWSTR pcwstrPreviousLanguage,DWORD dwReserved,PDWORD pdwStatusRtrn) WINBASEAPI WINBOOL WINAPI <winnls.h>
NotifyUnicastIpAddressChange(ADDRESS_FAMILY Family,PUNICAST_IPADDRESS_CHANGE_CALLBACK Callback,PVOID CallerContext,BOOLEAN InitialNotification,HANDLE * NotificationHandle) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
NotifyWinEvent(DWORD event,HWND hwnd,LONG idObject,LONG idChild) WINUSERAPI VOID WINAPI <winuser.h>
NPAddConnection(LPNETRESOURCEW lpNetResource,LPWSTR lpPassword,LPWSTR lpUserName)DWORD WINAPI <npapi.h>
NPAddConnection3(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPTSTR lpPassword,LPTSTR lpUserName,DWORD dwFlags)DWORD WINAPI <npapi.h>
NPCancelConnection(LPWSTR lpName,WINBOOL fForce)DWORD WINAPI <npapi.h>
NPCloseEnum(HANDLE hEnum)DWORD WINAPI <npapi.h>
NPDeviceMode(HWND hParent)DWORD WINAPI <npapi.h>
NPDirectoryNotify(HWND hwnd,LPWSTR lpDir,DWORD dwOper)DWORD WINAPI <npapi.h>
NPEnumResource(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize)DWORD WINAPI <npapi.h>
NPFMXEditPerm(LPWSTR lpDriveName,HWND hwndFMX,DWORD nDialogType)DWORD WINAPI <npapi.h>
NPFMXGetPermCaps(LPWSTR lpDriveName)DWORD WINAPI <npapi.h>
NPFMXGetPermHelp(LPWSTR lpDriveName,DWORD nDialogType,WINBOOL fDirectory,LPVOID lpFileNameBuffer,LPDWORD lpBufferSize,LPDWORD lpnHelpContext)DWORD WINAPI <npapi.h>
NPFormatNetworkName(LPWSTR lpRemoteName,LPWSTR lpFormattedName,LPDWORD lpnLength,DWORD dwFlags,DWORD dwAveCharPerLine)DWORD WINAPI <npapi.h>
NPGetCaps(DWORD ndex)DWORD WINAPI <npapi.h>
NPGetConnection(LPWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnBufferLen)DWORD WINAPI <npapi.h>
NPGetDirectoryType(LPWSTR lpName,LPINT lpType,WINBOOL bFlushCache)DWORD WINAPI <npapi.h>
NPGetPropertyText(DWORD iButton,DWORD nPropSel,LPWSTR lpName,LPWSTR lpButtonName,DWORD nButtonNameLen,DWORD nType)DWORD WINAPI <npapi.h>
NPGetUniversalName(LPWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize)DWORD WINAPI <npapi.h>
NPGetUser(LPWSTR lpName,LPWSTR lpUserName,LPDWORD lpnBufferLen)DWORD WINAPI <npapi.h>
NPLogonNotify(PLUID lpLogonId,LPCWSTR lpAuthentInfoType,LPVOID lpAuthentInfo,LPCWSTR lpPreviousAuthentInfoType,LPVOID lpPreviousAuthentInfo,LPWSTR lpStationName,LPVOID StationHandle,LPWSTR * lpLogonScript)DWORD WINAPI <npapi.h>
NPOpenEnum(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum)DWORD WINAPI <npapi.h>
NPPasswordChangeNotify(LPCWSTR lpAuthentInfoType,LPVOID lpAuthentInfo,LPCWSTR lpPreviousAuthentInfoType,LPVOID lpPreviousAuthentInfo,LPWSTR lpStationName,LPVOID StationHandle,DWORD dwChangeInfo)DWORD WINAPI <npapi.h>
NPPropertyDialog(HWND hwndParent,DWORD iButtonDlg,DWORD nPropSel,LPWSTR lpFileName,DWORD nType)DWORD WINAPI <npapi.h>
NPSearchDialog(HWND hwndParent,LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,DWORD cbBuffer,LPDWORD lpnFlags)DWORD WINAPI <npapi.h>
NSPStartup(LPGUID lpProviderId,LPNSP_ROUTINE lpnspRoutines) INT WSAAPI <ws2spi.h>
NSTCS_SHOWREFRESHBUTTON(int)<shobjidl.h>
NT_ASSERT(exp)<wdm.h>
NT_ASSERTMSG(msg, exp)<wdm.h>
NT_ASSERTMSGW(msg, exp)<wdm.h>
NT_ERROR(Status)<stierr.h>
NT_INFORMATION(Status)<stierr.h>
NT_SUCCESS(status)<winternl.h>
NT_SUCCESS(Status)<winternl.h>
NT_VERIFY(_exp)      <wdm.h>
NT_VERIFYMSG(_msg, _exp )<wdm.h>
NT_VERIFYMSGW(_msg, _exp)<wdm.h>
NT_WARNING(Status)<stierr.h>
NtAccessCheckAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN ACCESS_MASK DesiredAccess,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PNTSTATUS AccessStatus,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
NtAccessCheckByTypeAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN ACCESS_MASK DesiredAccess,IN AUDIT_EVENT_TYPE AuditType,IN ULONG Flags,IN POBJECT_TYPE_LIST ObjectTypeList OPTIONAL,IN ULONG ObjectTypeLength,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PNTSTATUS AccessStatus,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
NtAccessCheckByTypeResultListAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN ACCESS_MASK DesiredAccess,IN AUDIT_EVENT_TYPE AuditType,IN ULONG Flags,IN POBJECT_TYPE_LIST ObjectTypeList OPTIONAL,IN ULONG ObjectTypeLength,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PNTSTATUS AccessStatus,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
NtAccessCheckByTypeResultListAndAuditAlarmByHandle(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN HANDLE ClientToken,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID PrincipalSelfSid OPTIONAL,IN ACCESS_MASK DesiredAccess,IN AUDIT_EVENT_TYPE AuditType,IN ULONG Flags,IN POBJECT_TYPE_LIST ObjectTypeList OPTIONAL,IN ULONG ObjectTypeLength,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PNTSTATUS AccessStatus,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
NtAdjustGroupsToken(IN HANDLE TokenHandle,IN BOOLEAN ResetToDefault,IN PTOKEN_GROUPS NewState OPTIONAL,IN ULONG BufferLength OPTIONAL,OUT PTOKEN_GROUPS PreviousState,OUT PULONG ReturnLength)<ntifs.h>
NtAdjustPrivilegesToken(IN HANDLE TokenHandle,IN BOOLEAN DisableAllPrivileges,IN PTOKEN_PRIVILEGES NewState OPTIONAL,IN ULONG BufferLength,OUT PTOKEN_PRIVILEGES PreviousState,OUT PULONG ReturnLength OPTIONAL)<ntifs.h>
NtAllocateVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN ULONG_PTR ZeroBits,IN OUT PSIZE_T RegionSize,IN ULONG AllocationType,IN ULONG Protect)<ntifs.h>
NtCancelDeviceWakeupRequest(IN HANDLE Device)<ntpoapi.h>
NtClose(HANDLE Handle) NTSTATUS NTAPI <winternl.h>
NtClose(IN HANDLE Handle)<winternl.h>
NtCloseObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN BOOLEAN GenerateOnClose)<ntifs.h>
NtCommitComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtCommitEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtCommitTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Wait)<wdm.h>
NtCreateEnlistment(OUT PHANDLE EnlistmentHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE ResourceManagerHandle,IN HANDLE TransactionHandle,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN NOTIFICATION_MASK NotificationMask,IN PVOID EnlistmentKey OPTIONAL)<wdm.h>
NtCreateFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER AllocationSize OPTIONAL,IN ULONG FileAttributes,IN ULONG ShareAccess,IN ULONG CreateDisposition,IN ULONG CreateOptions,IN PVOID EaBuffer,IN ULONG EaLength)<winternl.h>
NtCreateFile(PHANDLE FileHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,PIO_STATUS_BLOCK IoStatusBlock,PLARGE_INTEGER AllocationSize,ULONG FileAttributes,ULONG ShareAccess,ULONG CreateDisposition,ULONG CreateOptions,PVOID EaBuffer,ULONG EaLength) NTSTATUS NTAPI <winternl.h>
NtCreateResourceManager(OUT PHANDLE ResourceManagerHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE TmHandle,IN LPGUID RmGuid,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN PUNICODE_STRING Description OPTIONAL)<wdm.h>
NtCreateSection(OUT PHANDLE SectionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PLARGE_INTEGER MaximumSize OPTIONAL,IN ULONG SectionPageProtection,IN ULONG AllocationAttributes,IN HANDLE FileHandle OPTIONAL)<ntifs.h>
NtCreateTransaction(OUT PHANDLE TransactionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN LPGUID Uow OPTIONAL,IN HANDLE TmHandle OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN ULONG IsolationLevel OPTIONAL,IN ULONG IsolationFlags OPTIONAL,IN PLARGE_INTEGER Timeout OPTIONAL,IN PUNICODE_STRING Description OPTIONAL)<wdm.h>
NtCreateTransactionManager(OUT PHANDLE TmHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PUNICODE_STRING LogFileName OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN ULONG CommitStrength OPTIONAL)<wdm.h>
NtCurrentProcess()<wdm.h>
NtCurrentTeb()<winnt.h>
NtCurrentTeb(void) FORCEINLINE struct _TEB<winnt.h>
NtCurrentTeb(VOID)struct _TEB<winnt.h>
NtCurrentThread() <wdm.h>
NTDDI_VERSION_FROM_WIN32_WINNT(Version)<sdkddkver.h>
NTDDI_VERSION_FROM_WIN32_WINNT2()()()
NTDDI_VERSION_FROM_WIN32_WINNT2(Version)<sdkddkver.h>
NtDeleteObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN BOOLEAN GenerateOnClose)<ntifs.h>
NtDeviceIoControlFile(HANDLE FileHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,PIO_STATUS_BLOCK IoStatusBlock,ULONG IoControlCode,PVOID InputBuffer,ULONG InputBufferLength,PVOID OutputBuffer,ULONG OutputBufferLength) NTSTATUS NTAPI <winternl.h>
NtDeviceIoControlFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG IoControlCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength)<winternl.h>
NTDSCONN_IGNORE_SCHEDULE(_options_)<ntdsapi.h>
NtDuplicateToken(IN HANDLE ExistingTokenHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN BOOLEAN EffectiveOnly,IN TOKEN_TYPE TokenType,OUT PHANDLE NewTokenHandle)<ntifs.h>
NtEnumerateTransactionObject(IN HANDLE RootObjectHandle OPTIONAL,IN KTMOBJECT_TYPE QueryType,IN OUT PKTMOBJECT_CURSOR ObjectCursor,IN ULONG ObjectCursorLength,OUT PULONG ReturnLength)<wdm.h>
NtFilterToken(IN HANDLE ExistingTokenHandle,IN ULONG Flags,IN PTOKEN_GROUPS SidsToDisable OPTIONAL,IN PTOKEN_PRIVILEGES PrivilegesToDelete OPTIONAL,IN PTOKEN_GROUPS RestrictedSids OPTIONAL,OUT PHANDLE NewTokenHandle)<ntifs.h>
NtFreeVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN OUT PSIZE_T RegionSize,IN ULONG FreeType)<ntifs.h>
NtFsControlFile(HANDLE FileHandle,HANDLE Event,PIO_APC_ROUTINE ApcRoutine,PVOID ApcContext,PIO_STATUS_BLOCK IoStatusBlock,ULONG IoControlCode,PVOID InputBuffer,ULONG InputBufferLength,PVOID OutputBuffer,ULONG OutputBufferLength) NTSTATUS NTAPI <winternl.h>
NtFsControlFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG FsControlCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength)<winternl.h>
NtGdiAbortDoc(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiAbortPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiAddEmbFontToDC(HDC hdc,VOID ** pFontID)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiAddFontMemResourceEx(PVOID pvBuffer,DWORD cjBuffer,DESIGNVECTOR * pdv,ULONG cjDV,DWORD * pNumFonts)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiAddFontResourceW(WCHAR * pwszFiles,ULONG cwc,ULONG cFiles,FLONG f,DWORD dwPidTid,DESIGNVECTOR * pdv)int W32KAPI WINAPI <ntgdi.h>
NtGdiAddRemoteFontToDC(HDC hdc,PVOID pvBuffer,ULONG cjBuffer,PUNIVERSAL_FONT_ID pufi)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiAddRemoteMMInstanceToDC(HDC hdc,DOWNLOADDESIGNVECTOR * pddv,ULONG cjDDV)W32KAPI WINBOOL <ntgdi.h>
NtGdiAlphaBlend(HDC hdcDst,LONG DstX,LONG DstY,LONG DstCx,LONG DstCy,HDC hdcSrc,LONG SrcX,LONG SrcY,LONG SrcCx,LONG SrcCy,BLENDFUNCTION BlendFunction,HANDLE hcmXform)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiAngleArc(HDC hdc,int x,int y,DWORD dwRadius,DWORD dwStartAngle,DWORD dwSweepAngle)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiAnyLinkedFonts()W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiArcInternal(ARCTYPE arctype,HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiBeginPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiBitBlt(HDC hdcDst,int x,int y,int cx,int cy,HDC hdcSrc,int xSrc,int ySrc,DWORD rop4,DWORD crBackColor,FLONG fl)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiBRUSHOBJ_DeleteRbrush(BRUSHOBJ * pbo,BRUSHOBJ * pboB)W32KAPI WINBOOL <ntgdi.h>
NtGdiBRUSHOBJ_hGetColorTransform(BRUSHOBJ * pbo)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiBRUSHOBJ_pvAllocRbrush(BRUSHOBJ * pbo,ULONG cj)W32KAPI PVOID WINAPI <ntgdi.h>
NtGdiBRUSHOBJ_pvGetRbrush(BRUSHOBJ * pbo)W32KAPI PVOID WINAPI <ntgdi.h>
NtGdiBRUSHOBJ_ulGetBrushColor(BRUSHOBJ * pbo)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiCancelDC(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiChangeGhostFont(KERNEL_PVOID * pfontID,WINBOOL bLoad)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiCheckBitmapBits(HDC hdc,HANDLE hColorTransform,PVOID pvBits,ULONG bmFormat,DWORD dwWidth,DWORD dwHeight,DWORD dwStride,PBYTE paResults)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiClearBitmapAttributes(HBITMAP hbm,DWORD dwFlags)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiClearBrushAttributes(HBRUSH hbm,DWORD dwFlags)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiCLIPOBJ_bEnum(CLIPOBJ * pco,ULONG cj,ULONG * pul)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiCLIPOBJ_cEnumStart(CLIPOBJ * pco,WINBOOL bAll,ULONG iType,ULONG iDirection,ULONG cLimit)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiCLIPOBJ_ppoGetPath(CLIPOBJ * pco)W32KAPI PATHOBJ<ntgdi.h>
NtGdiCloseFigure(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiColorCorrectPalette(HDC hdc,HPALETTE hpal,ULONG FirstEntry,ULONG NumberOfEntries,PALETTEENTRY * ppalEntry,ULONG Command)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiCombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,int iMode)W32KAPI int WINAPI <ntgdi.h>
NtGdiCombineTransform(LPXFORM pxfDst,LPXFORM pxfSrc1,LPXFORM pxfSrc2)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiComputeXformCoefficients(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiConsoleTextOut(HDC hdc,POLYTEXTW * lpto,UINT nStrings,RECTL * prclBounds)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiConvertMetafileRect(HDC hdc,PRECTL prect)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiCreateBitmap(int cx,int cy,UINT cPlanes,UINT cBPP,LPBYTE pjInit)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiCreateClientObj(ULONG ulType)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiCreateColorSpace(PLOGCOLORSPACEEXW pLogColorSpace)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiCreateColorTransform(HDC hdc,LPLOGCOLORSPACEW pLogColorSpaceW,PVOID pvSrcProfile,ULONG cjSrcProfile,PVOID pvDestProfile,ULONG cjDestProfile,PVOID pvTargetProfile,ULONG cjTargetProfile)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiCreateCompatibleBitmap(HDC hdc,int cx,int cy)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiCreateCompatibleDC(HDC hdc)W32KAPI HDC WINAPI <ntgdi.h>
NtGdiCreateDIBBrush(PVOID pv,FLONG fl,UINT cj,WINBOOL b8X8,WINBOOL bPen,PVOID pClient)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiCreateDIBitmapInternal(HDC hdc,INT cx,INT cy,DWORD fInit,LPBYTE pjInit,LPBITMAPINFO pbmi,DWORD iUsage,UINT cjMaxInitInfo,UINT cjMaxBits,FLONG f,HANDLE hcmXform)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiCreateDIBSection(HDC hdc,HANDLE hSectionApp,DWORD dwOffset,LPBITMAPINFO pbmi,DWORD iUsage,UINT cjHeader,FLONG fl,ULONG_PTR dwColorSpace,PVOID * ppvBits)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiCreateEllipticRgn(int xLeft,int yTop,int xRight,int yBottom)W32KAPI HRGN WINAPI <ntgdi.h>
NtGdiCreateHalftonePalette(HDC hdc)W32KAPI HPALETTE WINAPI <ntgdi.h>
NtGdiCreateHatchBrushInternal(ULONG ulStyle,COLORREF clrr,WINBOOL bPen)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiCreateMetafileDC(HDC hdc)W32KAPI HDC WINAPI <ntgdi.h>
NtGdiCreatePaletteInternal(LPLOGPALETTE pLogPal,UINT cEntries)W32KAPI HPALETTE WINAPI <ntgdi.h>
NtGdiCreatePatternBrushInternal(HBITMAP hbm,WINBOOL bPen,WINBOOL b8X8)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiCreatePen(int iPenStyle,int iPenWidth,COLORREF cr,HBRUSH hbr)W32KAPI HPEN WINAPI <ntgdi.h>
NtGdiCreateRectRgn(int xLeft,int yTop,int xRight,int yBottom)W32KAPI HRGN WINAPI <ntgdi.h>
NtGdiCreateRoundRectRgn(int xLeft,int yTop,int xRight,int yBottom,int xWidth,int yHeight)W32KAPI HRGN WINAPI <ntgdi.h>
NtGdiCreateServerMetaFile(DWORD iType,ULONG cjData,LPBYTE pjData,DWORD mm,DWORD xExt,DWORD yExt)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiCreateSolidBrush(COLORREF cr,HBRUSH hbr)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiD3dContextCreate(HANDLE hDirectDrawLocal,HANDLE hSurfColor,HANDLE hSurfZ,D3DNTHAL_CONTEXTCREATEI * pdcci)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiD3dContextDestroy(LPD3DNTHAL_CONTEXTDESTROYDATA)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiD3dContextDestroyAll(LPD3DNTHAL_CONTEXTDESTROYALLDATA pdcdad)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiD3dDrawPrimitives2(HANDLE hCmdBuf,HANDLE hVBuf,LPD3DNTHAL_DRAWPRIMITIVES2DATA pded,FLATPTR * pfpVidMemCmd,DWORD * pdwSizeCmd,FLATPTR * pfpVidMemVtx,DWORD * pdwSizeVtx)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiD3dValidateTextureStageState(LPD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA pData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdAddAttachedSurface(HANDLE hSurface,HANDLE hSurfaceAttached,PDD_ADDATTACHEDSURFACEDATA puAddAttachedSurfaceData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdAlphaBlt(HANDLE hSurfaceDest,HANDLE hSurfaceSrc,PDD_BLTDATA puBltData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdAttachSurface(HANDLE hSurfaceFrom,HANDLE hSurfaceTo)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdBeginMoCompFrame(HANDLE hMoComp,PDD_BEGINMOCOMPFRAMEDATA puBeginFrameData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdBlt(HANDLE hSurfaceDest,HANDLE hSurfaceSrc,PDD_BLTDATA puBltData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdCanCreateD3DBuffer(HANDLE hDirectDraw,PDD_CANCREATESURFACEDATA puCanCreateSurfaceData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdCanCreateSurface(HANDLE hDirectDraw,PDD_CANCREATESURFACEDATA puCanCreateSurfaceData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdColorControl(HANDLE hSurface,PDD_COLORCONTROLDATA puColorControlData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdCreateD3DBuffer(HANDLE hDirectDraw,HANDLE * hSurface,DDSURFACEDESC * puSurfaceDescription,DD_SURFACE_GLOBAL * puSurfaceGlobalData,DD_SURFACE_LOCAL * puSurfaceLocalData,DD_SURFACE_MORE * puSurfaceMoreData,DD_CREATESURFACEDATA * puCreateSurfaceData,HANDLE * puhSurface)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdCreateDirectDrawObject(HDC hdc)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiDdCreateMoComp(HANDLE hDirectDraw,PDD_CREATEMOCOMPDATA puCreateMoCompData)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiDdCreateSurface(HANDLE hDirectDraw,HANDLE * hSurface,DDSURFACEDESC * puSurfaceDescription,DD_SURFACE_GLOBAL * puSurfaceGlobalData,DD_SURFACE_LOCAL * puSurfaceLocalData,DD_SURFACE_MORE * puSurfaceMoreData,DD_CREATESURFACEDATA * puCreateSurfaceData,HANDLE * puhSurface)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdCreateSurfaceEx(HANDLE hDirectDraw,HANDLE hSurface,DWORD dwSurfaceHandle)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdCreateSurfaceObject(HANDLE hDirectDrawLocal,HANDLE hSurface,PDD_SURFACE_LOCAL puSurfaceLocal,PDD_SURFACE_MORE puSurfaceMore,PDD_SURFACE_GLOBAL puSurfaceGlobal,WINBOOL bComplete)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiDdDeleteDirectDrawObject(HANDLE hDirectDrawLocal)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdDeleteSurfaceObject(HANDLE hSurface)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdDestroyD3DBuffer(HANDLE hSurface)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdDestroyMoComp(HANDLE hMoComp,PDD_DESTROYMOCOMPDATA puDestroyMoCompData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdDestroySurface(HANDLE hSurface,WINBOOL bRealDestroy)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdEndMoCompFrame(HANDLE hMoComp,PDD_ENDMOCOMPFRAMEDATA puEndFrameData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdFlip(HANDLE hSurfaceCurrent,HANDLE hSurfaceTarget,HANDLE hSurfaceCurrentLeft,HANDLE hSurfaceTargetLeft,PDD_FLIPDATA puFlipData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdFlipToGDISurface(HANDLE hDirectDraw,PDD_FLIPTOGDISURFACEDATA puFlipToGDISurfaceData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetAvailDriverMemory(HANDLE hDirectDraw,PDD_GETAVAILDRIVERMEMORYDATA puGetAvailDriverMemoryData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetBltStatus(HANDLE hSurface,PDD_GETBLTSTATUSDATA puGetBltStatusData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetDC(HANDLE hSurface,PALETTEENTRY * puColorTable)W32KAPI HDC WINAPI <ntgdi.h>
NtGdiDdGetDriverInfo(HANDLE hDirectDraw,PDD_GETDRIVERINFODATA puGetDriverInfoData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetDriverState(PDD_GETDRIVERSTATEDATA pdata)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetDxHandle(HANDLE hDirectDraw,HANDLE hSurface,WINBOOL bRelease)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiDdGetFlipStatus(HANDLE hSurface,PDD_GETFLIPSTATUSDATA puGetFlipStatusData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetInternalMoCompInfo(HANDLE hDirectDraw,PDD_GETINTERNALMOCOMPDATA puGetInternalData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetMoCompBuffInfo(HANDLE hDirectDraw,PDD_GETMOCOMPCOMPBUFFDATA puGetBuffData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetMoCompFormats(HANDLE hDirectDraw,PDD_GETMOCOMPFORMATSDATA puGetMoCompFormatsData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetMoCompGuids(HANDLE hDirectDraw,PDD_GETMOCOMPGUIDSDATA puGetMoCompGuidsData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdGetScanLine(HANDLE hDirectDraw,PDD_GETSCANLINEDATA puGetScanLineData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdLock(HANDLE hSurface,PDD_LOCKDATA puLockData,HDC hdcClip)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdLockD3D(HANDLE hSurface,PDD_LOCKDATA puLockData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdQueryDirectDrawObject(HANDLE hDirectDrawLocal,PDD_HALINFO pHalInfo,DWORD * pCallBackFlags,LPD3DNTHAL_CALLBACKS puD3dCallbacks,LPD3DNTHAL_GLOBALDRIVERDATA puD3dDriverData,PDD_D3DBUFCALLBACKS puD3dBufferCallbacks,LPDDSURFACEDESC puD3dTextureFormats,DWORD * puNumHeaps,VIDEOMEMORY * puvmList,DWORD * puNumFourCC,DWORD * puFourCC)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdQueryMoCompStatus(HANDLE hMoComp,PDD_QUERYMOCOMPSTATUSDATA puQueryMoCompStatusData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdReenableDirectDrawObject(HANDLE hDirectDrawLocal,WINBOOL * pubNewMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdReleaseDC(HANDLE hSurface)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdRenderMoComp(HANDLE hMoComp,PDD_RENDERMOCOMPDATA puRenderMoCompData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdResetVisrgn(HANDLE hSurface,HWND hwnd)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdSetColorKey(HANDLE hSurface,PDD_SETCOLORKEYDATA puSetColorKeyData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdSetExclusiveMode(HANDLE hDirectDraw,PDD_SETEXCLUSIVEMODEDATA puSetExclusiveModeData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdSetGammaRamp(HANDLE hDirectDraw,HDC hdc,LPVOID lpGammaRamp)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDdSetOverlayPosition(HANDLE hSurfaceSource,HANDLE hSurfaceDestination,PDD_SETOVERLAYPOSITIONDATA puSetOverlayPositionData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdUnattachSurface(HANDLE hSurface,HANDLE hSurfaceAttached)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiDdUnlock(HANDLE hSurface,PDD_UNLOCKDATA puUnlockData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdUnlockD3D(HANDLE hSurface,PDD_UNLOCKDATA puUnlockData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdUpdateOverlay(HANDLE hSurfaceDestination,HANDLE hSurfaceSource,PDD_UPDATEOVERLAYDATA puUpdateOverlayData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDdWaitForVerticalBlank(HANDLE hDirectDraw,PDD_WAITFORVERTICALBLANKDATA puWaitForVerticalBlankData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDeleteClientObj(HANDLE h)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDeleteColorSpace(HANDLE hColorSpace)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDeleteColorTransform(HDC hdc,HANDLE hColorTransform)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDeleteObjectApp(HANDLE hobj)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDescribePixelFormat(HDC hdc,int ipfd,UINT cjpfd,PPIXELFORMATDESCRIPTOR ppfd)W32KAPI int WINAPI <ntgdi.h>
NtGdiDoBanding(HDC hdc,WINBOOL bStart,POINTL * pptl,PSIZE pSize)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDoPalette(HPALETTE hpal,WORD iStart,WORD cEntries,PALETTEENTRY * pPalEntries,DWORD iFunc,WINBOOL bInbound)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiDrawEscape(HDC hdc,int iEsc,int cjIn,LPSTR pjIn)W32KAPI int WINAPI <ntgdi.h>
NtGdiDrawStream(HDC hdcDst,ULONG cjIn,VOID * pvIn)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiDvpAcquireNotification(HANDLE hVideoPort,HANDLE * hEvent,LPDDVIDEOPORTNOTIFY pNotify)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpCanCreateVideoPort(HANDLE hDirectDraw,PDD_CANCREATEVPORTDATA puCanCreateVPortData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpColorControl(HANDLE hVideoPort,PDD_VPORTCOLORDATA puVPortColorData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpCreateVideoPort(HANDLE hDirectDraw,PDD_CREATEVPORTDATA puCreateVPortData)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiDvpDestroyVideoPort(HANDLE hVideoPort,PDD_DESTROYVPORTDATA puDestroyVPortData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpFlipVideoPort(HANDLE hVideoPort,HANDLE hDDSurfaceCurrent,HANDLE hDDSurfaceTarget,PDD_FLIPVPORTDATA puFlipVPortData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortBandwidth(HANDLE hVideoPort,PDD_GETVPORTBANDWIDTHDATA puGetVPortBandwidthData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortConnectInfo(HANDLE hDirectDraw,PDD_GETVPORTCONNECTDATA puGetVPortConnectData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortField(HANDLE hVideoPort,PDD_GETVPORTFIELDDATA puGetVPortFieldData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortFlipStatus(HANDLE hDirectDraw,PDD_GETVPORTFLIPSTATUSDATA puGetVPortFlipStatusData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortInputFormats(HANDLE hVideoPort,PDD_GETVPORTINPUTFORMATDATA puGetVPortInputFormatData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortLine(HANDLE hVideoPort,PDD_GETVPORTLINEDATA puGetVPortLineData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoPortOutputFormats(HANDLE hVideoPort,PDD_GETVPORTOUTPUTFORMATDATA puGetVPortOutputFormatData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpGetVideoSignalStatus(HANDLE hVideoPort,PDD_GETVPORTSIGNALDATA puGetVPortSignalData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpReleaseNotification(HANDLE hVideoPort,HANDLE hEvent)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpUpdateVideoPort(HANDLE hVideoPort,HANDLE * phSurfaceVideo,HANDLE * phSurfaceVbi,PDD_UPDATEVPORTDATA puUpdateVPortData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDvpWaitForVideoPortSync(HANDLE hVideoPort,PDD_WAITFORVPORTSYNCDATA puWaitForVPortSyncData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiDxgGenericThunk(ULONG_PTR ulIndex,ULONG_PTR ulHandle,SIZE_T * pdwSizeOfPtr1,PVOID pvPtr1,SIZE_T * pdwSizeOfPtr2,PVOID pvPtr2)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiEllipse(HDC hdc,int xLeft,int yTop,int xRight,int yBottom)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEnableEudc(WINBOOL)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEndDoc(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEndPage(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEndPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngAlphaBlend(SURFOBJ * psoDest,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDest,RECTL * prclSrc,BLENDOBJ * pBlendObj)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngAssociateSurface(HSURF hsurf,HDEV hdev,FLONG flHooks)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngBitBlt(SURFOBJ * psoDst,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDst,POINTL * pptlSrc,POINTL * pptlMask,BRUSHOBJ * pbo,POINTL * pptlBrush,ROP4 rop4)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngCheckAbort(SURFOBJ * pso)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngComputeGlyphSet(INT nCodePage,INT nFirstChar,INT cChars)W32KAPI FD_GLYPHSET<ntgdi.h>
NtGdiEngCopyBits(SURFOBJ * psoDst,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDst,POINTL * pptlSrc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngCreateBitmap(SIZEL sizl,LONG lWidth,ULONG iFormat,FLONG fl,PVOID pvBits)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiEngCreateClip()W32KAPI CLIPOBJ<ntgdi.h>
NtGdiEngCreateDeviceBitmap(DHSURF dhsurf,SIZEL sizl,ULONG iFormatCompat)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiEngCreateDeviceSurface(DHSURF dhsurf,SIZEL sizl,ULONG iFormatCompat)W32KAPI HSURF WINAPI <ntgdi.h>
NtGdiEngCreatePalette(ULONG iMode,ULONG cColors,ULONG * pulColors,FLONG flRed,FLONG flGreen,FLONG flBlue)W32KAPI HPALETTE WINAPI <ntgdi.h>
NtGdiEngDeleteClip(CLIPOBJ * pco)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiEngDeletePalette(HPALETTE hPal)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngDeletePath(PATHOBJ * ppo)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiEngDeleteSurface(HSURF hsurf)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngEraseSurface(SURFOBJ * pso,RECTL * prcl,ULONG iColor)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngFillPath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,MIX mix,FLONG flOptions)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngGradientFill(SURFOBJ * psoDest,CLIPOBJ * pco,XLATEOBJ * pxlo,TRIVERTEX * pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,RECTL * prclExtents,POINTL * pptlDitherOrg,ULONG ulMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngLineTo(SURFOBJ * pso,CLIPOBJ * pco,BRUSHOBJ * pbo,LONG x1,LONG y1,LONG x2,LONG y2,RECTL * prclBounds,MIX mix)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngLockSurface(HSURF hsurf)W32KAPI SURFOBJ<ntgdi.h>
NtGdiEngMarkBandingSurface(HSURF hsurf)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngPaint(SURFOBJ * pso,CLIPOBJ * pco,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,MIX mix)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngPlgBlt(SURFOBJ * psoTrg,SURFOBJ * psoSrc,SURFOBJ * psoMsk,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlBrushOrg,POINTFIX * pptfxDest,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngStretchBlt(SURFOBJ * psoDest,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlHTOrg,RECTL * prclDest,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngStretchBltROP(SURFOBJ * psoTrg,SURFOBJ * psoSrc,SURFOBJ * psoMask,CLIPOBJ * pco,XLATEOBJ * pxlo,COLORADJUSTMENT * pca,POINTL * pptlBrushOrg,RECTL * prclTrg,RECTL * prclSrc,POINTL * pptlMask,ULONG iMode,BRUSHOBJ * pbo,ROP4 rop4)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngStrokeAndFillPath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,XFORMOBJ * pxo,BRUSHOBJ * pboStroke,LINEATTRS * plineattrs,BRUSHOBJ * pboFill,POINTL * pptlBrushOrg,MIX mix,FLONG flOptions)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngStrokePath(SURFOBJ * pso,PATHOBJ * ppo,CLIPOBJ * pco,XFORMOBJ * pxo,BRUSHOBJ * pbo,POINTL * pptlBrushOrg,LINEATTRS * plineattrs,MIX mix)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngTextOut(SURFOBJ * pso,STROBJ * pstro,FONTOBJ * pfo,CLIPOBJ * pco,RECTL * prclExtra,RECTL * prclOpaque,BRUSHOBJ * pboFore,BRUSHOBJ * pboOpaque,POINTL * pptlOrg,MIX mix)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngTransparentBlt(SURFOBJ * psoDst,SURFOBJ * psoSrc,CLIPOBJ * pco,XLATEOBJ * pxlo,RECTL * prclDst,RECTL * prclSrc,ULONG iTransColor,ULONG ulReserved)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEngUnlockSurface(SURFOBJ *)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiEnumFontChunk(HDC hdc,ULONG_PTR idEnum,ULONG cjEfdw,ULONG * pcjEfdw,PENUMFONTDATAW pefdw)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEnumFontClose(ULONG_PTR idEnum)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEnumFontOpen(HDC hdc,ULONG iEnumType,FLONG flWin31Compat,ULONG cwchMax,LPWSTR pwszFaceName,ULONG lfCharSet,ULONG * pulCount)W32KAPI ULONG_PTR WINAPI <ntgdi.h>
NtGdiEnumObjects(HDC hdc,int iObjectType,ULONG cjBuf,PVOID pvBuf)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiEqualRgn(HRGN hrgn1,HRGN hrgn2)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiEudcLoadUnloadLink(LPCWSTR pBaseFaceName,UINT cwcBaseFaceName,LPCWSTR pEudcFontPath,UINT cwcEudcFontPath,INT iPriority,INT iFontLinkType,WINBOOL bLoadLin)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiExcludeClipRect(HDC hdc,int xLeft,int yTop,int xRight,int yBottom)W32KAPI int WINAPI <ntgdi.h>
NtGdiExtCreatePen(ULONG flPenStyle,ULONG ulWidth,ULONG iBrushStyle,ULONG ulColor,ULONG_PTR lClientHatch,ULONG_PTR lHatch,ULONG cstyle,PULONG pulStyle,ULONG cjDIB,WINBOOL bOldStylePen,HBRUSH hbrush)W32KAPI HPEN WINAPI <ntgdi.h>
NtGdiExtCreateRegion(LPXFORM px,DWORD cj,LPRGNDATA prgn)W32KAPI HRGN WINAPI <ntgdi.h>
NtGdiExtEscape(HDC hdc,PWCHAR pDriver,int nDriver,int iEsc,int cjIn,LPSTR pjIn,int cjOut,LPSTR pjOut)W32KAPI int WINAPI <ntgdi.h>
NtGdiExtFloodFill(HDC hdc,INT x,INT y,COLORREF crColor,UINT iFillType)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiExtGetObjectW(HANDLE h,int cj,LPVOID pvOut)W32KAPI int WINAPI <ntgdi.h>
NtGdiExtSelectClipRgn(HDC hdc,HRGN hrgn,int iMode)W32KAPI int WINAPI <ntgdi.h>
NtGdiExtTextOutW(HDC hdc,int x,int y,UINT flOpts,LPRECT prcl,LPWSTR pwsz,int cwc,LPINT pdx,DWORD dwCodePage)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFillPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFillRgn(HDC hdc,HRGN hrgn,HBRUSH hbrush)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFlattenPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFlush()W32KAPI VOID WINAPI <ntgdi.h>
NtGdiFontIsLinked(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFONTOBJ_cGetAllGlyphHandles(FONTOBJ * pfo,HGLYPH * phg)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiFONTOBJ_cGetGlyphs(FONTOBJ * pfo,ULONG iMode,ULONG cGlyph,HGLYPH * phg,PVOID * ppvGlyph)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiFONTOBJ_pfdg(FONTOBJ * pfo)W32KAPI FD_GLYPHSET<ntgdi.h>
NtGdiFONTOBJ_pifi(FONTOBJ * pfo)W32KAPI IFIMETRICS<ntgdi.h>
NtGdiFONTOBJ_pQueryGlyphAttrs(FONTOBJ * pfo,ULONG iMode)W32KAPI PFD_GLYPHATTR WINAPI <ntgdi.h>
NtGdiFONTOBJ_pvTrueTypeFontFile(FONTOBJ * pfo,ULONG * pcjFile)W32KAPI PVOID WINAPI <ntgdi.h>
NtGdiFONTOBJ_pxoGetXform(FONTOBJ * pfo)W32KAPI XFORMOBJ<ntgdi.h>
NtGdiFONTOBJ_vGetInfo(FONTOBJ * pfo,ULONG cjSize,FONTINFO * pfi)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiForceUFIMapping(HDC hdc,PUNIVERSAL_FONT_ID pufi)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbrush,int xWidth,int yHeight)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiFullscreenControl(FULLSCREENCONTROL FullscreenCommand,PVOID FullscreenInput,DWORD FullscreenInputLength,PVOID FullscreenOutput,PULONG FullscreenOutputLength)W32KAPI NTSTATUS WINAPI <ntgdi.h>
NtGdiGetAndSetDCDword(HDC hdc,UINT u,DWORD dwIn,DWORD * pdwResult)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetAppClipBox(HDC hdc,LPRECT prc)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetBitmapBits(HBITMAP hbm,ULONG cjMax,PBYTE pjOut)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiGetBitmapDimension(HBITMAP hbm,LPSIZE psize)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetBoundsRect(HDC hdc,LPRECT prc,DWORD f)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiGetCharABCWidthsW(HDC hdc,UINT wchFirst,ULONG cwch,PWCHAR pwch,FLONG fl,PVOID pvBuf)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetCharacterPlacementW(HDC hdc,LPWSTR pwsz,int nCount,int nMaxExtent,LPGCP_RESULTSW pgcpw,DWORD dwFlags)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiGetCharSet(HDC hdc)W32KAPI DWORD <ntgdi.h>
NtGdiGetCharWidthInfo(HDC hdc,PCHWIDTHINFO pChWidthInfo)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetCharWidthW(HDC hdc,UINT wcFirst,UINT cwc,PWCHAR pwc,FLONG fl,PVOID pvBuf)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetColorAdjustment(HDC hdc,PCOLORADJUSTMENT pcaOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetColorSpaceforBitmap(HBITMAP hsurf)W32KAPI ULONG_PTR WINAPI <ntgdi.h>
NtGdiGetDCDword(HDC hdc,UINT u,DWORD * Result)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetDCforBitmap(HBITMAP hsurf)W32KAPI HDC WINAPI <ntgdi.h>
NtGdiGetDCObject(HDC hdc,int itype)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiGetDCPoint(HDC hdc,UINT iPoint,PPOINTL pptOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetDeviceCaps(HDC hdc,int i)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetDeviceCapsAll(HDC hdc,PDEVCAPS pDevCaps)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetDeviceGammaRamp(HDC hdc,LPVOID lpGammaRamp)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetDeviceWidth(HDC hdc)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiGetDhpdev(HDEV hdev)W32KAPI DHPDEV <ntgdi.h>
NtGdiGetDIBitsInternal(HDC hdc,HBITMAP hbm,UINT iStartScan,UINT cScans,LPBYTE pBits,LPBITMAPINFO pbmi,UINT iUsage,UINT cjMaxBits,UINT cjMaxInfo)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetEmbedFonts()W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetEmbUFI(HDC hdc,PUNIVERSAL_FONT_ID pufi,DESIGNVECTOR * pdv,ULONG * pcjDV,ULONG * pulBaseCheckSum,FLONG * pfl,KERNEL_PVOID * embFontID)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetETM(HDC hdc,EXTTEXTMETRIC * petm)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetEudcTimeStampEx(LPWSTR lpBaseFaceName,ULONG cwcBaseFaceName,WINBOOL bSystemTimeStamp)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetFontData(HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuf,ULONG cjBuf)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetFontResourceInfoInternalW(LPWSTR pwszFiles,ULONG cwc,ULONG cFiles,UINT cjIn,LPDWORD pdwBytes,LPVOID pvBuf,DWORD iType)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetFontUnicodeRanges(HDC hdc,LPGLYPHSET pgs)W32KAPI DWORD <ntgdi.h>
NtGdiGetGlyphIndicesW(HDC hdc,LPWSTR pwc,int cwc,LPWORD pgi,DWORD iMode)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiGetGlyphIndicesWInternal(HDC hdc,LPWSTR pwc,int cwc,LPWORD pgi,DWORD iMode,WINBOOL bSubset)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiGetGlyphOutline(HDC hdc,WCHAR wch,UINT iFormat,LPGLYPHMETRICS pgm,ULONG cjBuf,PVOID pvBuf,LPMAT2 pmat2,WINBOOL bIgnoreRotation)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetKerningPairs(HDC hdc,ULONG cPairs,KERNINGPAIR * pkpDst)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetLinkedUFIs(HDC hdc,PUNIVERSAL_FONT_ID pufiLinkedUFIs,INT BufferSize)W32KAPI INT WINAPI <ntgdi.h>
NtGdiGetMiterLimit(HDC hdc,PDWORD pdwOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetMonitorID(HDC hdc,DWORD dwSize,LPWSTR pszMonitorID)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetNearestColor(HDC hdc,COLORREF cr)W32KAPI COLORREF WINAPI <ntgdi.h>
NtGdiGetNearestPaletteIndex(HPALETTE hpal,COLORREF crColor)W32KAPI UINT WINAPI <ntgdi.h>
NtGdiGetObjectBitmapHandle(HBRUSH hbr,UINT * piUsage)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiGetOutlineTextMetricsInternalW(HDC hdc,ULONG cjotm,OUTLINETEXTMETRICW * potmw,TMDIFF * ptmd)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetPath(HDC hdc,LPPOINT pptlBuf,LPBYTE pjTypes,int cptBuf)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetPerBandInfo(HDC hdc,PERBANDINFO * ppbi)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetPixel(HDC hdc,int x,int y)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiGetRandomRgn(HDC hdc,HRGN hrgn,int iRgn)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetRasterizerCaps(LPRASTERIZER_STATUS praststat,ULONG cjBytes)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetRealizationInfo(HDC hdc,PREALIZATION_INFO pri,HFONT hf)W32KAPI WINBOOL <ntgdi.h>
NtGdiGetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiGetRgnBox(HRGN hrgn,LPRECT prcOut)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetServerMetaFileBits(HANDLE hmo,ULONG cjData,LPBYTE pjData,PDWORD piType,PDWORD pmm,PDWORD pxExt,PDWORD pyExt)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiGetStats(HANDLE hProcess,int iIndex,int iPidType,PVOID pResults,UINT cjResultSize)W32KAPI NTSTATUS WINAPI <ntgdi.h>
NtGdiGetStockObject(int iObject)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiGetStringBitmapW(HDC hdc,LPWSTR pwsz,UINT cwc,BYTE * lpSB,UINT cj)W32KAPI UINT WINAPI <ntgdi.h>
NtGdiGetSystemPaletteUse(HDC hdc)W32KAPI UINT WINAPI <ntgdi.h>
NtGdiGetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetTextExtent(HDC hdc,LPWSTR lpwsz,int cwc,LPSIZE psize,UINT flOpts)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetTextExtentExW(HDC hdc,LPWSTR lpwsz,ULONG cwc,ULONG dxMax,ULONG * pcCh,PULONG pdxOut,LPSIZE psize,FLONG fl)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetTextFaceW(HDC hdc,int cChar,LPWSTR pszOut,WINBOOL bAliasName)W32KAPI int WINAPI <ntgdi.h>
NtGdiGetTextMetricsW(HDC hdc,TMW_INTERNAL * ptm,ULONG cj)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetTransform(HDC hdc,DWORD iXform,LPXFORM pxf)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetUFI(HDC hdc,PUNIVERSAL_FONT_ID pufi,DESIGNVECTOR * pdv,ULONG * pcjDV,ULONG * pulBaseCheckSum,FLONG * pfl)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetUFIPathname(PUNIVERSAL_FONT_ID pufi,ULONG * pcwc,LPWSTR pwszPathname,ULONG * pcNumFiles,FLONG fl,WINBOOL * pbMemFont,ULONG * pcjView,PVOID pvView,WINBOOL * pbTTC,ULONG * piTTC)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGetWidthTable(HDC hdc,ULONG cSpecial,WCHAR * pwc,ULONG cwc,USHORT * psWidth,WIDTHDATA * pwd,FLONG * pflInfo)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiGradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiHfontCreate(ENUMLOGFONTEXDVW * pelfw,ULONG cjElfw,LFTYPE lft,FLONG fl,PVOID pvCliData)W32KAPI HFONT WINAPI <ntgdi.h>
NtGdiHT_Get8BPPFormatPalette(LPPALETTEENTRY pPaletteEntry,USHORT RedGamma,USHORT GreenGamma,USHORT BlueGamma)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiHT_Get8BPPMaskPalette(LPPALETTEENTRY pPaletteEntry,WINBOOL Use8BPPMaskPal,BYTE CMYMask,USHORT RedGamma,USHORT GreenGamma,USHORT BlueGamma)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiIcmBrushInfo(HDC hdc,HBRUSH hbrush,PBITMAPINFO pbmiDIB,PVOID pvBits,ULONG * pulBits,DWORD * piUsage,WINBOOL * pbAlreadyTran,ULONG Command)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiInit()W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiIntersectClipRect(HDC hdc,int xLeft,int yTop,int xRight,int yBottom)W32KAPI int WINAPI <ntgdi.h>
NtGdiInvertRgn(HDC hdc,HRGN hrgn)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiLineTo(HDC hdc,int x,int y)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMakeFontDir(FLONG flEmbed,PBYTE pjFontDir,unsigned cjFontDir,LPWSTR pwszPathname,unsigned cjPathname)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiMakeInfoDC(HDC hdc,WINBOOL bSet)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMakeObjectUnXferable(HANDLE h)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMakeObjectXferable(HANDLE h,DWORD dwProcessId)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMaskBlt(HDC hdc,int xDst,int yDst,int cx,int cy,HDC hdcSrc,int xSrc,int ySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD dwRop4,DWORD crBackColor)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMirrorWindowOrg(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiModifyWorldTransform(HDC hdc,LPXFORM pxf,DWORD iXform)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMonoBitmap(HBITMAP hbm)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiMoveTo(HDC hdc,int x,int y,LPPOINT pptOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiOffsetClipRgn(HDC hdc,int x,int y)W32KAPI int WINAPI <ntgdi.h>
NtGdiOffsetRgn(HRGN hrgn,int cx,int cy)W32KAPI int WINAPI <ntgdi.h>
NtGdiOpenDCW(PUNICODE_STRING pustrDevice,DEVMODEW * pdm,PUNICODE_STRING pustrLogAddr,ULONG iType,HANDLE hspool,VOID * pDriverInfo2,VOID * pUMdhpdev)W32KAPI HDC WINAPI <ntgdi.h>
NtGdiPatBlt(HDC hdcDst,int x,int y,int cx,int cy,DWORD rop4)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPATHOBJ_bEnum(PATHOBJ * ppo,PATHDATA * ppd)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPATHOBJ_bEnumClipLines(PATHOBJ * ppo,ULONG cb,CLIPLINE * pcl)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPATHOBJ_vEnumStart(PATHOBJ * ppo)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiPATHOBJ_vEnumStartClipLines(PATHOBJ * ppo,CLIPOBJ * pco,SURFOBJ * pso,LINEATTRS * pla)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiPATHOBJ_vGetBounds(PATHOBJ * ppo,PRECTFX prectfx)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiPathToRegion(HDC hdc)W32KAPI HRGN WINAPI <ntgdi.h>
NtGdiPlgBlt(HDC hdcTrg,LPPOINT pptlTrg,HDC hdcSrc,int xSrc,int ySrc,int cxSrc,int cySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD crBackColor)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPolyDraw(HDC hdc,LPPOINT ppt,LPBYTE pjAttr,ULONG cpt)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPolyPatBlt(HDC hdc,DWORD rop4,PPOLYPATBLT pPoly,DWORD Count,DWORD Mode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPolyPolyDraw(HDC hdc,PPOINT ppt,PULONG pcpt,ULONG ccpt,int iFunc)W32KAPI ULONG_PTR WINAPI <ntgdi.h>
NtGdiPolyTextOutW(HDC hdc,POLYTEXTW * pptw,UINT cStr,DWORD dwCodePage)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPtInRegion(HRGN hrgn,int x,int y)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiPtVisible(HDC hdc,int x,int y)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiQueryFontAssocInfo(HDC hdc)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiQueryFonts(PUNIVERSAL_FONT_ID pufiFontList,ULONG nBufferSize,PLARGE_INTEGER pTimeStamp)W32KAPI INT WINAPI <ntgdi.h>
NtGdiRectangle(HDC hdc,int xLeft,int yTop,int xRight,int yBottom)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRectInRegion(HRGN hrgn,LPRECT prcl)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRectVisible(HDC hdc,LPRECT prc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRemoveFontMemResourceEx(HANDLE hMMFont)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRemoveFontResourceW(WCHAR * pwszFiles,ULONG cwc,ULONG cFiles,ULONG fl,DWORD dwPidTid,DESIGNVECTOR * pdv)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRemoveMergeFont(HDC hdc,UNIVERSAL_FONT_ID * pufi)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiResetDC(HDC hdc,LPDEVMODEW pdm,PBOOL pbBanding,VOID * pDriverInfo2,VOID * ppUMdhpdev)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiResizePalette(HPALETTE hpal,UINT cEntry)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRestoreDC(HDC hdc,int iLevel)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiRoundRect(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSaveDC(HDC hdc)W32KAPI int WINAPI <ntgdi.h>
NtGdiScaleViewportExtEx(HDC hdc,int xNum,int xDenom,int yNum,int yDenom,LPSIZE pszOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiScaleWindowExtEx(HDC hdc,int xNum,int xDenom,int yNum,int yDenom,LPSIZE pszOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSelectBitmap(HDC hdc,HBITMAP hbm)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiSelectBrush(HDC hdc,HBRUSH hbrush)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiSelectClipPath(HDC hdc,int iMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSelectFont(HDC hdc,HFONT hf)W32KAPI HFONT WINAPI <ntgdi.h>
NtGdiSelectPen(HDC hdc,HPEN hpen)W32KAPI HPEN WINAPI <ntgdi.h>
NtGdiSetBitmapAttributes(HBITMAP hbm,DWORD dwFlags)W32KAPI HBITMAP WINAPI <ntgdi.h>
NtGdiSetBitmapBits(HBITMAP hbm,ULONG cj,PBYTE pjInit)W32KAPI LONG WINAPI <ntgdi.h>
NtGdiSetBitmapDimension(HBITMAP hbm,int cx,int cy,LPSIZE psizeOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetBoundsRect(HDC hdc,LPRECT prc,DWORD f)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiSetBrushAttributes(HBRUSH hbm,DWORD dwFlags)W32KAPI HBRUSH WINAPI <ntgdi.h>
NtGdiSetBrushOrg(HDC hdc,int x,int y,LPPOINT pptOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetColorAdjustment(HDC hdc,PCOLORADJUSTMENT pca)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetColorSpace(HDC hdc,HCOLORSPACE hColorSpace)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetDeviceGammaRamp(HDC hdc,LPVOID lpGammaRamp)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetDIBitsToDeviceInternal(HDC hdcDest,int xDst,int yDst,DWORD cx,DWORD cy,int xSrc,int ySrc,DWORD iStartScan,DWORD cNumScan,LPBYTE pInitBits,LPBITMAPINFO pbmi,DWORD iUsage,UINT cjMaxBits,UINT cjMaxInfo,WINBOOL bTransformCoordinates,HANDLE hcmXform)W32KAPI int WINAPI <ntgdi.h>
NtGdiSetFontEnumeration(ULONG ulType)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiSetFontXform(HDC hdc,DWORD dwxScale,DWORD dwyScale)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetIcmMode(HDC hdc,ULONG nCommand,ULONG ulMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetLayout(HDC hdc,LONG wox,DWORD dwLayout)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiSetLinkedUFIs(HDC hdc,PUNIVERSAL_FONT_ID pufiLinks,ULONG uNumUFIs)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetMagicColors(HDC hdc,PALETTEENTRY peMagic,ULONG Index)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetMetaRgn(HDC hdc)W32KAPI int WINAPI <ntgdi.h>
NtGdiSetMiterLimit(HDC hdc,DWORD dwNew,PDWORD pdwOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetPixel(HDC hdcDst,int x,int y,COLORREF crColor)W32KAPI COLORREF WINAPI <ntgdi.h>
NtGdiSetPixelFormat(HDC hdc,int ipfd)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetPUMPDOBJ(HUMPD humpd,WINBOOL bStoreID,HUMPD * phumpd,WINBOOL * pbWOW64)W32KAPI WINBOOL <ntgdi.h>
NtGdiSetRectRgn(HRGN hrgn,int xLeft,int yTop,int xRight,int yBottom)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetSizeDevice(HDC hdc,int cxVirtualDevice,int cyVirtualDevice)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetSystemPaletteUse(HDC hdc,UINT ui)W32KAPI UINT WINAPI <ntgdi.h>
NtGdiSetTextJustification(HDC hdc,int lBreakExtra,int cBreak)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSetupPublicCFONT(HDC hdc,HFONT hf,ULONG ulAve)W32KAPI int WINAPI <ntgdi.h>
NtGdiSetVirtualResolution(HDC hdc,int cxVirtualDevicePixel,int cyVirtualDevicePixel,int cxVirtualDeviceMm,int cyVirtualDeviceMm)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiStartDoc(HDC hdc,DOCINFOW * pdi,WINBOOL * pbBanding,INT iJob)W32KAPI int WINAPI <ntgdi.h>
NtGdiStartPage(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiStretchBlt(HDC hdcDst,int xDst,int yDst,int cxDst,int cyDst,HDC hdcSrc,int xSrc,int ySrc,int cxSrc,int cySrc,DWORD dwRop,DWORD dwBackColor)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiStretchDIBitsInternal(HDC hdc,int xDst,int yDst,int cxDst,int cyDst,int xSrc,int ySrc,int cxSrc,int cySrc,LPBYTE pjInit,LPBITMAPINFO pbmi,DWORD dwUsage,DWORD dwRop4,UINT cjMaxInfo,UINT cjMaxBits,HANDLE hcmXform)W32KAPI int WINAPI <ntgdi.h>
NtGdiSTROBJ_bEnum(STROBJ * pstro,ULONG * pc,PGLYPHPOS * ppgpos)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSTROBJ_bEnumPositionsOnly(STROBJ * pstro,ULONG * pc,PGLYPHPOS * ppgpos)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSTROBJ_bGetAdvanceWidths(STROBJ * pstro,ULONG iFirst,ULONG c,POINTQF * pptqD)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSTROBJ_dwGetCodePage(STROBJ * pstro)W32KAPI DWORD WINAPI <ntgdi.h>
NtGdiSTROBJ_vEnumStart(STROBJ * pstro)W32KAPI VOID WINAPI <ntgdi.h>
NtGdiStrokeAndFillPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiStrokePath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiSwapBuffers(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiTileBitBlt(HDC hdcDst,RECTL * prectDst,HDC hdcSrc,RECTL * prectSrc,POINTL * pptlOrigin,DWORD rop4,DWORD crBackColor)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiTransformPoints(HDC hdc,PPOINT pptIn,PPOINT pptOut,int c,int iMode)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiTransparentBlt(HDC hdcDst,int xDst,int yDst,int cxDst,int cyDst,HDC hdcSrc,int xSrc,int ySrc,int cxSrc,int cySrc,COLORREF TransColor)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiUMPDEngFreeUserMem(KERNEL_PVOID * ppv)W32KAPI WINBOOL <ntgdi.h>
NtGdiUnloadPrinterDriver(LPWSTR pDriverName,ULONG cbDriverName)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiUnmapMemFont(PVOID pvView)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiUnrealizeObject(HANDLE h)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiUpdateColors(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiUpdateTransform(HDC hdc)W32KAPI WINBOOL <ntgdi.h>
NtGdiWidenPath(HDC hdc)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiXFORMOBJ_bApplyXform(XFORMOBJ * pxo,ULONG iMode,ULONG cPoints,PVOID pvIn,PVOID pvOut)W32KAPI WINBOOL WINAPI <ntgdi.h>
NtGdiXFORMOBJ_iGetXform(XFORMOBJ * pxo,XFORML * pxform)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiXLATEOBJ_cGetPalette(XLATEOBJ * pxlo,ULONG iPal,ULONG cPal,ULONG * pPal)W32KAPI ULONG WINAPI <ntgdi.h>
NtGdiXLATEOBJ_hGetColorTransform(XLATEOBJ * pxlo)W32KAPI HANDLE WINAPI <ntgdi.h>
NtGdiXLATEOBJ_iXlate(XLATEOBJ * pxlo,ULONG iColor)W32KAPI ULONG WINAPI <ntgdi.h>
NtGetDevicePowerState(IN HANDLE Device,OUT DEVICE_POWER_STATE * State)<ntpoapi.h>
NtGetNotificationResourceManager(IN HANDLE ResourceManagerHandle,OUT PTRANSACTION_NOTIFICATION TransactionNotification,IN ULONG NotificationLength,IN PLARGE_INTEGER Timeout OPTIONAL,OUT PULONG ReturnLength OPTIONAL,IN ULONG Asynchronous,IN ULONG_PTR AsynchronousContext OPTIONAL)<wdm.h>
NtImpersonateAnonymousToken(IN HANDLE ThreadHandle)<ntifs.h>
NtInitiatePowerAction(IN POWER_ACTION SystemAction,IN SYSTEM_POWER_STATE MinSystemState,IN ULONG Flags,IN BOOLEAN Asynchronous)<ntpoapi.h>
NtIsSystemResumeAutomatic(VOID)<ntpoapi.h>
NtLockFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER ByteOffset,IN PLARGE_INTEGER Length,IN ULONG Key,IN BOOLEAN FailImmediately,IN BOOLEAN ExclusiveLock)<ntifs.h>
NTMS_IS_NULLGUID(id)<ntmsapi.h>
ntohl(u_long netlong) WINSOCK_API_LINKAGE u_long WSAAPI <winsock2.h>
ntohs(u_short netshort) WINSOCK_API_LINKAGE u_short WSAAPI <winsock2.h>
NtOpenEnlistment(OUT PHANDLE EnlistmentHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE ResourceManagerHandle,IN LPGUID EnlistmentGuid,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL)<wdm.h>
NtOpenFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG ShareAccess,IN ULONG OpenOptions)<winternl.h>
NtOpenFile(PHANDLE FileHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,PIO_STATUS_BLOCK IoStatusBlock,ULONG ShareAccess,ULONG OpenOptions) NTSTATUS NTAPI <winternl.h>
NtOpenJobObjectToken(IN HANDLE JobHandle,IN ACCESS_MASK DesiredAccess,OUT PHANDLE TokenHandle)<ntifs.h>
NtOpenObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL,IN HANDLE ClientToken,IN ACCESS_MASK DesiredAccess,IN ACCESS_MASK GrantedAccess,IN PPRIVILEGE_SET Privileges OPTIONAL,IN BOOLEAN ObjectCreation,IN BOOLEAN AccessGranted,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
NtOpenProcess(OUT PHANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PCLIENT_ID ClientId OPTIONAL)<ntddk.h>
NtOpenProcessToken(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,OUT PHANDLE TokenHandle)<ntifs.h>
NtOpenProcessTokenEx(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,OUT PHANDLE TokenHandle)<ntifs.h>
NtOpenResourceManager(OUT PHANDLE ResourceManagerHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE TmHandle,IN LPGUID ResourceManagerGuid OPTIONAL,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL)<wdm.h>
NtOpenThreadToken(IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN BOOLEAN OpenAsSelf,OUT PHANDLE TokenHandle)<ntifs.h>
NtOpenThreadTokenEx(IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN BOOLEAN OpenAsSelf,IN ULONG HandleAttributes,OUT PHANDLE TokenHandle)<ntifs.h>
NtOpenTransaction(OUT PHANDLE TransactionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN LPGUID Uow,IN HANDLE TmHandle OPTIONAL)<wdm.h>
NtOpenTransactionManager(OUT PHANDLE TmHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PUNICODE_STRING LogFileName OPTIONAL,IN LPGUID TmIdentity OPTIONAL,IN ULONG OpenOptions OPTIONAL)<wdm.h>
NtPowerInformation(IN POWER_INFORMATION_LEVEL InformationLevel,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength)<ntpoapi.h>
NtPrepareComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtPrepareEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtPrePrepareComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtPrePrepareEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtPrivilegeCheck(IN HANDLE ClientToken,IN OUT PPRIVILEGE_SET RequiredPrivileges,OUT PBOOLEAN Result)<ntifs.h>
NtPrivilegedServiceAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PUNICODE_STRING ServiceName,IN HANDLE ClientToken,IN PPRIVILEGE_SET Privileges,IN BOOLEAN AccessGranted)<ntifs.h>
NtPrivilegeObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId OPTIONAL,IN HANDLE ClientToken,IN ACCESS_MASK DesiredAccess,IN PPRIVILEGE_SET Privileges,IN BOOLEAN AccessGranted)<ntifs.h>
NtPropagationComplete(IN HANDLE ResourceManagerHandle,IN ULONG RequestCookie,IN ULONG BufferLength,IN PVOID Buffer)<wdm.h>
NtPropagationFailed(IN HANDLE ResourceManagerHandle,IN ULONG RequestCookie,IN NTSTATUS PropStatus)<wdm.h>
NtQueryDirectoryFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass,IN BOOLEAN ReturnSingleEntry,IN PUNICODE_STRING FileName OPTIONAL,IN BOOLEAN RestartScan)<ntifs.h>
NtQueryInformationEnlistment(IN HANDLE EnlistmentHandle,IN ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,OUT PVOID EnlistmentInformation,IN ULONG EnlistmentInformationLength,OUT PULONG ReturnLength)<wdm.h>
NtQueryInformationFile(HANDLE hFile,PIO_STATUS_BLOCK io,PVOID ptr,ULONG len,FILE_INFORMATION_CLASS FileInformationClass) NTSTATUS NTAPI <winternl.h>
NtQueryInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass)<winternl.h>
NtQueryInformationProcess(HANDLE ProcessHandle,PROCESSINFOCLASS ProcessInformationClass,PVOID ProcessInformation,ULONG ProcessInformationLength,PULONG ReturnLength) NTSTATUS NTAPI <winternl.h>
NtQueryInformationProcess(IN HANDLE ProcessHandle,IN PROCESSINFOCLASS ProcessInformationClass,OUT PVOID ProcessInformation OPTIONAL,IN ULONG ProcessInformationLength,OUT PULONG ReturnLength OPTIONAL)<winternl.h>
NtQueryInformationResourceManager(IN HANDLE ResourceManagerHandle,IN RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,OUT PVOID ResourceManagerInformation,IN ULONG ResourceManagerInformationLength,OUT PULONG ReturnLength OPTIONAL)<wdm.h>
NtQueryInformationThread(HANDLE ThreadHandle,THREADINFOCLASS ThreadInformationClass,PVOID ThreadInformation,ULONG ThreadInformationLength,PULONG ReturnLength) NTSTATUS NTAPI <winternl.h>
NtQueryInformationToken(IN HANDLE TokenHandle,IN TOKEN_INFORMATION_CLASS TokenInformationClass,OUT PVOID TokenInformation OPTIONAL,IN ULONG TokenInformationLength,OUT PULONG ReturnLength)<ntifs.h>
NtQueryInformationTransaction(IN HANDLE TransactionHandle,IN TRANSACTION_INFORMATION_CLASS TransactionInformationClass,OUT PVOID TransactionInformation,IN ULONG TransactionInformationLength,OUT PULONG ReturnLength OPTIONAL)<wdm.h>
NtQueryInformationTransactionManager(IN HANDLE TransactionManagerHandle,IN TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,OUT PVOID TransactionManagerInformation,IN ULONG TransactionManagerInformationLength,OUT PULONG ReturnLength)<wdm.h>
NtQueryObject(HANDLE Handle,OBJECT_INFORMATION_CLASS ObjectInformationClass,PVOID ObjectInformation,ULONG ObjectInformationLength,PULONG ReturnLength) NTSTATUS NTAPI <winternl.h>
NtQueryObject(IN HANDLE Handle OPTIONAL,IN OBJECT_INFORMATION_CLASS ObjectInformationClass,OUT PVOID ObjectInformation OPTIONAL,IN ULONG ObjectInformationLength,OUT PULONG ReturnLength OPTIONAL)<winternl.h>
NtQueryQuotaInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN PVOID SidList,IN ULONG SidListLength,IN PSID StartSid OPTIONAL,IN BOOLEAN RestartScan)<ntifs.h>
NtQuerySecurityObject(IN HANDLE Handle,IN SECURITY_INFORMATION SecurityInformation,OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN ULONG Length,OUT PULONG LengthNeeded)<ntifs.h>
NtQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass,PVOID SystemInformation,ULONG SystemInformationLength,PULONG ReturnLength) NTSTATUS NTAPI <winternl.h>
NtQuerySystemTime(PLARGE_INTEGER SystemTime) NTSTATUS NTAPI <winternl.h>
NtQueryVolumeInformationFile(HANDLE hFile,PIO_STATUS_BLOCK io,PVOID ptr,ULONG len,FS_INFORMATION_CLASS FsInformationClass) NTSTATUS NTAPI <winternl.h>
NtQueryVolumeInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FsInformation,IN ULONG Length,IN FS_INFORMATION_CLASS FsInformationClass)<winternl.h>
NtReadFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL)<ntifs.h>
NtReadOnlyEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtRecoverEnlistment(IN HANDLE EnlistmentHandle,IN PVOID EnlistmentKey OPTIONAL)<wdm.h>
NtRecoverResourceManager(IN HANDLE ResourceManagerHandle)<wdm.h>
NtRecoverTransactionManager(IN HANDLE TransactionManagerHandle)<wdm.h>
NtRegisterProtocolAddressInformation(IN HANDLE ResourceManager,IN PCRM_PROTOCOL_ID ProtocolId,IN ULONG ProtocolInformationSize,IN PVOID ProtocolInformation,IN ULONG CreateOptions OPTIONAL)<wdm.h>
NtRenameTransactionManager(IN PUNICODE_STRING LogFileName,IN LPGUID ExistingTransactionManagerGuid)<wdm.h>
NtRequestDeviceWakeup(IN HANDLE Device)<ntpoapi.h>
NtRequestWakeupLatency(IN LATENCY_TIME latency)<ntpoapi.h>
NtRollbackComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtRollbackEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtRollbackTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Wait)<wdm.h>
NtRollforwardTransactionManager(IN HANDLE TransactionManagerHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtSetInformationEnlistment(IN HANDLE EnlistmentHandle OPTIONAL,IN ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,IN PVOID EnlistmentInformation,IN ULONG EnlistmentInformationLength)<wdm.h>
NtSetInformationFile(HANDLE hFile,PIO_STATUS_BLOCK io,PVOID ptr,ULONG len,FILE_INFORMATION_CLASS FileInformationClass) NTSTATUS NTAPI <winternl.h>
NtSetInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass)<winternl.h>
NtSetInformationProcess(HANDLE ProcessHandle,PROCESSINFOCLASS ProcessInformationClass,PVOID ProcessInformation,ULONG ProcessInformationLength) NTSTATUS NTAPI <winternl.h>
NtSetInformationResourceManager(IN HANDLE ResourceManagerHandle,IN RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,IN PVOID ResourceManagerInformation,IN ULONG ResourceManagerInformationLength)<wdm.h>
NtSetInformationThread(IN HANDLE ThreadHandle,IN THREADINFOCLASS ThreadInformationClass,IN PVOID ThreadInformation,IN ULONG ThreadInformationLength)<ntifs.h>
NtSetInformationToken(IN HANDLE TokenHandle,IN TOKEN_INFORMATION_CLASS TokenInformationClass,IN PVOID TokenInformation,IN ULONG TokenInformationLength)<ntifs.h>
NtSetInformationTransaction(IN HANDLE TransactionHandle,IN TRANSACTION_INFORMATION_CLASS TransactionInformationClass,IN PVOID TransactionInformation,IN ULONG TransactionInformationLength)<wdm.h>
NtSetInformationTransactionManager(IN HANDLE TmHandle OPTIONAL,IN TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,IN PVOID TransactionManagerInformation,IN ULONG TransactionManagerInformationLength)<wdm.h>
NtSetQuotaInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID Buffer,IN ULONG Length)<ntifs.h>
NtSetSecurityObject(IN HANDLE Handle,IN SECURITY_INFORMATION SecurityInformation,IN PSECURITY_DESCRIPTOR SecurityDescriptor)<ntifs.h>
NtSetSystemPowerState(IN POWER_ACTION SystemAction,IN SYSTEM_POWER_STATE MinSystemState,IN ULONG Flags)<ntpoapi.h>
NtSetThreadExecutionState(IN EXECUTION_STATE esFlags,OUT EXECUTION_STATE * PreviousFlags)<ntpoapi.h>
NtSetVolumeInformationFile(HANDLE hFile,PIO_STATUS_BLOCK io,PVOID ptr,ULONG len,FILE_INFORMATION_CLASS FileInformationClass) NTSTATUS NTAPI <winternl.h>
NtSetVolumeInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID FsInformation,IN ULONG Length,IN FS_INFORMATION_CLASS FsInformationClass)<winternl.h>
NtSinglePhaseReject(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
NtUnlockFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER ByteOffset,IN PLARGE_INTEGER Length,IN ULONG Key)<ntifs.h>
NtWaitForSingleObject(HANDLE Handle,BOOLEAN Alertable,PLARGE_INTEGER Timeout) NTSTATUS NTAPI <winternl.h>
NtWriteFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID Buffer,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL)<ntifs.h>
NumberOfAssignedResources()<portcls.h>
NumberOfBusNumbers()<portcls.h>
NumberOfDevicePrivates()<portcls.h>
NumberOfDeviceSpecifics()<portcls.h>
NumberOfDmas()<portcls.h>
NumberOfInterrupts()<portcls.h>
NumberOfMemories()<portcls.h>
NumberOfPorts()<ntddndis.h>
NumberOfSubAllocateFroms()<portcls.h>
NUMELMS(array)<dshow.h>
NUMINDEX(wLongsPerEntry)<aviriff.h>
NUMINDEXFILL(wLongsPerEntry)<aviriff.h>
NWF_DEFINE_OID()()()
NWF_DEFINE_OID(Seq, o, m)<windot11.h>
OaBuildVersion(void)WINOLEAUTAPI_<oleauto.h>
ObAppend(CdbObject & obj) virtual VOID <_dbdao.h>
ObCreateObject(IN KPROCESSOR_MODE ObjectAttributesAccessMode OPTIONAL,IN POBJECT_TYPE ObjectType,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN KPROCESSOR_MODE AccessMode,IN OUT PVOID ParseContext OPTIONAL,IN ULONG ObjectSize,IN ULONG PagedPoolCharge OPTIONAL,IN ULONG NonPagedPoolCharge OPTIONAL,OUT PVOID * Object)<ntifs.h>
ObDereferenceObjectDeferDelete(IN PVOID Object)<wdm.h>
ObDereferenceObjectDeferDeleteWithTag(IN PVOID Object,IN ULONG Tag)<wdm.h>
ObfDereferenceObject(IN PVOID Object)<wdm.h>
ObfDereferenceObjectWithTag(IN PVOID Object,IN ULONG Tag)<wdm.h>
ObfReferenceObject(IN PVOID Object)<wdm.h>
ObfReferenceObjectWithTag(IN PVOID Object,IN ULONG Tag)<wdm.h>
ObGetFilterVersion(VOID)<wdm.h>
ObGetObjectPointerCount(IN PVOID Object)<ntifs.h>
ObGetObjectSecurity(IN PVOID Object,OUT PSECURITY_DESCRIPTOR * SecurityDescriptor,OUT PBOOLEAN MemoryAllocated)<wdm.h>
ObInsertObject(IN PVOID Object,IN OUT PACCESS_STATE PassedAccessState OPTIONAL,IN ACCESS_MASK DesiredAccess OPTIONAL,IN ULONG ObjectPointerBias,OUT PVOID * NewObject OPTIONAL,OUT PHANDLE Handle OPTIONAL)<ntifs.h>
ObIsKernelHandle(IN HANDLE Handle)<ntifs.h>
ObItem(LONG i) virtual CdbObject <_dbdao.h>
ObItem(LPCTSTR pstr) virtual CdbObject <_dbdao.h>
ObjClass(x)<lpmapi.h>
ObjCType(x)<lpmapi.h>
ObjData(x)<lpmapi.h>
ObjectCloseAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectCloseAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectCloseAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
ObjectDeleteAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectDeleteAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
ObjectFromLresult(LRESULT lResult,REFIID riid,WPARAM wParam,void ** ppvObject) STDAPI <oleacc.h>
ObjectOpenAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,LPSTR ObjectTypeName,LPSTR ObjectName,PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,DWORD GrantedAccess,PPRIVILEGE_SET Privileges,WINBOOL ObjectCreation,WINBOOL AccessGranted,LPBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectOpenAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPSTR ObjectTypeName,LPSTR ObjectName,PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,DWORD GrantedAccess,PPRIVILEGE_SET Privileges,WINBOOL ObjectCreation,WINBOOL AccessGranted,LPBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectOpenAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPWSTR ObjectTypeName,LPWSTR ObjectName,PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,DWORD GrantedAccess,PPRIVILEGE_SET Privileges,WINBOOL ObjectCreation,WINBOOL AccessGranted,LPBOOL GenerateOnClose) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
ObjectPrivilegeAuditAlarm(LPCSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,DWORD DesiredAccess,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,DWORD DesiredAccess,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted) WINADVAPI WINBOOL WINAPI <winbase.h>
ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,DWORD DesiredAccess,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
OBJECTPROC(HOBJECTHEAP,LPVOID) typedef VOID<nmsupp.h>
ObjectTypeIsValid(ObjectType type)static __inline__ BOOL <gdiplusenums.h>
ObjLength(x)<lpmapi.h>
ObMakeTemporaryObject(IN PVOID Object)<ntifs.h>
ObOpenObjectByPointer(IN PVOID Object,IN ULONG HandleAttributes,IN PACCESS_STATE PassedAccessState OPTIONAL,IN ACCESS_MASK DesiredAccess OPTIONAL,IN POBJECT_TYPE ObjectType OPTIONAL,IN KPROCESSOR_MODE AccessMode,OUT PHANDLE Handle)<ntifs.h>
ObOpenObjectByPointerWithTag(IN PVOID Object,IN ULONG HandleAttributes,IN PACCESS_STATE PassedAccessState OPTIONAL,IN ACCESS_MASK DesiredAccess,IN POBJECT_TYPE ObjectType OPTIONAL,IN KPROCESSOR_MODE AccessMode,IN ULONG Tag,OUT PHANDLE Handle)<ntifs.h>
ObQueryNameString(IN PVOID Object,OUT POBJECT_NAME_INFORMATION ObjectNameInfo OPTIONAL,IN ULONG Length,OUT PULONG ReturnLength)<ntifs.h>
ObQueryObjectAuditingByHandle(IN HANDLE Handle,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
ObReferenceObjectByHandle(IN HANDLE Handle,IN ACCESS_MASK DesiredAccess,IN POBJECT_TYPE ObjectType OPTIONAL,IN KPROCESSOR_MODE AccessMode,OUT PVOID * Object,OUT POBJECT_HANDLE_INFORMATION HandleInformation OPTIONAL)<wdm.h>
ObReferenceObjectByHandleWithTag(IN HANDLE Handle,IN ACCESS_MASK DesiredAccess,IN POBJECT_TYPE ObjectType OPTIONAL,IN KPROCESSOR_MODE AccessMode,IN ULONG Tag,OUT PVOID * Object,OUT POBJECT_HANDLE_INFORMATION HandleInformation OPTIONAL)<wdm.h>
ObReferenceObjectByName(IN PUNICODE_STRING ObjectName,IN ULONG Attributes,IN PACCESS_STATE PassedAccessState OPTIONAL,IN ACCESS_MASK DesiredAccess OPTIONAL,IN POBJECT_TYPE ObjectType,IN KPROCESSOR_MODE AccessMode,IN OUT PVOID ParseContext OPTIONAL,OUT PVOID * Object)<ntifs.h>
ObReferenceObjectByPointer(IN PVOID Object,IN ACCESS_MASK DesiredAccess,IN POBJECT_TYPE ObjectType OPTIONAL,IN KPROCESSOR_MODE AccessMode)<wdm.h>
ObReferenceObjectByPointerWithTag(IN PVOID Object,IN ACCESS_MASK DesiredAccess,IN POBJECT_TYPE ObjectType OPTIONAL,IN KPROCESSOR_MODE AccessMode,IN ULONG Tag)<wdm.h>
ObRegisterCallbacks(IN POB_CALLBACK_REGISTRATION CallbackRegistration,OUT PVOID * RegistrationHandle)<wdm.h>
ObReleaseObjectSecurity(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN BOOLEAN MemoryAllocated)<wdm.h>
ObsoleteRecoverySeqNum(LONG lNewRecoverySeqNum)virtual HRESULT WINAPI <txdtc.h>
ObtainRMInfo(IRMHelper * pIRMHelper)virtual HRESULT WINAPI <txdtc.h>
ObtainUserAgentString(DWORD dwOption,LPSTR pszUAOut,DWORD * cbSize)STDAPI <urlmon.h>
ObUnRegisterCallbacks(IN PVOID RegistrationHandle)<wdm.h>
ODBCGetTryWaitValue() DWORD SQL_API <sqlext.h>
ODBCSetTryWaitValue(DWORD dwValue) WINBOOL SQL_API <sqlext.h>
OemKeyScan(WORD wOemChar) WINUSERAPI DWORD WINAPI <winuser.h>
OemToChar(LPCSTR lpszSrc,LPSTR lpszDst) WINUSERAPI WINBOOL WINAPI <winuser.h>
OemToCharA(LPCSTR lpszSrc,LPSTR lpszDst) WINUSERAPI WINBOOL WINAPI <winuser.h>
OemToCharBuff(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
OemToCharBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
OemToCharBuffW(LPCSTR lpszSrc,LPWSTR lpszDst,DWORD cchDstLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
OemToCharW(LPCSTR lpszSrc,LPWSTR lpszDst) WINUSERAPI WINBOOL WINAPI <winuser.h>
OfferVirtualMemory(PVOID VirtualAddress,SIZE_T Size,OFFER_PRIORITY Priority) WINBASEAPI DWORD WINAPI <memoryapi.h>
Offline(__LONG32 nTimeout,VARIANT * pvarPending)virtual HRESULT WINAPI <shdeprecated.h>
Offline(int iCmd)virtual HRESULT WINAPI <shdeprecated.h>
Offline(VARIANT varTimeout,VARIANT * pvarPending)virtual HRESULT WINAPI <shdeprecated.h>
OfflineClusterGroup(HGROUP hGroup) DWORD WINAPI <clusapi.h>
OfflineClusterResource(HRESOURCE hResource) DWORD WINAPI <clusapi.h>
OfflineFilesEnable(WINBOOL bEnable,WINBOOL * pbRebootRequired)DWORD <cscapi.h>
OfflineFilesQueryStatus(WINBOOL * pbActive,WINBOOL * pbEnabled)DWORD <cscapi.h>
Offset(const Point & point)	VOID <winnt.h>
Offset(const PointF & point)	VOID <winnt.h>
Offset(INT dx,INT dy)	VOID <winnt.h>
Offset(REAL dx,REAL dy)	VOID <winnt.h>
OFFSET(type,field)<wsdxml.h>
OffsetClipRgn(HDC hdc,int x,int y) WINGDIAPI int WINAPI <wingdi.h>
OffsetPenData(HPENDATA,int,int) WINBOOL WINAPI <penwin.h>
OffsetRect(LPRECT lprc,int dx,int dy) WINUSERAPI WINBOOL WINAPI <winuser.h>
OffsetRgn(HRGN hrgn,int x,int y) WINGDIAPI int WINAPI <wingdi.h>
OffsetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
OffsetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
OffsetX()	REAL <mfobjects.h>
OffsetY()	REAL <mfobjects.h>
OLDFONTENUMPROCA(CONST LOGFONTA *,CONST TEXTMETRICA *,DWORD,LPARAM) typedef int<wingdi.h>
OLDFONTENUMPROCA(CONST LOGFONTA *,CONST VOID *,DWORD,LPARAM) typedef int<wingdi.h>
OLDFONTENUMPROCW(CONST LOGFONTW *,CONST TEXTMETRICW *,DWORD,LPARAM) typedef int<wingdi.h>
OLDFONTENUMPROCW(CONST LOGFONTW *,CONST VOID *,DWORD,LPARAM) typedef int<wingdi.h>
OLE_RELEASE_METHOD(CALLBACK * QueryReleaseMethod)<ole.h>
OleActivate(LPOLEOBJECT,UINT,WINBOOL,WINBOOL,HWND,const RECT *) OLESTATUS WINAPI <ole.h>
OleBlockServer(LHSERVER) OLESTATUS WINAPI <ole.h>
OleBuildVersion(VOID)WINOLEAPI_<ole2.h>
OLECLIPFORMAT(CALLBACK * EnumFormats)<ole.h>
OleClone(LPOLEOBJECT,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *) OLESTATUS WINAPI <ole.h>
OleClose(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleConvertIStorageToOLESTREAM(LPSTORAGE pstg,LPOLESTREAM lpolestream)WINOLEAPI <ole2.h>
OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg,CLIPFORMAT cfFormat,LONG lWidth,LONG lHeight,DWORD dwSize,LPSTGMEDIUM pmedium,LPOLESTREAM polestm)WINOLEAPI <ole2.h>
OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream,LPSTORAGE pstg,const DVTARGETDEVICE * ptd)WINOLEAPI <ole2.h>
OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm,LPSTORAGE pstg,CLIPFORMAT * pcfFormat,LONG * plwWidth,LONG * plHeight,DWORD * pdwSize,LPSTGMEDIUM pmedium)WINOLEAPI <ole2.h>
OleCopyFromLink(LPOLEOBJECT,LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *) OLESTATUS WINAPI <ole.h>
OleCopyToClipboard(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleCreate(LPCSTR,LPOLECLIENT,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole2.h>
OleCreate(REFCLSID rclsid,REFIID riid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateDefaultHandler(REFCLSID clsid,LPUNKNOWN pUnkOuter,REFIID riid,LPVOID * lplpObj)WINOLEAPI <ole2.h>
OleCreateEmbeddingHelper(REFCLSID clsid,LPUNKNOWN pUnkOuter,DWORD flags,LPCLASSFACTORY pCF,REFIID riid,LPVOID * lplpObj)WINOLEAPI <ole2.h>
OleCreateEx(REFCLSID rclsid,REFIID riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD * rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink * lpAdviseSink,DWORD * rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateFontIndirect(LPFONTDESC lpFontDesc,REFIID riid,LPVOID * lplpvObj)WINOLECTLAPI <olectl.h>
OleCreateFromClip(LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleCreateFromData(LPDATAOBJECT pSrcDataObj,REFIID riid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj,REFIID riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD * rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink * lpAdviseSink,DWORD * rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateFromFile(LPCSTR,LPOLECLIENT,LPCSTR,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole2.h>
OleCreateFromFile(REFCLSID rclsid,LPCOLESTR lpszFileName,REFIID riid,DWORD renderopt,LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateFromFileEx(REFCLSID rclsid,LPCOLESTR lpszFileName,REFIID riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD * rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink * lpAdviseSink,DWORD * rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateFromTemplate(LPCSTR,LPOLECLIENT,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleCreateInvisible(LPCSTR,LPOLECLIENT,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT,WINBOOL) OLESTATUS WINAPI <ole.h>
OleCreateLink(LPMONIKER pmkLinkSrc,REFIID riid,DWORD renderopt,LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateLinkEx(LPMONIKER pmkLinkSrc,REFIID riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD * rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink * lpAdviseSink,DWORD * rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateLinkFromClip(LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj,REFIID riid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj,REFIID riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD * rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink * lpAdviseSink,DWORD * rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateLinkFromFile(LPCSTR,LPOLECLIENT,LPCSTR,LPCSTR,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleCreateLinkToFile(LPCOLESTR lpszFileName,REFIID riid,DWORD renderopt,LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateLinkToFileEx(LPCOLESTR lpszFileName,REFIID riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD * rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink * lpAdviseSink,DWORD * rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleCreateMenuDescriptor(HMENU hmenuCombined,LPOLEMENUGROUPWIDTHS lpMenuWidths)WINOLEAPI_<ole2.h>
OleCreatePictureIndirect(LPPICTDESC lpPictDesc,REFIID riid,WINBOOL fOwn,LPVOID * lplpvObj)WINOLECTLAPI <olectl.h>
OleCreatePropertyFrame(HWND hwndOwner,UINT x,UINT y,LPCOLESTR lpszCaption,ULONG cObjects,LPUNKNOWN * ppUnk,ULONG cPages,LPCLSID pPageClsID,LCID lcid,DWORD dwReserved,LPVOID pvReserved)WINOLECTLAPI <olectl.h>
OleCreatePropertyFrameIndirect(LPOCPFIPARAMS lpParams)WINOLECTLAPI <olectl.h>
OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj,REFIID iid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleDelete(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleDestroyMenuDescriptor(HOLEMENU holemenu)WINOLEAPI <ole2.h>
OleDoAutoConvert(LPSTORAGE pStg,LPCLSID pClsidNew)WINOLEAPI <ole2.h>
OleDraw(LPOLEOBJECT,HDC,const RECT *,const RECT *,HDC) OLESTATUS WINAPI <ole2.h>
OleDraw(LPUNKNOWN pUnknown,DWORD dwAspect,HDC hdcDraw,LPCRECT lprcBounds)WINOLEAPI <ole2.h>
OleDuplicateData(HANDLE hSrc,CLIPFORMAT cfFormat,UINT uiFlags)WINOLEAPI_<ole2.h>
OleEnumFormats(LPOLEOBJECT,OLECLIPFORMAT) OLECLIPFORMAT WINAPI <ole.h>
OleEnumObjects(LHCLIENTDOC,LPOLEOBJECT *) OLESTATUS WINAPI <ole.h>
OleEqual(LPOLEOBJECT,LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleExecute(LPOLEOBJECT,HGLOBAL,UINT) OLESTATUS WINAPI <ole.h>
OleFlushClipboard(void)WINOLEAPI <ole2.h>
OleGetAutoConvert(REFCLSID clsidOld,LPCLSID pClsidNew)WINOLEAPI <ole2.h>
OleGetClipboard(LPDATAOBJECT * ppDataObj)WINOLEAPI <ole2.h>
OleGetData(LPOLEOBJECT,OLECLIPFORMAT,HANDLE *) OLESTATUS WINAPI <ole.h>
OleGetIconOfClass(REFCLSID rclsid,LPOLESTR lpszLabel,WINBOOL fUseTypeAsLabel)WINOLEAPI_<ole2.h>
OleGetIconOfFile(LPOLESTR lpszPath,WINBOOL fUseFileAsLabel)WINOLEAPI_<ole2.h>
OleGetLinkUpdateOptions(LPOLEOBJECT,OLEOPT_UPDATE *) OLESTATUS WINAPI <ole.h>
OleIconToCursor(HINSTANCE hinstExe,HICON hIcon)WINOLECTLAPI_<olectl.h>
OleInitialize(LPVOID pvReserved)WINOLEAPI <ole2.h>
OleIsCurrentClipboard(LPDATAOBJECT pDataObj)WINOLEAPI <ole2.h>
OleIsDcMeta(HDC) WINBOOL WINAPI <ole.h>
OleIsRunning(LPOLEOBJECT pObject)WINOLEAPI_<ole2.h>
OleLoad(LPSTORAGE pStg,REFIID riid,LPOLECLIENTSITE pClientSite,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleLoadFromStream(LPOLESTREAM,LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *) OLESTATUS WINAPI <ole2.h>
OleLoadFromStream(LPSTREAM pStm,REFIID iidInterface,LPVOID * ppvObj)WINOLEAPI <ole2.h>
OleLoadPicture(LPSTREAM lpstream,LONG lSize,WINBOOL fRunmode,REFIID riid,LPVOID * lplpvObj)WINOLECTLAPI <olectl.h>
OleLoadPictureEx(LPSTREAM lpstream,LONG lSize,WINBOOL fRunmode,REFIID riid,DWORD xSizeDesired,DWORD ySizeDesired,DWORD dwFlags,LPVOID * lplpvObj)WINOLECTLAPI <olectl.h>
OleLoadPictureFile(VARIANT varFileName,LPDISPATCH * lplpdispPicture)WINOLECTLAPI <olectl.h>
OleLoadPictureFileEx(VARIANT varFileName,DWORD xSizeDesired,DWORD ySizeDesired,DWORD dwFlags,LPDISPATCH * lplpdispPicture)WINOLECTLAPI <olectl.h>
OleLoadPicturePath(LPOLESTR szURLorPath,LPUNKNOWN punkCaller,DWORD dwReserved,OLE_COLOR clrReserved,REFIID riid,LPVOID * ppvRet)WINOLECTLAPI <olectl.h>
OleLockRunning(LPUNKNOWN pUnknown,WINBOOL fLock,WINBOOL fLastUnlockCloses)WINOLEAPI <ole2.h>
OleLockServer(LPOLEOBJECT,LHSERVER *) OLESTATUS WINAPI <ole.h>
OleMetafilePictFromIconAndLabel(HICON hIcon,LPOLESTR lpszLabel,LPOLESTR lpszSourceFile,UINT iIconIndex)WINOLEAPI_<ole2.h>
OleNoteObjectVisible(LPUNKNOWN pUnknown,WINBOOL fVisible)WINOLEAPI <ole2.h>
OleObjectConvert(LPOLEOBJECT,LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT *) OLESTATUS WINAPI <ole.h>
OleQueryBounds(LPOLEOBJECT,RECT *) OLESTATUS WINAPI <ole.h>
OleQueryClientVersion(void) DWORD WINAPI <ole.h>
OleQueryCreateFromClip(LPCSTR,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)WINOLEAPI <ole2.h>
OleQueryLinkFromClip(LPCSTR,OLEOPT_RENDER,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)WINOLEAPI <ole2.h>
OleQueryName(LPOLEOBJECT lpobj,LPSTR lpBuf,UINT * lpcbBuf) OLESTATUS WINAPI <ole.h>
OleQueryOpen(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleQueryOutOfDate(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleQueryProtocol(LPOLEOBJECT,LPCSTR) void<ole.h>
OleQueryReleaseError(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleQueryReleaseMethod(LPOLEOBJECT) OLE_RELEASE_METHOD WINAPI <ole.h>
OleQueryReleaseStatus(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleQueryServerVersion(void) DWORD WINAPI <ole.h>
OleQuerySize(LPOLEOBJECT,DWORD *) OLESTATUS WINAPI <ole.h>
OleQueryType(LPOLEOBJECT,LONG *) OLESTATUS WINAPI <ole.h>
OleReconnect(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleRegEnumFormatEtc(REFCLSID clsid,DWORD dwDirection,LPENUMFORMATETC * ppenum)WINOLEAPI <ole2.h>
OleRegEnumVerbs(REFCLSID clsid,LPENUMOLEVERB * ppenum)WINOLEAPI <ole2.h>
OleRegGetMiscStatus(REFCLSID clsid,DWORD dwAspect,DWORD * pdwStatus)WINOLEAPI <ole2.h>
OleRegGetUserType(REFCLSID clsid,DWORD dwFormOfType,LPOLESTR * pszUserType)WINOLEAPI <ole2.h>
OleRegisterClientDoc(LPCSTR,LPCSTR,LONG,LHCLIENTDOC *) OLESTATUS WINAPI <ole.h>
OleRegisterServer(LPCSTR,LPOLESERVER,LHSERVER *,HINSTANCE,OLE_SERVER_USE) OLESTATUS WINAPI <ole.h>
OleRegisterServerDoc(LHSERVER,LPCSTR,LPOLESERVERDOC,LHSERVERDOC *) OLESTATUS WINAPI <ole.h>
OleRelease(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OleRename(LPOLEOBJECT,LPCSTR) OLESTATUS WINAPI <ole.h>
OleRenameClientDoc(LHCLIENTDOC,LPCSTR) OLESTATUS WINAPI <ole.h>
OleRenameServerDoc(LHSERVERDOC,LPCSTR) OLESTATUS WINAPI <ole.h>
OleRequestData(LPOLEOBJECT,OLECLIPFORMAT) OLESTATUS WINAPI <ole.h>
OleRevertClientDoc(LHCLIENTDOC) OLESTATUS WINAPI <ole.h>
OleRevertServerDoc(LHSERVERDOC) OLESTATUS WINAPI <ole.h>
OleRevokeClientDoc(LHCLIENTDOC) OLESTATUS WINAPI <ole.h>
OleRevokeObject(LPOLECLIENT) OLESTATUS WINAPI <ole.h>
OleRevokeServer(LHSERVER) OLESTATUS WINAPI <ole.h>
OleRevokeServerDoc(LHSERVERDOC) OLESTATUS WINAPI <ole.h>
OleRun(LPUNKNOWN pUnknown)WINOLEAPI <ole2.h>
OleSave(LPPERSISTSTORAGE pPS,LPSTORAGE pStg,WINBOOL fSameAsLoad)WINOLEAPI <ole2.h>
OleSavedClientDoc(LHCLIENTDOC) OLESTATUS WINAPI <ole.h>
OleSavedServerDoc(LHSERVERDOC) OLESTATUS WINAPI <ole.h>
OleSavePictureFile(LPDISPATCH lpdispPicture,BSTR bstrFileName)WINOLECTLAPI <olectl.h>
OleSaveToStream(LPOLEOBJECT,LPOLESTREAM) OLESTATUS WINAPI <ole2.h>
OleSaveToStream(LPPERSISTSTREAM pPStm,LPSTREAM pStm)WINOLEAPI <ole2.h>
OleSaveToStreamEx(IUnknown * piunk,IStream * pistm,WINBOOL fClearDirty) STDAPI <hlink.h>
OleSetAutoConvert(REFCLSID clsidOld,REFCLSID clsidNew)WINOLEAPI <ole2.h>
OleSetBounds(LPOLEOBJECT,const RECT *) OLESTATUS WINAPI <ole.h>
OleSetClipboard(LPDATAOBJECT pDataObj)WINOLEAPI <ole2.h>
OleSetColorScheme(LPOLEOBJECT,const LOGPALETTE *) OLESTATUS WINAPI <ole.h>
OleSetContainedObject(LPUNKNOWN pUnknown,WINBOOL fContained)WINOLEAPI <ole2.h>
OleSetData(LPOLEOBJECT,OLECLIPFORMAT,HANDLE) OLESTATUS WINAPI <ole.h>
OleSetHostNames(LPOLEOBJECT,LPCSTR,LPCSTR) OLESTATUS WINAPI <ole.h>
OleSetLinkUpdateOptions(LPOLEOBJECT,OLEOPT_UPDATE) OLESTATUS WINAPI <ole.h>
OleSetMenuDescriptor(HOLEMENU holemenu,HWND hwndFrame,HWND hwndActiveObject,LPOLEINPLACEFRAME lpFrame,LPOLEINPLACEACTIVEOBJECT lpActiveObj)WINOLEAPI <ole2.h>
OleSetTargetDevice(LPOLEOBJECT,HGLOBAL) OLESTATUS WINAPI <ole.h>
OLESTR(str)<wtypesbase.h>
OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame,LPOLEINPLACEFRAMEINFO lpFrameInfo,LPMSG lpmsg)WINOLEAPI <ole2.h>
OleTranslateColor(OLE_COLOR clr,HPALETTE hpal,COLORREF * lpcolorref)WINOLECTLAPI <olectl.h>
OleUIAddVerbMenu(LPOLEOBJECT lpOleObj,LPCSTR lpszShortType,HMENU hMenu,UINT uPos,UINT uIDVerbMin,UINT uIDVerbMax,WINBOOL bAddConvert,UINT idConvert,HMENU * lphMenu) STDAPI_<oledlg.h>
OleUIAddVerbMenuA(LPOLEOBJECT lpOleObj,LPCSTR lpszShortType,HMENU hMenu,UINT uPos,UINT uIDVerbMin,UINT uIDVerbMax,WINBOOL bAddConvert,UINT idConvert,HMENU * lphMenu) STDAPI_<oledlg.h>
OleUIAddVerbMenuW(LPOLEOBJECT lpOleObj,LPCWSTR lpszShortType,HMENU hMenu,UINT uPos,UINT uIDVerbMin,UINT uIDVerbMax,WINBOOL bAddConvert,UINT idConvert,HMENU * lphMenu) STDAPI_<oledlg.h>
OleUIBusy(LPOLEUIBUSYA) STDAPI_<oledlg.h>
OleUIBusyA(LPOLEUIBUSYA) STDAPI_<oledlg.h>
OleUIBusyW(LPOLEUIBUSYW) STDAPI_<oledlg.h>
OleUICanConvertOrActivateAs(REFCLSID rClsid,WINBOOL fIsLinkedObject,WORD wFormat) STDAPI_<oledlg.h>
OleUIChangeIcon(LPOLEUICHANGEICONA) STDAPI_<oledlg.h>
OleUIChangeIconA(LPOLEUICHANGEICONA) STDAPI_<oledlg.h>
OleUIChangeIconW(LPOLEUICHANGEICONW) STDAPI_<oledlg.h>
OleUIChangeSource(LPOLEUICHANGESOURCEA) STDAPI_<oledlg.h>
OleUIChangeSourceA(LPOLEUICHANGESOURCEA) STDAPI_<oledlg.h>
OleUIChangeSourceW(LPOLEUICHANGESOURCEW) STDAPI_<oledlg.h>
OleUIConvert(LPOLEUICONVERTA) STDAPI_<oledlg.h>
OleUIConvertA(LPOLEUICONVERTA) STDAPI_<oledlg.h>
OleUIConvertW(LPOLEUICONVERTW) STDAPI_<oledlg.h>
OleUIEditLinks(LPOLEUIEDITLINKSA) STDAPI_<oledlg.h>
OleUIEditLinksA(LPOLEUIEDITLINKSA) STDAPI_<oledlg.h>
OleUIEditLinksW(LPOLEUIEDITLINKSW) STDAPI_<oledlg.h>
OleUIInsertObject(LPOLEUIINSERTOBJECTA) STDAPI_<oledlg.h>
OleUIInsertObjectA(LPOLEUIINSERTOBJECTA) STDAPI_<oledlg.h>
OleUIInsertObjectW(LPOLEUIINSERTOBJECTW) STDAPI_<oledlg.h>
OleUIObjectProperties(LPOLEUIOBJECTPROPSA) STDAPI_<oledlg.h>
OleUIObjectPropertiesA(LPOLEUIOBJECTPROPSA) STDAPI_<oledlg.h>
OleUIObjectPropertiesW(LPOLEUIOBJECTPROPSW) STDAPI_<oledlg.h>
OleUIPasteSpecial(LPOLEUIPASTESPECIALA) STDAPI_<oledlg.h>
OleUIPasteSpecialA(LPOLEUIPASTESPECIALA) STDAPI_<oledlg.h>
OleUIPasteSpecialW(LPOLEUIPASTESPECIALW) STDAPI_<oledlg.h>
OleUIPromptUser(int nTemplate,HWND hwndParent,...) int __cdecl <oledlg.h>
OleUIPromptUserA(int nTemplate,HWND hwndParent,...) int __cdecl <oledlg.h>
OleUIPromptUserW(int nTemplate,HWND hwndParent,...) int __cdecl <oledlg.h>
OleUIUpdateLinks(LPOLEUILINKCONTAINERA lpOleUILinkCntr,HWND hwndParent,LPSTR lpszTitle,int cLinks) STDAPI_<oledlg.h>
OleUIUpdateLinksA(LPOLEUILINKCONTAINERA lpOleUILinkCntr,HWND hwndParent,LPSTR lpszTitle,int cLinks) STDAPI_<oledlg.h>
OleUIUpdateLinksW(LPOLEUILINKCONTAINERW lpOleUILinkCntr,HWND hwndParent,LPWSTR lpszTitle,int cLinks) STDAPI_<oledlg.h>
OleUnblockServer(LHSERVER,WINBOOL *) OLESTATUS WINAPI <ole.h>
OleUninitialize(void)WINOLEAPI_<ole2.h>
OleUnlockServer(LHSERVER) OLESTATUS WINAPI <ole.h>
OleUpdate(LPOLEOBJECT) OLESTATUS WINAPI <ole.h>
OnAbort()virtual bool WINAPI <vswriter.h>
OnACPower(void)virtual HRESULT WINAPI <sensevts.h>
OnActivityCreate(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity)virtual HRESULT WINAPI <comsvcs.h>
OnActivityDestroy(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity)virtual HRESULT WINAPI <comsvcs.h>
OnActivityEnter(COMSVCSEVENTINFO * pInfo,REFGUID guidCurrent,REFGUID guidEntered,DWORD dwThread)virtual HRESULT WINAPI <comsvcs.h>
OnActivityLeave(COMSVCSEVENTINFO * pInfo,REFGUID guidCurrent,REFGUID guidLeft)virtual HRESULT WINAPI <comsvcs.h>
OnActivityLeaveSame(COMSVCSEVENTINFO * pInfo,REFGUID guidCurrent,DWORD dwCallDepth)virtual HRESULT WINAPI <comsvcs.h>
OnActivityReenter(COMSVCSEVENTINFO * pInfo,REFGUID guidCurrent,DWORD dwThread,DWORD dwCallDepth)virtual HRESULT WINAPI <comsvcs.h>
OnActivityTimeout(COMSVCSEVENTINFO * pInfo,REFGUID guidCurrent,REFGUID guidEntered,DWORD dwThread,DWORD dwTimeout)virtual HRESULT WINAPI <comsvcs.h>
OnAmbientPropertyChange(LONG dispid)virtual HRESULT WINAPI <mshtmlc.h>
OnAppActivation(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnAppActivation2(COMSVCSEVENTINFO * pInfo,GUID guidApp,GUID guidProcess)virtual HRESULT WINAPI <comsvcs.h>
OnAppForceShutdown(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnAppForceShutdown2(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnAppPaused2(COMSVCSEVENTINFO * pInfo,GUID guidApp,WINBOOL bPaused)virtual HRESULT WINAPI <comsvcs.h>
OnAppRecycle2(COMSVCSEVENTINFO * pInfo,GUID guidApp,GUID guidProcess,__LONG32 lReason)virtual HRESULT WINAPI <comsvcs.h>
OnAppShutdown(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnAppShutdown2(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnArrival(IMessage * Msg,CdoEventStatus * EventStatus)virtual HRESULT WINAPI <cdosys.h>
OnAuthenticate(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,ULONG64 ObjectID,REFGUID guidIID,ULONG iMeth,ULONG cbByteOrig,BYTE * pSidOriginalUser,ULONG cbByteCur,BYTE * pSidCurrentUser,WINBOOL bCurrentUserInpersonatingInProc)virtual HRESULT WINAPI <comsvcs.h>
OnAuthenticateFail(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,ULONG64 ObjectID,REFGUID guidIID,ULONG iMeth,ULONG cbByteOrig,BYTE * pSidOriginalUser,ULONG cbByteCur,BYTE * pSidCurrentUser,WINBOOL bCurrentUserInpersonatingInProc)virtual HRESULT WINAPI <comsvcs.h>
OnBackOffIOOnVolume(VSS_PWSZ _vss_pwsz,VSS_ID _id1,VSS_ID _id2)virtual bool WINAPI <vswriter.h>
OnBackupComplete(IVssWriterComponents * pComponent)virtual bool WINAPI <vswriter.h>
OnBackupShutdown(VSS_ID SnapshotSetId)virtual bool WINAPI <vswriter.h>
OnBatteryPower(DWORD dwBatteryLifePercent)virtual HRESULT WINAPI <sensevts.h>
OnBeginDecode(DWORD * pdwEvents,ULONG * pnFormats,BFID ** ppFormats)virtual HRESULT WINAPI <ocmm.h>
OnBitsComplete(void)virtual HRESULT WINAPI <ocmm.h>
OnCall(ICallFrame * pFrame)virtual HRESULT WINAPI <comsvcs.h>
OnCall(void)virtual HRESULT WINAPI <comsvcs.h>
OnChange(IRowset * pRowset,DBWATCHNOTIFY eChangeReason)virtual HRESULT WINAPI <oledbdep.h>
OnChangeType(SELECTION_TYPE eType,ISelectionServicesListener * pIListener)virtual HRESULT WINAPI <mshtmlc.h>
OnChildFrameActivate(IUnknown * pUnkChildFrame)virtual HRESULT WINAPI <htiface.h>
OnChildFrameDeactivate(IUnknown * pUnkChildFrame)virtual HRESULT WINAPI <htiface.h>
OnCommand(WPARAM wParam,LPARAM lParam)virtual LRESULT WINAPI <shdeprecated.h>
OnContextMenuExecuted(PMENUITEM MenuItem)virtual HRESULT WINAPI <mmcobj.h>
OnContinueIOOnVolume(VSS_PWSZ _vss_pwsz,VSS_ID _id1,VSS_ID _id2)virtual bool WINAPI <vswriter.h>
OnCreate(IUnknown * pUnkDestination,ULONG cbCookie)virtual HRESULT WINAPI <shdeprecated.h>
OnCreate(struct tagCREATESTRUCTW * pcs)virtual HRESULT WINAPI <shdeprecated.h>
OnCRMAbort(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMAnalyze(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID,DWORD dwCrmRecordType,DWORD dwRecordSize)virtual HRESULT WINAPI <comsvcs.h>
OnCRMBegin(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID,GUID guidActivity,GUID guidTx,WCHAR szProgIdCompensator[64],WCHAR szDescription[64])virtual HRESULT WINAPI <comsvcs.h>
OnCRMCheckpoint(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnCRMCommit(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMDeliver(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID,WINBOOL fVariants,DWORD dwRecordSize)virtual HRESULT WINAPI <comsvcs.h>
OnCRMDone(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMForce(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMForget(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMIndoubt(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMPrepare(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMRecoveryDone(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnCRMRecoveryStart(COMSVCSEVENTINFO * pInfo,GUID guidApp)virtual HRESULT WINAPI <comsvcs.h>
OnCRMRelease(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID)virtual HRESULT WINAPI <comsvcs.h>
OnCRMWrite(COMSVCSEVENTINFO * pInfo,GUID guidClerkCLSID,WINBOOL fVariants,DWORD dwRecordSize)virtual HRESULT WINAPI <comsvcs.h>
OnDataChanged(DWORD dwPID,DWORD dwMask,DWORD dwNumberSinks,BSTR bstrDwMethodMask,DWORD dwReason,ULONG64 u64TraceHandle)virtual HRESULT WINAPI <comsvcs.h>
OnDecodeComplete(HRESULT hrStatus)virtual HRESULT WINAPI <ocmm.h>
OnDefWindowProc(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,LRESULT * plResult)virtual HRESULT WINAPI <mshtmlc.h>
OnDestroy(void)virtual HRESULT WINAPI <shdeprecated.h>
OnDisableCommit(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID)virtual HRESULT WINAPI <comsvcs.h>
OnDocumentClose(PDOCUMENT Document)virtual HRESULT WINAPI <mmcobj.h>
OnDocumentOpen(PDOCUMENT Document,WINBOOL New)virtual HRESULT WINAPI <mmcobj.h>
OnEnableCommit(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID)virtual HRESULT WINAPI <comsvcs.h>
OnError(HRESULT hr)virtual HRESULT WINAPI <comsvcs.h>
OnEvent(AMTunerEventType Event)virtual HRESULT WINAPI <strmif.h>
OnEvent(AMTVAudioEventType Event)virtual HRESULT WINAPI <strmif.h>
OnEvent(DWORD dwEvent,DWORD dwStatus)virtual HRESULT WINAPI <strmif.h>
OnExceptionUser(COMSVCSEVENTINFO * pInfo,ULONG code,ULONG64 address,LPCOLESTR pszStackTrace)virtual HRESULT WINAPI <comsvcs.h>
OnFieldChange(IRowset * pRowset,HROW hRow,DBORDINAL cColumns,DBORDINAL rgColumns[],DBREASON eReason,DBEVENTPHASE ePhase,WINBOOL fCantDeny)virtual HRESULT WINAPI <oledb.h>
OnFrameWindowActivateBS(WINBOOL fActive)virtual HRESULT WINAPI <shdeprecated.h>
OnFreeze()virtual bool WINAPI <vswriter.h>
OnHttpEquiv(IShellView * psv,WINBOOL fDone,VARIANT * pvarargIn,VARIANT * pvarargOut)virtual HRESULT WINAPI <shdeprecated.h>
OnIdentify(IVssCreateWriterMetadata * pMetadata)virtual bool WINAPI <vswriter.h>
OnIdentifyEx(IVssCreateWriterMetadataEx * pMetadata)virtual bool WINAPI <vswriter.h>
OnIISRequestInfo(COMSVCSEVENTINFO * pInfo,ULONG64 ObjId,LPCOLESTR pszClientIP,LPCOLESTR pszServerIP,LPCOLESTR pszURL)virtual HRESULT WINAPI <comsvcs.h>
OnInterfaceChange(VOID) virtual VOID <_dbdao.h>
OnInvoke(DISPID dispidMember,REFIID iid,LCID lcid,WORD wFlags,DISPPARAMS * pdispparams,VARIANT * pVarResult,EXCEPINFO * pexcepinfo,UINT * puArgErr)virtual HRESULT WINAPI <shdeprecated.h>
Online(__LONG32 nTimeout,VARIANT * pvarPending)virtual HRESULT WINAPI <resapi.h>
Online(VARIANT varTimeout,VARIANT varNode,VARIANT * pvarPending)virtual HRESULT WINAPI <resapi.h>
OnlineClusterGroup(HGROUP hGroup,HNODE hDestinationNode) DWORD WINAPI <clusapi.h>
OnlineClusterResource(HRESOURCE hResource) DWORD WINAPI <clusapi.h>
OnListUpdated(PVIEW View)virtual HRESULT WINAPI <mmcobj.h>
OnLowResource(DB_DWRESERVE dwReserved)virtual HRESULT WINAPI <oledb.h>
OnMethodCall(COMSVCSEVENTINFO * pInfo,ULONG64 oid,REFCLSID guidCid,REFIID guidRid,ULONG iMeth)virtual HRESULT WINAPI <comsvcs.h>
OnMethodCall2(COMSVCSEVENTINFO * pInfo,ULONG64 oid,REFCLSID guidCid,REFIID guidRid,DWORD dwThread,ULONG iMeth)virtual HRESULT WINAPI <comsvcs.h>
OnMethodException(COMSVCSEVENTINFO * pInfo,ULONG64 oid,REFCLSID guidCid,REFIID guidRid,ULONG iMeth)virtual HRESULT WINAPI <comsvcs.h>
OnMethodException2(COMSVCSEVENTINFO * pInfo,ULONG64 oid,REFCLSID guidCid,REFIID guidRid,DWORD dwThread,ULONG iMeth)virtual HRESULT WINAPI <comsvcs.h>
OnMethodReturn(COMSVCSEVENTINFO * pInfo,ULONG64 oid,REFCLSID guidCid,REFIID guidRid,ULONG iMeth,HRESULT hresult)virtual HRESULT WINAPI <comsvcs.h>
OnMethodReturn2(COMSVCSEVENTINFO * pInfo,ULONG64 oid,REFCLSID guidCid,REFIID guidRid,DWORD dwThread,ULONG iMeth,HRESULT hresult)virtual HRESULT WINAPI <comsvcs.h>
OnMove(RECT rcDevice)virtual HRESULT WINAPI <mshtmlc.h>
OnNavigate(DWORD grfHLNF,IMoniker * pimkTarget,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName,DWORD dwreserved)virtual HRESULT WINAPI <hlink.h>
OnNavigateHlink(DWORD grfHLNF,IMoniker * pimkTarget,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName,ULONG * puHLID)virtual HRESULT WINAPI <hlink.h>
OnNavigationComplete(DWORD dwSiteData,DWORD dwreserved,HRESULT hrError,LPCWSTR pwzError)virtual HRESULT WINAPI <hlink.h>
OnNewTrackingInfo(IUnknown * pToplevelCollection)virtual HRESULT WINAPI <comsvcs.h>
OnNewView(PVIEW View)virtual HRESULT WINAPI <mmcobj.h>
OnNotify(struct tagNMHDR * pnm)virtual LRESULT WINAPI <shdeprecated.h>
OnObjectActivate(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID,ULONG64 ObjectID)virtual HRESULT WINAPI <comsvcs.h>
OnObjectConstruct(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,LPCOLESTR sConstructString,ULONG64 oid)virtual HRESULT WINAPI <comsvcs.h>
OnObjectConstruct2(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,LPCOLESTR sConstructString,ULONG64 oid,REFGUID guidPartition)virtual HRESULT WINAPI <comsvcs.h>
OnObjectCreate(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFCLSID clsid,REFGUID tsid,ULONG64 CtxtID,ULONG64 ObjectID)virtual HRESULT WINAPI <comsvcs.h>
OnObjectCreate2(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFCLSID clsid,REFGUID tsid,ULONG64 CtxtID,ULONG64 ObjectID,REFGUID guidPartition)virtual HRESULT WINAPI <comsvcs.h>
OnObjectDeactivate(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID,ULONG64 ObjectID)virtual HRESULT WINAPI <comsvcs.h>
OnObjectDestroy(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID)virtual HRESULT WINAPI <comsvcs.h>
OnObjectDestroy2(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolCreateDecision(COMSVCSEVENTINFO * pInfo,DWORD dwThreadsWaiting,DWORD dwAvail,DWORD dwCreated,DWORD dwMin,DWORD dwMax)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolCreateObject(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,DWORD dwObjsCreated,ULONG64 oid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolCreatePool(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,DWORD dwMin,DWORD dwMax,DWORD dwTimeout)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolDestroyObject(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,DWORD dwObjsCreated,ULONG64 oid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolGetFromTx(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFGUID guidObject,REFGUID guidTx,ULONG64 objid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolGetFromTx2(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFGUID guidObject,REFGUID guidTx,ULONG64 objid,REFGUID guidPartition)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolGetObject(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFGUID guidObject,DWORD dwAvailable,ULONG64 oid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolGetObject2(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFGUID guidObject,DWORD dwAvailable,ULONG64 oid,REFGUID guidPartition)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolPutObject(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,int nReason,DWORD dwAvailable,ULONG64 oid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolPutObject2(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,int nReason,DWORD dwAvailable,ULONG64 oid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolRecycleToTx(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFGUID guidObject,REFGUID guidTx,ULONG64 objid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolRecycleToTx2(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,REFGUID guidObject,REFGUID guidTx,ULONG64 objid)virtual HRESULT WINAPI <comsvcs.h>
OnObjPoolTimeout(COMSVCSEVENTINFO * pInfo,REFGUID guidObject,REFGUID guidActivity,DWORD dwTimeout)virtual HRESULT WINAPI <comsvcs.h>
OnPalette(void)virtual HRESULT WINAPI <ocmm.h>
OnPost(IMessage * Msg,CdoEventStatus * EventStatus)virtual HRESULT WINAPI <cdosys.h>
OnPostEarly(IMessage * Msg,CdoEventStatus * EventStatus)virtual HRESULT WINAPI <cdosys.h>
OnPostFinal(IMessage * Msg,CdoEventStatus * EventStatus)virtual HRESULT WINAPI <cdosys.h>
OnPostRestore(IVssWriterComponents * pComponent)virtual bool WINAPI <vswriter.h>
OnPostSnapshot(IVssWriterComponents * pComponent)virtual bool WINAPI <vswriter.h>
OnPowerBroadcast(UINT nEvent,LPARAM lParam,LRESULT * plReturn)virtual HRESULT WINAPI <mmc.h>
OnPrepareBackup(IVssWriterComponents * pComponent)virtual bool WINAPI <vswriter.h>
OnPrepareSnapshot()virtual bool WINAPI <vswriter.h>
OnPreRestore(IVssWriterComponents * pComponent)virtual bool WINAPI <vswriter.h>
OnProgress(DWORD ProgressType,IBackgroundCopyGroup * pGroup,IBackgroundCopyJob1 * pJob,DWORD dwFileIndex,DWORD dwProgressValue)virtual HRESULT WINAPI <qmgr.h>
OnProgress(HCHAPTER hChapter,DBASYNCHOP eOperation,DBCOUNTITEM ulProgress,DBCOUNTITEM ulProgressMax,DBASYNCHPHASE eAsynchPhase,LPOLESTR pwszStatusText)virtual HRESULT WINAPI <qmgr.h>
OnProgress(RECT * pBounds,WINBOOL bComplete)virtual HRESULT WINAPI <qmgr.h>
OnProgressEx(DWORD ProgressType,IBackgroundCopyGroup * pGroup,IBackgroundCopyJob1 * pJob,DWORD dwFileIndex,DWORD dwProgressValue,DWORD dwByteArraySize,BYTE * pByte)virtual HRESULT WINAPI <qmgr.h>
OnProperties(OLECHAR * pocMachineName,OLECHAR * pocMetabasePath) virtual HRESULT WINAPI <ilogobj.h>
OnPropertiesEx(OLECHAR * pocMachineName,OLECHAR * pocMetabasePath,OLECHAR * pocUserName,OLECHAR * pocUserPassword) virtual HRESULT WINAPI <ilogobj.h>
OnQCMoveToDeadQueue(COMSVCSEVENTINFO * pInfo,REFGUID guidMsgId,REFGUID guidWorkFlowId)virtual HRESULT WINAPI <comsvcs.h>
OnQCMoveToReTryQueue(COMSVCSEVENTINFO * pInfo,REFGUID guidMsgId,REFGUID guidWorkFlowId,ULONG RetryIndex)virtual HRESULT WINAPI <comsvcs.h>
OnQCPlayback(COMSVCSEVENTINFO * pInfo,ULONG64 objid,REFGUID guidMsgId,REFGUID guidWorkFlowId,HRESULT hr)virtual HRESULT WINAPI <comsvcs.h>
OnQCQueueOpen(COMSVCSEVENTINFO * pInfo,WCHAR szQueue[60],ULONG64 QueueID,HRESULT hr)virtual HRESULT WINAPI <comsvcs.h>
OnQCReceive(COMSVCSEVENTINFO * pInfo,ULONG64 QueueID,REFGUID guidMsgId,REFGUID guidWorkFlowId,HRESULT hr)virtual HRESULT WINAPI <comsvcs.h>
OnQCReceiveFail(COMSVCSEVENTINFO * pInfo,ULONG64 QueueID,HRESULT msmqhr)virtual HRESULT WINAPI <comsvcs.h>
OnQCRecord(COMSVCSEVENTINFO * pInfo,ULONG64 objid,WCHAR szQueue[60],REFGUID guidMsgId,REFGUID guidWorkFlowId,HRESULT msmqhr)virtual HRESULT WINAPI <comsvcs.h>
OnQuit(PAPPLICATION Application)virtual HRESULT WINAPI <mmcobj.h>
OnResize(SIZE size)virtual HRESULT WINAPI <mshtmlc.h>
OnResourceAllocate(COMSVCSEVENTINFO * pInfo,ULONG64 ObjectID,LPCOLESTR pszType,ULONG64 resId,WINBOOL enlisted,DWORD NumRated,DWORD Rating)virtual HRESULT WINAPI <comsvcs.h>
OnResourceCreate(COMSVCSEVENTINFO * pInfo,ULONG64 ObjectID,LPCOLESTR pszType,ULONG64 resId,WINBOOL enlisted)virtual HRESULT WINAPI <comsvcs.h>
OnResourceDestroy(COMSVCSEVENTINFO * pInfo,ULONG64 ObjectID,HRESULT hr,LPCOLESTR pszType,ULONG64 resId)virtual HRESULT WINAPI <comsvcs.h>
OnResourceRecycle(COMSVCSEVENTINFO * pInfo,ULONG64 ObjectID,LPCOLESTR pszType,ULONG64 resId)virtual HRESULT WINAPI <comsvcs.h>
OnResourceTrack(COMSVCSEVENTINFO * pInfo,ULONG64 ObjectID,LPCOLESTR pszType,ULONG64 resId,WINBOOL enlisted)virtual HRESULT WINAPI <comsvcs.h>
OnReuse(IUnknown * pUnkDestination)virtual HRESULT WINAPI <htiframe.h>
OnRowChange(IRowset * pRowset,DBCOUNTITEM cRows,const HROW rghRows[],DBREASON eReason,DBEVENTPHASE ePhase,WINBOOL fCantDeny)virtual HRESULT WINAPI <oledb.h>
OnRowPositionChange(DBREASON eReason,DBEVENTPHASE ePhase,WINBOOL fCantDeny)virtual HRESULT WINAPI <oledb.h>
OnRowsetChange(IRowset * pRowset,DBREASON eReason,DBEVENTPHASE ePhase,WINBOOL fCantDeny)virtual HRESULT WINAPI <oledb.h>
OnSelectedElementExit(IMarkupPointer * pIElementStart,IMarkupPointer * pIElementEnd,IMarkupPointer * pIElementContentStart,IMarkupPointer * pIElementContentEnd)virtual HRESULT WINAPI <mshtmlc.h>
OnSelectionChange(PVIEW View,PNODES NewNodes)virtual HRESULT WINAPI <mmcobj.h>
OnSetAbort(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID)virtual HRESULT WINAPI <comsvcs.h>
OnSetComplete(COMSVCSEVENTINFO * pInfo,ULONG64 CtxtID)virtual HRESULT WINAPI <comsvcs.h>
OnSetFocus(void)virtual HRESULT WINAPI <shdeprecated.h>
OnSize(WPARAM wParam)virtual HRESULT WINAPI <shdeprecated.h>
OnSnapInAdded(PDOCUMENT Document,PSNAPIN SnapIn)virtual HRESULT WINAPI <mmcobj.h>
OnSnapInRemoved(PDOCUMENT Document,PSNAPIN SnapIn)virtual HRESULT WINAPI <mmcobj.h>
OnStatus(IBackgroundCopyGroup * pGroup,IBackgroundCopyJob1 * pJob,DWORD dwFileIndex,DWORD dwStatus,DWORD dwNumOfRetries,DWORD dwWin32Result,DWORD dwTransportResult)virtual HRESULT WINAPI <qmgr.h>
OnStop(HCHAPTER hChapter,DBASYNCHOP eOperation,HRESULT hrStatus,LPOLESTR pwszStatusText)virtual HRESULT WINAPI <oledb.h>
OnThaw()virtual bool WINAPI <vswriter.h>
OnThreadAssignApartment(COMSVCSEVENTINFO * pInfo,REFGUID guidActivity,ULONG64 AptID)virtual HRESULT WINAPI <comsvcs.h>
OnThreadBindToApartment(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 AptID,DWORD dwActCnt,DWORD dwLowCnt)virtual HRESULT WINAPI <comsvcs.h>
OnThreadStart(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,DWORD dwThread,DWORD dwTheadCnt)virtual HRESULT WINAPI <comsvcs.h>
OnThreadTerminate(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,DWORD dwThread,DWORD dwTheadCnt)virtual HRESULT WINAPI <comsvcs.h>
OnThreadUnassignApartment(COMSVCSEVENTINFO * pInfo,ULONG64 AptID)virtual HRESULT WINAPI <comsvcs.h>
OnThreadUnBind(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 AptID,DWORD dwActCnt)virtual HRESULT WINAPI <comsvcs.h>
OnThreadWorkEnque(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 MsgWorkID,DWORD QueueLen)virtual HRESULT WINAPI <comsvcs.h>
OnThreadWorkPrivate(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 MsgWorkID)virtual HRESULT WINAPI <comsvcs.h>
OnThreadWorkPublic(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 MsgWorkID,DWORD QueueLen)virtual HRESULT WINAPI <comsvcs.h>
OnThreadWorkRedirect(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 MsgWorkID,DWORD QueueLen,ULONG64 ThreadNum)virtual HRESULT WINAPI <comsvcs.h>
OnThreadWorkReject(COMSVCSEVENTINFO * pInfo,ULONG64 ThreadID,ULONG64 MsgWorkID,DWORD QueueLen)virtual HRESULT WINAPI <comsvcs.h>
OnTimer(VARIANT vtimeAdvise)virtual HRESULT WINAPI <ocmm.h>
OnToolbarButtonClicked(void)virtual HRESULT WINAPI <mmcobj.h>
OnTransactionAbort(COMSVCSEVENTINFO * pInfo,REFGUID guidTx)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionAbort2(COMSVCSEVENTINFO * pInfo,REFGUID guidTx)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionCommit(COMSVCSEVENTINFO * pInfo,REFGUID guidTx)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionCommit2(COMSVCSEVENTINFO * pInfo,REFGUID guidTx)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionPrepare(COMSVCSEVENTINFO * pInfo,REFGUID guidTx,WINBOOL fVoteYes)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionPrepare2(COMSVCSEVENTINFO * pInfo,REFGUID guidTx,WINBOOL fVoteYes)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionStart(COMSVCSEVENTINFO * pInfo,REFGUID guidTx,REFGUID tsid,WINBOOL fRoot)virtual HRESULT WINAPI <comsvcs.h>
OnTransactionStart2(COMSVCSEVENTINFO * pInfo,REFGUID guidTx,REFGUID tsid,WINBOOL fRoot,int nIsolationLevel)virtual HRESULT WINAPI <comsvcs.h>
OnTranslateAccelerator(MSG * pMsg,DWORD grfModifiers)virtual HRESULT WINAPI <shdeprecated.h>
OnTxCharFormatChange(const CHARFORMATW * pcf) virtual HRESULT <textserv.h>
OnTxInPlaceActivate(LPCRECT prcClient) virtual HRESULT <textserv.h>
OnTxInPlaceDeactivate() virtual HRESULT <textserv.h>
OnTxParaFormatChange(const PARAFORMAT * ppf) virtual HRESULT <textserv.h>
OnTxPropertyBitsChange(DWORD dwMask,DWORD dwBits) virtual HRESULT <textserv.h>
OnTxSetCursor(DWORD dwDrawAspect,LONG lindex,void * pvAspect,DVTARGETDEVICE * ptd,HDC hdcDraw,HDC hicTargetDev,LPCRECT lprcClient,INT x,INT y) virtual HRESULT <textserv.h>
OnTxUIActivate() virtual HRESULT <textserv.h>
OnTxUIDeactivate() virtual HRESULT <textserv.h>
OnUpdateColorKey(const COLORKEY * pKey,DWORD dwColor)virtual HRESULT WINAPI <strmif.h>
OnUpdateOverlay(WINBOOL bBefore,DWORD dwFlags,WINBOOL bOldVisible,const RECT * prcOldSrc,const RECT * prcOldDest,WINBOOL bNewVisible,const RECT * prcNewSrc,const RECT * prcNewDest)virtual HRESULT WINAPI <strmif.h>
OnUpdateSize(DWORD dwWidth,DWORD dwHeight,DWORD dwARWidth,DWORD dwARHeight)virtual HRESULT WINAPI <strmif.h>
OnUserEvent(COMSVCSEVENTINFO * pInfo,VARIANT * pvarEvent)virtual HRESULT WINAPI <comsvcs.h>
OnViewChange(PVIEW View,PNODE NewOwnerNode)virtual HRESULT WINAPI <mmcobj.h>
OnViewClose(PVIEW View)virtual HRESULT WINAPI <mmcobj.h>
OnVssShutdown()virtual bool WINAPI <vswriter.h>
OnWalkInterface(REFIID iid,PVOID * ppvInterface,WINBOOL fIn,WINBOOL fOut)virtual HRESULT WINAPI <callobj.h>
OpAttribute(name)<wsdxml.h>
OpBeginElement(name)<wsdxml.h>
OpElement(name)<wsdxml.h>
Open(__LONG32 Access,__LONG32 ShareMode,IMSMQQueue ** ppq)virtual HRESULT WINAPI <tom.h>
Open(__LONG32 Access,__LONG32 ShareMode,IMSMQQueue2 ** ppq)virtual HRESULT WINAPI <tom.h>
Open(__LONG32 Access,__LONG32 ShareMode,IMSMQQueue3 ** ppq)virtual HRESULT WINAPI <tom.h>
Open(BSTR bstrClusterName)virtual HRESULT WINAPI <tom.h>
Open(BSTR SourceURL,IDispatch * ActiveConnection,ConnectModeEnum Mode,RecordCreateOptionsEnum CreateOptions,RecordOpenOptionsEnum Options,BSTR UserName,BSTR Password)virtual HRESULT WINAPI <tom.h>
Open(IUnknown * pUnkOuter,DBID * pColumnID,REFGUID rguidColumnType,DWORD dwBindFlags,REFIID riid,IUnknown ** ppUnk)virtual HRESULT WINAPI <tom.h>
Open(PHONE_PRIVILEGE Privilege)virtual HRESULT WINAPI <tom.h>
Open(VARIANT * pVar,__LONG32 Flags,__LONG32 CodePage)virtual HRESULT WINAPI <tom.h>
Open(void)virtual HRESULT WINAPI <tom.h>
OPEN_ADAPTER_HANDLER(OUT PNDIS_STATUS OpenErrorStatus,OUT NDIS_HANDLE * MacBindingHandle,OUT PUINT SelectedMediumIndex,IN PNDIS_MEDIUM MediumArray,IN UINT MediumArraySize,IN NDIS_HANDLE NdisBindingContext,IN NDIS_HANDLE MacAdapterContext,IN UINT OpenOptions,IN PSTRING AddressingInformation OPTIONAL)typedef NDIS_STATUS<ndis.h>
OpenApplication(BSTR bstrApplicationName,VARIANT varReserved,IAzApplication ** ppApplication)virtual HRESULT WINAPI <azroles.h>
OpenApplication2(BSTR bstrApplicationName,VARIANT varReserved,IAzApplication2 ** ppApplication)virtual HRESULT WINAPI <azroles.h>
OpenApplicationGroup(BSTR bstrGroupName,VARIANT varReserved,IAzApplicationGroup ** ppGroup)virtual HRESULT WINAPI <azroles.h>
OpenBackupEventLog(LPCSTR lpUNCServerName,LPCSTR lpFileName) WINADVAPI HANDLE WINAPI <winbase.h>
OpenBackupEventLogA(LPCSTR lpUNCServerName,LPCSTR lpFileName) WINADVAPI HANDLE WINAPI <winbase.h>
OpenBackupEventLogW(LPCWSTR lpUNCServerName,LPCWSTR lpFileName) WINADVAPI HANDLE WINAPI <winbase.h>
OpenClipboard(HWND hWndNewOwner) WINUSERAPI WINBOOL WINAPI <winuser.h>
OpenCluster(BSTR bstrClusterName,ISCluster ** pCluster)virtual HRESULT WINAPI <msclus.h>
OpenCluster(LPCWSTR lpszClusterName) HCLUSTER WINAPI <msclus.h>
OpenClusterGroup(HCLUSTER hCluster,LPCWSTR lpszGroupName) HGROUP WINAPI <clusapi.h>
OpenClusterNetInterface(HCLUSTER hCluster,LPCWSTR lpszInterfaceName) HNETINTERFACE WINAPI <clusapi.h>
OpenClusterNetwork(HCLUSTER hCluster,LPCWSTR lpszNetworkName) HNETWORK WINAPI <clusapi.h>
OpenClusterNode(HCLUSTER hCluster,LPCWSTR lpszNodeName) HNODE WINAPI <clusapi.h>
OpenClusterResource(HCLUSTER hCluster,LPCWSTR lpszResourceName) HRESOURCE WINAPI <clusapi.h>
OpenColorProfile(PPROFILE,DWORD,DWORD,DWORD) HPROFILE WINAPI <icm.h>
OpenColorProfileA(PPROFILE,DWORD,DWORD,DWORD) HPROFILE WINAPI <icm.h>
OpenColorProfileW(PPROFILE,DWORD,DWORD,DWORD) HPROFILE WINAPI <icm.h>
OpenConnection(const BSTR strConfig)virtual HRESULT WINAPI <certview.h>
OpenDatabase(const BSTR Path)virtual HRESULT WINAPI <mergemod.h>
OpenDesktop(LPCSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HDESK WINAPI <winuser.h>
OpenDesktopA(LPCSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HDESK WINAPI <winuser.h>
OpenDesktopW(LPCWSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HDESK WINAPI <winuser.h>
OpenDialog(HSEARCHER hsrch,HWND hwndParent) HWND WINAPI <ftsiface.h>
OpenDriver(LPCWSTR szDriverName,LPCWSTR szSectionName,LPARAM lParam2) WINMMAPI HDRVR WINAPI <mmsystem.h>
OpenDSObject(BSTR lpszDNName,BSTR lpszUserName,BSTR lpszPassword,__LONG32 lnReserved,IDispatch ** ppOleDsObj)virtual HRESULT WINAPI <iads.h>
OpenEncryptedFileRaw(LPCSTR lpFileName,ULONG ulFlags,PVOID * pvContext) WINADVAPI DWORD WINAPI <winbase.h>
OpenEncryptedFileRawA(LPCSTR lpFileName,ULONG ulFlags,PVOID * pvContext) WINADVAPI DWORD WINAPI <winbase.h>
OpenEncryptedFileRawW(LPCWSTR lpFileName,ULONG ulFlags,PVOID * pvContext) WINADVAPI DWORD WINAPI <winbase.h>
OpenEnlistment(DWORD dwDesiredAccess,HANDLE ResourceManagerHandle,LPGUID EnlistmentId) HANDLE WINAPI <ktmw32.h>
OpenEvent(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
OpenEventA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
OpenEventLog(LPCSTR lpUNCServerName,LPCSTR lpSourceName) WINADVAPI HANDLE WINAPI <winbase.h>
OpenEventLogA(LPCSTR lpUNCServerName,LPCSTR lpSourceName) WINADVAPI HANDLE WINAPI <winbase.h>
OpenEventLogW(LPCWSTR lpUNCServerName,LPCWSTR lpSourceName) WINADVAPI HANDLE WINAPI <winbase.h>
OpenEventW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
OpenFile(LPCSTR lpFileName,LPOFSTRUCT lpReOpenBuff,UINT uStyle) WINBASEAPI HFILE WINAPI <winbase.h>
OpenFileById(HANDLE hVolumeHint,LPFILE_ID_DESCRIPTOR lpFileId,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwFlagsAndAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenFileMapping(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenFileMappingA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenFileMappingW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <memoryapi.h>
openHandle(DWORD) typedef UINT _stdcall VIRTUALCHANNELCLOSE<cchannel.h>
OpenIcon(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
OpenIMsgOnIStg(LPMSGSESS lpMsgSess,LPALLOCATEBUFFER lpAllocateBuffer,LPALLOCATEMORE lpAllocateMore,LPFREEBUFFER lpFreeBuffer,LPMALLOC lpMalloc,LPVOID lpMapiSup,LPSTORAGE lpStg,MSGCALLRELEASE * lpfMsgCallRelease,ULONG ulCallerData,ULONG ulFlags,LPMESSAGE * lppMsg) STDAPI_<imessage.h>
OpenIMsgSession(LPMALLOC lpMalloc,ULONG ulFlags,LPMSGSESS * lppMsgSess) STDAPI_<imessage.h>
OpenIndex(HSEARCHER hsrch,PSZ pszIndexFileName,PBYTE pbSourceName,PUINT pcbSourceNameLimit,PUINT pTime1,PUINT pTime2) INT WINAPI <ftsiface.h>
OpenINFEngine(PCSTR pszInfFilename,PCSTR pszInstallSection,DWORD dwFlags,HINF * phInf,PVOID pvReserved) HRESULT WINAPI <advpub.h>
OpenInputDesktop(DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HDESK WINAPI <winuser.h>
OpenItem(PST_KEY Key,const GUID * pItemType,const GUID * pItemSubtype,LPCWSTR szItemName,PST_ACCESSMODE ModeFlags,PPST_PROMPTINFO pPromptInfo,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
OpenJobObject(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenJobObjectA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenJobObjectW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenKey(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,DWORD dwMDAccessRequested,DWORD dwMDTimeOut,PMETADATA_HANDLE phMDNewHandle)virtual HRESULT WINAPI <iadmw.h>
OpenLog(const BSTR Path)virtual HRESULT WINAPI <mergemod.h>
OpenModule(const BSTR Path,const short Language)virtual HRESULT WINAPI <mergemod.h>
OpenMutex(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenMutexA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenMutexW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
OpenNamespace(const BSTR Namespace,__LONG32 lFlags,IWbemContext * pCtx,IWbemServices ** ppWorkingNamespace,IWbemCallResult ** ppResult)HRESULT WINAPI <wmiatlprov.h>
OpenNamespace(const BSTR strNamespace,__LONG32 lFlags,IWbemContext * pCtx,IWbemServices ** ppWorkingNamespace,IWbemCallResult ** ppResult)virtual HRESULT WINAPI <wmiatlprov.h>
OpenNtmsNotification(HANDLE hSession,DWORD dwType) HANDLE WINAPI <ntmsapi.h>
OpenNtmsSession(LPCSTR lpServer,LPCSTR lpApplication,DWORD dwOptions) HANDLE WINAPI <ntmsapi.h>
OpenNtmsSessionA(LPCSTR lpServer,LPCSTR lpApplication,DWORD dwOptions) HANDLE WINAPI <ntmsapi.h>
OpenNtmsSessionW(LPCWSTR lpServer,LPCWSTR lpApplication,DWORD dwOptions) HANDLE WINAPI <ntmsapi.h>
OpenObject(IUnknown * Source,BSTR InterfaceName)virtual HRESULT WINAPI <cdosys.h>
OpenOperation(BSTR bstrOperationName,VARIANT varReserved,IAzOperation ** ppOperation)virtual HRESULT WINAPI <azroles.h>
OpenPort(LPWSTR pName,PHANDLE pHandle)<winsplp.h>
OpenPrinter(LPSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSA pDefault) WINBOOL WINAPI <winspool.h>
OpenPrinter2(LPCSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTS pDefault,PPRINTER_OPTIONS pOptions)WINBOOL WINAPI <winspool.h>
OpenPrinter2A(LPCSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTS pDefault,PPRINTER_OPTIONS pOptions)WINBOOL WINAPI <winspool.h>
OpenPrinter2W(LPCWSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTS pDefault,PPRINTER_OPTIONS pOptions)WINBOOL WINAPI <winspool.h>
OpenPrinterA(LPSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSA pDefault) WINBOOL WINAPI <winspool.h>
OpenPrinterToken(PHANDLE phToken)WINBOOL WINAPI <winsplp.h>
OpenPrinterW(LPWSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSW pDefault) WINBOOL WINAPI <winspool.h>
OpenPrintProcessor(LPWSTR pPrinterName,PPRINTPROCESSOROPENDATA pPrintProcessorOpenData)<winsplp.h>
OpenPrivateNamespace(LPVOID lpBoundaryDescriptor,LPCSTR lpAliasPrefix) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenPrivateNamespaceA(LPVOID lpBoundaryDescriptor,LPCSTR lpAliasPrefix) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenPrivateNamespaceW(LPVOID lpBoundaryDescriptor,LPCWSTR lpAliasPrefix) WINBASEAPI HANDLE WINAPI <namespaceapi.h>
OpenProcess(DWORD dwDesiredAccess,WINBOOL bInheritHandle,DWORD dwProcessId) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
OpenProcessToken(HANDLE ProcessHandle,DWORD DesiredAccess,PHANDLE TokenHandle) WINADVAPI WINBOOL WINAPI <processthreadsapi.h>
OpenRegStream(HKEY hkey,PCWSTR pszSubkey,PCWSTR pszValue,DWORD grfMode) SHSTDAPI_<shlobj.h>
OpenResourceManager(DWORD dwDesiredAccess,HANDLE TmHandle,LPGUID RmGuid) HANDLE WINAPI <ktmw32.h>
OpenRole(BSTR bstrRoleName,VARIANT varReserved,IAzRole ** ppRole)virtual HRESULT WINAPI <azroles.h>
OpenRowset(IUnknown * pUnkOuter,DBID * pTableID,DBID * pIndexID,REFIID riid,ULONG cPropertySets,DBPROPSET rgPropertySets[],IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
OpenSCManager(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
OpenSCManagerW(LPCWSTR lpMachineName,LPCWSTR lpDatabaseName,DWORD dwDesiredAccess) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
OpenScope(BSTR bstrScopeName,VARIANT varReserved,IAzScope ** ppScope)virtual HRESULT WINAPI <azroles.h>
OpenSemaphore(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenSemaphoreA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenSemaphoreW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName) WINBASEAPI HANDLE WINAPI <synchapi.h>
OpenService(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
OpenServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,DWORD dwDesiredAccess) WINADVAPI SC_HANDLE WINAPI <winsvc.h>
OpenStreamOnFile(LPALLOCATEBUFFER lpAllocateBuffer,LPFREEBUFFER lpFreeBuffer,ULONG ulFlags,LPTSTR lpszFileName,LPTSTR lpszPrefix,LPSTREAM * lppStream) STDMETHODIMP <wabutil.h>
OpenTask(BSTR bstrTaskName,VARIANT varReserved,IAzTask ** ppTask)virtual HRESULT WINAPI <azroles.h>
OpenThemeData(HWND hwnd,LPCWSTR pszClassList)THEMEAPI_<uxtheme.h>
OpenThemeDataEx(HWND hwnd,LPCWSTR pszClassList,DWORD dwFlags)THEMEAPI_<uxtheme.h>
OpenThread(DWORD dwDesiredAccess,WINBOOL bInheritHandle,DWORD dwThreadId) WINBASEAPI HANDLE WINAPI <processthreadsapi.h>
OpenThreadToken(HANDLE ThreadHandle,DWORD DesiredAccess,WINBOOL OpenAsSelf,PHANDLE TokenHandle) WINADVAPI WINBOOL WINAPI <processthreadsapi.h>
OpenThreadWaitChainSession(DWORD Flags,PWAITCHAINCALLBACK callback) HWCT WINAPI <wct.h>
OpenTnefStream(LPVOID lpvSupport,LPSTREAM lpStream,LPTSTR lpszStreamName,ULONG ulFlags,LPMESSAGE lpMessage,WORD wKeyVal,LPITNEF * lppTNEF) STDMETHODIMP <tnef.h>
OpenTnefStreamEx(LPVOID lpvSupport,LPSTREAM lpStream,LPTSTR lpszStreamName,ULONG ulFlags,LPMESSAGE lpMessage,WORD wKeyVal,LPADRBOOK lpAdressBook,LPITNEF * lppTNEF) STDMETHODIMP <tnef.h>
OpenTrace(PEVENT_TRACE_LOGFILEA Logfile) EXTERN_C TRACEHANDLE WMIAPI <evntrace.h>
OpenTraceA(PEVENT_TRACE_LOGFILEA Logfile) EXTERN_C TRACEHANDLE WMIAPI <evntrace.h>
OpenTraceW(PEVENT_TRACE_LOGFILEW Logfile) EXTERN_C TRACEHANDLE WMIAPI <evntrace.h>
OpenTransaction(DWORD dwDesiredAccess,LPGUID TransactionId) HANDLE WINAPI <ktmw32.h>
OpenTransactionManager(LPWSTR LogFileName,ACCESS_MASK DesiredAccess,ULONG OpenOptions) HANDLE WINAPI <ktmw32.h>
OpenTransactionManagerById(LPGUID TransactionManagerId,ACCESS_MASK DesiredAccess,ULONG OpenOptions) HANDLE WINAPI <ktmw32.h>
OpenView(IEnumCERTVIEWROW ** ppenum)virtual HRESULT WINAPI <certview.h>
OpenViewChapter(HCHAPTER hSource,HCHAPTER * phViewChapter)virtual HRESULT WINAPI <oledb.h>
OpenViewRowset(IUnknown * pUnkOuter,REFIID riid,IUnknown ** ppRowset)virtual HRESULT WINAPI <oledb.h>
OpenVirtualDisk(PVIRTUAL_STORAGE_TYPE VirtualStorageType,PCWSTR Path,VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask,OPEN_VIRTUAL_DISK_FLAG Flags,POPEN_VIRTUAL_DISK_PARAMETERS Parameters,PHANDLE Handle)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
OpenWaitableTimer(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpTimerName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenWaitableTimerA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpTimerName) WINBASEAPI HANDLE WINAPI <winbase.h>
OpenWaitableTimerW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpTimerName) WINBASEAPI HANDLE WINAPI <synchapi.h>
OpenWindowStation(LPCSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HWINSTA WINAPI <winuser.h>
OpenWindowStationA(LPCSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HWINSTA WINAPI <winuser.h>
OpenWindowStationW(LPCWSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess) WINUSERAPI HWINSTA WINAPI <winuser.h>
Operate(DWORD dwCode,VARIANT varData1,VARIANT varData2,VARIANT varData3)virtual HRESULT WINAPI <iads.h>
OperationCode(void)virtual HRESULT WINAPI <ntmsapi.h>
OperationEnd(OPERATION_END_PARAMETERS * OperationEndParams) WINADVAPI WINBOOL WINAPI <winbase.h>
OperationStart(OPERATION_START_PARAMETERS * OperationStartParams) WINADVAPI WINBOOL WINAPI <winbase.h>
operator()       InterfaceType<ivec.h>
operator(__int64 i8Src)__MINGW_EXTENSION inline _variant_t<ivec.h>
operator(__LONG32 lSrc)inline _variant_t<ivec.h>
operator(_com_ptr_t & p) bool <ivec.h>
operator(_com_ptr_t<_OtherIID> & p) template<ivec.h>
operator(_Interface * i,_com_ptr_t<_InterfacePtr> & p)template<ivec.h>
operator(_InterfaceType * p) template<ivec.h>
operator(ARG_KEY key)VALUE<ivec.h>
operator(bool boolSrc)inline _variant_t<ivec.h>
operator(BYTE bSrc)inline _variant_t<ivec.h>
operator(CdbConnections & o) CdbConnections<ivec.h>
operator(CdbOleObject & o) CdbOleObject<ivec.h>
operator(char cSrc)inline _variant_t<ivec.h>
operator(ComPtr && other)       ComPtr<ivec.h>
operator(ComPtr<U> && other)       ComPtr<ivec.h>
operator(const __m128 & avec) F32vec4<ivec.h>
operator(const _bstr_t & bstrSrc)inline _variant_t<ivec.h>
operator(const _bstr_t & s)inline _bstr_t<ivec.h>
operator(const _bstr_t & str)inline bool _bstr_t::<ivec.h>
operator(const _com_error & that)inline _com_error<ivec.h>
operator(const _com_ptr_t & cp) _com_ptr_t<ivec.h>
operator(const _com_ptr_t & p) bool <ivec.h>
operator(const _com_ptr_t<_OtherIID> & p) template<ivec.h>
operator(const _D3DVECTOR & v)inline _D3DVECTOR<ivec.h>
operator(const _D3DVECTOR & v,D3DVALUE s)inline _D3DVECTOR <ivec.h>
operator(const _D3DVECTOR & v1,const _D3DVECTOR & v2)inline _D3DVECTOR <ivec.h>
operator(const _Lockit &) _Lockit<ivec.h>
operator(const _Mutex &) _Mutex<ivec.h>
operator(const _variant_t & var)inline _bstr_t<ivec.h>
operator(const _variant_t & varSrc)inline _variant_t<ivec.h>
operator(const AdjustableArrowCap &)	AdjustableArrowCap<ivec.h>
operator(const Bitmap &)	Bitmap<ivec.h>
operator(const Brush &)	Brush<ivec.h>
operator(const CachedBitmap &)	CachedBitmap<ivec.h>
operator(const CdbGetRowsEx &) CdbGetRowsEx<ivec.h>
operator(const char * pSrc)inline _variant_t<ivec.h>
operator(const char * s)inline _bstr_t<ivec.h>
operator(const char * s1,const _bstr_t & s2)inline _bstr_t <ivec.h>
operator(const CharacterRange & rhs)	CharacterRange<ivec.h>
operator(const ComPtr & other)       ComPtr<ivec.h>
operator(const ComPtr<U> & other)       ComPtr<ivec.h>
operator(const CustomLineCap &)	CustomLineCap<ivec.h>
operator(const CY & cySrc)inline _variant_t<ivec.h>
operator(const D2D1_MATRIX_3X2_F & matrix1,const D2D1_MATRIX_3X2_F & matrix2)D2D1FORCEINLINE D2D1_MATRIX_3X2_F <ivec.h>
operator(const D2D1_POINT_2F & point,const D2D1_MATRIX_3X2_F & matrix)D2D1FORCEINLINE D2D1_POINT_2F <ivec.h>
operator(const D3DXCOLOR & col)inline WINBOOL D3DXCOLOR::<ivec.h>
operator(const D3DXCOLOR &)WINBOOL <ivec.h>
operator(const D3DXFLOAT16 & f)inline WINBOOL D3DXFLOAT16::<ivec.h>
operator(const D3DXFLOAT16 &)WINBOOL <ivec.h>
operator(const D3DXMATRIX & mat)inline WINBOOL D3DXMATRIX::<ivec.h>
operator(const D3DXMATRIX &)WINBOOL <ivec.h>
operator(const D3DXPLANE & pl)inline WINBOOL D3DXPLANE::<ivec.h>
operator(const D3DXPLANE &)WINBOOL <ivec.h>
operator(const D3DXQUATERNION & quat)inline WINBOOL D3DXQUATERNION::<ivec.h>
operator(const D3DXQUATERNION &)WINBOOL <ivec.h>
operator(const D3DXVECTOR2 & v)inline WINBOOL D3DXVECTOR2::<ivec.h>
operator(const D3DXVECTOR2 &)WINBOOL <ivec.h>
operator(const D3DXVECTOR3 & v)inline WINBOOL D3DXVECTOR3::<ivec.h>
operator(const D3DXVECTOR3 &)WINBOOL <ivec.h>
operator(const D3DXVECTOR4 & v)inline WINBOOL D3DXVECTOR4::<ivec.h>
operator(const D3DXVECTOR4 &)WINBOOL <ivec.h>
operator(const DECIMAL & decSrc)inline _variant_t<ivec.h>
operator(const F32vec1 & a,const F32vec1 & b) friend F32vec1 <ivec.h>
operator(const F32vec4 & a) F32vec4<ivec.h>
operator(const F32vec4 & a,const F32vec4 & b) friend F32vec4 <ivec.h>
operator(const F64vec2 & a,const F64vec2 & b) friend F64vec2 <ivec.h>
operator(const Font &)	Font<ivec.h>
operator(const FontCollection &)	FontCollection<ivec.h>
operator(const FontFamily &)	FontFamily<ivec.h>
operator(const Graphics &)	Graphics<ivec.h>
operator(const GraphicsPath &)	GraphicsPath<ivec.h>
operator(const GraphicsPathIterator &)	GraphicsPathIterator<ivec.h>
operator(const GUID & guidOne,const GUID & guidOther)__inline WINBOOL <ivec.h>
operator(const HatchBrush &)	HatchBrush<ivec.h>
operator(const HStringReference & other)           HStringReference<ivec.h>
operator(const I16vec8 & a) Iu16vec8<ivec.h>
operator(const I16vec8 & a,const I16vec8 & b)inline I16vec8 <ivec.h>
operator(const I32vec4 & a) I32vec4<ivec.h>
operator(const I64vec2 & a) I64vec2<ivec.h>
operator(const I8vec16 & a) Iu8vec16<ivec.h>
operator(const Image &)	Image<ivec.h>
operator(const ImageAttributes &)	ImageAttributes<ivec.h>
operator(const int i)inline VOID CdbVariant::<ivec.h>
operator(const Is16vec8 & a,const Is16vec8 & b)inline Is16vec8 <ivec.h>
operator(const Iu16vec8 & a,const Iu16vec8 & b)inline Iu16vec8 <ivec.h>
operator(const Iu32vec4 & a,const Iu32vec4 & b)inline I64vec2 <ivec.h>
operator(const LinearGradientBrush &)	LinearGradientBrush<ivec.h>
operator(const M128 & a) M128<ivec.h>
operator(const M128 & a,const M128 & b)inline M128 <ivec.h>
operator(const M64 & a)M64<ivec.h>
operator(const Matrix &)	Matrix<ivec.h>
operator(const Matrix3x2F & matrix)D2D1FORCEINLINE Matrix3x2F <ivec.h>
operator(const Metafile &)	Metafile<ivec.h>
operator(const PathGradientBrush &)	PathGradientBrush<ivec.h>
operator(const Pen &)	Pen<ivec.h>
operator(const Point & point)	Point <ivec.h>
operator(const PointF & point)	PointF <ivec.h>
operator(const Region &)	Region<ivec.h>
operator(const Size & size)	Size <ivec.h>
operator(const SizeF & size)	SizeF <ivec.h>
operator(const SolidBrush &)	SolidBrush<ivec.h>
operator(const StringFormat &)	StringFormat<ivec.h>
operator(const TextureBrush &)	TextureBrush<ivec.h>
operator(const VARIANT & varSrc)inline bool _variant_t::<ivec.h>
operator(const VARIANT * pSrc)inline bool _variant_t::<ivec.h>
operator(const wchar_t * pSrc)inline _variant_t<ivec.h>
operator(const wchar_t * s)inline _bstr_t<ivec.h>
operator(const wchar_t * s1,const _bstr_t & s2)inline _bstr_t <ivec.h>
operator(D3DVALUE s)inline _D3DVECTOR<ivec.h>
operator(D3DVALUE s,const _D3DVECTOR & v)inline _D3DVECTOR <ivec.h>
operator(double d) F32vec4<ivec.h>
operator(double dblSrc)inline _variant_t<ivec.h>
operator(F32vec1 & a) F32vec1<ivec.h>
operator(F32vec4 & a) F32vec4<ivec.h>
operator(F64vec2 & a) F64vec2<ivec.h>
operator(float f) F32vec4<ivec.h>
operator(FLOAT f)inline D3DXVECTOR4<ivec.h>
operator(FLOAT f,const D3DXCOLOR & col)inline D3DXCOLOR <ivec.h>
operator(FLOAT f,const D3DXMATRIX & mat)inline D3DXMATRIX <ivec.h>
operator(FLOAT f,const D3DXQUATERNION & quat)inline D3DXQUATERNION <ivec.h>
operator(FLOAT f,const D3DXVECTOR2 & v)inline D3DXVECTOR2 <ivec.h>
operator(FLOAT f,const D3DXVECTOR3 & v)inline D3DXVECTOR3 <ivec.h>
operator(FLOAT f,const D3DXVECTOR4 & v)inline D3DXVECTOR4 <ivec.h>
operator(float fltSrc)inline _variant_t<ivec.h>
operator(FLOAT)D3DXVECTOR4<ivec.h>
operator(FLOAT,const D3DXCOLOR &)friend D3DXCOLOR <ivec.h>
operator(FLOAT,const D3DXMATRIX &)friend D3DXMATRIX <ivec.h>
operator(FLOAT,const D3DXQUATERNION &)friend D3DXQUATERNION <ivec.h>
operator(FLOAT,const D3DXVECTOR2 &)friend D3DXVECTOR2 <ivec.h>
operator(FLOAT,const D3DXVECTOR4 &)friend D3DXVECTOR4 <ivec.h>
operator(FLOAT,const struct D3DXVECTOR3 &)friend D3DXVECTOR3 <ivec.h>
operator(IDispatch * pSrc)inline _variant_t<ivec.h>
operator(int count) Iu32vec4<ivec.h>
operator(int i) float<ivec.h>
operator(int iSrc)inline _variant_t<ivec.h>
operator(int nIndex) T<ivec.h>
operator(int null) bool <ivec.h>
operator(int null,_com_ptr_t<_Interface> & p)template<ivec.h>
operator(int null,_com_ptr_t<_InterfaceType> & p)template<ivec.h>
operator(int r,int c)const D3DVALUE<ivec.h>
operator(Interface * p) bool <ivec.h>
operator(Interface * pInterface) _com_ptr_t<ivec.h>
operator(InterfaceType * other)       ComPtr<ivec.h>
operator(IUnknown * pSrc)inline _variant_t<ivec.h>
operator(LONG i) CdbWorkspace <ivec.h>
operator(LONG l)inline VOID CdbVariant::<ivec.h>
operator(long long null) bool <ivec.h>
operator(LPCTSTR pstr) CdbWorkspace <ivec.h>
operator(LPVARIANT pv)inline VOID CdbVariant::<ivec.h>
operator(MSIHANDLE h) void <ivec.h>
operator(nullptr)))))))))))))))))       ComPtr<ivec.h>
operator(PVOID ptr) delete<ivec.h>
operator(PVOID pVoid)inline void __cdecl  delete<ivec.h>
operator(REFGUID guidOne,REFGUID guidOther)__inline bool <ivec.h>
operator(REFPROPERTYKEY guidOne,REFPROPERTYKEY guidOther)inline bool <ivec.h>
operator(SHORT s)inline VOID CdbVariant::<ivec.h>
operator(short sSrc)inline _variant_t<ivec.h>
operator(size_t in_size)	static void<ivec.h>
operator(size_t iSize,POOL_TYPE poolType)inline PVOID  new<ivec.h>
operator(size_t iSize,POOL_TYPE poolType,ULONG tag)inline PVOID  new<ivec.h>
operator(size_t size,POOL_TYPE pool_type) new<ivec.h>
operator(size_t size,POOL_TYPE pool_type,ULONG tag) new<ivec.h>
operator(size_t sz)inline void<ivec.h>
operator(SQL_LEVEL_1_TOKEN & Src) SQL_LEVEL_1_TOKEN<ivec.h>
operator(std::ostream & os,const F32vec1 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const F32vec4 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const Is16vec8 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const Is32vec4 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const Is8vec16 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const Iu16vec8 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const Iu32vec4 & a) friend std::ostream<ivec.h>
operator(std::ostream & os,const Iu8vec16 & a) friend std::ostream<ivec.h>
operator(struct _THREADPOOLWAITBLOCK & t)WINBOOL <ivec.h>
operator(U * other)       ComPtr<ivec.h>
operator(UINT row,UINT col)inline FLOAT<ivec.h>
operator(unsigned __int64 ui8Src)__MINGW_EXTENSION inline _variant_t<ivec.h>
operator(unsigned __LONG32 ulSrc)inline _variant_t<ivec.h>
operator(unsigned int uiSrc)inline _variant_t<ivec.h>
operator(unsigned short usSrc)inline _variant_t<ivec.h>
operator(void * in_pVoid)	static void  delete<ivec.h>
OpFormatBool(type,field,isptr)<wsdxml.h>
OpFormatDateTime(type,field)<wsdxml.h>
OpFormatDom(type,field)<wsdxml.h>
OpFormatDouble(type,field,isptr)<wsdxml.h>
OpFormatDuration(type,field)<wsdxml.h>
OpFormatDynamicType(name,type,field)<wsdxml.h>
OpFormatFloat(type,field,isptr)<wsdxml.h>
OpFormatInt16(type,field,isptr)<wsdxml.h>
OpFormatInt32(type,field,isptr)<wsdxml.h>
OpFormatInt64(type,field,isptr)<wsdxml.h>
OpFormatInt8(type,field,isptr)<wsdxml.h>
OpFormatListInsertTail(s,type,field)<wsdxml.h>
OpFormatLookupType(uriField,type,field)<wsdxml.h>
OpFormatName(type,field)<wsdxml.h>
OpFormatPointerToStruct(sType)<wsdxml.h>
OpFormatStruct(sType,type,field)<wsdxml.h>
OpFormatType(table,type,field)<wsdxml.h>
OpFormatUInt16(type,field,isptr)<wsdxml.h>
OpFormatUInt32(type,field,isptr)<wsdxml.h>
OpFormatUInt64(type,field,isptr)<wsdxml.h>
OpFormatUInt8(type,field,isptr)<wsdxml.h>
OpFormatUnicodeString(type,field)<wsdxml.h>
OpFormatUri(type,field)<wsdxml.h>
OpFormatUuidUri(type,field,isptr)<wsdxml.h>
OpFormatXMLDeclaration(type,field)<wsdxml.h>
OPMGetVideoOutputsFromHMONITOR(HMONITOR hMonitor,OPM_VIDEO_OUTPUT_SEMANTICS vos,ULONG * pulNumVideoOutputs,IOPMVideoOutput *** pppOPMVideoOutputArray)HRESULT WINAPI <opmapi.h>
OPMGetVideoOutputsFromIDirect3DDevice9Object(IDirect3DDevice9 * pDirect3DDevice9,OPM_VIDEO_OUTPUT_SEMANTICS vos,ULONG * pulNumVideoOutputs,IOPMVideoOutput *** pppOPMVideoOutputArray)HRESULT WINAPI <opmapi.h>
OpProcess(type,field)<wsdxml.h>
OpQualifiedAttribute(name)<wsdxml.h>
opt_where() int <sql_1.h>
OPTIONCALLBACK(HINSTANCE hInst,LPMALLOC lpMalloc,ULONG ulFlags,ULONG cbOptionData,LPBYTE lpbOptionData,LPMAPISUP lpMAPISup,LPMAPIPROP lpDataSource,LPMAPIPROP * lppWrappedSource,LPMAPIERROR * lppMAPIError) typedef SCODE<mapispi.h>
ORASADFUNC(HWND,LPSTR,DWORD,LPDWORD) typedef WINBOOL<ras.h>
OrExpression(LPEXPRESSION Expression,LPPATTERNMATCH Pattern) extern LPEXPRESSION WINAPI <nmsupp.h>
OSVER(Version)<sdkddkver.h>
OUR_GUID_ENTRY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)<uuids.h>
OUR_GUID_ENTRY(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)<uuids.h>
Outline(const Matrix * matrix=NULL,REAL flatness=FlatnessDefault)	Status <gdipluspath.h>
OutputDebugString(LPCSTR lpOutputString) WINBASEAPI VOID WINAPI <debugapi.h>
OutputDebugStringA(LPCSTR lpOutputString) WINBASEAPI VOID WINAPI <debugapi.h>
OutputDebugStringW(LPCWSTR lpOutputString) WINBASEAPI VOID WINAPI <debugapi.h>
OverallStatus(void)virtual HRESULT WINAPI <gpmgmt.h>
OverrideFrameSize(LONG FrameNumber,LONG Size)virtual HRESULT WINAPI <strmif.h>
OverrideKeyFrame(LONG FrameNumber)virtual HRESULT WINAPI <strmif.h>
OwningDoc(IHTMLDocument2 ** ppDoc)virtual HRESULT WINAPI <mshtmlc.h>
Pack2UINT32AsUINT64(UINT32 uh,UINT32 ul) inline UINT64 <mfapi.h>
PackDDElParam(UINT msg,UINT_PTR uiLo,UINT_PTR uiHi) LPARAM WINAPI <dde.h>
PackRatio(INT32 n,UINT32 ud) inline UINT64 <mfapi.h>
PackSize(UINT32 uw,UINT32 uh) inline UINT64 <mfapi.h>
PackTouchHitTestingProximityEvaluation(const TOUCH_HIT_TESTING_INPUT * pHitTestingInput,const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION * pProximityEval) WINUSERAPI LRESULT WINAPI <winuser.h>
PACPI_OP_REGION_CALLBACK()typedef VOID<oprghdlr.h>
PADD_INTERFACE(LPWSTR InterfaceName,ULONG InterfaceIndex,NET_INTERFACE_TYPE InterfaceType,DWORD MediaType,WORD AccessType,WORD ConnectionType,PVOID InterfaceInfo,ULONG StructureVersion,ULONG StructureSize,ULONG StructureCount) typedef DWORD<routprot.h>
PADDRINFOT(ADDRINFO)typedef __MINGW_NAME_AW<ws2tcpip.h>
PAFlag(x)<corhdr.h>
PAGE_ALIGN(Va)<wdm.h>
PAGED_ASSERT( exp ) ASSERT( exp ) ASSERT( exp ) ASSERT( exp ) ASSERT( exp ) ASSERT( exp ) ASSERT( exp ) ASSERT( exp ) ASSERT( exp )<wdm.h>
PAGED_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp ) NT_ASSERT( exp )<wdm.h>
PAGED_CODE()<wdm.h>
PAGED_CODE_LOCKED()<wdm.h>
Pager_ForwardMouse(hwnd,bForward)<commctrl.h>
Pager_GetBkColor(hwnd)<commctrl.h>
Pager_GetBorder(hwnd)<commctrl.h>
Pager_GetButtonSize(hwnd)<commctrl.h>
Pager_GetButtonState(hwnd,iButton)<commctrl.h>
Pager_GetDropTarget(hwnd,ppdt)<commctrl.h>
Pager_GetPos(hwnd)<commctrl.h>
Pager_RecalcSize(hwnd)<commctrl.h>
Pager_SetBkColor(hwnd,clr)<commctrl.h>
Pager_SetBorder(hwnd,iBorder)<commctrl.h>
Pager_SetButtonSize(hwnd,iSize)<commctrl.h>
Pager_SetChild(hwnd,hwndChild)<commctrl.h>
Pager_SetPos(hwnd,iPos)<commctrl.h>
Pager_SetScrollInfo(hwnd, cTimeOut, cLinesPer, cPixelsPerLine)<commctrl.h>
PageSetupDlgW(LPPAGESETUPDLGW) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
PAIndex(x)<corhdr.h>
PaintDesktop(HDC hdc) WINUSERAPI WINBOOL WINAPI <winuser.h>
PaintRgn(HDC hdc,HRGN hrgn) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PALETTEINDEX(i)<wingdi.h>
PALETTERGB(r,g,b)<wingdi.h>
PALLOCMEM(DWORD Size) typedef void<lpmapi.h>
PALOBJ_cGetColors(PALOBJ * ppalo,ULONG iStart,ULONG cColors,ULONG * pulColors)<winddi.h>
PAPCFUNC(ULONG_PTR Parameter)typedef VOID<winnt.h>
PAPI_SET_LOAD_SCHEMA_RTN(PCSTR,PCAPI_SET_NAMESPACE_ARRAY *,PVOID *) typedef NTSTATUS<apiset.h>
PAPI_SET_LOOKUP_HELPER_RTN(PCAPI_SET_NAMESPACE_ARRAY,PCSTR,PCSTR,PBOOLEAN,PSTR,ULONG) typedef NTSTATUS<apiset.h>
PAPI_SET_RELEASE_SCHEMA_RTN(PVOID) typedef NTSTATUS<apiset.h>
PARBITRATE_ROUTINE(RESID Resource,PQUORUM_RESOURCE_LOST LostQuorumResource) typedef DWORD<resapi.h>
ParentalCountrySelect(WORD wCountry)virtual HRESULT WINAPI <strmif.h>
ParentalLevelSelect(ULONG ulParentalLevel)virtual HRESULT WINAPI <strmif.h>
ParkDirect(BSTR pParkAddress)virtual HRESULT WINAPI <tapi3if.h>
ParkIndirect(BSTR * ppNonDirAddress)virtual HRESULT WINAPI <tapi3if.h>
parse() int <sql_1.h>
Parse(LPCWSTR pszLang,LPCWSTR pszQuery,ULONG uFlags)virtual HRESULT WINAPI <wmiutils.h>
Parse(SQL_LEVEL_1_RPN_EXPRESSION ** pOutput) int <wmiutils.h>
parse(VARIANT varInput) virtual HRESULT WINAPI <sql_1.h>
ParseGlobal(HGLOBAL hglobalHTML,DWORD dwFlags,IMarkupContainer ** ppContainerResult,IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish)virtual HRESULT WINAPI <mshtmlc.h>
ParseGlobalEx(HGLOBAL hglobalHTML,DWORD dwFlags,IMarkupContainer * pContext,IMarkupContainer ** ppContainerResult,IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish)virtual HRESULT WINAPI <mshtmlc.h>
ParseNetworkString(CONST WCHAR * NetworkString,DWORD Types,PNET_ADDRESS_INFO AddressInfo,USHORT * PortNumber,BYTE * PrefixLength) DWORD WINAPI <iphlpapi.h>
ParserTemporaryLockFrame(HFRAME hFrame) ULPBYTE WINAPI <netmon.h>
ParseString(OLECHAR * pchHTML,DWORD dwFlags,IMarkupContainer ** ppContainerResult,IMarkupPointer * ppPointerStart,IMarkupPointer * ppPointerFinish)virtual HRESULT WINAPI <mshtmlc.h>
PartialReplyPrinterChangeNotification(HANDLE hNotify,PPRINTER_NOTIFY_INFO_DATA pInfoDataSrc)WINBOOL WINAPI <winsplp.h>
PartitionConfig(CSC_PartitionConfig partitionConfig)virtual HRESULT WINAPI <comsvcs.h>
PartitionID(REFGUID guidPartitionID)virtual HRESULT WINAPI <comsvcs.h>
Paste(VARIANT * pVar,__LONG32 Format)virtual HRESULT WINAPI <tom.h>
PatBlt(HDC hdc,int x,int y,int w,int h,DWORD rop) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PATCH_PROGRESS_CALLBACK(PVOID CallbackContext,ULONG CurrentPosition,ULONG MaximumPosition) typedef WINBOOL<patchapi.h>
PATCH_SYMLOAD_CALLBACK(ULONG WhichFile,LPCSTR SymbolFileName,ULONG SymType,ULONG SymbolFileCheckSum,ULONG SymbolFileTimeDate,ULONG ImageFileCheckSum,ULONG ImageFileTimeDate,PVOID CallbackContext) typedef WINBOOL<patchapi.h>
PathAddBackslash(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathAddBackslashA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathAddBackslashW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathAddExtension(LPSTR pszPath,LPCSTR pszExt) LWSTDAPI_<shlwapi.h>
PathAddExtensionA(LPSTR pszPath,LPCSTR pszExt) LWSTDAPI_<shlwapi.h>
PathAddExtensionW(LPWSTR pszPath,LPCWSTR pszExt) LWSTDAPI_<shlwapi.h>
PathAllocCanonicalize(PCWSTR pszPathIn,unsigned long dwFlags,PWSTR * ppszPathOut) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathAllocCombine(PCWSTR pszPathIn,PCWSTR pszMore,unsigned long dwFlags,PWSTR * ppszPathOut) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathAppend(LPSTR pszPath,LPCSTR pMore) LWSTDAPI_<shlwapi.h>
PathAppendA(LPSTR pszPath,LPCSTR pMore) LWSTDAPI_<shlwapi.h>
PathAppendW(LPWSTR pszPath,LPCWSTR pMore) LWSTDAPI_<shlwapi.h>
PathBuildRoot(LPSTR pszRoot,int iDrive) LWSTDAPI_<shlwapi.h>
PathBuildRootA(LPSTR pszRoot,int iDrive) LWSTDAPI_<shlwapi.h>
PathBuildRootW(LPWSTR pszRoot,int iDrive) LWSTDAPI_<shlwapi.h>
PathCanonicalize(LPSTR pszBuf,LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathCanonicalizeA(LPSTR pszBuf,LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathCanonicalizeW(LPWSTR pszBuf,LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathCchAddBackslash(PWSTR pszPath,size_t cchPath) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchAddBackslashEx(PWSTR pszPath,size_t cchPath,PWSTR * ppszEnd,size_t * pcchRemaining) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchAddExtension(PWSTR pszPath,size_t cchPath,PCWSTR pszExt) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchAppend(PWSTR pszPath,size_t cchPath,PCWSTR pszMore) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchAppendEx(PWSTR pszPath,size_t cchPath,PCWSTR pszMore,unsigned long dwFlags) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchCanonicalize(PWSTR pszPathOut,size_t cchPathOut,PCWSTR pszPathIn) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchCanonicalizeEx(PWSTR pszPathOut,size_t cchPathOut,PCWSTR pszPathIn,unsigned long dwFlags) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchCombine(PWSTR pszPathOut,size_t cchPathOut,PCWSTR pszPathIn,PCWSTR pszMore) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchCombineEx(PWSTR pszPathOut,size_t cchPathOut,PCWSTR pszPathIn,PCWSTR pszMore,unsigned long dwFlags) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchFindExtension(PCWSTR pszPath,size_t cchPath,PCWSTR * ppszExt) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchFindExtension(PWSTR path,size_t n,PWSTR * pext) __CRT_INLINE HRESULT <pathcch.h>
PathCchIsRoot(PCWSTR pszPath) WINPATHCCHAPI WINBOOL APIENTRY <pathcch.h>
PathCchRemoveBackslash(PWSTR pszPath,size_t cchPath) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchRemoveBackslashEx(PWSTR pszPath,size_t cchPath,PWSTR * ppszEnd,size_t * pcchRemaining) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchRemoveExtension(PWSTR pszPath,size_t cchPath) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchRemoveFileSpec(PWSTR pszPath,size_t cchPath) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchRenameExtension(PWSTR pszPath,size_t cchPath,PCWSTR pszExt) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchSkipRoot(PCWSTR pszPath,PCWSTR * ppszRootEnd) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchSkipRoot(PWSTR path,PWSTR * prootend) __CRT_INLINE HRESULT <pathcch.h>
PathCchStripPrefix(PWSTR pszPath,size_t cchPath) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCchStripToRoot(PWSTR pszPath,size_t cchPath) WINPATHCCHAPI HRESULT APIENTRY <pathcch.h>
PathCleanupSpec(PCWSTR pszDir,PWSTR pszSpec) SHSTDAPI_<shlobj.h>
PathCombine(LPSTR pszDest,LPCSTR pszDir,LPCSTR pszFile) LWSTDAPI_<shlwapi.h>
PathCombineA(LPSTR pszDest,LPCSTR pszDir,LPCSTR pszFile) LWSTDAPI_<shlwapi.h>
PathCombineW(LPWSTR pszDest,LPCWSTR pszDir,LPCWSTR pszFile) LWSTDAPI_<shlwapi.h>
PathCommonPrefix(LPCSTR pszFile1,LPCSTR pszFile2,LPSTR achPath) LWSTDAPI_<shlwapi.h>
PathCommonPrefixA(LPCSTR pszFile1,LPCSTR pszFile2,LPSTR achPath) LWSTDAPI_<shlwapi.h>
PathCommonPrefixW(LPCWSTR pszFile1,LPCWSTR pszFile2,LPWSTR achPath) LWSTDAPI_<shlwapi.h>
PathCompactPath(HDC hDC,LPSTR pszPath,UINT dx) LWSTDAPI_<shlwapi.h>
PathCompactPathA(HDC hDC,LPSTR pszPath,UINT dx) LWSTDAPI_<shlwapi.h>
PathCompactPathEx(LPSTR pszOut,LPCSTR pszSrc,UINT cchMax,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
PathCompactPathExA(LPSTR pszOut,LPCSTR pszSrc,UINT cchMax,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
PathCompactPathExW(LPWSTR pszOut,LPCWSTR pszSrc,UINT cchMax,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
PathCompactPathW(HDC hDC,LPWSTR pszPath,UINT dx) LWSTDAPI_<shlwapi.h>
PathCreateFromUrl(LPCSTR pszUrl,LPSTR pszPath,LPDWORD pcchPath,DWORD dwFlags) LWSTDAPI <shlwapi.h>
PathCreateFromUrlA(LPCSTR pszUrl,LPSTR pszPath,LPDWORD pcchPath,DWORD dwFlags) LWSTDAPI <shlwapi.h>
PathCreateFromUrlW(LPCWSTR pszUrl,LPWSTR pszPath,LPDWORD pcchPath,DWORD dwFlags) LWSTDAPI <shlwapi.h>
PathData()	~<gdiplustypes.h>
PathData(INT capacity)	Status AllocateArrays<gdiplustypes.h>
PathFileExists(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFileExistsA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFileExistsW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindExtension(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindExtensionA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindExtensionW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindFileName(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindFileNameA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindFileNameW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindNextComponent(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindNextComponentA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindNextComponentW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathFindOnPath(LPSTR pszPath,LPCSTR * ppszOtherDirs) LWSTDAPI_<shlwapi.h>
PathFindOnPathA(LPSTR pszPath,LPCSTR * ppszOtherDirs) LWSTDAPI_<shlwapi.h>
PathFindOnPathW(LPWSTR pszPath,LPCWSTR * ppszOtherDirs) LWSTDAPI_<shlwapi.h>
PathFindSuffixArray(LPCSTR pszPath,const LPCSTR * apszSuffix,int iArraySize) LWSTDAPI_<shlwapi.h>
PathFindSuffixArrayA(LPCSTR pszPath,const LPCSTR * apszSuffix,int iArraySize) LWSTDAPI_<shlwapi.h>
PathFindSuffixArrayW(LPCWSTR pszPath,const LPCWSTR * apszSuffix,int iArraySize) LWSTDAPI_<shlwapi.h>
PathGetArgs(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathGetArgsA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathGetArgsW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathGetCharType(UCHAR ch) LWSTDAPI_<shlwapi.h>
PathGetCharTypeA(UCHAR ch) LWSTDAPI_<shlwapi.h>
PathGetCharTypeW(WCHAR ch) LWSTDAPI_<shlwapi.h>
PathGetDriveNumber(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathGetDriveNumberA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathGetDriveNumberW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathGetShortPath(PWSTR pszLongPath) SHSTDAPI_<shlobj.h>
PathGradientBrush()	Status ResetTransform<gdipluspath.h>
PathGradientBrush(BOOL useGammaCorrection)	Status SetGammaCorrection<gdipluspath.h>
PathGradientBrush(Color * color)	Status GetCenterColor<gdipluspath.h>
PathGradientBrush(Color * colors,INT * count)	Status GetSurroundColors<gdipluspath.h>
PathGradientBrush(Color * presetColors,REAL * blendPositions,INT count)	Status GetInterpolationColors<gdipluspath.h>
PathGradientBrush(const Color & color)	Status SetCenterColor<gdipluspath.h>
PathGradientBrush(const Color * colors,INT * count)	Status SetSurroundColors<gdipluspath.h>
PathGradientBrush(const Color * presetColors,REAL * blendPositions,INT count)	Status SetInterpolationColors<gdipluspath.h>
PathGradientBrush(const GraphicsPath * path)	<gdipluspath.h>
PathGradientBrush(const Matrix * matrix)	Status SetTransform<gdipluspath.h>
PathGradientBrush(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status MultiplyTransform<gdipluspath.h>
PathGradientBrush(const PathGradientBrush &)	<gdipluspath.h>
PathGradientBrush(const Point & point)	Status SetCenterPoint<gdipluspath.h>
PathGradientBrush(const Point * points,INT count,WrapMode wrapMode=WrapModeClamp)	<gdipluspath.h>
PathGradientBrush(const PointF & point)	Status SetCenterPoint<gdipluspath.h>
PathGradientBrush(const PointF * points,INT count,WrapMode wrapMode=WrapModeClamp)	<gdipluspath.h>
PathGradientBrush(GpBrush * brush,Status status)	<gdipluspath.h>
PathGradientBrush(Matrix * matrix)	Status GetTransform<gdipluspath.h>
PathGradientBrush(Point * point)	Status GetCenterPoint<gdipluspath.h>
PathGradientBrush(PointF * point)	Status GetCenterPoint<gdipluspath.h>
PathGradientBrush(REAL * blendFactors,REAL * blendPositions,INT count)	Status SetBlend<gdipluspath.h>
PathGradientBrush(REAL * xScale,REAL * yScale)	Status GetFocusScales<gdipluspath.h>
PathGradientBrush(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status RotateTransform<gdipluspath.h>
PathGradientBrush(REAL dx,REAL dy,MatrixOrder order=MatrixOrderPrepend)	Status TranslateTransform<gdipluspath.h>
PathGradientBrush(REAL focus,REAL scale=1.0f)	Status SetBlendTriangularShape<gdipluspath.h>
PathGradientBrush(REAL sx,REAL sy,MatrixOrder order=MatrixOrderPrepend)	Status ScaleTransform<gdipluspath.h>
PathGradientBrush(REAL xScale,REAL yScale)	Status SetFocusScales<gdipluspath.h>
PathGradientBrush(Rect * rect)	Status GetRectangle<gdipluspath.h>
PathGradientBrush(RectF * rect)	Status GetRectangle<gdipluspath.h>
PathGradientBrush(WrapMode wrapMode)	Status SetWrapMode<gdipluspath.h>
PathIsContentType(LPCSTR pszPath,LPCSTR pszContentType) LWSTDAPI_<shlwapi.h>
PathIsContentTypeA(LPCSTR pszPath,LPCSTR pszContentType) LWSTDAPI_<shlwapi.h>
PathIsContentTypeW(LPCWSTR pszPath,LPCWSTR pszContentType) LWSTDAPI_<shlwapi.h>
PathIsDirectory(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsDirectoryA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsDirectoryEmpty(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsDirectoryEmptyA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsDirectoryEmptyW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsDirectoryW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsExe(PCWSTR pszPath) SHSTDAPI_<shlobj.h>
PathIsFileSpec(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsFileSpecA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsFileSpecW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsHTMLFileA(pszPath)<shlwapi.h>
PathIsHTMLFileW(pszPath)<shlwapi.h>
PathIsLFNFileSpec(LPCSTR lpName) LWSTDAPI_<shlwapi.h>
PathIsLFNFileSpecA(LPCSTR lpName) LWSTDAPI_<shlwapi.h>
PathIsLFNFileSpecW(LPCWSTR lpName) LWSTDAPI_<shlwapi.h>
PathIsNetworkPath(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsNetworkPathA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsNetworkPathW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsPrefix(LPCSTR pszPrefix,LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsPrefixA(LPCSTR pszPrefix,LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsPrefixW(LPCWSTR pszPrefix,LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsRelative(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsRelativeA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsRelativeW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsRoot(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsRootA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsRootW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsSameRoot(LPCSTR pszPath1,LPCSTR pszPath2) LWSTDAPI_<shlwapi.h>
PathIsSameRootA(LPCSTR pszPath1,LPCSTR pszPath2) LWSTDAPI_<shlwapi.h>
PathIsSameRootW(LPCWSTR pszPath1,LPCWSTR pszPath2) LWSTDAPI_<shlwapi.h>
PathIsSlow(LPCSTR pszFile,DWORD dwAttr) SHSTDAPI_<shlobj.h>
PathIsSlowA(LPCSTR pszFile,DWORD dwAttr) SHSTDAPI_<shlobj.h>
PathIsSlowW(LPCWSTR pszFile,DWORD dwAttr) SHSTDAPI_<shlobj.h>
PathIsSystemFolder(LPCSTR pszPath,DWORD dwAttrb) LWSTDAPI_<shlwapi.h>
PathIsSystemFolderA(LPCSTR pszPath,DWORD dwAttrb) LWSTDAPI_<shlwapi.h>
PathIsSystemFolderW(LPCWSTR pszPath,DWORD dwAttrb) LWSTDAPI_<shlwapi.h>
PathIsUNC(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCEx(PCWSTR pszPath,PCWSTR * ppszServer) WINPATHCCHAPI WINBOOL APIENTRY <pathcch.h>
PathIsUNCEx(PWSTR path,PWSTR * pserver) __CRT_INLINE WINBOOL <pathcch.h>
PathIsUNCServer(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCServerA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCServerShare(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCServerShareA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCServerShareW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCServerW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsUNCW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsURL(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsURLA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathIsURLW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakePretty(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakePrettyA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakePrettyW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakeSystemFolder(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakeSystemFolderA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakeSystemFolderW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathMakeUniqueName(PWSTR pszUniqueName,UINT cchMax,PCWSTR pszTemplate,PCWSTR pszLongPlate,PCWSTR pszDir) SHSTDAPI_<shlobj.h>
PathMatchSpec(LPCSTR pszFile,LPCSTR pszSpec) LWSTDAPI_<shlwapi.h>
PathMatchSpecA(LPCSTR pszFile,LPCSTR pszSpec) LWSTDAPI_<shlwapi.h>
PathMatchSpecW(LPCWSTR pszFile,LPCWSTR pszSpec) LWSTDAPI_<shlwapi.h>
PATHOBJ_bCloseFigure(PATHOBJ * ppo)<winddi.h>
PATHOBJ_bEnum(PATHOBJ * ppo,PATHDATA * ppd)<winddi.h>
PATHOBJ_bEnumClipLines(PATHOBJ * ppo,ULONG cb,CLIPLINE * pcl)<winddi.h>
PATHOBJ_bMoveTo(PATHOBJ * ppo,POINTFIX ptfx)<winddi.h>
PATHOBJ_bPolyBezierTo(PATHOBJ * ppo,POINTFIX * pptfx,ULONG cptfx)<winddi.h>
PATHOBJ_bPolyLineTo(PATHOBJ * ppo,POINTFIX * pptfx,ULONG cptfx)<winddi.h>
PATHOBJ_vEnumStart(PATHOBJ * ppo)<winddi.h>
PATHOBJ_vEnumStartClipLines(PATHOBJ * ppo,CLIPOBJ * pco,SURFOBJ * pso,LINEATTRS * pla)<winddi.h>
PATHOBJ_vGetBounds(PATHOBJ * ppo,PRECTFX prectfx)<winddi.h>
PathParseIconLocation(LPSTR pszIconFile) LWSTDAPI_<shlwapi.h>
PathParseIconLocationA(LPSTR pszIconFile) LWSTDAPI_<shlwapi.h>
PathParseIconLocationW(LPWSTR pszIconFile) LWSTDAPI_<shlwapi.h>
PathProcessCommand(PCWSTR pszSrc,PWSTR pszDest,int cchDest,DWORD dwFlags) SHSTDAPI_<shlobj.h>
PathQualify(PWSTR psz) SHSTDAPI_<shlobj.h>
PathQuoteSpaces(LPSTR lpsz) LWSTDAPI_<shlwapi.h>
PathQuoteSpacesA(LPSTR lpsz) LWSTDAPI_<shlwapi.h>
PathQuoteSpacesW(LPWSTR lpsz) LWSTDAPI_<shlwapi.h>
PathRelativePathTo(LPSTR pszPath,LPCSTR pszFrom,DWORD dwAttrFrom,LPCSTR pszTo,DWORD dwAttrTo) LWSTDAPI_<shlwapi.h>
PathRelativePathToA(LPSTR pszPath,LPCSTR pszFrom,DWORD dwAttrFrom,LPCSTR pszTo,DWORD dwAttrTo) LWSTDAPI_<shlwapi.h>
PathRelativePathToW(LPWSTR pszPath,LPCWSTR pszFrom,DWORD dwAttrFrom,LPCWSTR pszTo,DWORD dwAttrTo) LWSTDAPI_<shlwapi.h>
PathRemoveArgs(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveArgsA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveArgsW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveBackslash(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveBackslashA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveBackslashW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveBlanks(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveBlanksA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveBlanksW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveExtension(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveExtensionA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveExtensionW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveFileSpec(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveFileSpecA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRemoveFileSpecW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathRenameExtension(LPSTR pszPath,LPCSTR pszExt) LWSTDAPI_<shlwapi.h>
PathRenameExtensionA(LPSTR pszPath,LPCSTR pszExt) LWSTDAPI_<shlwapi.h>
PathRenameExtensionW(LPWSTR pszPath,LPCWSTR pszExt) LWSTDAPI_<shlwapi.h>
PathResolve(PWSTR pszPath,PZPCWSTR dirs,UINT fFlags) SHSTDAPI_<shlobj.h>
PathSearchAndQualify(LPCSTR pszPath,LPSTR pszBuf,UINT cchBuf) LWSTDAPI_<shlwapi.h>
PathSearchAndQualifyA(LPCSTR pszPath,LPSTR pszBuf,UINT cchBuf) LWSTDAPI_<shlwapi.h>
PathSearchAndQualifyW(LPCWSTR pszPath,LPWSTR pszBuf,UINT cchBuf) LWSTDAPI_<shlwapi.h>
PathSetDlgItemPath(HWND hDlg,int id,LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathSetDlgItemPathA(HWND hDlg,int id,LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathSetDlgItemPathW(HWND hDlg,int id,LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathSkipRoot(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathSkipRootA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathSkipRootW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathStripPath(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathStripPathA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathStripPathW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathStripToRoot(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathStripToRootA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathStripToRootW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathToRegion(HDC hdc) WINGDIAPI HRGN WINAPI <wingdi.h>
PathUndecorate(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathUndecorateA(LPSTR pszPath) LWSTDAPI_<shlwapi.h>
PathUndecorateW(LPWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathUnExpandEnvStrings(LPCSTR pszPath,LPSTR pszBuf,UINT cchBuf) LWSTDAPI_<shlwapi.h>
PathUnExpandEnvStringsA(LPCSTR pszPath,LPSTR pszBuf,UINT cchBuf) LWSTDAPI_<shlwapi.h>
PathUnExpandEnvStringsW(LPCWSTR pszPath,LPWSTR pszBuf,UINT cchBuf) LWSTDAPI_<shlwapi.h>
PathUnmakeSystemFolder(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathUnmakeSystemFolderA(LPCSTR pszPath) LWSTDAPI_<shlwapi.h>
PathUnmakeSystemFolderW(LPCWSTR pszPath) LWSTDAPI_<shlwapi.h>
PathUnquoteSpaces(LPSTR lpsz) LWSTDAPI_<shlwapi.h>
PathUnquoteSpacesA(LPSTR lpsz) LWSTDAPI_<shlwapi.h>
PathUnquoteSpacesW(LPWSTR lpsz) LWSTDAPI_<shlwapi.h>
PathYetAnotherMakeUniqueName(PWSTR pszUniqueName,PCWSTR pszPath,PCWSTR pszShort,PCWSTR pszFileSpec) SHSTDAPI_<shlobj.h>
Pause(void)virtual HRESULT WINAPI <wiavideo.h>
Pause(WINBOOL bState)virtual HRESULT WINAPI <wiavideo.h>
PauseChain(IBaseFilter * pStartFilter,IBaseFilter * pEndFilter)virtual HRESULT WINAPI <strmif.h>
PauseClusterNode(HNODE hNode) DWORD WINAPI <clusapi.h>
PauseOff(void)virtual HRESULT WINAPI <strmif.h>
PauseOn(void)virtual HRESULT WINAPI <strmif.h>
PauseStream(void)virtual HRESULT WINAPI <tapi3if.h>
PauseSubStream(void)virtual HRESULT WINAPI <tapi3if.h>
PBLOCK_CONVERT_SERVICES_TO_STATIC(ULONG InterfaceIndex)typedef DWORD<stm.h>
PBLOCK_DELETE_STATIC_SERVICES(ULONG InterfaceIndex)typedef DWORD<stm.h>
PBMCALLBACKFN(ULONG,ULONG,LPARAM) typedef WINBOOL<icm.h>
PcAddAdapterDevice(IN PDRIVER_OBJECT DriverObject,IN PDEVICE_OBJECT PhysicalDeviceObject,IN PCPFNSTARTDEVICE StartDevice,IN ULONG MaxObjects,IN ULONG DeviceExtensionSize)<portcls.h>
PcAddContentHandlers(IN ULONG ContentId,IN PVOID * paHandlers,IN ULONG NumHandlers)<portcls.h>
PCANCEL_ROUTINE(RESID Resource,DWORD CancelFlags_RESERVED) typedef DWORD<resapi.h>
PcCompleteIrp(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp,IN NTSTATUS Status)<portcls.h>
PcCompletePendingPropertyRequest(IN PPCPROPERTY_REQUEST PropertyRequest,IN NTSTATUS NtStatus)<portcls.h>
PcCreateContentMixed(IN PULONG paContentId,IN ULONG cContentId,OUT PULONG pMixedContentId)<portcls.h>
PcDestroyContent(IN ULONG ContentId)<portcls.h>
PcDispatchIrp(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp)<portcls.h>
PcForwardContentToDeviceObject(IN ULONG ContentId,IN PVOID Reserved,IN PCDRMFORWARD DrmForward)<portcls.h>
PcForwardContentToFileObject(IN ULONG ContentId,IN PFILE_OBJECT FileObject)<portcls.h>
PcForwardContentToInterface(IN ULONG ContentId,IN PUNKNOWN pUnknown,IN ULONG NumMethods)<portcls.h>
PcForwardIrpSynchronous(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp)<portcls.h>
PcGetContentRights(IN ULONG ContentId,OUT PDRMRIGHTS DrmRights)<portcls.h>
PcGetDeviceProperty(IN PVOID DeviceObject,IN DEVICE_REGISTRY_PROPERTY DeviceProperty,IN ULONG BufferLength,OUT PVOID PropertyBuffer,OUT PULONG ResultLength)<portcls.h>
PcGetTimeInterval(IN ULONGLONG Since)<portcls.h>
pChannelInitEventProc(LPVOID * ppInitHandle,PCHANNEL_DEF pChannel,INT channelCount,ULONG versionRequested,PCHANNEL_INIT_EVENT_FN) typedef UINT _stdcall VIRTUALCHANNELINIT<cchannel.h>
pChannelOpenEventProc(LPVOID pInitHandle,LPDWORD pOpenHandle,PCHAR pChannelName,PCHANNEL_OPEN_EVENT_FN) typedef UINT _stdcall VIRTUALCHANNELOPEN<cchannel.h>
PCI_CONFIGURATION_TYPE(PciData)<wdm.h>
PCI_MULTIFUNCTION_DEVICE(PciData)<wdm.h>
PCIDLIST_ABSOLUTE_UserFree(ULONG *,PCIDLIST_ABSOLUTE *)void            __RPC_USER <shobjidl.h>
PCIDLIST_ABSOLUTE_UserMarshal(ULONG *,unsigned char *,PCIDLIST_ABSOLUTE *)unsigned char<shobjidl.h>
PCIDLIST_ABSOLUTE_UserSize(ULONG *,ULONG,PCIDLIST_ABSOLUTE *)ULONG           __RPC_USER <shobjidl.h>
PCIDLIST_ABSOLUTE_UserUnmarshal(ULONG *,unsigned char *,PCIDLIST_ABSOLUTE *)unsigned char<shobjidl.h>
PciIdeXGetBusData(IN PVOID DeviceExtension,IN PVOID Buffer,IN ULONG ConfigDataOffset,IN ULONG BufferLength)<ide.h>
PciIdeXInitialize(IN PDRIVER_OBJECT DriverObject,IN PUNICODE_STRING RegistryPath,IN PCONTROLLER_PROPERTIES HwGetControllerProperties,IN ULONG ExtensionSize)<ide.h>
PciIdeXSetBusData(IN PVOID DeviceExtension,IN PVOID Buffer,IN PVOID DataMask,IN ULONG ConfigDataOffset,IN ULONG BufferLength)<ide.h>
PcInitializeAdapterDriver(IN PDRIVER_OBJECT DriverObject,IN PUNICODE_STRING RegistryPathName,IN PDRIVER_ADD_DEVICE AddDevice)<portcls.h>
PCLOSE_ROUTINE(RESID Resource) typedef VOID<resapi.h>
PCLOSE_SERVICE_ENUMERATION_HANDLE(HANDLE EnumerationHandle)typedef DWORD<stm.h>
pCLSID(LPCWSTR lpszURI,GUID *)typedef HRESULT STDAPICALLTYPE IEISXMLNSREGISTEREDFN<mshtmhst.h>
PCLUSAPI_CLUS_WORKER_CREATE(PCLUS_WORKER lpWorker,PWORKER_START_ROUTINE lpStartAddress,PVOID lpParameter) typedef DWORD<resapi.h>
PCLUSAPI_CLUS_WORKER_TERMINATE(PCLUS_WORKER lpWorker) typedef VOID<resapi.h>
PCLUSAPI_OPEN_CLUSTER(LPCWSTR lpszClusterName)typedef HCLUSTER<clusapi.h>
PCLUSAPIClusWorkerCheckTerminate(PCLUS_WORKER lpWorker) typedef WINBOOL<resapi.h>
PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME(LPCWSTR lpszVolumePathName) typedef DWORD<resapi.h>
PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT(LPCWSTR lpszVolumeMountPoint,LPWSTR lpszVolumeName,DWORD cchBufferLength) typedef WINBOOL<resapi.h>
PCLUSTER_GET_VOLUME_PATH_NAME(LPCWSTR lpszFileName,LPWSTR lpszVolumePathName,DWORD cchBufferLength) typedef WINBOOL<resapi.h>
PCLUSTER_IS_PATH_ON_SHARED_VOLUME(LPCWSTR lpszPathName) typedef WINBOOL<resapi.h>
PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP(LPCWSTR lpszFileName,LPWSTR lpszVolumePathName,LPDWORD lpcchVolumePathName,LPWSTR lpszVolumeName,LPDWORD lpcchVolumeName) typedef DWORD<resapi.h>
PCLUSTER_REG_CREATE_BATCH(HKEY hKey,HREGBATCH * pHREGBATCH)typedef LONG<clusapi.h>
PCLUSTER_REG_CREATE_BATCH_NOTIFY_PORT(HKEY hKey,HREGBATCHPORT * phBatchNotifyPort)typedef LONG<clusapi.h>
PCLUSTER_REG_GET_BATCH_NOTIFICATION(HREGBATCHPORT hBatchNotify,HREGBATCHNOTIFICATION * phBatchNotification)typedef LONG<clusapi.h>
PCLUSTER_SETUP_PROGRESS_CALLBACK(PVOID pvCallbackArg,CLUSTER_SETUP_PHASE eSetupPhase,CLUSTER_SETUP_PHASE_TYPE ePhaseType,CLUSTER_SETUP_PHASE_SEVERITY ePhaseSeverity,DWORD dwPercentComplete,PCWSTR lpszObjectName,DWORD dwStatus)typedef WINBOOL<clusapi.h>
PcmciaClassFromControllerType(type) <ntddpcm.h>
PcmciaModelFromControllerType(type) <ntddpcm.h>
PcmciaRevisionFromControllerType(type) <ntddpcm.h>
PCMSCALLBACKA(struct _tagCOLORMATCHSETUPA *,LPARAM) typedef WINBOOL<icm.h>
PCMSCALLBACKW(struct _tagCOLORMATCHSETUPW *,LPARAM) typedef WINBOOL<icm.h>
PcNewDmaChannel(OUT PDMACHANNEL * OutDmaChannel,IN PUNKNOWN OuterUnknown OPTIONAL,IN POOL_TYPE PoolType,IN PDEVICE_DESCRIPTION DeviceDescription,IN PDEVICE_OBJECT DeviceObject)<portcls.h>
PcNewInterruptSync(OUT PINTERRUPTSYNC * OUtInterruptSync,IN PUNKNOWN OuterUnknown OPTIONAL,IN PRESOURCELIST ResourceList,IN ULONG ResourceIndex,IN INTERRUPTSYNCMODE Mode)<portcls.h>
PcNewMiniport(OUT PMINIPORT * OutMiniport,IN REFCLSID ClassId)<portcls.h>
PcNewPort(OUT PPORT * OutPort,IN REFCLSID ClassId)<portcls.h>
PcNewRegistryKey(OUT PREGISTRYKEY * OutRegistryKey,IN PUNKNOWN OuterUnknown OPTIONAL,IN ULONG RegistryKeyType,IN ACCESS_MASK DesiredAccess,IN PVOID DeviceObject OPTIONAL,IN PVOID SubDevice OPTIONAL,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,OUT PULONG Disposition OPTIONAL)<portcls.h>
PcNewResourceList(OUT PRESOURCELIST * OutResourceList,IN PUNKNOWN OuterUnknown OPTIONAL,IN POOL_TYPE PoolType,IN PCM_RESOURCE_LIST TranslatedResources,IN PCM_RESOURCE_LIST UntranslatedResources)<portcls.h>
PcNewResourceSublist(OUT PRESOURCELIST * OutResourceList,IN PUNKNOWN OuterUnknown OPTIONAL,IN POOL_TYPE PoolType,IN PRESOURCELIST ParentList,IN ULONG MaximumEntries)<portcls.h>
PcNewServiceGroup(OUT PSERVICEGROUP * OutServiceGroup,IN PUNKNOWN OuterUnknown OPTIONAL)<portcls.h>
PCOGETACTIVATIONSTATE()typedef LPVOID<wct.h>
PCOGETCALLSTATE()typedef LPVOID<wct.h>
PCONNECT_CLIENT(ULONG InterfaceIndex,PVOID ClientAddress) typedef DWORD<routprot.h>
PCOPYFILE2_PROGRESS_ROUTINE(const COPYFILE2_MESSAGE * pMessage,PVOID pvCallbackContext) typedef COPYFILE2_MESSAGE_ACTION<winbase.h>
PCPFNEVENT_HANDLER(IN struct _PCEVENT_REQUEST * EventRequest)typedef NTSTATUS<portcls.h>
PCPFNMETHOD_HANDLER(IN struct _PCMETHOD_REQUEST * MethodRequest)typedef NTSTATUS<portcls.h>
PCPFNPROPERTY_HANDLER(IN PPCPROPERTY_REQUEST PropertyRequest)typedef NTSTATUS<portcls.h>
PCPFNSTARTDEVICE(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp,IN PRESOURCELIST ResourceList)typedef NTSTATUS<portcls.h>
PCREATE_SERVICE_ENUMERATION_HANDLE(DWORD ExclusionFlags,PIPX_SERVICE CriteriaService)typedef HANDLE<stm.h>
PCREATE_STATIC_SERVICE(ULONG InterfaceIndex,PIPX_SERVER_ENTRY ServerEntry)typedef DWORD<stm.h>
PCreateTextServices(IUnknown * punkOuter,ITextHost * pITextHost,IUnknown ** ppUnk)typedef HRESULT<textserv.h>
PcRegisterAdapterPowerManagement(IN PUNKNOWN pUnknown,IN PVOID pvContext1)<portcls.h>
PcRegisterIoTimeout(IN PDEVICE_OBJECT pDeviceObject,IN PIO_TIMER_ROUTINE pTimerRoutine,IN PVOID pContext)<portcls.h>
PcRegisterPhysicalConnection(IN PDEVICE_OBJECT DeviceObject,IN PUNKNOWN FromUnknown,IN ULONG FromPin,IN PUNKNOWN ToUnknown,IN ULONG ToPin)<portcls.h>
PcRegisterPhysicalConnectionFromExternal(IN PDEVICE_OBJECT DeviceObject,IN PUNICODE_STRING FromString,IN ULONG FromPin,IN PUNKNOWN ToUnknown,IN ULONG ToPin)<portcls.h>
PcRegisterPhysicalConnectionToExternal(IN PDEVICE_OBJECT DeviceObject,IN PUNKNOWN FromUnknown,IN ULONG FromPin,IN PUNICODE_STRING ToString,IN ULONG ToPin)<portcls.h>
PcRegisterSubdevice(IN PDEVICE_OBJECT DeviceObject,IN PWCHAR Name,IN PUNKNOWN Unknown)<portcls.h>
PcRequestNewPowerState(IN PDEVICE_OBJECT pDeviceObject,IN DEVICE_POWER_STATE RequestedNewState)<portcls.h>
PCRYPT_DECRYPT_PRIVATE_KEY_FUNC(CRYPT_ALGORITHM_IDENTIFIER Algorithm,CRYPT_DATA_BLOB EncryptedPrivateKey,BYTE * pbClearTextKey,DWORD * pcbClearTextKey,LPVOID pVoidDecryptFunc) typedef WINBOOL<wincrypt.h>
PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC(CRYPT_ALGORITHM_IDENTIFIER * pAlgorithm,CRYPT_DATA_BLOB * pClearTextPrivateKey,BYTE * pbEncryptedKey,DWORD * pcbEncryptedKey,LPVOID pVoidEncryptFunc) typedef WINBOOL<wincrypt.h>
PCRYPT_PASSWORD_CREDENTIALS(PCRYPT_PASSWORD_CREDENTIALS) typedef __MINGW_NAME_AW<wincrypt.h>
PCRYPT_RESOLVE_HCRYPTPROV_FUNC(CRYPT_PRIVATE_KEY_INFO * pPrivateKeyInfo,HCRYPTPROV * phCryptProv,LPVOID pVoidResolveFunc) typedef WINBOOL<wincrypt.h>
pCryptSIPCreateIndirectData(SIP_SUBJECTINFO * pSubjectInfo,DWORD * pcbIndirectData,SIP_INDIRECT_DATA * pIndirectData) typedef WINBOOL<mssip.h>
pCryptSIPGetSignedDataMsg(SIP_SUBJECTINFO * pSubjectInfo,DWORD * pdwEncodingType,DWORD dwIndex,DWORD * pcbSignedDataMsg,BYTE * pbSignedDataMsg) typedef WINBOOL<mssip.h>
pCryptSIPPutSignedDataMsg(SIP_SUBJECTINFO * pSubjectInfo,DWORD dwEncodingType,DWORD * pdwIndex,DWORD cbSignedDataMsg,BYTE * pbSignedDataMsg) typedef WINBOOL<mssip.h>
pCryptSIPRemoveSignedDataMsg(SIP_SUBJECTINFO * pSubjectInfo,DWORD dwIndex) typedef WINBOOL<mssip.h>
pCryptSIPVerifyIndirectData(SIP_SUBJECTINFO * pSubjectInfo,SIP_INDIRECT_DATA * pIndirectData) typedef WINBOOL<mssip.h>
PCSCardIntroduceCardType(hContext,szCardName,pbAtr,pbAtrMask,cbAtrLen,pguidPrimaryProvider,rgguidInterfaces,dwInterfaceCount)<winscard.h>
PCUIDLIST_RELATIVE_UserFree(ULONG *,PCUIDLIST_RELATIVE *)void            __RPC_USER <shobjidl.h>
PCUIDLIST_RELATIVE_UserMarshal(ULONG *,unsigned char *,PCUIDLIST_RELATIVE *)unsigned char<shobjidl.h>
PCUIDLIST_RELATIVE_UserSize(ULONG *,ULONG,PCUIDLIST_RELATIVE *)ULONG           __RPC_USER <shobjidl.h>
PCUIDLIST_RELATIVE_UserUnmarshal(ULONG *,unsigned char *,PCUIDLIST_RELATIVE *)unsigned char<shobjidl.h>
PCUITEMID_CHILD_UserFree(ULONG *,PCUITEMID_CHILD *)void            __RPC_USER <shobjidl.h>
PCUITEMID_CHILD_UserMarshal(ULONG *,unsigned char *,PCUITEMID_CHILD *)unsigned char<shobjidl.h>
PCUITEMID_CHILD_UserSize(ULONG *,ULONG,PCUITEMID_CHILD *)ULONG           __RPC_USER <shobjidl.h>
PCUITEMID_CHILD_UserUnmarshal(ULONG *,unsigned char *,PCUITEMID_CHILD *)unsigned char<shobjidl.h>
PcUnregisterIoTimeout(IN PDEVICE_OBJECT pDeviceObject,IN PIO_TIMER_ROUTINE pTimerRoutine,IN PVOID pContext)<portcls.h>
PD2D1_EFFECT_FACTORY(IUnknown **)typedef HRESULT<d2d1_1.h>
PD2D1_PROPERTY_GET_FUNCTION(const IUnknown *,BYTE *,UINT32 dataSize,UINT32 *)typedef HRESULT<d2d1effectauthor.h>
PD2D1_PROPERTY_SET_FUNCTION(IUnknown *,const BYTE *,UINT32)typedef HRESULT<d2d1effectauthor.h>
pD3DCompile(const void * data,SIZE_T data_size,const char * filename,const D3D_SHADER_MACRO * defines,ID3DInclude * include,const char * entrypoint,const char * target,UINT sflags,UINT eflags,ID3DBlob ** shader,ID3DBlob ** error_messages)typedef HRESULT<d3dcompiler.h>
pD3DDisassemble(const void * data,SIZE_T data_size,UINT flags,const char * comments,ID3DBlob ** disassembly)typedef HRESULT<d3dcompiler.h>
pD3DPreprocess(const void * data,SIZE_T size,const char * filename,const D3D_SHADER_MACRO * defines,ID3DInclude * include,ID3DBlob ** shader,ID3DBlob ** error_messages)typedef HRESULT<d3dcompiler.h>
PDBGHELP_CREATE_USER_DUMP_CALLBACK(DWORD DataType,PVOID * Data,LPDWORD DataLength,PVOID UserData) typedef WINBOOL<psdk>
PDEBUG_EXTENSION_CALL(PDEBUG_CLIENT Client,PCSTR Args) typedef HRESULT<dbgeng.h>
PDEBUG_EXTENSION_INITIALIZE(PULONG Version,PULONG Flags) typedef HRESULT<dbgeng.h>
PDEBUG_EXTENSION_NOTIFY(ULONG Notify,ULONG64 Argument) typedef void<dbgeng.h>
PDEBUG_EXTENSION_UNINITIALIZE(void) typedef void<dbgeng.h>
PDELETE_INTERFACE(ULONG InterfaceIndex) typedef DWORD<routprot.h>
PDELETE_STATIC_SERVICE(ULONG InterfaceIndex,PIPX_SERVER_ENTRY ServerEntry)typedef DWORD<stm.h>
PDETECT_PROGRESS_NOTIFY(PVOID ProgressNotifyParam,DWORD DetectComplete) typedef WINBOOL<setupapi.h>
PDEVICE_ACTIVE_COOLING(PVOID Context,BOOLEAN Engaged)typedef VOID<poclass.h>
PDEVICE_PASSIVE_COOLING(PVOID Context,ULONG Percentage)typedef VOID<poclass.h>
PDH_PATH_LANG_FLAGS(LangId,Flags)<pdh.h>
PdhAddCounter(PDH_HQUERY hQuery,LPCSTR szFullCounterPath,DWORD_PTR dwUserData,PDH_HCOUNTER * phCounter) PDH_FUNCTION <pdh.h>
PdhAddCounterA(PDH_HQUERY hQuery,LPCSTR szFullCounterPath,DWORD_PTR dwUserData,PDH_HCOUNTER * phCounter) PDH_FUNCTION <pdh.h>
PdhAddCounterW(PDH_HQUERY hQuery,LPCWSTR szFullCounterPath,DWORD_PTR dwUserData,PDH_HCOUNTER * phCounter) PDH_FUNCTION <pdh.h>
PdhAddEnglishCounter(PDH_HQUERY hQuery,LPCSTR szFullCounterPath,DWORD_PTR dwUserData,PDH_HCOUNTER * phCounter)PDH_FUNCTION <pdh.h>
PdhAddEnglishCounterA(PDH_HQUERY hQuery,LPCSTR szFullCounterPath,DWORD_PTR dwUserData,PDH_HCOUNTER * phCounter)PDH_FUNCTION <pdh.h>
PdhAddEnglishCounterW(PDH_HQUERY hQuery,LPCWSTR szFullCounterPath,DWORD_PTR dwUserData,PDH_HCOUNTER * phCounter)PDH_FUNCTION <pdh.h>
PdhBindInputDataSource(PDH_HLOG * phDataSource,LPCSTR LogFileNameList) PDH_FUNCTION <pdh.h>
PdhBindInputDataSourceA(PDH_HLOG * phDataSource,LPCSTR LogFileNameList) PDH_FUNCTION <pdh.h>
PdhBindInputDataSourceW(PDH_HLOG * phDataSource,LPCWSTR LogFileNameList) PDH_FUNCTION <pdh.h>
PdhBrowseCounters(PPDH_BROWSE_DLG_CONFIG_A pBrowseDlgData) PDH_FUNCTION <pdh.h>
PdhBrowseCountersA(PPDH_BROWSE_DLG_CONFIG_A pBrowseDlgData) PDH_FUNCTION <pdh.h>
PdhBrowseCountersH(PPDH_BROWSE_DLG_CONFIG_HA pBrowseDlgData) PDH_FUNCTION <pdh.h>
PdhBrowseCountersHA(PPDH_BROWSE_DLG_CONFIG_HA pBrowseDlgData) PDH_FUNCTION <pdh.h>
PdhBrowseCountersHW(PPDH_BROWSE_DLG_CONFIG_HW pBrowseDlgData) PDH_FUNCTION <pdh.h>
PdhBrowseCountersW(PPDH_BROWSE_DLG_CONFIG_W pBrowseDlgData) PDH_FUNCTION <pdh.h>
PdhCalculateCounterFromRawValue(PDH_HCOUNTER hCounter,DWORD dwFormat,PPDH_RAW_COUNTER rawValue1,PPDH_RAW_COUNTER rawValue2,PPDH_FMT_COUNTERVALUE fmtValue) PDH_FUNCTION <pdh.h>
PdhCloseLog(PDH_HLOG hLog,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhCloseQuery(PDH_HQUERY hQuery) PDH_FUNCTION <pdh.h>
PdhCollectQueryData(PDH_HQUERY hQuery) PDH_FUNCTION <pdh.h>
PdhCollectQueryDataEx(PDH_HQUERY hQuery,DWORD dwIntervalTime,HANDLE hNewDataEvent) PDH_FUNCTION <pdh.h>
PdhCollectQueryDataWithTime(PDH_HQUERY hQuery,LONGLONG * pllTimeStamp)PDH_FUNCTION <pdh.h>
PdhComputeCounterStatistics(PDH_HCOUNTER hCounter,DWORD dwFormat,DWORD dwFirstEntry,DWORD dwNumEntries,PPDH_RAW_COUNTER lpRawValueArray,PPDH_STATISTICS data) PDH_FUNCTION <pdh.h>
PdhConnectMachine(LPCSTR szMachineName) PDH_FUNCTION <pdh.h>
PdhConnectMachineA(LPCSTR szMachineName) PDH_FUNCTION <pdh.h>
PdhConnectMachineW(LPCWSTR szMachineName) PDH_FUNCTION <pdh.h>
PdhCreateSQLTables(LPCSTR szDataSource) PDH_FUNCTION <pdh.h>
PdhCreateSQLTablesA(LPCSTR szDataSource) PDH_FUNCTION <pdh.h>
PdhCreateSQLTablesW(LPCWSTR szDataSource) PDH_FUNCTION <pdh.h>
PdhEnumLogSetNames(LPCSTR szDataSource,LPSTR mszDataSetNameList,LPDWORD pcchBufferLength) PDH_FUNCTION <pdh.h>
PdhEnumLogSetNamesA(LPCSTR szDataSource,LPSTR mszDataSetNameList,LPDWORD pcchBufferLength) PDH_FUNCTION <pdh.h>
PdhEnumLogSetNamesW(LPCWSTR szDataSource,LPWSTR mszDataSetNameList,LPDWORD pcchBufferLength) PDH_FUNCTION <pdh.h>
PdhEnumMachines(LPCSTR szDataSource,LPSTR mszMachineList,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhEnumMachinesA(LPCSTR szDataSource,LPSTR mszMachineList,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhEnumMachinesH(PDH_HLOG hDataSource,LPSTR mszMachineList,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhEnumMachinesHA(PDH_HLOG hDataSource,LPSTR mszMachineList,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhEnumMachinesHW(PDH_HLOG hDataSource,LPWSTR mszMachineList,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhEnumMachinesW(LPCWSTR szDataSource,LPWSTR mszMachineList,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhEnumObjectItems(LPCSTR szDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR mszCounterList,LPDWORD pcchCounterListLength,LPSTR mszInstanceList,LPDWORD pcchInstanceListLength,DWORD dwDetailLevel,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhEnumObjectItemsA(LPCSTR szDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR mszCounterList,LPDWORD pcchCounterListLength,LPSTR mszInstanceList,LPDWORD pcchInstanceListLength,DWORD dwDetailLevel,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhEnumObjectItemsH(PDH_HLOG hDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR mszCounterList,LPDWORD pcchCounterListLength,LPSTR mszInstanceList,LPDWORD pcchInstanceListLength,DWORD dwDetailLevel,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhEnumObjectItemsHA(PDH_HLOG hDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR mszCounterList,LPDWORD pcchCounterListLength,LPSTR mszInstanceList,LPDWORD pcchInstanceListLength,DWORD dwDetailLevel,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhEnumObjectItemsHW(PDH_HLOG hDataSource,LPCWSTR szMachineName,LPCWSTR szObjectName,LPWSTR mszCounterList,LPDWORD pcchCounterListLength,LPWSTR mszInstanceList,LPDWORD pcchInstanceListLength,DWORD dwDetailLevel,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhEnumObjectItemsW(LPCWSTR szDataSource,LPCWSTR szMachineName,LPCWSTR szObjectName,LPWSTR mszCounterList,LPDWORD pcchCounterListLength,LPWSTR mszInstanceList,LPDWORD pcchInstanceListLength,DWORD dwDetailLevel,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhEnumObjects(LPCSTR szDataSource,LPCSTR szMachineName,LPSTR mszObjectList,LPDWORD pcchBufferSize,DWORD dwDetailLevel,WINBOOL bRefresh) PDH_FUNCTION <pdh.h>
PdhEnumObjectsA(LPCSTR szDataSource,LPCSTR szMachineName,LPSTR mszObjectList,LPDWORD pcchBufferSize,DWORD dwDetailLevel,WINBOOL bRefresh) PDH_FUNCTION <pdh.h>
PdhEnumObjectsH(PDH_HLOG hDataSource,LPCSTR szMachineName,LPSTR mszObjectList,LPDWORD pcchBufferSize,DWORD dwDetailLevel,WINBOOL bRefresh) PDH_FUNCTION <pdh.h>
PdhEnumObjectsHA(PDH_HLOG hDataSource,LPCSTR szMachineName,LPSTR mszObjectList,LPDWORD pcchBufferSize,DWORD dwDetailLevel,WINBOOL bRefresh) PDH_FUNCTION <pdh.h>
PdhEnumObjectsHW(PDH_HLOG hDataSource,LPCWSTR szMachineName,LPWSTR mszObjectList,LPDWORD pcchBufferSize,DWORD dwDetailLevel,WINBOOL bRefresh) PDH_FUNCTION <pdh.h>
PdhEnumObjectsW(LPCWSTR szDataSource,LPCWSTR szMachineName,LPWSTR mszObjectList,LPDWORD pcchBufferSize,DWORD dwDetailLevel,WINBOOL bRefresh) PDH_FUNCTION <pdh.h>
PdhExpandCounterPath(LPCSTR szWildCardPath,LPSTR mszExpandedPathList,LPDWORD pcchPathListLength) PDH_FUNCTION <pdh.h>
PdhExpandCounterPathA(LPCSTR szWildCardPath,LPSTR mszExpandedPathList,LPDWORD pcchPathListLength) PDH_FUNCTION <pdh.h>
PdhExpandCounterPathW(LPCWSTR szWildCardPath,LPWSTR mszExpandedPathList,LPDWORD pcchPathListLength) PDH_FUNCTION <pdh.h>
PdhExpandWildCardPath(LPCSTR szDataSource,LPCSTR szWildCardPath,LPSTR mszExpandedPathList,LPDWORD pcchPathListLength,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhExpandWildCardPathA(LPCSTR szDataSource,LPCSTR szWildCardPath,LPSTR mszExpandedPathList,LPDWORD pcchPathListLength,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhExpandWildCardPathH(PDH_HLOG hDataSource,LPCSTR szWildCardPath,LPSTR mszExpandedPathList,LPDWORD pcchPathListLength,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhExpandWildCardPathHA(PDH_HLOG hDataSource,LPCSTR szWildCardPath,LPSTR mszExpandedPathList,LPDWORD pcchPathListLength,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhExpandWildCardPathHW(PDH_HLOG hDataSource,LPCWSTR szWildCardPath,LPWSTR mszExpandedPathList,LPDWORD pcchPathListLength,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhExpandWildCardPathW(LPCWSTR szDataSource,LPCWSTR szWildCardPath,LPWSTR mszExpandedPathList,LPDWORD pcchPathListLength,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhFormatFromRawValue(DWORD dwCounterType,DWORD dwFormat,LONGLONG * pTimeBase,PPDH_RAW_COUNTER pRawValue1,PPDH_RAW_COUNTER pRawValue2,PPDH_FMT_COUNTERVALUE pFmtValue) PDH_FUNCTION <pdh.h>
PdhGetCounterInfo(PDH_HCOUNTER hCounter,BOOLEAN bRetrieveExplainText,LPDWORD pdwBufferSize,PPDH_COUNTER_INFO_A lpBuffer) PDH_FUNCTION <pdh.h>
PdhGetCounterInfoA(PDH_HCOUNTER hCounter,BOOLEAN bRetrieveExplainText,LPDWORD pdwBufferSize,PPDH_COUNTER_INFO_A lpBuffer) PDH_FUNCTION <pdh.h>
PdhGetCounterInfoW(PDH_HCOUNTER hCounter,BOOLEAN bRetrieveExplainText,LPDWORD pdwBufferSize,PPDH_COUNTER_INFO_W lpBuffer) PDH_FUNCTION <pdh.h>
PdhGetCounterTimeBase(PDH_HCOUNTER hCounter,LONGLONG * pTimeBase) PDH_FUNCTION <pdh.h>
PdhGetDataSourceTimeRange(LPCSTR szDataSource,LPDWORD pdwNumEntries,PPDH_TIME_INFO pInfo,LPDWORD dwBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDataSourceTimeRangeA(LPCSTR szDataSource,LPDWORD pdwNumEntries,PPDH_TIME_INFO pInfo,LPDWORD dwBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDataSourceTimeRangeH(PDH_HLOG hDataSource,LPDWORD pdwNumEntries,PPDH_TIME_INFO pInfo,LPDWORD pdwBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDataSourceTimeRangeW(LPCWSTR szDataSource,LPDWORD pdwNumEntries,PPDH_TIME_INFO pInfo,LPDWORD pdwBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfCounter(LPCSTR szDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR szDefaultCounterName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfCounterA(LPCSTR szDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR szDefaultCounterName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfCounterH(PDH_HLOG hDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR szDefaultCounterName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfCounterHA(PDH_HLOG hDataSource,LPCSTR szMachineName,LPCSTR szObjectName,LPSTR szDefaultCounterName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfCounterHW(PDH_HLOG hDataSource,LPCWSTR szMachineName,LPCWSTR szObjectName,LPWSTR szDefaultCounterName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfCounterW(LPCWSTR szDataSource,LPCWSTR szMachineName,LPCWSTR szObjectName,LPWSTR szDefaultCounterName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfObject(LPCSTR szDataSource,LPCSTR szMachineName,LPSTR szDefaultObjectName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfObjectA(LPCSTR szDataSource,LPCSTR szMachineName,LPSTR szDefaultObjectName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfObjectH(PDH_HLOG hDataSource,LPCSTR szMachineName,LPSTR szDefaultObjectName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfObjectHA(PDH_HLOG hDataSource,LPCSTR szMachineName,LPSTR szDefaultObjectName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfObjectHW(PDH_HLOG hDataSource,LPCWSTR szMachineName,LPWSTR szDefaultObjectName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDefaultPerfObjectW(LPCWSTR szDataSource,LPCWSTR szMachineName,LPWSTR szDefaultObjectName,LPDWORD pcchBufferSize) PDH_FUNCTION <pdh.h>
PdhGetDllVersion(LPDWORD lpdwVersion) PDH_FUNCTION <pdh.h>
PdhGetFormattedCounterArray(PDH_HCOUNTER hCounter,DWORD dwFormat,LPDWORD lpdwBufferSize,LPDWORD lpdwItemCount,PPDH_FMT_COUNTERVALUE_ITEM_A ItemBuffer) PDH_FUNCTION <pdh.h>
PdhGetFormattedCounterArrayA(PDH_HCOUNTER hCounter,DWORD dwFormat,LPDWORD lpdwBufferSize,LPDWORD lpdwItemCount,PPDH_FMT_COUNTERVALUE_ITEM_A ItemBuffer) PDH_FUNCTION <pdh.h>
PdhGetFormattedCounterArrayW(PDH_HCOUNTER hCounter,DWORD dwFormat,LPDWORD lpdwBufferSize,LPDWORD lpdwItemCount,PPDH_FMT_COUNTERVALUE_ITEM_W ItemBuffer) PDH_FUNCTION <pdh.h>
PdhGetFormattedCounterValue(PDH_HCOUNTER hCounter,DWORD dwFormat,LPDWORD lpdwType,PPDH_FMT_COUNTERVALUE pValue) PDH_FUNCTION <pdh.h>
PdhGetLogFileSize(PDH_HLOG hLog,LONGLONG * llSize) PDH_FUNCTION <pdh.h>
PdhGetLogSetGUID(PDH_HLOG hLog,GUID * pGuid,int * pRunId) PDH_FUNCTION <pdh.h>
PdhGetRawCounterArray(PDH_HCOUNTER hCounter,LPDWORD lpdwBufferSize,LPDWORD lpdwItemCount,PPDH_RAW_COUNTER_ITEM_A ItemBuffer) PDH_FUNCTION <pdh.h>
PdhGetRawCounterArrayA(PDH_HCOUNTER hCounter,LPDWORD lpdwBufferSize,LPDWORD lpdwItemCount,PPDH_RAW_COUNTER_ITEM_A ItemBuffer) PDH_FUNCTION <pdh.h>
PdhGetRawCounterArrayW(PDH_HCOUNTER hCounter,LPDWORD lpdwBufferSize,LPDWORD lpdwItemCount,PPDH_RAW_COUNTER_ITEM_W ItemBuffer) PDH_FUNCTION <pdh.h>
PdhGetRawCounterValue(PDH_HCOUNTER hCounter,LPDWORD lpdwType,PPDH_RAW_COUNTER pValue) PDH_FUNCTION <pdh.h>
PdhIsRealTimeQuery(PDH_HQUERY hQuery) WINBOOL <pdh.h>
PdhLookupPerfIndexByName(LPCSTR szMachineName,LPCSTR szNameBuffer,LPDWORD pdwIndex) PDH_FUNCTION <pdh.h>
PdhLookupPerfIndexByNameA(LPCSTR szMachineName,LPCSTR szNameBuffer,LPDWORD pdwIndex) PDH_FUNCTION <pdh.h>
PdhLookupPerfIndexByNameW(LPCWSTR szMachineName,LPCWSTR szNameBuffer,LPDWORD pdwIndex) PDH_FUNCTION <pdh.h>
PdhLookupPerfNameByIndex(LPCSTR szMachineName,DWORD dwNameIndex,LPSTR szNameBuffer,LPDWORD pcchNameBufferSize) PDH_FUNCTION <pdh.h>
PdhLookupPerfNameByIndexA(LPCSTR szMachineName,DWORD dwNameIndex,LPSTR szNameBuffer,LPDWORD pcchNameBufferSize) PDH_FUNCTION <pdh.h>
PdhLookupPerfNameByIndexW(LPCWSTR szMachineName,DWORD dwNameIndex,LPWSTR szNameBuffer,LPDWORD pcchNameBufferSize) PDH_FUNCTION <pdh.h>
PdhMakeCounterPath(PPDH_COUNTER_PATH_ELEMENTS_A pCounterPathElements,LPSTR szFullPathBuffer,LPDWORD pcchBufferSize,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhMakeCounterPathA(PPDH_COUNTER_PATH_ELEMENTS_A pCounterPathElements,LPSTR szFullPathBuffer,LPDWORD pcchBufferSize,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhMakeCounterPathW(PPDH_COUNTER_PATH_ELEMENTS_W pCounterPathElements,LPWSTR szFullPathBuffer,LPDWORD pcchBufferSize,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhOpenLog(LPCSTR szLogFileName,DWORD dwAccessFlags,LPDWORD lpdwLogType,PDH_HQUERY hQuery,DWORD dwMaxSize,LPCSTR szUserCaption,PDH_HLOG * phLog) PDH_FUNCTION <pdh.h>
PdhOpenLogA(LPCSTR szLogFileName,DWORD dwAccessFlags,LPDWORD lpdwLogType,PDH_HQUERY hQuery,DWORD dwMaxSize,LPCSTR szUserCaption,PDH_HLOG * phLog) PDH_FUNCTION <pdh.h>
PdhOpenLogW(LPCWSTR szLogFileName,DWORD dwAccessFlags,LPDWORD lpdwLogType,PDH_HQUERY hQuery,DWORD dwMaxSize,LPCWSTR szUserCaption,PDH_HLOG * phLog) PDH_FUNCTION <pdh.h>
PdhOpenQuery(LPCSTR szDataSource,DWORD_PTR dwUserData,PDH_HQUERY * phQuery) PDH_FUNCTION <pdh.h>
PdhOpenQueryA(LPCSTR szDataSource,DWORD_PTR dwUserData,PDH_HQUERY * phQuery) PDH_FUNCTION <pdh.h>
PdhOpenQueryH(PDH_HLOG hDataSource,DWORD_PTR dwUserData,PDH_HQUERY * phQuery) PDH_FUNCTION <pdh.h>
PdhOpenQueryW(LPCWSTR szDataSource,DWORD_PTR dwUserData,PDH_HQUERY * phQuery) PDH_FUNCTION <pdh.h>
PdhParseCounterPath(LPCSTR szFullPathBuffer,PPDH_COUNTER_PATH_ELEMENTS_A pCounterPathElements,LPDWORD pdwBufferSize,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhParseCounterPathA(LPCSTR szFullPathBuffer,PPDH_COUNTER_PATH_ELEMENTS_A pCounterPathElements,LPDWORD pdwBufferSize,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhParseCounterPathW(LPCWSTR szFullPathBuffer,PPDH_COUNTER_PATH_ELEMENTS_W pCounterPathElements,LPDWORD pdwBufferSize,DWORD dwFlags) PDH_FUNCTION <pdh.h>
PdhParseInstanceName(LPCSTR szInstanceString,LPSTR szInstanceName,LPDWORD pcchInstanceNameLength,LPSTR szParentName,LPDWORD pcchParentNameLength,LPDWORD lpIndex) PDH_FUNCTION <pdh.h>
PdhParseInstanceNameA(LPCSTR szInstanceString,LPSTR szInstanceName,LPDWORD pcchInstanceNameLength,LPSTR szParentName,LPDWORD pcchParentNameLength,LPDWORD lpIndex) PDH_FUNCTION <pdh.h>
PdhParseInstanceNameW(LPCWSTR szInstanceString,LPWSTR szInstanceName,LPDWORD pcchInstanceNameLength,LPWSTR szParentName,LPDWORD pcchParentNameLength,LPDWORD lpIndex) PDH_FUNCTION <pdh.h>
PdhReadRawLogRecord(PDH_HLOG hLog,FILETIME ftRecord,PPDH_RAW_LOG_RECORD pRawLogRecord,LPDWORD pdwBufferLength) PDH_FUNCTION <pdh.h>
PdhRemoveCounter(PDH_HCOUNTER hCounter) PDH_FUNCTION <pdh.h>
PdhSelectDataSource(HWND hWndOwner,DWORD dwFlags,LPSTR szDataSource,LPDWORD pcchBufferLength) PDH_FUNCTION <pdh.h>
PdhSelectDataSourceA(HWND hWndOwner,DWORD dwFlags,LPSTR szDataSource,LPDWORD pcchBufferLength) PDH_FUNCTION <pdh.h>
PdhSelectDataSourceW(HWND hWndOwner,DWORD dwFlags,LPWSTR szDataSource,LPDWORD pcchBufferLength) PDH_FUNCTION <pdh.h>
PdhSetCounterScaleFactor(PDH_HCOUNTER hCounter,LONG lFactor) PDH_FUNCTION <pdh.h>
PdhSetDefaultRealTimeDataSource(DWORD dwDataSourceId) PDH_FUNCTION <pdh.h>
PdhSetLogSetRunID(PDH_HLOG hLog,int RunId) PDH_FUNCTION <pdh.h>
PdhSetQueryTimeRange(PDH_HQUERY hQuery,PPDH_TIME_INFO pInfo) PDH_FUNCTION <pdh.h>
PdhUpdateLog(PDH_HLOG hLog,LPCSTR szUserString) PDH_FUNCTION <pdh.h>
PdhUpdateLogA(PDH_HLOG hLog,LPCSTR szUserString) PDH_FUNCTION <pdh.h>
PdhUpdateLogFileCatalog(PDH_HLOG hLog) PDH_FUNCTION <pdh.h>
PdhUpdateLogW(PDH_HLOG hLog,LPCWSTR szUserString) PDH_FUNCTION <pdh.h>
PdhValidatePath(LPCSTR szFullPathBuffer) PDH_FUNCTION <pdh.h>
PdhValidatePathA(LPCSTR szFullPathBuffer) PDH_FUNCTION <pdh.h>
PdhValidatePathEx(PDH_HLOG hDataSource,LPCSTR szFullPathBuffer)PDH_FUNCTION <pdh.h>
PdhValidatePathExA(PDH_HLOG hDataSource,LPCSTR szFullPathBuffer)PDH_FUNCTION <pdh.h>
PdhValidatePathExW(PDH_HLOG hDataSource,LPCWSTR szFullPathBuffer)PDH_FUNCTION <pdh.h>
PdhValidatePathW(LPCWSTR szFullPathBuffer) PDH_FUNCTION <pdh.h>
PdhVerifySQLDB(LPCSTR szDataSource) PDH_FUNCTION <pdh.h>
PdhVerifySQLDBA(LPCSTR szDataSource) PDH_FUNCTION <pdh.h>
PdhVerifySQLDBW(LPCWSTR szDataSource) PDH_FUNCTION <pdh.h>
PDISCONNECT_CLIENT(ULONG InterfaceIndex,PVOID ClientAddress) typedef DWORD<routprot.h>
PDO_UPDATE_ROUTES(ULONG InterfaceIndex) typedef DWORD<routprot.h>
PDO_UPDATE_SERVICES(ULONG InterfaceIndex)typedef DWORD<stm.h>
PDXVAHDSW_CreateDevice(IDirect3DDevice9Ex * pD3DDevice,HANDLE * phDevice)typedef HRESULT<dxvahd.h>
PDXVAHDSW_CreateVideoProcessor(HANDLE hDevice,const GUID * pVPGuid,HANDLE * phVideoProcessor)typedef HRESULT<dxvahd.h>
PDXVAHDSW_DestroyDevice(HANDLE hDevice)typedef HRESULT<dxvahd.h>
PDXVAHDSW_DestroyVideoProcessor(HANDLE hVideoProcessor)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessBltStatePrivate(HANDLE hVideoProcessor,DXVAHD_BLT_STATE_PRIVATE_DATA * pData)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessorCaps(HANDLE hDevice,const DXVAHD_CONTENT_DESC * pContentDesc,DXVAHD_DEVICE_USAGE Usage,UINT Count,DXVAHD_VPCAPS * pCaps)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessorCustomRates(HANDLE hDevice,const GUID * pVPGuid,UINT Count,DXVAHD_CUSTOM_RATE_DATA * pRates)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessorDeviceCaps(HANDLE hDevice,const DXVAHD_CONTENT_DESC * pContentDesc,DXVAHD_DEVICE_USAGE Usage,DXVAHD_VPDEVCAPS * pCaps)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessorFilterRange(HANDLE hDevice,DXVAHD_FILTER Filter,DXVAHD_FILTER_RANGE_DATA * pRange)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessorInputFormats(HANDLE hDevice,const DXVAHD_CONTENT_DESC * pContentDesc,DXVAHD_DEVICE_USAGE Usage,UINT Count,D3DFORMAT * pFormats)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessorOutputFormats(HANDLE hDevice,const DXVAHD_CONTENT_DESC * pContentDesc,DXVAHD_DEVICE_USAGE Usage,UINT Count,D3DFORMAT * pFormats)typedef HRESULT<dxvahd.h>
PDXVAHDSW_GetVideoProcessStreamStatePrivate(HANDLE hVideoProcessor,UINT StreamNumber,DXVAHD_STREAM_STATE_PRIVATE_DATA * pData)typedef HRESULT<dxvahd.h>
PDXVAHDSW_Plugin(UINT Size,void * pCallbacks)typedef HRESULT<dxvahd.h>
PDXVAHDSW_ProposeVideoPrivateFormat(HANDLE hDevice,D3DFORMAT * pFormat)typedef HRESULT<dxvahd.h>
PDXVAHDSW_SetVideoProcessBltState(HANDLE hVideoProcessor,DXVAHD_BLT_STATE State,UINT DataSize,const void * pData)typedef HRESULT<dxvahd.h>
PDXVAHDSW_SetVideoProcessStreamState(HANDLE hVideoProcessor,UINT StreamNumber,DXVAHD_STREAM_STATE State,UINT DataSize,const void * pData)typedef HRESULT<dxvahd.h>
PDXVAHDSW_VideoProcessBltHD(HANDLE hVideoProcessor,IDirect3DSurface9 * pOutputSurface,UINT OutputFrame,UINT StreamCount,const DXVAHD_STREAM_DATA * pStreams)typedef HRESULT<dxvahd.h>
Peek(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
Peek(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage2 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
Peek(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
Peek_v1(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekByLookupId(VARIANT LookupId,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekConsoleInput(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
PeekConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
PeekConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
PeekCurrent(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekCurrent(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage2 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekCurrent(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekCurrent_v1(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekFirstByLookupId(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekLastByLookupId(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekMessage(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
PeekMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
PeekMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
PeekNamedPipe(HANDLE hNamedPipe,LPVOID lpBuffer,DWORD nBufferSize,LPDWORD lpBytesRead,LPDWORD lpTotalBytesAvail,LPDWORD lpBytesLeftThisMessage) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
PeekNext(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekNext(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage2 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekNext(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekNext_v1(VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekNextByLookupId(VARIANT LookupId,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeekPenInput(HPCM,UINT,LPPOINT,LPVOID,UINT) int WINAPI <penwin.h>
PeekPreviousByLookupId(VARIANT LookupId,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
PeerCollabAddContact(PCWSTR pwzContactData,PPEER_CONTACT * ppContact) HRESULT WINAPI <p2p.h>
PeerCollabAsyncInviteContact(PCPEER_CONTACT pcContact,PCPEER_ENDPOINT pcEndpoint,PCPEER_INVITATION pcInvitation,HANDLE hEvent,HANDLE * phInvitation) HRESULT WINAPI <p2p.h>
PeerCollabAsyncInviteEndpoint(PCPEER_ENDPOINT pcEndpoint,PCPEER_INVITATION pcInvitation,HANDLE hEvent,HANDLE * phInvitation) HRESULT WINAPI <p2p.h>
PeerCollabCancelInvitation(HANDLE hInvitation) HRESULT WINAPI <p2p.h>
PeerCollabCloseHandle(HANDLE hInvitation) HRESULT WINAPI <p2p.h>
PeerCollabDeleteContact(PCWSTR pwzPeerName) HRESULT WINAPI <p2p.h>
PeerCollabDeleteEndpointData(PCPEER_ENDPOINT pcEndpoint) HRESULT WINAPI <p2p.h>
PeerCollabDeleteObject(const GUID * pObjectId) HRESULT WINAPI <p2p.h>
PeerCollabEnumApplicationRegistrationInfo(PEER_APPLICATION_REGISTRATION_TYPE registrationType,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerCollabEnumApplications(PCPEER_ENDPOINT pcEndpoint,const GUID * pApplicationId,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerCollabEnumContacts(HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerCollabEnumEndpoints(PCPEER_CONTACT pcContact,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerCollabEnumObjects(PCPEER_ENDPOINT pcEndpoint,const GUID * pObjectId,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerCollabEnumPeopleNearMe(HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerCollabExportContact(PCWSTR pwzPeerName,PWSTR * ppwzContactData) HRESULT WINAPI <p2p.h>
PeerCollabGetAppLaunchInfo(PPEER_APP_LAUNCH_INFO * ppLaunchInfo) HRESULT WINAPI <p2p.h>
PeerCollabGetApplicationRegistrationInfo(const GUID * pApplicationId,PEER_APPLICATION_REGISTRATION_TYPE registrationType,PPEER_APPLICATION_REGISTRATION_INFO * ppApplication) HRESULT WINAPI <p2p.h>
PeerCollabGetContact(PCWSTR pwzPeerName,PPEER_CONTACT * ppContact) HRESULT WINAPI <p2p.h>
PeerCollabGetEndpointName(PWSTR * ppwzEndpointName) HRESULT WINAPI <p2p.h>
PeerCollabGetEventData(HPEEREVENT hPeerEvent,PPEER_COLLAB_EVENT_DATA * ppEventData) HRESULT WINAPI <p2p.h>
PeerCollabGetInvitationResponse(HANDLE hInvitation,PPEER_INVITATION_RESPONSE * ppInvitationResponse) HRESULT WINAPI <p2p.h>
PeerCollabGetPresenceInfo(PCPEER_ENDPOINT pcEndpoint,PPEER_PRESENCE_INFO * ppPresenceInfo) HRESULT WINAPI <p2p.h>
PeerCollabGetSigninOptions(DWORD * pdwSigninOptions) HRESULT WINAPI <p2p.h>
PeerCollabInviteContact(PCPEER_CONTACT pcContact,PCPEER_ENDPOINT pcEndpoint,PCPEER_INVITATION pcInvitation,PPEER_INVITATION_RESPONSE * ppResponse) HRESULT WINAPI <p2p.h>
PeerCollabInviteEndpoint(PCPEER_ENDPOINT pcEndpoint,PCPEER_INVITATION pcInvitation,PPEER_INVITATION_RESPONSE * ppResponse) HRESULT WINAPI <p2p.h>
PeerCollabParseContact(PCWSTR pwzContactData,PPEER_CONTACT * ppContact) HRESULT WINAPI <p2p.h>
PeerCollabQueryContactData(PCPEER_ENDPOINT pcEndpoint,PWSTR * ppwzContactData) HRESULT WINAPI <p2p.h>
PeerCollabRefreshEndpointData(PCPEER_ENDPOINT pcEndpoint) HRESULT WINAPI <p2p.h>
PeerCollabRegisterApplication(PCPEER_APPLICATION_REGISTRATION_INFO pcApplication,PEER_APPLICATION_REGISTRATION_TYPE registrationType) HRESULT WINAPI <p2p.h>
PeerCollabRegisterEvent(HANDLE hEvent,DWORD cEventRegistration,PEER_COLLAB_EVENT_REGISTRATION * pEventRegistrations,HPEEREVENT * phPeerEvent) HRESULT WINAPI <p2p.h>
PeerCollabSetEndpointName(PCWSTR pwzEndpointName) HRESULT WINAPI <p2p.h>
PeerCollabSetObject(PCPEER_OBJECT pcObject) HRESULT WINAPI <p2p.h>
PeerCollabSetPresenceInfo(PCPEER_PRESENCE_INFO pcPresenceInfo) HRESULT WINAPI <p2p.h>
PeerCollabShutdown() HRESULT WINAPI <p2p.h>
PeerCollabSignin(HWND hwndParent,DWORD dwSigninOptions) HRESULT WINAPI <p2p.h>
PeerCollabSignout(DWORD dwSigninOptions) HRESULT WINAPI <p2p.h>
PeerCollabStartup(WORD wVersionRequested) HRESULT WINAPI <p2p.h>
PeerCollabSubscribeEndpointData(const PCPEER_ENDPOINT pcEndpoint) HRESULT WINAPI <p2p.h>
PeerCollabUnregisterApplication(const GUID * pApplicationId,PEER_APPLICATION_REGISTRATION_TYPE registrationType) HRESULT WINAPI <p2p.h>
PeerCollabUnregisterEvent(HPEEREVENT hPeerEvent) HRESULT WINAPI <p2p.h>
PeerCollabUnsubscribeEndpointData(const PCPEER_ENDPOINT pcEndpoint) HRESULT WINAPI <p2p.h>
PeerCollabUpdateContact(PCPEER_CONTACT pContact) HRESULT WINAPI <p2p.h>
PeerCreatePeerName(PCWSTR pwzIdentity,PCWSTR pwzClassifier,PWSTR * ppwzPeerName) HRESULT WINAPI <p2p.h>
PeerEndEnumeration(HPEERENUM hPeerEnum) HRESULT WINAPI <p2p.h>
PeerEnumGroups(PCWSTR pwzIdentity,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerEnumIdentities(HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerFreeData(LPCVOID pvData) VOID WINAPI <p2p.h>
PeerGetItemCount(HPEERENUM hPeerEnum,ULONG * pCount) HRESULT WINAPI <p2p.h>
PeerGetNextItem(HPEERENUM hPeerEnum,ULONG * pCount,PVOID ** pppvItems) HRESULT WINAPI <p2p.h>
PeerGraphAddRecord(HGRAPH hGraph,PPEER_RECORD pRecord,GUID * pRecordId) HRESULT WINAPI <p2p.h>
PeerGraphClose(HGRAPH hGraph) HRESULT WINAPI <p2p.h>
PeerGraphCloseDirectConnection(HGRAPH hGraph,ULONGLONG ullConnectionId) HRESULT WINAPI <p2p.h>
PeerGraphConnect(HGRAPH hGraph,PCWSTR pwzPeerId,PPEER_ADDRESS pAddress,ULONGLONG * pullConnectionId) HRESULT WINAPI <p2p.h>
PeerGraphCreate(PPEER_GRAPH_PROPERTIES pGraphProperties,PCWSTR pwzDatabaseName,PPEER_SECURITY_INTERFACE pSecurityInterface,HGRAPH * phGraph) HRESULT WINAPI <p2p.h>
PeerGraphDelete(PCWSTR pwzGraphId,PCWSTR pwzPeerId,PCWSTR pwzDatabaseName) HRESULT WINAPI <p2p.h>
PeerGraphDeleteRecord(HGRAPH hGraph,const GUID * pRecordId,WINBOOL fLocal) HRESULT WINAPI <p2p.h>
PeerGraphEndEnumeration(HPEERENUM hPeerEnum) HRESULT WINAPI <p2p.h>
PeerGraphEnumConnections(HGRAPH hGraph,DWORD dwFlags,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGraphEnumNodes(HGRAPH hGraph,PCWSTR pwzPeerId,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGraphEnumRecords(HGRAPH hGraph,const GUID * pRecordType,PCWSTR pwzPeerId,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGraphExportDatabase(HGRAPH hGraph,PCWSTR pwzFilePath) HRESULT WINAPI <p2p.h>
PeerGraphFreeData(PVOID pvData) VOID WINAPI <p2p.h>
PeerGraphGetEventData(HPEEREVENT hPeerEvent,PPEER_GRAPH_EVENT_DATA * ppEventData) HRESULT WINAPI <p2p.h>
PeerGraphGetItemCount(HPEERENUM hPeerEnum,ULONG * pCount) HRESULT WINAPI <p2p.h>
PeerGraphGetNextItem(HPEERENUM hPeerEnum,ULONG * pCount,PVOID ** pppvItems) HRESULT WINAPI <p2p.h>
PeerGraphGetNodeInfo(HGRAPH hGraph,ULONGLONG ullNodeId,PPEER_NODE_INFO * ppNodeInfo) HRESULT WINAPI <p2p.h>
PeerGraphGetProperties(HGRAPH hGraph,PPEER_GRAPH_PROPERTIES * ppGraphProperties) HRESULT WINAPI <p2p.h>
PeerGraphGetRecord(HGRAPH hGraph,const GUID * pRecordId,PPEER_RECORD * ppRecord) HRESULT WINAPI <p2p.h>
PeerGraphGetStatus(HGRAPH hGraph,DWORD * pdwStatus) HRESULT WINAPI <p2p.h>
PeerGraphImportDatabase(HGRAPH hGraph,PCWSTR pwzFilePath) HRESULT WINAPI <p2p.h>
PeerGraphListen(HGRAPH hGraph,DWORD dwScope,DWORD dwScopeId,WORD wPort) HRESULT WINAPI <p2p.h>
PeerGraphOpen(PCWSTR pwzGraphId,PCWSTR pwzPeerId,PCWSTR pwzDatabaseName,PPEER_SECURITY_INTERFACE pSecurityInterface,ULONG cRecordTypeSyncPrecedence,const GUID * pRecordTypeSyncPrecedence,HGRAPH * phGraph) HRESULT WINAPI <p2p.h>
PeerGraphOpenDirectConnection(HGRAPH hGraph,PCWSTR pwzPeerId,PPEER_ADDRESS pAddress,ULONGLONG * pullConnectionId) HRESULT WINAPI <p2p.h>
PeerGraphPeerTimeToUniversalTime(HGRAPH hGraph,FILETIME * pftPeerTime,FILETIME * pftUniversalTime) HRESULT WINAPI <p2p.h>
PeerGraphRegisterEvent(HGRAPH hGraph,HANDLE hEvent,ULONG cEventRegistrations,PEER_GRAPH_EVENT_REGISTRATION * pEventRegistrations,HPEEREVENT * phPeerEvent) HRESULT WINAPI <p2p.h>
PeerGraphSearchRecords(HGRAPH hGraph,PCWSTR pwzCriteria,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGraphSendData(HGRAPH hGraph,ULONGLONG ullConnectionId,const GUID * pType,ULONG cbData,PVOID pvData) HRESULT WINAPI <p2p.h>
PeerGraphSetNodeAttributes(HGRAPH hGraph,PCWSTR pwzAttributes) HRESULT WINAPI <p2p.h>
PeerGraphSetPresence(HGRAPH hGraph,WINBOOL fPresent) HRESULT WINAPI <p2p.h>
PeerGraphSetProperties(HGRAPH hGraph,PPEER_GRAPH_PROPERTIES pGraphProperties) HRESULT WINAPI <p2p.h>
PeerGraphShutdown() HRESULT WINAPI <p2p.h>
PeerGraphStartup(WORD wVersionRequested,PPEER_VERSION_DATA pVersionData) HRESULT WINAPI <p2p.h>
PeerGraphUniversalTimeToPeerTime(HGRAPH hGraph,FILETIME * pftUniversalTime,FILETIME * pftPeerTime) HRESULT WINAPI <p2p.h>
PeerGraphUnregisterEvent(HPEEREVENT hPeerEvent) HRESULT WINAPI <p2p.h>
PeerGraphUpdateRecord(HGRAPH hGraph,PPEER_RECORD pRecord) HRESULT WINAPI <p2p.h>
PeerGraphValidateDeferredRecords(HGRAPH hGraph,ULONG cRecordIds,const GUID * pRecordIds) HRESULT WINAPI <p2p.h>
PeerGroupAddRecord(HGROUP hGroup,PPEER_RECORD pRecord,GUID * pRecordId) HRESULT WINAPI <p2p.h>
PeerGroupClose(HGROUP hGroup) HRESULT WINAPI <p2p.h>
PeerGroupCloseDirectConnection(HGROUP hGroup,ULONGLONG ullConnectionId) HRESULT WINAPI <p2p.h>
PeerGroupConnect(HGROUP hGroup) HRESULT WINAPI <p2p.h>
PeerGroupConnectByAddress(HGROUP hGroup,ULONG cAddresses,PPEER_ADDRESS pAddresses) HRESULT WINAPI <p2p.h>
PeerGroupCreate(PPEER_GROUP_PROPERTIES pProperties,HGROUP * phGroup) HRESULT WINAPI <p2p.h>
PeerGroupCreateInvitation(HGROUP hGroup,PCWSTR pwzIdentityInfo,FILETIME * pftExpiration,ULONG cRoles,const GUID * pRoles,PWSTR * ppwzInvitation) HRESULT WINAPI <p2p.h>
PeerGroupCreatePasswordInvitation(HGROUP hGroup,PWSTR * ppwzInvitation) HRESULT WINAPI <p2p.h>
PeerGroupDelete(PCWSTR pwzIdentity,PCWSTR pwzGroupPeerName) HRESULT WINAPI <p2p.h>
PeerGroupDeleteRecord(HGROUP hGroup,const GUID * pRecordId) HRESULT WINAPI <p2p.h>
PeerGroupEnumConnections(HGROUP hGroup,DWORD dwFlags,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGroupEnumMembers(HGROUP hGroup,DWORD dwFlags,PCWSTR pwzIdentity,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGroupEnumRecords(HGROUP hGroup,const GUID * pRecordType,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGroupExportConfig(HGROUP hGroup,PCWSTR pwzPassword,PWSTR * ppwzXML) HRESULT WINAPI <p2p.h>
PeerGroupExportDatabase(HGROUP hGroup,PCWSTR pwzFilePath) HRESULT WINAPI <p2p.h>
PeerGroupGetEventData(HPEEREVENT hPeerEvent,PPEER_GROUP_EVENT_DATA * ppEventData) HRESULT WINAPI <p2p.h>
PeerGroupGetProperties(HGROUP hGroup,PPEER_GROUP_PROPERTIES * ppProperties) HRESULT WINAPI <p2p.h>
PeerGroupGetRecord(HGROUP hGroup,const GUID * pRecordId,PPEER_RECORD * ppRecord) HRESULT WINAPI <p2p.h>
PeerGroupGetStatus(HGROUP hGroup,DWORD * pdwStatus) HRESULT WINAPI <p2p.h>
PeerGroupImportConfig(PCWSTR pwzXML,PCWSTR pwzPassword,WINBOOL fOverwrite,PWSTR * ppwzIdentity,PWSTR * ppwzGroup) HRESULT WINAPI <p2p.h>
PeerGroupImportDatabase(HGROUP hGroup,PCWSTR pwzFilePath) HRESULT WINAPI <p2p.h>
PeerGroupIssueCredentials(HGROUP hGroup,PCWSTR pwzSubjectIdentity,PEER_CREDENTIAL_INFO * pCredentialInfo,DWORD dwFlags,PWSTR * ppwzInvitation) HRESULT WINAPI <p2p.h>
PeerGroupJoin(PCWSTR pwzIdentity,PCWSTR pwzInvitation,PCWSTR pwzCloud,HGROUP * phGroup) HRESULT WINAPI <p2p.h>
PeerGroupOpen(PCWSTR pwzIdentity,PCWSTR pwzGroupPeerName,PCWSTR pwzCloud,HGROUP * phGroup) HRESULT WINAPI <p2p.h>
PeerGroupOpenDirectConnection(HGROUP hGroup,PCWSTR pwzIdentity,PPEER_ADDRESS pAddress,ULONGLONG * pullConnectionId) HRESULT WINAPI <p2p.h>
PeerGroupParseInvitation(PCWSTR pwzInvitation,PPEER_INVITATION_INFO * ppInvitationInfo) HRESULT WINAPI <p2p.h>
PeerGroupPasswordJoin(PCWSTR pwzIdentity,PCWSTR pwzInvitation,PCWSTR pwzPassword,PCWSTR pwzCloud,HGROUP * phGroup) HRESULT WINAPI <p2p.h>
PeerGroupPeerTimeToUniversalTime(HGROUP hGroup,FILETIME * pftPeerTime,FILETIME * pftUniversalTime) HRESULT WINAPI <p2p.h>
PeerGroupRegisterEvent(HGROUP hGroup,HANDLE hEvent,DWORD cEventRegistration,PEER_GROUP_EVENT_REGISTRATION * pEventRegistrations,HPEEREVENT * phPeerEvent) HRESULT WINAPI <p2p.h>
PeerGroupResumePasswordAuthentication(HGROUP hGroup,HPEEREVENT hPeerEventHandle) HRESULT WINAPI <p2p.h>
PeerGroupSearchRecords(HGROUP hGroup,PCWSTR pwzCriteria,HPEERENUM * phPeerEnum) HRESULT WINAPI <p2p.h>
PeerGroupSendData(HGROUP hGroup,ULONGLONG ullConnectionId,const GUID * pType,ULONG cbData,PVOID pvData) HRESULT WINAPI <p2p.h>
PeerGroupSetProperties(HGROUP hGroup,PPEER_GROUP_PROPERTIES pProperties) HRESULT WINAPI <p2p.h>
PeerGroupShutdown() HRESULT WINAPI <p2p.h>
PeerGroupStartup(WORD wVersionRequested,PPEER_VERSION_DATA pVersionData) HRESULT WINAPI <p2p.h>
PeerGroupUniversalTimeToPeerTime(HGROUP hGroup,FILETIME * pftUniversalTime,FILETIME * pftPeerTime) HRESULT WINAPI <p2p.h>
PeerGroupUnregisterEvent(HPEEREVENT hPeerEvent) HRESULT WINAPI <p2p.h>
PeerGroupUpdateRecord(HGROUP hGroup,PPEER_RECORD pRecord) HRESULT WINAPI <p2p.h>
PeerHostNameToPeerName(PCWSTR pwzHostName,PWSTR * ppwzPeerName) HRESULT WINAPI <p2p.h>
PeerIdentityCreate(PCWSTR pwzClassifier,PCWSTR pwzFriendlyName,HCRYPTPROV hCryptProv,PWSTR * ppwzIdentity) HRESULT WINAPI <p2p.h>
PeerIdentityDelete(PCWSTR pwzIdentity) HRESULT WINAPI <p2p.h>
PeerIdentityExport(PCWSTR pwzIdentity,PCWSTR pwzPassword,PWSTR * ppwzExportXML) HRESULT WINAPI <p2p.h>
PeerIdentityGetCryptKey(PCWSTR pwzIdentity,HCRYPTPROV * phCryptProv) HRESULT WINAPI <p2p.h>
PeerIdentityGetDefault(PWSTR * ppwzPeerName) HRESULT WINAPI <p2p.h>
PeerIdentityGetFriendlyName(PCWSTR pwzIdentity,PWSTR * ppwzFriendlyName) HRESULT WINAPI <p2p.h>
PeerIdentityGetXML(PCWSTR pwzIdentity,PWSTR * ppwzIdentityXML) HRESULT WINAPI <p2p.h>
PeerIdentityImport(PCWSTR pwzImportXML,PCWSTR pwzPassword,PWSTR * ppwzIdentity) HRESULT WINAPI <p2p.h>
PeerIdentitySetFriendlyName(PCWSTR pwzIdentity,PCWSTR pwzFriendlyName) HRESULT WINAPI <p2p.h>
PeerNameToPeerHostName(PCWSTR pwzPeerName,PWSTR * ppwzHostName) HRESULT WINAPI <p2p.h>
PeerPnrpEndResolve(HRESOLUTION hResolve) HRESULT WINAPI <p2p.h>
PeerPnrpGetCloudInfo(ULONG * pcNumClouds,PPEER_PNRP_CLOUD_INFO * ppCloudInfo) HRESULT WINAPI <p2p.h>
PeerPnrpGetEndpoint(HRESOLUTION hResolve,PPEER_PNRP_ENDPOINT_INFO * ppEndpoint) HRESULT WINAPI <p2p.h>
PeerPnrpRegister(PCWSTR pcwzPeerName,PPEER_PNRP_REGISTRATION_INFO pRegistrationInfo,HREGISTRATION * phRegistration) HRESULT WINAPI <p2p.h>
PeerPnrpResolve(PCWSTR pcwzPeerName,PCWSTR pcwzCloudName,ULONG * pcEndpoints,PPEER_PNRP_ENDPOINT_INFO * ppEndpoints) HRESULT WINAPI <p2p.h>
PeerPnrpShutdown() HRESULT WINAPI <p2p.h>
PeerPnrpStartResolve(PCWSTR pcwzPeerName,PCWSTR pcwzCloudName,ULONG cMaxEndpoints,HANDLE hEvent,HRESOLUTION * phResolve) HRESULT WINAPI <p2p.h>
PeerPnrpStartup(WORD wVersionRequested) HRESULT WINAPI <p2p.h>
PeerPnrpUnregister(HREGISTRATION hRegistration) HRESULT WINAPI <p2p.h>
PeerPnrpUpdateRegistration(HREGISTRATION hRegistration,PPEER_PNRP_REGISTRATION_INFO pRegistrationInfo) HRESULT WINAPI <p2p.h>
Pen()	~<gdipluspen.h>
Pen(Color * color)	Status GetColor<gdipluspen.h>
Pen(const Brush * brush)	Status SetBrush<gdipluspen.h>
Pen(const Brush * brush,REAL width=1.0f)	<gdipluspen.h>
Pen(const Color & color)	Status SetColor<gdipluspen.h>
Pen(const Color & color,REAL width=1.0f)	<gdipluspen.h>
Pen(const CustomLineCap * customCap)	Status SetCustomStartCap<gdipluspen.h>
Pen(const Matrix * matrix)	Status SetTransform<gdipluspen.h>
Pen(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status MultiplyTransform<gdipluspen.h>
Pen(const Pen & pen)	<gdipluspen.h>
Pen(const Pen &)	<gdipluspen.h>
Pen(const REAL * compoundArray,INT count)	Status SetCompoundArray<gdipluspen.h>
Pen(const REAL * dashArray,INT count)	Status SetDashPattern<gdipluspen.h>
Pen(CustomLineCap * customCap)	Status GetCustomStartCap<gdipluspen.h>
Pen(DashCap dashCap)	Status SetDashCap<gdipluspen.h>
Pen(DashStyle dashStyle)	Status SetDashStyle<gdipluspen.h>
Pen(GpPen * pen,Status status)	<gdipluspen.h>
Pen(LineCap endCap)	Status SetEndCap<gdipluspen.h>
Pen(LineCap startCap)	Status SetStartCap<gdipluspen.h>
Pen(LineCap startCap,LineCap endCap,DashCap dashCap)	Status SetLineCap<gdipluspen.h>
Pen(LineJoin lineJoin)	Status SetLineJoin<gdipluspen.h>
Pen(Matrix * matrix)	Status GetTransform<gdipluspen.h>
Pen(PenAlignment penAlignment)	Status SetAlignment<gdipluspen.h>
Pen(REAL * compoundArray,INT count)	Status GetCompoundArray<gdipluspen.h>
Pen(REAL * dashArray,INT count)	Status GetDashPattern<gdipluspen.h>
Pen(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status RotateTransform<gdipluspen.h>
Pen(REAL dashOffset)	Status SetDashOffset<gdipluspen.h>
Pen(REAL dx,REAL dy,MatrixOrder order=MatrixOrderPrepend)	Status TranslateTransform<gdipluspen.h>
Pen(REAL miterLimit)	Status SetMiterLimit<gdipluspen.h>
Pen(REAL sx,REAL sy,MatrixOrder order=MatrixOrderPrepend)	Status ScaleTransform<gdipluspen.h>
Pen(REAL width)	Status SetWidth<gdipluspen.h>
Pen(Status newStatus)	Status updateStatus<gdipluspen.h>
PENABLECALLBACK(LPCGUID SourceId,ULONG IsEnabled,UCHAR Level,ULONGLONG MatchAnyKeyword,ULONGLONG MatchAllKeyword,PEVENT_FILTER_DESCRIPTOR FilterData,PVOID CallbackContext) typedef VOID<evntprov.h>
PenDataFromBuffer(LPHPENDATA,UINT,LPBYTE,LONG,LPDWORD) LONG WINAPI <penwin.h>
PenDataToBuffer(HPENDATA,LPBYTE,LONG,LPDWORD) LONG WINAPI <penwin.h>
pEntryPoints(PCHANNEL_ENTRY_POINTS) typedef WINBOOL _stdcall VIRTUALCHANNELENTRY<cchannel.h>
PENUM_PAGE_FILE_CALLBACKA(LPVOID pContext,PENUM_PAGE_FILE_INFORMATION pPageFileInfo,LPCSTR lpFilename) typedef WINBOOL<psapi.h>
PENUM_PAGE_FILE_CALLBACKW(LPVOID pContext,PENUM_PAGE_FILE_INFORMATION pPageFileInfo,LPCWSTR lpFilename) typedef WINBOOL<psapi.h>
PENUMDIRTREE_CALLBACK(LPCSTR FilePath,PVOID CallerData) typedef WINBOOL<psdk>
PENUMERATE_GET_NEXT_SERVICE(HANDLE EnumerationHandle,PIPX_SERVICE Service)typedef DWORD<stm.h>
PENUMLOADED_MODULES_CALLBACK(PCSTR ModuleName,ULONG ModuleBase,ULONG ModuleSize,PVOID UserContext) typedef WINBOOL<psdk>
PENUMLOADED_MODULES_CALLBACK64(PCSTR ModuleName,DWORD64 ModuleBase,ULONG ModuleSize,PVOID UserContext) typedef WINBOOL<psdk>
PENUMLOADED_MODULES_CALLBACKW64(PCWSTR ModuleName,DWORD64 ModuleBase,ULONG ModuleSize,PVOID UserContext) typedef WINBOOL<psdk>
PERCENT_TO_PERF_LEVEL(x)  <ntpoapi.h>
PERF_LEVEL_TO_PERCENT(x)  <ntpoapi.h>
PERF_MEM_ALLOC(SIZE_T AllocSize,LPVOID pContext)typedef LPVOID<perflib.h>
PERF_MEM_FREE(LPVOID pBuffer,LPVOID pContext)typedef void<perflib.h>
PerfCreateInstance(HANDLE hProvider,LPCGUID CounterSetGuid,LPCWSTR szInstanceName,ULONG dwInstance)WINADVAPI PPERF_COUNTERSET_INSTANCE WINAPI <perflib.h>
PerfDecrementULongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONG lValue)WINADVAPI ULONG WINAPI <perflib.h>
PerfDecrementULongLongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONGLONG llValue)WINADVAPI ULONG WINAPI <perflib.h>
PerfDeleteInstance(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE InstanceBlock)WINADVAPI ULONG WINAPI <perflib.h>
PerfIncrementULongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONG lValue)WINADVAPI ULONG WINAPI <perflib.h>
PerfIncrementULongLongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONGLONG llValue)WINADVAPI ULONG WINAPI <perflib.h>
PERFLIBREQUEST(ULONG RequestCode,PVOID Buffer,ULONG BufferSize)typedef ULONG<perflib.h>
PerfQueryInstance(HANDLE hProvider,LPCGUID CounterSetGuid,LPCWSTR szInstance,ULONG dwInstance)WINADVAPI PPERF_COUNTERSET_INSTANCE WINAPI <perflib.h>
PerfSetCounterRefValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,PVOID lpAddr)WINADVAPI ULONG WINAPI <perflib.h>
PerfSetCounterSetInfo(HANDLE hProvider,PPERF_COUNTERSET_INFO pTemplate,ULONG dwTemplateSize)WINADVAPI ULONG WINAPI <perflib.h>
PerfSetULongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONG lValue)WINADVAPI ULONG WINAPI <perflib.h>
PerfSetULongLongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONGLONG llValue)WINADVAPI ULONG WINAPI <perflib.h>
PerfStartProvider(LPGUID ProviderGuid,PERFLIBREQUEST ControlCallback,HANDLE * phProvider)WINADVAPI ULONG WINAPI <perflib.h>
PerfStartProviderEx(LPGUID ProviderGuid,PPERF_PROVIDER_CONTEXT ProviderContext,HANDLE * phProvider)WINADVAPI ULONG WINAPI <perflib.h>
PerfStopProvider(HANDLE hProvider)WINADVAPI ULONG WINAPI <perflib.h>
PeriodicUpdatePicture(WINBOOL fEnable,DWORD dwInterval)virtual HRESULT WINAPI <h323priv.h>
PerUserInit(void) STDAPI_<shlobj.h>
PerUserPolicy(POLICY_AUDIT_SUBCATEGORY_COUNT) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) >> 1) UCHAR <winnt.h>
PEVENT_CALLBACK(PEVENT_TRACE pEvent)typedef VOID<evntrace.h>
PEVENT_RECORD_CALLBACK(PEVENT_RECORD EventRecord)typedef VOID<evntrace.h>
PEVENT_TRACE_BUFFER_CALLBACKA(PEVENT_TRACE_LOGFILEA Logfile)typedef ULONG<evntrace.h>
PEVENT_TRACE_BUFFER_CALLBACKW(PEVENT_TRACE_LOGFILEW Logfile)typedef ULONG<evntrace.h>
PEXCEPTION_HANDLER(struct _EXCEPTION_RECORD *,void *,struct _CONTEXT *,void *) typedef EXCEPTION_DISPOSITION<excpt.h>
PEXPERTCONFIGPROC(HEXPERTKEY,PEXPERTCONFIG *,PEXPERTSTARTUPINFO,DWORD,HWND) typedef WINBOOL<netmon.h>
PEXPERTREGISTERPROC(PEXPERTENUMINFO) typedef WINBOOL<netmon.h>
PEXPERTRUNPROC(HEXPERTKEY,PEXPERTCONFIG,PEXPERTSTARTUPINFO,DWORD,HWND) typedef WINBOOL<netmon.h>
PF_AddConnectNotify(LPNOTIFYINFO lpNotifyInfo,LPNOTIFYADD lpAddInfo)typedef DWORD<npapi.h>
PF_CancelConnectNotify(LPNOTIFYINFO lpNotifyInfo,LPNOTIFYCANCEL lpCancelInfo)typedef DWORD<npapi.h>
PF_ConfigAnalyzeService(PSCESVC_CALLBACK_INFO pSceCbInfo) typedef SCESTATUS<scesvc.h>
PF_NPAddConnection(LPNETRESOURCEW lpNetResource,LPWSTR lpPassword,LPWSTR lpUserName)typedef DWORD<npapi.h>
PF_NPAddConnection3(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPWSTR lpPassword,LPWSTR lpUserName,DWORD dwFlags)typedef DWORD<npapi.h>
PF_NPCancelConnection(LPWSTR lpName,WINBOOL fForce)typedef DWORD<npapi.h>
PF_NPCloseEnum(HANDLE hEnum)typedef DWORD<npapi.h>
PF_NPDeviceMode(HWND hParent)typedef DWORD<npapi.h>
PF_NPDirectoryNotify(HWND hwnd,LPWSTR lpDir,DWORD dwOper)typedef DWORD<npapi.h>
PF_NPEnumResource(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize)typedef DWORD<npapi.h>
PF_NPFMXEditPerm(LPWSTR lpDriveName,HWND hwndFMX,DWORD nDialogType)typedef DWORD<npapi.h>
PF_NPFMXGetPermCaps(LPWSTR lpDriveName)typedef DWORD<npapi.h>
PF_NPFMXGetPermHelp(LPWSTR lpDriveName,DWORD nDialogType,WINBOOL fDirectory,LPVOID lpFileNameBuffer,LPDWORD lpBufferSize,LPDWORD lpnHelpContext)typedef DWORD<npapi.h>
PF_NPFormatNetworkName(LPWSTR lpRemoteName,LPWSTR lpFormattedName,LPDWORD lpnLength,DWORD dwFlags,DWORD dwAveCharPerLine)typedef DWORD<npapi.h>
PF_NPGetCaps(DWORD ndex)typedef DWORD<npapi.h>
PF_NPGetConnection(LPWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnBufferLen)typedef DWORD<npapi.h>
PF_NPGetDirectoryType(LPWSTR lpName,LPINT lpType,WINBOOL bFlushCache)typedef DWORD<npapi.h>
PF_NPGetPropertyText(DWORD iButton,DWORD nPropSel,LPWSTR lpName,LPWSTR lpButtonName,DWORD nButtonNameLen,DWORD nType)typedef DWORD<npapi.h>
PF_NPGetUniversalName(LPWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpnBufferSize)typedef DWORD<npapi.h>
PF_NPGetUser(LPWSTR lpName,LPWSTR lpUserName,LPDWORD lpnBufferLen)typedef DWORD<npapi.h>
PF_NPLogonNotify(PLUID lpLogonId,LPCWSTR lpAuthentInfoType,LPVOID lpAuthentInfo,LPCWSTR lpPreviousAuthentInfoType,LPVOID lpPreviousAuthentInfo,LPWSTR lpStationName,LPVOID StationHandle,LPWSTR * lpLogonScript)typedef DWORD<npapi.h>
PF_NPOpenEnum(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum)typedef DWORD<npapi.h>
PF_NPPasswordChangeNotify(LPCWSTR lpAuthentInfoType,LPVOID lpAuthentInfo,LPCWSTR lpPreviousAuthentInfoType,LPVOID lpPreviousAuthentInfo,LPWSTR lpStationName,LPVOID StationHandle,DWORD dwChangeInfo)typedef DWORD<npapi.h>
PF_NPPropertyDialog(HWND hwndParent,DWORD iButtonDlg,DWORD nPropSel,LPWSTR lpFileName,DWORD nType)typedef DWORD<npapi.h>
PF_NPSearchDialog(HWND hwndParent,LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,DWORD cbBuffer,LPDWORD lpnFlags)typedef DWORD<npapi.h>
PF_SISCREATEBACKUPSTRUCTURE(PWCHAR,PVOID *,PWCHAR *,PULONG,PWCHAR **) typedef WINBOOL<sisbkup.h>
PF_SISCREATERESTORESTRUCTURE(PWCHAR,PVOID *,PWCHAR *,PULONG,PWCHAR **) typedef WINBOOL<sisbkup.h>
PF_SISCSFILESTOBACKUPFORLINK(PVOID,PVOID,ULONG,PVOID,PVOID *,PULONG,PWCHAR **) typedef WINBOOL<sisbkup.h>
PF_SISFREEALLOCATEDMEMORY(PVOID) typedef WINBOOL<sisbkup.h>
PF_SISFREEBACKUPSTRUCTURE(PVOID) typedef WINBOOL<sisbkup.h>
PF_SISFREERESTORESTRUCTURE(PVOID) typedef WINBOOL<sisbkup.h>
PF_SISRESTOREDCOMMONSTORFILE(PVOID,PWCHAR) typedef WINBOOL<sisbkup.h>
PF_SISRESTOREDLINK(PVOID,PWCHAR,PVOID,ULONG,PULONG,PWCHAR **) typedef WINBOOL<sisbkup.h>
PF_UpdateService(PSCESVC_CALLBACK_INFO pSceCbInfo,PSCESVC_CONFIGURATION_INFO ServiceInfo) typedef SCESTATUS<scesvc.h>
PfAddFiltersToInterface(INTERFACE_HANDLE ih,DWORD cInFilters,PPF_FILTER_DESCRIPTOR pfiltIn,DWORD cOutFilters,PPF_FILTER_DESCRIPTOR pfiltOut,PFILTER_HANDLE pfHandle)PFAPIENTRY <fltdefs.h>
PfAddGlobalFilterToInterface(INTERFACE_HANDLE pInterface,GLOBAL_FILTER gfFilter)PFAPIENTRY <fltdefs.h>
PfBindInterfaceToIndex(INTERFACE_HANDLE pInterface,DWORD dwIndex,PFADDRESSTYPE pfatLinkType,PBYTE LinkIPAddress)PFAPIENTRY <fltdefs.h>
PfBindInterfaceToIPAddress(INTERFACE_HANDLE pInterface,PFADDRESSTYPE pfatType,PBYTE IPAddress)PFAPIENTRY <fltdefs.h>
PfCreateInterface(DWORD dwName,PFFORWARD_ACTION inAction,PFFORWARD_ACTION outAction,WINBOOL bUseLog,WINBOOL bMustBeUnique,INTERFACE_HANDLE * ppInterface)PFAPIENTRY <fltdefs.h>
PfDeleteInterface(INTERFACE_HANDLE pInterface)PFAPIENTRY <fltdefs.h>
PfDeleteLog(VOID)PFAPIENTRY <fltdefs.h>
PFE_EXPORT_FUNC(PBYTE pbData,PVOID pvCallbackContext,ULONG ulLength) typedef DWORD<winbase.h>
PFE_IMPORT_FUNC(PBYTE pbData,PVOID pvCallbackContext,PULONG ulLength) typedef DWORD<winbase.h>
PfGetInterfaceStatistics(INTERFACE_HANDLE pInterface,PPF_INTERFACE_STATS ppfStats,PDWORD pdwBufferSize,WINBOOL fResetCounters)PFAPIENTRY <fltdefs.h>
PFIBER_START_ROUTINE(LPVOID lpFiberParameter) typedef VOID<winbase.h>
PFIND_DEBUG_FILE_CALLBACK(HANDLE FileHandle,PCSTR FileName,PVOID CallerData) typedef WINBOOL<psdk>
PFIND_DEBUG_FILE_CALLBACKW(HANDLE FileHandle,PCWSTR FileName,PVOID CallerData) typedef WINBOOL<psdk>
PFIND_EXE_FILE_CALLBACK(HANDLE FileHandle,PCSTR FileName,PVOID CallerData) typedef WINBOOL<psdk>
PFIND_EXE_FILE_CALLBACKW(HANDLE FileHandle,PCWSTR FileName,PVOID CallerData) typedef WINBOOL<psdk>
PFINDFILEINPATHCALLBACK(PCSTR filename,PVOID context) typedef WINBOOL<psdk>
PFINDFILEINPATHCALLBACKW(PCWSTR filename,PVOID context) typedef WINBOOL<psdk>
PFLS_CALLBACK_FUNCTION(PVOID lpFlsData)typedef VOID<winnt.h>
PfMakeLog(HANDLE hEvent)PFAPIENTRY <fltdefs.h>
PFN()typedef LONG_PTR<winddi.h>
pfn_ADDEREXCLUDEDAPPLICATIONA(LPCSTR)typedef EFaultRepRetVal<errorrep.h>
pfn_ADDEREXCLUDEDAPPLICATIONW(LPCWSTR)typedef EFaultRepRetVal<errorrep.h>
PFN_ALLOCANDFILLDEFUSAGE(const char * pszUsageOID,struct _CRYPT_PROVIDER_DEFUSAGE * psDefUsage) typedef WINBOOL<wintrust.h>
PFN_AUTH_NOTIFY(DWORD_PTR,DWORD,LPVOID) typedef DWORD<wininet.h>
PFN_AUTHENTICATION_CALLBACK(LPVOID pvParam,PBLUETOOTH_DEVICE_INFO pDevice)typedef WINBOOL<bluetoothapis.h>
PFN_AUTHENTICATION_CALLBACK_EX(LPVOID pvParam,PBLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS pAuthCallbackParams)typedef WINBOOL<bluetoothapis.h>
PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PVOID Args,PSID_AND_ATTRIBUTES * pSidAttrArray,PDWORD pSidCount,PSID_AND_ATTRIBUTES * pRestrictedSidAttrArray,PDWORD pRestrictedSidCount) typedef WINBOOL<authz.h>
PFN_AUTHZ_DYNAMIC_ACCESS_CHECK(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PACE_HEADER pAce,PVOID pArgs,PBOOL pbAceApplicable) typedef WINBOOL<authz.h>
PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY(PVOID pCentralAccessPolicy) typedef VOID<authz.h>
PFN_AUTHZ_FREE_DYNAMIC_GROUPS(PSID_AND_ATTRIBUTES pSidAttrArray) typedef VOID<authz.h>
PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY(AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext,PSID capid,PVOID pArgs,PBOOL pCentralAccessPolicyApplicable,PVOID * ppCentralAccessPolicy) typedef WINBOOL<authz.h>
PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK(ULONG uAttribId,LPBYTE pValueStream,ULONG cbStreamSize,LPVOID pvParam)typedef WINBOOL<bluetoothapis.h>
PFN_CANCEL_ASYNC_RETRIEVAL_FUNC(HCRYPTASYNC hAsyncRetrieve) typedef WINBOOL<wincrypt.h>
PFN_CARD_AUTHENTICATE_CHALLENGE(PCARD_DATA pCardData,PBYTE pbResponseData,DWORD cbResponseData,PDWORD pcAttemptsRemaining)typedef DWORD<cardmod.h>
PFN_CARD_AUTHENTICATE_PIN(PCARD_DATA pCardData,LPWSTR pwszUserId,PBYTE pbPin,DWORD cbPin,PDWORD pcAttemptsRemaining)typedef DWORD<cardmod.h>
PFN_CARD_CHANGE_AUTHENTICATOR(PCARD_DATA pCardData,LPWSTR pwszUserId,PBYTE pbCurrentAuthenticator,DWORD cbCurrentAuthenticator,PBYTE pbNewAuthenticator,DWORD cbNewAuthenticator,DWORD cRetryCount,DWORD dwFlags,PDWORD pcAttemptsRemaining)typedef DWORD<cardmod.h>
PFN_CARD_CONSTRUCT_DH_AGREEMENT(PCARD_DATA pCardData,PCARD_DH_AGREEMENT_INFO pAgreementInfo)typedef DWORD<cardmod.h>
PFN_CARD_CREATE_CONTAINER(PCARD_DATA pCardData,BYTE bContainerIndex,DWORD dwFlags,DWORD dwKeySpec,DWORD dwKeySize,PBYTE pbKeyData)typedef DWORD<cardmod.h>
PFN_CARD_CREATE_DIRECTORY(PCARD_DATA pCardData,LPSTR pszDirectory,CARD_DIRECTORY_ACCESS_CONDITION AccessCondition)typedef DWORD<cardmod.h>
PFN_CARD_CREATE_FILE(PCARD_DATA pCardData,LPSTR pszDirectoryName,LPSTR pszFileName,DWORD cbInitialCreationSize,CARD_FILE_ACCESS_CONDITION AccessCondition)typedef DWORD<cardmod.h>
PFN_CARD_DEAUTHENTICATE(PCARD_DATA pCardData,LPWSTR pwszUserId,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CARD_DELETE_CONTAINER(PCARD_DATA pCardData,BYTE bContainerIndex,DWORD dwReserved)typedef DWORD<cardmod.h>
PFN_CARD_DELETE_CONTEXT(PCARD_DATA pCardData)typedef DWORD<cardmod.h>
PFN_CARD_DELETE_DIRECTORY(PCARD_DATA pCardData,LPSTR pszDirectoryName)typedef DWORD<cardmod.h>
PFN_CARD_DELETE_FILE(PCARD_DATA pCardData,LPSTR pszDirectoryName,LPSTR pszFileName,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CARD_DERIVE_KEY(PCARD_DATA pCardData,PCARD_DERIVE_KEY pAgreementInfo)typedef DWORD<cardmod.h>
PFN_CARD_DESTROY_DH_AGREEMENT(PCARD_DATA pCardData,BYTE bSecretAgreementIndex,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CARD_ENUM_FILES(PCARD_DATA pCardData,LPSTR pszDirectoryName,LPSTR * pmszFileNames,LPDWORD pdwcbFileName,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CARD_GET_CHALLENGE(PCARD_DATA pCardData,PBYTE * ppbChallengeData,PDWORD pcbChallengeData)typedef DWORD<cardmod.h>
PFN_CARD_GET_CONTAINER_INFO(PCARD_DATA pCardData,BYTE bContainerIndex,DWORD dwFlags,PCONTAINER_INFO pContainerInfo)typedef DWORD<cardmod.h>
PFN_CARD_GET_FILE_INFO(PCARD_DATA pCardData,LPSTR pszDirectoryName,LPSTR pszFileName,PCARD_FILE_INFO pCardFileInfo)typedef DWORD<cardmod.h>
PFN_CARD_QUERY_CAPABILITIES(PCARD_DATA pCardData,PCARD_CAPABILITIES pCardCapabilities)typedef DWORD<cardmod.h>
PFN_CARD_QUERY_FREE_SPACE(PCARD_DATA pCardData,DWORD dwFlags,PCARD_FREE_SPACE_INFO pCardFreeSpaceInfo)typedef DWORD<cardmod.h>
PFN_CARD_QUERY_KEY_SIZES(PCARD_DATA pCardData,DWORD dwKeySpec,DWORD dwFlags,PCARD_KEY_SIZES pKeySizes)typedef DWORD<cardmod.h>
PFN_CARD_READ_FILE(PCARD_DATA pCardData,LPSTR pszDirectoryName,LPSTR pszFileName,DWORD dwFlags,PBYTE * ppbData,PDWORD pcbData)typedef DWORD<cardmod.h>
PFN_CARD_RSA_DECRYPT(PCARD_DATA pCardData,PCARD_RSA_DECRYPT_INFO pInfo)typedef DWORD<cardmod.h>
PFN_CARD_SIGN_DATA(PCARD_DATA pCardData,PCARD_SIGNING_INFO pInfo)typedef DWORD<cardmod.h>
PFN_CARD_UNBLOCK_PIN(PCARD_DATA pCardData,LPWSTR pwszUserId,PBYTE pbAuthenticationData,DWORD cbAuthenticationData,PBYTE pbNewPinData,DWORD cbNewPinData,DWORD cRetryCount,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CARD_WRITE_FILE(PCARD_DATA pCardData,LPSTR pszDirectoryName,LPSTR pszFileName,DWORD dwFlags,PBYTE pbData,DWORD cbData)typedef DWORD<cardmod.h>
PFN_CDF_PARSE_ERROR_CALLBACK(DWORD,DWORD,WCHAR *)typedef void<mscat.h>
PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK(PCCERT_CONTEXT pCert,void * pvFindArg) typedef WINBOOL<wincrypt.h>
PFN_CERT_CREATE_CONTEXT_SORT_FUNC(DWORD cbTotalEncoded,DWORD cbRemainEncoded,DWORD cEntry,void * pvSort) typedef WINBOOL<wincrypt.h>
PFN_CERT_DLL_OPEN_STORE_PROV_FUNC(LPCSTR lpszStoreProvider,DWORD dwEncodingType,HCRYPTPROV_LEGACY hCryptProv,DWORD dwFlags,const void * pvPara,HCERTSTORE hCertStore,PCERT_STORE_PROV_INFO pStoreProvInfo) typedef WINBOOL<wincrypt.h>
PFN_CERT_ENUM_PHYSICAL_STORE(const void * pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName,PCERT_PHYSICAL_STORE_INFO pStoreInfo,void * pvReserved,void * pvArg) typedef WINBOOL<wincrypt.h>
PFN_CERT_ENUM_SYSTEM_STORE(const void * pvSystemStore,DWORD dwFlags,PCERT_SYSTEM_STORE_INFO pStoreInfo,void * pvReserved,void * pvArg) typedef WINBOOL<wincrypt.h>
PFN_CERT_ENUM_SYSTEM_STORE_LOCATION(LPCWSTR pwszStoreLocation,DWORD dwFlags,void * pvReserved,void * pvArg) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_CLOSE(HCERTSTOREPROV hStoreProv,DWORD dwFlags) typedef void<wincrypt.h>
PFN_CERT_STORE_PROV_CONTROL(HCERTSTOREPROV hStoreProv,DWORD dwFlags,DWORD dwCtrlType,void const * pvCtrlPara) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_DELETE_CERT(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_DELETE_CRL(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_DELETE_CTL(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_FIND_CERT(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCERT_CONTEXT pPrevCertContext,DWORD dwFlags,void ** ppvStoreProvFindInfo,PCCERT_CONTEXT * ppProvCertContext) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_FIND_CRL(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCRL_CONTEXT pPrevCrlContext,DWORD dwFlags,void ** ppvStoreProvFindInfo,PCCRL_CONTEXT * ppProvCrlContext) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_FIND_CTL(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCTL_CONTEXT pPrevCtlContext,DWORD dwFlags,void ** ppvStoreProvFindInfo,PCCTL_CONTEXT * ppProvCtlContext) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_FREE_FIND_CERT(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,void * pvStoreProvFindInfo,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_FREE_FIND_CRL(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,void * pvStoreProvFindInfo,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_FREE_FIND_CTL(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,void * pvStoreProvFindInfo,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_GET_CERT_PROPERTY(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,void * pvData,DWORD * pcbData) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_GET_CRL_PROPERTY(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,void * pvData,DWORD * pcbData) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_GET_CTL_PROPERTY(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,void * pvData,DWORD * pcbData) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_READ_CERT(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pStoreCertContext,DWORD dwFlags,PCCERT_CONTEXT * ppProvCertContext) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_READ_CRL(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pStoreCrlContext,DWORD dwFlags,PCCRL_CONTEXT * ppProvCrlContext) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_READ_CTL(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pStoreCtlContext,DWORD dwFlags,PCCTL_CONTEXT * ppProvCtlContext) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_SET_CERT_PROPERTY(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,const void * pvData) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_SET_CRL_PROPERTY(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,const void * pvData) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_SET_CTL_PROPERTY(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,const void * pvData) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_WRITE_CERT(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_WRITE_CRL(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CERT_STORE_PROV_WRITE_CTL(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwFlags) typedef WINBOOL<wincrypt.h>
PFN_CMSG_ALLOC(size_t cb) typedef void<wincrypt.h>
PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY(PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_CNG_IMPORT_KEY_AGREE(PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_CNG_IMPORT_KEY_TRANS(PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_EXPORT_ENCRYPT_KEY(HCRYPTPROV hCryptProv,HCRYPTKEY hEncryptKey,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,PBYTE pbData,PDWORD pcbData) typedef WINBOOL<wincrypt.h>
PFN_CMSG_EXPORT_KEY_AGREE(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_EXPORT_KEY_TRANS(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_EXPORT_MAIL_LIST(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_FREE(void * pv) typedef void<wincrypt.h>
PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,DWORD dwFlags,void * pvReserved) typedef WINBOOL<wincrypt.h>
PFN_CMSG_GEN_ENCRYPT_KEY(HCRYPTPROV * phCryptProv,PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,PVOID pvEncryptAuxInfo,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,PFN_CMSG_ALLOC pfnAlloc,HCRYPTKEY * phEncryptKey,PBYTE * ppbEncryptParameters,PDWORD pcbEncryptParameters) typedef WINBOOL<wincrypt.h>
PFN_CMSG_IMPORT_ENCRYPT_KEY(HCRYPTPROV hCryptProv,DWORD dwKeySpec,PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,PBYTE pbEncodedKey,DWORD cbEncodedKey,HCRYPTKEY * phEncryptKey) typedef WINBOOL<wincrypt.h>
PFN_CMSG_IMPORT_KEY_AGREE(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,DWORD dwFlags,void * pvReserved,HCRYPTKEY * phContentEncryptKey) typedef WINBOOL<wincrypt.h>
PFN_CMSG_IMPORT_KEY_TRANS(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,DWORD dwFlags,void * pvReserved,HCRYPTKEY * phContentEncryptKey) typedef WINBOOL<wincrypt.h>
PFN_CMSG_IMPORT_MAIL_LIST(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,DWORD dwFlags,void * pvReserved,HCRYPTKEY * phContentEncryptKey) typedef WINBOOL<wincrypt.h>
PFN_CMSG_STREAM_OUTPUT(const void * pvArg,BYTE * pbData,DWORD cbData,WINBOOL fFinal) typedef WINBOOL<wincrypt.h>
PFN_COMPRESS_ALLOCATE(PVOID UserContext,SIZE_T Size) typedef PVOID<compressapi.h>
PFN_COMPRESS_FREE(PVOID UserContext,PVOID Memory) typedef VOID<compressapi.h>
PFN_CPD_ADD_CERT(struct _CRYPT_PROVIDER_DATA * pProvData,DWORD idxSigner,WINBOOL fCounterSigner,DWORD idxCounterSigner,PCCERT_CONTEXT pCert2Add) typedef WINBOOL<wintrust.h>
PFN_CPD_ADD_PRIVDATA(struct _CRYPT_PROVIDER_DATA * pProvData,struct _CRYPT_PROVIDER_PRIVDATA * pPrivData2Add) typedef WINBOOL<wintrust.h>
PFN_CPD_ADD_SGNR(struct _CRYPT_PROVIDER_DATA * pProvData,WINBOOL fCounterSigner,DWORD idxSigner,struct _CRYPT_PROVIDER_SGNR * pSgnr2Add) typedef WINBOOL<wintrust.h>
PFN_CPD_ADD_STORE(struct _CRYPT_PROVIDER_DATA * pProvData,HCERTSTORE hStore2Add) typedef WINBOOL<wintrust.h>
PFN_CPD_MEM_ALLOC(DWORD cbSize) typedef void<wintrust.h>
PFN_CPD_MEM_FREE(void * pvMem2Free) typedef void<wintrust.h>
PFN_CRYPT_ALLOC(size_t cbSize) typedef LPVOID<wincrypt.h>
PFN_CRYPT_ASYNC_PARAM_FREE_FUNC(LPSTR pszParamOid,LPVOID pvParam) typedef VOID<wincrypt.h>
PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC(LPVOID pvCompletion,DWORD dwCompletionCode,LPCSTR pszUrl,LPSTR pszObjectOid,LPVOID pvObject) typedef VOID<wincrypt.h>
PFN_CRYPT_CANCEL_RETRIEVAL(DWORD dwFlags,void * pvArg) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_ENUM_KEYID_PROP(const CRYPT_HASH_BLOB * pKeyIdentifier,DWORD dwFlags,void * pvReserved,void * pvArg,DWORD cProp,DWORD * rgdwPropId,void ** rgpvData,DWORD * rgcbData) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_ENUM_OID_FUNC(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,DWORD cValue,const DWORD rgdwValueType[],LPCWSTR const rgpwszValueName[],const BYTE * const rgpbValueData[],const DWORD rgcbValueData[],void * pvArg) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_ENUM_OID_INFO(PCCRYPT_OID_INFO pInfo,void * pvArg) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC(NCRYPT_KEY_HANDLE hNCryptKey,DWORD dwCertEncodingType,LPSTR pszPublicKeyObjId,DWORD dwFlags,void * pvAuxInfo,PCERT_PUBLIC_KEY_INFO pInfo,DWORD * pcbInfo) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC(BCRYPT_KEY_HANDLE hBCryptKey,DWORD dwCertEncodingType,LPSTR pszPublicKeyObjId,DWORD dwFlags,void * pvAuxInfo,PCERT_PUBLIC_KEY_INFO pInfo,DWORD * pcbInfo) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC(DWORD dwCertEncodingType,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,void ** ppvDecodedSignPara,LPWSTR * ppwszCNGHashAlgid) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_FREE(LPVOID pv) typedef VOID<wincrypt.h>
PFN_CRYPT_GET_SIGNER_CERTIFICATE(void * pvGetArg,DWORD dwCertEncodingType,PCERT_INFO pSignerId,HCERTSTORE hMsgCertStore) typedef PCCERT_CONTEXT<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH(LPVOID pContext,PCERT_NAME_BLOB * rgIdentifierOrNameList,DWORD dwIdentifierOrNameListCount) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE(LPVOID pPluginContext,PBYTE pbData) typedef void<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER(LPVOID pPluginContext,PCRYPT_DATA_BLOB pIdentifier) typedef void<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD(LPVOID pPluginContext,PCWSTR pwszPassword) typedef void<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET(LPVOID pPluginContext,PCRYPT_DATA_BLOB pIdentifier,DWORD dwNameType,PCERT_NAME_BLOB pNameBlob,PBYTE * ppbContent,DWORD * pcbContent,PCWSTR * ppwszPassword,PCRYPT_DATA_BLOB * ppIdentifier) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE(PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush,LPVOID pContext,DWORD * pdwExpectedObjectCount,PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE * ppFuncTable,void ** ppPluginContext) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE(DWORD dwReason,LPVOID pPluginContext) typedef void<wincrypt.h>
PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC(NCRYPT_KEY_HANDLE hKey,DWORD dwCertEncodingType,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,void * pvDecodedSignPara,LPCWSTR pwszCNGPubKeyAlgid,LPCWSTR pwszCNGHashAlgid,BYTE * pbComputedHash,DWORD cbComputedHash,BYTE * pbSignature,DWORD * pcbSignature) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPubKeyInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,void * pvDecodedSignPara,LPCWSTR pwszCNGPubKeyAlgid,LPCWSTR pwszCNGHashAlgid,BYTE * pbComputedHash,DWORD cbComputedHash,BYTE * pbSignature,DWORD cbSignature) typedef WINBOOL<wincrypt.h>
PFN_CRYPT_XML_CREATE_TRANSFORM(const CRYPT_XML_ALGORITHM * pTransform,CRYPT_XML_DATA_PROVIDER * pProviderIn,CRYPT_XML_DATA_PROVIDER * pProviderOut)typedef HRESULT<cryptxml.h>
PFN_CRYPT_XML_DATA_PROVIDER_CLOSE(void * pvCallbackState)typedef HRESULT<cryptxml.h>
PFN_CRYPT_XML_DATA_PROVIDER_READ(void * pvCallbackState,BYTE * pbData,ULONG cbData,ULONG * pcbRead)typedef HRESULT<cryptxml.h>
PFN_CRYPT_XML_WRITE_CALLBACK(void * pvCallbackState,BYTE pbData,ULONG cbData)typedef HRESULT<cryptxml.h>
PFN_CSP_ALLOC(SIZE_T Size)typedef LPVOID<cardmod.h>
PFN_CSP_CACHE_ADD_FILE(PVOID pvCacheContext,LPWSTR wszTag,DWORD dwFlags,PBYTE pbData,DWORD cbData)typedef DWORD<cardmod.h>
PFN_CSP_CACHE_DELETE_FILE(PVOID pvCacheContext,LPWSTR wszTag,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CSP_CACHE_LOOKUP_FILE(PVOID pvCacheContext,LPWSTR wszTag,DWORD dwFlags,PBYTE * ppbData,PDWORD pcbData)typedef DWORD<cardmod.h>
PFN_CSP_FREE(LPVOID Address)typedef VOID<cardmod.h>
PFN_CSP_GET_DH_AGREEMENT(PCARD_DATA pCardData,PVOID hSecretAgreement,BYTE * pbSecretAgreementIndex,DWORD dwFlags)typedef DWORD<cardmod.h>
PFN_CSP_PAD_DATA(PCARD_SIGNING_INFO pSigningInfo,DWORD cbMaxWidth,DWORD * pcbPaddedBuffer,PBYTE * ppbPaddedBuffer)typedef DWORD<cardmod.h>
PFN_CSP_REALLOC(LPVOID Address,SIZE_T Size)typedef LPVOID<cardmod.h>
PFN_D3D11_CREATE_DEVICE(IDXGIAdapter *,D3D_DRIVER_TYPE,HMODULE,UINT,const D3D_FEATURE_LEVEL *,UINT,UINT,ID3D11Device **,D3D_FEATURE_LEVEL *,ID3D11DeviceContext **)typedef HRESULT<d3d11.h>
PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN(IDXGIAdapter *,D3D_DRIVER_TYPE,HMODULE,UINT,const D3D_FEATURE_LEVEL *,UINT,UINT,const DXGI_SWAP_CHAIN_DESC *,IDXGISwapChain **,ID3D11Device **,D3D_FEATURE_LEVEL *,ID3D11DeviceContext **)typedef HRESULT<d3d11.h>
PFN_DEVICE_CALLBACK(LPVOID pvParam,PBLUETOOTH_DEVICE_INFO pDevice)typedef WINBOOL<bluetoothapis.h>
PFN_DIAL_HANDLER(HWND,LPCSTR,DWORD,LPDWORD) typedef DWORD<wininet.h>
PFN_EXPORT_PRIV_KEY_FUNC(HCRYPTPROV hCryptProv,DWORD dwKeySpec,LPSTR pszPrivateKeyObjId,DWORD dwFlags,void * pvAuxInfo,CRYPT_PRIVATE_KEY_INFO * pPrivateKeyInfo,DWORD * pcbPrivateKeyInfo) typedef WINBOOL<wincrypt.h>
PFN_FREE_ENCODED_OBJECT_FUNC(LPCSTR pszObjectOid,PCRYPT_BLOB_ARRAY pObject,LPVOID pvFreeContext) typedef VOID<wincrypt.h>
PFN_FREEDEFUSAGE(const char * pszUsageOID,struct _CRYPT_PROVIDER_DEFUSAGE * psDefUsage) typedef WINBOOL<wintrust.h>
PFN_GETEXTENSIONVERSION(HSE_VERSION_INFO * pVer) typedef WINBOOL<httpext.h>
PFN_HSE_CACHE_INVALIDATION_CALLBACK(WCHAR * pszUrl) typedef HRESULT<httpext.h>
PFN_HSE_IO_COMPLETION(EXTENSION_CONTROL_BLOCK * pECB,PVOID pContext,DWORD cbIO,DWORD dwError) typedef VOID<httpext.h>
PFN_HTTPEXTENSIONPROC(EXTENSION_CONTROL_BLOCK * pECB) typedef DWORD<httpext.h>
PFN_IMPORT_PRIV_KEY_FUNC(HCRYPTPROV hCryptProv,CRYPT_PRIVATE_KEY_INFO * pPrivateKeyInfo,DWORD dwFlags,void * pvAuxInfo) typedef WINBOOL<wincrypt.h>
PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,DWORD dwFlags,void * pvAuxInfo,BCRYPT_KEY_HANDLE * phKey) typedef WINBOOL<wincrypt.h>
PFN_IO_COMPLETION(struct FIO_CONTEXT * pContext,struct FH_OVERLAPPED * lpo,DWORD cb,DWORD dwCompletionStatus) typedef VOID<filehc.h>
PFN_MAPPINGCALLBACKPROC(MAPPING_PROPERTY_BAG * pBag,LPVOID data,DWORD dwDataSize,HRESULT Result)typedef void<elscore.h>
PFN_NCRYPT_ALLOC(SIZE_T cbSize) typedef LPVOID<ncrypt.h>
PFN_NCRYPT_FREE(LPVOID pv) typedef VOID<ncrypt.h>
PFN_PROVIDER_CERTCHKPOLICY_CALL(struct _CRYPT_PROVIDER_DATA * pProvData,DWORD idxSigner,WINBOOL fCounterSignerChain,DWORD idxCounterSigner) typedef WINBOOL<wintrust.h>
PFN_PROVIDER_CERTTRUST_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVIDER_CLEANUP_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVIDER_FINALPOLICY_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVIDER_INIT_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVIDER_OBJTRUST_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVIDER_SIGTRUST_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVIDER_TESTFINALPOLICY_CALL(struct _CRYPT_PROVIDER_DATA * pProvData) typedef HRESULT<wintrust.h>
PFN_PROVUI_CALL(HWND hWndSecurityDialog,struct _CRYPT_PROVIDER_DATA * pProvData) typedef WINBOOL<wintrust.h>
pfn_REPORTFAULT(LPEXCEPTION_POINTERS,DWORD)typedef EFaultRepRetVal<errorrep.h>
PFN_SC_NOTIFY_CALLBACK(PVOID pParameter)typedef VOID<winsvc.h>
PFN_TERMINATEEXTENSION(DWORD dwFlags) typedef WINBOOL<httpext.h>
PFN_WdsCliCallback(DWORD dwMessageId,WPARAM wParam,LPARAM lParam,PVOID pvUserData)typedef VOID<wdsclientapi.h>
PFN_WdsCliTraceFunction(LPCWSTR pwszFormat,va_list Params)typedef VOID<wdsclientapi.h>
PFN_WdsTransportClientReceiveContents(HANDLE hSessionKey,PVOID pCallerData,PVOID pMetadata,ULONG ulSize,PULARGE_INTEGER pContentOffset)typedef VOID<wdstci.h>
PFN_WdsTransportClientReceiveMetadata(HANDLE hSessionKey,PVOID pCallerData,PVOID pMetadata,ULONG ulSize)typedef VOID<wdstci.h>
PFN_WdsTransportClientSessionComplete(HANDLE hSessionKey,PVOID pCallerData,DWORD dwError)typedef VOID<wdstci.h>
PFN_WdsTransportClientSessionStart(HANDLE hSessionKey,PVOID pCallerData,PULARGE_INTEGER FileSize)typedef VOID<wdstci.h>
PFN_WdsTransportClientSessionStartEx(HANDLE hSessionKey,PVOID pCallerData,PTRANSPORTCLIENT_SESSION_INFO Info)typedef VOID<wdstci.h>
PFN_WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH(PVOID pContext,const PWER_RUNTIME_EXCEPTION_INFORMATION pExceptionInformation,PBOOL pbIsCustomDebugger,PWSTR pwszDebuggerLaunch,PDWORD pchDebuggerLaunch,PBOOL pbIsDebuggerAutolaunch)typedef HRESULT<werapi.h>
PFN_WER_RUNTIME_EXCEPTION_EVENT(PVOID pContext,const PWER_RUNTIME_EXCEPTION_INFORMATION pExceptionInformation,WINBOOL * pbOwnershipClaimed,PWSTR pwszEventName,PDWORD pchSize,PDWORD pdwSignatureCount)typedef HRESULT<werapi.h>
PFN_WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE(PVOID pContext,const PWER_RUNTIME_EXCEPTION_INFORMATION pExceptionInformation,DWORD dwIndex,PWSTR pwszName,PDWORD pchName,PWSTR pwszValue,PDWORD pchValue)typedef HRESULT<werapi.h>
PFN_WPPBINDTOSITEA(HWND hwnd,LPCSTR sSiteName,LPCSTR sURL,REFIID riid,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk)typedef HRESULT<wpspihlp.h>
PFN_WPPBINDTOSITEW(HWND hwnd,LPCWSTR sSiteName,LPCWSTR sURL,REFIID riid,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk)typedef HRESULT<wpspihlp.h>
PFN_WPPDELETESITEA(LPCSTR sSiteName)typedef HRESULT<wpspihlp.h>
PFN_WPPDELETESITEW(LPCWSTR sSiteName)typedef HRESULT<wpspihlp.h>
PFN_WPPLISTSITESA(LPDWORD pdwSitesBufLen,LPWPSITEINFOA pSitesBuffer,LPDWORD pdwNumSites)typedef HRESULT<wpspihlp.h>
PFN_WPPLISTSITESW(LPDWORD pdwSitesBufLen,LPWPSITEINFOW pSitesBuffer,LPDWORD pdwNumSites)typedef HRESULT<wpspihlp.h>
PFN_WTD_GENERIC_CHAIN_POLICY_CALLBACK(PCRYPT_PROVIDER_DATA pProvData,DWORD dwStepError,DWORD dwRegPolicySettings,DWORD cSigner,PWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO * rgpSigner,void * pvPolicyArg) typedef HRESULT<softpub.h>
PFNALLOC(ULONG cb) typedef void<fdi.h>
PFNALLOCATOR_ALLOCATEFRAME(PFILE_OBJECT FileObject,PVOID * Frame)typedef NTSTATUS<ks.h>
PFNALLOCATOR_FREEFRAME(PFILE_OBJECT FileObject,PVOID Frame)typedef VOID<ks.h>
PFNCALLBACK(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2) typedef HDDEDATA<ddeml.h>
PFNCANSHAREFOLDERW(PCWSTR pszPath) typedef HRESULT<shellapi.h>
PFNCFILTERPROC(PCCERT_CONTEXT pCertContext,WINBOOL * pfInitialSelectedCert,void * pvCallbackData) typedef WINBOOL<cryptuiapi.h>
PFNCLOSE(INT_PTR hf) typedef int<fdi.h>
PFNCONTEXTCALL(ComCallData * pParam) typedef HRESULT<ctxtcall.h>
PFNCREATEINSTANCE(OUT PUNKNOWN * Unknown,IN REFCLSID ClassId,IN PUNKNOWN OuterUnknown,IN POOL_TYPE PoolType)typedef HRESULT<unknown.h>
PFNCREATETERM(CComPtr<IMoniker> pMoniker,MSP_HANDLE htAddress,ITTerminal ** pTerm)typedef HRESULT<mspaddr.h>
PFNDACOMPARE(void * p1,void * p2,LPARAM lParam) typedef int<commctrl.h>
PFNDACOMPARECONST(const void * p1,const void * p2,LPARAM lParam) typedef int<commctrl.h>
PFNDAENUMCALLBACK(void * p,void * pData) typedef int<commctrl.h>
PFNDAENUMCALLBACKCONST(const void * p,void * pData) typedef int<commctrl.h>
PFNDAVAUTHCALLBACK(LPWSTR lpwzServerName,LPWSTR lpwzRemoteName,DWORD dwAuthScheme,DWORD dwFlags,PDAV_CALLBACK_CRED pCallbackCred,AUTHNEXTSTEP * NextStep,PFNDAVAUTHCALLBACK_FREECRED * pFreeCred)typedef DWORD<davclnt.h>
PFNDAVAUTHCALLBACK_FREECRED(PVOID pbuffer)typedef DWORD<davclnt.h>
PFNDEREFERENCEDEVICEOBJECT(PVOID Context)typedef VOID<ks.h>
PfnDliHook(unsigned dliNotify,PDelayLoadInfo pdli)typedef FARPROC<delayimp.h>
PFNDPAMERGE(UINT uMsg,void * pvDest,void * pvSrc,LPARAM lParam) typedef void<commctrl.h>
PFNDPAMERGECONST(UINT uMsg,const void * pvDest,const void * pvSrc,LPARAM lParam) typedef const void<commctrl.h>
PFNDPASTREAM(DPASTREAMINFO * pinfo,struct IStream * pstream,void * pvInstData) typedef HRESULT<commctrl.h>
PFNDPNMESSAGEHANDLER(PVOID,DWORD,PVOID)typedef HRESULT<dplay8.h>
PFNFCIALLOC(ULONG cb) typedef void<fci.h>
PFNFCICLOSE(INT_PTR hf,int * err,void * pv) typedef int<fci.h>
PFNFCIDELETE(char * pszFile,int * err,void * pv) typedef int<fci.h>
PFNFCIFILEPLACED(PCCAB pccab,char * pszFile,__LONG32 cbFile,WINBOOL fContinuation,void * pv) typedef int<fci.h>
PFNFCIFREE(void * memory) typedef void<fci.h>
PFNFCIGETNEXTCABINET(PCCAB pccab,ULONG cbPrevCab,void * pv) typedef WINBOOL<fci.h>
PFNFCIGETOPENINFO(char * pszName,USHORT * pdate,USHORT * ptime,USHORT * pattribs,int * err,void * pv) typedef INT_PTR<fci.h>
PFNFCIGETTEMPFILE(char * pszTempName,int cbTempName,void * pv) typedef WINBOOL<fci.h>
PFNFCIOPEN(char * pszFile,int oflag,int pmode,int * err,void * pv) typedef INT_PTR<fci.h>
PFNFCIREAD(INT_PTR hf,void * memory,UINT cb,int * err,void * pv) typedef UINT<fci.h>
PFNFCISEEK(INT_PTR hf,__LONG32 dist,int seektype,int * err,void * pv) typedef __LONG32<fci.h>
PFNFCISTATUS(UINT typeStatus,ULONG cb1,ULONG cb2,void * pv) typedef __LONG32<fci.h>
PFNFCIWRITE(INT_PTR hf,void * memory,UINT cb,int * err,void * pv) typedef UINT<fci.h>
PFNFDIDECRYPT(PFDIDECRYPT pfdid) typedef int<fdi.h>
PFNFDINOTIFY(FDINOTIFICATIONTYPE fdint,PFDINOTIFICATION pfdin) typedef INT_PTR<fdi.h>
PFNFILLTEXTBUFFER(struct tagTEXT_SOURCE * pTextSource) typedef HRESULT<indexsrv.h>
PFNFREE(void * pv) typedef void<fdi.h>
PFNGENERATEGROUPPOLICY(DWORD dwFlags,WINBOOL * pbAbort,WCHAR * pwszSite,PRSOP_TARGET pComputerTarget,PRSOP_TARGET pUserTarget) typedef DWORD<userenv.h>
PFNGETACTIVATIONFACTORY(HSTRING,IActivationFactory **)typedef HRESULT<roapi.h>
PFNGETPROFILEPATHA(LPCSTR pszUsername,LPSTR pszBuffer,UINT cbBuffer) typedef UINT<winnetwk.h>
PFNGETPROFILEPATHW(LPCWSTR pszUsername,LPWSTR pszBuffer,UINT cbBuffer) typedef UINT<winnetwk.h>
PFNGLACCUMXOESPROC(GLenum op,GLfixed value)typedef void<glext.h>
PFNGLACTIVEPROGRAMEXTPROC(GLuint program)typedef void<glext.h>
PFNGLACTIVESHADERPROGRAMPROC(GLuint pipeline,GLuint program)typedef void<glext.h>
PFNGLACTIVESTENCILFACEEXTPROC(GLenum face)typedef void<glext.h>
PFNGLACTIVETEXTUREARBPROC(GLenum texture)typedef void<glext.h>
PFNGLACTIVETEXTUREPROC(GLenum texture)typedef void<glext.h>
PFNGLACTIVEVARYINGNVPROC(GLuint program,const GLchar * name)typedef void<glext.h>
PFNGLADDSWAPHINTRECTWINPROC(GLint x,GLint y,GLsizei width,GLsizei height)typedef void<gl.h>
PFNGLALPHAFRAGMENTOP1ATIPROC(GLenum op,GLuint dst,GLuint dstMod,GLuint arg1,GLuint arg1Rep,GLuint arg1Mod)typedef void<glext.h>
PFNGLALPHAFRAGMENTOP2ATIPROC(GLenum op,GLuint dst,GLuint dstMod,GLuint arg1,GLuint arg1Rep,GLuint arg1Mod,GLuint arg2,GLuint arg2Rep,GLuint arg2Mod)typedef void<glext.h>
PFNGLALPHAFRAGMENTOP3ATIPROC(GLenum op,GLuint dst,GLuint dstMod,GLuint arg1,GLuint arg1Rep,GLuint arg1Mod,GLuint arg2,GLuint arg2Rep,GLuint arg2Mod,GLuint arg3,GLuint arg3Rep,GLuint arg3Mod)typedef void<glext.h>
PFNGLALPHAFUNCXOESPROC(GLenum func,GLfixed ref)typedef void<glext.h>
PFNGLAPPLYTEXTUREEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLAREPROGRAMSRESIDENTNVPROC(GLsizei n,const GLuint * programs,GLboolean * residences)typedef GLboolean<glext.h>
PFNGLARETEXTURESRESIDENTEXTPROC(GLsizei n,const GLuint * textures,GLboolean * residences)typedef GLboolean<glext.h>
PFNGLARRAYELEMENTARRAYEXTPROC(GLenum mode,GLsizei count,const GLvoid * pi)typedef void<gl.h>
PFNGLARRAYELEMENTEXTPROC(GLint i)typedef void<glext.h>
PFNGLARRAYOBJECTATIPROC(GLenum array,GLint size,GLenum type,GLsizei stride,GLuint buffer,GLuint offset)typedef void<glext.h>
PFNGLASYNCMARKERSGIXPROC(GLuint marker)typedef void<glext.h>
PFNGLATTACHOBJECTARBPROC(GLhandleARB containerObj,GLhandleARB obj)typedef void<glext.h>
PFNGLATTACHSHADERPROC(GLuint program,GLuint shader)typedef void<glext.h>
PFNGLBEGINCONDITIONALRENDERNVPROC(GLuint id,GLenum mode)typedef void<glext.h>
PFNGLBEGINCONDITIONALRENDERNVXPROC(GLuint id)typedef void<glext.h>
PFNGLBEGINCONDITIONALRENDERPROC(GLuint id,GLenum mode)typedef void<glext.h>
PFNGLBEGINFRAGMENTSHADERATIPROC(void)typedef void<glext.h>
PFNGLBEGINOCCLUSIONQUERYNVPROC(GLuint id)typedef void<glext.h>
PFNGLBEGINPERFMONITORAMDPROC(GLuint monitor)typedef void<glext.h>
PFNGLBEGINPERFQUERYINTELPROC(GLuint queryHandle)typedef void<glext.h>
PFNGLBEGINQUERYARBPROC(GLenum target,GLuint id)typedef void<glext.h>
PFNGLBEGINQUERYINDEXEDPROC(GLenum target,GLuint index,GLuint id)typedef void<glext.h>
PFNGLBEGINQUERYPROC(GLenum target,GLuint id)typedef void<glext.h>
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC(GLenum primitiveMode)typedef void<glext.h>
PFNGLBEGINTRANSFORMFEEDBACKNVPROC(GLenum primitiveMode)typedef void<glext.h>
PFNGLBEGINTRANSFORMFEEDBACKPROC(GLenum primitiveMode)typedef void<glext.h>
PFNGLBEGINVERTEXSHADEREXTPROC(void)typedef void<glext.h>
PFNGLBEGINVIDEOCAPTURENVPROC(GLuint video_capture_slot)typedef void<glext.h>
PFNGLBINDATTRIBLOCATIONARBPROC(GLhandleARB programObj,GLuint index,const GLcharARB * name)typedef void<glext.h>
PFNGLBINDATTRIBLOCATIONPROC(GLuint program,GLuint index,const GLchar * name)typedef void<glext.h>
PFNGLBINDBUFFERARBPROC(GLenum target,GLuint buffer)typedef void<glext.h>
PFNGLBINDBUFFERBASEEXTPROC(GLenum target,GLuint index,GLuint buffer)typedef void<glext.h>
PFNGLBINDBUFFERBASENVPROC(GLenum target,GLuint index,GLuint buffer)typedef void<glext.h>
PFNGLBINDBUFFERBASEPROC(GLenum target,GLuint index,GLuint buffer)typedef void<glext.h>
PFNGLBINDBUFFEROFFSETEXTPROC(GLenum target,GLuint index,GLuint buffer,GLintptr offset)typedef void<glext.h>
PFNGLBINDBUFFEROFFSETNVPROC(GLenum target,GLuint index,GLuint buffer,GLintptr offset)typedef void<glext.h>
PFNGLBINDBUFFERPROC(GLenum target,GLuint buffer)typedef void<glext.h>
PFNGLBINDBUFFERRANGEEXTPROC(GLenum target,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size)typedef void<glext.h>
PFNGLBINDBUFFERRANGENVPROC(GLenum target,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size)typedef void<glext.h>
PFNGLBINDBUFFERRANGEPROC(GLenum target,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size)typedef void<glext.h>
PFNGLBINDBUFFERSBASEPROC(GLenum target,GLuint first,GLsizei count,const GLuint * buffers)typedef void<glext.h>
PFNGLBINDBUFFERSRANGEPROC(GLenum target,GLuint first,GLsizei count,const GLuint * buffers,const GLintptr * offsets,const GLsizeiptr * sizes)typedef void<glext.h>
PFNGLBINDFRAGDATALOCATIONEXTPROC(GLuint program,GLuint color,const GLchar * name)typedef void<glext.h>
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC(GLuint program,GLuint colorNumber,GLuint index,const GLchar * name)typedef void<glext.h>
PFNGLBINDFRAGDATALOCATIONPROC(GLuint program,GLuint color,const GLchar * name)typedef void<glext.h>
PFNGLBINDFRAGMENTSHADERATIPROC(GLuint id)typedef void<glext.h>
PFNGLBINDFRAMEBUFFEREXTPROC(GLenum target,GLuint framebuffer)typedef void<glext.h>
PFNGLBINDFRAMEBUFFERPROC(GLenum target,GLuint framebuffer)typedef void<glext.h>
PFNGLBINDIMAGETEXTUREEXTPROC(GLuint index,GLuint texture,GLint level,GLboolean layered,GLint layer,GLenum access,GLint format)typedef void<glext.h>
PFNGLBINDIMAGETEXTUREPROC(GLuint unit,GLuint texture,GLint level,GLboolean layered,GLint layer,GLenum access,GLenum format)typedef void<glext.h>
PFNGLBINDIMAGETEXTURESPROC(GLuint first,GLsizei count,const GLuint * textures)typedef void<glext.h>
PFNGLBINDLIGHTPARAMETEREXTPROC(GLenum light,GLenum value)typedef GLuint<glext.h>
PFNGLBINDMATERIALPARAMETEREXTPROC(GLenum face,GLenum value)typedef GLuint<glext.h>
PFNGLBINDMULTITEXTUREEXTPROC(GLenum texunit,GLenum target,GLuint texture)typedef void<glext.h>
PFNGLBINDPARAMETEREXTPROC(GLenum value)typedef GLuint<glext.h>
PFNGLBINDPROGRAMARBPROC(GLenum target,GLuint program)typedef void<glext.h>
PFNGLBINDPROGRAMNVPROC(GLenum target,GLuint id)typedef void<glext.h>
PFNGLBINDPROGRAMPIPELINEPROC(GLuint pipeline)typedef void<glext.h>
PFNGLBINDRENDERBUFFEREXTPROC(GLenum target,GLuint renderbuffer)typedef void<glext.h>
PFNGLBINDRENDERBUFFERPROC(GLenum target,GLuint renderbuffer)typedef void<glext.h>
PFNGLBINDSAMPLERPROC(GLuint unit,GLuint sampler)typedef void<glext.h>
PFNGLBINDSAMPLERSPROC(GLuint first,GLsizei count,const GLuint * samplers)typedef void<glext.h>
PFNGLBINDTEXGENPARAMETEREXTPROC(GLenum unit,GLenum coord,GLenum value)typedef GLuint<glext.h>
PFNGLBINDTEXTUREEXTPROC(GLenum target,GLuint texture)typedef void<glext.h>
PFNGLBINDTEXTUREPROC(GLenum target,GLuint texture)typedef void<glcorearb.h>
PFNGLBINDTEXTURESPROC(GLuint first,GLsizei count,const GLuint * textures)typedef void<glext.h>
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC(GLenum unit,GLenum value)typedef GLuint<glext.h>
PFNGLBINDTEXTUREUNITPROC(GLuint unit,GLuint texture)typedef void<glext.h>
PFNGLBINDTRANSFORMFEEDBACKNVPROC(GLenum target,GLuint id)typedef void<glext.h>
PFNGLBINDTRANSFORMFEEDBACKPROC(GLenum target,GLuint id)typedef void<glext.h>
PFNGLBINDVERTEXARRAYAPPLEPROC(GLuint array)typedef void<glext.h>
PFNGLBINDVERTEXARRAYPROC(GLuint array)typedef void<glext.h>
PFNGLBINDVERTEXBUFFERPROC(GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride)typedef void<glext.h>
PFNGLBINDVERTEXBUFFERSPROC(GLuint first,GLsizei count,const GLuint * buffers,const GLintptr * offsets,const GLsizei * strides)typedef void<glext.h>
PFNGLBINDVERTEXSHADEREXTPROC(GLuint id)typedef void<glext.h>
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC(GLuint video_capture_slot,GLuint stream,GLenum frame_region,GLintptrARB offset)typedef void<glext.h>
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC(GLuint video_capture_slot,GLuint stream,GLenum frame_region,GLenum target,GLuint texture)typedef void<glext.h>
PFNGLBINORMAL3BEXTPROC(GLbyte bx,GLbyte by,GLbyte bz)typedef void<glext.h>
PFNGLBINORMAL3BVEXTPROC(const GLbyte * v)typedef void<glext.h>
PFNGLBINORMAL3DEXTPROC(GLdouble bx,GLdouble by,GLdouble bz)typedef void<glext.h>
PFNGLBINORMAL3DVEXTPROC(const GLdouble * v)typedef void<glext.h>
PFNGLBINORMAL3FEXTPROC(GLfloat bx,GLfloat by,GLfloat bz)typedef void<glext.h>
PFNGLBINORMAL3FVEXTPROC(const GLfloat * v)typedef void<glext.h>
PFNGLBINORMAL3IEXTPROC(GLint bx,GLint by,GLint bz)typedef void<glext.h>
PFNGLBINORMAL3IVEXTPROC(const GLint * v)typedef void<glext.h>
PFNGLBINORMAL3SEXTPROC(GLshort bx,GLshort by,GLshort bz)typedef void<glext.h>
PFNGLBINORMAL3SVEXTPROC(const GLshort * v)typedef void<glext.h>
PFNGLBINORMALPOINTEREXTPROC(GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLBITMAPXOESPROC(GLsizei width,GLsizei height,GLfixed xorig,GLfixed yorig,GLfixed xmove,GLfixed ymove,const GLubyte * bitmap)typedef void<glext.h>
PFNGLBLENDBARRIERKHRPROC(void)typedef void<glext.h>
PFNGLBLENDBARRIERNVPROC(void)typedef void<glext.h>
PFNGLBLENDCOLOREXTPROC(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)typedef void<glext.h>
PFNGLBLENDCOLORPROC(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)typedef void<glext.h>
PFNGLBLENDCOLORXOESPROC(GLfixed red,GLfixed green,GLfixed blue,GLfixed alpha)typedef void<glext.h>
PFNGLBLENDEQUATIONEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLBLENDEQUATIONIARBPROC(GLuint buf,GLenum mode)typedef void<glext.h>
PFNGLBLENDEQUATIONINDEXEDAMDPROC(GLuint buf,GLenum mode)typedef void<glext.h>
PFNGLBLENDEQUATIONIPROC(GLuint buf,GLenum mode)typedef void<glext.h>
PFNGLBLENDEQUATIONPROC(GLenum mode)typedef void<glext.h>
PFNGLBLENDEQUATIONSEPARATEEXTPROC(GLenum modeRGB,GLenum modeAlpha)typedef void<glext.h>
PFNGLBLENDEQUATIONSEPARATEIARBPROC(GLuint buf,GLenum modeRGB,GLenum modeAlpha)typedef void<glext.h>
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC(GLuint buf,GLenum modeRGB,GLenum modeAlpha)typedef void<glext.h>
PFNGLBLENDEQUATIONSEPARATEIPROC(GLuint buf,GLenum modeRGB,GLenum modeAlpha)typedef void<glext.h>
PFNGLBLENDEQUATIONSEPARATEPROC(GLenum modeRGB,GLenum modeAlpha)typedef void<glext.h>
PFNGLBLENDFUNCIARBPROC(GLuint buf,GLenum src,GLenum dst)typedef void<glext.h>
PFNGLBLENDFUNCINDEXEDAMDPROC(GLuint buf,GLenum src,GLenum dst)typedef void<glext.h>
PFNGLBLENDFUNCIPROC(GLuint buf,GLenum src,GLenum dst)typedef void<glext.h>
PFNGLBLENDFUNCPROC(GLenum sfactor,GLenum dfactor)typedef void<glcorearb.h>
PFNGLBLENDFUNCSEPARATEEXTPROC(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)typedef void<glext.h>
PFNGLBLENDFUNCSEPARATEIARBPROC(GLuint buf,GLenum srcRGB,GLenum dstRGB,GLenum srcAlpha,GLenum dstAlpha)typedef void<glext.h>
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC(GLuint buf,GLenum srcRGB,GLenum dstRGB,GLenum srcAlpha,GLenum dstAlpha)typedef void<glext.h>
PFNGLBLENDFUNCSEPARATEINGRPROC(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)typedef void<glext.h>
PFNGLBLENDFUNCSEPARATEIPROC(GLuint buf,GLenum srcRGB,GLenum dstRGB,GLenum srcAlpha,GLenum dstAlpha)typedef void<glext.h>
PFNGLBLENDFUNCSEPARATEPROC(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)typedef void<glext.h>
PFNGLBLENDPARAMETERINVPROC(GLenum pname,GLint value)typedef void<glext.h>
PFNGLBLITFRAMEBUFFEREXTPROC(GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)typedef void<glext.h>
PFNGLBLITFRAMEBUFFERPROC(GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)typedef void<glext.h>
PFNGLBLITNAMEDFRAMEBUFFERPROC(GLuint readFramebuffer,GLuint drawFramebuffer,GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)typedef void<glext.h>
PFNGLBUFFERADDRESSRANGENVPROC(GLenum pname,GLuint index,GLuint64EXT address,GLsizeiptr length)typedef void<glext.h>
PFNGLBUFFERDATAARBPROC(GLenum target,GLsizeiptrARB size,const void * data,GLenum usage)typedef void<glext.h>
PFNGLBUFFERDATAPROC(GLenum target,GLsizeiptr size,const void * data,GLenum usage)typedef void<glext.h>
PFNGLBUFFERPAGECOMMITMENTARBPROC(GLenum target,GLintptr offset,GLsizeiptr size,GLboolean commit)typedef void<glext.h>
PFNGLBUFFERPARAMETERIAPPLEPROC(GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLBUFFERSTORAGEPROC(GLenum target,GLsizeiptr size,const void * data,GLbitfield flags)typedef void<glext.h>
PFNGLBUFFERSUBDATAARBPROC(GLenum target,GLintptrARB offset,GLsizeiptrARB size,const void * data)typedef void<glext.h>
PFNGLBUFFERSUBDATAPROC(GLenum target,GLintptr offset,GLsizeiptr size,const void * data)typedef void<glext.h>
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC(GLenum target)typedef GLenum<glext.h>
PFNGLCHECKFRAMEBUFFERSTATUSPROC(GLenum target)typedef GLenum<glext.h>
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC(GLuint framebuffer,GLenum target)typedef GLenum<glext.h>
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC(GLuint framebuffer,GLenum target)typedef GLenum<glext.h>
PFNGLCLAMPCOLORARBPROC(GLenum target,GLenum clamp)typedef void<glext.h>
PFNGLCLAMPCOLORPROC(GLenum target,GLenum clamp)typedef void<glext.h>
PFNGLCLEARACCUMXOESPROC(GLfixed red,GLfixed green,GLfixed blue,GLfixed alpha)typedef void<glext.h>
PFNGLCLEARBUFFERDATAPROC(GLenum target,GLenum internalformat,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARBUFFERFIPROC(GLenum buffer,GLint drawbuffer,GLfloat depth,GLint stencil)typedef void<glext.h>
PFNGLCLEARBUFFERFVPROC(GLenum buffer,GLint drawbuffer,const GLfloat * value)typedef void<glext.h>
PFNGLCLEARBUFFERIVPROC(GLenum buffer,GLint drawbuffer,const GLint * value)typedef void<glext.h>
PFNGLCLEARBUFFERSUBDATAPROC(GLenum target,GLenum internalformat,GLintptr offset,GLsizeiptr size,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARBUFFERUIVPROC(GLenum buffer,GLint drawbuffer,const GLuint * value)typedef void<glext.h>
PFNGLCLEARCOLORIIEXTPROC(GLint red,GLint green,GLint blue,GLint alpha)typedef void<glext.h>
PFNGLCLEARCOLORIUIEXTPROC(GLuint red,GLuint green,GLuint blue,GLuint alpha)typedef void<glext.h>
PFNGLCLEARCOLORPROC(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)typedef void<glcorearb.h>
PFNGLCLEARCOLORXOESPROC(GLfixed red,GLfixed green,GLfixed blue,GLfixed alpha)typedef void<glext.h>
PFNGLCLEARDEPTHDNVPROC(GLdouble depth)typedef void<glext.h>
PFNGLCLEARDEPTHFOESPROC(GLclampf depth)typedef void<glext.h>
PFNGLCLEARDEPTHFPROC(GLfloat d)typedef void<glext.h>
PFNGLCLEARDEPTHPROC(GLdouble depth)typedef void<glcorearb.h>
PFNGLCLEARDEPTHXOESPROC(GLfixed depth)typedef void<glext.h>
PFNGLCLEARNAMEDBUFFERDATAEXTPROC(GLuint buffer,GLenum internalformat,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARNAMEDBUFFERDATAPROC(GLuint buffer,GLenum internalformat,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC(GLuint buffer,GLenum internalformat,GLsizeiptr offset,GLsizeiptr size,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARNAMEDBUFFERSUBDATAPROC(GLuint buffer,GLenum internalformat,GLintptr offset,GLsizei size,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC(GLuint framebuffer,GLenum buffer,const GLfloat depth,GLint stencil)typedef void<glext.h>
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC(GLuint framebuffer,GLenum buffer,GLint drawbuffer,const GLfloat * value)typedef void<glext.h>
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC(GLuint framebuffer,GLenum buffer,GLint drawbuffer,const GLint * value)typedef void<glext.h>
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC(GLuint framebuffer,GLenum buffer,GLint drawbuffer,const GLuint * value)typedef void<glext.h>
PFNGLCLEARPROC(GLbitfield mask)typedef void<glcorearb.h>
PFNGLCLEARSTENCILPROC(GLint s)typedef void<glcorearb.h>
PFNGLCLEARTEXIMAGEPROC(GLuint texture,GLint level,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLEARTEXSUBIMAGEPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCLIENTACTIVETEXTUREARBPROC(GLenum texture)typedef void<glext.h>
PFNGLCLIENTACTIVETEXTUREPROC(GLenum texture)typedef void<glext.h>
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC(GLenum stream)typedef void<glext.h>
PFNGLCLIENTATTRIBDEFAULTEXTPROC(GLbitfield mask)typedef void<glext.h>
PFNGLCLIENTWAITSYNCPROC(GLsync sync,GLbitfield flags,GLuint64 timeout)typedef GLenum<glext.h>
PFNGLCLIPCONTROLPROC(GLenum origin,GLenum depth)typedef void<glext.h>
PFNGLCLIPPLANEFOESPROC(GLenum plane,const GLfloat * equation)typedef void<glext.h>
PFNGLCLIPPLANEXOESPROC(GLenum plane,const GLfixed * equation)typedef void<glext.h>
PFNGLCOLOR3FVERTEX3FSUNPROC(GLfloat r,GLfloat g,GLfloat b,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLCOLOR3FVERTEX3FVSUNPROC(const GLfloat * c,const GLfloat * v)typedef void<glext.h>
PFNGLCOLOR3HNVPROC(GLhalfNV red,GLhalfNV green,GLhalfNV blue)typedef void<glext.h>
PFNGLCOLOR3HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLCOLOR3XOESPROC(GLfixed red,GLfixed green,GLfixed blue)typedef void<glext.h>
PFNGLCOLOR3XVOESPROC(const GLfixed * components)typedef void<glext.h>
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC(GLfloat r,GLfloat g,GLfloat b,GLfloat a,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC(const GLfloat * c,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLCOLOR4HNVPROC(GLhalfNV red,GLhalfNV green,GLhalfNV blue,GLhalfNV alpha)typedef void<glext.h>
PFNGLCOLOR4HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLCOLOR4UBVERTEX2FSUNPROC(GLubyte r,GLubyte g,GLubyte b,GLubyte a,GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLCOLOR4UBVERTEX2FVSUNPROC(const GLubyte * c,const GLfloat * v)typedef void<glext.h>
PFNGLCOLOR4UBVERTEX3FSUNPROC(GLubyte r,GLubyte g,GLubyte b,GLubyte a,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLCOLOR4UBVERTEX3FVSUNPROC(const GLubyte * c,const GLfloat * v)typedef void<glext.h>
PFNGLCOLOR4XOESPROC(GLfixed red,GLfixed green,GLfixed blue,GLfixed alpha)typedef void<glext.h>
PFNGLCOLOR4XVOESPROC(const GLfixed * components)typedef void<glext.h>
PFNGLCOLORFORMATNVPROC(GLint size,GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLCOLORFRAGMENTOP1ATIPROC(GLenum op,GLuint dst,GLuint dstMask,GLuint dstMod,GLuint arg1,GLuint arg1Rep,GLuint arg1Mod)typedef void<glext.h>
PFNGLCOLORFRAGMENTOP2ATIPROC(GLenum op,GLuint dst,GLuint dstMask,GLuint dstMod,GLuint arg1,GLuint arg1Rep,GLuint arg1Mod,GLuint arg2,GLuint arg2Rep,GLuint arg2Mod)typedef void<glext.h>
PFNGLCOLORFRAGMENTOP3ATIPROC(GLenum op,GLuint dst,GLuint dstMask,GLuint dstMod,GLuint arg1,GLuint arg1Rep,GLuint arg1Mod,GLuint arg2,GLuint arg2Rep,GLuint arg2Mod,GLuint arg3,GLuint arg3Rep,GLuint arg3Mod)typedef void<glext.h>
PFNGLCOLORMASKINDEXEDEXTPROC(GLuint index,GLboolean r,GLboolean g,GLboolean b,GLboolean a)typedef void<glext.h>
PFNGLCOLORMASKIPROC(GLuint index,GLboolean r,GLboolean g,GLboolean b,GLboolean a)typedef void<glext.h>
PFNGLCOLORMASKPROC(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)typedef void<glcorearb.h>
PFNGLCOLORP3UIPROC(GLenum type,GLuint color)typedef void<glext.h>
PFNGLCOLORP3UIVPROC(GLenum type,const GLuint * color)typedef void<glext.h>
PFNGLCOLORP4UIPROC(GLenum type,GLuint color)typedef void<glext.h>
PFNGLCOLORP4UIVPROC(GLenum type,const GLuint * color)typedef void<glext.h>
PFNGLCOLORPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,GLsizei count,const GLvoid * pointer)typedef void<glext.h>
PFNGLCOLORPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,GLsizei count,const void * pointer)typedef void<glext.h>
PFNGLCOLORPOINTERLISTIBMPROC(GLint size,GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLCOLORPOINTERVINTELPROC(GLint size,GLenum type,const void ** pointer)typedef void<glext.h>
PFNGLCOLORSUBTABLEEXTPROC(GLenum target,GLsizei start,GLsizei count,GLenum format,GLenum type,const GLvoid * data)typedef void<glext.h>
PFNGLCOLORSUBTABLEEXTPROC(GLenum target,GLsizei start,GLsizei count,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCOLORSUBTABLEPROC(GLenum target,GLsizei start,GLsizei count,GLenum format,GLenum type,const void * data)typedef void<glext.h>
PFNGLCOLORTABLEEXTPROC(GLenum target,GLenum internalFormat,GLsizei width,GLenum format,GLenum type,const GLvoid * data)typedef void<glext.h>
PFNGLCOLORTABLEEXTPROC(GLenum target,GLenum internalFormat,GLsizei width,GLenum format,GLenum type,const void * table)typedef void<glext.h>
PFNGLCOLORTABLEPARAMETERFVPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLCOLORTABLEPARAMETERFVSGIPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLCOLORTABLEPARAMETERIVPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLCOLORTABLEPARAMETERIVSGIPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLCOLORTABLEPROC(GLenum target,GLenum internalformat,GLsizei width,GLenum format,GLenum type,const void * table)typedef void<glext.h>
PFNGLCOLORTABLESGIPROC(GLenum target,GLenum internalformat,GLsizei width,GLenum format,GLenum type,const void * table)typedef void<glext.h>
PFNGLCOMBINERINPUTNVPROC(GLenum stage,GLenum portion,GLenum variable,GLenum input,GLenum mapping,GLenum componentUsage)typedef void<glext.h>
PFNGLCOMBINEROUTPUTNVPROC(GLenum stage,GLenum portion,GLenum abOutput,GLenum cdOutput,GLenum sumOutput,GLenum scale,GLenum bias,GLboolean abDotProduct,GLboolean cdDotProduct,GLboolean muxSum)typedef void<glext.h>
PFNGLCOMBINERPARAMETERFNVPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLCOMBINERPARAMETERFVNVPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLCOMBINERPARAMETERINVPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLCOMBINERPARAMETERIVNVPROC(GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC(GLenum stage,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLCOMPILESHADERARBPROC(GLhandleARB shaderObj)typedef void<glext.h>
PFNGLCOMPILESHADERINCLUDEARBPROC(GLuint shader,GLsizei count,const GLchar * const * path,const GLint * length)typedef void<glext.h>
PFNGLCOMPILESHADERPROC(GLuint shader)typedef void<glext.h>
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXIMAGE1DPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXIMAGE2DPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXIMAGE3DPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC(GLuint texture,GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC(GLuint texture,GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC(GLuint texture,GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC(GLuint texture,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void * bits)typedef void<glext.h>
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void * data)typedef void<glext.h>
PFNGLCONVOLUTIONFILTER1DEXTPROC(GLenum target,GLenum internalformat,GLsizei width,GLenum format,GLenum type,const void * image)typedef void<glext.h>
PFNGLCONVOLUTIONFILTER1DPROC(GLenum target,GLenum internalformat,GLsizei width,GLenum format,GLenum type,const void * image)typedef void<glext.h>
PFNGLCONVOLUTIONFILTER2DEXTPROC(GLenum target,GLenum internalformat,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * image)typedef void<glext.h>
PFNGLCONVOLUTIONFILTER2DPROC(GLenum target,GLenum internalformat,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * image)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERFEXTPROC(GLenum target,GLenum pname,GLfloat params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERFPROC(GLenum target,GLenum pname,GLfloat params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERFVEXTPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERFVPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERIEXTPROC(GLenum target,GLenum pname,GLint params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERIPROC(GLenum target,GLenum pname,GLint params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERIVEXTPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERIVPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERXOESPROC(GLenum target,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLCONVOLUTIONPARAMETERXVOESPROC(GLenum target,GLenum pname,const GLfixed * params)typedef void<glext.h>
PFNGLCOPYBUFFERSUBDATAPROC(GLenum readTarget,GLenum writeTarget,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size)typedef void<glext.h>
PFNGLCOPYCOLORSUBTABLEEXTPROC(GLenum target,GLsizei start,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYCOLORSUBTABLEPROC(GLenum target,GLsizei start,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYCOLORTABLEPROC(GLenum target,GLenum internalformat,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYCOLORTABLESGIPROC(GLenum target,GLenum internalformat,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC(GLenum target,GLenum internalformat,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYCONVOLUTIONFILTER1DPROC(GLenum target,GLenum internalformat,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC(GLenum target,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYCONVOLUTIONFILTER2DPROC(GLenum target,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYIMAGESUBDATANVPROC(GLuint srcName,GLenum srcTarget,GLint srcLevel,GLint srcX,GLint srcY,GLint srcZ,GLuint dstName,GLenum dstTarget,GLint dstLevel,GLint dstX,GLint dstY,GLint dstZ,GLsizei width,GLsizei height,GLsizei depth)typedef void<glext.h>
PFNGLCOPYIMAGESUBDATAPROC(GLuint srcName,GLenum srcTarget,GLint srcLevel,GLint srcX,GLint srcY,GLint srcZ,GLuint dstName,GLenum dstTarget,GLint dstLevel,GLint dstX,GLint dstY,GLint dstZ,GLsizei srcWidth,GLsizei srcHeight,GLsizei srcDepth)typedef void<glext.h>
PFNGLCOPYMULTITEXIMAGE1DEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)typedef void<glext.h>
PFNGLCOPYMULTITEXIMAGE2DEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)typedef void<glext.h>
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYNAMEDBUFFERSUBDATAPROC(GLuint readBuffer,GLuint writeBuffer,GLintptr readOffset,GLintptr writeOffset,GLsizei size)typedef void<glext.h>
PFNGLCOPYPATHNVPROC(GLuint resultPath,GLuint srcPath)typedef void<glext.h>
PFNGLCOPYTEXIMAGE1DEXTPROC(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)typedef void<glext.h>
PFNGLCOPYTEXIMAGE1DPROC(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)typedef void<glcorearb.h>
PFNGLCOPYTEXIMAGE2DEXTPROC(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)typedef void<glext.h>
PFNGLCOPYTEXIMAGE2DPROC(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)typedef void<glcorearb.h>
PFNGLCOPYTEXSUBIMAGE1DEXTPROC(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYTEXSUBIMAGE1DPROC(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)typedef void<glcorearb.h>
PFNGLCOPYTEXSUBIMAGE2DEXTPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYTEXSUBIMAGE2DPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glcorearb.h>
PFNGLCOPYTEXSUBIMAGE3DEXTPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYTEXSUBIMAGE3DPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYTEXTUREIMAGE1DEXTPROC(GLuint texture,GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)typedef void<glext.h>
PFNGLCOPYTEXTUREIMAGE2DEXTPROC(GLuint texture,GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)typedef void<glext.h>
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYTEXTURESUBIMAGE1DPROC(GLuint texture,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)typedef void<glext.h>
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYTEXTURESUBIMAGE2DPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOPYTEXTURESUBIMAGE3DPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLCOVERAGEMODULATIONNVPROC(GLenum components)typedef void<glext.h>
PFNGLCOVERAGEMODULATIONTABLENVPROC(GLsizei n,const GLfloat * v)typedef void<glext.h>
PFNGLCOVERFILLPATHINSTANCEDNVPROC(GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLenum coverMode,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLCOVERFILLPATHNVPROC(GLuint path,GLenum coverMode)typedef void<glext.h>
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC(GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLenum coverMode,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLCOVERSTROKEPATHNVPROC(GLuint path,GLenum coverMode)typedef void<glext.h>
PFNGLCREATEBUFFERSPROC(GLsizei n,GLuint * buffers)typedef void<glext.h>
PFNGLCREATEFRAMEBUFFERSPROC(GLsizei n,GLuint * framebuffers)typedef void<glext.h>
PFNGLCREATEPERFQUERYINTELPROC(GLuint queryId,GLuint * queryHandle)typedef void<glext.h>
PFNGLCREATEPROGRAMOBJECTARBPROC(void)typedef GLhandleARB<glext.h>
PFNGLCREATEPROGRAMPIPELINESPROC(GLsizei n,GLuint * pipelines)typedef void<glext.h>
PFNGLCREATEPROGRAMPROC(void)typedef GLuint<glext.h>
PFNGLCREATEQUERIESPROC(GLenum target,GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLCREATERENDERBUFFERSPROC(GLsizei n,GLuint * renderbuffers)typedef void<glext.h>
PFNGLCREATESAMPLERSPROC(GLsizei n,GLuint * samplers)typedef void<glext.h>
PFNGLCREATESHADEROBJECTARBPROC(GLenum shaderType)typedef GLhandleARB<glext.h>
PFNGLCREATESHADERPROC(GLenum type)typedef GLuint<glext.h>
PFNGLCREATESHADERPROGRAMEXTPROC(GLenum type,const GLchar * string)typedef GLuint<glext.h>
PFNGLCREATESHADERPROGRAMVPROC(GLenum type,GLsizei count,const GLchar * const * strings)typedef GLuint<glext.h>
PFNGLCREATESYNCFROMCLEVENTARBPROC(struct _cl_context * context,struct _cl_event * event,GLbitfield flags)typedef GLsync<glext.h>
PFNGLCREATETEXTURESPROC(GLenum target,GLsizei n,GLuint * textures)typedef void<glext.h>
PFNGLCREATETRANSFORMFEEDBACKSPROC(GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLCREATEVERTEXARRAYSPROC(GLsizei n,GLuint * arrays)typedef void<glext.h>
PFNGLCULLFACEPROC(GLenum mode)typedef void<glcorearb.h>
PFNGLCULLPARAMETERDVEXTPROC(GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLCULLPARAMETERFVEXTPROC(GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLCURRENTPALETTEMATRIXARBPROC(GLint index)typedef void<glext.h>
PFNGLDEBUGMESSAGECALLBACKAMDPROC(GLDEBUGPROCAMD callback,void * userParam)typedef void<glext.h>
PFNGLDEBUGMESSAGECALLBACKARBPROC(GLDEBUGPROCARB callback,const void * userParam)typedef void<glext.h>
PFNGLDEBUGMESSAGECALLBACKPROC(GLDEBUGPROC callback,const void * userParam)typedef void<glext.h>
PFNGLDEBUGMESSAGECONTROLARBPROC(GLenum source,GLenum type,GLenum severity,GLsizei count,const GLuint * ids,GLboolean enabled)typedef void<glext.h>
PFNGLDEBUGMESSAGECONTROLPROC(GLenum source,GLenum type,GLenum severity,GLsizei count,const GLuint * ids,GLboolean enabled)typedef void<glext.h>
PFNGLDEBUGMESSAGEENABLEAMDPROC(GLenum category,GLenum severity,GLsizei count,const GLuint * ids,GLboolean enabled)typedef void<glext.h>
PFNGLDEBUGMESSAGEINSERTAMDPROC(GLenum category,GLenum severity,GLuint id,GLsizei length,const GLchar * buf)typedef void<glext.h>
PFNGLDEBUGMESSAGEINSERTARBPROC(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * buf)typedef void<glext.h>
PFNGLDEBUGMESSAGEINSERTPROC(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * buf)typedef void<glext.h>
PFNGLDEFORMATIONMAP3DSGIXPROC(GLenum target,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,GLdouble w1,GLdouble w2,GLint wstride,GLint worder,const GLdouble * points)typedef void<glext.h>
PFNGLDEFORMATIONMAP3FSGIXPROC(GLenum target,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,GLfloat w1,GLfloat w2,GLint wstride,GLint worder,const GLfloat * points)typedef void<glext.h>
PFNGLDEFORMSGIXPROC(GLbitfield mask)typedef void<glext.h>
PFNGLDELETEASYNCMARKERSSGIXPROC(GLuint marker,GLsizei range)typedef void<glext.h>
PFNGLDELETEBUFFERSARBPROC(GLsizei n,const GLuint * buffers)typedef void<glext.h>
PFNGLDELETEBUFFERSPROC(GLsizei n,const GLuint * buffers)typedef void<glext.h>
PFNGLDELETEFENCESAPPLEPROC(GLsizei n,const GLuint * fences)typedef void<glext.h>
PFNGLDELETEFENCESNVPROC(GLsizei n,const GLuint * fences)typedef void<glext.h>
PFNGLDELETEFRAGMENTSHADERATIPROC(GLuint id)typedef void<glext.h>
PFNGLDELETEFRAMEBUFFERSEXTPROC(GLsizei n,const GLuint * framebuffers)typedef void<glext.h>
PFNGLDELETEFRAMEBUFFERSPROC(GLsizei n,const GLuint * framebuffers)typedef void<glext.h>
PFNGLDELETENAMEDSTRINGARBPROC(GLint namelen,const GLchar * name)typedef void<glext.h>
PFNGLDELETENAMESAMDPROC(GLenum identifier,GLuint num,const GLuint * names)typedef void<glext.h>
PFNGLDELETEOBJECTARBPROC(GLhandleARB obj)typedef void<glext.h>
PFNGLDELETEOCCLUSIONQUERIESNVPROC(GLsizei n,const GLuint * ids)typedef void<glext.h>
PFNGLDELETEPATHSNVPROC(GLuint path,GLsizei range)typedef void<glext.h>
PFNGLDELETEPERFMONITORSAMDPROC(GLsizei n,GLuint * monitors)typedef void<glext.h>
PFNGLDELETEPERFQUERYINTELPROC(GLuint queryHandle)typedef void<glext.h>
PFNGLDELETEPROGRAMPIPELINESPROC(GLsizei n,const GLuint * pipelines)typedef void<glext.h>
PFNGLDELETEPROGRAMPROC(GLuint program)typedef void<glext.h>
PFNGLDELETEPROGRAMSARBPROC(GLsizei n,const GLuint * programs)typedef void<glext.h>
PFNGLDELETEPROGRAMSNVPROC(GLsizei n,const GLuint * programs)typedef void<glext.h>
PFNGLDELETEQUERIESARBPROC(GLsizei n,const GLuint * ids)typedef void<glext.h>
PFNGLDELETEQUERIESPROC(GLsizei n,const GLuint * ids)typedef void<glext.h>
PFNGLDELETERENDERBUFFERSEXTPROC(GLsizei n,const GLuint * renderbuffers)typedef void<glext.h>
PFNGLDELETERENDERBUFFERSPROC(GLsizei n,const GLuint * renderbuffers)typedef void<glext.h>
PFNGLDELETESAMPLERSPROC(GLsizei count,const GLuint * samplers)typedef void<glext.h>
PFNGLDELETESHADERPROC(GLuint shader)typedef void<glext.h>
PFNGLDELETESYNCPROC(GLsync sync)typedef void<glext.h>
PFNGLDELETETEXTURESEXTPROC(GLsizei n,const GLuint * textures)typedef void<glext.h>
PFNGLDELETETEXTURESPROC(GLsizei n,const GLuint * textures)typedef void<glcorearb.h>
PFNGLDELETETRANSFORMFEEDBACKSNVPROC(GLsizei n,const GLuint * ids)typedef void<glext.h>
PFNGLDELETETRANSFORMFEEDBACKSPROC(GLsizei n,const GLuint * ids)typedef void<glext.h>
PFNGLDELETEVERTEXARRAYSAPPLEPROC(GLsizei n,const GLuint * arrays)typedef void<glext.h>
PFNGLDELETEVERTEXARRAYSPROC(GLsizei n,const GLuint * arrays)typedef void<glext.h>
PFNGLDELETEVERTEXSHADEREXTPROC(GLuint id)typedef void<glext.h>
PFNGLDEPTHBOUNDSDNVPROC(GLdouble zmin,GLdouble zmax)typedef void<glext.h>
PFNGLDEPTHBOUNDSEXTPROC(GLclampd zmin,GLclampd zmax)typedef void<glext.h>
PFNGLDEPTHFUNCPROC(GLenum func)typedef void<glcorearb.h>
PFNGLDEPTHMASKPROC(GLboolean flag)typedef void<glcorearb.h>
PFNGLDEPTHRANGEARRAYVPROC(GLuint first,GLsizei count,const GLdouble * v)typedef void<glext.h>
PFNGLDEPTHRANGEDNVPROC(GLdouble zNear,GLdouble zFar)typedef void<glext.h>
PFNGLDEPTHRANGEFOESPROC(GLclampf n,GLclampf f)typedef void<glext.h>
PFNGLDEPTHRANGEFPROC(GLfloat n,GLfloat f)typedef void<glext.h>
PFNGLDEPTHRANGEINDEXEDPROC(GLuint index,GLdouble n,GLdouble f)typedef void<glext.h>
PFNGLDEPTHRANGEPROC(GLdouble near,GLdouble far)typedef void<glcorearb.h>
PFNGLDEPTHRANGEXOESPROC(GLfixed n,GLfixed f)typedef void<glext.h>
PFNGLDETACHOBJECTARBPROC(GLhandleARB containerObj,GLhandleARB attachedObj)typedef void<glext.h>
PFNGLDETACHSHADERPROC(GLuint program,GLuint shader)typedef void<glext.h>
PFNGLDETAILTEXFUNCSGISPROC(GLenum target,GLsizei n,const GLfloat * points)typedef void<glext.h>
PFNGLDISABLECLIENTSTATEIEXTPROC(GLenum array,GLuint index)typedef void<glext.h>
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC(GLenum array,GLuint index)typedef void<glext.h>
PFNGLDISABLEINDEXEDEXTPROC(GLenum target,GLuint index)typedef void<glext.h>
PFNGLDISABLEIPROC(GLenum target,GLuint index)typedef void<glext.h>
PFNGLDISABLEPROC(GLenum cap)typedef void<glcorearb.h>
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC(GLuint id)typedef void<glext.h>
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC(GLuint vaobj,GLuint index)typedef void<glext.h>
PFNGLDISABLEVERTEXARRAYATTRIBPROC(GLuint vaobj,GLuint index)typedef void<glext.h>
PFNGLDISABLEVERTEXARRAYEXTPROC(GLuint vaobj,GLenum array)typedef void<glext.h>
PFNGLDISABLEVERTEXATTRIBAPPLEPROC(GLuint index,GLenum pname)typedef void<glext.h>
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC(GLuint index)typedef void<glext.h>
PFNGLDISABLEVERTEXATTRIBARRAYPROC(GLuint index)typedef void<glext.h>
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC(GLuint num_groups_x,GLuint num_groups_y,GLuint num_groups_z,GLuint group_size_x,GLuint group_size_y,GLuint group_size_z)typedef void<glext.h>
PFNGLDISPATCHCOMPUTEINDIRECTPROC(GLintptr indirect)typedef void<glext.h>
PFNGLDISPATCHCOMPUTEPROC(GLuint num_groups_x,GLuint num_groups_y,GLuint num_groups_z)typedef void<glext.h>
PFNGLDRAWARRAYSEXTPROC(GLenum mode,GLint first,GLsizei count)typedef void<glext.h>
PFNGLDRAWARRAYSINDIRECTPROC(GLenum mode,const void * indirect)typedef void<glext.h>
PFNGLDRAWARRAYSINSTANCEDARBPROC(GLenum mode,GLint first,GLsizei count,GLsizei primcount)typedef void<glext.h>
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC(GLenum mode,GLint first,GLsizei count,GLsizei instancecount,GLuint baseinstance)typedef void<glext.h>
PFNGLDRAWARRAYSINSTANCEDEXTPROC(GLenum mode,GLint start,GLsizei count,GLsizei primcount)typedef void<glext.h>
PFNGLDRAWARRAYSINSTANCEDPROC(GLenum mode,GLint first,GLsizei count,GLsizei instancecount)typedef void<glext.h>
PFNGLDRAWARRAYSPROC(GLenum mode,GLint first,GLsizei count)typedef void<glcorearb.h>
PFNGLDRAWBUFFERPROC(GLenum buf)typedef void<glcorearb.h>
PFNGLDRAWBUFFERSARBPROC(GLsizei n,const GLenum * bufs)typedef void<glext.h>
PFNGLDRAWBUFFERSATIPROC(GLsizei n,const GLenum * bufs)typedef void<glext.h>
PFNGLDRAWBUFFERSPROC(GLsizei n,const GLenum * bufs)typedef void<glext.h>
PFNGLDRAWELEMENTARRAYAPPLEPROC(GLenum mode,GLint first,GLsizei count)typedef void<glext.h>
PFNGLDRAWELEMENTARRAYATIPROC(GLenum mode,GLsizei count)typedef void<glext.h>
PFNGLDRAWELEMENTSBASEVERTEXPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLint basevertex)typedef void<glext.h>
PFNGLDRAWELEMENTSINDIRECTPROC(GLenum mode,GLenum type,const void * indirect)typedef void<glext.h>
PFNGLDRAWELEMENTSINSTANCEDARBPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei primcount)typedef void<glext.h>
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLuint baseinstance)typedef void<glext.h>
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLint basevertex,GLuint baseinstance)typedef void<glext.h>
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLint basevertex)typedef void<glext.h>
PFNGLDRAWELEMENTSINSTANCEDEXTPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei primcount)typedef void<glext.h>
PFNGLDRAWELEMENTSINSTANCEDPROC(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount)typedef void<glext.h>
PFNGLDRAWELEMENTSPROC(GLenum mode,GLsizei count,GLenum type,const void * indices)typedef void<glcorearb.h>
PFNGLDRAWMESHARRAYSSUNPROC(GLenum mode,GLint first,GLsizei count,GLsizei width)typedef void<glext.h>
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC(GLenum mode,GLuint start,GLuint end,GLint first,GLsizei count)typedef void<glext.h>
PFNGLDRAWRANGEELEMENTARRAYATIPROC(GLenum mode,GLuint start,GLuint end,GLsizei count)typedef void<glext.h>
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void * indices,GLint basevertex)typedef void<glext.h>
PFNGLDRAWRANGEELEMENTSEXTPROC(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void * indices)typedef void<glext.h>
PFNGLDRAWRANGEELEMENTSPROC(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void * indices)typedef void<glext.h>
PFNGLDRAWRANGEELEMENTSWINPROC(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const GLvoid * indices)typedef void<gl.h>
PFNGLDRAWTEXTURENVPROC(GLuint texture,GLuint sampler,GLfloat x0,GLfloat y0,GLfloat x1,GLfloat y1,GLfloat z,GLfloat s0,GLfloat t0,GLfloat s1,GLfloat t1)typedef void<glext.h>
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC(GLenum mode,GLuint id,GLsizei instancecount)typedef void<glext.h>
PFNGLDRAWTRANSFORMFEEDBACKNVPROC(GLenum mode,GLuint id)typedef void<glext.h>
PFNGLDRAWTRANSFORMFEEDBACKPROC(GLenum mode,GLuint id)typedef void<glext.h>
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC(GLenum mode,GLuint id,GLuint stream,GLsizei instancecount)typedef void<glext.h>
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC(GLenum mode,GLuint id,GLuint stream)typedef void<glext.h>
PFNGLEDGEFLAGFORMATNVPROC(GLsizei stride)typedef void<glext.h>
PFNGLEDGEFLAGPOINTEREXTPROC(GLsizei stride,GLsizei count,const GLboolean * pointer)typedef void<glext.h>
PFNGLEDGEFLAGPOINTERLISTIBMPROC(GLint stride,const GLboolean ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLELEMENTPOINTERAPPLEPROC(GLenum type,const void * pointer)typedef void<glext.h>
PFNGLELEMENTPOINTERATIPROC(GLenum type,const void * pointer)typedef void<glext.h>
PFNGLENABLECLIENTSTATEIEXTPROC(GLenum array,GLuint index)typedef void<glext.h>
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC(GLenum array,GLuint index)typedef void<glext.h>
PFNGLENABLEINDEXEDEXTPROC(GLenum target,GLuint index)typedef void<glext.h>
PFNGLENABLEIPROC(GLenum target,GLuint index)typedef void<glext.h>
PFNGLENABLEPROC(GLenum cap)typedef void<glcorearb.h>
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC(GLuint id)typedef void<glext.h>
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC(GLuint vaobj,GLuint index)typedef void<glext.h>
PFNGLENABLEVERTEXARRAYATTRIBPROC(GLuint vaobj,GLuint index)typedef void<glext.h>
PFNGLENABLEVERTEXARRAYEXTPROC(GLuint vaobj,GLenum array)typedef void<glext.h>
PFNGLENABLEVERTEXATTRIBAPPLEPROC(GLuint index,GLenum pname)typedef void<glext.h>
PFNGLENABLEVERTEXATTRIBARRAYARBPROC(GLuint index)typedef void<glext.h>
PFNGLENABLEVERTEXATTRIBARRAYPROC(GLuint index)typedef void<glext.h>
PFNGLENDCONDITIONALRENDERNVPROC(void)typedef void<glext.h>
PFNGLENDCONDITIONALRENDERNVXPROC(void)typedef void<glext.h>
PFNGLENDCONDITIONALRENDERPROC(void)typedef void<glext.h>
PFNGLENDFRAGMENTSHADERATIPROC(void)typedef void<glext.h>
PFNGLENDOCCLUSIONQUERYNVPROC(void)typedef void<glext.h>
PFNGLENDPERFMONITORAMDPROC(GLuint monitor)typedef void<glext.h>
PFNGLENDPERFQUERYINTELPROC(GLuint queryHandle)typedef void<glext.h>
PFNGLENDQUERYARBPROC(GLenum target)typedef void<glext.h>
PFNGLENDQUERYINDEXEDPROC(GLenum target,GLuint index)typedef void<glext.h>
PFNGLENDQUERYPROC(GLenum target)typedef void<glext.h>
PFNGLENDTRANSFORMFEEDBACKEXTPROC(void)typedef void<glext.h>
PFNGLENDTRANSFORMFEEDBACKNVPROC(void)typedef void<glext.h>
PFNGLENDTRANSFORMFEEDBACKPROC(void)typedef void<glext.h>
PFNGLENDVERTEXSHADEREXTPROC(void)typedef void<glext.h>
PFNGLENDVIDEOCAPTURENVPROC(GLuint video_capture_slot)typedef void<glext.h>
PFNGLEVALCOORD1XOESPROC(GLfixed u)typedef void<glext.h>
PFNGLEVALCOORD1XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLEVALCOORD2XOESPROC(GLfixed u,GLfixed v)typedef void<glext.h>
PFNGLEVALCOORD2XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLEVALMAPSNVPROC(GLenum target,GLenum mode)typedef void<glext.h>
PFNGLEXECUTEPROGRAMNVPROC(GLenum target,GLuint id,const GLfloat * params)typedef void<glext.h>
PFNGLEXTRACTCOMPONENTEXTPROC(GLuint res,GLuint src,GLuint num)typedef void<glext.h>
PFNGLFEEDBACKBUFFERXOESPROC(GLsizei n,GLenum type,const GLfixed * buffer)typedef void<glext.h>
PFNGLFENCESYNCPROC(GLenum condition,GLbitfield flags)typedef GLsync<glext.h>
PFNGLFINALCOMBINERINPUTNVPROC(GLenum variable,GLenum input,GLenum mapping,GLenum componentUsage)typedef void<glext.h>
PFNGLFINISHASYNCSGIXPROC(GLuint * markerp)typedef GLint<glext.h>
PFNGLFINISHFENCEAPPLEPROC(GLuint fence)typedef void<glext.h>
PFNGLFINISHFENCENVPROC(GLuint fence)typedef void<glext.h>
PFNGLFINISHOBJECTAPPLEPROC(GLenum object,GLint name)typedef void<glext.h>
PFNGLFINISHPROC(void)typedef void<glcorearb.h>
PFNGLFINISHTEXTURESUNXPROC(void)typedef void<glext.h>
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC(GLenum target,GLintptr offset,GLsizeiptr size)typedef void<glext.h>
PFNGLFLUSHMAPPEDBUFFERRANGEPROC(GLenum target,GLintptr offset,GLsizeiptr length)typedef void<glext.h>
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC(GLuint buffer,GLintptr offset,GLsizeiptr length)typedef void<glext.h>
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC(GLuint buffer,GLintptr offset,GLsizei length)typedef void<glext.h>
PFNGLFLUSHPIXELDATARANGENVPROC(GLenum target)typedef void<glext.h>
PFNGLFLUSHPROC(void)typedef void<glcorearb.h>
PFNGLFLUSHRASTERSGIXPROC(void)typedef void<glext.h>
PFNGLFLUSHSTATICDATAIBMPROC(GLenum target)typedef void<glext.h>
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC(GLsizei length,void * pointer)typedef void<glext.h>
PFNGLFLUSHVERTEXARRAYRANGENVPROC(void)typedef void<glext.h>
PFNGLFOGCOORDDEXTPROC(GLdouble coord)typedef void<glext.h>
PFNGLFOGCOORDDPROC(GLdouble coord)typedef void<glext.h>
PFNGLFOGCOORDDVEXTPROC(const GLdouble * coord)typedef void<glext.h>
PFNGLFOGCOORDDVPROC(const GLdouble * coord)typedef void<glext.h>
PFNGLFOGCOORDFEXTPROC(GLfloat coord)typedef void<glext.h>
PFNGLFOGCOORDFORMATNVPROC(GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLFOGCOORDFPROC(GLfloat coord)typedef void<glext.h>
PFNGLFOGCOORDFVEXTPROC(const GLfloat * coord)typedef void<glext.h>
PFNGLFOGCOORDFVPROC(const GLfloat * coord)typedef void<glext.h>
PFNGLFOGCOORDHNVPROC(GLhalfNV fog)typedef void<glext.h>
PFNGLFOGCOORDHVNVPROC(const GLhalfNV * fog)typedef void<glext.h>
PFNGLFOGCOORDPOINTEREXTPROC(GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLFOGCOORDPOINTERLISTIBMPROC(GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLFOGCOORDPOINTERPROC(GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLFOGFUNCSGISPROC(GLsizei n,const GLfloat * points)typedef void<glext.h>
PFNGLFOGXOESPROC(GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLFOGXVOESPROC(GLenum pname,const GLfixed * param)typedef void<glext.h>
PFNGLFRAGMENTCOLORMATERIALSGIXPROC(GLenum face,GLenum mode)typedef void<glext.h>
PFNGLFRAGMENTCOVERAGECOLORNVPROC(GLuint color)typedef void<glext.h>
PFNGLFRAGMENTLIGHTFSGIXPROC(GLenum light,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLFRAGMENTLIGHTFVSGIXPROC(GLenum light,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLFRAGMENTLIGHTISGIXPROC(GLenum light,GLenum pname,GLint param)typedef void<glext.h>
PFNGLFRAGMENTLIGHTIVSGIXPROC(GLenum light,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLFRAGMENTLIGHTMODELFSGIXPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLFRAGMENTLIGHTMODELISGIXPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC(GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLFRAGMENTMATERIALFSGIXPROC(GLenum face,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLFRAGMENTMATERIALFVSGIXPROC(GLenum face,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLFRAGMENTMATERIALISGIXPROC(GLenum face,GLenum pname,GLint param)typedef void<glext.h>
PFNGLFRAGMENTMATERIALIVSGIXPROC(GLenum face,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC(GLuint framebuffer,GLenum mode)typedef void<glext.h>
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC(GLuint framebuffer,GLsizei n,const GLenum * bufs)typedef void<glext.h>
PFNGLFRAMEBUFFERPARAMETERIPROC(GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLFRAMEBUFFERREADBUFFEREXTPROC(GLuint framebuffer,GLenum mode)typedef void<glext.h>
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC(GLenum target,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer)typedef void<glext.h>
PFNGLFRAMEBUFFERRENDERBUFFERPROC(GLenum target,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer)typedef void<glext.h>
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC(GLenum target,GLuint start,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURE1DPROC(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURE2DPROC(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level,GLint zoffset)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURE3DPROC(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level,GLint zoffset)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTUREARBPROC(GLenum target,GLenum attachment,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTUREEXTPROC(GLenum target,GLenum attachment,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC(GLenum target,GLenum attachment,GLuint texture,GLint level,GLenum face)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC(GLenum target,GLenum attachment,GLuint texture,GLint level,GLenum face)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC(GLenum target,GLenum attachment,GLuint texture,GLint level,GLint layer)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC(GLenum target,GLenum attachment,GLuint texture,GLint level,GLint layer)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTURELAYERPROC(GLenum target,GLenum attachment,GLuint texture,GLint level,GLint layer)typedef void<glext.h>
PFNGLFRAMEBUFFERTEXTUREPROC(GLenum target,GLenum attachment,GLuint texture,GLint level)typedef void<glext.h>
PFNGLFRAMETERMINATORGREMEDYPROC(void)typedef void<glext.h>
PFNGLFRAMEZOOMSGIXPROC(GLint factor)typedef void<glext.h>
PFNGLFREEOBJECTBUFFERATIPROC(GLuint buffer)typedef void<glext.h>
PFNGLFRONTFACEPROC(GLenum mode)typedef void<glcorearb.h>
PFNGLFRUSTUMFOESPROC(GLfloat l,GLfloat r,GLfloat b,GLfloat t,GLfloat n,GLfloat f)typedef void<glext.h>
PFNGLFRUSTUMXOESPROC(GLfixed l,GLfixed r,GLfixed b,GLfixed t,GLfixed n,GLfixed f)typedef void<glext.h>
PFNGLGENASYNCMARKERSSGIXPROC(GLsizei range)typedef GLuint<glext.h>
PFNGLGENBUFFERSARBPROC(GLsizei n,GLuint * buffers)typedef void<glext.h>
PFNGLGENBUFFERSPROC(GLsizei n,GLuint * buffers)typedef void<glext.h>
PFNGLGENERATEMIPMAPEXTPROC(GLenum target)typedef void<glext.h>
PFNGLGENERATEMIPMAPPROC(GLenum target)typedef void<glext.h>
PFNGLGENERATEMULTITEXMIPMAPEXTPROC(GLenum texunit,GLenum target)typedef void<glext.h>
PFNGLGENERATETEXTUREMIPMAPEXTPROC(GLuint texture,GLenum target)typedef void<glext.h>
PFNGLGENERATETEXTUREMIPMAPPROC(GLuint texture)typedef void<glext.h>
PFNGLGENFENCESAPPLEPROC(GLsizei n,GLuint * fences)typedef void<glext.h>
PFNGLGENFENCESNVPROC(GLsizei n,GLuint * fences)typedef void<glext.h>
PFNGLGENFRAGMENTSHADERSATIPROC(GLuint range)typedef GLuint<glext.h>
PFNGLGENFRAMEBUFFERSEXTPROC(GLsizei n,GLuint * framebuffers)typedef void<glext.h>
PFNGLGENFRAMEBUFFERSPROC(GLsizei n,GLuint * framebuffers)typedef void<glext.h>
PFNGLGENNAMESAMDPROC(GLenum identifier,GLuint num,GLuint * names)typedef void<glext.h>
PFNGLGENOCCLUSIONQUERIESNVPROC(GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLGENPATHSNVPROC(GLsizei range)typedef GLuint<glext.h>
PFNGLGENPERFMONITORSAMDPROC(GLsizei n,GLuint * monitors)typedef void<glext.h>
PFNGLGENPROGRAMPIPELINESPROC(GLsizei n,GLuint * pipelines)typedef void<glext.h>
PFNGLGENPROGRAMSARBPROC(GLsizei n,GLuint * programs)typedef void<glext.h>
PFNGLGENPROGRAMSNVPROC(GLsizei n,GLuint * programs)typedef void<glext.h>
PFNGLGENQUERIESARBPROC(GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLGENQUERIESPROC(GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLGENRENDERBUFFERSEXTPROC(GLsizei n,GLuint * renderbuffers)typedef void<glext.h>
PFNGLGENRENDERBUFFERSPROC(GLsizei n,GLuint * renderbuffers)typedef void<glext.h>
PFNGLGENSAMPLERSPROC(GLsizei count,GLuint * samplers)typedef void<glext.h>
PFNGLGENSYMBOLSEXTPROC(GLenum datatype,GLenum storagetype,GLenum range,GLuint components)typedef GLuint<glext.h>
PFNGLGENTEXTURESEXTPROC(GLsizei n,GLuint * textures)typedef void<glext.h>
PFNGLGENTEXTURESPROC(GLsizei n,GLuint * textures)typedef void<glcorearb.h>
PFNGLGENTRANSFORMFEEDBACKSNVPROC(GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLGENTRANSFORMFEEDBACKSPROC(GLsizei n,GLuint * ids)typedef void<glext.h>
PFNGLGENVERTEXARRAYSAPPLEPROC(GLsizei n,GLuint * arrays)typedef void<glext.h>
PFNGLGENVERTEXARRAYSPROC(GLsizei n,GLuint * arrays)typedef void<glext.h>
PFNGLGENVERTEXSHADERSEXTPROC(GLuint range)typedef GLuint<glext.h>
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC(GLuint program,GLuint bufferIndex,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETACTIVEATTRIBARBPROC(GLhandleARB programObj,GLuint index,GLsizei maxLength,GLsizei * length,GLint * size,GLenum * type,GLcharARB * name)typedef void<glext.h>
PFNGLGETACTIVEATTRIBPROC(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLint * size,GLenum * type,GLchar * name)typedef void<glext.h>
PFNGLGETACTIVESUBROUTINENAMEPROC(GLuint program,GLenum shadertype,GLuint index,GLsizei bufsize,GLsizei * length,GLchar * name)typedef void<glext.h>
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC(GLuint program,GLenum shadertype,GLuint index,GLenum pname,GLint * values)typedef void<glext.h>
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC(GLuint program,GLenum shadertype,GLuint index,GLsizei bufsize,GLsizei * length,GLchar * name)typedef void<glext.h>
PFNGLGETACTIVEUNIFORMARBPROC(GLhandleARB programObj,GLuint index,GLsizei maxLength,GLsizei * length,GLint * size,GLenum * type,GLcharARB * name)typedef void<glext.h>
PFNGLGETACTIVEUNIFORMBLOCKIVPROC(GLuint program,GLuint uniformBlockIndex,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC(GLuint program,GLuint uniformBlockIndex,GLsizei bufSize,GLsizei * length,GLchar * uniformBlockName)typedef void<glext.h>
PFNGLGETACTIVEUNIFORMNAMEPROC(GLuint program,GLuint uniformIndex,GLsizei bufSize,GLsizei * length,GLchar * uniformName)typedef void<glext.h>
PFNGLGETACTIVEUNIFORMPROC(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLint * size,GLenum * type,GLchar * name)typedef void<glext.h>
PFNGLGETACTIVEUNIFORMSIVPROC(GLuint program,GLsizei uniformCount,const GLuint * uniformIndices,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETACTIVEVARYINGNVPROC(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLsizei * size,GLenum * type,GLchar * name)typedef void<glext.h>
PFNGLGETARRAYOBJECTFVATIPROC(GLenum array,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETARRAYOBJECTIVATIPROC(GLenum array,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETATTACHEDOBJECTSARBPROC(GLhandleARB containerObj,GLsizei maxCount,GLsizei * count,GLhandleARB * obj)typedef void<glext.h>
PFNGLGETATTACHEDSHADERSPROC(GLuint program,GLsizei maxCount,GLsizei * count,GLuint * shaders)typedef void<glext.h>
PFNGLGETATTRIBLOCATIONARBPROC(GLhandleARB programObj,const GLcharARB * name)typedef GLint<glext.h>
PFNGLGETATTRIBLOCATIONPROC(GLuint program,const GLchar * name)typedef GLint<glext.h>
PFNGLGETBOOLEANI_VPROC(GLenum target,GLuint index,GLboolean * data)typedef void<glext.h>
PFNGLGETBOOLEANINDEXEDVEXTPROC(GLenum target,GLuint index,GLboolean * data)typedef void<glext.h>
PFNGLGETBOOLEANVPROC(GLenum pname,GLboolean * data)typedef void<glcorearb.h>
PFNGLGETBUFFERPARAMETERI64VPROC(GLenum target,GLenum pname,GLint64 * params)typedef void<glext.h>
PFNGLGETBUFFERPARAMETERIVARBPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETBUFFERPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETBUFFERPARAMETERUI64VNVPROC(GLenum target,GLenum pname,GLuint64EXT * params)typedef void<glext.h>
PFNGLGETBUFFERPOINTERVARBPROC(GLenum target,GLenum pname,void ** params)typedef void<glext.h>
PFNGLGETBUFFERPOINTERVPROC(GLenum target,GLenum pname,void ** params)typedef void<glext.h>
PFNGLGETBUFFERSUBDATAARBPROC(GLenum target,GLintptrARB offset,GLsizeiptrARB size,void * data)typedef void<glext.h>
PFNGLGETBUFFERSUBDATAPROC(GLenum target,GLintptr offset,GLsizeiptr size,void * data)typedef void<glext.h>
PFNGLGETCLIPPLANEFOESPROC(GLenum plane,GLfloat * equation)typedef void<glext.h>
PFNGLGETCLIPPLANEXOESPROC(GLenum plane,GLfixed * equation)typedef void<glext.h>
PFNGLGETCOLORTABLEEXTPROC(GLenum target,GLenum format,GLenum type,GLvoid * data)typedef void<glext.h>
PFNGLGETCOLORTABLEEXTPROC(GLenum target,GLenum format,GLenum type,void * data)typedef void<glext.h>
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCOLORTABLEPARAMETERFVPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCOLORTABLEPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCOLORTABLEPROC(GLenum target,GLenum format,GLenum type,void * table)typedef void<glext.h>
PFNGLGETCOLORTABLESGIPROC(GLenum target,GLenum format,GLenum type,void * table)typedef void<glext.h>
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC(GLenum stage,GLenum portion,GLenum variable,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC(GLenum stage,GLenum portion,GLenum variable,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC(GLenum stage,GLenum portion,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC(GLenum stage,GLenum portion,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC(GLenum stage,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC(GLenum texunit,GLenum target,GLint lod,void * img)typedef void<glext.h>
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC(GLenum target,GLint level,void * img)typedef void<glext.h>
PFNGLGETCOMPRESSEDTEXIMAGEPROC(GLenum target,GLint level,void * img)typedef void<glext.h>
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC(GLuint texture,GLenum target,GLint lod,void * img)typedef void<glext.h>
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC(GLuint texture,GLint level,GLsizei bufSize,void * pixels)typedef void<glext.h>
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLsizei bufSize,void * pixels)typedef void<glext.h>
PFNGLGETCONVOLUTIONFILTEREXTPROC(GLenum target,GLenum format,GLenum type,void * image)typedef void<glext.h>
PFNGLGETCONVOLUTIONFILTERPROC(GLenum target,GLenum format,GLenum type,void * image)typedef void<glext.h>
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCONVOLUTIONPARAMETERFVPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCONVOLUTIONPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETCONVOLUTIONPARAMETERXVOESPROC(GLenum target,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETCOVERAGEMODULATIONTABLENVPROC(GLsizei bufsize,GLfloat * v)typedef void<glext.h>
PFNGLGETDEBUGMESSAGELOGAMDPROC(GLuint count,GLsizei bufsize,GLenum * categories,GLuint * severities,GLuint * ids,GLsizei * lengths,GLchar * message)typedef GLuint<glext.h>
PFNGLGETDEBUGMESSAGELOGARBPROC(GLuint count,GLsizei bufSize,GLenum * sources,GLenum * types,GLuint * ids,GLenum * severities,GLsizei * lengths,GLchar * messageLog)typedef GLuint<glext.h>
PFNGLGETDEBUGMESSAGELOGPROC(GLuint count,GLsizei bufSize,GLenum * sources,GLenum * types,GLuint * ids,GLenum * severities,GLsizei * lengths,GLchar * messageLog)typedef GLuint<glext.h>
PFNGLGETDETAILTEXFUNCSGISPROC(GLenum target,GLfloat * points)typedef void<glext.h>
PFNGLGETDOUBLEI_VEXTPROC(GLenum pname,GLuint index,GLdouble * params)typedef void<glext.h>
PFNGLGETDOUBLEI_VPROC(GLenum target,GLuint index,GLdouble * data)typedef void<glext.h>
PFNGLGETDOUBLEINDEXEDVEXTPROC(GLenum target,GLuint index,GLdouble * data)typedef void<glext.h>
PFNGLGETDOUBLEVPROC(GLenum pname,GLdouble * data)typedef void<glcorearb.h>
PFNGLGETERRORPROC(void)typedef GLenum<glcorearb.h>
PFNGLGETFENCEIVNVPROC(GLuint fence,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC(GLenum variable,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC(GLenum variable,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFIRSTPERFQUERYIDINTELPROC(GLuint * queryId)typedef void<glext.h>
PFNGLGETFIXEDVOESPROC(GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETFLOATI_VEXTPROC(GLenum pname,GLuint index,GLfloat * params)typedef void<glext.h>
PFNGLGETFLOATI_VPROC(GLenum target,GLuint index,GLfloat * data)typedef void<glext.h>
PFNGLGETFLOATINDEXEDVEXTPROC(GLenum target,GLuint index,GLfloat * data)typedef void<glext.h>
PFNGLGETFLOATVPROC(GLenum pname,GLfloat * data)typedef void<glcorearb.h>
PFNGLGETFOGFUNCSGISPROC(GLfloat * points)typedef void<glext.h>
PFNGLGETFRAGDATAINDEXPROC(GLuint program,const GLchar * name)typedef GLint<glext.h>
PFNGLGETFRAGDATALOCATIONEXTPROC(GLuint program,const GLchar * name)typedef GLint<glext.h>
PFNGLGETFRAGDATALOCATIONPROC(GLuint program,const GLchar * name)typedef GLint<glext.h>
PFNGLGETFRAGMENTLIGHTFVSGIXPROC(GLenum light,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETFRAGMENTLIGHTIVSGIXPROC(GLenum light,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFRAGMENTMATERIALFVSGIXPROC(GLenum face,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETFRAGMENTMATERIALIVSGIXPROC(GLenum face,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC(GLenum target,GLenum attachment,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC(GLenum target,GLenum attachment,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC(GLuint framebuffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETFRAMEBUFFERPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETGRAPHICSRESETSTATUSARBPROC(void)typedef GLenum<glext.h>
PFNGLGETGRAPHICSRESETSTATUSPROC(void)typedef GLenum<glext.h>
PFNGLGETHANDLEARBPROC(GLenum pname)typedef GLhandleARB<glext.h>
PFNGLGETHISTOGRAMEXTPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,void * values)typedef void<glext.h>
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETHISTOGRAMPARAMETERFVPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETHISTOGRAMPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETHISTOGRAMPARAMETERXVOESPROC(GLenum target,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETHISTOGRAMPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,void * values)typedef void<glext.h>
PFNGLGETIMAGEHANDLEARBPROC(GLuint texture,GLint level,GLboolean layered,GLint layer,GLenum format)typedef GLuint64<glext.h>
PFNGLGETIMAGEHANDLENVPROC(GLuint texture,GLint level,GLboolean layered,GLint layer,GLenum format)typedef GLuint64<glext.h>
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETINFOLOGARBPROC(GLhandleARB obj,GLsizei maxLength,GLsizei * length,GLcharARB * infoLog)typedef void<glext.h>
PFNGLGETINSTRUMENTSSGIXPROC(void)typedef GLint<glext.h>
PFNGLGETINTEGER64I_VPROC(GLenum target,GLuint index,GLint64 * data)typedef void<glext.h>
PFNGLGETINTEGER64VPROC(GLenum pname,GLint64 * data)typedef void<glext.h>
PFNGLGETINTEGERI_VPROC(GLenum target,GLuint index,GLint * data)typedef void<glext.h>
PFNGLGETINTEGERINDEXEDVEXTPROC(GLenum target,GLuint index,GLint * data)typedef void<glext.h>
PFNGLGETINTEGERUI64I_VNVPROC(GLenum value,GLuint index,GLuint64EXT * result)typedef void<glext.h>
PFNGLGETINTEGERUI64VNVPROC(GLenum value,GLuint64EXT * result)typedef void<glext.h>
PFNGLGETINTEGERVPROC(GLenum pname,GLint * data)typedef void<glcorearb.h>
PFNGLGETINTERNALFORMATI64VPROC(GLenum target,GLenum internalformat,GLenum pname,GLsizei bufSize,GLint64 * params)typedef void<glext.h>
PFNGLGETINTERNALFORMATIVPROC(GLenum target,GLenum internalformat,GLenum pname,GLsizei bufSize,GLint * params)typedef void<glext.h>
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC(GLenum target,GLenum internalformat,GLsizei samples,GLenum pname,GLsizei bufSize,GLint * params)typedef void<glext.h>
PFNGLGETINVARIANTBOOLEANVEXTPROC(GLuint id,GLenum value,GLboolean * data)typedef void<glext.h>
PFNGLGETINVARIANTFLOATVEXTPROC(GLuint id,GLenum value,GLfloat * data)typedef void<glext.h>
PFNGLGETINVARIANTINTEGERVEXTPROC(GLuint id,GLenum value,GLint * data)typedef void<glext.h>
PFNGLGETLIGHTXOESPROC(GLenum light,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETLISTPARAMETERFVSGIXPROC(GLuint list,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETLISTPARAMETERIVSGIXPROC(GLuint list,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC(GLuint id,GLenum value,GLboolean * data)typedef void<glext.h>
PFNGLGETLOCALCONSTANTFLOATVEXTPROC(GLuint id,GLenum value,GLfloat * data)typedef void<glext.h>
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC(GLuint id,GLenum value,GLint * data)typedef void<glext.h>
PFNGLGETMAPATTRIBPARAMETERFVNVPROC(GLenum target,GLuint index,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMAPATTRIBPARAMETERIVNVPROC(GLenum target,GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMAPCONTROLPOINTSNVPROC(GLenum target,GLuint index,GLenum type,GLsizei ustride,GLsizei vstride,GLboolean packed,void * points)typedef void<glext.h>
PFNGLGETMAPPARAMETERFVNVPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMAPPARAMETERIVNVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMAPXVOESPROC(GLenum target,GLenum query,GLfixed * v)typedef void<glext.h>
PFNGLGETMATERIALXOESPROC(GLenum face,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLGETMINMAXEXTPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,void * values)typedef void<glext.h>
PFNGLGETMINMAXPARAMETERFVEXTPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMINMAXPARAMETERFVPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMINMAXPARAMETERIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMINMAXPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMINMAXPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,void * values)typedef void<glext.h>
PFNGLGETMULTISAMPLEFVNVPROC(GLenum pname,GLuint index,GLfloat * val)typedef void<glext.h>
PFNGLGETMULTISAMPLEFVPROC(GLenum pname,GLuint index,GLfloat * val)typedef void<glext.h>
PFNGLGETMULTITEXENVFVEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMULTITEXENVIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMULTITEXGENDVEXTPROC(GLenum texunit,GLenum coord,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETMULTITEXGENFVEXTPROC(GLenum texunit,GLenum coord,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMULTITEXGENIVEXTPROC(GLenum texunit,GLenum coord,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMULTITEXIMAGEEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum format,GLenum type,void * pixels)typedef void<glext.h>
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC(GLenum texunit,GLenum target,GLint level,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMULTITEXPARAMETERFVEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETMULTITEXPARAMETERIIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETMULTITEXPARAMETERIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC(GLuint buffer,GLenum pname,GLint64 * params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC(GLuint buffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERPARAMETERIVPROC(GLuint buffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC(GLuint buffer,GLenum pname,GLuint64EXT * params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC(GLuint buffer,GLenum pname,void ** params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERPOINTERVPROC(GLuint buffer,GLenum pname,void ** params)typedef void<glext.h>
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC(GLuint buffer,GLintptr offset,GLsizeiptr size,void * data)typedef void<glext.h>
PFNGLGETNAMEDBUFFERSUBDATAPROC(GLuint buffer,GLintptr offset,GLsizei size,void * data)typedef void<glext.h>
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC(GLuint framebuffer,GLenum attachment,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC(GLuint framebuffer,GLenum attachment,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC(GLuint framebuffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC(GLuint framebuffer,GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETNAMEDPROGRAMIVEXTPROC(GLuint program,GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC(GLuint program,GLenum target,GLuint index,GLdouble * params)typedef void<glext.h>
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC(GLuint program,GLenum target,GLuint index,GLfloat * params)typedef void<glext.h>
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC(GLuint program,GLenum target,GLuint index,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC(GLuint program,GLenum target,GLuint index,GLuint * params)typedef void<glext.h>
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC(GLuint program,GLenum target,GLenum pname,void * string)typedef void<glext.h>
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC(GLuint renderbuffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC(GLuint renderbuffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNAMEDSTRINGARBPROC(GLint namelen,const GLchar * name,GLsizei bufSize,GLint * stringlen,GLchar * string)typedef void<glext.h>
PFNGLGETNAMEDSTRINGIVARBPROC(GLint namelen,const GLchar * name,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETNCOLORTABLEARBPROC(GLenum target,GLenum format,GLenum type,GLsizei bufSize,void * table)typedef void<glext.h>
PFNGLGETNCOLORTABLEPROC(GLenum target,GLenum format,GLenum type,GLsizei bufSize,void * table)typedef void<glext.h>
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC(GLenum target,GLint lod,GLsizei bufSize,void * img)typedef void<glext.h>
PFNGLGETNCOMPRESSEDTEXIMAGEPROC(GLenum target,GLint lod,GLsizei bufSize,void * pixels)typedef void<glext.h>
PFNGLGETNCONVOLUTIONFILTERARBPROC(GLenum target,GLenum format,GLenum type,GLsizei bufSize,void * image)typedef void<glext.h>
PFNGLGETNCONVOLUTIONFILTERPROC(GLenum target,GLenum format,GLenum type,GLsizei bufSize,void * image)typedef void<glext.h>
PFNGLGETNEXTPERFQUERYIDINTELPROC(GLuint queryId,GLuint * nextQueryId)typedef void<glext.h>
PFNGLGETNHISTOGRAMARBPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,GLsizei bufSize,void * values)typedef void<glext.h>
PFNGLGETNHISTOGRAMPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,GLsizei bufSize,void * values)typedef void<glext.h>
PFNGLGETNMAPDVARBPROC(GLenum target,GLenum query,GLsizei bufSize,GLdouble * v)typedef void<glext.h>
PFNGLGETNMAPDVPROC(GLenum target,GLenum query,GLsizei bufSize,GLdouble * v)typedef void<glext.h>
PFNGLGETNMAPFVARBPROC(GLenum target,GLenum query,GLsizei bufSize,GLfloat * v)typedef void<glext.h>
PFNGLGETNMAPFVPROC(GLenum target,GLenum query,GLsizei bufSize,GLfloat * v)typedef void<glext.h>
PFNGLGETNMAPIVARBPROC(GLenum target,GLenum query,GLsizei bufSize,GLint * v)typedef void<glext.h>
PFNGLGETNMAPIVPROC(GLenum target,GLenum query,GLsizei bufSize,GLint * v)typedef void<glext.h>
PFNGLGETNMINMAXARBPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,GLsizei bufSize,void * values)typedef void<glext.h>
PFNGLGETNMINMAXPROC(GLenum target,GLboolean reset,GLenum format,GLenum type,GLsizei bufSize,void * values)typedef void<glext.h>
PFNGLGETNPIXELMAPFVARBPROC(GLenum map,GLsizei bufSize,GLfloat * values)typedef void<glext.h>
PFNGLGETNPIXELMAPFVPROC(GLenum map,GLsizei bufSize,GLfloat * values)typedef void<glext.h>
PFNGLGETNPIXELMAPUIVARBPROC(GLenum map,GLsizei bufSize,GLuint * values)typedef void<glext.h>
PFNGLGETNPIXELMAPUIVPROC(GLenum map,GLsizei bufSize,GLuint * values)typedef void<glext.h>
PFNGLGETNPIXELMAPUSVARBPROC(GLenum map,GLsizei bufSize,GLushort * values)typedef void<glext.h>
PFNGLGETNPIXELMAPUSVPROC(GLenum map,GLsizei bufSize,GLushort * values)typedef void<glext.h>
PFNGLGETNPOLYGONSTIPPLEARBPROC(GLsizei bufSize,GLubyte * pattern)typedef void<glext.h>
PFNGLGETNPOLYGONSTIPPLEPROC(GLsizei bufSize,GLubyte * pattern)typedef void<glext.h>
PFNGLGETNSEPARABLEFILTERARBPROC(GLenum target,GLenum format,GLenum type,GLsizei rowBufSize,void * row,GLsizei columnBufSize,void * column,void * span)typedef void<glext.h>
PFNGLGETNSEPARABLEFILTERPROC(GLenum target,GLenum format,GLenum type,GLsizei rowBufSize,void * row,GLsizei columnBufSize,void * column,void * span)typedef void<glext.h>
PFNGLGETNTEXIMAGEARBPROC(GLenum target,GLint level,GLenum format,GLenum type,GLsizei bufSize,void * img)typedef void<glext.h>
PFNGLGETNTEXIMAGEPROC(GLenum target,GLint level,GLenum format,GLenum type,GLsizei bufSize,void * pixels)typedef void<glext.h>
PFNGLGETNUNIFORMDVARBPROC(GLuint program,GLint location,GLsizei bufSize,GLdouble * params)typedef void<glext.h>
PFNGLGETNUNIFORMDVPROC(GLuint program,GLint location,GLsizei bufSize,GLdouble * params)typedef void<glext.h>
PFNGLGETNUNIFORMFVARBPROC(GLuint program,GLint location,GLsizei bufSize,GLfloat * params)typedef void<glext.h>
PFNGLGETNUNIFORMFVPROC(GLuint program,GLint location,GLsizei bufSize,GLfloat * params)typedef void<glext.h>
PFNGLGETNUNIFORMIVARBPROC(GLuint program,GLint location,GLsizei bufSize,GLint * params)typedef void<glext.h>
PFNGLGETNUNIFORMIVPROC(GLuint program,GLint location,GLsizei bufSize,GLint * params)typedef void<glext.h>
PFNGLGETNUNIFORMUIVARBPROC(GLuint program,GLint location,GLsizei bufSize,GLuint * params)typedef void<glext.h>
PFNGLGETNUNIFORMUIVPROC(GLuint program,GLint location,GLsizei bufSize,GLuint * params)typedef void<glext.h>
PFNGLGETOBJECTBUFFERFVATIPROC(GLuint buffer,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETOBJECTBUFFERIVATIPROC(GLuint buffer,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETOBJECTLABELEXTPROC(GLenum type,GLuint object,GLsizei bufSize,GLsizei * length,GLchar * label)typedef void<glext.h>
PFNGLGETOBJECTLABELPROC(GLenum identifier,GLuint name,GLsizei bufSize,GLsizei * length,GLchar * label)typedef void<glext.h>
PFNGLGETOBJECTPARAMETERFVARBPROC(GLhandleARB obj,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETOBJECTPARAMETERIVAPPLEPROC(GLenum objectType,GLuint name,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETOBJECTPARAMETERIVARBPROC(GLhandleARB obj,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETOBJECTPTRLABELPROC(const void * ptr,GLsizei bufSize,GLsizei * length,GLchar * label)typedef void<glext.h>
PFNGLGETOCCLUSIONQUERYIVNVPROC(GLuint id,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETOCCLUSIONQUERYUIVNVPROC(GLuint id,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETPATHCOLORGENFVNVPROC(GLenum color,GLenum pname,GLfloat * value)typedef void<glext.h>
PFNGLGETPATHCOLORGENIVNVPROC(GLenum color,GLenum pname,GLint * value)typedef void<glext.h>
PFNGLGETPATHCOMMANDSNVPROC(GLuint path,GLubyte * commands)typedef void<glext.h>
PFNGLGETPATHCOORDSNVPROC(GLuint path,GLfloat * coords)typedef void<glext.h>
PFNGLGETPATHDASHARRAYNVPROC(GLuint path,GLfloat * dashArray)typedef void<glext.h>
PFNGLGETPATHLENGTHNVPROC(GLuint path,GLsizei startSegment,GLsizei numSegments)typedef GLfloat<glext.h>
PFNGLGETPATHMETRICRANGENVPROC(GLbitfield metricQueryMask,GLuint firstPathName,GLsizei numPaths,GLsizei stride,GLfloat * metrics)typedef void<glext.h>
PFNGLGETPATHMETRICSNVPROC(GLbitfield metricQueryMask,GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLsizei stride,GLfloat * metrics)typedef void<glext.h>
PFNGLGETPATHPARAMETERFVNVPROC(GLuint path,GLenum pname,GLfloat * value)typedef void<glext.h>
PFNGLGETPATHPARAMETERIVNVPROC(GLuint path,GLenum pname,GLint * value)typedef void<glext.h>
PFNGLGETPATHSPACINGNVPROC(GLenum pathListMode,GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLfloat advanceScale,GLfloat kerningScale,GLenum transformType,GLfloat * returnedSpacing)typedef void<glext.h>
PFNGLGETPATHTEXGENFVNVPROC(GLenum texCoordSet,GLenum pname,GLfloat * value)typedef void<glext.h>
PFNGLGETPATHTEXGENIVNVPROC(GLenum texCoordSet,GLenum pname,GLint * value)typedef void<glext.h>
PFNGLGETPERFCOUNTERINFOINTELPROC(GLuint queryId,GLuint counterId,GLuint counterNameLength,GLchar * counterName,GLuint counterDescLength,GLchar * counterDesc,GLuint * counterOffset,GLuint * counterDataSize,GLuint * counterTypeEnum,GLuint * counterDataTypeEnum,GLuint64 * rawCounterMaxValue)typedef void<glext.h>
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC(GLuint monitor,GLenum pname,GLsizei dataSize,GLuint * data,GLint * bytesWritten)typedef void<glext.h>
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC(GLuint group,GLuint counter,GLenum pname,void * data)typedef void<glext.h>
PFNGLGETPERFMONITORCOUNTERSAMDPROC(GLuint group,GLint * numCounters,GLint * maxActiveCounters,GLsizei counterSize,GLuint * counters)typedef void<glext.h>
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC(GLuint group,GLuint counter,GLsizei bufSize,GLsizei * length,GLchar * counterString)typedef void<glext.h>
PFNGLGETPERFMONITORGROUPSAMDPROC(GLint * numGroups,GLsizei groupsSize,GLuint * groups)typedef void<glext.h>
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC(GLuint group,GLsizei bufSize,GLsizei * length,GLchar * groupString)typedef void<glext.h>
PFNGLGETPERFQUERYDATAINTELPROC(GLuint queryHandle,GLuint flags,GLsizei dataSize,GLvoid * data,GLuint * bytesWritten)typedef void<glext.h>
PFNGLGETPERFQUERYIDBYNAMEINTELPROC(GLchar * queryName,GLuint * queryId)typedef void<glext.h>
PFNGLGETPERFQUERYINFOINTELPROC(GLuint queryId,GLuint queryNameLength,GLchar * queryName,GLuint * dataSize,GLuint * noCounters,GLuint * noInstances,GLuint * capsMask)typedef void<glext.h>
PFNGLGETPIXELMAPXVPROC(GLenum map,GLint size,GLfixed * values)typedef void<glext.h>
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC(GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC(GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPOINTERI_VEXTPROC(GLenum pname,GLuint index,void ** params)typedef void<glext.h>
PFNGLGETPOINTERINDEXEDVEXTPROC(GLenum target,GLuint index,void ** data)typedef void<glext.h>
PFNGLGETPOINTERVEXTPROC(GLenum pname,GLvoid ** params)typedef void<glext.h>
PFNGLGETPOINTERVEXTPROC(GLenum pname,void ** params)typedef void<glext.h>
PFNGLGETPOINTERVPROC(GLenum pname,void ** params)typedef void<glcorearb.h>
PFNGLGETPROGRAMBINARYPROC(GLuint program,GLsizei bufSize,GLsizei * length,GLenum * binaryFormat,void * binary)typedef void<glext.h>
PFNGLGETPROGRAMENVPARAMETERDVARBPROC(GLenum target,GLuint index,GLdouble * params)typedef void<glext.h>
PFNGLGETPROGRAMENVPARAMETERFVARBPROC(GLenum target,GLuint index,GLfloat * params)typedef void<glext.h>
PFNGLGETPROGRAMENVPARAMETERIIVNVPROC(GLenum target,GLuint index,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC(GLenum target,GLuint index,GLuint * params)typedef void<glext.h>
PFNGLGETPROGRAMINFOLOGPROC(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)typedef void<glext.h>
PFNGLGETPROGRAMINTERFACEIVPROC(GLuint program,GLenum programInterface,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMIVARBPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMIVNVPROC(GLuint id,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMIVPROC(GLuint program,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC(GLenum target,GLuint index,GLdouble * params)typedef void<glext.h>
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC(GLenum target,GLuint index,GLfloat * params)typedef void<glext.h>
PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC(GLenum target,GLuint index,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC(GLenum target,GLuint index,GLuint * params)typedef void<glext.h>
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC(GLuint id,GLsizei len,const GLubyte * name,GLdouble * params)typedef void<glext.h>
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC(GLuint id,GLsizei len,const GLubyte * name,GLfloat * params)typedef void<glext.h>
PFNGLGETPROGRAMPARAMETERDVNVPROC(GLenum target,GLuint index,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETPROGRAMPARAMETERFVNVPROC(GLenum target,GLuint index,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETPROGRAMPIPELINEINFOLOGPROC(GLuint pipeline,GLsizei bufSize,GLsizei * length,GLchar * infoLog)typedef void<glext.h>
PFNGLGETPROGRAMPIPELINEIVPROC(GLuint pipeline,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMRESOURCEFVNVPROC(GLuint program,GLenum programInterface,GLuint index,GLsizei propCount,const GLenum * props,GLsizei bufSize,GLsizei * length,GLfloat * params)typedef void<glext.h>
PFNGLGETPROGRAMRESOURCEINDEXPROC(GLuint program,GLenum programInterface,const GLchar * name)typedef GLuint<glext.h>
PFNGLGETPROGRAMRESOURCEIVPROC(GLuint program,GLenum programInterface,GLuint index,GLsizei propCount,const GLenum * props,GLsizei bufSize,GLsizei * length,GLint * params)typedef void<glext.h>
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC(GLuint program,GLenum programInterface,const GLchar * name)typedef GLint<glext.h>
PFNGLGETPROGRAMRESOURCELOCATIONPROC(GLuint program,GLenum programInterface,const GLchar * name)typedef GLint<glext.h>
PFNGLGETPROGRAMRESOURCENAMEPROC(GLuint program,GLenum programInterface,GLuint index,GLsizei bufSize,GLsizei * length,GLchar * name)typedef void<glext.h>
PFNGLGETPROGRAMSTAGEIVPROC(GLuint program,GLenum shadertype,GLenum pname,GLint * values)typedef void<glext.h>
PFNGLGETPROGRAMSTRINGARBPROC(GLenum target,GLenum pname,void * string)typedef void<glext.h>
PFNGLGETPROGRAMSTRINGNVPROC(GLuint id,GLenum pname,GLubyte * program)typedef void<glext.h>
PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC(GLenum target,GLuint index,GLuint * param)typedef void<glext.h>
PFNGLGETQUERYBUFFEROBJECTI64VPROC(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)typedef void<glext.h>
PFNGLGETQUERYBUFFEROBJECTIVPROC(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)typedef void<glext.h>
PFNGLGETQUERYBUFFEROBJECTUI64VPROC(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)typedef void<glext.h>
PFNGLGETQUERYBUFFEROBJECTUIVPROC(GLuint id,GLuint buffer,GLenum pname,GLintptr offset)typedef void<glext.h>
PFNGLGETQUERYINDEXEDIVPROC(GLenum target,GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETQUERYIVARBPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETQUERYIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTI64VEXTPROC(GLuint id,GLenum pname,GLint64 * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTI64VPROC(GLuint id,GLenum pname,GLint64 * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTIVARBPROC(GLuint id,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTIVPROC(GLuint id,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTUI64VEXTPROC(GLuint id,GLenum pname,GLuint64 * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTUI64VPROC(GLuint id,GLenum pname,GLuint64 * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTUIVARBPROC(GLuint id,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETQUERYOBJECTUIVPROC(GLuint id,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETRENDERBUFFERPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETSAMPLERPARAMETERFVPROC(GLuint sampler,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETSAMPLERPARAMETERIIVPROC(GLuint sampler,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETSAMPLERPARAMETERIUIVPROC(GLuint sampler,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETSAMPLERPARAMETERIVPROC(GLuint sampler,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETSEPARABLEFILTEREXTPROC(GLenum target,GLenum format,GLenum type,void * row,void * column,void * span)typedef void<glext.h>
PFNGLGETSEPARABLEFILTERPROC(GLenum target,GLenum format,GLenum type,void * row,void * column,void * span)typedef void<glext.h>
PFNGLGETSHADERINFOLOGPROC(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)typedef void<glext.h>
PFNGLGETSHADERIVPROC(GLuint shader,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETSHADERPRECISIONFORMATPROC(GLenum shadertype,GLenum precisiontype,GLint * range,GLint * precision)typedef void<glext.h>
PFNGLGETSHADERSOURCEARBPROC(GLhandleARB obj,GLsizei maxLength,GLsizei * length,GLcharARB * source)typedef void<glext.h>
PFNGLGETSHADERSOURCEPROC(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * source)typedef void<glext.h>
PFNGLGETSHARPENTEXFUNCSGISPROC(GLenum target,GLfloat * points)typedef void<glext.h>
PFNGLGETSTRINGIPROC(GLenum name,GLuint index)typedef const GLubyte<glext.h>
PFNGLGETSTRINGPROC(GLenum name)typedef const GLubyte<glcorearb.h>
PFNGLGETSUBROUTINEINDEXPROC(GLuint program,GLenum shadertype,const GLchar * name)typedef GLuint<glext.h>
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC(GLuint program,GLenum shadertype,const GLchar * name)typedef GLint<glext.h>
PFNGLGETSYNCIVPROC(GLsync sync,GLenum pname,GLsizei bufSize,GLsizei * length,GLint * values)typedef void<glext.h>
PFNGLGETTEXBUMPPARAMETERFVATIPROC(GLenum pname,GLfloat * param)typedef void<glext.h>
PFNGLGETTEXBUMPPARAMETERIVATIPROC(GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETTEXENVXVOESPROC(GLenum target,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETTEXFILTERFUNCSGISPROC(GLenum target,GLenum filter,GLfloat * weights)typedef void<glext.h>
PFNGLGETTEXGENXVOESPROC(GLenum coord,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETTEXIMAGEPROC(GLenum target,GLint level,GLenum format,GLenum type,void * pixels)typedef void<glcorearb.h>
PFNGLGETTEXLEVELPARAMETERFVPROC(GLenum target,GLint level,GLenum pname,GLfloat * params)typedef void<glcorearb.h>
PFNGLGETTEXLEVELPARAMETERIVPROC(GLenum target,GLint level,GLenum pname,GLint * params)typedef void<glcorearb.h>
PFNGLGETTEXLEVELPARAMETERXVOESPROC(GLenum target,GLint level,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETTEXPARAMETERFVPROC(GLenum target,GLenum pname,GLfloat * params)typedef void<glcorearb.h>
PFNGLGETTEXPARAMETERIIVEXTPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXPARAMETERIIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXPARAMETERIUIVEXTPROC(GLenum target,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETTEXPARAMETERIUIVPROC(GLenum target,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETTEXPARAMETERIVPROC(GLenum target,GLenum pname,GLint * params)typedef void<glcorearb.h>
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC(GLenum target,GLenum pname,void ** params)typedef void<glext.h>
PFNGLGETTEXPARAMETERXVOESPROC(GLenum target,GLenum pname,GLfixed * params)typedef void<glext.h>
PFNGLGETTEXTUREHANDLEARBPROC(GLuint texture)typedef GLuint64<glext.h>
PFNGLGETTEXTUREHANDLENVPROC(GLuint texture)typedef GLuint64<glext.h>
PFNGLGETTEXTUREIMAGEEXTPROC(GLuint texture,GLenum target,GLint level,GLenum format,GLenum type,void * pixels)typedef void<glext.h>
PFNGLGETTEXTUREIMAGEPROC(GLuint texture,GLint level,GLenum format,GLenum type,GLsizei bufSize,void * pixels)typedef void<glext.h>
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC(GLuint texture,GLenum target,GLint level,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETTEXTURELEVELPARAMETERFVPROC(GLuint texture,GLint level,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC(GLuint texture,GLenum target,GLint level,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXTURELEVELPARAMETERIVPROC(GLuint texture,GLint level,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERFVEXTPROC(GLuint texture,GLenum target,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERFVPROC(GLuint texture,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERIIVEXTPROC(GLuint texture,GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERIIVPROC(GLuint texture,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC(GLuint texture,GLenum target,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERIUIVPROC(GLuint texture,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERIVEXTPROC(GLuint texture,GLenum target,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXTUREPARAMETERIVPROC(GLuint texture,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTEXTURESAMPLERHANDLEARBPROC(GLuint texture,GLuint sampler)typedef GLuint64<glext.h>
PFNGLGETTEXTURESAMPLERHANDLENVPROC(GLuint texture,GLuint sampler)typedef GLuint64<glext.h>
PFNGLGETTEXTURESUBIMAGEPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,GLsizei bufSize,void * pixels)typedef void<glext.h>
PFNGLGETTRACKMATRIXIVNVPROC(GLenum target,GLuint address,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETTRANSFORMFEEDBACKI64_VPROC(GLuint xfb,GLenum pname,GLuint index,GLint64 * param)typedef void<glext.h>
PFNGLGETTRANSFORMFEEDBACKI_VPROC(GLuint xfb,GLenum pname,GLuint index,GLint * param)typedef void<glext.h>
PFNGLGETTRANSFORMFEEDBACKIVPROC(GLuint xfb,GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLsizei * size,GLenum * type,GLchar * name)typedef void<glext.h>
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC(GLuint program,GLuint index,GLint * location)typedef void<glext.h>
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLsizei * size,GLenum * type,GLchar * name)typedef void<glext.h>
PFNGLGETUNIFORMBLOCKINDEXPROC(GLuint program,const GLchar * uniformBlockName)typedef GLuint<glext.h>
PFNGLGETUNIFORMBUFFERSIZEEXTPROC(GLuint program,GLint location)typedef GLint<glext.h>
PFNGLGETUNIFORMDVPROC(GLuint program,GLint location,GLdouble * params)typedef void<glext.h>
PFNGLGETUNIFORMFVARBPROC(GLhandleARB programObj,GLint location,GLfloat * params)typedef void<glext.h>
PFNGLGETUNIFORMFVPROC(GLuint program,GLint location,GLfloat * params)typedef void<glext.h>
PFNGLGETUNIFORMI64VNVPROC(GLuint program,GLint location,GLint64EXT * params)typedef void<glext.h>
PFNGLGETUNIFORMINDICESPROC(GLuint program,GLsizei uniformCount,const GLchar * const * uniformNames,GLuint * uniformIndices)typedef void<glext.h>
PFNGLGETUNIFORMIVARBPROC(GLhandleARB programObj,GLint location,GLint * params)typedef void<glext.h>
PFNGLGETUNIFORMIVPROC(GLuint program,GLint location,GLint * params)typedef void<glext.h>
PFNGLGETUNIFORMLOCATIONARBPROC(GLhandleARB programObj,const GLcharARB * name)typedef GLint<glext.h>
PFNGLGETUNIFORMLOCATIONPROC(GLuint program,const GLchar * name)typedef GLint<glext.h>
PFNGLGETUNIFORMOFFSETEXTPROC(GLuint program,GLint location)typedef GLintptr<glext.h>
PFNGLGETUNIFORMSUBROUTINEUIVPROC(GLenum shadertype,GLint location,GLuint * params)typedef void<glext.h>
PFNGLGETUNIFORMUI64VNVPROC(GLuint program,GLint location,GLuint64EXT * params)typedef void<glext.h>
PFNGLGETUNIFORMUIVEXTPROC(GLuint program,GLint location,GLuint * params)typedef void<glext.h>
PFNGLGETUNIFORMUIVPROC(GLuint program,GLint location,GLuint * params)typedef void<glext.h>
PFNGLGETVARIANTARRAYOBJECTFVATIPROC(GLuint id,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETVARIANTARRAYOBJECTIVATIPROC(GLuint id,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVARIANTBOOLEANVEXTPROC(GLuint id,GLenum value,GLboolean * data)typedef void<glext.h>
PFNGLGETVARIANTFLOATVEXTPROC(GLuint id,GLenum value,GLfloat * data)typedef void<glext.h>
PFNGLGETVARIANTINTEGERVEXTPROC(GLuint id,GLenum value,GLint * data)typedef void<glext.h>
PFNGLGETVARIANTPOINTERVEXTPROC(GLuint id,GLenum value,void ** data)typedef void<glext.h>
PFNGLGETVARYINGLOCATIONNVPROC(GLuint program,const GLchar * name)typedef GLint<glext.h>
PFNGLGETVERTEXARRAYINDEXED64IVPROC(GLuint vaobj,GLuint index,GLenum pname,GLint64 * param)typedef void<glext.h>
PFNGLGETVERTEXARRAYINDEXEDIVPROC(GLuint vaobj,GLuint index,GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC(GLuint vaobj,GLuint index,GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETVERTEXARRAYINTEGERVEXTPROC(GLuint vaobj,GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETVERTEXARRAYIVPROC(GLuint vaobj,GLenum pname,GLint * param)typedef void<glext.h>
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC(GLuint vaobj,GLuint index,GLenum pname,void ** param)typedef void<glext.h>
PFNGLGETVERTEXARRAYPOINTERVEXTPROC(GLuint vaobj,GLenum pname,void ** param)typedef void<glext.h>
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC(GLuint index,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC(GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBDVARBPROC(GLuint index,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBDVNVPROC(GLuint index,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBDVPROC(GLuint index,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBFVARBPROC(GLuint index,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBFVNVPROC(GLuint index,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBFVPROC(GLuint index,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIIVEXTPROC(GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIIVPROC(GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIUIVEXTPROC(GLuint index,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIUIVPROC(GLuint index,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIVARBPROC(GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIVNVPROC(GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBIVPROC(GLuint index,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBLDVEXTPROC(GLuint index,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBLDVPROC(GLuint index,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBLI64VNVPROC(GLuint index,GLenum pname,GLint64EXT * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBLUI64VARBPROC(GLuint index,GLenum pname,GLuint64EXT * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBLUI64VNVPROC(GLuint index,GLenum pname,GLuint64EXT * params)typedef void<glext.h>
PFNGLGETVERTEXATTRIBPOINTERVARBPROC(GLuint index,GLenum pname,void ** pointer)typedef void<glext.h>
PFNGLGETVERTEXATTRIBPOINTERVNVPROC(GLuint index,GLenum pname,void ** pointer)typedef void<glext.h>
PFNGLGETVERTEXATTRIBPOINTERVPROC(GLuint index,GLenum pname,void ** pointer)typedef void<glext.h>
PFNGLGETVIDEOCAPTUREIVNVPROC(GLuint video_capture_slot,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC(GLuint video_capture_slot,GLuint stream,GLenum pname,GLdouble * params)typedef void<glext.h>
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC(GLuint video_capture_slot,GLuint stream,GLenum pname,GLfloat * params)typedef void<glext.h>
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC(GLuint video_capture_slot,GLuint stream,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVIDEOI64VNVPROC(GLuint video_slot,GLenum pname,GLint64EXT * params)typedef void<glext.h>
PFNGLGETVIDEOIVNVPROC(GLuint video_slot,GLenum pname,GLint * params)typedef void<glext.h>
PFNGLGETVIDEOUI64VNVPROC(GLuint video_slot,GLenum pname,GLuint64EXT * params)typedef void<glext.h>
PFNGLGETVIDEOUIVNVPROC(GLuint video_slot,GLenum pname,GLuint * params)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORBSUNPROC(GLbyte factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORDSUNPROC(GLdouble factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORFSUNPROC(GLfloat factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORISUNPROC(GLint factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORSSUNPROC(GLshort factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORUBSUNPROC(GLubyte factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORUISUNPROC(GLuint factor)typedef void<glext.h>
PFNGLGLOBALALPHAFACTORUSSUNPROC(GLushort factor)typedef void<glext.h>
PFNGLHINTPGIPROC(GLenum target,GLint mode)typedef void<glext.h>
PFNGLHINTPROC(GLenum target,GLenum mode)typedef void<glcorearb.h>
PFNGLHISTOGRAMEXTPROC(GLenum target,GLsizei width,GLenum internalformat,GLboolean sink)typedef void<glext.h>
PFNGLHISTOGRAMPROC(GLenum target,GLsizei width,GLenum internalformat,GLboolean sink)typedef void<glext.h>
PFNGLIGLOOINTERFACESGIXPROC(GLenum pname,const void * params)typedef void<glext.h>
PFNGLIMAGETRANSFORMPARAMETERFHPPROC(GLenum target,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLIMAGETRANSFORMPARAMETERIHPPROC(GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLIMPORTSYNCEXTPROC(GLenum external_sync_type,GLintptr external_sync,GLbitfield flags)typedef GLsync<glext.h>
PFNGLINDEXFORMATNVPROC(GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLINDEXFUNCEXTPROC(GLenum func,GLclampf ref)typedef void<glext.h>
PFNGLINDEXMATERIALEXTPROC(GLenum face,GLenum mode)typedef void<glext.h>
PFNGLINDEXPOINTEREXTPROC(GLenum type,GLsizei stride,GLsizei count,const GLvoid * pointer)typedef void<glext.h>
PFNGLINDEXPOINTEREXTPROC(GLenum type,GLsizei stride,GLsizei count,const void * pointer)typedef void<glext.h>
PFNGLINDEXPOINTERLISTIBMPROC(GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLINDEXXOESPROC(GLfixed component)typedef void<glext.h>
PFNGLINDEXXVOESPROC(const GLfixed * component)typedef void<glext.h>
PFNGLINSERTCOMPONENTEXTPROC(GLuint res,GLuint src,GLuint num)typedef void<glext.h>
PFNGLINSERTEVENTMARKEREXTPROC(GLsizei length,const GLchar * marker)typedef void<glext.h>
PFNGLINSTRUMENTSBUFFERSGIXPROC(GLsizei size,GLint * buffer)typedef void<glext.h>
PFNGLINTERPOLATEPATHSNVPROC(GLuint resultPath,GLuint pathA,GLuint pathB,GLfloat weight)typedef void<glext.h>
PFNGLINVALIDATEBUFFERDATAPROC(GLuint buffer)typedef void<glext.h>
PFNGLINVALIDATEBUFFERSUBDATAPROC(GLuint buffer,GLintptr offset,GLsizeiptr length)typedef void<glext.h>
PFNGLINVALIDATEFRAMEBUFFERPROC(GLenum target,GLsizei numAttachments,const GLenum * attachments)typedef void<glext.h>
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC(GLuint framebuffer,GLsizei numAttachments,const GLenum * attachments)typedef void<glext.h>
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC(GLuint framebuffer,GLsizei numAttachments,const GLenum * attachments,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLINVALIDATESUBFRAMEBUFFERPROC(GLenum target,GLsizei numAttachments,const GLenum * attachments,GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLINVALIDATETEXIMAGEPROC(GLuint texture,GLint level)typedef void<glext.h>
PFNGLINVALIDATETEXSUBIMAGEPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth)typedef void<glext.h>
PFNGLISASYNCMARKERSGIXPROC(GLuint marker)typedef GLboolean<glext.h>
PFNGLISBUFFERARBPROC(GLuint buffer)typedef GLboolean<glext.h>
PFNGLISBUFFERPROC(GLuint buffer)typedef GLboolean<glext.h>
PFNGLISBUFFERRESIDENTNVPROC(GLenum target)typedef GLboolean<glext.h>
PFNGLISENABLEDINDEXEDEXTPROC(GLenum target,GLuint index)typedef GLboolean<glext.h>
PFNGLISENABLEDIPROC(GLenum target,GLuint index)typedef GLboolean<glext.h>
PFNGLISENABLEDPROC(GLenum cap)typedef GLboolean<glcorearb.h>
PFNGLISFENCEAPPLEPROC(GLuint fence)typedef GLboolean<glext.h>
PFNGLISFENCENVPROC(GLuint fence)typedef GLboolean<glext.h>
PFNGLISFRAMEBUFFEREXTPROC(GLuint framebuffer)typedef GLboolean<glext.h>
PFNGLISFRAMEBUFFERPROC(GLuint framebuffer)typedef GLboolean<glext.h>
PFNGLISIMAGEHANDLERESIDENTARBPROC(GLuint64 handle)typedef GLboolean<glext.h>
PFNGLISIMAGEHANDLERESIDENTNVPROC(GLuint64 handle)typedef GLboolean<glext.h>
PFNGLISNAMEAMDPROC(GLenum identifier,GLuint name)typedef GLboolean<glext.h>
PFNGLISNAMEDBUFFERRESIDENTNVPROC(GLuint buffer)typedef GLboolean<glext.h>
PFNGLISNAMEDSTRINGARBPROC(GLint namelen,const GLchar * name)typedef GLboolean<glext.h>
PFNGLISOBJECTBUFFERATIPROC(GLuint buffer)typedef GLboolean<glext.h>
PFNGLISOCCLUSIONQUERYNVPROC(GLuint id)typedef GLboolean<glext.h>
PFNGLISPATHNVPROC(GLuint path)typedef GLboolean<glext.h>
PFNGLISPOINTINFILLPATHNVPROC(GLuint path,GLuint mask,GLfloat x,GLfloat y)typedef GLboolean<glext.h>
PFNGLISPOINTINSTROKEPATHNVPROC(GLuint path,GLfloat x,GLfloat y)typedef GLboolean<glext.h>
PFNGLISPROGRAMARBPROC(GLuint program)typedef GLboolean<glext.h>
PFNGLISPROGRAMNVPROC(GLuint id)typedef GLboolean<glext.h>
PFNGLISPROGRAMPIPELINEPROC(GLuint pipeline)typedef GLboolean<glext.h>
PFNGLISPROGRAMPROC(GLuint program)typedef GLboolean<glext.h>
PFNGLISQUERYARBPROC(GLuint id)typedef GLboolean<glext.h>
PFNGLISQUERYPROC(GLuint id)typedef GLboolean<glext.h>
PFNGLISRENDERBUFFEREXTPROC(GLuint renderbuffer)typedef GLboolean<glext.h>
PFNGLISRENDERBUFFERPROC(GLuint renderbuffer)typedef GLboolean<glext.h>
PFNGLISSAMPLERPROC(GLuint sampler)typedef GLboolean<glext.h>
PFNGLISSHADERPROC(GLuint shader)typedef GLboolean<glext.h>
PFNGLISSYNCPROC(GLsync sync)typedef GLboolean<glext.h>
PFNGLISTEXTUREEXTPROC(GLuint texture)typedef GLboolean<glext.h>
PFNGLISTEXTUREHANDLERESIDENTARBPROC(GLuint64 handle)typedef GLboolean<glext.h>
PFNGLISTEXTUREHANDLERESIDENTNVPROC(GLuint64 handle)typedef GLboolean<glext.h>
PFNGLISTEXTUREPROC(GLuint texture)typedef GLboolean<glcorearb.h>
PFNGLISTRANSFORMFEEDBACKNVPROC(GLuint id)typedef GLboolean<glext.h>
PFNGLISTRANSFORMFEEDBACKPROC(GLuint id)typedef GLboolean<glext.h>
PFNGLISVARIANTENABLEDEXTPROC(GLuint id,GLenum cap)typedef GLboolean<glext.h>
PFNGLISVERTEXARRAYAPPLEPROC(GLuint array)typedef GLboolean<glext.h>
PFNGLISVERTEXARRAYPROC(GLuint array)typedef GLboolean<glext.h>
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC(GLuint index,GLenum pname)typedef GLboolean<glext.h>
PFNGLLABELOBJECTEXTPROC(GLenum type,GLuint object,GLsizei length,const GLchar * label)typedef void<glext.h>
PFNGLLIGHTENVISGIXPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLLIGHTMODELXOESPROC(GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLLIGHTMODELXVOESPROC(GLenum pname,const GLfixed * param)typedef void<glext.h>
PFNGLLIGHTXOESPROC(GLenum light,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLLIGHTXVOESPROC(GLenum light,GLenum pname,const GLfixed * params)typedef void<glext.h>
PFNGLLINEWIDTHPROC(GLfloat width)typedef void<glcorearb.h>
PFNGLLINEWIDTHXOESPROC(GLfixed width)typedef void<glext.h>
PFNGLLINKPROGRAMARBPROC(GLhandleARB programObj)typedef void<glext.h>
PFNGLLINKPROGRAMPROC(GLuint program)typedef void<glext.h>
PFNGLLISTPARAMETERFSGIXPROC(GLuint list,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLLISTPARAMETERFVSGIXPROC(GLuint list,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLLISTPARAMETERISGIXPROC(GLuint list,GLenum pname,GLint param)typedef void<glext.h>
PFNGLLISTPARAMETERIVSGIXPROC(GLuint list,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC(GLbitfield mask)typedef void<glext.h>
PFNGLLOADMATRIXXOESPROC(const GLfixed * m)typedef void<glext.h>
PFNGLLOADPROGRAMNVPROC(GLenum target,GLuint id,GLsizei len,const GLubyte * program)typedef void<glext.h>
PFNGLLOADTRANSPOSEMATRIXDARBPROC(const GLdouble * m)typedef void<glext.h>
PFNGLLOADTRANSPOSEMATRIXDPROC(const GLdouble * m)typedef void<glext.h>
PFNGLLOADTRANSPOSEMATRIXFARBPROC(const GLfloat * m)typedef void<glext.h>
PFNGLLOADTRANSPOSEMATRIXFPROC(const GLfloat * m)typedef void<glext.h>
PFNGLLOADTRANSPOSEMATRIXXOESPROC(const GLfixed * m)typedef void<glext.h>
PFNGLLOCKARRAYSEXTPROC(GLint first,GLsizei count)typedef void<glext.h>
PFNGLLOGICOPPROC(GLenum opcode)typedef void<glcorearb.h>
PFNGLMAKEBUFFERNONRESIDENTNVPROC(GLenum target)typedef void<glext.h>
PFNGLMAKEBUFFERRESIDENTNVPROC(GLenum target,GLenum access)typedef void<glext.h>
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC(GLuint64 handle)typedef void<glext.h>
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC(GLuint64 handle)typedef void<glext.h>
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC(GLuint64 handle,GLenum access)typedef void<glext.h>
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC(GLuint64 handle,GLenum access)typedef void<glext.h>
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC(GLuint buffer)typedef void<glext.h>
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC(GLuint buffer,GLenum access)typedef void<glext.h>
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC(GLuint64 handle)typedef void<glext.h>
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC(GLuint64 handle)typedef void<glext.h>
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC(GLuint64 handle)typedef void<glext.h>
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC(GLuint64 handle)typedef void<glext.h>
PFNGLMAP1XOESPROC(GLenum target,GLfixed u1,GLfixed u2,GLint stride,GLint order,GLfixed points)typedef void<glext.h>
PFNGLMAP2XOESPROC(GLenum target,GLfixed u1,GLfixed u2,GLint ustride,GLint uorder,GLfixed v1,GLfixed v2,GLint vstride,GLint vorder,GLfixed points)typedef void<glext.h>
PFNGLMAPBUFFERARBPROC(GLenum target,GLenum access)typedef void<glext.h>
PFNGLMAPBUFFERPROC(GLenum target,GLenum access)typedef void<glext.h>
PFNGLMAPBUFFERRANGEPROC(GLenum target,GLintptr offset,GLsizeiptr length,GLbitfield access)typedef void<glext.h>
PFNGLMAPCONTROLPOINTSNVPROC(GLenum target,GLuint index,GLenum type,GLsizei ustride,GLsizei vstride,GLint uorder,GLint vorder,GLboolean packed,const void * points)typedef void<glext.h>
PFNGLMAPGRID1XOESPROC(GLint n,GLfixed u1,GLfixed u2)typedef void<glext.h>
PFNGLMAPGRID2XOESPROC(GLint n,GLfixed u1,GLfixed u2,GLfixed v1,GLfixed v2)typedef void<glext.h>
PFNGLMAPNAMEDBUFFEREXTPROC(GLuint buffer,GLenum access)typedef void<glext.h>
PFNGLMAPNAMEDBUFFERPROC(GLuint buffer,GLenum access)typedef void<glext.h>
PFNGLMAPNAMEDBUFFERRANGEEXTPROC(GLuint buffer,GLintptr offset,GLsizeiptr length,GLbitfield access)typedef void<glext.h>
PFNGLMAPNAMEDBUFFERRANGEPROC(GLuint buffer,GLintptr offset,GLsizei length,GLbitfield access)typedef void<glext.h>
PFNGLMAPOBJECTBUFFERATIPROC(GLuint buffer)typedef void<glext.h>
PFNGLMAPPARAMETERFVNVPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLMAPPARAMETERIVNVPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLMAPTEXTURE2DINTELPROC(GLuint texture,GLint level,GLbitfield access,GLint * stride,GLenum * layout)typedef void<glext.h>
PFNGLMAPVERTEXATTRIB1DAPPLEPROC(GLuint index,GLuint size,GLdouble u1,GLdouble u2,GLint stride,GLint order,const GLdouble * points)typedef void<glext.h>
PFNGLMAPVERTEXATTRIB1FAPPLEPROC(GLuint index,GLuint size,GLfloat u1,GLfloat u2,GLint stride,GLint order,const GLfloat * points)typedef void<glext.h>
PFNGLMAPVERTEXATTRIB2DAPPLEPROC(GLuint index,GLuint size,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,const GLdouble * points)typedef void<glext.h>
PFNGLMAPVERTEXATTRIB2FAPPLEPROC(GLuint index,GLuint size,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,const GLfloat * points)typedef void<glext.h>
PFNGLMATERIALXOESPROC(GLenum face,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLMATERIALXVOESPROC(GLenum face,GLenum pname,const GLfixed * param)typedef void<glext.h>
PFNGLMATRIXFRUSTUMEXTPROC(GLenum mode,GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)typedef void<glext.h>
PFNGLMATRIXINDEXPOINTERARBPROC(GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLMATRIXINDEXUBVARBPROC(GLint size,const GLubyte * indices)typedef void<glext.h>
PFNGLMATRIXINDEXUIVARBPROC(GLint size,const GLuint * indices)typedef void<glext.h>
PFNGLMATRIXINDEXUSVARBPROC(GLint size,const GLushort * indices)typedef void<glext.h>
PFNGLMATRIXLOAD3X2FNVPROC(GLenum matrixMode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXLOAD3X3FNVPROC(GLenum matrixMode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXLOADDEXTPROC(GLenum mode,const GLdouble * m)typedef void<glext.h>
PFNGLMATRIXLOADFEXTPROC(GLenum mode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXLOADIDENTITYEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC(GLenum matrixMode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXLOADTRANSPOSEDEXTPROC(GLenum mode,const GLdouble * m)typedef void<glext.h>
PFNGLMATRIXLOADTRANSPOSEFEXTPROC(GLenum mode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXMULT3X2FNVPROC(GLenum matrixMode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXMULT3X3FNVPROC(GLenum matrixMode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXMULTDEXTPROC(GLenum mode,const GLdouble * m)typedef void<glext.h>
PFNGLMATRIXMULTFEXTPROC(GLenum mode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC(GLenum matrixMode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXMULTTRANSPOSEDEXTPROC(GLenum mode,const GLdouble * m)typedef void<glext.h>
PFNGLMATRIXMULTTRANSPOSEFEXTPROC(GLenum mode,const GLfloat * m)typedef void<glext.h>
PFNGLMATRIXORTHOEXTPROC(GLenum mode,GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)typedef void<glext.h>
PFNGLMATRIXPOPEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLMATRIXPUSHEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLMATRIXROTATEDEXTPROC(GLenum mode,GLdouble angle,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLMATRIXROTATEFEXTPROC(GLenum mode,GLfloat angle,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLMATRIXSCALEDEXTPROC(GLenum mode,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLMATRIXSCALEFEXTPROC(GLenum mode,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLMATRIXTRANSLATEDEXTPROC(GLenum mode,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLMATRIXTRANSLATEFEXTPROC(GLenum mode,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLMEMORYBARRIERBYREGIONPROC(GLbitfield barriers)typedef void<glext.h>
PFNGLMEMORYBARRIEREXTPROC(GLbitfield barriers)typedef void<glext.h>
PFNGLMEMORYBARRIERPROC(GLbitfield barriers)typedef void<glext.h>
PFNGLMINMAXEXTPROC(GLenum target,GLenum internalformat,GLboolean sink)typedef void<glext.h>
PFNGLMINMAXPROC(GLenum target,GLenum internalformat,GLboolean sink)typedef void<glext.h>
PFNGLMINSAMPLESHADINGARBPROC(GLfloat value)typedef void<glext.h>
PFNGLMINSAMPLESHADINGPROC(GLfloat value)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSEXTPROC(GLenum mode,const GLint * first,const GLsizei * count,GLsizei primcount)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC(GLenum mode,const void * indirect,GLsizei primcount,GLsizei stride)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC(GLenum mode,const void * indirect,GLsizei drawCount,GLsizei maxDrawCount,GLsizei stride,GLint vertexBufferCount)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC(GLenum mode,const void * indirect,GLsizei drawCount,GLsizei stride,GLint vertexBufferCount)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC(GLenum mode,GLintptr indirect,GLintptr drawcount,GLsizei maxdrawcount,GLsizei stride)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSINDIRECTPROC(GLenum mode,const void * indirect,GLsizei drawcount,GLsizei stride)typedef void<glext.h>
PFNGLMULTIDRAWARRAYSPROC(GLenum mode,const GLint * first,const GLsizei * count,GLsizei drawcount)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC(GLenum mode,const GLint * first,const GLsizei * count,GLsizei primcount)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC(GLenum mode,const GLsizei * count,GLenum type,const void * const * indices,GLsizei drawcount,const GLint * basevertex)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSEXTPROC(GLenum mode,const GLsizei * count,GLenum type,const void * const * indices,GLsizei primcount)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC(GLenum mode,GLenum type,const void * indirect,GLsizei primcount,GLsizei stride)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC(GLenum mode,GLenum type,const void * indirect,GLsizei drawCount,GLsizei maxDrawCount,GLsizei stride,GLint vertexBufferCount)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC(GLenum mode,GLenum type,const void * indirect,GLsizei drawCount,GLsizei stride,GLint vertexBufferCount)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC(GLenum mode,GLenum type,GLintptr indirect,GLintptr drawcount,GLsizei maxdrawcount,GLsizei stride)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSINDIRECTPROC(GLenum mode,GLenum type,const void * indirect,GLsizei drawcount,GLsizei stride)typedef void<glext.h>
PFNGLMULTIDRAWELEMENTSPROC(GLenum mode,const GLsizei * count,GLenum type,const void * const * indices,GLsizei drawcount)typedef void<glext.h>
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC(GLenum mode,GLuint start,GLuint end,const GLint * first,const GLsizei * count,GLsizei primcount)typedef void<glext.h>
PFNGLMULTIMODEDRAWARRAYSIBMPROC(const GLenum * mode,const GLint * first,const GLsizei * count,GLsizei primcount,GLint modestride)typedef void<glext.h>
PFNGLMULTIMODEDRAWELEMENTSIBMPROC(const GLenum * mode,const GLsizei * count,GLenum type,const void * const * indices,GLsizei primcount,GLint modestride)typedef void<glext.h>
PFNGLMULTITEXBUFFEREXTPROC(GLenum texunit,GLenum target,GLenum internalformat,GLuint buffer)typedef void<glext.h>
PFNGLMULTITEXCOORD1BOESPROC(GLenum texture,GLbyte s)typedef void<glext.h>
PFNGLMULTITEXCOORD1BVOESPROC(GLenum texture,const GLbyte * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD1DARBPROC(GLenum target,GLdouble s)typedef void<glext.h>
PFNGLMULTITEXCOORD1DPROC(GLenum target,GLdouble s)typedef void<glext.h>
PFNGLMULTITEXCOORD1DVARBPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1DVPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1FARBPROC(GLenum target,GLfloat s)typedef void<glext.h>
PFNGLMULTITEXCOORD1FPROC(GLenum target,GLfloat s)typedef void<glext.h>
PFNGLMULTITEXCOORD1FVARBPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1FVPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1HNVPROC(GLenum target,GLhalfNV s)typedef void<glext.h>
PFNGLMULTITEXCOORD1HVNVPROC(GLenum target,const GLhalfNV * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1IARBPROC(GLenum target,GLint s)typedef void<glext.h>
PFNGLMULTITEXCOORD1IPROC(GLenum target,GLint s)typedef void<glext.h>
PFNGLMULTITEXCOORD1IVARBPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1IVPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1SARBPROC(GLenum target,GLshort s)typedef void<glext.h>
PFNGLMULTITEXCOORD1SPROC(GLenum target,GLshort s)typedef void<glext.h>
PFNGLMULTITEXCOORD1SVARBPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1SVPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD1XOESPROC(GLenum texture,GLfixed s)typedef void<glext.h>
PFNGLMULTITEXCOORD1XVOESPROC(GLenum texture,const GLfixed * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD2BOESPROC(GLenum texture,GLbyte s,GLbyte t)typedef void<glext.h>
PFNGLMULTITEXCOORD2BVOESPROC(GLenum texture,const GLbyte * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD2DARBPROC(GLenum target,GLdouble s,GLdouble t)typedef void<glext.h>
PFNGLMULTITEXCOORD2DPROC(GLenum target,GLdouble s,GLdouble t)typedef void<glext.h>
PFNGLMULTITEXCOORD2DVARBPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2DVPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2FARBPROC(GLenum target,GLfloat s,GLfloat t)typedef void<glext.h>
PFNGLMULTITEXCOORD2FPROC(GLenum target,GLfloat s,GLfloat t)typedef void<glext.h>
PFNGLMULTITEXCOORD2FVARBPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2FVPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2HNVPROC(GLenum target,GLhalfNV s,GLhalfNV t)typedef void<glext.h>
PFNGLMULTITEXCOORD2HVNVPROC(GLenum target,const GLhalfNV * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2IARBPROC(GLenum target,GLint s,GLint t)typedef void<glext.h>
PFNGLMULTITEXCOORD2IPROC(GLenum target,GLint s,GLint t)typedef void<glext.h>
PFNGLMULTITEXCOORD2IVARBPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2IVPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2SARBPROC(GLenum target,GLshort s,GLshort t)typedef void<glext.h>
PFNGLMULTITEXCOORD2SPROC(GLenum target,GLshort s,GLshort t)typedef void<glext.h>
PFNGLMULTITEXCOORD2SVARBPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2SVPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD2XOESPROC(GLenum texture,GLfixed s,GLfixed t)typedef void<glext.h>
PFNGLMULTITEXCOORD2XVOESPROC(GLenum texture,const GLfixed * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD3BOESPROC(GLenum texture,GLbyte s,GLbyte t,GLbyte r)typedef void<glext.h>
PFNGLMULTITEXCOORD3BVOESPROC(GLenum texture,const GLbyte * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD3DARBPROC(GLenum target,GLdouble s,GLdouble t,GLdouble r)typedef void<glext.h>
PFNGLMULTITEXCOORD3DPROC(GLenum target,GLdouble s,GLdouble t,GLdouble r)typedef void<glext.h>
PFNGLMULTITEXCOORD3DVARBPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3DVPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3FARBPROC(GLenum target,GLfloat s,GLfloat t,GLfloat r)typedef void<glext.h>
PFNGLMULTITEXCOORD3FPROC(GLenum target,GLfloat s,GLfloat t,GLfloat r)typedef void<glext.h>
PFNGLMULTITEXCOORD3FVARBPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3FVPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3HNVPROC(GLenum target,GLhalfNV s,GLhalfNV t,GLhalfNV r)typedef void<glext.h>
PFNGLMULTITEXCOORD3HVNVPROC(GLenum target,const GLhalfNV * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3IARBPROC(GLenum target,GLint s,GLint t,GLint r)typedef void<glext.h>
PFNGLMULTITEXCOORD3IPROC(GLenum target,GLint s,GLint t,GLint r)typedef void<glext.h>
PFNGLMULTITEXCOORD3IVARBPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3IVPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3SARBPROC(GLenum target,GLshort s,GLshort t,GLshort r)typedef void<glext.h>
PFNGLMULTITEXCOORD3SPROC(GLenum target,GLshort s,GLshort t,GLshort r)typedef void<glext.h>
PFNGLMULTITEXCOORD3SVARBPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3SVPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD3XOESPROC(GLenum texture,GLfixed s,GLfixed t,GLfixed r)typedef void<glext.h>
PFNGLMULTITEXCOORD3XVOESPROC(GLenum texture,const GLfixed * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD4BOESPROC(GLenum texture,GLbyte s,GLbyte t,GLbyte r,GLbyte q)typedef void<glext.h>
PFNGLMULTITEXCOORD4BVOESPROC(GLenum texture,const GLbyte * coords)typedef void<glext.h>
PFNGLMULTITEXCOORD4DARBPROC(GLenum target,GLdouble s,GLdouble t,GLdouble r,GLdouble q)typedef void<glext.h>
PFNGLMULTITEXCOORD4DPROC(GLenum target,GLdouble s,GLdouble t,GLdouble r,GLdouble q)typedef void<glext.h>
PFNGLMULTITEXCOORD4DVARBPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4DVPROC(GLenum target,const GLdouble * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4FARBPROC(GLenum target,GLfloat s,GLfloat t,GLfloat r,GLfloat q)typedef void<glext.h>
PFNGLMULTITEXCOORD4FPROC(GLenum target,GLfloat s,GLfloat t,GLfloat r,GLfloat q)typedef void<glext.h>
PFNGLMULTITEXCOORD4FVARBPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4FVPROC(GLenum target,const GLfloat * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4HNVPROC(GLenum target,GLhalfNV s,GLhalfNV t,GLhalfNV r,GLhalfNV q)typedef void<glext.h>
PFNGLMULTITEXCOORD4HVNVPROC(GLenum target,const GLhalfNV * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4IARBPROC(GLenum target,GLint s,GLint t,GLint r,GLint q)typedef void<glext.h>
PFNGLMULTITEXCOORD4IPROC(GLenum target,GLint s,GLint t,GLint r,GLint q)typedef void<glext.h>
PFNGLMULTITEXCOORD4IVARBPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4IVPROC(GLenum target,const GLint * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4SARBPROC(GLenum target,GLshort s,GLshort t,GLshort r,GLshort q)typedef void<glext.h>
PFNGLMULTITEXCOORD4SPROC(GLenum target,GLshort s,GLshort t,GLshort r,GLshort q)typedef void<glext.h>
PFNGLMULTITEXCOORD4SVARBPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4SVPROC(GLenum target,const GLshort * v)typedef void<glext.h>
PFNGLMULTITEXCOORD4XOESPROC(GLenum texture,GLfixed s,GLfixed t,GLfixed r,GLfixed q)typedef void<glext.h>
PFNGLMULTITEXCOORD4XVOESPROC(GLenum texture,const GLfixed * coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP1UIPROC(GLenum texture,GLenum type,GLuint coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP1UIVPROC(GLenum texture,GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP2UIPROC(GLenum texture,GLenum type,GLuint coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP2UIVPROC(GLenum texture,GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP3UIPROC(GLenum texture,GLenum type,GLuint coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP3UIVPROC(GLenum texture,GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP4UIPROC(GLenum texture,GLenum type,GLuint coords)typedef void<glext.h>
PFNGLMULTITEXCOORDP4UIVPROC(GLenum texture,GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLMULTITEXCOORDPOINTEREXTPROC(GLenum texunit,GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLMULTITEXENVFEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLMULTITEXENVFVEXTPROC(GLenum texunit,GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLMULTITEXENVIEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLMULTITEXENVIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLMULTITEXGENDEXTPROC(GLenum texunit,GLenum coord,GLenum pname,GLdouble param)typedef void<glext.h>
PFNGLMULTITEXGENDVEXTPROC(GLenum texunit,GLenum coord,GLenum pname,const GLdouble * params)typedef void<glext.h>
PFNGLMULTITEXGENFEXTPROC(GLenum texunit,GLenum coord,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLMULTITEXGENFVEXTPROC(GLenum texunit,GLenum coord,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLMULTITEXGENIEXTPROC(GLenum texunit,GLenum coord,GLenum pname,GLint param)typedef void<glext.h>
PFNGLMULTITEXGENIVEXTPROC(GLenum texunit,GLenum coord,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLMULTITEXIMAGE1DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLMULTITEXIMAGE2DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLMULTITEXIMAGE3DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLMULTITEXPARAMETERFEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLMULTITEXPARAMETERFVEXTPROC(GLenum texunit,GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLMULTITEXPARAMETERIEXTPROC(GLenum texunit,GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLMULTITEXPARAMETERIIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLMULTITEXPARAMETERIUIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,const GLuint * params)typedef void<glext.h>
PFNGLMULTITEXPARAMETERIVEXTPROC(GLenum texunit,GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLMULTITEXRENDERBUFFEREXTPROC(GLenum texunit,GLenum target,GLuint renderbuffer)typedef void<glext.h>
PFNGLMULTITEXSUBIMAGE1DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLMULTITEXSUBIMAGE2DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLMULTITEXSUBIMAGE3DEXTPROC(GLenum texunit,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLMULTMATRIXXOESPROC(const GLfixed * m)typedef void<glext.h>
PFNGLMULTTRANSPOSEMATRIXDARBPROC(const GLdouble * m)typedef void<glext.h>
PFNGLMULTTRANSPOSEMATRIXDPROC(const GLdouble * m)typedef void<glext.h>
PFNGLMULTTRANSPOSEMATRIXFARBPROC(const GLfloat * m)typedef void<glext.h>
PFNGLMULTTRANSPOSEMATRIXFPROC(const GLfloat * m)typedef void<glext.h>
PFNGLMULTTRANSPOSEMATRIXXOESPROC(const GLfixed * m)typedef void<glext.h>
PFNGLNAMEDBUFFERDATAEXTPROC(GLuint buffer,GLsizeiptr size,const void * data,GLenum usage)typedef void<glext.h>
PFNGLNAMEDBUFFERDATAPROC(GLuint buffer,GLsizei size,const void * data,GLenum usage)typedef void<glext.h>
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC(GLuint buffer,GLintptr offset,GLsizeiptr size,GLboolean commit)typedef void<glext.h>
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC(GLuint buffer,GLintptr offset,GLsizeiptr size,GLboolean commit)typedef void<glext.h>
PFNGLNAMEDBUFFERSTORAGEEXTPROC(GLuint buffer,GLsizeiptr size,const void * data,GLbitfield flags)typedef void<glext.h>
PFNGLNAMEDBUFFERSTORAGEPROC(GLuint buffer,GLsizei size,const void * data,GLbitfield flags)typedef void<glext.h>
PFNGLNAMEDBUFFERSUBDATAEXTPROC(GLuint buffer,GLintptr offset,GLsizeiptr size,const void * data)typedef void<glext.h>
PFNGLNAMEDBUFFERSUBDATAPROC(GLuint buffer,GLintptr offset,GLsizei size,const void * data)typedef void<glext.h>
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC(GLuint readBuffer,GLuint writeBuffer,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC(GLuint framebuffer,GLenum buf)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC(GLuint framebuffer,GLsizei n,const GLenum * bufs)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC(GLuint framebuffer,GLenum pname,GLint param)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC(GLuint framebuffer,GLenum pname,GLint param)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC(GLuint framebuffer,GLenum src)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC(GLuint framebuffer,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC(GLuint framebuffer,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC(GLuint framebuffer,GLuint start,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC(GLuint framebuffer,GLenum attachment,GLenum textarget,GLuint texture,GLint level)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC(GLuint framebuffer,GLenum attachment,GLenum textarget,GLuint texture,GLint level)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC(GLuint framebuffer,GLenum attachment,GLenum textarget,GLuint texture,GLint level,GLint zoffset)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level,GLenum face)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level,GLint layer)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level,GLint layer)typedef void<glext.h>
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC(GLuint program,GLenum target,GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC(GLuint program,GLenum target,GLuint index,const GLdouble * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC(GLuint program,GLenum target,GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC(GLuint program,GLenum target,GLuint index,const GLfloat * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC(GLuint program,GLenum target,GLuint index,GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC(GLuint program,GLenum target,GLuint index,const GLint * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC(GLuint program,GLenum target,GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC(GLuint program,GLenum target,GLuint index,const GLuint * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC(GLuint program,GLenum target,GLuint index,GLsizei count,const GLfloat * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC(GLuint program,GLenum target,GLuint index,GLsizei count,const GLint * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC(GLuint program,GLenum target,GLuint index,GLsizei count,const GLuint * params)typedef void<glext.h>
PFNGLNAMEDPROGRAMSTRINGEXTPROC(GLuint program,GLenum target,GLenum format,GLsizei len,const void * string)typedef void<glext.h>
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC(GLuint renderbuffer,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC(GLuint renderbuffer,GLsizei coverageSamples,GLsizei colorSamples,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC(GLuint renderbuffer,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC(GLuint renderbuffer,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLNAMEDRENDERBUFFERSTORAGEPROC(GLuint renderbuffer,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLNAMEDSTRINGARBPROC(GLenum type,GLint namelen,const GLchar * name,GLint stringlen,const GLchar * string)typedef void<glext.h>
PFNGLNEWOBJECTBUFFERATIPROC(GLsizei size,const void * pointer,GLenum usage)typedef GLuint<glext.h>
PFNGLNORMAL3FVERTEX3FSUNPROC(GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLNORMAL3FVERTEX3FVSUNPROC(const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLNORMAL3HNVPROC(GLhalfNV nx,GLhalfNV ny,GLhalfNV nz)typedef void<glext.h>
PFNGLNORMAL3HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLNORMAL3XOESPROC(GLfixed nx,GLfixed ny,GLfixed nz)typedef void<glext.h>
PFNGLNORMAL3XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLNORMALFORMATNVPROC(GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLNORMALP3UIPROC(GLenum type,GLuint coords)typedef void<glext.h>
PFNGLNORMALP3UIVPROC(GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLNORMALPOINTEREXTPROC(GLenum type,GLsizei stride,GLsizei count,const GLvoid * pointer)typedef void<glext.h>
PFNGLNORMALPOINTEREXTPROC(GLenum type,GLsizei stride,GLsizei count,const void * pointer)typedef void<glext.h>
PFNGLNORMALPOINTERLISTIBMPROC(GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLNORMALPOINTERVINTELPROC(GLenum type,const void ** pointer)typedef void<glext.h>
PFNGLNORMALSTREAM3BATIPROC(GLenum stream,GLbyte nx,GLbyte ny,GLbyte nz)typedef void<glext.h>
PFNGLNORMALSTREAM3BVATIPROC(GLenum stream,const GLbyte * coords)typedef void<glext.h>
PFNGLNORMALSTREAM3DATIPROC(GLenum stream,GLdouble nx,GLdouble ny,GLdouble nz)typedef void<glext.h>
PFNGLNORMALSTREAM3DVATIPROC(GLenum stream,const GLdouble * coords)typedef void<glext.h>
PFNGLNORMALSTREAM3FATIPROC(GLenum stream,GLfloat nx,GLfloat ny,GLfloat nz)typedef void<glext.h>
PFNGLNORMALSTREAM3FVATIPROC(GLenum stream,const GLfloat * coords)typedef void<glext.h>
PFNGLNORMALSTREAM3IATIPROC(GLenum stream,GLint nx,GLint ny,GLint nz)typedef void<glext.h>
PFNGLNORMALSTREAM3IVATIPROC(GLenum stream,const GLint * coords)typedef void<glext.h>
PFNGLNORMALSTREAM3SATIPROC(GLenum stream,GLshort nx,GLshort ny,GLshort nz)typedef void<glext.h>
PFNGLNORMALSTREAM3SVATIPROC(GLenum stream,const GLshort * coords)typedef void<glext.h>
PFNGLOBJECTLABELPROC(GLenum identifier,GLuint name,GLsizei length,const GLchar * label)typedef void<glext.h>
PFNGLOBJECTPTRLABELPROC(const void * ptr,GLsizei length,const GLchar * label)typedef void<glext.h>
PFNGLOBJECTPURGEABLEAPPLEPROC(GLenum objectType,GLuint name,GLenum option)typedef GLenum<glext.h>
PFNGLOBJECTUNPURGEABLEAPPLEPROC(GLenum objectType,GLuint name,GLenum option)typedef GLenum<glext.h>
PFNGLORTHOFOESPROC(GLfloat l,GLfloat r,GLfloat b,GLfloat t,GLfloat n,GLfloat f)typedef void<glext.h>
PFNGLORTHOXOESPROC(GLfixed l,GLfixed r,GLfixed b,GLfixed t,GLfixed n,GLfixed f)typedef void<glext.h>
PFNGLPASSTEXCOORDATIPROC(GLuint dst,GLuint coord,GLenum swizzle)typedef void<glext.h>
PFNGLPASSTHROUGHXOESPROC(GLfixed token)typedef void<glext.h>
PFNGLPATCHPARAMETERFVPROC(GLenum pname,const GLfloat * values)typedef void<glext.h>
PFNGLPATCHPARAMETERIPROC(GLenum pname,GLint value)typedef void<glext.h>
PFNGLPATHCOLORGENNVPROC(GLenum color,GLenum genMode,GLenum colorFormat,const GLfloat * coeffs)typedef void<glext.h>
PFNGLPATHCOMMANDSNVPROC(GLuint path,GLsizei numCommands,const GLubyte * commands,GLsizei numCoords,GLenum coordType,const void * coords)typedef void<glext.h>
PFNGLPATHCOORDSNVPROC(GLuint path,GLsizei numCoords,GLenum coordType,const void * coords)typedef void<glext.h>
PFNGLPATHCOVERDEPTHFUNCNVPROC(GLenum func)typedef void<glext.h>
PFNGLPATHDASHARRAYNVPROC(GLuint path,GLsizei dashCount,const GLfloat * dashArray)typedef void<glext.h>
PFNGLPATHFOGGENNVPROC(GLenum genMode)typedef void<glext.h>
PFNGLPATHGLYPHINDEXARRAYNVPROC(GLuint firstPathName,GLenum fontTarget,const void * fontName,GLbitfield fontStyle,GLuint firstGlyphIndex,GLsizei numGlyphs,GLuint pathParameterTemplate,GLfloat emScale)typedef GLenum<glext.h>
PFNGLPATHGLYPHINDEXRANGENVPROC(GLenum fontTarget,const void * fontName,GLbitfield fontStyle,GLuint pathParameterTemplate,GLfloat emScale,GLuint baseAndCount[2])typedef GLenum<glext.h>
PFNGLPATHGLYPHRANGENVPROC(GLuint firstPathName,GLenum fontTarget,const void * fontName,GLbitfield fontStyle,GLuint firstGlyph,GLsizei numGlyphs,GLenum handleMissingGlyphs,GLuint pathParameterTemplate,GLfloat emScale)typedef void<glext.h>
PFNGLPATHGLYPHSNVPROC(GLuint firstPathName,GLenum fontTarget,const void * fontName,GLbitfield fontStyle,GLsizei numGlyphs,GLenum type,const void * charcodes,GLenum handleMissingGlyphs,GLuint pathParameterTemplate,GLfloat emScale)typedef void<glext.h>
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC(GLuint firstPathName,GLenum fontTarget,GLsizeiptr fontSize,const void * fontData,GLsizei faceIndex,GLuint firstGlyphIndex,GLsizei numGlyphs,GLuint pathParameterTemplate,GLfloat emScale)typedef GLenum<glext.h>
PFNGLPATHPARAMETERFNVPROC(GLuint path,GLenum pname,GLfloat value)typedef void<glext.h>
PFNGLPATHPARAMETERFVNVPROC(GLuint path,GLenum pname,const GLfloat * value)typedef void<glext.h>
PFNGLPATHPARAMETERINVPROC(GLuint path,GLenum pname,GLint value)typedef void<glext.h>
PFNGLPATHPARAMETERIVNVPROC(GLuint path,GLenum pname,const GLint * value)typedef void<glext.h>
PFNGLPATHSTENCILDEPTHOFFSETNVPROC(GLfloat factor,GLfloat units)typedef void<glext.h>
PFNGLPATHSTENCILFUNCNVPROC(GLenum func,GLint ref,GLuint mask)typedef void<glext.h>
PFNGLPATHSTRINGNVPROC(GLuint path,GLenum format,GLsizei length,const void * pathString)typedef void<glext.h>
PFNGLPATHSUBCOMMANDSNVPROC(GLuint path,GLsizei commandStart,GLsizei commandsToDelete,GLsizei numCommands,const GLubyte * commands,GLsizei numCoords,GLenum coordType,const void * coords)typedef void<glext.h>
PFNGLPATHSUBCOORDSNVPROC(GLuint path,GLsizei coordStart,GLsizei numCoords,GLenum coordType,const void * coords)typedef void<glext.h>
PFNGLPATHTEXGENNVPROC(GLenum texCoordSet,GLenum genMode,GLint components,const GLfloat * coeffs)typedef void<glext.h>
PFNGLPAUSETRANSFORMFEEDBACKNVPROC(void)typedef void<glext.h>
PFNGLPAUSETRANSFORMFEEDBACKPROC(void)typedef void<glext.h>
PFNGLPIXELDATARANGENVPROC(GLenum target,GLsizei length,const void * pointer)typedef void<glext.h>
PFNGLPIXELMAPXPROC(GLenum map,GLint size,const GLfixed * values)typedef void<glext.h>
PFNGLPIXELSTOREFPROC(GLenum pname,GLfloat param)typedef void<glcorearb.h>
PFNGLPIXELSTOREIPROC(GLenum pname,GLint param)typedef void<glcorearb.h>
PFNGLPIXELSTOREXPROC(GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLPIXELTEXGENPARAMETERFSGISPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPIXELTEXGENPARAMETERFVSGISPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLPIXELTEXGENPARAMETERISGISPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLPIXELTEXGENPARAMETERIVSGISPROC(GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLPIXELTEXGENSGIXPROC(GLenum mode)typedef void<glext.h>
PFNGLPIXELTRANSFERXOESPROC(GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC(GLenum target,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC(GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLPIXELZOOMXOESPROC(GLfixed xfactor,GLfixed yfactor)typedef void<glext.h>
PFNGLPNTRIANGLESFATIPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPNTRIANGLESIATIPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLPOINTALONGPATHNVPROC(GLuint path,GLsizei startSegment,GLsizei numSegments,GLfloat distance,GLfloat * x,GLfloat * y,GLfloat * tangentX,GLfloat * tangentY)typedef GLboolean<glext.h>
PFNGLPOINTPARAMETERFARBPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPOINTPARAMETERFEXTPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPOINTPARAMETERFPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPOINTPARAMETERFSGISPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLPOINTPARAMETERFVARBPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLPOINTPARAMETERFVEXTPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLPOINTPARAMETERFVPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLPOINTPARAMETERFVSGISPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLPOINTPARAMETERINVPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLPOINTPARAMETERIPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLPOINTPARAMETERIVNVPROC(GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLPOINTPARAMETERIVPROC(GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLPOINTPARAMETERXVOESPROC(GLenum pname,const GLfixed * params)typedef void<glext.h>
PFNGLPOINTSIZEPROC(GLfloat size)typedef void<glcorearb.h>
PFNGLPOINTSIZEXOESPROC(GLfixed size)typedef void<glext.h>
PFNGLPOLLASYNCSGIXPROC(GLuint * markerp)typedef GLint<glext.h>
PFNGLPOLLINSTRUMENTSSGIXPROC(GLint * marker_p)typedef GLint<glext.h>
PFNGLPOLYGONMODEPROC(GLenum face,GLenum mode)typedef void<glcorearb.h>
PFNGLPOLYGONOFFSETCLAMPEXTPROC(GLfloat factor,GLfloat units,GLfloat clamp)typedef void<glext.h>
PFNGLPOLYGONOFFSETEXTPROC(GLfloat factor,GLfloat bias)typedef void<glext.h>
PFNGLPOLYGONOFFSETPROC(GLfloat factor,GLfloat units)typedef void<glcorearb.h>
PFNGLPOLYGONOFFSETXOESPROC(GLfixed factor,GLfixed units)typedef void<glext.h>
PFNGLPOPDEBUGGROUPPROC(void)typedef void<glext.h>
PFNGLPOPGROUPMARKEREXTPROC(void)typedef void<glext.h>
PFNGLPRESENTFRAMEDUALFILLNVPROC(GLuint video_slot,GLuint64EXT minPresentTime,GLuint beginPresentTimeId,GLuint presentDurationId,GLenum type,GLenum target0,GLuint fill0,GLenum target1,GLuint fill1,GLenum target2,GLuint fill2,GLenum target3,GLuint fill3)typedef void<glext.h>
PFNGLPRESENTFRAMEKEYEDNVPROC(GLuint video_slot,GLuint64EXT minPresentTime,GLuint beginPresentTimeId,GLuint presentDurationId,GLenum type,GLenum target0,GLuint fill0,GLuint key0,GLenum target1,GLuint fill1,GLuint key1)typedef void<glext.h>
PFNGLPRIMITIVERESTARTINDEXNVPROC(GLuint index)typedef void<glext.h>
PFNGLPRIMITIVERESTARTINDEXPROC(GLuint index)typedef void<glext.h>
PFNGLPRIMITIVERESTARTNVPROC(void)typedef void<glext.h>
PFNGLPRIORITIZETEXTURESEXTPROC(GLsizei n,const GLuint * textures,const GLclampf * priorities)typedef void<glext.h>
PFNGLPRIORITIZETEXTURESXOESPROC(GLsizei n,const GLuint * textures,const GLfixed * priorities)typedef void<glext.h>
PFNGLPROGRAMBINARYPROC(GLuint program,GLenum binaryFormat,const void * binary,GLsizei length)typedef void<glext.h>
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC(GLenum target,GLuint bindingIndex,GLuint wordIndex,GLsizei count,const GLfloat * params)typedef void<glext.h>
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC(GLenum target,GLuint bindingIndex,GLuint wordIndex,GLsizei count,const GLint * params)typedef void<glext.h>
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC(GLenum target,GLuint bindingIndex,GLuint wordIndex,GLsizei count,const GLuint * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETER4DARBPROC(GLenum target,GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETER4DVARBPROC(GLenum target,GLuint index,const GLdouble * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETER4FARBPROC(GLenum target,GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETER4FVARBPROC(GLenum target,GLuint index,const GLfloat * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERI4INVPROC(GLenum target,GLuint index,GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERI4IVNVPROC(GLenum target,GLuint index,const GLint * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERI4UINVPROC(GLenum target,GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC(GLenum target,GLuint index,const GLuint * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC(GLenum target,GLuint index,GLsizei count,const GLfloat * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC(GLenum target,GLuint index,GLsizei count,const GLint * params)typedef void<glext.h>
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC(GLenum target,GLuint index,GLsizei count,const GLuint * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETER4DARBPROC(GLenum target,GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC(GLenum target,GLuint index,const GLdouble * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETER4FARBPROC(GLenum target,GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC(GLenum target,GLuint index,const GLfloat * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERI4INVPROC(GLenum target,GLuint index,GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC(GLenum target,GLuint index,const GLint * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC(GLenum target,GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC(GLenum target,GLuint index,const GLuint * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC(GLenum target,GLuint index,GLsizei count,const GLfloat * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC(GLenum target,GLuint index,GLsizei count,const GLint * params)typedef void<glext.h>
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC(GLenum target,GLuint index,GLsizei count,const GLuint * params)typedef void<glext.h>
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC(GLuint id,GLsizei len,const GLubyte * name,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC(GLuint id,GLsizei len,const GLubyte * name,const GLdouble * v)typedef void<glext.h>
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC(GLuint id,GLsizei len,const GLubyte * name,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC(GLuint id,GLsizei len,const GLubyte * name,const GLfloat * v)typedef void<glext.h>
PFNGLPROGRAMPARAMETER4DNVPROC(GLenum target,GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLPROGRAMPARAMETER4DVNVPROC(GLenum target,GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLPROGRAMPARAMETER4FNVPROC(GLenum target,GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLPROGRAMPARAMETER4FVNVPROC(GLenum target,GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLPROGRAMPARAMETERIARBPROC(GLuint program,GLenum pname,GLint value)typedef void<glext.h>
PFNGLPROGRAMPARAMETERIEXTPROC(GLuint program,GLenum pname,GLint value)typedef void<glext.h>
PFNGLPROGRAMPARAMETERIPROC(GLuint program,GLenum pname,GLint value)typedef void<glext.h>
PFNGLPROGRAMPARAMETERS4DVNVPROC(GLenum target,GLuint index,GLsizei count,const GLdouble * v)typedef void<glext.h>
PFNGLPROGRAMPARAMETERS4FVNVPROC(GLenum target,GLuint index,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC(GLuint program,GLint location,GLenum genMode,GLint components,const GLfloat * coeffs)typedef void<glext.h>
PFNGLPROGRAMSTRINGARBPROC(GLenum target,GLenum format,GLsizei len,const void * string)typedef void<glext.h>
PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC(GLenum target,GLsizei count,const GLuint * params)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1DEXTPROC(GLuint program,GLint location,GLdouble x)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1DPROC(GLuint program,GLint location,GLdouble v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1DVEXTPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1DVPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1FEXTPROC(GLuint program,GLint location,GLfloat v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1FPROC(GLuint program,GLint location,GLfloat v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1FVEXTPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1FVPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1I64NVPROC(GLuint program,GLint location,GLint64EXT x)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1I64VNVPROC(GLuint program,GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1IEXTPROC(GLuint program,GLint location,GLint v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1IPROC(GLuint program,GLint location,GLint v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1IVEXTPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1IVPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1UI64NVPROC(GLuint program,GLint location,GLuint64EXT x)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1UI64VNVPROC(GLuint program,GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1UIEXTPROC(GLuint program,GLint location,GLuint v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1UIPROC(GLuint program,GLint location,GLuint v0)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1UIVEXTPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM1UIVPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2DEXTPROC(GLuint program,GLint location,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2DPROC(GLuint program,GLint location,GLdouble v0,GLdouble v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2DVEXTPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2DVPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2FEXTPROC(GLuint program,GLint location,GLfloat v0,GLfloat v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2FPROC(GLuint program,GLint location,GLfloat v0,GLfloat v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2FVEXTPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2FVPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2I64NVPROC(GLuint program,GLint location,GLint64EXT x,GLint64EXT y)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2I64VNVPROC(GLuint program,GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2IEXTPROC(GLuint program,GLint location,GLint v0,GLint v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2IPROC(GLuint program,GLint location,GLint v0,GLint v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2IVEXTPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2IVPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2UI64NVPROC(GLuint program,GLint location,GLuint64EXT x,GLuint64EXT y)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2UI64VNVPROC(GLuint program,GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2UIEXTPROC(GLuint program,GLint location,GLuint v0,GLuint v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2UIPROC(GLuint program,GLint location,GLuint v0,GLuint v1)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2UIVEXTPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM2UIVPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3DEXTPROC(GLuint program,GLint location,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3DPROC(GLuint program,GLint location,GLdouble v0,GLdouble v1,GLdouble v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3DVEXTPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3DVPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3FEXTPROC(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3FPROC(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3FVEXTPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3FVPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3I64NVPROC(GLuint program,GLint location,GLint64EXT x,GLint64EXT y,GLint64EXT z)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3I64VNVPROC(GLuint program,GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3IEXTPROC(GLuint program,GLint location,GLint v0,GLint v1,GLint v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3IPROC(GLuint program,GLint location,GLint v0,GLint v1,GLint v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3IVEXTPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3IVPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3UI64NVPROC(GLuint program,GLint location,GLuint64EXT x,GLuint64EXT y,GLuint64EXT z)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3UI64VNVPROC(GLuint program,GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3UIEXTPROC(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3UIPROC(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3UIVEXTPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM3UIVPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4DEXTPROC(GLuint program,GLint location,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4DPROC(GLuint program,GLint location,GLdouble v0,GLdouble v1,GLdouble v2,GLdouble v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4DVEXTPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4DVPROC(GLuint program,GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4FEXTPROC(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4FPROC(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4FVEXTPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4FVPROC(GLuint program,GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4I64NVPROC(GLuint program,GLint location,GLint64EXT x,GLint64EXT y,GLint64EXT z,GLint64EXT w)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4I64VNVPROC(GLuint program,GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4IEXTPROC(GLuint program,GLint location,GLint v0,GLint v1,GLint v2,GLint v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4IPROC(GLuint program,GLint location,GLint v0,GLint v1,GLint v2,GLint v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4IVEXTPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4IVPROC(GLuint program,GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4UI64NVPROC(GLuint program,GLint location,GLuint64EXT x,GLuint64EXT y,GLuint64EXT z,GLuint64EXT w)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4UI64VNVPROC(GLuint program,GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4UIEXTPROC(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4UIPROC(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4UIVEXTPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORM4UIVPROC(GLuint program,GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC(GLuint program,GLint location,GLuint64 value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC(GLuint program,GLint location,GLuint64 value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC(GLuint program,GLint location,GLsizei count,const GLuint64 * values)typedef void<glext.h>
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC(GLuint program,GLint location,GLsizei count,const GLuint64 * values)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMUI64NVPROC(GLuint program,GLint location,GLuint64EXT value)typedef void<glext.h>
PFNGLPROGRAMUNIFORMUI64VNVPROC(GLuint program,GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLPROGRAMVERTEXLIMITNVPROC(GLenum target,GLint limit)typedef void<glext.h>
PFNGLPROVOKINGVERTEXEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLPROVOKINGVERTEXPROC(GLenum mode)typedef void<glext.h>
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC(GLbitfield mask)typedef void<glext.h>
PFNGLPUSHDEBUGGROUPPROC(GLenum source,GLuint id,GLsizei length,const GLchar * message)typedef void<glext.h>
PFNGLPUSHGROUPMARKEREXTPROC(GLsizei length,const GLchar * marker)typedef void<glext.h>
PFNGLQUERYCOUNTERPROC(GLuint id,GLenum target)typedef void<glext.h>
PFNGLQUERYMATRIXXOESPROC(GLfixed * mantissa,GLint * exponent)typedef GLbitfield<glext.h>
PFNGLQUERYOBJECTPARAMETERUIAMDPROC(GLenum target,GLuint id,GLenum pname,GLuint param)typedef void<glext.h>
PFNGLRASTERPOS2XOESPROC(GLfixed x,GLfixed y)typedef void<glext.h>
PFNGLRASTERPOS2XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLRASTERPOS3XOESPROC(GLfixed x,GLfixed y,GLfixed z)typedef void<glext.h>
PFNGLRASTERPOS3XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLRASTERPOS4XOESPROC(GLfixed x,GLfixed y,GLfixed z,GLfixed w)typedef void<glext.h>
PFNGLRASTERPOS4XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLRASTERSAMPLESEXTPROC(GLuint samples,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLREADBUFFERPROC(GLenum src)typedef void<glcorearb.h>
PFNGLREADINSTRUMENTSSGIXPROC(GLint marker)typedef void<glext.h>
PFNGLREADNPIXELSARBPROC(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLsizei bufSize,void * data)typedef void<glext.h>
PFNGLREADNPIXELSPROC(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLsizei bufSize,void * data)typedef void<glext.h>
PFNGLREADPIXELSPROC(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)typedef void<glcorearb.h>
PFNGLRECTXOESPROC(GLfixed x1,GLfixed y1,GLfixed x2,GLfixed y2)typedef void<glext.h>
PFNGLRECTXVOESPROC(const GLfixed * v1,const GLfixed * v2)typedef void<glext.h>
PFNGLREFERENCEPLANESGIXPROC(const GLdouble * equation)typedef void<glext.h>
PFNGLRELEASESHADERCOMPILERPROC(void)typedef void<glext.h>
PFNGLRENDERBUFFERSTORAGEEXTPROC(GLenum target,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC(GLenum target,GLsizei coverageSamples,GLsizei colorSamples,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLRENDERBUFFERSTORAGEPROC(GLenum target,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLREPLACEMENTCODEPOINTERSUNPROC(GLenum type,GLsizei stride,const void ** pointer)typedef void<glext.h>
PFNGLREPLACEMENTCODEUBSUNPROC(GLubyte code)typedef void<glext.h>
PFNGLREPLACEMENTCODEUBVSUNPROC(const GLubyte * code)typedef void<glext.h>
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC(GLuint rc,GLfloat r,GLfloat g,GLfloat b,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * c,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC(GLuint rc,GLfloat r,GLfloat g,GLfloat b,GLfloat a,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * c,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC(GLuint rc,GLubyte r,GLubyte g,GLubyte b,GLubyte a,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC(const GLuint * rc,const GLubyte * c,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC(GLuint rc,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUISUNPROC(GLuint code)typedef void<glext.h>
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC(GLuint rc,GLfloat s,GLfloat t,GLfloat r,GLfloat g,GLfloat b,GLfloat a,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * tc,const GLfloat * c,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC(GLuint rc,GLfloat s,GLfloat t,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * tc,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC(GLuint rc,GLfloat s,GLfloat t,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * tc,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC(GLuint rc,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC(const GLuint * rc,const GLfloat * v)typedef void<glext.h>
PFNGLREPLACEMENTCODEUIVSUNPROC(const GLuint * code)typedef void<glext.h>
PFNGLREPLACEMENTCODEUSSUNPROC(GLushort code)typedef void<glext.h>
PFNGLREPLACEMENTCODEUSVSUNPROC(const GLushort * code)typedef void<glext.h>
PFNGLREQUESTRESIDENTPROGRAMSNVPROC(GLsizei n,const GLuint * programs)typedef void<glext.h>
PFNGLRESETHISTOGRAMEXTPROC(GLenum target)typedef void<glext.h>
PFNGLRESETHISTOGRAMPROC(GLenum target)typedef void<glext.h>
PFNGLRESETMINMAXEXTPROC(GLenum target)typedef void<glext.h>
PFNGLRESETMINMAXPROC(GLenum target)typedef void<glext.h>
PFNGLRESIZEBUFFERSMESAPROC(void)typedef void<glext.h>
PFNGLRESOLVEDEPTHVALUESNVPROC(void)typedef void<glext.h>
PFNGLRESUMETRANSFORMFEEDBACKNVPROC(void)typedef void<glext.h>
PFNGLRESUMETRANSFORMFEEDBACKPROC(void)typedef void<glext.h>
PFNGLROTATEXOESPROC(GLfixed angle,GLfixed x,GLfixed y,GLfixed z)typedef void<glext.h>
PFNGLSAMPLECOVERAGEARBPROC(GLfloat value,GLboolean invert)typedef void<glext.h>
PFNGLSAMPLECOVERAGEOESPROC(GLfixed value,GLboolean invert)typedef void<glext.h>
PFNGLSAMPLECOVERAGEPROC(GLfloat value,GLboolean invert)typedef void<glext.h>
PFNGLSAMPLEMAPATIPROC(GLuint dst,GLuint interp,GLenum swizzle)typedef void<glext.h>
PFNGLSAMPLEMASKEXTPROC(GLclampf value,GLboolean invert)typedef void<glext.h>
PFNGLSAMPLEMASKINDEXEDNVPROC(GLuint index,GLbitfield mask)typedef void<glext.h>
PFNGLSAMPLEMASKIPROC(GLuint maskNumber,GLbitfield mask)typedef void<glext.h>
PFNGLSAMPLEMASKSGISPROC(GLclampf value,GLboolean invert)typedef void<glext.h>
PFNGLSAMPLEPATTERNEXTPROC(GLenum pattern)typedef void<glext.h>
PFNGLSAMPLEPATTERNSGISPROC(GLenum pattern)typedef void<glext.h>
PFNGLSAMPLERPARAMETERFPROC(GLuint sampler,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLSAMPLERPARAMETERFVPROC(GLuint sampler,GLenum pname,const GLfloat * param)typedef void<glext.h>
PFNGLSAMPLERPARAMETERIIVPROC(GLuint sampler,GLenum pname,const GLint * param)typedef void<glext.h>
PFNGLSAMPLERPARAMETERIPROC(GLuint sampler,GLenum pname,GLint param)typedef void<glext.h>
PFNGLSAMPLERPARAMETERIUIVPROC(GLuint sampler,GLenum pname,const GLuint * param)typedef void<glext.h>
PFNGLSAMPLERPARAMETERIVPROC(GLuint sampler,GLenum pname,const GLint * param)typedef void<glext.h>
PFNGLSCALEXOESPROC(GLfixed x,GLfixed y,GLfixed z)typedef void<glext.h>
PFNGLSCISSORARRAYVPROC(GLuint first,GLsizei count,const GLint * v)typedef void<glext.h>
PFNGLSCISSORINDEXEDPROC(GLuint index,GLint left,GLint bottom,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLSCISSORINDEXEDVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLSCISSORPROC(GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glcorearb.h>
PFNGLSECONDARYCOLOR3BEXTPROC(GLbyte red,GLbyte green,GLbyte blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3BPROC(GLbyte red,GLbyte green,GLbyte blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3BVEXTPROC(const GLbyte * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3BVPROC(const GLbyte * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3DEXTPROC(GLdouble red,GLdouble green,GLdouble blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3DPROC(GLdouble red,GLdouble green,GLdouble blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3DVEXTPROC(const GLdouble * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3DVPROC(const GLdouble * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3FEXTPROC(GLfloat red,GLfloat green,GLfloat blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3FPROC(GLfloat red,GLfloat green,GLfloat blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3FVEXTPROC(const GLfloat * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3FVPROC(const GLfloat * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3HNVPROC(GLhalfNV red,GLhalfNV green,GLhalfNV blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3IEXTPROC(GLint red,GLint green,GLint blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3IPROC(GLint red,GLint green,GLint blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3IVEXTPROC(const GLint * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3IVPROC(const GLint * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3SEXTPROC(GLshort red,GLshort green,GLshort blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3SPROC(GLshort red,GLshort green,GLshort blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3SVEXTPROC(const GLshort * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3SVPROC(const GLshort * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UBEXTPROC(GLubyte red,GLubyte green,GLubyte blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UBPROC(GLubyte red,GLubyte green,GLubyte blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UBVEXTPROC(const GLubyte * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UBVPROC(const GLubyte * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UIEXTPROC(GLuint red,GLuint green,GLuint blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UIPROC(GLuint red,GLuint green,GLuint blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UIVEXTPROC(const GLuint * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3UIVPROC(const GLuint * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3USEXTPROC(GLushort red,GLushort green,GLushort blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3USPROC(GLushort red,GLushort green,GLushort blue)typedef void<glext.h>
PFNGLSECONDARYCOLOR3USVEXTPROC(const GLushort * v)typedef void<glext.h>
PFNGLSECONDARYCOLOR3USVPROC(const GLushort * v)typedef void<glext.h>
PFNGLSECONDARYCOLORFORMATNVPROC(GLint size,GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLSECONDARYCOLORP3UIPROC(GLenum type,GLuint color)typedef void<glext.h>
PFNGLSECONDARYCOLORP3UIVPROC(GLenum type,const GLuint * color)typedef void<glext.h>
PFNGLSECONDARYCOLORPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC(GLint size,GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLSECONDARYCOLORPOINTERPROC(GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC(GLuint monitor,GLboolean enable,GLuint group,GLint numCounters,GLuint * counterList)typedef void<glext.h>
PFNGLSEPARABLEFILTER2DEXTPROC(GLenum target,GLenum internalformat,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * row,const void * column)typedef void<glext.h>
PFNGLSEPARABLEFILTER2DPROC(GLenum target,GLenum internalformat,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * row,const void * column)typedef void<glext.h>
PFNGLSETFENCEAPPLEPROC(GLuint fence)typedef void<glext.h>
PFNGLSETFENCENVPROC(GLuint fence,GLenum condition)typedef void<glext.h>
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC(GLuint dst,const GLfloat * value)typedef void<glext.h>
PFNGLSETINVARIANTEXTPROC(GLuint id,GLenum type,const void * addr)typedef void<glext.h>
PFNGLSETLOCALCONSTANTEXTPROC(GLuint id,GLenum type,const void * addr)typedef void<glext.h>
PFNGLSETMULTISAMPLEFVAMDPROC(GLenum pname,GLuint index,const GLfloat * val)typedef void<glext.h>
PFNGLSHADERBINARYPROC(GLsizei count,const GLuint * shaders,GLenum binaryformat,const void * binary,GLsizei length)typedef void<glext.h>
PFNGLSHADEROP1EXTPROC(GLenum op,GLuint res,GLuint arg1)typedef void<glext.h>
PFNGLSHADEROP2EXTPROC(GLenum op,GLuint res,GLuint arg1,GLuint arg2)typedef void<glext.h>
PFNGLSHADEROP3EXTPROC(GLenum op,GLuint res,GLuint arg1,GLuint arg2,GLuint arg3)typedef void<glext.h>
PFNGLSHADERSOURCEARBPROC(GLhandleARB shaderObj,GLsizei count,const GLcharARB ** string,const GLint * length)typedef void<glext.h>
PFNGLSHADERSOURCEPROC(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)typedef void<glext.h>
PFNGLSHADERSTORAGEBLOCKBINDINGPROC(GLuint program,GLuint storageBlockIndex,GLuint storageBlockBinding)typedef void<glext.h>
PFNGLSHARPENTEXFUNCSGISPROC(GLenum target,GLsizei n,const GLfloat * points)typedef void<glext.h>
PFNGLSPRITEPARAMETERFSGIXPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLSPRITEPARAMETERFVSGIXPROC(GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLSPRITEPARAMETERISGIXPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLSPRITEPARAMETERIVSGIXPROC(GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLSTARTINSTRUMENTSSGIXPROC(void)typedef void<glext.h>
PFNGLSTENCILCLEARTAGEXTPROC(GLsizei stencilTagBits,GLuint stencilClearTag)typedef void<glext.h>
PFNGLSTENCILFILLPATHINSTANCEDNVPROC(GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLenum fillMode,GLuint mask,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLSTENCILFILLPATHNVPROC(GLuint path,GLenum fillMode,GLuint mask)typedef void<glext.h>
PFNGLSTENCILFUNCPROC(GLenum func,GLint ref,GLuint mask)typedef void<glcorearb.h>
PFNGLSTENCILFUNCSEPARATEATIPROC(GLenum frontfunc,GLenum backfunc,GLint ref,GLuint mask)typedef void<glext.h>
PFNGLSTENCILFUNCSEPARATEPROC(GLenum face,GLenum func,GLint ref,GLuint mask)typedef void<glext.h>
PFNGLSTENCILMASKPROC(GLuint mask)typedef void<glcorearb.h>
PFNGLSTENCILMASKSEPARATEPROC(GLenum face,GLuint mask)typedef void<glext.h>
PFNGLSTENCILOPPROC(GLenum fail,GLenum zfail,GLenum zpass)typedef void<glcorearb.h>
PFNGLSTENCILOPSEPARATEATIPROC(GLenum face,GLenum sfail,GLenum dpfail,GLenum dppass)typedef void<glext.h>
PFNGLSTENCILOPSEPARATEPROC(GLenum face,GLenum sfail,GLenum dpfail,GLenum dppass)typedef void<glext.h>
PFNGLSTENCILOPVALUEAMDPROC(GLenum face,GLuint value)typedef void<glext.h>
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC(GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLint reference,GLuint mask,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLSTENCILSTROKEPATHNVPROC(GLuint path,GLint reference,GLuint mask)typedef void<glext.h>
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC(GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLenum fillMode,GLuint mask,GLenum coverMode,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLSTENCILTHENCOVERFILLPATHNVPROC(GLuint path,GLenum fillMode,GLuint mask,GLenum coverMode)typedef void<glext.h>
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC(GLsizei numPaths,GLenum pathNameType,const void * paths,GLuint pathBase,GLint reference,GLuint mask,GLenum coverMode,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC(GLuint path,GLint reference,GLuint mask,GLenum coverMode)typedef void<glext.h>
PFNGLSTOPINSTRUMENTSSGIXPROC(GLint marker)typedef void<glext.h>
PFNGLSTRINGMARKERGREMEDYPROC(GLsizei len,const void * string)typedef void<glext.h>
PFNGLSUBPIXELPRECISIONBIASNVPROC(GLuint xbits,GLuint ybits)typedef void<glext.h>
PFNGLSWIZZLEEXTPROC(GLuint res,GLuint in,GLenum outX,GLenum outY,GLenum outZ,GLenum outW)typedef void<glext.h>
PFNGLSYNCTEXTUREINTELPROC(GLuint texture)typedef void<glext.h>
PFNGLTAGSAMPLEBUFFERSGIXPROC(void)typedef void<glext.h>
PFNGLTANGENT3BEXTPROC(GLbyte tx,GLbyte ty,GLbyte tz)typedef void<glext.h>
PFNGLTANGENT3BVEXTPROC(const GLbyte * v)typedef void<glext.h>
PFNGLTANGENT3DEXTPROC(GLdouble tx,GLdouble ty,GLdouble tz)typedef void<glext.h>
PFNGLTANGENT3DVEXTPROC(const GLdouble * v)typedef void<glext.h>
PFNGLTANGENT3FEXTPROC(GLfloat tx,GLfloat ty,GLfloat tz)typedef void<glext.h>
PFNGLTANGENT3FVEXTPROC(const GLfloat * v)typedef void<glext.h>
PFNGLTANGENT3IEXTPROC(GLint tx,GLint ty,GLint tz)typedef void<glext.h>
PFNGLTANGENT3IVEXTPROC(const GLint * v)typedef void<glext.h>
PFNGLTANGENT3SEXTPROC(GLshort tx,GLshort ty,GLshort tz)typedef void<glext.h>
PFNGLTANGENT3SVEXTPROC(const GLshort * v)typedef void<glext.h>
PFNGLTANGENTPOINTEREXTPROC(GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLTBUFFERMASK3DFXPROC(GLuint mask)typedef void<glext.h>
PFNGLTESSELLATIONFACTORAMDPROC(GLfloat factor)typedef void<glext.h>
PFNGLTESSELLATIONMODEAMDPROC(GLenum mode)typedef void<glext.h>
PFNGLTESTFENCEAPPLEPROC(GLuint fence)typedef GLboolean<glext.h>
PFNGLTESTFENCENVPROC(GLuint fence)typedef GLboolean<glext.h>
PFNGLTESTOBJECTAPPLEPROC(GLenum object,GLuint name)typedef GLboolean<glext.h>
PFNGLTEXBUFFERARBPROC(GLenum target,GLenum internalformat,GLuint buffer)typedef void<glext.h>
PFNGLTEXBUFFEREXTPROC(GLenum target,GLenum internalformat,GLuint buffer)typedef void<glext.h>
PFNGLTEXBUFFERPROC(GLenum target,GLenum internalformat,GLuint buffer)typedef void<glext.h>
PFNGLTEXBUFFERRANGEPROC(GLenum target,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizeiptr size)typedef void<glext.h>
PFNGLTEXBUMPPARAMETERFVATIPROC(GLenum pname,const GLfloat * param)typedef void<glext.h>
PFNGLTEXBUMPPARAMETERIVATIPROC(GLenum pname,const GLint * param)typedef void<glext.h>
PFNGLTEXCOORD1BOESPROC(GLbyte s)typedef void<glext.h>
PFNGLTEXCOORD1BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLTEXCOORD1HNVPROC(GLhalfNV s)typedef void<glext.h>
PFNGLTEXCOORD1HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLTEXCOORD1XOESPROC(GLfixed s)typedef void<glext.h>
PFNGLTEXCOORD1XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLTEXCOORD2BOESPROC(GLbyte s,GLbyte t)typedef void<glext.h>
PFNGLTEXCOORD2BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC(GLfloat s,GLfloat t,GLfloat r,GLfloat g,GLfloat b,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC(const GLfloat * tc,const GLfloat * c,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC(GLfloat s,GLfloat t,GLfloat r,GLfloat g,GLfloat b,GLfloat a,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC(const GLfloat * tc,const GLfloat * c,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC(GLfloat s,GLfloat t,GLubyte r,GLubyte g,GLubyte b,GLubyte a,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC(const GLfloat * tc,const GLubyte * c,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC(GLfloat s,GLfloat t,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC(const GLfloat * tc,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD2FVERTEX3FSUNPROC(GLfloat s,GLfloat t,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLTEXCOORD2FVERTEX3FVSUNPROC(const GLfloat * tc,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD2HNVPROC(GLhalfNV s,GLhalfNV t)typedef void<glext.h>
PFNGLTEXCOORD2HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLTEXCOORD2XOESPROC(GLfixed s,GLfixed t)typedef void<glext.h>
PFNGLTEXCOORD2XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLTEXCOORD3BOESPROC(GLbyte s,GLbyte t,GLbyte r)typedef void<glext.h>
PFNGLTEXCOORD3BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLTEXCOORD3HNVPROC(GLhalfNV s,GLhalfNV t,GLhalfNV r)typedef void<glext.h>
PFNGLTEXCOORD3HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLTEXCOORD3XOESPROC(GLfixed s,GLfixed t,GLfixed r)typedef void<glext.h>
PFNGLTEXCOORD3XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLTEXCOORD4BOESPROC(GLbyte s,GLbyte t,GLbyte r,GLbyte q)typedef void<glext.h>
PFNGLTEXCOORD4BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC(GLfloat s,GLfloat t,GLfloat p,GLfloat q,GLfloat r,GLfloat g,GLfloat b,GLfloat a,GLfloat nx,GLfloat ny,GLfloat nz,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC(const GLfloat * tc,const GLfloat * c,const GLfloat * n,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD4FVERTEX4FSUNPROC(GLfloat s,GLfloat t,GLfloat p,GLfloat q,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLTEXCOORD4FVERTEX4FVSUNPROC(const GLfloat * tc,const GLfloat * v)typedef void<glext.h>
PFNGLTEXCOORD4HNVPROC(GLhalfNV s,GLhalfNV t,GLhalfNV r,GLhalfNV q)typedef void<glext.h>
PFNGLTEXCOORD4HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLTEXCOORD4XOESPROC(GLfixed s,GLfixed t,GLfixed r,GLfixed q)typedef void<glext.h>
PFNGLTEXCOORD4XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLTEXCOORDFORMATNVPROC(GLint size,GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLTEXCOORDP1UIPROC(GLenum type,GLuint coords)typedef void<glext.h>
PFNGLTEXCOORDP1UIVPROC(GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLTEXCOORDP2UIPROC(GLenum type,GLuint coords)typedef void<glext.h>
PFNGLTEXCOORDP2UIVPROC(GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLTEXCOORDP3UIPROC(GLenum type,GLuint coords)typedef void<glext.h>
PFNGLTEXCOORDP3UIVPROC(GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLTEXCOORDP4UIPROC(GLenum type,GLuint coords)typedef void<glext.h>
PFNGLTEXCOORDP4UIVPROC(GLenum type,const GLuint * coords)typedef void<glext.h>
PFNGLTEXCOORDPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,GLsizei count,const GLvoid * pointer)typedef void<glext.h>
PFNGLTEXCOORDPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,GLsizei count,const void * pointer)typedef void<glext.h>
PFNGLTEXCOORDPOINTERLISTIBMPROC(GLint size,GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLTEXCOORDPOINTERVINTELPROC(GLint size,GLenum type,const void ** pointer)typedef void<glext.h>
PFNGLTEXENVXOESPROC(GLenum target,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLTEXENVXVOESPROC(GLenum target,GLenum pname,const GLfixed * params)typedef void<glext.h>
PFNGLTEXFILTERFUNCSGISPROC(GLenum target,GLenum filter,GLsizei n,const GLfloat * weights)typedef void<glext.h>
PFNGLTEXGENXOESPROC(GLenum coord,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLTEXGENXVOESPROC(GLenum coord,GLenum pname,const GLfixed * params)typedef void<glext.h>
PFNGLTEXIMAGE1DPROC(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glcorearb.h>
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC(GLenum target,GLsizei coverageSamples,GLsizei colorSamples,GLint internalFormat,GLsizei width,GLsizei height,GLboolean fixedSampleLocations)typedef void<glext.h>
PFNGLTEXIMAGE2DMULTISAMPLEPROC(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXIMAGE2DPROC(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glcorearb.h>
PFNGLTEXIMAGE3DEXTPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC(GLenum target,GLsizei coverageSamples,GLsizei colorSamples,GLint internalFormat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedSampleLocations)typedef void<glext.h>
PFNGLTEXIMAGE3DMULTISAMPLEPROC(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXIMAGE3DPROC(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXIMAGE4DSGISPROC(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLsizei size4d,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXPAGECOMMITMENTARBPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLboolean resident)typedef void<glext.h>
PFNGLTEXPARAMETERFPROC(GLenum target,GLenum pname,GLfloat param)typedef void<glcorearb.h>
PFNGLTEXPARAMETERFVPROC(GLenum target,GLenum pname,const GLfloat * params)typedef void<glcorearb.h>
PFNGLTEXPARAMETERIIVEXTPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLTEXPARAMETERIIVPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLTEXPARAMETERIPROC(GLenum target,GLenum pname,GLint param)typedef void<glcorearb.h>
PFNGLTEXPARAMETERIUIVEXTPROC(GLenum target,GLenum pname,const GLuint * params)typedef void<glext.h>
PFNGLTEXPARAMETERIUIVPROC(GLenum target,GLenum pname,const GLuint * params)typedef void<glext.h>
PFNGLTEXPARAMETERIVPROC(GLenum target,GLenum pname,const GLint * params)typedef void<glcorearb.h>
PFNGLTEXPARAMETERXOESPROC(GLenum target,GLenum pname,GLfixed param)typedef void<glext.h>
PFNGLTEXPARAMETERXVOESPROC(GLenum target,GLenum pname,const GLfixed * params)typedef void<glext.h>
PFNGLTEXRENDERBUFFERNVPROC(GLenum target,GLuint renderbuffer)typedef void<glext.h>
PFNGLTEXSTORAGE1DPROC(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width)typedef void<glext.h>
PFNGLTEXSTORAGE2DMULTISAMPLEPROC(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXSTORAGE2DPROC(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLTEXSTORAGE3DMULTISAMPLEPROC(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXSTORAGE3DPROC(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth)typedef void<glext.h>
PFNGLTEXSTORAGESPARSEAMDPROC(GLenum target,GLenum internalFormat,GLsizei width,GLsizei height,GLsizei depth,GLsizei layers,GLbitfield flags)typedef void<glext.h>
PFNGLTEXSUBIMAGE1DEXTPROC(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXSUBIMAGE1DPROC(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)typedef void<glcorearb.h>
PFNGLTEXSUBIMAGE2DEXTPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXSUBIMAGE2DPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)typedef void<glcorearb.h>
PFNGLTEXSUBIMAGE3DEXTPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXSUBIMAGE3DPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXSUBIMAGE4DSGISPROC(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint woffset,GLsizei width,GLsizei height,GLsizei depth,GLsizei size4d,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTUREBARRIERNVPROC(void)typedef void<glext.h>
PFNGLTEXTUREBARRIERPROC(void)typedef void<glext.h>
PFNGLTEXTUREBUFFEREXTPROC(GLuint texture,GLenum target,GLenum internalformat,GLuint buffer)typedef void<glext.h>
PFNGLTEXTUREBUFFERPROC(GLuint texture,GLenum internalformat,GLuint buffer)typedef void<glext.h>
PFNGLTEXTUREBUFFERRANGEEXTPROC(GLuint texture,GLenum target,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizeiptr size)typedef void<glext.h>
PFNGLTEXTUREBUFFERRANGEPROC(GLuint texture,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizei size)typedef void<glext.h>
PFNGLTEXTURECOLORMASKSGISPROC(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)typedef void<glext.h>
PFNGLTEXTUREIMAGE1DEXTPROC(GLuint texture,GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTUREIMAGE2DEXTPROC(GLuint texture,GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC(GLuint texture,GLenum target,GLsizei coverageSamples,GLsizei colorSamples,GLint internalFormat,GLsizei width,GLsizei height,GLboolean fixedSampleLocations)typedef void<glext.h>
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC(GLuint texture,GLenum target,GLsizei samples,GLint internalFormat,GLsizei width,GLsizei height,GLboolean fixedSampleLocations)typedef void<glext.h>
PFNGLTEXTUREIMAGE3DEXTPROC(GLuint texture,GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC(GLuint texture,GLenum target,GLsizei coverageSamples,GLsizei colorSamples,GLint internalFormat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedSampleLocations)typedef void<glext.h>
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC(GLuint texture,GLenum target,GLsizei samples,GLint internalFormat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedSampleLocations)typedef void<glext.h>
PFNGLTEXTURELIGHTEXTPROC(GLenum pname)typedef void<glext.h>
PFNGLTEXTUREMATERIALEXTPROC(GLenum face,GLenum mode)typedef void<glext.h>
PFNGLTEXTURENORMALEXTPROC(GLenum mode)typedef void<glext.h>
PFNGLTEXTUREPAGECOMMITMENTEXTPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLboolean resident)typedef void<glext.h>
PFNGLTEXTUREPARAMETERFEXTPROC(GLuint texture,GLenum target,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLTEXTUREPARAMETERFPROC(GLuint texture,GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLTEXTUREPARAMETERFVEXTPROC(GLuint texture,GLenum target,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLTEXTUREPARAMETERFVPROC(GLuint texture,GLenum pname,const GLfloat * param)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIEXTPROC(GLuint texture,GLenum target,GLenum pname,GLint param)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIIVEXTPROC(GLuint texture,GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIIVPROC(GLuint texture,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIPROC(GLuint texture,GLenum pname,GLint param)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIUIVEXTPROC(GLuint texture,GLenum target,GLenum pname,const GLuint * params)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIUIVPROC(GLuint texture,GLenum pname,const GLuint * params)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIVEXTPROC(GLuint texture,GLenum target,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLTEXTUREPARAMETERIVPROC(GLuint texture,GLenum pname,const GLint * param)typedef void<glext.h>
PFNGLTEXTURERANGEAPPLEPROC(GLenum target,GLsizei length,const void * pointer)typedef void<glext.h>
PFNGLTEXTURERENDERBUFFEREXTPROC(GLuint texture,GLenum target,GLuint renderbuffer)typedef void<glext.h>
PFNGLTEXTURESTORAGE1DEXTPROC(GLuint texture,GLenum target,GLsizei levels,GLenum internalformat,GLsizei width)typedef void<glext.h>
PFNGLTEXTURESTORAGE1DPROC(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width)typedef void<glext.h>
PFNGLTEXTURESTORAGE2DEXTPROC(GLuint texture,GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC(GLuint texture,GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC(GLuint texture,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXTURESTORAGE2DPROC(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height)typedef void<glext.h>
PFNGLTEXTURESTORAGE3DEXTPROC(GLuint texture,GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth)typedef void<glext.h>
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC(GLuint texture,GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC(GLuint texture,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)typedef void<glext.h>
PFNGLTEXTURESTORAGE3DPROC(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth)typedef void<glext.h>
PFNGLTEXTURESTORAGESPARSEAMDPROC(GLuint texture,GLenum target,GLenum internalFormat,GLsizei width,GLsizei height,GLsizei depth,GLsizei layers,GLbitfield flags)typedef void<glext.h>
PFNGLTEXTURESUBIMAGE1DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTURESUBIMAGE1DPROC(GLuint texture,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTURESUBIMAGE2DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTURESUBIMAGE2DPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTURESUBIMAGE3DEXTPROC(GLuint texture,GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTURESUBIMAGE3DPROC(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void * pixels)typedef void<glext.h>
PFNGLTEXTUREVIEWPROC(GLuint texture,GLenum target,GLuint origtexture,GLenum internalformat,GLuint minlevel,GLuint numlevels,GLuint minlayer,GLuint numlayers)typedef void<glext.h>
PFNGLTRACKMATRIXNVPROC(GLenum target,GLuint address,GLenum matrix,GLenum transform)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC(GLsizei count,const GLint * attribs,GLenum bufferMode)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC(GLuint xfb,GLuint index,GLuint buffer)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC(GLuint xfb,GLuint index,GLuint buffer,GLintptr offset,GLsizei size)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC(GLsizei count,const GLint * attribs,GLsizei nbuffers,const GLint * bufstreams,GLenum bufferMode)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC(GLuint program,GLsizei count,const GLchar * const * varyings,GLenum bufferMode)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC(GLuint program,GLsizei count,const GLint * locations,GLenum bufferMode)typedef void<glext.h>
PFNGLTRANSFORMFEEDBACKVARYINGSPROC(GLuint program,GLsizei count,const GLchar * const * varyings,GLenum bufferMode)typedef void<glext.h>
PFNGLTRANSFORMPATHNVPROC(GLuint resultPath,GLuint srcPath,GLenum transformType,const GLfloat * transformValues)typedef void<glext.h>
PFNGLTRANSLATEXOESPROC(GLfixed x,GLfixed y,GLfixed z)typedef void<glext.h>
PFNGLUNIFORM1DPROC(GLint location,GLdouble x)typedef void<glext.h>
PFNGLUNIFORM1DVPROC(GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORM1FARBPROC(GLint location,GLfloat v0)typedef void<glext.h>
PFNGLUNIFORM1FPROC(GLint location,GLfloat v0)typedef void<glext.h>
PFNGLUNIFORM1FVARBPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM1FVPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM1I64NVPROC(GLint location,GLint64EXT x)typedef void<glext.h>
PFNGLUNIFORM1I64VNVPROC(GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM1IARBPROC(GLint location,GLint v0)typedef void<glext.h>
PFNGLUNIFORM1IPROC(GLint location,GLint v0)typedef void<glext.h>
PFNGLUNIFORM1IVARBPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM1IVPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM1UI64NVPROC(GLint location,GLuint64EXT x)typedef void<glext.h>
PFNGLUNIFORM1UI64VNVPROC(GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM1UIEXTPROC(GLint location,GLuint v0)typedef void<glext.h>
PFNGLUNIFORM1UIPROC(GLint location,GLuint v0)typedef void<glext.h>
PFNGLUNIFORM1UIVEXTPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM1UIVPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM2DPROC(GLint location,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLUNIFORM2DVPROC(GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORM2FARBPROC(GLint location,GLfloat v0,GLfloat v1)typedef void<glext.h>
PFNGLUNIFORM2FPROC(GLint location,GLfloat v0,GLfloat v1)typedef void<glext.h>
PFNGLUNIFORM2FVARBPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM2FVPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM2I64NVPROC(GLint location,GLint64EXT x,GLint64EXT y)typedef void<glext.h>
PFNGLUNIFORM2I64VNVPROC(GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM2IARBPROC(GLint location,GLint v0,GLint v1)typedef void<glext.h>
PFNGLUNIFORM2IPROC(GLint location,GLint v0,GLint v1)typedef void<glext.h>
PFNGLUNIFORM2IVARBPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM2IVPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM2UI64NVPROC(GLint location,GLuint64EXT x,GLuint64EXT y)typedef void<glext.h>
PFNGLUNIFORM2UI64VNVPROC(GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM2UIEXTPROC(GLint location,GLuint v0,GLuint v1)typedef void<glext.h>
PFNGLUNIFORM2UIPROC(GLint location,GLuint v0,GLuint v1)typedef void<glext.h>
PFNGLUNIFORM2UIVEXTPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM2UIVPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM3DPROC(GLint location,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLUNIFORM3DVPROC(GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORM3FARBPROC(GLint location,GLfloat v0,GLfloat v1,GLfloat v2)typedef void<glext.h>
PFNGLUNIFORM3FPROC(GLint location,GLfloat v0,GLfloat v1,GLfloat v2)typedef void<glext.h>
PFNGLUNIFORM3FVARBPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM3FVPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM3I64NVPROC(GLint location,GLint64EXT x,GLint64EXT y,GLint64EXT z)typedef void<glext.h>
PFNGLUNIFORM3I64VNVPROC(GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM3IARBPROC(GLint location,GLint v0,GLint v1,GLint v2)typedef void<glext.h>
PFNGLUNIFORM3IPROC(GLint location,GLint v0,GLint v1,GLint v2)typedef void<glext.h>
PFNGLUNIFORM3IVARBPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM3IVPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM3UI64NVPROC(GLint location,GLuint64EXT x,GLuint64EXT y,GLuint64EXT z)typedef void<glext.h>
PFNGLUNIFORM3UI64VNVPROC(GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM3UIEXTPROC(GLint location,GLuint v0,GLuint v1,GLuint v2)typedef void<glext.h>
PFNGLUNIFORM3UIPROC(GLint location,GLuint v0,GLuint v1,GLuint v2)typedef void<glext.h>
PFNGLUNIFORM3UIVEXTPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM3UIVPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM4DPROC(GLint location,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLUNIFORM4DVPROC(GLint location,GLsizei count,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORM4FARBPROC(GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)typedef void<glext.h>
PFNGLUNIFORM4FPROC(GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)typedef void<glext.h>
PFNGLUNIFORM4FVARBPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM4FVPROC(GLint location,GLsizei count,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORM4I64NVPROC(GLint location,GLint64EXT x,GLint64EXT y,GLint64EXT z,GLint64EXT w)typedef void<glext.h>
PFNGLUNIFORM4I64VNVPROC(GLint location,GLsizei count,const GLint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM4IARBPROC(GLint location,GLint v0,GLint v1,GLint v2,GLint v3)typedef void<glext.h>
PFNGLUNIFORM4IPROC(GLint location,GLint v0,GLint v1,GLint v2,GLint v3)typedef void<glext.h>
PFNGLUNIFORM4IVARBPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM4IVPROC(GLint location,GLsizei count,const GLint * value)typedef void<glext.h>
PFNGLUNIFORM4UI64NVPROC(GLint location,GLuint64EXT x,GLuint64EXT y,GLuint64EXT z,GLuint64EXT w)typedef void<glext.h>
PFNGLUNIFORM4UI64VNVPROC(GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLUNIFORM4UIEXTPROC(GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)typedef void<glext.h>
PFNGLUNIFORM4UIPROC(GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)typedef void<glext.h>
PFNGLUNIFORM4UIVEXTPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORM4UIVPROC(GLint location,GLsizei count,const GLuint * value)typedef void<glext.h>
PFNGLUNIFORMBLOCKBINDINGPROC(GLuint program,GLuint uniformBlockIndex,GLuint uniformBlockBinding)typedef void<glext.h>
PFNGLUNIFORMBUFFEREXTPROC(GLuint program,GLint location,GLuint buffer)typedef void<glext.h>
PFNGLUNIFORMHANDLEUI64ARBPROC(GLint location,GLuint64 value)typedef void<glext.h>
PFNGLUNIFORMHANDLEUI64NVPROC(GLint location,GLuint64 value)typedef void<glext.h>
PFNGLUNIFORMHANDLEUI64VARBPROC(GLint location,GLsizei count,const GLuint64 * value)typedef void<glext.h>
PFNGLUNIFORMHANDLEUI64VNVPROC(GLint location,GLsizei count,const GLuint64 * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2FVARBPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2X3DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2X3FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2X4DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX2X4FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3FVARBPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3X2DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3X2FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3X4DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX3X4FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4FVARBPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4X2DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4X2FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4X3DVPROC(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)typedef void<glext.h>
PFNGLUNIFORMMATRIX4X3FVPROC(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)typedef void<glext.h>
PFNGLUNIFORMSUBROUTINESUIVPROC(GLenum shadertype,GLsizei count,const GLuint * indices)typedef void<glext.h>
PFNGLUNIFORMUI64NVPROC(GLint location,GLuint64EXT value)typedef void<glext.h>
PFNGLUNIFORMUI64VNVPROC(GLint location,GLsizei count,const GLuint64EXT * value)typedef void<glext.h>
PFNGLUNLOCKARRAYSEXTPROC(void)typedef void<glext.h>
PFNGLUNMAPBUFFERARBPROC(GLenum target)typedef GLboolean<glext.h>
PFNGLUNMAPBUFFERPROC(GLenum target)typedef GLboolean<glext.h>
PFNGLUNMAPNAMEDBUFFEREXTPROC(GLuint buffer)typedef GLboolean<glext.h>
PFNGLUNMAPNAMEDBUFFERPROC(GLuint buffer)typedef GLboolean<glext.h>
PFNGLUNMAPOBJECTBUFFERATIPROC(GLuint buffer)typedef void<glext.h>
PFNGLUNMAPTEXTURE2DINTELPROC(GLuint texture,GLint level)typedef void<glext.h>
PFNGLUPDATEOBJECTBUFFERATIPROC(GLuint buffer,GLuint offset,GLsizei size,const void * pointer,GLenum preserve)typedef void<glext.h>
PFNGLUSEPROGRAMOBJECTARBPROC(GLhandleARB programObj)typedef void<glext.h>
PFNGLUSEPROGRAMPROC(GLuint program)typedef void<glext.h>
PFNGLUSEPROGRAMSTAGESPROC(GLuint pipeline,GLbitfield stages,GLuint program)typedef void<glext.h>
PFNGLUSESHADERPROGRAMEXTPROC(GLenum type,GLuint program)typedef void<glext.h>
PFNGLVALIDATEPROGRAMARBPROC(GLhandleARB programObj)typedef void<glext.h>
PFNGLVALIDATEPROGRAMPIPELINEPROC(GLuint pipeline)typedef void<glext.h>
PFNGLVALIDATEPROGRAMPROC(GLuint program)typedef void<glext.h>
PFNGLVARIANTARRAYOBJECTATIPROC(GLuint id,GLenum type,GLsizei stride,GLuint buffer,GLuint offset)typedef void<glext.h>
PFNGLVARIANTBVEXTPROC(GLuint id,const GLbyte * addr)typedef void<glext.h>
PFNGLVARIANTDVEXTPROC(GLuint id,const GLdouble * addr)typedef void<glext.h>
PFNGLVARIANTFVEXTPROC(GLuint id,const GLfloat * addr)typedef void<glext.h>
PFNGLVARIANTIVEXTPROC(GLuint id,const GLint * addr)typedef void<glext.h>
PFNGLVARIANTPOINTEREXTPROC(GLuint id,GLenum type,GLuint stride,const void * addr)typedef void<glext.h>
PFNGLVARIANTSVEXTPROC(GLuint id,const GLshort * addr)typedef void<glext.h>
PFNGLVARIANTUBVEXTPROC(GLuint id,const GLubyte * addr)typedef void<glext.h>
PFNGLVARIANTUIVEXTPROC(GLuint id,const GLuint * addr)typedef void<glext.h>
PFNGLVARIANTUSVEXTPROC(GLuint id,const GLushort * addr)typedef void<glext.h>
PFNGLVDPAUFININVPROC(void)typedef void<glext.h>
PFNGLVDPAUGETSURFACEIVNVPROC(GLvdpauSurfaceNV surface,GLenum pname,GLsizei bufSize,GLsizei * length,GLint * values)typedef void<glext.h>
PFNGLVDPAUINITNVPROC(const void * vdpDevice,const void * getProcAddress)typedef void<glext.h>
PFNGLVDPAUISSURFACENVPROC(GLvdpauSurfaceNV surface)typedef GLboolean<glext.h>
PFNGLVDPAUMAPSURFACESNVPROC(GLsizei numSurfaces,const GLvdpauSurfaceNV * surfaces)typedef void<glext.h>
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC(const void * vdpSurface,GLenum target,GLsizei numTextureNames,const GLuint * textureNames)typedef GLvdpauSurfaceNV<glext.h>
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC(const void * vdpSurface,GLenum target,GLsizei numTextureNames,const GLuint * textureNames)typedef GLvdpauSurfaceNV<glext.h>
PFNGLVDPAUSURFACEACCESSNVPROC(GLvdpauSurfaceNV surface,GLenum access)typedef void<glext.h>
PFNGLVDPAUUNMAPSURFACESNVPROC(GLsizei numSurface,const GLvdpauSurfaceNV * surfaces)typedef void<glext.h>
PFNGLVDPAUUNREGISTERSURFACENVPROC(GLvdpauSurfaceNV surface)typedef void<glext.h>
PFNGLVERTEX2BOESPROC(GLbyte x,GLbyte y)typedef void<glext.h>
PFNGLVERTEX2BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLVERTEX2HNVPROC(GLhalfNV x,GLhalfNV y)typedef void<glext.h>
PFNGLVERTEX2HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEX2XOESPROC(GLfixed x)typedef void<glext.h>
PFNGLVERTEX2XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLVERTEX3BOESPROC(GLbyte x,GLbyte y,GLbyte z)typedef void<glext.h>
PFNGLVERTEX3BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLVERTEX3HNVPROC(GLhalfNV x,GLhalfNV y,GLhalfNV z)typedef void<glext.h>
PFNGLVERTEX3HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEX3XOESPROC(GLfixed x,GLfixed y)typedef void<glext.h>
PFNGLVERTEX3XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLVERTEX4BOESPROC(GLbyte x,GLbyte y,GLbyte z,GLbyte w)typedef void<glext.h>
PFNGLVERTEX4BVOESPROC(const GLbyte * coords)typedef void<glext.h>
PFNGLVERTEX4HNVPROC(GLhalfNV x,GLhalfNV y,GLhalfNV z,GLhalfNV w)typedef void<glext.h>
PFNGLVERTEX4HVNVPROC(const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEX4XOESPROC(GLfixed x,GLfixed y,GLfixed z)typedef void<glext.h>
PFNGLVERTEX4XVOESPROC(const GLfixed * coords)typedef void<glext.h>
PFNGLVERTEXARRAYATTRIBBINDINGPROC(GLuint vaobj,GLuint attribindex,GLuint bindingindex)typedef void<glext.h>
PFNGLVERTEXARRAYATTRIBFORMATPROC(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXARRAYATTRIBIFORMATPROC(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXARRAYATTRIBLFORMATPROC(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXARRAYBINDINGDIVISORPROC(GLuint vaobj,GLuint bindingindex,GLuint divisor)typedef void<glext.h>
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC(GLuint vaobj,GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride)typedef void<glext.h>
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYELEMENTBUFFERPROC(GLuint vaobj,GLuint buffer)typedef void<glext.h>
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLenum texunit,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLVERTEXARRAYRANGEAPPLEPROC(GLsizei length,void * pointer)typedef void<glext.h>
PFNGLVERTEXARRAYRANGENVPROC(GLsizei length,const void * pointer)typedef void<glext.h>
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC(GLuint vaobj,GLuint attribindex,GLuint bindingindex)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC(GLuint vaobj,GLuint index,GLuint divisor)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLuint index,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLuint index,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC(GLuint vaobj,GLuint bindingindex,GLuint divisor)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXBUFFERPROC(GLuint vaobj,GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXBUFFERSPROC(GLuint vaobj,GLuint first,GLsizei count,const GLuint * buffers,const GLintptr * offsets,const GLsizei * strides)typedef void<glext.h>
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC(GLuint vaobj,GLuint buffer,GLint size,GLenum type,GLsizei stride,GLintptr offset)typedef void<glext.h>
PFNGLVERTEXATTRIB1DARBPROC(GLuint index,GLdouble x)typedef void<glext.h>
PFNGLVERTEXATTRIB1DNVPROC(GLuint index,GLdouble x)typedef void<glext.h>
PFNGLVERTEXATTRIB1DPROC(GLuint index,GLdouble x)typedef void<glext.h>
PFNGLVERTEXATTRIB1DVARBPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1DVNVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1FARBPROC(GLuint index,GLfloat x)typedef void<glext.h>
PFNGLVERTEXATTRIB1FNVPROC(GLuint index,GLfloat x)typedef void<glext.h>
PFNGLVERTEXATTRIB1FPROC(GLuint index,GLfloat x)typedef void<glext.h>
PFNGLVERTEXATTRIB1FVARBPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1FVNVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1FVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1HNVPROC(GLuint index,GLhalfNV x)typedef void<glext.h>
PFNGLVERTEXATTRIB1HVNVPROC(GLuint index,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1SARBPROC(GLuint index,GLshort x)typedef void<glext.h>
PFNGLVERTEXATTRIB1SNVPROC(GLuint index,GLshort x)typedef void<glext.h>
PFNGLVERTEXATTRIB1SPROC(GLuint index,GLshort x)typedef void<glext.h>
PFNGLVERTEXATTRIB1SVARBPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1SVNVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB1SVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2DARBPROC(GLuint index,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLVERTEXATTRIB2DNVPROC(GLuint index,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLVERTEXATTRIB2DPROC(GLuint index,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLVERTEXATTRIB2DVARBPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2DVNVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2FARBPROC(GLuint index,GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLVERTEXATTRIB2FNVPROC(GLuint index,GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLVERTEXATTRIB2FPROC(GLuint index,GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLVERTEXATTRIB2FVARBPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2FVNVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2FVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2HNVPROC(GLuint index,GLhalfNV x,GLhalfNV y)typedef void<glext.h>
PFNGLVERTEXATTRIB2HVNVPROC(GLuint index,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2SARBPROC(GLuint index,GLshort x,GLshort y)typedef void<glext.h>
PFNGLVERTEXATTRIB2SNVPROC(GLuint index,GLshort x,GLshort y)typedef void<glext.h>
PFNGLVERTEXATTRIB2SPROC(GLuint index,GLshort x,GLshort y)typedef void<glext.h>
PFNGLVERTEXATTRIB2SVARBPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2SVNVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB2SVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3DARBPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLVERTEXATTRIB3DNVPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLVERTEXATTRIB3DPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLVERTEXATTRIB3DVARBPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3DVNVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3FARBPROC(GLuint index,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLVERTEXATTRIB3FNVPROC(GLuint index,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLVERTEXATTRIB3FPROC(GLuint index,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLVERTEXATTRIB3FVARBPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3FVNVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3FVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3HNVPROC(GLuint index,GLhalfNV x,GLhalfNV y,GLhalfNV z)typedef void<glext.h>
PFNGLVERTEXATTRIB3HVNVPROC(GLuint index,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3SARBPROC(GLuint index,GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLVERTEXATTRIB3SNVPROC(GLuint index,GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLVERTEXATTRIB3SPROC(GLuint index,GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLVERTEXATTRIB3SVARBPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3SVNVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB3SVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4BVARBPROC(GLuint index,const GLbyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4BVPROC(GLuint index,const GLbyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4DARBPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLVERTEXATTRIB4DNVPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLVERTEXATTRIB4DPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLVERTEXATTRIB4DVARBPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4DVNVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4FARBPROC(GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLVERTEXATTRIB4FNVPROC(GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLVERTEXATTRIB4FPROC(GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLVERTEXATTRIB4FVARBPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4FVNVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4FVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4HNVPROC(GLuint index,GLhalfNV x,GLhalfNV y,GLhalfNV z,GLhalfNV w)typedef void<glext.h>
PFNGLVERTEXATTRIB4HVNVPROC(GLuint index,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4IVARBPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4IVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NBVARBPROC(GLuint index,const GLbyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NBVPROC(GLuint index,const GLbyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NIVARBPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NIVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NSVARBPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NSVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUBARBPROC(GLuint index,GLubyte x,GLubyte y,GLubyte z,GLubyte w)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUBPROC(GLuint index,GLubyte x,GLubyte y,GLubyte z,GLubyte w)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUBVARBPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUBVPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUIVARBPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUIVPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUSVARBPROC(GLuint index,const GLushort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4NUSVPROC(GLuint index,const GLushort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4SARBPROC(GLuint index,GLshort x,GLshort y,GLshort z,GLshort w)typedef void<glext.h>
PFNGLVERTEXATTRIB4SNVPROC(GLuint index,GLshort x,GLshort y,GLshort z,GLshort w)typedef void<glext.h>
PFNGLVERTEXATTRIB4SPROC(GLuint index,GLshort x,GLshort y,GLshort z,GLshort w)typedef void<glext.h>
PFNGLVERTEXATTRIB4SVARBPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4SVNVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4SVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4UBNVPROC(GLuint index,GLubyte x,GLubyte y,GLubyte z,GLubyte w)typedef void<glext.h>
PFNGLVERTEXATTRIB4UBVARBPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4UBVNVPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4UBVPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4UIVARBPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4UIVPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4USVARBPROC(GLuint index,const GLushort * v)typedef void<glext.h>
PFNGLVERTEXATTRIB4USVPROC(GLuint index,const GLushort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,GLuint buffer,GLuint offset)typedef void<glext.h>
PFNGLVERTEXATTRIBBINDINGPROC(GLuint attribindex,GLuint bindingindex)typedef void<glext.h>
PFNGLVERTEXATTRIBDIVISORARBPROC(GLuint index,GLuint divisor)typedef void<glext.h>
PFNGLVERTEXATTRIBDIVISORPROC(GLuint index,GLuint divisor)typedef void<glext.h>
PFNGLVERTEXATTRIBFORMATNVPROC(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride)typedef void<glext.h>
PFNGLVERTEXATTRIBFORMATPROC(GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXATTRIBI1IEXTPROC(GLuint index,GLint x)typedef void<glext.h>
PFNGLVERTEXATTRIBI1IPROC(GLuint index,GLint x)typedef void<glext.h>
PFNGLVERTEXATTRIBI1IVEXTPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI1IVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI1UIEXTPROC(GLuint index,GLuint x)typedef void<glext.h>
PFNGLVERTEXATTRIBI1UIPROC(GLuint index,GLuint x)typedef void<glext.h>
PFNGLVERTEXATTRIBI1UIVEXTPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI1UIVPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI2IEXTPROC(GLuint index,GLint x,GLint y)typedef void<glext.h>
PFNGLVERTEXATTRIBI2IPROC(GLuint index,GLint x,GLint y)typedef void<glext.h>
PFNGLVERTEXATTRIBI2IVEXTPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI2IVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI2UIEXTPROC(GLuint index,GLuint x,GLuint y)typedef void<glext.h>
PFNGLVERTEXATTRIBI2UIPROC(GLuint index,GLuint x,GLuint y)typedef void<glext.h>
PFNGLVERTEXATTRIBI2UIVEXTPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI2UIVPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI3IEXTPROC(GLuint index,GLint x,GLint y,GLint z)typedef void<glext.h>
PFNGLVERTEXATTRIBI3IPROC(GLuint index,GLint x,GLint y,GLint z)typedef void<glext.h>
PFNGLVERTEXATTRIBI3IVEXTPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI3IVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI3UIEXTPROC(GLuint index,GLuint x,GLuint y,GLuint z)typedef void<glext.h>
PFNGLVERTEXATTRIBI3UIPROC(GLuint index,GLuint x,GLuint y,GLuint z)typedef void<glext.h>
PFNGLVERTEXATTRIBI3UIVEXTPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI3UIVPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4BVEXTPROC(GLuint index,const GLbyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4BVPROC(GLuint index,const GLbyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4IEXTPROC(GLuint index,GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLVERTEXATTRIBI4IPROC(GLuint index,GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLVERTEXATTRIBI4IVEXTPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4IVPROC(GLuint index,const GLint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4SVEXTPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4SVPROC(GLuint index,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4UBVEXTPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4UBVPROC(GLuint index,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4UIEXTPROC(GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)typedef void<glext.h>
PFNGLVERTEXATTRIBI4UIPROC(GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)typedef void<glext.h>
PFNGLVERTEXATTRIBI4UIVEXTPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4UIVPROC(GLuint index,const GLuint * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4USVEXTPROC(GLuint index,const GLushort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBI4USVPROC(GLuint index,const GLushort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBIFORMATNVPROC(GLuint index,GLint size,GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLVERTEXATTRIBIFORMATPROC(GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXATTRIBIPOINTEREXTPROC(GLuint index,GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBIPOINTERPROC(GLuint index,GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBL1DEXTPROC(GLuint index,GLdouble x)typedef void<glext.h>
PFNGLVERTEXATTRIBL1DPROC(GLuint index,GLdouble x)typedef void<glext.h>
PFNGLVERTEXATTRIBL1DVEXTPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL1DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL1I64NVPROC(GLuint index,GLint64EXT x)typedef void<glext.h>
PFNGLVERTEXATTRIBL1I64VNVPROC(GLuint index,const GLint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL1UI64ARBPROC(GLuint index,GLuint64EXT x)typedef void<glext.h>
PFNGLVERTEXATTRIBL1UI64NVPROC(GLuint index,GLuint64EXT x)typedef void<glext.h>
PFNGLVERTEXATTRIBL1UI64VARBPROC(GLuint index,const GLuint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL1UI64VNVPROC(GLuint index,const GLuint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL2DEXTPROC(GLuint index,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLVERTEXATTRIBL2DPROC(GLuint index,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLVERTEXATTRIBL2DVEXTPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL2DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL2I64NVPROC(GLuint index,GLint64EXT x,GLint64EXT y)typedef void<glext.h>
PFNGLVERTEXATTRIBL2I64VNVPROC(GLuint index,const GLint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL2UI64NVPROC(GLuint index,GLuint64EXT x,GLuint64EXT y)typedef void<glext.h>
PFNGLVERTEXATTRIBL2UI64VNVPROC(GLuint index,const GLuint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL3DEXTPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLVERTEXATTRIBL3DPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLVERTEXATTRIBL3DVEXTPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL3DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL3I64NVPROC(GLuint index,GLint64EXT x,GLint64EXT y,GLint64EXT z)typedef void<glext.h>
PFNGLVERTEXATTRIBL3I64VNVPROC(GLuint index,const GLint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL3UI64NVPROC(GLuint index,GLuint64EXT x,GLuint64EXT y,GLuint64EXT z)typedef void<glext.h>
PFNGLVERTEXATTRIBL3UI64VNVPROC(GLuint index,const GLuint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL4DEXTPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLVERTEXATTRIBL4DPROC(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLVERTEXATTRIBL4DVEXTPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL4DVPROC(GLuint index,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL4I64NVPROC(GLuint index,GLint64EXT x,GLint64EXT y,GLint64EXT z,GLint64EXT w)typedef void<glext.h>
PFNGLVERTEXATTRIBL4I64VNVPROC(GLuint index,const GLint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBL4UI64NVPROC(GLuint index,GLuint64EXT x,GLuint64EXT y,GLuint64EXT z,GLuint64EXT w)typedef void<glext.h>
PFNGLVERTEXATTRIBL4UI64VNVPROC(GLuint index,const GLuint64EXT * v)typedef void<glext.h>
PFNGLVERTEXATTRIBLFORMATNVPROC(GLuint index,GLint size,GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLVERTEXATTRIBLFORMATPROC(GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)typedef void<glext.h>
PFNGLVERTEXATTRIBLPOINTEREXTPROC(GLuint index,GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBLPOINTERPROC(GLuint index,GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBP1UIPROC(GLuint index,GLenum type,GLboolean normalized,GLuint value)typedef void<glext.h>
PFNGLVERTEXATTRIBP1UIVPROC(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXATTRIBP2UIPROC(GLuint index,GLenum type,GLboolean normalized,GLuint value)typedef void<glext.h>
PFNGLVERTEXATTRIBP2UIVPROC(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXATTRIBP3UIPROC(GLuint index,GLenum type,GLboolean normalized,GLuint value)typedef void<glext.h>
PFNGLVERTEXATTRIBP3UIVPROC(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXATTRIBP4UIPROC(GLuint index,GLenum type,GLboolean normalized,GLuint value)typedef void<glext.h>
PFNGLVERTEXATTRIBP4UIVPROC(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXATTRIBPARAMETERIAMDPROC(GLuint index,GLenum pname,GLint param)typedef void<glext.h>
PFNGLVERTEXATTRIBPOINTERARBPROC(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBPOINTERNVPROC(GLuint index,GLint fsize,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBPOINTERPROC(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVERTEXATTRIBS1DVNVPROC(GLuint index,GLsizei count,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS1FVNVPROC(GLuint index,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS1HVNVPROC(GLuint index,GLsizei n,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS1SVNVPROC(GLuint index,GLsizei count,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS2DVNVPROC(GLuint index,GLsizei count,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS2FVNVPROC(GLuint index,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS2HVNVPROC(GLuint index,GLsizei n,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS2SVNVPROC(GLuint index,GLsizei count,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS3DVNVPROC(GLuint index,GLsizei count,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS3FVNVPROC(GLuint index,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS3HVNVPROC(GLuint index,GLsizei n,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS3SVNVPROC(GLuint index,GLsizei count,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS4DVNVPROC(GLuint index,GLsizei count,const GLdouble * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS4FVNVPROC(GLuint index,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS4HVNVPROC(GLuint index,GLsizei n,const GLhalfNV * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS4SVNVPROC(GLuint index,GLsizei count,const GLshort * v)typedef void<glext.h>
PFNGLVERTEXATTRIBS4UBVNVPROC(GLuint index,GLsizei count,const GLubyte * v)typedef void<glext.h>
PFNGLVERTEXBINDINGDIVISORPROC(GLuint bindingindex,GLuint divisor)typedef void<glext.h>
PFNGLVERTEXBLENDARBPROC(GLint count)typedef void<glext.h>
PFNGLVERTEXBLENDENVFATIPROC(GLenum pname,GLfloat param)typedef void<glext.h>
PFNGLVERTEXBLENDENVIATIPROC(GLenum pname,GLint param)typedef void<glext.h>
PFNGLVERTEXFORMATNVPROC(GLint size,GLenum type,GLsizei stride)typedef void<glext.h>
PFNGLVERTEXP2UIPROC(GLenum type,GLuint value)typedef void<glext.h>
PFNGLVERTEXP2UIVPROC(GLenum type,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXP3UIPROC(GLenum type,GLuint value)typedef void<glext.h>
PFNGLVERTEXP3UIVPROC(GLenum type,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXP4UIPROC(GLenum type,GLuint value)typedef void<glext.h>
PFNGLVERTEXP4UIVPROC(GLenum type,const GLuint * value)typedef void<glext.h>
PFNGLVERTEXPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,GLsizei count,const GLvoid * pointer)typedef void<glext.h>
PFNGLVERTEXPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,GLsizei count,const void * pointer)typedef void<glext.h>
PFNGLVERTEXPOINTERLISTIBMPROC(GLint size,GLenum type,GLint stride,const void ** pointer,GLint ptrstride)typedef void<glext.h>
PFNGLVERTEXPOINTERVINTELPROC(GLint size,GLenum type,const void ** pointer)typedef void<glext.h>
PFNGLVERTEXSTREAM1DATIPROC(GLenum stream,GLdouble x)typedef void<glext.h>
PFNGLVERTEXSTREAM1DVATIPROC(GLenum stream,const GLdouble * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM1FATIPROC(GLenum stream,GLfloat x)typedef void<glext.h>
PFNGLVERTEXSTREAM1FVATIPROC(GLenum stream,const GLfloat * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM1IATIPROC(GLenum stream,GLint x)typedef void<glext.h>
PFNGLVERTEXSTREAM1IVATIPROC(GLenum stream,const GLint * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM1SATIPROC(GLenum stream,GLshort x)typedef void<glext.h>
PFNGLVERTEXSTREAM1SVATIPROC(GLenum stream,const GLshort * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM2DATIPROC(GLenum stream,GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLVERTEXSTREAM2DVATIPROC(GLenum stream,const GLdouble * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM2FATIPROC(GLenum stream,GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLVERTEXSTREAM2FVATIPROC(GLenum stream,const GLfloat * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM2IATIPROC(GLenum stream,GLint x,GLint y)typedef void<glext.h>
PFNGLVERTEXSTREAM2IVATIPROC(GLenum stream,const GLint * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM2SATIPROC(GLenum stream,GLshort x,GLshort y)typedef void<glext.h>
PFNGLVERTEXSTREAM2SVATIPROC(GLenum stream,const GLshort * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM3DATIPROC(GLenum stream,GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLVERTEXSTREAM3DVATIPROC(GLenum stream,const GLdouble * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM3FATIPROC(GLenum stream,GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLVERTEXSTREAM3FVATIPROC(GLenum stream,const GLfloat * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM3IATIPROC(GLenum stream,GLint x,GLint y,GLint z)typedef void<glext.h>
PFNGLVERTEXSTREAM3IVATIPROC(GLenum stream,const GLint * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM3SATIPROC(GLenum stream,GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLVERTEXSTREAM3SVATIPROC(GLenum stream,const GLshort * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM4DATIPROC(GLenum stream,GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLVERTEXSTREAM4DVATIPROC(GLenum stream,const GLdouble * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM4FATIPROC(GLenum stream,GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLVERTEXSTREAM4FVATIPROC(GLenum stream,const GLfloat * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM4IATIPROC(GLenum stream,GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLVERTEXSTREAM4IVATIPROC(GLenum stream,const GLint * coords)typedef void<glext.h>
PFNGLVERTEXSTREAM4SATIPROC(GLenum stream,GLshort x,GLshort y,GLshort z,GLshort w)typedef void<glext.h>
PFNGLVERTEXSTREAM4SVATIPROC(GLenum stream,const GLshort * coords)typedef void<glext.h>
PFNGLVERTEXWEIGHTFEXTPROC(GLfloat weight)typedef void<glext.h>
PFNGLVERTEXWEIGHTFVEXTPROC(const GLfloat * weight)typedef void<glext.h>
PFNGLVERTEXWEIGHTHNVPROC(GLhalfNV weight)typedef void<glext.h>
PFNGLVERTEXWEIGHTHVNVPROC(const GLhalfNV * weight)typedef void<glext.h>
PFNGLVERTEXWEIGHTPOINTEREXTPROC(GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLVIDEOCAPTURENVPROC(GLuint video_capture_slot,GLuint * sequence_num,GLuint64EXT * capture_time)typedef GLenum<glext.h>
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC(GLuint video_capture_slot,GLuint stream,GLenum pname,const GLdouble * params)typedef void<glext.h>
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC(GLuint video_capture_slot,GLuint stream,GLenum pname,const GLfloat * params)typedef void<glext.h>
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC(GLuint video_capture_slot,GLuint stream,GLenum pname,const GLint * params)typedef void<glext.h>
PFNGLVIEWPORTARRAYVPROC(GLuint first,GLsizei count,const GLfloat * v)typedef void<glext.h>
PFNGLVIEWPORTINDEXEDFPROC(GLuint index,GLfloat x,GLfloat y,GLfloat w,GLfloat h)typedef void<glext.h>
PFNGLVIEWPORTINDEXEDFVPROC(GLuint index,const GLfloat * v)typedef void<glext.h>
PFNGLVIEWPORTPROC(GLint x,GLint y,GLsizei width,GLsizei height)typedef void<glcorearb.h>
PFNGLWAITSYNCPROC(GLsync sync,GLbitfield flags,GLuint64 timeout)typedef void<glext.h>
PFNGLWEIGHTBVARBPROC(GLint size,const GLbyte * weights)typedef void<glext.h>
PFNGLWEIGHTDVARBPROC(GLint size,const GLdouble * weights)typedef void<glext.h>
PFNGLWEIGHTFVARBPROC(GLint size,const GLfloat * weights)typedef void<glext.h>
PFNGLWEIGHTIVARBPROC(GLint size,const GLint * weights)typedef void<glext.h>
PFNGLWEIGHTPATHSNVPROC(GLuint resultPath,GLsizei numPaths,const GLuint * paths,const GLfloat * weights)typedef void<glext.h>
PFNGLWEIGHTPOINTERARBPROC(GLint size,GLenum type,GLsizei stride,const void * pointer)typedef void<glext.h>
PFNGLWEIGHTSVARBPROC(GLint size,const GLshort * weights)typedef void<glext.h>
PFNGLWEIGHTUBVARBPROC(GLint size,const GLubyte * weights)typedef void<glext.h>
PFNGLWEIGHTUIVARBPROC(GLint size,const GLuint * weights)typedef void<glext.h>
PFNGLWEIGHTUSVARBPROC(GLint size,const GLushort * weights)typedef void<glext.h>
PFNGLWINDOWPOS2DARBPROC(GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLWINDOWPOS2DMESAPROC(GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLWINDOWPOS2DPROC(GLdouble x,GLdouble y)typedef void<glext.h>
PFNGLWINDOWPOS2DVARBPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS2DVMESAPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS2DVPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS2FARBPROC(GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLWINDOWPOS2FMESAPROC(GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLWINDOWPOS2FPROC(GLfloat x,GLfloat y)typedef void<glext.h>
PFNGLWINDOWPOS2FVARBPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS2FVMESAPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS2FVPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS2IARBPROC(GLint x,GLint y)typedef void<glext.h>
PFNGLWINDOWPOS2IMESAPROC(GLint x,GLint y)typedef void<glext.h>
PFNGLWINDOWPOS2IPROC(GLint x,GLint y)typedef void<glext.h>
PFNGLWINDOWPOS2IVARBPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS2IVMESAPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS2IVPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS2SARBPROC(GLshort x,GLshort y)typedef void<glext.h>
PFNGLWINDOWPOS2SMESAPROC(GLshort x,GLshort y)typedef void<glext.h>
PFNGLWINDOWPOS2SPROC(GLshort x,GLshort y)typedef void<glext.h>
PFNGLWINDOWPOS2SVARBPROC(const GLshort * v)typedef void<glext.h>
PFNGLWINDOWPOS2SVMESAPROC(const GLshort * v)typedef void<glext.h>
PFNGLWINDOWPOS2SVPROC(const GLshort * v)typedef void<glext.h>
PFNGLWINDOWPOS3DARBPROC(GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLWINDOWPOS3DMESAPROC(GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLWINDOWPOS3DPROC(GLdouble x,GLdouble y,GLdouble z)typedef void<glext.h>
PFNGLWINDOWPOS3DVARBPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS3DVMESAPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS3DVPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS3FARBPROC(GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLWINDOWPOS3FMESAPROC(GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLWINDOWPOS3FPROC(GLfloat x,GLfloat y,GLfloat z)typedef void<glext.h>
PFNGLWINDOWPOS3FVARBPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS3FVMESAPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS3FVPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS3IARBPROC(GLint x,GLint y,GLint z)typedef void<glext.h>
PFNGLWINDOWPOS3IMESAPROC(GLint x,GLint y,GLint z)typedef void<glext.h>
PFNGLWINDOWPOS3IPROC(GLint x,GLint y,GLint z)typedef void<glext.h>
PFNGLWINDOWPOS3IVARBPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS3IVMESAPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS3IVPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS3SARBPROC(GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLWINDOWPOS3SMESAPROC(GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLWINDOWPOS3SPROC(GLshort x,GLshort y,GLshort z)typedef void<glext.h>
PFNGLWINDOWPOS3SVARBPROC(const GLshort * v)typedef void<glext.h>
PFNGLWINDOWPOS3SVMESAPROC(const GLshort * v)typedef void<glext.h>
PFNGLWINDOWPOS3SVPROC(const GLshort * v)typedef void<glext.h>
PFNGLWINDOWPOS4DMESAPROC(GLdouble x,GLdouble y,GLdouble z,GLdouble w)typedef void<glext.h>
PFNGLWINDOWPOS4DVMESAPROC(const GLdouble * v)typedef void<glext.h>
PFNGLWINDOWPOS4FMESAPROC(GLfloat x,GLfloat y,GLfloat z,GLfloat w)typedef void<glext.h>
PFNGLWINDOWPOS4FVMESAPROC(const GLfloat * v)typedef void<glext.h>
PFNGLWINDOWPOS4IMESAPROC(GLint x,GLint y,GLint z,GLint w)typedef void<glext.h>
PFNGLWINDOWPOS4IVMESAPROC(const GLint * v)typedef void<glext.h>
PFNGLWINDOWPOS4SMESAPROC(GLshort x,GLshort y,GLshort z,GLshort w)typedef void<glext.h>
PFNGLWINDOWPOS4SVMESAPROC(const GLshort * v)typedef void<glext.h>
PFNGLWRITEMASKEXTPROC(GLuint res,GLuint in,GLenum outX,GLenum outY,GLenum outZ,GLenum outW)typedef void<glext.h>
PFNGLXASSOCIATEDMPBUFFERSGIXPROC(Display * dpy,GLXPbufferSGIX pbuffer,DMparams * params,DMbuffer dmbuffer)typedef Bool<glxext.h>
PFNGLXBINDCHANNELTOWINDOWSGIXPROC(Display * display,int screen,int channel,Window window)typedef int<glxext.h>
PFNGLXBINDHYPERPIPESGIXPROC(Display * dpy,int hpId)typedef int<glxext.h>
PFNGLXBINDSWAPBARRIERNVPROC(Display * dpy,GLuint group,GLuint barrier)typedef Bool<glxext.h>
PFNGLXBINDSWAPBARRIERSGIXPROC(Display * dpy,GLXDrawable drawable,int barrier)typedef void<glxext.h>
PFNGLXBINDTEXIMAGEEXTPROC(Display * dpy,GLXDrawable drawable,int buffer,const int * attrib_list)typedef void<glxext.h>
PFNGLXBINDVIDEOCAPTUREDEVICENVPROC(Display * dpy,unsigned int video_capture_slot,GLXVideoCaptureDeviceNV device)typedef int<glxext.h>
PFNGLXBINDVIDEODEVICENVPROC(Display * dpy,unsigned int video_slot,unsigned int video_device,const int * attrib_list)typedef int<glxext.h>
PFNGLXBINDVIDEOIMAGENVPROC(Display * dpy,GLXVideoDeviceNV VideoDevice,GLXPbuffer pbuf,int iVideoBuffer)typedef int<glxext.h>
PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC(GLXContext dstCtx,GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)typedef void<glxext.h>
PFNGLXCHANNELRECTSGIXPROC(Display * display,int screen,int channel,int x,int y,int w,int h)typedef int<glxext.h>
PFNGLXCHANNELRECTSYNCSGIXPROC(Display * display,int screen,int channel,GLenum synctype)typedef int<glxext.h>
PFNGLXCHOOSEFBCONFIGPROC(Display * dpy,int screen,const int * attrib_list,int * nelements)typedef GLXFBConfig<glxext.h>
PFNGLXCHOOSEFBCONFIGSGIXPROC(Display * dpy,int screen,int * attrib_list,int * nelements)typedef GLXFBConfigSGIX<glxext.h>
PFNGLXCOPYBUFFERSUBDATANVPROC(Display * dpy,GLXContext readCtx,GLXContext writeCtx,GLenum readTarget,GLenum writeTarget,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size)typedef void<glxext.h>
PFNGLXCOPYIMAGESUBDATANVPROC(Display * dpy,GLXContext srcCtx,GLuint srcName,GLenum srcTarget,GLint srcLevel,GLint srcX,GLint srcY,GLint srcZ,GLXContext dstCtx,GLuint dstName,GLenum dstTarget,GLint dstLevel,GLint dstX,GLint dstY,GLint dstZ,GLsizei width,GLsizei height,GLsizei depth)typedef void<glxext.h>
PFNGLXCOPYSUBBUFFERMESAPROC(Display * dpy,GLXDrawable drawable,int x,int y,int width,int height)typedef void<glxext.h>
PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC(unsigned int id,GLXContext share_list)typedef GLXContext<glxext.h>
PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC(unsigned int id,GLXContext share_context,const int * attribList)typedef GLXContext<glxext.h>
PFNGLXCREATECONTEXTATTRIBSARBPROC(Display * dpy,GLXFBConfig config,GLXContext share_context,Bool direct,const int * attrib_list)typedef GLXContext<glxext.h>
PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC(Display * dpy,GLXFBConfigSGIX config,int render_type,GLXContext share_list,Bool direct)typedef GLXContext<glxext.h>
PFNGLXCREATEGLXPBUFFERSGIXPROC(Display * dpy,GLXFBConfigSGIX config,unsigned int width,unsigned int height,int * attrib_list)typedef GLXPbufferSGIX<glxext.h>
PFNGLXCREATEGLXPIXMAPMESAPROC(Display * dpy,XVisualInfo * visual,Pixmap pixmap,Colormap cmap)typedef GLXPixmap<glxext.h>
PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC(Display * dpy,GLXFBConfigSGIX config,Pixmap pixmap)typedef GLXPixmap<glxext.h>
PFNGLXCREATEGLXVIDEOSOURCESGIXPROC(Display * display,int screen,VLServer server,VLPath path,int nodeClass,VLNode drainNode)typedef GLXVideoSourceSGIX<glxext.h>
PFNGLXCREATENEWCONTEXTPROC(Display * dpy,GLXFBConfig config,int render_type,GLXContext share_list,Bool direct)typedef GLXContext<glxext.h>
PFNGLXCREATEPBUFFERPROC(Display * dpy,GLXFBConfig config,const int * attrib_list)typedef GLXPbuffer<glxext.h>
PFNGLXCREATEPIXMAPPROC(Display * dpy,GLXFBConfig config,Pixmap pixmap,const int * attrib_list)typedef GLXPixmap<glxext.h>
PFNGLXCREATEWINDOWPROC(Display * dpy,GLXFBConfig config,Window win,const int * attrib_list)typedef GLXWindow<glxext.h>
PFNGLXCUSHIONSGIPROC(Display * dpy,Window window,float cushion)typedef void<glxext.h>
PFNGLXDELAYBEFORESWAPNVPROC(Display * dpy,GLXDrawable drawable,GLfloat seconds)typedef Bool<glxext.h>
PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC(GLXContext ctx)typedef Bool<glxext.h>
PFNGLXDESTROYGLXPBUFFERSGIXPROC(Display * dpy,GLXPbufferSGIX pbuf)typedef void<glxext.h>
PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC(Display * dpy,GLXVideoSourceSGIX glxvideosource)typedef void<glxext.h>
PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC(Display * dpy,int hpId)typedef int<glxext.h>
PFNGLXDESTROYPBUFFERPROC(Display * dpy,GLXPbuffer pbuf)typedef void<glxext.h>
PFNGLXDESTROYPIXMAPPROC(Display * dpy,GLXPixmap pixmap)typedef void<glxext.h>
PFNGLXDESTROYWINDOWPROC(Display * dpy,GLXWindow win)typedef void<glxext.h>
PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC(Display * dpy,int screen,int * nelements)typedef GLXVideoCaptureDeviceNV<glxext.h>
PFNGLXENUMERATEVIDEODEVICESNVPROC(Display * dpy,int screen,int * nelements)typedef unsigned int<glxext.h>
PFNGLXFREECONTEXTEXTPROC(Display * dpy,GLXContext context)typedef void<glxext.h>
PFNGLXGETAGPOFFSETMESAPROC(const void * pointer)typedef unsigned int<glxext.h>
PFNGLXGETCONTEXTGPUIDAMDPROC(GLXContext ctx)typedef unsigned int<glxext.h>
PFNGLXGETCONTEXTIDEXTPROC(const GLXContext context)typedef GLXContextID<glxext.h>
PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC(void)typedef GLXContext<glxext.h>
PFNGLXGETCURRENTDISPLAYEXTPROC(void)typedef Display<glxext.h>
PFNGLXGETCURRENTREADDRAWABLEPROC(void)typedef GLXDrawable<glxext.h>
PFNGLXGETCURRENTREADDRAWABLESGIPROC(void)typedef GLXDrawable<glxext.h>
PFNGLXGETFBCONFIGATTRIBPROC(Display * dpy,GLXFBConfig config,int attribute,int * value)typedef int<glxext.h>
PFNGLXGETFBCONFIGATTRIBSGIXPROC(Display * dpy,GLXFBConfigSGIX config,int attribute,int * value)typedef int<glxext.h>
PFNGLXGETFBCONFIGFROMVISUALSGIXPROC(Display * dpy,XVisualInfo * vis)typedef GLXFBConfigSGIX<glxext.h>
PFNGLXGETFBCONFIGSPROC(Display * dpy,int screen,int * nelements)typedef GLXFBConfig<glxext.h>
PFNGLXGETGPUIDSAMDPROC(unsigned int maxCount,unsigned int * ids)typedef unsigned int<glxext.h>
PFNGLXGETGPUINFOAMDPROC(unsigned int id,int property,GLenum dataType,unsigned int size,void * data)typedef int<glxext.h>
PFNGLXGETMSCRATEOMLPROC(Display * dpy,GLXDrawable drawable,int32_t * numerator,int32_t * denominator)typedef Bool<glxext.h>
PFNGLXGETPROCADDRESSARBPROC(const GLubyte * procName)typedef __GLXextFuncPtr<glxext.h>
PFNGLXGETPROCADDRESSPROC(const GLubyte * procName)typedef __GLXextFuncPtr<glxext.h>
PFNGLXGETSELECTEDEVENTPROC(Display * dpy,GLXDrawable draw,unsigned long * event_mask)typedef void<glxext.h>
PFNGLXGETSELECTEDEVENTSGIXPROC(Display * dpy,GLXDrawable drawable,unsigned long * mask)typedef void<glxext.h>
PFNGLXGETSYNCVALUESOMLPROC(Display * dpy,GLXDrawable drawable,int64_t * ust,int64_t * msc,int64_t * sbc)typedef Bool<glxext.h>
PFNGLXGETTRANSPARENTINDEXSUNPROC(Display * dpy,Window overlay,Window underlay,long * pTransparentIndex)typedef Status<glxext.h>
PFNGLXGETVIDEODEVICENVPROC(Display * dpy,int screen,int numVideoDevices,GLXVideoDeviceNV * pVideoDevice)typedef int<glxext.h>
PFNGLXGETVIDEOINFONVPROC(Display * dpy,int screen,GLXVideoDeviceNV VideoDevice,unsigned long * pulCounterOutputPbuffer,unsigned long * pulCounterOutputVideo)typedef int<glxext.h>
PFNGLXGETVIDEOSYNCSGIPROC(unsigned int * count)typedef int<glxext.h>
PFNGLXGETVISUALFROMFBCONFIGPROC(Display * dpy,GLXFBConfig config)typedef XVisualInfo<glxext.h>
PFNGLXGETVISUALFROMFBCONFIGSGIXPROC(Display * dpy,GLXFBConfigSGIX config)typedef XVisualInfo<glxext.h>
PFNGLXHYPERPIPEATTRIBSGIXPROC(Display * dpy,int timeSlice,int attrib,int size,void * attribList)typedef int<glxext.h>
PFNGLXHYPERPIPECONFIGSGIXPROC(Display * dpy,int networkId,int npipes,GLXHyperpipeConfigSGIX * cfg,int * hpId)typedef int<glxext.h>
PFNGLXIMPORTCONTEXTEXTPROC(Display * dpy,GLXContextID contextID)typedef GLXContext<glxext.h>
PFNGLXJOINSWAPGROUPNVPROC(Display * dpy,GLXDrawable drawable,GLuint group)typedef Bool<glxext.h>
PFNGLXJOINSWAPGROUPSGIXPROC(Display * dpy,GLXDrawable drawable,GLXDrawable member)typedef void<glxext.h>
PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC(Display * dpy,GLXVideoCaptureDeviceNV device)typedef void<glxext.h>
PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC(GLXContext ctx)typedef Bool<glxext.h>
PFNGLXMAKECONTEXTCURRENTPROC(Display * dpy,GLXDrawable draw,GLXDrawable read,GLXContext ctx)typedef Bool<glxext.h>
PFNGLXMAKECURRENTREADSGIPROC(Display * dpy,GLXDrawable draw,GLXDrawable read,GLXContext ctx)typedef Bool<glxext.h>
PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC(Display * dpy,GLXContext readCtx,GLXContext writeCtx,GLuint readBuffer,GLuint writeBuffer,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size)typedef void<glxext.h>
PFNGLXQUERYCHANNELDELTASSGIXPROC(Display * display,int screen,int channel,int * x,int * y,int * w,int * h)typedef int<glxext.h>
PFNGLXQUERYCHANNELRECTSGIXPROC(Display * display,int screen,int channel,int * dx,int * dy,int * dw,int * dh)typedef int<glxext.h>
PFNGLXQUERYCONTEXTINFOEXTPROC(Display * dpy,GLXContext context,int attribute,int * value)typedef int<glxext.h>
PFNGLXQUERYCONTEXTPROC(Display * dpy,GLXContext ctx,int attribute,int * value)typedef int<glxext.h>
PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC(int attribute,unsigned int * value)typedef Bool<glxext.h>
PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC(int attribute)typedef const char<glxext.h>
PFNGLXQUERYDRAWABLEPROC(Display * dpy,GLXDrawable draw,int attribute,unsigned int * value)typedef void<glxext.h>
PFNGLXQUERYFRAMECOUNTNVPROC(Display * dpy,int screen,GLuint * count)typedef Bool<glxext.h>
PFNGLXQUERYGLXPBUFFERSGIXPROC(Display * dpy,GLXPbufferSGIX pbuf,int attribute,unsigned int * value)typedef int<glxext.h>
PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC(Display * dpy,int timeSlice,int attrib,int size,void * returnAttribList)typedef int<glxext.h>
PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC(Display * dpy,int timeSlice,int attrib,int size,void * attribList,void * returnAttribList)typedef int<glxext.h>
PFNGLXQUERYHYPERPIPECONFIGSGIXPROC(Display * dpy,int hpId,int * npipes)typedef GLXHyperpipeConfigSGIX<glxext.h>
PFNGLXQUERYHYPERPIPENETWORKSGIXPROC(Display * dpy,int * npipes)typedef GLXHyperpipeNetworkSGIX<glxext.h>
PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC(Display * dpy,int screen,int * max)typedef Bool<glxext.h>
PFNGLXQUERYMAXSWAPGROUPSNVPROC(Display * dpy,int screen,GLuint * maxGroups,GLuint * maxBarriers)typedef Bool<glxext.h>
PFNGLXQUERYRENDERERINTEGERMESAPROC(Display * dpy,int screen,int renderer,int attribute,unsigned int * value)typedef Bool<glxext.h>
PFNGLXQUERYRENDERERSTRINGMESAPROC(Display * dpy,int screen,int renderer,int attribute)typedef const char<glxext.h>
PFNGLXQUERYSWAPGROUPNVPROC(Display * dpy,GLXDrawable drawable,GLuint * group,GLuint * barrier)typedef Bool<glxext.h>
PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC(Display * dpy,GLXVideoCaptureDeviceNV device,int attribute,int * value)typedef int<glxext.h>
PFNGLXRELEASEBUFFERSMESAPROC(Display * dpy,GLXDrawable drawable)typedef Bool<glxext.h>
PFNGLXRELEASETEXIMAGEEXTPROC(Display * dpy,GLXDrawable drawable,int buffer)typedef void<glxext.h>
PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC(Display * dpy,GLXVideoCaptureDeviceNV device)typedef void<glxext.h>
PFNGLXRELEASEVIDEODEVICENVPROC(Display * dpy,int screen,GLXVideoDeviceNV VideoDevice)typedef int<glxext.h>
PFNGLXRELEASEVIDEOIMAGENVPROC(Display * dpy,GLXPbuffer pbuf)typedef int<glxext.h>
PFNGLXRESETFRAMECOUNTNVPROC(Display * dpy,int screen)typedef Bool<glxext.h>
PFNGLXSELECTEVENTPROC(Display * dpy,GLXDrawable draw,unsigned long event_mask)typedef void<glxext.h>
PFNGLXSELECTEVENTSGIXPROC(Display * dpy,GLXDrawable drawable,unsigned long mask)typedef void<glxext.h>
PFNGLXSENDPBUFFERTOVIDEONVPROC(Display * dpy,GLXPbuffer pbuf,int iBufferType,unsigned long * pulCounterPbuffer,GLboolean bBlock)typedef int<glxext.h>
PFNGLXSET3DFXMODEMESAPROC(int mode)typedef Bool<glxext.h>
PFNGLXSWAPBUFFERSMSCOMLPROC(Display * dpy,GLXDrawable drawable,int64_t target_msc,int64_t divisor,int64_t remainder)typedef int64_t<glxext.h>
PFNGLXSWAPINTERVALEXTPROC(Display * dpy,GLXDrawable drawable,int interval)typedef void<glxext.h>
PFNGLXSWAPINTERVALSGIPROC(int interval)typedef int<glxext.h>
PFNGLXWAITFORMSCOMLPROC(Display * dpy,GLXDrawable drawable,int64_t target_msc,int64_t divisor,int64_t remainder,int64_t * ust,int64_t * msc,int64_t * sbc)typedef Bool<glxext.h>
PFNGLXWAITFORSBCOMLPROC(Display * dpy,GLXDrawable drawable,int64_t target_sbc,int64_t * ust,int64_t * msc,int64_t * sbc)typedef Bool<glxext.h>
PFNGLXWAITVIDEOSYNCSGIPROC(int divisor,int remainder,unsigned int * count)typedef int<glxext.h>
PFNIMGCTXCALLBACK(void *,void *) typedef void<iimgctx.h>
pfnInternetDeInitializeAutoProxyDll(LPSTR lpszMime,DWORD dwReserved) typedef WINBOOL<wininet.h>
pfnInternetGetProxyInfo(LPCSTR lpszUrl,DWORD dwUrlLength,LPSTR lpszUrlHostName,DWORD dwUrlHostNameLength,LPSTR * lplpszProxyHostName,LPDWORD lpdwProxyHostNameLength) typedef WINBOOL<wininet.h>
pfnInternetInitializeAutoProxyDll(DWORD dwVersion,LPSTR lpszDownloadedTempFile,LPSTR lpszMime,AutoProxyHelperFunctions * lpAutoProxyCallbacks,LPAUTO_PROXY_SCRIPT_BUFFER lpAutoProxyScriptBuffer) typedef WINBOOL<wininet.h>
pfnIsFileSupported(HANDLE hFile,GUID * pgSubject) typedef WINBOOL<mssip.h>
pfnIsFileSupportedName(WCHAR * pwszFileName,GUID * pgSubject) typedef WINBOOL<mssip.h>
PFNKSADDEVENT(PIRP Irp,PKSEVENTDATA EventData,struct _KSEVENT_ENTRY * EventEntry)typedef NTSTATUS<ks.h>
PFNKSALLOCATOR(PIRP Irp,ULONG BufferSize,BOOLEAN InputOperation)typedef NTSTATUS<ks.h>
PFNKSCANCELTIMER(PVOID Context,PKTIMER Timer)typedef BOOLEAN<ks.h>
PFNKSCLOCK_CORRELATEDTIME(PFILE_OBJECT FileObject,PLONGLONG SystemTime)typedef LONGLONG<ks.h>
PFNKSCLOCK_GETTIME(PFILE_OBJECT FileObject)typedef LONGLONG<ks.h>
PFNKSCONTEXT_DISPATCH(PVOID Context,PIRP Irp)typedef NTSTATUS<ks.h>
PFNKSCORRELATEDTIME(PVOID Context,PLONGLONG SystemTime)typedef LONGLONG<ks.h>
PFNKSDEFAULTALLOCATE(PVOID Context)typedef PVOID<ks.h>
PFNKSDEFAULTFREE(PVOID Context,PVOID Buffer)typedef VOID<ks.h>
PFNKSDELETEALLOCATOR(PVOID Context)typedef VOID<ks.h>
PFNKSDEVICE(PKSDEVICE Device)typedef NTSTATUS<ks.h>
PFNKSDEVICECREATE(PKSDEVICE Device)typedef NTSTATUS<ks.h>
PFNKSDEVICEIRP(PKSDEVICE Device,PIRP Irp)typedef NTSTATUS<ks.h>
PFNKSDEVICEIRPVOID(PKSDEVICE Device,PIRP Irp)typedef void<ks.h>
PFNKSDEVICEPNPSTART(PKSDEVICE Device,PIRP Irp,PCM_RESOURCE_LIST TranslatedResourceList,PCM_RESOURCE_LIST UntranslatedResourceList)typedef NTSTATUS<ks.h>
PFNKSDEVICEQUERYCAPABILITIES(PKSDEVICE Device,PIRP Irp,PDEVICE_CAPABILITIES Capabilities)typedef NTSTATUS<ks.h>
PFNKSDEVICEQUERYPOWER(PKSDEVICE Device,PIRP Irp,DEVICE_POWER_STATE DeviceTo,DEVICE_POWER_STATE DeviceFrom,SYSTEM_POWER_STATE SystemTo,SYSTEM_POWER_STATE SystemFrom,POWER_ACTION Action)typedef NTSTATUS<ks.h>
PFNKSDEVICESETPOWER(PKSDEVICE Device,PIRP Irp,DEVICE_POWER_STATE To,DEVICE_POWER_STATE From)typedef void<ks.h>
PFNKSFASTHANDLER(PFILE_OBJECT FileObject,PKSIDENTIFIER Request,ULONG RequestLength,PVOID Data,ULONG DataLength,PIO_STATUS_BLOCK IoStatus)typedef BOOLEAN<ks.h>
PFNKSFILTERFACTORYPOWER(PKSFILTERFACTORY FilterFactory,DEVICE_POWER_STATE State)typedef void<ks.h>
PFNKSFILTERFACTORYVOID(PKSFILTERFACTORY FilterFactory)typedef NTSTATUS<ks.h>
PFNKSFILTERIRP(PKSFILTER Filter,PIRP Irp)typedef NTSTATUS<ks.h>
PFNKSFILTERPOWER(PKSFILTER Filter,DEVICE_POWER_STATE State)typedef void<ks.h>
PFNKSFILTERPROCESS(PKSFILTER Filter,PKSPROCESSPIN_INDEXENTRY Index)typedef NTSTATUS<ks.h>
PFNKSFILTERVOID(PKSFILTER Filter)typedef NTSTATUS<ks.h>
PFNKSFREE(PVOID Data)typedef void<ks.h>
PFNKSGENERATEEVENTCALLBACK(PVOID Context,PKSEVENT_ENTRY EventEntry)typedef BOOLEAN<ks.h>
PFNKSHANDLER(PIRP Irp,PKSIDENTIFIER Request,PVOID Data)typedef NTSTATUS<ks.h>
PFNKSINITIALIZEALLOCATOR(PVOID InitialContext,PKSALLOCATOR_FRAMING AllocatorFraming,PVOID * Context)typedef NTSTATUS<ks.h>
PFNKSINTERSECTHANDLER(PIRP Irp,PKSP_PIN Pin,PKSDATARANGE DataRange,PVOID Data)typedef NTSTATUS<ks.h>
PFNKSINTERSECTHANDLEREX(PVOID Context,PIRP Irp,PKSP_PIN Pin,PKSDATARANGE DataRange,PKSDATARANGE MatchingDataRange,ULONG DataBufferSize,PVOID Data,PULONG DataSize)typedef NTSTATUS<ks.h>
PFNKSIRPLISTCALLBACK(PIRP Irp,PVOID Context)typedef NTSTATUS<ks.h>
PFNKSITEMFREECALLBACK(PKSOBJECT_CREATE_ITEM CreateItem)typedef VOID<ks.h>
PFNKSPIN(PKSPIN Pin)typedef NTSTATUS<ks.h>
PFNKSPINCANCELTIMER(PKSPIN Pin,PKTIMER Timer)typedef BOOLEAN<ks.h>
PFNKSPINCORRELATEDTIME(PKSPIN Pin,PLONGLONG SystemTime)typedef LONGLONG<ks.h>
PFNKSPINFRAMERETURN(PKSPIN Pin,PVOID Data,ULONG Size,PMDL Mdl,PVOID Context,NTSTATUS Status)typedef void<ks.h>
PFNKSPINHANDSHAKE(PKSPIN Pin,PKSHANDSHAKE In,PKSHANDSHAKE Out)typedef NTSTATUS<ks.h>
PFNKSPININITIALIZEALLOCATOR(PKSPIN Pin,PKSALLOCATOR_FRAMING AllocatorFraming,PVOID * Context)typedef NTSTATUS<ks.h>
PFNKSPINIRP(PKSPIN Pin,PIRP Irp)typedef NTSTATUS<ks.h>
PFNKSPINIRPCOMPLETION(PKSPIN Pin,PIRP Irp)typedef void<ks.h>
PFNKSPINPOWER(PKSPIN Pin,DEVICE_POWER_STATE State)typedef void<ks.h>
PFNKSPINRESOLUTION(PKSPIN Pin,PKSRESOLUTION Resolution)typedef void<ks.h>
PFNKSPINSETDATAFORMAT(PKSPIN Pin,PKSDATAFORMAT OldFormat,PKSMULTIPLE_ITEM OldAttributeList,const KSDATARANGE * DataRange,const KSATTRIBUTE_LIST * AttributeRange)typedef NTSTATUS<ks.h>
PFNKSPINSETDEVICESTATE(PKSPIN Pin,KSSTATE ToState,KSSTATE FromState)typedef NTSTATUS<ks.h>
PFNKSPINSETTIMER(PKSPIN Pin,PKTIMER Timer,LARGE_INTEGER DueTime,PKDPC Dpc)typedef BOOLEAN<ks.h>
PFNKSPINVOID(PKSPIN Pin)typedef void<ks.h>
PFNKSREMOVEEVENT(PFILE_OBJECT FileObject,struct _KSEVENT_ENTRY * EventEntry)typedef VOID<ks.h>
PFNKSSETTIMER(PVOID Context,PKTIMER Timer,LARGE_INTEGER DueTime,PKDPC Dpc)typedef BOOLEAN<ks.h>
PFNKSSTREAMPOINTER(PKSSTREAM_POINTER StreamPointer)typedef void<ks.h>
PFNLVCOMPARE(LPARAM,LPARAM,LPARAM) typedef int<commctrl.h>
PFNLVGROUPCOMPARE(int,int,void *) typedef int<commctrl.h>
PFNMSGECALLBACK(WINBOOL bVerbose,LPWSTR lpMessage)typedef DWORD<winwlx.h>
PFNNTINITIATEPWRACTION(POWER_ACTION,SYSTEM_POWER_STATE,ULONG,BOOLEAN) typedef BOOLEAN<powrprof.h>
PFNOPEN(char * pszFile,int oflag,int pmode) typedef INT_PTR<fdi.h>
PFNPEER_FREE_SECURITY_DATA(HGRAPH hGraph,PVOID pvContext,PPEER_DATA pSecurityData) typedef HRESULT<p2p.h>
PFNPEER_ON_PASSWORD_AUTH_FAILED(HGRAPH hGraph,PVOID pvContext) typedef HRESULT<p2p.h>
PFNPEER_SECURE_RECORD(HGRAPH hGraph,PVOID pvContext,PPEER_RECORD pRecord,PEER_RECORD_CHANGE_TYPE changeType,PPEER_DATA * ppSecurityData) typedef HRESULT<p2p.h>
PFNPEER_VALIDATE_RECORD(HGRAPH hGraph,PVOID pvContext,PPEER_RECORD pRecord,PEER_RECORD_CHANGE_TYPE changeType) typedef HRESULT<p2p.h>
PFNPROCESSGROUPPOLICY(DWORD dwFlags,HANDLE hToken,HKEY hKeyRoot,PGROUP_POLICY_OBJECT pDeletedGPOList,PGROUP_POLICY_OBJECT pChangedGPOList,ASYNCCOMPLETIONHANDLE pHandle,WINBOOL * pbAbort,PFNSTATUSMESSAGECALLBACK pStatusCallback) typedef DWORD<userenv.h>
PFNPROCESSGROUPPOLICYEX(DWORD dwFlags,HANDLE hToken,HKEY hKeyRoot,PGROUP_POLICY_OBJECT pDeletedGPOList,PGROUP_POLICY_OBJECT pChangedGPOList,ASYNCCOMPLETIONHANDLE pHandle,WINBOOL * pbAbort,PFNSTATUSMESSAGECALLBACK pStatusCallback,IWbemServices * pWbemServices,HRESULT * pRsopStatus) typedef DWORD<userenv.h>
PFNPROCESSPOLICIESA(HWND hwnd,LPCSTR pszPath,LPCSTR pszUsername,LPCSTR pszComputerName,DWORD dwFlags) typedef WINBOOL<winnetwk.h>
PFNPROCESSPOLICIESW(HWND hwnd,LPCWSTR pszPath,LPCWSTR pszUsername,LPCWSTR pszComputerName,DWORD dwFlags) typedef WINBOOL<winnetwk.h>
PFNPROPSHEETCALLBACK(HWND,UINT,LPARAM) typedef int<prsht.h>
PFNQUERYMEDIUMSLIST(PVOID Context,ULONG * MediumsCount,PKSPIN_MEDIUM * MediumList)typedef NTSTATUS<ks.h>
PFNQUERYREFERENCESTRING(PVOID Context,PWCHAR * String)typedef NTSTATUS<ks.h>
PFNRASFREEBUFFER(PBYTE pBufer) typedef DWORD<ras.h>
PFNRASGETBUFFER(PBYTE * ppBuffer,PDWORD pdwSize) typedef DWORD<ras.h>
PFNRASRECEIVEBUFFER(HANDLE hPort,PBYTE pBuffer,PDWORD pdwSize,DWORD dwTimeOut,HANDLE hEvent) typedef DWORD<ras.h>
PFNRASRETRIEVEBUFFER(HANDLE hPort,PBYTE pBuffer,PDWORD pdwSize) typedef DWORD<ras.h>
PFNRASSENDBUFFER(HANDLE hPort,PBYTE pBuffer,DWORD dwSize) typedef DWORD<ras.h>
PFNRASSETCOMMSETTINGS(HANDLE hPort,RASCOMMSETTINGS * pRasCommSettings,PVOID pvReserved) typedef DWORD<ras.h>
PFNREAD(INT_PTR hf,void * pv,UINT cb) typedef UINT<fdi.h>
PFNREADOBJECTSECURITY(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR *,LPARAM)typedef HRESULT<dssec.h>
PFNRECONCILEPROFILEA(LPCSTR pszCentralFile,LPCSTR pszLocalFile,DWORD dwFlags) typedef UINT<winnetwk.h>
PFNRECONCILEPROFILEW(LPCWSTR pszCentralFile,LPCWSTR pszLocalFile,DWORD dwFlags) typedef UINT<winnetwk.h>
PFNREFERENCEDEVICEOBJECT(PVOID Context)typedef VOID<ks.h>
PFNRFCDCALLBACK(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam) typedef WINBOOL<mobsync.h>
PFNSEEK(INT_PTR hf,__LONG32 dist,int seektype) typedef __LONG32<fdi.h>
PFNSHGETFOLDERPATHA(HWND,int,HANDLE,DWORD,LPSTR)typedef HRESULT<shfolder.h>
PFNSHGETFOLDERPATHW(HWND,int,HANDLE,DWORD,LPWSTR)typedef HRESULT<shfolder.h>
PFNSHOWSHAREFOLDERUIW(HWND hwndParent,PCWSTR pszPath) typedef HRESULT<shellapi.h>
PFNSNMPCLEANUPEX(void) typedef SNMPAPI_STATUS<winsnmp.h>
PFNSNMPEXTENSIONCLOSE() typedef VOID<snmp.h>
PFNSNMPEXTENSIONINIT(DWORD dwUpTimeReference,HANDLE * phSubagentTrapEvent,AsnObjectIdentifier * pFirstSupportedRegion) typedef WINBOOL<snmp.h>
PFNSNMPEXTENSIONINITEX(AsnObjectIdentifier * pNextSupportedRegion) typedef WINBOOL<snmp.h>
PFNSNMPEXTENSIONMONITOR(LPVOID pAgentMgmtData) typedef WINBOOL<snmp.h>
PFNSNMPEXTENSIONQUERY(BYTE bPduType,SnmpVarBindList * pVarBindList,AsnInteger32 * pErrorStatus,AsnInteger32 * pErrorIndex) typedef WINBOOL<snmp.h>
PFNSNMPEXTENSIONQUERYEX(UINT nRequestType,UINT nTransactionId,SnmpVarBindList * pVarBindList,AsnOctetString * pContextInfo,AsnInteger32 * pErrorStatus,AsnInteger32 * pErrorIndex) typedef WINBOOL<snmp.h>
PFNSNMPEXTENSIONTRAP(AsnObjectIdentifier * pEnterpriseOid,AsnInteger32 * pGenericTrapId,AsnInteger32 * pSpecificTrapId,AsnTimeticks * pTimeStamp,SnmpVarBindList * pVarBindList) typedef WINBOOL<snmp.h>
PFNSNMPSTARTUPEX(smiLPUINT32,smiLPUINT32,smiLPUINT32,smiLPUINT32,smiLPUINT32) typedef SNMPAPI_STATUS<winsnmp.h>
PFNSTATUSMESSAGECALLBACK(WINBOOL bVerbose,LPWSTR lpMessage) typedef DWORD<userenv.h>
PFNTVCOMPARE(LPARAM lParam1,LPARAM lParam2,LPARAM lParamSort)typedef int<commctrl.h>
PFNWGLALLOCATEMEMORYNVPROC(GLsizei size,GLfloat readfreq,GLfloat writefreq,GLfloat priority)typedef void<wglext.h>
PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC(HDC hDC,const HANDLE * pEvent,const LPVOID * pAddress,const DWORD * pSize,UINT count)typedef BOOL<wglext.h>
PFNWGLBEGINFRAMETRACKINGI3DPROC(void)typedef BOOL<wglext.h>
PFNWGLBINDDISPLAYCOLORTABLEEXTPROC(GLushort id)typedef GLboolean<wglext.h>
PFNWGLBINDSWAPBARRIERNVPROC(GLuint group,GLuint barrier)typedef BOOL<wglext.h>
PFNWGLBINDTEXIMAGEARBPROC(HPBUFFERARB hPbuffer,int iBuffer)typedef BOOL<wglext.h>
PFNWGLBINDVIDEOCAPTUREDEVICENVPROC(UINT uVideoSlot,HVIDEOINPUTDEVICENV hDevice)typedef BOOL<wglext.h>
PFNWGLBINDVIDEODEVICENVPROC(HDC hDC,unsigned int uVideoSlot,HVIDEOOUTPUTDEVICENV hVideoDevice,const int * piAttribList)typedef BOOL<wglext.h>
PFNWGLBINDVIDEOIMAGENVPROC(HPVIDEODEV hVideoDevice,HPBUFFERARB hPbuffer,int iVideoBuffer)typedef BOOL<wglext.h>
PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC(HGLRC dstCtx,GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)typedef VOID<wglext.h>
PFNWGLCHOOSEPIXELFORMATARBPROC(HDC hdc,const int * piAttribIList,const FLOAT * pfAttribFList,UINT nMaxFormats,int * piFormats,UINT * nNumFormats)typedef BOOL<wglext.h>
PFNWGLCHOOSEPIXELFORMATEXTPROC(HDC hdc,const int * piAttribIList,const FLOAT * pfAttribFList,UINT nMaxFormats,int * piFormats,UINT * nNumFormats)typedef BOOL<wglext.h>
PFNWGLCOPYIMAGESUBDATANVPROC(HGLRC hSrcRC,GLuint srcName,GLenum srcTarget,GLint srcLevel,GLint srcX,GLint srcY,GLint srcZ,HGLRC hDstRC,GLuint dstName,GLenum dstTarget,GLint dstLevel,GLint dstX,GLint dstY,GLint dstZ,GLsizei width,GLsizei height,GLsizei depth)typedef BOOL<wglext.h>
PFNWGLCREATEAFFINITYDCNVPROC(const HGPUNV * phGpuList)typedef HDC<wglext.h>
PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC(UINT id)typedef HGLRC<wglext.h>
PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC(UINT id,HGLRC hShareContext,const int * attribList)typedef HGLRC<wglext.h>
PFNWGLCREATEBUFFERREGIONARBPROC(HDC hDC,int iLayerPlane,UINT uType)typedef HANDLE<wglext.h>
PFNWGLCREATECONTEXTATTRIBSARBPROC(HDC hDC,HGLRC hShareContext,const int * attribList)typedef HGLRC<wglext.h>
PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC(GLushort id)typedef GLboolean<wglext.h>
PFNWGLCREATEIMAGEBUFFERI3DPROC(HDC hDC,DWORD dwSize,UINT uFlags)typedef LPVOID<wglext.h>
PFNWGLCREATEPBUFFERARBPROC(HDC hDC,int iPixelFormat,int iWidth,int iHeight,const int * piAttribList)typedef HPBUFFERARB<wglext.h>
PFNWGLCREATEPBUFFEREXTPROC(HDC hDC,int iPixelFormat,int iWidth,int iHeight,const int * piAttribList)typedef HPBUFFEREXT<wglext.h>
PFNWGLDELAYBEFORESWAPNVPROC(HDC hDC,GLfloat seconds)typedef BOOL<wglext.h>
PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC(HGLRC hglrc)typedef BOOL<wglext.h>
PFNWGLDELETEBUFFERREGIONARBPROC(HANDLE hRegion)typedef VOID<wglext.h>
PFNWGLDELETEDCNVPROC(HDC hdc)typedef BOOL<wglext.h>
PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC(GLushort id)typedef VOID<wglext.h>
PFNWGLDESTROYIMAGEBUFFERI3DPROC(HDC hDC,LPVOID pAddress)typedef BOOL<wglext.h>
PFNWGLDESTROYPBUFFERARBPROC(HPBUFFERARB hPbuffer)typedef BOOL<wglext.h>
PFNWGLDESTROYPBUFFEREXTPROC(HPBUFFEREXT hPbuffer)typedef BOOL<wglext.h>
PFNWGLDISABLEFRAMELOCKI3DPROC(void)typedef BOOL<wglext.h>
PFNWGLDISABLEGENLOCKI3DPROC(HDC hDC)typedef BOOL<wglext.h>
PFNWGLDXCLOSEDEVICENVPROC(HANDLE hDevice)typedef BOOL<wglext.h>
PFNWGLDXLOCKOBJECTSNVPROC(HANDLE hDevice,GLint count,HANDLE * hObjects)typedef BOOL<wglext.h>
PFNWGLDXOBJECTACCESSNVPROC(HANDLE hObject,GLenum access)typedef BOOL<wglext.h>
PFNWGLDXOPENDEVICENVPROC(void * dxDevice)typedef HANDLE<wglext.h>
PFNWGLDXREGISTEROBJECTNVPROC(HANDLE hDevice,void * dxObject,GLuint name,GLenum type,GLenum access)typedef HANDLE<wglext.h>
PFNWGLDXSETRESOURCESHAREHANDLENVPROC(void * dxObject,HANDLE shareHandle)typedef BOOL<wglext.h>
PFNWGLDXUNLOCKOBJECTSNVPROC(HANDLE hDevice,GLint count,HANDLE * hObjects)typedef BOOL<wglext.h>
PFNWGLDXUNREGISTEROBJECTNVPROC(HANDLE hDevice,HANDLE hObject)typedef BOOL<wglext.h>
PFNWGLENABLEFRAMELOCKI3DPROC(void)typedef BOOL<wglext.h>
PFNWGLENABLEGENLOCKI3DPROC(HDC hDC)typedef BOOL<wglext.h>
PFNWGLENDFRAMETRACKINGI3DPROC(void)typedef BOOL<wglext.h>
PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC(HDC hDc,HVIDEOINPUTDEVICENV * phDeviceList)typedef UINT<wglext.h>
PFNWGLENUMERATEVIDEODEVICESNVPROC(HDC hDC,HVIDEOOUTPUTDEVICENV * phDeviceList)typedef int<wglext.h>
PFNWGLENUMGPUDEVICESNVPROC(HGPUNV hGpu,UINT iDeviceIndex,PGPU_DEVICE lpGpuDevice)typedef BOOL<wglext.h>
PFNWGLENUMGPUSFROMAFFINITYDCNVPROC(HDC hAffinityDC,UINT iGpuIndex,HGPUNV * hGpu)typedef BOOL<wglext.h>
PFNWGLENUMGPUSNVPROC(UINT iGpuIndex,HGPUNV * phGpu)typedef BOOL<wglext.h>
PFNWGLFREEMEMORYNVPROC(void * pointer)typedef void<wglext.h>
PFNWGLGENLOCKSAMPLERATEI3DPROC(HDC hDC,UINT uRate)typedef BOOL<wglext.h>
PFNWGLGENLOCKSOURCEDELAYI3DPROC(HDC hDC,UINT uDelay)typedef BOOL<wglext.h>
PFNWGLGENLOCKSOURCEEDGEI3DPROC(HDC hDC,UINT uEdge)typedef BOOL<wglext.h>
PFNWGLGENLOCKSOURCEI3DPROC(HDC hDC,UINT uSource)typedef BOOL<wglext.h>
PFNWGLGETCONTEXTGPUIDAMDPROC(HGLRC hglrc)typedef UINT<wglext.h>
PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC(void)typedef HGLRC<wglext.h>
PFNWGLGETCURRENTREADDCARBPROC(void)typedef HDC<wglext.h>
PFNWGLGETCURRENTREADDCEXTPROC(void)typedef HDC<wglext.h>
PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC(HDC hDC,int iAttribute,int * piValue)typedef BOOL<wglext.h>
PFNWGLGETEXTENSIONSSTRINGARBPROC(HDC hdc)typedef const char<wglext.h>
PFNWGLGETEXTENSIONSSTRINGEXTPROC(void)typedef const char<wglext.h>
PFNWGLGETFRAMEUSAGEI3DPROC(float * pUsage)typedef BOOL<wglext.h>
PFNWGLGETGAMMATABLEI3DPROC(HDC hDC,int iEntries,USHORT * puRed,USHORT * puGreen,USHORT * puBlue)typedef BOOL<wglext.h>
PFNWGLGETGAMMATABLEPARAMETERSI3DPROC(HDC hDC,int iAttribute,int * piValue)typedef BOOL<wglext.h>
PFNWGLGETGENLOCKSAMPLERATEI3DPROC(HDC hDC,UINT * uRate)typedef BOOL<wglext.h>
PFNWGLGETGENLOCKSOURCEDELAYI3DPROC(HDC hDC,UINT * uDelay)typedef BOOL<wglext.h>
PFNWGLGETGENLOCKSOURCEEDGEI3DPROC(HDC hDC,UINT * uEdge)typedef BOOL<wglext.h>
PFNWGLGETGENLOCKSOURCEI3DPROC(HDC hDC,UINT * uSource)typedef BOOL<wglext.h>
PFNWGLGETGPUIDSAMDPROC(UINT maxCount,UINT * ids)typedef UINT<wglext.h>
PFNWGLGETGPUINFOAMDPROC(UINT id,int property,GLenum dataType,UINT size,void * data)typedef INT<wglext.h>
PFNWGLGETMSCRATEOMLPROC(HDC hdc,INT32 * numerator,INT32 * denominator)typedef BOOL<wglext.h>
PFNWGLGETPBUFFERDCARBPROC(HPBUFFERARB hPbuffer)typedef HDC<wglext.h>
PFNWGLGETPBUFFERDCEXTPROC(HPBUFFEREXT hPbuffer)typedef HDC<wglext.h>
PFNWGLGETPIXELFORMATATTRIBFVARBPROC(HDC hdc,int iPixelFormat,int iLayerPlane,UINT nAttributes,const int * piAttributes,FLOAT * pfValues)typedef BOOL<wglext.h>
PFNWGLGETPIXELFORMATATTRIBFVEXTPROC(HDC hdc,int iPixelFormat,int iLayerPlane,UINT nAttributes,int * piAttributes,FLOAT * pfValues)typedef BOOL<wglext.h>
PFNWGLGETPIXELFORMATATTRIBIVARBPROC(HDC hdc,int iPixelFormat,int iLayerPlane,UINT nAttributes,const int * piAttributes,int * piValues)typedef BOOL<wglext.h>
PFNWGLGETPIXELFORMATATTRIBIVEXTPROC(HDC hdc,int iPixelFormat,int iLayerPlane,UINT nAttributes,int * piAttributes,int * piValues)typedef BOOL<wglext.h>
PFNWGLGETSWAPINTERVALEXTPROC(void)typedef int<wglext.h>
PFNWGLGETSYNCVALUESOMLPROC(HDC hdc,INT64 * ust,INT64 * msc,INT64 * sbc)typedef BOOL<wglext.h>
PFNWGLGETVIDEODEVICENVPROC(HDC hDC,int numDevices,HPVIDEODEV * hVideoDevice)typedef BOOL<wglext.h>
PFNWGLGETVIDEOINFONVPROC(HPVIDEODEV hpVideoDevice,unsigned long * pulCounterOutputPbuffer,unsigned long * pulCounterOutputVideo)typedef BOOL<wglext.h>
PFNWGLISENABLEDFRAMELOCKI3DPROC(BOOL * pFlag)typedef BOOL<wglext.h>
PFNWGLISENABLEDGENLOCKI3DPROC(HDC hDC,BOOL * pFlag)typedef BOOL<wglext.h>
PFNWGLJOINSWAPGROUPNVPROC(HDC hDC,GLuint group)typedef BOOL<wglext.h>
PFNWGLLOADDISPLAYCOLORTABLEEXTPROC(const GLushort * table,GLuint length)typedef GLboolean<wglext.h>
PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC(HDC hDc,HVIDEOINPUTDEVICENV hDevice)typedef BOOL<wglext.h>
PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC(HGLRC hglrc)typedef BOOL<wglext.h>
PFNWGLMAKECONTEXTCURRENTARBPROC(HDC hDrawDC,HDC hReadDC,HGLRC hglrc)typedef BOOL<wglext.h>
PFNWGLMAKECONTEXTCURRENTEXTPROC(HDC hDrawDC,HDC hReadDC,HGLRC hglrc)typedef BOOL<wglext.h>
PFNWGLQUERYCURRENTCONTEXTNVPROC(int iAttribute,int * piValue)typedef BOOL<wglext.h>
PFNWGLQUERYFRAMECOUNTNVPROC(HDC hDC,GLuint * count)typedef BOOL<wglext.h>
PFNWGLQUERYFRAMELOCKMASTERI3DPROC(BOOL * pFlag)typedef BOOL<wglext.h>
PFNWGLQUERYFRAMETRACKINGI3DPROC(DWORD * pFrameCount,DWORD * pMissedFrames,float * pLastMissedUsage)typedef BOOL<wglext.h>
PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC(HDC hDC,UINT * uMaxLineDelay,UINT * uMaxPixelDelay)typedef BOOL<wglext.h>
PFNWGLQUERYMAXSWAPGROUPSNVPROC(HDC hDC,GLuint * maxGroups,GLuint * maxBarriers)typedef BOOL<wglext.h>
PFNWGLQUERYPBUFFERARBPROC(HPBUFFERARB hPbuffer,int iAttribute,int * piValue)typedef BOOL<wglext.h>
PFNWGLQUERYPBUFFEREXTPROC(HPBUFFEREXT hPbuffer,int iAttribute,int * piValue)typedef BOOL<wglext.h>
PFNWGLQUERYSWAPGROUPNVPROC(HDC hDC,GLuint * group,GLuint * barrier)typedef BOOL<wglext.h>
PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC(HDC hDc,HVIDEOINPUTDEVICENV hDevice,int iAttribute,int * piValue)typedef BOOL<wglext.h>
PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC(HDC hDC,const LPVOID * pAddress,UINT count)typedef BOOL<wglext.h>
PFNWGLRELEASEPBUFFERDCARBPROC(HPBUFFERARB hPbuffer,HDC hDC)typedef int<wglext.h>
PFNWGLRELEASEPBUFFERDCEXTPROC(HPBUFFEREXT hPbuffer,HDC hDC)typedef int<wglext.h>
PFNWGLRELEASETEXIMAGEARBPROC(HPBUFFERARB hPbuffer,int iBuffer)typedef BOOL<wglext.h>
PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC(HDC hDc,HVIDEOINPUTDEVICENV hDevice)typedef BOOL<wglext.h>
PFNWGLRELEASEVIDEODEVICENVPROC(HPVIDEODEV hVideoDevice)typedef BOOL<wglext.h>
PFNWGLRELEASEVIDEOIMAGENVPROC(HPBUFFERARB hPbuffer,int iVideoBuffer)typedef BOOL<wglext.h>
PFNWGLRESETFRAMECOUNTNVPROC(HDC hDC)typedef BOOL<wglext.h>
PFNWGLRESTOREBUFFERREGIONARBPROC(HANDLE hRegion,int x,int y,int width,int height,int xSrc,int ySrc)typedef BOOL<wglext.h>
PFNWGLSAVEBUFFERREGIONARBPROC(HANDLE hRegion,int x,int y,int width,int height)typedef BOOL<wglext.h>
PFNWGLSENDPBUFFERTOVIDEONVPROC(HPBUFFERARB hPbuffer,int iBufferType,unsigned long * pulCounterPbuffer,BOOL bBlock)typedef BOOL<wglext.h>
PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC(HDC hDC,int iAttribute,const int * piValue)typedef BOOL<wglext.h>
PFNWGLSETGAMMATABLEI3DPROC(HDC hDC,int iEntries,const USHORT * puRed,const USHORT * puGreen,const USHORT * puBlue)typedef BOOL<wglext.h>
PFNWGLSETGAMMATABLEPARAMETERSI3DPROC(HDC hDC,int iAttribute,const int * piValue)typedef BOOL<wglext.h>
PFNWGLSETPBUFFERATTRIBARBPROC(HPBUFFERARB hPbuffer,const int * piAttribList)typedef BOOL<wglext.h>
PFNWGLSETSTEREOEMITTERSTATE3DLPROC(HDC hDC,UINT uState)typedef BOOL<wglext.h>
PFNWGLSWAPBUFFERSMSCOMLPROC(HDC hdc,INT64 target_msc,INT64 divisor,INT64 remainder)typedef INT64<wglext.h>
PFNWGLSWAPINTERVALEXTPROC(int interval)typedef BOOL<wglext.h>
PFNWGLSWAPLAYERBUFFERSMSCOMLPROC(HDC hdc,int fuPlanes,INT64 target_msc,INT64 divisor,INT64 remainder)typedef INT64<wglext.h>
PFNWGLWAITFORMSCOMLPROC(HDC hdc,INT64 target_msc,INT64 divisor,INT64 remainder,INT64 * ust,INT64 * msc,INT64 * sbc)typedef BOOL<wglext.h>
PFNWGLWAITFORSBCOMLPROC(HDC hdc,INT64 target_sbc,INT64 * ust,INT64 * msc,INT64 * sbc)typedef BOOL<wglext.h>
PFNWRITE(INT_PTR hf,void * pv,UINT cb) typedef UINT<fdi.h>
PFNWRITEOBJECTSECURITY(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,LPARAM)typedef HRESULT<dssec.h>
PfRebindFilters(INTERFACE_HANDLE pInterface,PPF_LATEBIND_INFO pLateBindInfo)PFAPIENTRY <fltdefs.h>
PFREEMEM(void * pv) typedef void<lpmapi.h>
PfRemoveFilterHandles(INTERFACE_HANDLE pInterface,DWORD cFilters,PFILTER_HANDLE pvHandles)PFAPIENTRY <fltdefs.h>
PfRemoveFiltersFromInterface(INTERFACE_HANDLE ih,DWORD cInFilters,PPF_FILTER_DESCRIPTOR pfiltIn,DWORD cOutFilters,PPF_FILTER_DESCRIPTOR pfiltOut)PFAPIENTRY <fltdefs.h>
PfRemoveGlobalFilterFromInterface(INTERFACE_HANDLE pInterface,GLOBAL_FILTER gfFilter)PFAPIENTRY <fltdefs.h>
PFSCE_FREE_INFO(PVOID pvServiceInfo) typedef SCESTATUS<scesvc.h>
PFSCE_LOG_INFO(INT ErrLevel,DWORD Win32rc,LPTSTR pErrFmt,...) typedef SCESTATUS<scesvc.h>
PFSCE_QUERY_INFO(SCE_HANDLE sceHandle,SCESVC_INFO_TYPE sceType,LPTSTR lpPrefix,WINBOOL bExact,PVOID * ppvInfo,PSCE_ENUMERATION_CONTEXT psceEnumHandle) typedef SCESTATUS<scesvc.h>
PFSCE_SET_INFO(SCE_HANDLE sceHandle,SCESVC_INFO_TYPE sceType,LPTSTR lpPrefix,WINBOOL bExact,PVOID pvInfo) typedef SCESTATUS<scesvc.h>
PfSetLogBuffer(PBYTE pbBuffer,DWORD dwSize,DWORD dwThreshold,DWORD dwEntries,PDWORD pdwLoggedEntries,PDWORD pdwLostEntries,PDWORD pdwSizeUsed)PFAPIENTRY <fltdefs.h>
PFTASKDIALOGCALLBACK(HWND hwnd,UINT msg,WPARAM wParam,LPARAM lParam,LONG_PTR lpRefData) typedef HRESULT<commctrl.h>
PfTestPacket(INTERFACE_HANDLE pInInterface,INTERFACE_HANDLE pOutInterface,DWORD cBytes,PBYTE pbPacket,PPFFORWARD_ACTION ppAction)PFAPIENTRY <fltdefs.h>
PfUnBindInterface(INTERFACE_HANDLE pInterface)PFAPIENTRY <fltdefs.h>
PFUNCTION_TABLE_ACCESS_ROUTINE(HANDLE hProcess,DWORD AddrBase) typedef PVOID<psdk>
PFUNCTION_TABLE_ACCESS_ROUTINE64(HANDLE hProcess,DWORD64 AddrBase) typedef PVOID<psdk>
PFXExportCertStore(HCERTSTORE hStore,CRYPT_DATA_BLOB * pPFX,LPCWSTR szPassword,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
PFXExportCertStoreEx(HCERTSTORE hStore,CRYPT_DATA_BLOB * pPFX,LPCWSTR szPassword,void * pvPara,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
PfxFindPrefix(IN PPREFIX_TABLE PrefixTable,IN PSTRING FullName)<ntifs.h>
PFXImportCertStore(CRYPT_DATA_BLOB * pPFX,LPCWSTR szPassword,DWORD dwFlags) WINIMPM HCERTSTORE WINAPI <wincrypt.h>
PfxInitialize(OUT PPREFIX_TABLE PrefixTable)<ntifs.h>
PfxInsertPrefix(IN PPREFIX_TABLE PrefixTable,IN PSTRING Prefix,OUT PPREFIX_TABLE_ENTRY PrefixTableEntry)<ntifs.h>
PFXIsPFXBlob(CRYPT_DATA_BLOB * pPFX) WINIMPM WINBOOL WINAPI <wincrypt.h>
PfxRemovePrefix(IN PPREFIX_TABLE PrefixTable,IN PPREFIX_TABLE_ENTRY PrefixTableEntry)<ntifs.h>
PFXVerifyPassword(CRYPT_DATA_BLOB * pPFX,LPCWSTR szPassword,DWORD dwFlags) WINIMPM WINBOOL WINAPI <wincrypt.h>
PGET_EVENT_MESSAGE(ROUTING_PROTOCOL_EVENTS * Event,MESSAGE * Result) typedef DWORD<routprot.h>
PGET_FIRST_ORDERED_SERVICE(DWORD OrderingMethod,DWORD ExclusionFlags,PIPX_SERVICE Service)typedef DWORD<stm.h>
PGET_GLOBAL_INFO(PVOID GlobalInfo,PULONG BufferSize,PULONG StructureVersion,PULONG StructureSize,PULONG StructureCount) typedef DWORD<routprot.h>
PGET_INTERFACE_INFO(ULONG InterfaceIndex,PVOID InterfaceInfo,PULONG BufferSize,PULONG StructureVersion,PULONG StructureSize,PULONG StructureCount) typedef DWORD<routprot.h>
PGET_MFE_STATUS(DWORD InterfaceIndex,DWORD GroupAddress,DWORD SourceAddress,PBYTE StatusCode) typedef DWORD<routprot.h>
PGET_MODULE_BASE_ROUTINE(HANDLE hProcess,DWORD Address) typedef DWORD<psdk>
PGET_MODULE_BASE_ROUTINE64(HANDLE hProcess,DWORD64 Address) typedef DWORD64<psdk>
PGET_MODULE_HANDLE_EXA(DWORD dwFlags,LPCSTR lpModuleName,HMODULE * phModule) typedef WINBOOL<libloaderapi.h>
PGET_MODULE_HANDLE_EXW(DWORD dwFlags,LPCWSTR lpModuleName,HMODULE * phModule) typedef WINBOOL<libloaderapi.h>
PGET_NEIGHBORS(DWORD InterfaceIndex,PDWORD NeighborList,PDWORD NeighborListSize,PBYTE InterfaceFlags) typedef DWORD<routprot.h>
PGET_NEXT_ORDERED_SERVICE(DWORD OrderingMethod,DWORD ExclusionFlags,PIPX_SERVICE Service)typedef DWORD<stm.h>
PGET_NEXT_SERVICE_FROM_ID(ULONG ServiceID,PIPX_SERVICE NextService,PULONG NextServiceID)typedef DWORD<stm.h>
PGET_RUNTIME_FUNCTION_CALLBACK(DWORD64 ControlPc,PVOID Context) typedef PRUNTIME_FUNCTION<winnt.h>
PGET_SERVICE_COUNT(VOID)typedef ULONG<stm.h>
PGET_SERVICE_FROM_ID(ULONG ServiceID,PIPX_SERVICE Service)typedef WINBOOL<stm.h>
PGET_SERVICE_ID(USHORT Type,PUCHAR Name,PULONG ServiceID)typedef WINBOOL<stm.h>
PGET_SYSTEM_WOW64_DIRECTORY(LPSTR lpBuffer,UINT uSize)
PGET_SYSTEM_WOW64_DIRECTORY_A(LPSTR lpBuffer,UINT uSize) typedef UINT<winbase.h>
PGET_SYSTEM_WOW64_DIRECTORY_W(LPWSTR lpBuffer,UINT uSize) typedef UINT<winbase.h>
PHANDLER_ROUTINE(DWORD CtrlType) typedef WINBOOL<wincon.h>
Phase0Done(void)virtual HRESULT WINAPI <txdtc.h>
Phase0Request(WINBOOL fAbortingHint)virtual HRESULT WINAPI <txdtc.h>
PHID_STATUS_CHANGE(PVOID Context,enum DeviceObjectState State)typedef VOID<hidclass.h>
PHIDP_GETCAPS(IN PHIDP_PREPARSED_DATA PreparsedData,OUT PHIDP_CAPS Capabilities)typedef NTSTATUS<hidclass.h>
PHIDP_GETCAPS(PHIDP_PREPARSED_DATA PreparsedData,PHIDP_CAPS Capabilities)typedef NTSTATUS<hidclass.h>
PHIDP_INSERT_SCANCODES(PVOID Context,PCHAR NewScanCodes,ULONG Length)typedef BOOLEAN<hidpi.h>
PHONECALLBACK(DWORD hDevice,DWORD dwMessage,DWORD_PTR dwInstance,DWORD_PTR dwParam1,DWORD_PTR dwParam2,DWORD_PTR dwParam3) typedef void<tapi.h>
phoneClose(HPHONE hPhone) LONG WINAPI <tapi.h>
phoneConfigDialog(DWORD dwDeviceID,HWND hwndOwner,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
phoneConfigDialogA(DWORD dwDeviceID,HWND hwndOwner,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
phoneConfigDialogW(DWORD dwDeviceID,HWND hwndOwner,LPCWSTR lpszDeviceClass) LONG WINAPI <tapi.h>
phoneDevSpecific(HPHONE hPhone,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tapi.h>
PHONEEVENT(HTAPIPHONE htPhone,DWORD dwMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2,DWORD_PTR dwParam3) typedef void<tspi.h>
phoneGetButtonInfo(HPHONE hPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO lpButtonInfo) LONG WINAPI <tapi.h>
phoneGetButtonInfoA(HPHONE hPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO lpButtonInfo) LONG WINAPI <tapi.h>
phoneGetButtonInfoW(HPHONE hPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO lpButtonInfo) LONG WINAPI <tapi.h>
phoneGetData(HPHONE hPhone,DWORD dwDataID,LPVOID lpData,DWORD dwSize) LONG WINAPI <tapi.h>
phoneGetDevCaps(HPHONEAPP hPhoneApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtVersion,LPPHONECAPS lpPhoneCaps) LONG WINAPI <tapi.h>
phoneGetDevCapsA(HPHONEAPP hPhoneApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtVersion,LPPHONECAPS lpPhoneCaps) LONG WINAPI <tapi.h>
phoneGetDevCapsW(HPHONEAPP hPhoneApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtVersion,LPPHONECAPS lpPhoneCaps) LONG WINAPI <tapi.h>
phoneGetDisplay(HPHONE hPhone,LPVARSTRING lpDisplay) LONG WINAPI <tapi.h>
phoneGetGain(HPHONE hPhone,DWORD dwHookSwitchDev,LPDWORD lpdwGain) LONG WINAPI <tapi.h>
phoneGetHookSwitch(HPHONE hPhone,LPDWORD lpdwHookSwitchDevs) LONG WINAPI <tapi.h>
phoneGetIcon(DWORD dwDeviceID,LPCSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tapi.h>
phoneGetIconA(DWORD dwDeviceID,LPCSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tapi.h>
phoneGetIconW(DWORD dwDeviceID,LPCWSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tapi.h>
phoneGetID(HPHONE hPhone,LPVARSTRING lpDeviceID,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
phoneGetIDA(HPHONE hPhone,LPVARSTRING lpDeviceID,LPCSTR lpszDeviceClass) LONG WINAPI <tapi.h>
phoneGetIDW(HPHONE hPhone,LPVARSTRING lpDeviceID,LPCWSTR lpszDeviceClass) LONG WINAPI <tapi.h>
phoneGetLamp(HPHONE hPhone,DWORD dwButtonLampID,LPDWORD lpdwLampMode) LONG WINAPI <tapi.h>
phoneGetMessage(HPHONEAPP hPhoneApp,LPPHONEMESSAGE lpMessage,DWORD dwTimeout) LONG WINAPI <tapi.h>
phoneGetRing(HPHONE hPhone,LPDWORD lpdwRingMode,LPDWORD lpdwVolume) LONG WINAPI <tapi.h>
phoneGetStatus(HPHONE hPhone,LPPHONESTATUS lpPhoneStatus) LONG WINAPI <tapi.h>
phoneGetStatusA(HPHONE hPhone,LPPHONESTATUS lpPhoneStatus) LONG WINAPI <tapi.h>
phoneGetStatusMessages(HPHONE hPhone,LPDWORD lpdwPhoneStates,LPDWORD lpdwButtonModes,LPDWORD lpdwButtonStates) LONG WINAPI <tapi.h>
phoneGetStatusW(HPHONE hPhone,LPPHONESTATUS lpPhoneStatus) LONG WINAPI <tapi.h>
phoneGetVolume(HPHONE hPhone,DWORD dwHookSwitchDev,LPDWORD lpdwVolume) LONG WINAPI <tapi.h>
phoneInitialize(LPHPHONEAPP lphPhoneApp,HINSTANCE hInstance,PHONECALLBACK lpfnCallback,LPCSTR lpszAppName,LPDWORD lpdwNumDevs) LONG WINAPI <tapi.h>
phoneInitializeEx(LPHPHONEAPP lphPhoneApp,HINSTANCE hInstance,PHONECALLBACK lpfnCallback,LPCSTR lpszFriendlyAppName,LPDWORD lpdwNumDevs,LPDWORD lpdwAPIVersion,LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams)<tapi.h>
phoneInitializeExA(LPHPHONEAPP lphPhoneApp,HINSTANCE hInstance,PHONECALLBACK lpfnCallback,LPCSTR lpszFriendlyAppName,LPDWORD lpdwNumDevs,LPDWORD lpdwAPIVersion,LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams) LONG WINAPI <tapi.h>
phoneInitializeExW(LPHPHONEAPP lphPhoneApp,HINSTANCE hInstance,PHONECALLBACK lpfnCallback,LPCWSTR lpszFriendlyAppName,LPDWORD lpdwNumDevs,LPDWORD lpdwAPIVersion,LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams) LONG WINAPI <tapi.h>
phoneNegotiateAPIVersion(HPHONEAPP hPhoneApp,DWORD dwDeviceID,DWORD dwAPILowVersion,DWORD dwAPIHighVersion,LPDWORD lpdwAPIVersion,LPPHONEEXTENSIONID lpExtensionID) LONG WINAPI <tapi.h>
phoneNegotiateExtVersion(HPHONEAPP hPhoneApp,DWORD dwDeviceID,DWORD dwAPIVersion,DWORD dwExtLowVersion,DWORD dwExtHighVersion,LPDWORD lpdwExtVersion) LONG WINAPI <tapi.h>
phoneOpen(HPHONEAPP hPhoneApp,DWORD dwDeviceID,LPHPHONE lphPhone,DWORD dwAPIVersion,DWORD dwExtVersion,DWORD_PTR dwCallbackInstance,DWORD dwPrivilege) LONG WINAPI <tapi.h>
phoneSetButtonInfo(HPHONE hPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO const lpButtonInfo) LONG WINAPI <tapi.h>
phoneSetButtonInfoA(HPHONE hPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO const lpButtonInfo) LONG WINAPI <tapi.h>
phoneSetButtonInfoW(HPHONE hPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO const lpButtonInfo) LONG WINAPI <tapi.h>
phoneSetData(HPHONE hPhone,DWORD dwDataID,LPVOID const lpData,DWORD dwSize) LONG WINAPI <tapi.h>
phoneSetDisplay(HPHONE hPhone,DWORD dwRow,DWORD dwColumn,LPCSTR lpsDisplay,DWORD dwSize) LONG WINAPI <tapi.h>
phoneSetGain(HPHONE hPhone,DWORD dwHookSwitchDev,DWORD dwGain) LONG WINAPI <tapi.h>
phoneSetHookSwitch(HPHONE hPhone,DWORD dwHookSwitchDevs,DWORD dwHookSwitchMode) LONG WINAPI <tapi.h>
phoneSetLamp(HPHONE hPhone,DWORD dwButtonLampID,DWORD dwLampMode) LONG WINAPI <tapi.h>
phoneSetRing(HPHONE hPhone,DWORD dwRingMode,DWORD dwVolume) LONG WINAPI <tapi.h>
phoneSetStatusMessages(HPHONE hPhone,DWORD dwPhoneStates,DWORD dwButtonModes,DWORD dwButtonStates) LONG WINAPI <tapi.h>
phoneSetVolume(HPHONE hPhone,DWORD dwHookSwitchDev,DWORD dwVolume) LONG WINAPI <tapi.h>
phoneShutdown(HPHONEAPP hPhoneApp) LONG WINAPI <tapi.h>
PHW_CANCEL_SRB(IN PHW_STREAM_REQUEST_BLOCK SRB)typedef VOID<strmini.h>
PHW_CLOCK_FUNCTION(IN PHW_TIME_CONTEXT HwTimeContext)typedef VOID<strmini.h>
PHW_EVENT_ROUTINE(IN PHW_EVENT_DESCRIPTOR EventDescriptor)typedef NTSTATUS<strmini.h>
PHW_INTERRUPT(IN PVOID DeviceExtension)typedef BOOLEAN<strmini.h>
PHW_PRIORITY_ROUTINE(IN PVOID Context)typedef VOID<strmini.h>
PHW_QUERY_CLOCK_ROUTINE(IN PHW_TIME_CONTEXT TimeContext)typedef VOID<strmini.h>
PHW_RECEIVE_DEVICE_SRB(IN PHW_STREAM_REQUEST_BLOCK SRB)typedef VOID<strmini.h>
PHW_RECEIVE_STREAM_CONTROL_SRB(IN struct _HW_STREAM_REQUEST_BLOCK * SRB)typedef VOID<strmini.h>
PHW_RECEIVE_STREAM_DATA_SRB(IN struct _HW_STREAM_REQUEST_BLOCK * SRB)typedef VOID<strmini.h>
PHW_REQUEST_TIMEOUT_HANDLER(IN PHW_STREAM_REQUEST_BLOCK SRB)typedef VOID<strmini.h>
PHW_RESET_ADAPTER(IN PVOID DeviceExtension)typedef BOOLEAN<strmini.h>
PHW_TIMER_ROUTINE(IN PVOID Context)typedef VOID<strmini.h>
PhysicalDeviceObjectName(IN PVOID BusContext,OUT PUSB_DEVICE_HANDLE * NewDeviceHandle,IN PUSB_DEVICE_HANDLE HsHubDeviceHandle,IN USHORT PortStatus,IN PUSB_PORT_PATH PortPath,OUT PUSB_CD_ERROR_INFORMATION CdErrorInfo,IN USHORT TtPortNumber,IN PDEVICE_OBJECT PdoDeviceObject,IN PUNICODE_STRING) IN PUNICODE_STRING  <hubbusif.h>
PhysicalToLogicalPoint(HWND hWnd,LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
PickIconDlg(HWND hwnd,PWSTR pszIconPath,UINT cchIconPath,int * piIconIndex) SHSTDAPI_<shlobj.h>
Pickup(BSTR pGroupID)virtual HRESULT WINAPI <tapi3if.h>
Pics(BSTR bstrHeaderValue)virtual HRESULT WINAPI <asptlb.h>
PIDLIST_ABSOLUTE_UserFree(ULONG *,PIDLIST_ABSOLUTE *)void            __RPC_USER <tlogstg.h>
PIDLIST_ABSOLUTE_UserMarshal(ULONG *,unsigned char *,PIDLIST_ABSOLUTE *)unsigned char<tlogstg.h>
PIDLIST_ABSOLUTE_UserSize(ULONG *,ULONG,PIDLIST_ABSOLUTE *)ULONG           __RPC_USER <tlogstg.h>
PIDLIST_ABSOLUTE_UserUnmarshal(ULONG *,unsigned char *,PIDLIST_ABSOLUTE *)unsigned char<tlogstg.h>
PIDLIST_RELATIVE_UserFree(ULONG *,PIDLIST_RELATIVE *)void            __RPC_USER <shobjidl.h>
PIDLIST_RELATIVE_UserMarshal(ULONG *,unsigned char *,PIDLIST_RELATIVE *)unsigned char<shobjidl.h>
PIDLIST_RELATIVE_UserSize(ULONG *,ULONG,PIDLIST_RELATIVE *)ULONG           __RPC_USER <shobjidl.h>
PIDLIST_RELATIVE_UserUnmarshal(ULONG *,unsigned char *,PIDLIST_RELATIVE *)unsigned char<shobjidl.h>
Pie(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PIEnroll2GetNoCOM(void) IEnroll2<xenroll.h>
PIEnroll4GetNoCOM(void) IEnroll4<xenroll.h>
PIEnrollGetNoCOM(void) IEnroll<xenroll.h>
PifMgr_CloseProperties(HANDLE hProps,UINT flOpt) SHSTDAPI_<shlobj.h>
PifMgr_GetProperties(HANDLE hProps,PCSTR pszGroup,void * lpProps,int cbProps,UINT flOpt) SHSTDAPI_<shlobj.h>
PifMgr_OpenProperties(PCWSTR pszApp,PCWSTR pszPIF,UINT hInf,UINT flOpt) SHSTDAPI_<shlobj.h>
PifMgr_SetProperties(HANDLE hProps,PCSTR pszGroup,const void * lpProps,int cbProps,UINT flOpt) SHSTDAPI_<shlobj.h>
PIMAGE_TLS_CALLBACK(PVOID DllHandle,DWORD Reason,PVOID Reserved)typedef VOID<winnt.h>
PIMAGEHLP_STATUS_ROUTINE(IMAGEHLP_STATUS_REASON Reason,PCSTR ImageName,PCSTR DllName,ULONG_PTR Va,ULONG_PTR Parameter) typedef WINBOOL<imagehlp.h>
PIMAGEHLP_STATUS_ROUTINE32(IMAGEHLP_STATUS_REASON Reason,PCSTR ImageName,PCSTR DllName,ULONG Va,ULONG_PTR Parameter) typedef WINBOOL<imagehlp.h>
PIMAGEHLP_STATUS_ROUTINE64(IMAGEHLP_STATUS_REASON Reason,PCSTR ImageName,PCSTR DllName,ULONG64 Va,ULONG_PTR Parameter) typedef WINBOOL<imagehlp.h>
pIndex(const IID * pIID,int *) typedef int __stdcall IIDLookupRtn<rpcproxy.h>
Ping(const wchar_t * pwszAuthority)virtual HRESULT WINAPI <vds.h>
Ping(void)virtual HRESULT WINAPI <vds.h>
Ping2(const wchar_t * pwszAuthority)virtual HRESULT WINAPI <certreqd.h>
PINIT_ONCE_FN(PINIT_ONCE InitOnce,PVOID Parameter,PVOID * Context) typedef WINBOOL<synchapi.h>
PINSPECT_HSTRING_CALLBACK(void * context,UINT_PTR readAddress,UINT32 length,BYTE * buffer)typedef HRESULT<winstring.h>
PINTERFACE_DEREFERENCE(PVOID Context)typedef VOID<wdm.h>
PINTERFACE_REFERENCE(PVOID Context)typedef VOID<wdm.h>
PINTERFACE_STATUS(ULONG InterfaceIndex,WINBOOL InterfaceActive,DWORD StatusType,PVOID StatusInfo) typedef DWORD<routprot.h>
PINTERRUPTSYNCROUTINE(IN struct IInterruptSync * InterruptSync,IN PVOID DynamicContext)typedef NTSTATUS<portcls.h>
PIO_APC_ROUTINE(PVOID ApcContext,PIO_STATUS_BLOCK IoStatusBlock,ULONG Reserved) typedef VOID<winternl.h>
PIPFORWARD_CHANGE_CALLBACK(PVOID CallerContext,PMIB_IPFORWARD_ROW2 Row,MIB_NOTIFICATION_TYPE NotificationType) typedef VOID<netioapi.h>
PIPINTERFACE_CHANGE_CALLBACK(PVOID CallerContext,PMIB_IPINTERFACE_ROW Row,MIB_NOTIFICATION_TYPE NotificationType) typedef VOID<netioapi.h>
PIS_ALIVE_ROUTINE(RESID Resource) typedef WINBOOL<resapi.h>
PIS_SERVICE(USHORT Type,PUCHAR Name,PIPX_SERVICE Service)typedef WINBOOL<stm.h>
PITEMID_CHILD_UserFree(ULONG *,PITEMID_CHILD *)void            __RPC_USER <shobjidl.h>
PITEMID_CHILD_UserMarshal(ULONG *,unsigned char *,PITEMID_CHILD *)unsigned char<shobjidl.h>
PITEMID_CHILD_UserSize(ULONG *,ULONG,PITEMID_CHILD *)ULONG           __RPC_USER <shobjidl.h>
PITEMID_CHILD_UserUnmarshal(ULONG *,unsigned char *,PITEMID_CHILD *)unsigned char<shobjidl.h>
pIU()IUnknown<mspenum.h>
PixelFormat(DXGI_FORMAT dxgiFormat=DXGI_FORMAT_UNKNOWN,D2D1_ALPHA_MODE alphaMode=D2D1_ALPHA_MODE_UNKNOWN)D2D1FORCEINLINE D2D1_PIXEL_FORMAT <d2d1helper.h>
Play(BSTR Animation,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <wiavideo.h>
Play(BSTR bszAnimation,__LONG32 * pdwReqID)virtual HRESULT WINAPI <wiavideo.h>
Play(void)virtual HRESULT WINAPI <wiavideo.h>
PlayAtTime(DVD_HMSF_TIMECODE * pTime,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayAtTimeInTitle(ULONG ulTitle,DVD_HMSF_TIMECODE * pStartTime,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayBackwards(double dSpeed,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayChapter(ULONG ulChapter,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayChapterInTitle(ULONG ulTitle,ULONG ulChapter,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayChaptersAutoStop(ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayEnhMetaFile(HDC hdc,HENHMETAFILE hmf,CONST RECT * lprect) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PlayEnhMetaFileRecord(HDC hdc,LPHANDLETABLE pht,CONST ENHMETARECORD * pmr,UINT cht) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PlayForwards(double dSpeed,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayGdiScriptOnPrinterIC(HANDLE hPrinterIC,LPBYTE pIn,DWORD cIn,LPBYTE pOut,DWORD cOut,DWORD ul)WINBOOL WINAPI <winsplp.h>
PlayMetaFile(HDC hdc,HMETAFILE hmf) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PlayMetaFileRecord(HDC hdc,LPHANDLETABLE lpHandleTable,LPMETARECORD lpMR,UINT noObjs) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PlayNextChapter(DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayPeriodInTitleAutoStop(ULONG ulTitle,DVD_HMSF_TIMECODE * pStartTime,DVD_HMSF_TIMECODE * pEndTime,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayPrevChapter(DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PlayRecord(EmfPlusRecordType recordType,UINT flags,UINT dataSize,const BYTE * data)	Status <gdiplusmetafile.h>
PlayRing(RTC_RING_TYPE enType,VARIANT_BOOL bPlay)virtual HRESULT WINAPI <rtccore.h>
PlaySound(LPCSTR pszSound,HMODULE hmod,DWORD fdwSound) WINMMAPI WINBOOL WINAPI <mmsystem.h>
PlaySoundA(LPCSTR pszSound,HMODULE hmod,DWORD fdwSound) WINMMAPI WINBOOL WINAPI <mmsystem.h>
PlaySoundW(LPCWSTR pszSound,HMODULE hmod,DWORD fdwSound) WINMMAPI WINBOOL WINAPI <mmsystem.h>
PlayTitle(ULONG ulTitle,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
PLDPTR(rP,rD,rPtr)<kxia64.h>
PLDPTRINC(rP,rD,rPtr,imm)<kxia64.h>
PlgBlt(HDC hdcDest,CONST POINT * lpPoint,HDC hdcSrc,int xSrc,int ySrc,int width,int height,HBITMAP hbmMask,int xMask,int yMask) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PLOG_EVENT_ROUTINE(RESOURCE_HANDLE ResourceHandle,LOG_LEVEL LogLevel,LPCWSTR FormatString,...) typedef VOID<resapi.h>
PLOG_FULL_HANDLER_CALLBACK(HANDLE hLogFile,DWORD dwError,WINBOOL fLogIsPinned,PVOID pvClientContext)typedef VOID<clfsmgmtw32.h>
PLOG_TAIL_ADVANCE_CALLBACK(HANDLE hLogFile,CLFS_LSN lsnTarget,PVOID pvClientContext)typedef VOID<clfsmgmtw32.h>
PLOG_UNPINNED_CALLBACK(HANDLE hLogFile,PVOID pvClientContext)typedef VOID<clfsmgmtw32.h>
PLOOKS_ALIVE_ROUTINE(RESID Resource) typedef WINBOOL<resapi.h>
PM_CLOSE_PROC(void)typedef DWORD<winperf.h>
PM_COLLECT_PROC(LPWSTR,LPVOID *,LPDWORD,LPDWORD)typedef DWORD<winperf.h>
PM_OPEN_PROC(LPWSTR)typedef DWORD<winperf.h>
PM_QUERY_PROC(LPDWORD,LPVOID *,LPDWORD,LPDWORD)typedef DWORD<winperf.h>
PMDAXISINFO_GETAT(rgAxisInfo,iAxis)<oledb.h>
PMGM_CREATION_ALERT_CALLBACK(DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,DWORD dwInIfIndex,DWORD dwInIfNextHopAddr,DWORD dwIfCount,PMGM_IF_ENTRY pmieOutIfList)typedef DWORD<mgm.h>
PMGM_DISABLE_IGMP_CALLBACK(DWORD dwIfIndex,DWORD dwIfNextHopAddr)typedef DWORD<mgm.h>
PMGM_ENABLE_IGMP_CALLBACK(DWORD dwIfIndex,DWORD dwIfNextHopAddr)typedef DWORD<mgm.h>
PMGM_JOIN_ALERT_CALLBACK(DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,WINBOOL bMemberUpdate)typedef DWORD<mgm.h>
PMGM_LOCAL_JOIN_CALLBACK(DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,DWORD dwIfIndex,DWORD dwIfNextHopAddr)typedef DWORD<mgm.h>
PMGM_LOCAL_LEAVE_CALLBACK(DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,DWORD dwIfIndex,DWORD dwIfNextHopAddr)typedef DWORD<mgm.h>
PMGM_PRUNE_ALERT_CALLBACK(DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,DWORD dwIfIndex,DWORD dwIfNextHopAddr,WINBOOL bMemberDelete,PDWORD pdwTimeout)typedef DWORD<mgm.h>
PMGM_RPF_CALLBACK(DWORD dwSourceAddr,DWORD dwSourceMask,DWORD dwGroupAddr,DWORD dwGroupMask,PDWORD pdwInIfIndex,PDWORD pdwInIfNextHopAddr,PDWORD pdwUpStreamNbr,DWORD dwHdrSize,PBYTE pbPacketHdr,PBYTE pbRoute)typedef DWORD<mgm.h>
PMGM_WRONG_IF_CALLBACK(DWORD dwSourceAddr,DWORD dwGroupAddr,DWORD dwIfIndex,DWORD dwIfNextHopAddr,DWORD dwHdrSize,PBYTE pbPacketHdr)typedef DWORD<mgm.h>
PMIB_CREATE(ULONG InputDataSize,PVOID InputData) typedef DWORD<routprot.h>
PMIB_DELETE(ULONG InputDataSize,PVOID InputData) typedef DWORD<routprot.h>
PMIB_GET(ULONG InputDataSize,PVOID InputData,PULONG OutputDataSize,PVOID OutputData) typedef DWORD<routprot.h>
PMIB_GET_FIRST(ULONG InputDataSize,PVOID InputData,PULONG OutputDataSize,PVOID OutputData) typedef DWORD<routprot.h>
PMIB_GET_NEXT(ULONG InputDataSize,PVOID InputData,PULONG OutputDataSize,PVOID OutputData) typedef DWORD<routprot.h>
PMIB_GET_TRAP_INFO(ULONG InputDataSize,PVOID InputData,PULONG OutputDataSize,PVOID OutputData) typedef DWORD<routprot.h>
PMIB_SET(ULONG InputDataSize,PVOID InputData) typedef DWORD<routprot.h>
PMIB_SET_TRAP_INFO(HANDLE Event,ULONG InputDataSize,PVOID InputData,PULONG OutputDataSize,PVOID OutputData) typedef DWORD<routprot.h>
PMPRADMINACCEPTNEWCONNECTIONEX(RAS_CONNECTION_EX *)typedef BOOL<mprapi.h>
PMPRADMINACCEPTNEWLINK(RAS_PORT_0 *,RAS_PORT_1 *)typedef WINBOOL<mprapi.h>
PMPRADMINACCEPTREAUTHENTICATIONEX(RAS_CONNECTION_EX *)typedef BOOL<mprapi.h>
PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX(RAS_CONNECTION_EX *)typedef VOID<mprapi.h>
PMPRADMINGETIPADDRESSFORUSER(WCHAR *,WCHAR *,DWORD *,WINBOOL *)typedef DWORD<mprapi.h>
PMPRADMINGETIPV6ADDRESSFORUSER(WCHAR *,WCHAR *,IN6_ADDR *,WINBOOL *)typedef DWORD<mprapi.h>
PMPRADMINLINKHANGUPNOTIFICATION(RAS_PORT_0 *,RAS_PORT_1 *)typedef VOID<mprapi.h>
PMPRADMINRELEASEIPADRESS(WCHAR *,WCHAR *,DWORD *)typedef VOID<mprapi.h>
PMPRADMINRELEASEIPV6ADDRESSFORUSER(WCHAR *,WCHAR *,IN6_ADDR *)typedef VOID<mprapi.h>
PMPRADMINTERMINATEDLL()typedef DWORD<mprapi.h>
PMQRECEIVECALLBACK(HRESULT hrStatus,QUEUEHANDLE hSource,DWORD dwTimeout,DWORD dwAction,MQMSGPROPS * pMessageProps,LPOVERLAPPED lpOverlapped,HANDLE hCursor) typedef VOID<mq.h>
PMSIHANDLE() ~<msi.h>
PMSIHANDLE(MSIHANDLE h) void operator<msi.h>
PnpNotifHandler(WINBOOL bDeviceArrival) virtual HRESULT <mspaddr.h>
PNTSD_CHECK_CONTROL_C(VOID) typedef WINBOOL<ntsdexts.h>
PNTSD_DISASM(ULONG_PTR * lpOffset,LPSTR lpBuffer,ULONG fShowEfeectiveAddress) typedef DWORD<ntsdexts.h>
PNTSD_EXTENSION_ROUTINE(HANDLE hCurrentProcess,HANDLE hCurrentThread,DWORD dwCurrentPc,PNTSD_EXTENSION_APIS lpExtensionApis,LPSTR lpArgumentString) typedef VOID<ntsdexts.h>
PNTSD_GET_EXPRESSION(char *) typedef ULONG_PTR<ntsdexts.h>
PNTSD_GET_SYMBOL(ULONG_PTR offset,PUCHAR pchBuffer,ULONG_PTR * pDisplacement) typedef VOID<ntsdexts.h>
PNTSD_OUTPUT_ROUTINE(char *,...) typedef VOID<ntsdexts.h>
PoCallDriver(IN struct _DEVICE_OBJECT * DeviceObject,IN OUT struct _IRP * Irp)<wdm.h>
PoClearPowerRequest(IN OUT PVOID PowerRequest,IN POWER_REQUEST_TYPE Type)<wdm.h>
PoCreatePowerRequest(OUT PVOID * PowerRequest,IN PDEVICE_OBJECT DeviceObject,IN PCOUNTED_REASON_CONTEXT Context)<wdm.h>
PoDeletePowerRequest(IN OUT PVOID PowerRequest)<wdm.h>
PoEndDeviceBusy(IN OUT PULONG IdlePointer)<wdm.h>
POFFLINE_ROUTINE(RESID Resource) typedef DWORD<resapi.h>
POFFLINE_V2_ROUTINE(RESID Resource,LPCWSTR DestinationNodeName,DWORD OfflineFlags,PBYTE InBuffer,DWORD InBufferSize,DWORD Reserved) typedef DWORD<resapi.h>
PoGetSystemWake(IN struct _IRP * Irp)<wdm.h>
POGOAUTOSWEEPPROCA(const char *)typedef void<pgobootrun.h>
POGOAUTOSWEEPPROCW(const unsigned short *)typedef void<pgobootrun.h>
POGOAUTOSWEEPPROCW(const wchar_t *)typedef void<pgobootrun.h>
Point()	<ntddcdrm.h>
Point(const Point & point)	 operator<ntddcdrm.h>
Point(const Size & size)	<ntddcdrm.h>
Point(INT x,INT y)	<ntddcdrm.h>
Point2(T x,T y)template<d2d1helper.h>
Point2F(FLOAT x=0.f,FLOAT y=0.f)D2D1FORCEINLINE D2D1_POINT_2F <d2d1helper.h>
Point2L(INT32 x=0,INT32 y=0)D2D1FORCEINLINE D2D1_POINT_2L <d2d1_1helper.h>
Point2U(UINT32 x=0,UINT32 y=0)D2D1FORCEINLINE D2D1_POINT_2U <d2d1helper.h>
PointF()	<gdiplustypes.h>
PointF(const PointF & point)	 operator<gdiplustypes.h>
PointF(const SizeF & size)	<gdiplustypes.h>
PointF(REAL x,REAL y)	<gdiplustypes.h>
POINTSTOPOINT(pt,pts)<winuser.h>
POINTTOPOINTS(pt)<winuser.h>
PolyBezier(HDC hdc,CONST POINT * apt,DWORD cpt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyBezierTo(HDC hdc,CONST POINT * apt,DWORD cpt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyDraw(HDC hdc,CONST POINT * apt,CONST BYTE * aj,int cpt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Polygon(HDC hdc,CONST POINT * apt,int cpt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Polyline(HDC hdc,CONST POINT * apt,int cpt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolylineTo(HDC hdc,CONST POINT * apt,DWORD cpt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyPolygon(HDC hdc,CONST POINT * apt,CONST INT * asz,int csz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyPolyline(HDC hdc,CONST POINT * apt,CONST DWORD * asz,DWORD csz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyTextOut(HDC hdc,CONST POLYTEXTA * ppt,int nstrings) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyTextOutA(HDC hdc,CONST POLYTEXTA * ppt,int nstrings) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PolyTextOutW(HDC hdc,CONST POLYTEXTW * ppt,int nstrings) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PONLINE_ROUTINE(RESID Resource,LPHANDLE EventHandle) typedef DWORD<resapi.h>
PONLINE_V2_ROUTINE(RESID Resource,LPHANDLE EventHandle,DWORD OnlineFlags,PBYTE InBuffer,DWORD InBufferSize,DWORD Reserved) typedef DWORD<resapi.h>
POPEN_ROUTINE(LPCWSTR ResourceName,HKEY ResourceKey,RESOURCE_HANDLE ResourceHandle) typedef RESID<resapi.h>
POPEN_V2_ROUTINE(LPCWSTR ResourceName,HKEY ResourceKey,RESOURCE_HANDLE ResourceHandle,DWORD OpenFlags) typedef RESID<resapi.h>
PopEntryList(IN OUT PSINGLE_LIST_ENTRY ListHead)<wdm.h>
Populate(void)virtual HRESULT WINAPI <mtxadmin.h>
PopulateByKey(SAFEARRAY * aKeys)virtual HRESULT WINAPI <mtxadmin.h>
PopulateByQuery(BSTR bstrQueryString,__LONG32 lQueryType)virtual HRESULT WINAPI <mtxadmin.h>
PopulateNamespaceTable(void)virtual HRESULT WINAPI <mshtmlc.h>
PopupMessage(BSTR bstrMessage,__LONG32 nTimeout,VARIANT_BOOL fClick,__LONG32 * plCookie)virtual HRESULT WINAPI <msimcsdk.h>
PoQueryWatchdogTime(IN PDEVICE_OBJECT Pdo,OUT PULONG SecondsRemaining)<wdm.h>
PoQueueShutdownWorkItem(IN OUT PWORK_QUEUE_ITEM WorkItem)<ntifs.h>
PoRegisterDeviceForIdleDetection(IN struct _DEVICE_OBJECT * DeviceObject,IN ULONG ConservationIdleTime,IN ULONG PerformanceIdleTime,IN DEVICE_POWER_STATE State)<wdm.h>
PoRegisterPowerSettingCallback(IN PDEVICE_OBJECT DeviceObject OPTIONAL,IN LPCGUID SettingGuid,IN PPOWER_SETTING_CALLBACK Callback,IN PVOID Context OPTIONAL,OUT PVOID * Handle OPTIONAL)<wdm.h>
PoRegisterSystemState(IN OUT PVOID StateHandle OPTIONAL,IN EXECUTION_STATE Flags)<wdm.h>
PoRequestPowerIrp(IN struct _DEVICE_OBJECT * DeviceObject,IN UCHAR MinorFunction,IN POWER_STATE PowerState,IN PREQUEST_POWER_COMPLETE CompletionFunction OPTIONAL,IN PVOID Context OPTIONAL,OUT struct _IRP ** Irp OPTIONAL)<wdm.h>
PoRequestShutdownEvent(OUT PVOID * Event)<wdm.h>
PORT_ALLOCATED_SENSE(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension,PSCSI_REQUEST_BLOCK Srb)<classpnp.h>
PORT_FROM_SVCID_TCP(_g)<svcguid.h>
PORT_FROM_SVCID_UDP(_g)<svcguid.h>
PortNumber(IN PVOID BusContext,OUT PUSB_DEVICE_HANDLE * NewDeviceHandle,IN PUSB_DEVICE_HANDLE HubDeviceHandle,IN USHORT PortStatus,IN USHORT) IN USHORT <usbuser.h>
PoSetDeviceBusy(IdlePointer) <wdm.h>
PoSetDeviceBusyEx(IN OUT PULONG IdlePointer)<wdm.h>
PoSetPowerRequest(IN OUT PVOID PowerRequest,IN POWER_REQUEST_TYPE Type)<wdm.h>
PoSetPowerState(IN struct _DEVICE_OBJECT * DeviceObject,IN POWER_STATE_TYPE Type,IN POWER_STATE State)<wdm.h>
PoSetSystemState(IN EXECUTION_STATE Flags)<wdm.h>
PoSetSystemWake(IN OUT struct _IRP * Irp)<wdm.h>
PositionMarkupPointer(IMarkupPointer * pMarkupPointer)virtual HRESULT WINAPI <mshtmlc.h>
PositionOnBookmark(HCHAPTER hChapter,DBBKMARK cbBookmark,const BYTE * pBookmark)virtual HRESULT WINAPI <oledb.h>
Post(void)virtual HRESULT WINAPI <cdosys.h>
PoStartDeviceBusy(IN OUT PULONG IdlePointer)<wdm.h>
PoStartNextPowerIrp(IN OUT struct _IRP * Irp)<wdm.h>
PostCreate(IUnknown * punkServicesIn)virtual HRESULT WINAPI <cluscfgserver.h>
PostEditorEventNotify(DISPID inEvtDispId,IHTMLEventObj * pIEventObj)virtual HRESULT WINAPI <mshtmlc.h>
PostEvent(MSPEVENTITEM * EventItem) virtual HRESULT <mspaddr.h>
PostEvent(VARIANT * vEvent)virtual HRESULT WINAPI <mspaddr.h>
PostHandleEvent(DISPID inEvtDispId,IHTMLEventObj * pIEventObj)virtual HRESULT WINAPI <mshtmlc.h>
PostMessage(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
PostMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
PostMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
Postpone(REFTIME newtime)virtual HRESULT WINAPI <control.h>
PostQueuedCompletionStatus(HANDLE CompletionPort,DWORD dwNumberOfBytesTransferred,ULONG_PTR dwCompletionKey,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <ioapiset.h>
PostQuitMessage(int nExitCode) WINUSERAPI VOID WINAPI <winuser.h>
PostReply(IMessage ** ppMsg)virtual HRESULT WINAPI <cdosys.h>
PostShell(BSTR bstrUserName,DWORD dwSessionId)virtual HRESULT WINAPI <sensevts.h>
PostThreadMessage(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
PostThreadMessageA(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
PostThreadMessageW(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
PostVirtualKeyEvent(UINT,WINBOOL) VOID WINAPI <penwin.h>
PostVirtualMouseEvent(UINT,int,int) VOID WINAPI <penwin.h>
PoUnregisterPowerSettingCallback(IN OUT PVOID Handle)<wdm.h>
PoUnregisterSystemState(IN OUT PVOID StateHandle)<wdm.h>
POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK(HANDLE Process,PVOID TableAddress,PDWORD Entries,PRUNTIME_FUNCTION * Functions) typedef DWORD<winnt.h>
PowerCanRestoreIndividualDefaultPowerScheme(const GUID * SchemeGuid)DWORD WINAPI <powrprof.h>
PowerClearRequest(HANDLE PowerRequest,POWER_REQUEST_TYPE RequestType) WINBASEAPI WINBOOL WINAPI <winbase.h>
PowerCreatePossibleSetting(HKEY RootSystemPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,ULONG PossibleSettingIndex)DWORD WINAPI <powrprof.h>
PowerCreateRequest(PREASON_CONTEXT Context) WINBASEAPI HANDLE WINAPI <winbase.h>
PowerCreateSetting(HKEY RootSystemPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid)DWORD WINAPI <powrprof.h>
PowerDeleteScheme(HKEY RootPowerKey,const GUID * SchemeGuid)DWORD WINAPI <powrprof.h>
PowerDeterminePlatformRole(void)POWER_PLATFORM_ROLE WINAPI <powrprof.h>
PowerDuplicateScheme(HKEY RootPowerKey,const GUID * SourceSchemeGuid,GUID ** DestinationSchemeGuid)DWORD WINAPI <powrprof.h>
PowerEnumerate(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,POWER_DATA_ACCESSOR AccessFlags,ULONG Index,UCHAR * Buffer,DWORD * BufferSize)DWORD WINAPI <powrprof.h>
PowerGetActiveScheme(HKEY UserRootPowerKey,GUID ** ActivePolicyGuid)DWORD WINAPI <powrprof.h>
PowerImportPowerScheme(HKEY RootPowerKey,LPCWSTR ImportFileNamePath,GUID ** DestinationSchemeGuid)DWORD WINAPI <powrprof.h>
PowerReadACDefaultIndex(HKEY RootPowerKey,const GUID * SchemePersonalityGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD AcDefaultIndex)DWORD WINAPI <powrprof.h>
PowerReadACValue(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,PULONG Type,LPBYTE Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadACValueIndex(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD AcValueIndex)DWORD WINAPI <powrprof.h>
PowerReadDCDefaultIndex(HKEY RootPowerKey,const GUID * SchemePersonalityGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD DcDefaultIndex)DWORD WINAPI <powrprof.h>
PowerReadDCValue(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,PULONG Type,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadDCValueIndex(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD DcValueIndex)DWORD WINAPI <powrprof.h>
PowerReadDescription(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadFriendlyName(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadIconResourceSpecifier(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadPossibleDescription(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,ULONG PossibleSettingIndex,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadPossibleFriendlyName(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,ULONG PossibleSettingIndex,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadPossibleValue(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,PULONG Type,ULONG PossibleSettingIndex,PUCHAR Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerReadSettingAttributes(const GUID * SubGroupGuid,const GUID * PowerSettingGuid)DWORD WINAPI <powrprof.h>
PowerReadValueIncrement(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD ValueIncrement)DWORD WINAPI <powrprof.h>
PowerReadValueMax(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD ValueMaximum)DWORD WINAPI <powrprof.h>
PowerReadValueMin(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,LPDWORD ValueMinimum)DWORD WINAPI <powrprof.h>
PowerReadValueUnitsSpecifier(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,UCHAR * Buffer,LPDWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerRemovePowerSetting(const GUID * PowerSettingSubKeyGuid,const GUID * PowerSettingGuid)DWORD WINAPI <powrprof.h>
PowerReplaceDefaultPowerSchemes(void)DWORD WINAPI <powrprof.h>
PowerRestoreDefaultPowerSchemes(void)DWORD WINAPI <powrprof.h>
PowerRestoreIndividualDefaultPowerScheme(const GUID * SchemeGuid)DWORD WINAPI <powrprof.h>
PowerSetActiveScheme(HKEY UserRootPowerKey,const GUID * SchemeGuid)DWORD WINAPI <powrprof.h>
PowerSetRequest(HANDLE PowerRequest,POWER_REQUEST_TYPE RequestType) WINBASEAPI WINBOOL WINAPI <winbase.h>
PowerSettingAccessCheck(POWER_DATA_ACCESSOR AccessFlags,const GUID * PowerGuid)DWORD WINAPI <powrprof.h>
PowerWriteACDefaultIndex(HKEY RootSystemPowerKey,const GUID * SchemePersonalityGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD DefaultAcIndex)DWORD WINAPI <powrprof.h>
PowerWriteACValueIndex(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD AcValueIndex)DWORD WINAPI <powrprof.h>
PowerWriteDCDefaultIndex(HKEY RootSystemPowerKey,const GUID * SchemePersonalityGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD DefaultDcIndex)DWORD WINAPI <powrprof.h>
PowerWriteDCValueIndex(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD DcValueIndex)DWORD WINAPI <powrprof.h>
PowerWriteDescription(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerWriteFriendlyName(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerWriteIconResourceSpecifier(HKEY RootPowerKey,const GUID * SchemeGuid,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerWritePossibleDescription(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,ULONG PossibleSettingIndex,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerWritePossibleFriendlyName(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,ULONG PossibleSettingIndex,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerWritePossibleValue(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,ULONG Type,ULONG PossibleSettingIndex,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
PowerWriteSettingAttributes(const GUID * SubGroupGuid,const GUID * PowerSettingGuid,DWORD Attributes)DWORD WINAPI <powrprof.h>
PowerWriteValueIncrement(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD ValueIncrement)DWORD WINAPI <powrprof.h>
PowerWriteValueMax(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD ValueMaximum)DWORD WINAPI <powrprof.h>
PowerWriteValueMin(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,DWORD ValueMinimum)DWORD WINAPI <powrprof.h>
PowerWriteValueUnitsSpecifier(HKEY RootPowerKey,const GUID * SubGroupOfPowerSettingsGuid,const GUID * PowerSettingGuid,UCHAR * Buffer,DWORD BufferSize)DWORD WINAPI <powrprof.h>
ppDestEndpoint(UUID * InterfaceId,RPC_VERSION * InterfaceVersion,UUID * ObjectId,unsigned char * Rpcpro,void **) typedef RPC_STATUS RPC_ENTRY RPC_FORWARD_FUNCTION<rpcdcep.h>
PPROCESSOR_PCC_DOORBELL_CALLBACK(ULONG Status,ULONG_PTR Context)typedef VOID<poclass.h>
PPROCESSOR_PCC_RING_DOORBELL(UCHAR Command,PPROCESSOR_PCC_DOORBELL_CALLBACK Callback,ULONG_PTR Context)typedef NTSTATUS<poclass.h>
PpropFindProp(LPSPropValue lpPropArray,ULONG cValues,ULONG ulPropTag) STDAPI_<wabutil.h>
PPS_POST_PROCESS_INIT_ROUTINE(VOID) typedef VOID<winternl.h>
PPSPINFO_FROM_WM_INITDIALOG_LPARAM(lParam)<compstui.h>
ppWindow(HWND hwndParent,IMoniker * pmk,VARIANT * pvarArgIn,VARIANT * pvarOptions,IHTMLWindow2 **)typedef HRESULT STDAPICALLTYPE SHOWMODELESSHTMLDIALOGFN<mshtmhst.h>
PQUERY_POWER(DWORD PowerType) typedef DWORD<routprot.h>
PQUERYACTCTXW_FUNC(DWORD dwFlags,HANDLE hActCtx,PVOID pvSubInstance,ULONG ulInfoClass,PVOID pvBuffer,SIZE_T cbBuffer,SIZE_T * pcbWrittenOrRequired) typedef WINBOOL<winbase.h>
PQUORUM_RESOURCE_LOST(RESOURCE_HANDLE Resource) typedef VOID<resapi.h>
PRADIUS_ATTRIBUTE_ARRAY(WINAPI * GetRequest) <authif.h>
PRADIUS_ATTRIBUTE_ARRAY(WINAPI * GetResponse) <authif.h>
PRADIUS_EXTENSION_FREE_ATTRIBUTES(PRADIUS_ATTRIBUTE pAttrs)typedef VOID<authif.h>
PRADIUS_EXTENSION_INIT(VOID)typedef DWORD<authif.h>
PRADIUS_EXTENSION_PROCESS(const RADIUS_ATTRIBUTE * pAttrs,PRADIUS_ACTION pfAction)typedef DWORD<authif.h>
PRADIUS_EXTENSION_PROCESS_2(PRADIUS_EXTENSION_CONTROL_BLOCK pECB)typedef DWORD<authif.h>
PRADIUS_EXTENSION_PROCESS_EX(const RADIUS_ATTRIBUTE * pInAttrs,PRADIUS_ATTRIBUTE * pOutAttrs,PRADIUS_ACTION pfAction)typedef DWORD<authif.h>
PRADIUS_EXTENSION_TERM(VOID)typedef VOID<authif.h>
PREAD_PROCESS_MEMORY_ROUTINE(HANDLE hProcess,DWORD lpBaseAddress,PVOID lpBuffer,DWORD nSize,PDWORD lpNumberOfBytesRead) typedef WINBOOL<psdk>
PREAD_PROCESS_MEMORY_ROUTINE64(HANDLE hProcess,DWORD64 qwBaseAddress,PVOID lpBuffer,DWORD nSize,LPDWORD lpNumberOfBytesRead) typedef WINBOOL<psdk>
PreCreate(IUnknown * punkServicesIn)virtual HRESULT WINAPI <cluscfgserver.h>
PreDrag(void)virtual HRESULT WINAPI <mshtmlc.h>
PreFetchCacheLine(l,a)<winnt.h>
PrefetchForWrite(p)<winnt.h>
PrefetchVirtualMemory(HANDLE hProcess,ULONG_PTR NumberOfEntries,PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,ULONG Flags) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
PREGISTER_PROTOCOL(PMPR_ROUTING_CHARACTERISTICS pRoutingChar,PMPR_SERVICE_CHARACTERISTICS pServiceChar) typedef DWORD<routprot.h>
PREGISTERCLASSNAMEW(LPCWSTR) typedef BOOLEAN<winuser.h>
PreHandleEvent(DISPID inEvtDispId,IHTMLEventObj * pIEventObj)virtual HRESULT WINAPI <mshtmlc.h>
PRELEASE_ROUTINE(RESID Resource) typedef DWORD<resapi.h>
PRELEASE_SPINLOCK(px,rpLock)<kxia64.h>
Prepare(__LONG32 dwType,BSTR bszName,__LONG32 bQueue,__LONG32 * pdwReqID)virtual HRESULT WINAPI <txdtc.h>
Prepare(ULONG cExpectedRuns)virtual HRESULT WINAPI <txdtc.h>
Prepare(void)virtual HRESULT WINAPI <txdtc.h>
PrepareComplete(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
PrepareEnlistment(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
PrepareForSaving(x)<corhdr.h>
PrepareForShutdown(void)virtual HRESULT WINAPI <rtccore.h>
PrepareForSync(ULONG cbNumItems,SYNCMGRITEMID * pItemIDs,HWND hWndParent,DWORD dwReserved)virtual HRESULT WINAPI <mobsync.h>
PrepareForSyncCompleted(HRESULT hr)virtual HRESULT WINAPI <mobsync.h>
PrepareLogArchive(HANDLE hLog,PWSTR pszBaseLogFileName,ULONG cLen,const PCLFS_LSN plsnLow,const PCLFS_LSN plsnHigh,PULONG pcActualLength,PULONGLONG poffBaseLogFileData,PULONGLONG pcbBaseLogFileLength,PCLFS_LSN plsnBase,PCLFS_LSN plsnLast,PCLFS_LSN plsnCurrentArchiveTail,PCLFS_LOG_ARCHIVE_CONTEXT ppvArchiveContext)WINBOOL WINAPI <clfsw32.h>
PrepareRecord(CrmLogRecordRead crmLogRec,WINBOOL * pfForget)virtual HRESULT WINAPI <comsvcs.h>
PrepareRecordVariants(VARIANT * pLogRecord,VARIANT_BOOL * pbForget)virtual HRESULT WINAPI <comsvcs.h>
PrepareRequest(WINBOOL fRetaining,DWORD grfRM,WINBOOL fWantMoniker,WINBOOL fSinglePhase)virtual HRESULT WINAPI <txcoord.h>
PrepareRequestDone(HRESULT hr,IMoniker * pmk,BOID * pboidReason)virtual HRESULT WINAPI <txcoord.h>
PrepareSurface(DWORD_PTR dwUserID,LPDIRECTDRAWSURFACE7 lpSurface,DWORD dwSurfaceFlags)virtual HRESULT WINAPI <strmif.h>
PrepareTape(HANDLE hDevice,DWORD dwOperation,WINBOOL bImmediate) WINBASEAPI DWORD WINAPI <winbase.h>
PrepareToFire(BSTR methodName,IFiringControl * firingControl)virtual HRESULT WINAPI <eventsys.h>
PrepareToFire(REFIID iid,BSTR methodName,IFiringControl * firingControl)virtual HRESULT WINAPI <eventsys.h>
PrepareToHostQuorumResource(void)virtual HRESULT WINAPI <cluscfgserver.h>
PrePrepareComplete(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
PrePrepareEnlistment(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
PREPROCESSMESSAGE(LPVOID lpvSession,LPMESSAGE lpMessage,LPADRBOOK lpAdrBook,LPMAPIFOLDER lpFolder,LPALLOCATEBUFFER AllocateBuffer,LPALLOCATEMORE AllocateMore,LPFREEBUFFER FreeBuffer,ULONG * lpcOutbound,LPMESSAGE ** lpppMessage,LPADRLIST * lppRecipList) typedef HRESULT<mapispi.h>
PresentImage(DWORD_PTR dwUserID,VMRPRESENTATIONINFO * lpPresInfo)virtual HRESULT WINAPI <strmif.h>
PRESOURCE_CONTROL_ROUTINE(RESID Resource,DWORD ControlCode,PVOID InBuffer,DWORD InBufferSize,PVOID OutBuffer,DWORD OutBufferSize,LPDWORD BytesReturned) typedef DWORD<resapi.h>
PRESOURCE_TYPE_CONTROL_ROUTINE(LPCWSTR ResourceTypeName,DWORD ControlCode,PVOID InBuffer,DWORD InBufferSize,PVOID OutBuffer,DWORD OutBufferSize,LPDWORD BytesReturned) typedef DWORD<resapi.h>
PRESTORE_LAST_ERROR(DWORD) typedef VOID<winbase.h>
PRESUTIL_ADD_UNKNOWN_PROPERTIES(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,DWORD pcbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_CREATE_DIRECTORY_TREE(LPCWSTR pszPath) typedef DWORD<resapi.h>
PRESUTIL_DUP_PARAMETER_BLOCK(LPBYTE pOutParams,const LPBYTE pInParams,const PRESUTIL_PROPERTY_ITEM pPropertyTable) typedef DWORD<resapi.h>
PRESUTIL_DUP_STRING(LPCWSTR pszInString) typedef PWSTR<resapi.h>
PRESUTIL_ENUM_PRIVATE_PROPERTIES(HKEY hkeyClusterKey,LPWSTR pszOutProperties,DWORD cbOutPropertiesSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_ENUM_PROPERTIES(const PRESUTIL_PROPERTY_ITEM pPropertyTable,LPWSTR pszOutProperties,DWORD cbOutPropertiesSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_ENUM_RESOURCES(HRESOURCE hSelf,LPCWSTR lpszResTypeName,LPRESOURCE_CALLBACK pResCallBack,PVOID pParameter) typedef DWORD<resapi.h>
PRESUTIL_ENUM_RESOURCES_EX(HCLUSTER hCluster,HRESOURCE hSelf,LPCWSTR lpszResTypeName,LPRESOURCE_CALLBACK_EX pResCallBack,PVOID pParameter) typedef DWORD<resapi.h>
PRESUTIL_ENUM_RESOURCES_EX2(HCLUSTER hCluster,HRESOURCE hSelf,LPCWSTR lpszResTypeName,LPRESOURCE_CALLBACK_EX pResCallBack,PVOID pParameter,DWORD dwDesiredAccess) typedef DWORD<resapi.h>
PRESUTIL_EXPAND_ENVIRONMENT_STRINGS(LPCWSTR pszSrc) typedef LPWSTR<resapi.h>
PRESUTIL_FIND_BINARY_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPBYTE * pbPropertyValue,LPDWORD pcbPropertyValueSize) typedef DWORD<resapi.h>
PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER(HCLUSTER hCluster,HRESOURCE hResource,LPWSTR pszDriveLetter,DWORD * pcchDriveLetter) typedef DWORD<resapi.h>
PRESUTIL_FIND_DWORD_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPDWORD pdwPropertyValue) typedef DWORD<resapi.h>
PRESUTIL_FIND_EXPAND_SZ_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue) typedef DWORD<resapi.h>
PRESUTIL_FIND_EXPANDED_SZ_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue) typedef DWORD<resapi.h>
PRESUTIL_FIND_FILETIME_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPFILETIME pftPropertyValue) typedef DWORD<resapi.h>
PRESUTIL_FIND_LONG_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPLONG plPropertyValue) typedef DWORD<resapi.h>
PRESUTIL_FIND_MULTI_SZ_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue,LPDWORD pcbPropertyValueSize) typedef DWORD<resapi.h>
PRESUTIL_FIND_SZ_PROPERTY(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue) typedef DWORD<resapi.h>
PRESUTIL_FREE_ENVIRONMENT(LPVOID lpEnvironment) typedef DWORD<resapi.h>
PRESUTIL_FREE_PARAMETER_BLOCK(LPBYTE pOutParams,const LPBYTE pInParams,const PRESUTIL_PROPERTY_ITEM pPropertyTable) typedef void<resapi.h>
PRESUTIL_GET_ALL_PROPERTIES(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,DWORD cbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_GET_BINARY_PROPERTY(LPBYTE * ppbOutValue,LPDWORD pcbOutValueSize,const PCLUSPROP_BINARY pValueStruct,const LPBYTE pbOldValue,DWORD cbOldValueSize,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_GET_BINARY_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPBYTE * ppbOutValue,LPDWORD pcbOutValueSize) typedef DWORD<resapi.h>
PRESUTIL_GET_CORE_CLUSTER_RESOURCES(HCLUSTER hCluster,HRESOURCE * phClusterNameResource,HRESOURCE * phClusterIPAddressResource,HRESOURCE * phClusterQuorumResource) typedef DWORD<resapi.h>
PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX(HCLUSTER hClusterIn,HRESOURCE * phClusterNameResourceOut,HRESOURCE * phClusterIPAddressResourceOut,HRESOURCE * phClusterQuorumResourceOut,DWORD dwDesiredAccess) typedef DWORD<resapi.h>
PRESUTIL_GET_DWORD_PROPERTY(LPDWORD pdwOutValue,const PCLUSPROP_DWORD pValueStruct,DWORD dwOldValue,DWORD dwMinimum,DWORD dwMaximum,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_GET_DWORD_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPDWORD pdwOutValue,DWORD dwDefaultValue) typedef DWORD<resapi.h>
PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME(HRESOURCE hResource) typedef LPVOID<resapi.h>
PRESUTIL_GET_EXPAND_SZ_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,WINBOOL bExpand) typedef LPWSTR<resapi.h>
PRESUTIL_GET_FILETIME_PROPERTY(LPFILETIME pftOutValue,const PCLUSPROP_FILETIME pValueStruct,FILETIME ftOldValue,FILETIME ftMinimum,FILETIME ftMaximum,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_GET_LONG_PROPERTY(LPLONG plOutValue,const PCLUSPROP_LONG pValueStruct,LONG lOldValue,LONG lMinimum,LONG lMaximum,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_GET_MULTI_SZ_PROPERTY(LPWSTR * ppszOutValue,LPDWORD pcbOutValueSize,const PCLUSPROP_SZ pValueStruct,LPCWSTR pszOldValue,DWORD cbOldValueSize,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_GET_PRIVATE_PROPERTIES(HKEY hkeyClusterKey,PVOID pOutPropertyList,DWORD cbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_GET_PROPERTIES(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,DWORD cbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,LPBYTE pOutParams,WINBOOL bCheckForRequiredProperties,LPWSTR * pszNameOfPropInError) typedef DWORD<resapi.h>
PRESUTIL_GET_PROPERTY(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTableItem,PVOID * pOutPropertyItem,LPDWORD pcbOutPropertyItemSize) typedef DWORD<resapi.h>
PRESUTIL_GET_PROPERTY_FORMATS(const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyFormatList,DWORD cbPropertyFormatListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_GET_PROPERTY_SIZE(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTableItem,LPDWORD pcbOutPropertyListSize,LPDWORD pnPropertyCount) typedef DWORD<resapi.h>
PRESUTIL_GET_QWORD_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,PULONGLONG pqwOutValue,ULONGLONG qwDefaultValue) typedef DWORD<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENCY(HANDLE hSelf,LPCWSTR lpszResourceType) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS(HCLUSTER hCluster,HANDLE hSelf,PCLUS_RESOURCE_CLASS_INFO prci,WINBOOL bRecurse) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX(HCLUSTER hCluster,HANDLE hSelf,PCLUS_RESOURCE_CLASS_INFO prci,WINBOOL bRecurse,DWORD dwDesiredAccess) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME(HCLUSTER hCluster,HANDLE hSelf,LPCWSTR lpszResourceType,WINBOOL bRecurse) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX(HCLUSTER hCluster,HANDLE hSelf,LPCWSTR lpszResourceType,WINBOOL bRecurse,DWORD dwDesiredAccess) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENCY_EX(HANDLE hSelf,LPCWSTR lpszResourceType,DWORD dwDesiredAccess) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS(HRESOURCE hResource,LPWSTR pszAddress,DWORD * pcchAddress,LPWSTR pszSubnetMask,DWORD * pcchSubnetMask,LPWSTR pszNetwork,DWORD * pcchNetwork) typedef DWORD<resapi.h>
PRESUTIL_GET_RESOURCE_NAME(HRESOURCE hResource,PWSTR pszResourceName,DWORD * pcchResourceNameInOut) typedef DWORD<resapi.h>
PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY(LPCWSTR lpszResourceName,LPCWSTR lpszResourceType) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX(LPCWSTR lpszResourceName,LPCWSTR lpszResourceType,DWORD dwDesiredAccess) typedef HRESOURCE<resapi.h>
PRESUTIL_GET_SZ_PROPERTY(LPWSTR * ppszOutValue,const PCLUSPROP_SZ pValueStruct,LPCWSTR pszOldValue,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_GET_SZ_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName) typedef LPWSTR<resapi.h>
PRESUTIL_IS_PATH_VALID(LPCWSTR pszPath) typedef WINBOOL<resapi.h>
PRESUTIL_IS_RESOURCE_CLASS_EQUAL(PCLUS_RESOURCE_CLASS_INFO prci,HRESOURCE hResource) typedef WINBOOL<resapi.h>
PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK(const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,LPDWORD pcbOutPropertyListSize,const LPBYTE pInParams,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) typedef DWORD<resapi.h>
PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT(LPCWSTR pszServiceName,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) typedef DWORD<resapi.h>
PRESUTIL_RESOURCE_TYPES_EQUAL(LPCWSTR lpszResourceTypeName,HRESOURCE hResource) typedef WINBOOL<resapi.h>
PRESUTIL_RESOURCES_EQUAL(HRESOURCE hSelf,HRESOURCE hResource) typedef WINBOOL<resapi.h>
PRESUTIL_SET_BINARY_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,const LPBYTE pbNewValue,DWORD cbNewValueSize,LPBYTE * ppbOutValue,LPDWORD pcbOutValueSize) typedef DWORD<resapi.h>
PRESUTIL_SET_DWORD_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,DWORD dwNewValue,LPDWORD pdwOutValue) typedef DWORD<resapi.h>
PRESUTIL_SET_EXPAND_SZ_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPCWSTR pszNewValue,LPWSTR * ppszOutString) typedef DWORD<resapi.h>
PRESUTIL_SET_MULTI_SZ_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPCWSTR pszNewValue,DWORD cbNewValueSize,LPWSTR * ppszOutValue,LPDWORD pcbOutValueSize) typedef DWORD<resapi.h>
PRESUTIL_SET_PRIVATE_PROPERTY_LIST(HKEY hkeyClusterKey,const PVOID pInPropertyList,DWORD cbInPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,const LPBYTE pInParams,const PVOID pInPropertyList,DWORD cbInPropertyListSize,LPBYTE pOutParams) typedef DWORD<resapi.h>
PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,const LPBYTE pInParams,const PVOID pInPropertyList,DWORD cbInPropertyListSize,WINBOOL bForceWrite,LPBYTE pOutParams) typedef DWORD<resapi.h>
PRESUTIL_SET_PROPERTY_TABLE(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,WINBOOL bAllowUnknownProperties,const PVOID pInPropertyList,DWORD cbInPropertyListSize,LPBYTE pOutParams) typedef DWORD<resapi.h>
PRESUTIL_SET_PROPERTY_TABLE_EX(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,WINBOOL bAllowUnknownProperties,const PVOID pInPropertyList,DWORD cbInPropertyListSize,WINBOOL bForceWrite,LPBYTE pOutParams) typedef DWORD<resapi.h>
PRESUTIL_SET_QWORD_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,ULONGLONG qwNewValue,PULONGLONG pqwOutValue) typedef DWORD<resapi.h>
PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT(LPCWSTR pszServiceName,HRESOURCE hResource,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) typedef DWORD<resapi.h>
PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS(LPCWSTR pszServiceName,SC_HANDLE schSCMHandle,LPSC_HANDLE phService,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) typedef DWORD<resapi.h>
PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX(LPCWSTR pszServiceName,SC_HANDLE schSCMHandle,LPSC_HANDLE phService,DWORD dwDesiredAccess,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) typedef DWORD<resapi.h>
PRESUTIL_SET_SZ_VALUE(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPCWSTR pszNewValue,LPWSTR * ppszOutString) typedef DWORD<resapi.h>
PRESUTIL_SET_UNKNOWN_PROPERTIES(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,const PVOID pInPropertyList,DWORD cbInPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_START_RESOURCE_SERVICE(LPCWSTR pszServiceName,LPSC_HANDLE phServiceHandle) typedef DWORD<resapi.h>
PRESUTIL_STOP_RESOURCE_SERVICE(LPCWSTR pszServiceName) typedef DWORD<resapi.h>
PRESUTIL_STOP_SERVICE(SC_HANDLE hServiceHandle) typedef DWORD<resapi.h>
PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL(DWORD dwServicePid,WINBOOL bOffline,PDWORD pdwResourceState,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) typedef DWORD<resapi.h>
PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST(const PVOID pInPropertyList,DWORD cbInPropertyListSize) typedef DWORD<resapi.h>
PRESUTIL_VERIFY_PROPERTY_TABLE(const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,WINBOOL bAllowUnknownProperties,const PVOID pInPropertyList,DWORD cbInPropertyListSize,LPBYTE pOutParams) typedef DWORD<resapi.h>
PRESUTIL_VERIFY_RESOURCE_SERVICE(LPCWSTR pszServiceName) typedef DWORD<resapi.h>
PRESUTIL_VERIFY_SERVICE(SC_HANDLE hServiceHandle) typedef DWORD<resapi.h>
PrevPGSearch(void)virtual HRESULT WINAPI <strmif.h>
PRIMARYLANGID(lgid)<winnt.h>
PrintDlgExW(LPPRINTDLGEXW) WINCOMMDLGAPI HRESULT WINAPI <commdlg.h>
PrintDlgW(LPPRINTDLGW) WINCOMMDLGAPI WINBOOL WINAPI <commdlg.h>
PrintDocument(VARIANT * withUI)virtual HRESULT WINAPI <dhtmled.h>
PrintDocumentOnPrintProcessor(HANDLE hPrintProcessor,LPWSTR pDocumentName)<winsplp.h>
PrinterMessageBox(HANDLE hPrinter,DWORD Error,HWND hWnd,LPSTR pText,LPSTR pCaption,DWORD dwType) DWORD WINAPI <winspool.h>
PrinterMessageBoxA(HANDLE hPrinter,DWORD Error,HWND hWnd,LPSTR pText,LPSTR pCaption,DWORD dwType) DWORD WINAPI <winspool.h>
PrinterMessageBoxW(HANDLE hPrinter,DWORD Error,HWND hWnd,LPWSTR pText,LPWSTR pCaption,DWORD dwType) DWORD WINAPI <winspool.h>
PrinterProperties(HWND hWnd,HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
PrintJobs(IADsCollection ** pObject)virtual HRESULT WINAPI <iads.h>
PrintWindow(HWND hwnd,HDC hdcBlt,UINT nFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
PrivacyGetZonePreferenceW(DWORD dwZone,DWORD dwType,LPDWORD pdwTemplate,LPWSTR pszBuffer,LPDWORD pdwBufferLength) INTERNETAPI_<wininet.h>
PrivacySetZonePreferenceW(DWORD dwZone,DWORD dwType,DWORD dwTemplate,LPCWSTR pszPreference) INTERNETAPI_<wininet.h>
PrivateExtractIcons(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON * phicon,UINT * piconid,UINT nIcons,UINT flags) WINUSERAPI UINT WINAPI <winuser.h>
PrivateExtractIconsA(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON * phicon,UINT * piconid,UINT nIcons,UINT flags) WINUSERAPI UINT WINAPI <winuser.h>
PrivateExtractIconsW(LPCWSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON * phicon,UINT * piconid,UINT nIcons,UINT flags) WINUSERAPI UINT WINAPI <winuser.h>
PrivateFontCollection()	virtual ~<gdiplusheaders.h>
PrivateFontCollection(const VOID * memory,INT length)__inline__ Status ::AddMemoryFont<gdiplusheaders.h>
PrivateFontCollection(const WCHAR * filename)__inline__ Status ::AddFontFile<gdiplusheaders.h>
PrivateGetIDsOfNames(REFIID riid,OLECHAR ** rgszNames,unsigned int cNames,LCID lcid,DISPID * rgDispid)virtual HRESULT WINAPI <iads.h>
PrivateInvoke(DISPID dispidMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS * pdispparams,VARIANT * pvarResult,EXCEPINFO * pexcepinfo,unsigned int * puArgErr)virtual HRESULT WINAPI <iads.h>
PrivilegeCheck(HANDLE ClientToken,PPRIVILEGE_SET RequiredPrivileges,LPBOOL pfResult) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
PrivilegedServiceAuditAlarm(LPCSTR SubsystemName,LPCSTR ServiceName,HANDLE ClientToken,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted) WINADVAPI WINBOOL WINAPI <winbase.h>
PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName,LPCSTR ServiceName,HANDLE ClientToken,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted) WINADVAPI WINBOOL WINAPI <winbase.h>
PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName,LPCWSTR ServiceName,HANDLE ClientToken,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
PROBE_ALIGNMENT(_s)<winnt.h>
PROBE_ALIGNMENT(v)<winnt.h>
PROBE_ALIGNMENT32(_s)<winnt.h>
Probe_GetDiskFreeSpaceEx(LPCTSTR ptszRoot,PULARGE_INTEGER pliQuota,PULARGE_INTEGER pliTotal,PULARGE_INTEGER pliFree) static WINBOOL WINAPI <newapis.h>
Probe_GetFileAttributesEx(LPCTSTR ptszFile,GET_FILEEX_INFO_LEVELS level,LPVOID pv) static WINBOOL WINAPI <newapis.h>
Probe_GetLongPathName(LPCTSTR ptszShort,LPTSTR ptszLong,DWORD ctchBuf) static DWORD WINAPI <newapis.h>
Probe_IsDebuggerPresent(VOID) static WINBOOL WINAPI <newapis.h>
ProbeForRead(IN CONST VOID * Address,IN SIZE_T Length,IN ULONG Alignment)<wdm.h>
ProbeForWrite(IN PVOID Address,IN SIZE_T Length,IN ULONG Alignment)<wdm.h>
PROC() typedef int<minwindef.h>
Process(IStream * pStream)virtual HRESULT WINAPI <restartmanager.h>
Process32First(HANDLE hSnapshot,LPPROCESSENTRY32 lppe) WINBOOL WINAPI <tlhelp32.h>
Process32FirstW(HANDLE hSnapshot,LPPROCESSENTRY32W lppe) WINBOOL WINAPI <tlhelp32.h>
Process32Next(HANDLE hSnapshot,LPPROCESSENTRY32 lppe) WINBOOL WINAPI <tlhelp32.h>
Process32NextW(HANDLE hSnapshot,LPPROCESSENTRY32W lppe) WINBOOL WINAPI <tlhelp32.h>
PROCESSENUMPROC(DWORD dwProcessId,DWORD dwAttributes,LPARAM lpUserDefined) typedef WINBOOL<vdmdbg.h>
ProcessGraphEvent(__LONG32 lEventCode,LONG_PTR lParam1,LONG_PTR lParam2) virtual HRESULT <mspstrm.h>
ProcessGraphEvent(ITStream * pITStream,__LONG32 lEventCode,LONG_PTR lParam1,LONG_PTR lParam2) virtual HRESULT <mspstrm.h>
ProcessGroupPolicyCompleted(REFGPEXTENSIONID extensionId,ASYNCCOMPLETIONHANDLE pAsyncHandle,DWORD dwStatus) USERENVAPI DWORD WINAPI <userenv.h>
ProcessGroupPolicyCompletedEx(REFGPEXTENSIONID extensionId,ASYNCCOMPLETIONHANDLE pAsyncHandle,DWORD dwStatus,HRESULT RsopStatus) USERENVAPI DWORD WINAPI <userenv.h>
ProcessHRC(HRC,DWORD) int WINAPI <penwin.h>
ProcessIdToSessionId(DWORD dwProcessId,DWORD * pSessionId) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
ProcessTrace(PTRACEHANDLE HandleArray,ULONG HandleCount,LPFILETIME StartTime,LPFILETIME EndTime) EXTERN_C ULONG WMIAPI <evntrace.h>
ProcessWriting(HWND,LPRC) REC WINAPI <penwin.h>
ProcThreadAttributeValue(Number, Thread, Input, Additive)<winbase.h>
ProduceDotStuffedContext(FIO_CONTEXT * pContext,LPSTR lpstrName,WINBOOL fWantItDotStuffed) FILEHC_EXPORT FIO_CONTEXT<filehc.h>
ProduceDotStuffedContextInContext(FIO_CONTEXT * pContextSource,FIO_CONTEXT * pContextDestination,WINBOOL fWantItDotStuffed,WINBOOL * pfModified) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
PROFILER_HEAP_OBJECT_NAME_ID_UNAVAILABLE(ULONG)const ULONG <activprof.h>
ProgIdCompensator(VARIANT Index,LPVARIANT pItem)virtual HRESULT WINAPI <comsvcs.h>
ProgIDFromCLSID(REFCLSID clsid,LPOLESTR * lplpszProgID)WINOLEAPI <combaseapi.h>
Progress(REFSYNCMGRITEMID pItemID,LPSYNCMGRPROGRESSITEM lpSyncProgressItem)virtual HRESULT WINAPI <mobsync.h>
PromptDataSource(IUnknown * pUnkOuter,HWND hWndParent,DBPROMPTOPTIONS dwPromptOptions,ULONG cSourceTypeFilter,DBSOURCETYPE * rgSourceTypeFilter,LPCOLESTR pwszszzProviderFilter,REFIID riid,IUnknown ** ppDataSource)virtual HRESULT WINAPI <msdasc.h>
PromptEdit(IDispatch ** ppADOConnection,VARIANT_BOOL * pbSuccess)virtual HRESULT WINAPI <msdasc.h>
PromptFileName(HWND hWndParent,DBPROMPTOPTIONS dwPromptOptions,LPCOLESTR pwszInitialDirectory,LPCOLESTR pwszInitialFile,LPOLESTR * ppwszSelectedFile)virtual HRESULT WINAPI <msdasc.h>
PromptNew(IDispatch ** ppADOConnection)virtual HRESULT WINAPI <msdasc.h>
PROP_ID(ulPropTag)<wabdefs.h>
prop_list() int <sql_1.h>
prop_list_2() int <sql_1.h>
PROP_TAG(ulPropType,ulPropID)<wabdefs.h>
PROP_TYPE(ulPropTag)<wabdefs.h>
Propagate(DWORD dwBufferSize,unsigned char * pszBuffer)virtual HRESULT WINAPI <admex.h>
Propagate2(DWORD dwBufferSize,unsigned char * pszBuffer,DWORD dwSignatureMismatch)virtual HRESULT WINAPI <admex.h>
PropagateResult(hrPrevious,scBase)<winerror.h>
PropCopyMore(LPSPropValue lpSPropValueDest,LPSPropValue lpSPropValueSrc,ALLOCATEMORE * lpfAllocMore,LPVOID lpvObject) STDAPI_<wabutil.h>
PropCount(ULONG * pCount)virtual HRESULT WINAPI <comsvcs.h>
PROPENUMPROCA(HWND,LPCSTR,HANDLE) typedef WINBOOL<winuser.h>
PROPENUMPROCEXA(HWND,LPSTR,HANDLE,ULONG_PTR) typedef WINBOOL<winuser.h>
PROPENUMPROCEXW(HWND,LPWSTR,HANDLE,ULONG_PTR) typedef WINBOOL<winuser.h>
PROPENUMPROCW(HWND,LPCWSTR,HANDLE) typedef WINBOOL<winuser.h>
PropertiesChanged(__LONG32 cProperties,MMC_SNAPIN_PROPERTY * pProperties)virtual HRESULT WINAPI <mmcobj.h>
property_name() int <sql_1.h>
PropertySheet(LPCPROPSHEETHEADERA) WINCOMMCTRLAPI INT_PTR WINAPI <prsht.h>
PropertySheetA(LPCPROPSHEETHEADERA) WINCOMMCTRLAPI INT_PTR WINAPI <prsht.h>
PropertySheetW(LPCPROPSHEETHEADERW) WINCOMMCTRLAPI INT_PTR WINAPI <prsht.h>
PROPSETHDR_OSVER_KIND(dwOSVer)<propidl.h>
PROPSETHDR_OSVER_MAJOR(dwOSVer)<propidl.h>
PROPSETHDR_OSVER_MINOR(dwOSVer)<propidl.h>
PropSheet_AddPage(hDlg,hpage)<prsht.h>
PropSheet_Apply(hDlg)<prsht.h>
PropSheet_CancelToClose(hDlg)<prsht.h>
PropSheet_Changed(hDlg,hwnd)<prsht.h>
PropSheet_GetCurrentPageHwnd(hDlg)<prsht.h>
PropSheet_GetResult(hDlg)<prsht.h>
PropSheet_GetTabControl(hDlg)<prsht.h>
PropSheet_HwndToIndex(hDlg,hwnd)<prsht.h>
PropSheet_IdToIndex(hDlg,id)<prsht.h>
PropSheet_IndexToHwnd(hDlg,i)<prsht.h>
PropSheet_IndexToId(hDlg,i)<prsht.h>
PropSheet_IndexToPage(hDlg,i)<prsht.h>
PropSheet_InsertPage(hDlg,index,hpage)<prsht.h>
PropSheet_IsDialogMessage(hDlg,pMsg)<prsht.h>
PropSheet_PageToIndex(hDlg,hpage)<prsht.h>
PropSheet_PressButton(hDlg,iButton)<prsht.h>
PropSheet_QuerySiblings(hDlg,wParam,lParam)<prsht.h>
PropSheet_RebootSystem(hDlg)<prsht.h>
PropSheet_RecalcPageSizes(hDlg)<prsht.h>
PropSheet_RemovePage(hDlg,index,hpage)<prsht.h>
PropSheet_RestartWindows(hDlg)<prsht.h>
PropSheet_SetCurSel(hDlg,hpage,index)<prsht.h>
PropSheet_SetCurSelByID(hDlg,id)<prsht.h>
PropSheet_SetFinishText(hDlg,lpszText)<prsht.h>
PropSheet_SetHeaderSubTitle(hDlg,index,lpszText)<prsht.h>
PropSheet_SetHeaderTitle(hDlg,index,lpszText)<prsht.h>
PropSheet_SetTitle(hDlg,wStyle,lpszText)<prsht.h>
PropSheet_SetWizButtons(hDlg,dwFlags)<prsht.h>
PropSheet_UnChanged(hDlg,hwnd)<prsht.h>
PropStgNameToFmtId(const LPOLESTR oszName,FMTID * pfmtid) WINOLEAPI <propidl.h>
PropVariantChangeType(PROPVARIANT * ppropvarDest,REFPROPVARIANT propvarSrc,PROPVAR_CHANGE_FLAGS flags,VARTYPE vt)HRESULT WINAPI <propvarutil.h>
PropVariantClear(PROPVARIANT * pvar) WINOLEAPI <propidl.h>
PropVariantCompareEx(REFPROPVARIANT propvar1,REFPROPVARIANT propvar2,PROPVAR_COMPARE_UNIT uint,PROPVAR_COMPARE_FLAGS flags)INT WINAPI <propvarutil.h>
PropVariantCopy(PROPVARIANT * pvarDest,const PROPVARIANT * pvarSrc) WINOLEAPI <propidl.h>
PropVariantInit(PROPVARIANT * pvar)inline void <propidl.h>
PropVariantInit(pvar)<propidl.h>
PropVariantToAdsType(VARIANT * pVariant,DWORD dwNumVariant,PADSVALUE * ppAdsValues,PDWORD pdwNumValues) HRESULT WINAPI <adshlp.h>
PropVariantToGUID(const PROPVARIANT * ppropvar,GUID * guid)HRESULT WINAPI <propvarutil.h>
PropVariantToInt16(REFPROPVARIANT propvarIn,SHORT * ret)HRESULT WINAPI <propvarutil.h>
PropVariantToInt32(REFPROPVARIANT propvarIn,LONG * ret)HRESULT WINAPI <propvarutil.h>
PropVariantToInt64(REFPROPVARIANT propvarIn,LONGLONG * ret)HRESULT WINAPI <propvarutil.h>
PropVariantToStringAlloc(REFPROPVARIANT propvarIn,WCHAR ** ret)HRESULT WINAPI <propvarutil.h>
PropVariantToUInt16(REFPROPVARIANT propvarIn,USHORT * ret)HRESULT WINAPI <propvarutil.h>
PropVariantToUInt32(REFPROPVARIANT propvarIn,ULONG * ret)HRESULT WINAPI <propvarutil.h>
PropVariantToUInt64(REFPROPVARIANT propvarIn,ULONGLONG * ret)HRESULT WINAPI <propvarutil.h>
PROTO_FROM_PROTO_ID(X)<routprot.h>
PROTOCOL_ID(Type,VendorId,ProtocolId)<routprot.h>
ProtocolReserved(PVOID)UCHAR <ntddndis.h>
PROTOCOLTABLE_ACTUAL_SIZE(p)<netmon.h>
ProvideIntegerData(const BSTR Name,__LONG32 * ConfigData)virtual HRESULT WINAPI <mergemod.h>
ProvideTextData(const BSTR Name,BSTR * ConfigData)virtual HRESULT WINAPI <mergemod.h>
ProvidorFindClosePrinterChangeNotification(HANDLE hPrinter)WINBOOL WINAPI <winsplp.h>
ProvidorFindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,HANDLE hNotify,PVOID pvReserved0,PVOID pvReserved1)WINBOOL WINAPI <winsplp.h>
PRPC_RUNDOWN(void * AssociationContext) typedef void<rpcdcep.h>
PRPC_STUB_FUNCTION(IRpcStubBuffer * This,IRpcChannelBuffer * _pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD * pdwStubPhase) typedef void<rpcproxy.h>
PRTL_HEAP_COMMIT_ROUTINE(PVOID Base,PVOID * CommitAddress,PSIZE_T CommitSize) typedef NTSTATUS<winternl.h>
PRTL_RUN_ONCE_INIT_FN(PRTL_RUN_ONCE,PVOID,PVOID *)typedef DWORD<winnt.h>
PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE(PVOID p) typedef VOID<ntsecpkg.h>
PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE(PUNICODE_STRING ClearPassword,PVOID OldCredentials,ULONG OldCredentialSize,ULONG UserAccountControl,PUNICODE_STRING UPN,PUNICODE_STRING UserName,PUNICODE_STRING NetbiosDomainName,PUNICODE_STRING DnsDomainName,PVOID * NewCredentials,ULONG * NewCredentialSize) typedef NTSTATUS<ntsecpkg.h>
PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE(PUNICODE_STRING CredentialName) typedef BOOLEAN<ntsecpkg.h>
PSAM_INIT_NOTIFICATION_ROUTINE() typedef BOOLEAN<ntsecapi.h>
PSAM_PASSWORD_FILTER_ROUTINE(PUNICODE_STRING AccountName,PUNICODE_STRING FullName,PUNICODE_STRING Password,BOOLEAN SetOperation) typedef BOOLEAN<ntsecapi.h>
PSAM_PASSWORD_NOTIFICATION_ROUTINE(PUNICODE_STRING UserName,ULONG RelativeId,PUNICODE_STRING NewPassword) typedef NTSTATUS<ntsecapi.h>
PsAssignImpersonationToken(IN PETHREAD Thread,IN HANDLE Token OPTIONAL)<ntifs.h>
PsChargePoolQuota(IN PEPROCESS Process,IN POOL_TYPE PoolType,IN ULONG_PTR Amount)<ntifs.h>
PsChargeProcessPoolQuota(IN PEPROCESS Process,IN POOL_TYPE PoolType,IN ULONG_PTR Amount)<ntifs.h>
PSCoerceToCanonicalValue(REFPROPERTYKEY key,PROPVARIANT * ppropvar)PSSTDAPI <propsys.h>
PSCreateAdapterFromPropertyStore(IPropertyStore * pps,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreateDelayedMultiplexPropertyStore(GETPROPERTYSTOREFLAGS flags,IDelayedPropertyStoreFactory * pdpsf,const DWORD * rgStoreIds,DWORD cStores,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreateMemoryPropertyStore(REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreateMultiplexPropertyStore(IUnknown ** prgpunkStores,DWORD cStores,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreatePropertyChangeArray(const PROPERTYKEY * rgpropkey,const PKA_FLAGS * rgflags,const PROPVARIANT * rgpropvar,UINT cChanges,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreatePropertyStoreFromObject(IUnknown * punk,DWORD grfMode,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreatePropertyStoreFromPropertySetStorage(IPropertySetStorage * ppss,DWORD grfMode,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSCreateSimplePropertyChange(PKA_FLAGS flags,REFPROPERTYKEY key,REFPROPVARIANT propvar,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PsCreateSystemThread(OUT PHANDLE ThreadHandle,IN ULONG DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN HANDLE ProcessHandle OPTIONAL,OUT PCLIENT_ID ClientId OPTIONAL,IN PKSTART_ROUTINE StartRoutine,IN PVOID StartContext OPTIONAL)<wdm.h>
PsDereferenceImpersonationToken(IN PACCESS_TOKEN ImpersonationToken)<ntifs.h>
PsDereferenceImpersonationToken(T)<ntifs.h>
PsDereferencePrimaryToken(IN PACCESS_TOKEN PrimaryToken)<ntifs.h>
PsDisableImpersonation(IN OUT PETHREAD Thread,IN OUT PSE_IMPERSONATION_STATE ImpersonationState)<ntifs.h>
PSECURE_MEMORY_CACHE_CALLBACK(PVOID Addr,SIZE_T Range)typedef BOOLEAN<winnt.h>
PSEnumeratePropertyDescriptions(PROPDESC_ENUMFILTER filterOn,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSET_GLOBAL_INFO(PVOID GlobalInfo,ULONG StructureVersion,ULONG StructureSize,ULONG StructureCount) typedef DWORD<routprot.h>
PSET_INTERFACE_INFO(ULONG InterfaceIndex,PVOID InterfaceInfo,ULONG StructureVersion,ULONG StructureSize,ULONG StructureCount) typedef DWORD<routprot.h>
PSET_IRQL(pr,rNewIrql)<kxia64.h>
PSET_POWER(DWORD PowerType) typedef DWORD<routprot.h>
PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE(RESOURCE_HANDLE ResourceHandle,unsigned char * propertyListBuffer,DWORD propertyListBufferSize) typedef DWORD<resapi.h>
PSET_RESOURCE_LOCKED_MODE_ROUTINE(RESOURCE_HANDLE ResourceHandle,WINBOOL LockedModeEnabled,DWORD LockedModeReason) typedef DWORD<resapi.h>
PSET_RESOURCE_STATUS_ROUTINE(RESOURCE_HANDLE ResourceHandle,PRESOURCE_STATUS ResourceStatus) typedef DWORD<resapi.h>
PSET_RESOURCE_STATUS_ROUTINE_EX(RESOURCE_HANDLE ResourceHandle,PRESOURCE_STATUS_EX ResourceStatus) typedef DWORD<resapi.h>
PSFormatForDisplay(REFPROPERTYKEY propkey,REFPROPVARIANT propvar,PROPDESC_FORMAT_FLAGS pdfFlags,LPWSTR pwszText,DWORD cchText)PSSTDAPI <propsys.h>
PSFormatForDisplayAlloc(REFPROPERTYKEY key,REFPROPVARIANT propvar,PROPDESC_FORMAT_FLAGS pdff,PWSTR * ppszDisplay)PSSTDAPI <propsys.h>
PSFormatPropertyValue(IPropertyStore * pps,IPropertyDescription * ppd,PROPDESC_FORMAT_FLAGS pdff,LPWSTR * ppszDisplay)PSSTDAPI <propsys.h>
PsGetCurrentProcessId(VOID)<ntddk.h>
PsGetCurrentThread(VOID)<wdm.h>
PsGetCurrentThreadId(VOID)<ntddk.h>
PSGetImageReferenceForValue(REFPROPERTYKEY propkey,REFPROPVARIANT propvar,PWSTR * ppszImageRes)PSSTDAPI <propsys.h>
PSGetItemPropertyHandler(IUnknown * punkItem,BOOL fReadWrite,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSGetItemPropertyHandlerWithCreateObject(IUnknown * punkItem,BOOL fReadWrite,IUnknown * punkCreateObject,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSGetNamedPropertyFromPropertyStorage(PCUSERIALIZEDPROPSTORAGE psps,DWORD cb,LPCWSTR pszName,PROPVARIANT * ppropvar)PSSTDAPI <propsys.h>
PSGetNameFromPropertyKey(REFPROPERTYKEY propkey,PWSTR * ppszCanonicalName)PSSTDAPI <propsys.h>
PsGetProcessCreateTimeQuadPart(IN PEPROCESS Process)<ntddk.h>
PsGetProcessExitTime(VOID)<ntifs.h>
PsGetProcessId(IN PEPROCESS Process)<ntddk.h>
PSGetPropertyDescription(REFPROPERTYKEY propkey,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSGetPropertyDescriptionByName(LPCWSTR pszCanonicalName,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSGetPropertyDescriptionListFromString(LPCWSTR pszPropList,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSGetPropertyFromPropertyStorage(PCUSERIALIZEDPROPSTORAGE psps,DWORD cb,REFPROPERTYKEY rpkey,PROPVARIANT * ppropvar)PSSTDAPI <propsys.h>
PSGetPropertyKeyFromName(PCWSTR pszName,PROPERTYKEY * ppropkey)PSSTDAPI <propsys.h>
PSGetPropertySystem(REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSGetPropertyValue(IPropertyStore * pps,IPropertyDescription * ppd,PROPVARIANT * ppropvar)PSSTDAPI <propsys.h>
PsGetThreadId(IN PETHREAD Thread)<ntddk.h>
PsGetThreadProcessId(IN PETHREAD Thread)<ntddk.h>
PsGetVersion(OUT PULONG MajorVersion OPTIONAL,OUT PULONG MinorVersion OPTIONAL,OUT PULONG BuildNumber OPTIONAL,OUT PUNICODE_STRING CSDVersion OPTIONAL)<ntddk.h>
PSIGNAL_FAILURE_ROUTINE(RESOURCE_HANDLE ResourceHandle,WINBOOL IsEmbeddedFailure,DWORD ApplicationSpecificErrorCode) typedef DWORD<resapi.h>
PsImpersonateClient(IN OUT PETHREAD Thread,IN PACCESS_TOKEN Token,IN BOOLEAN CopyOnOpen,IN BOOLEAN EffectiveOnly,IN SECURITY_IMPERSONATION_LEVEL ImpersonationLevel)<ntifs.h>
PsIsCurrentThreadPrefetching(VOID)<ntddk.h>
PsIsSystemThread(IN PETHREAD Thread)<ntifs.h>
PsIsThreadTerminating(IN PETHREAD Thread)<ntifs.h>
PsLookupProcessByProcessId(IN HANDLE ProcessId,OUT PEPROCESS * Process)<ntifs.h>
PsLookupProcessThreadByCid(IN PCLIENT_ID Cid,OUT PEPROCESS * Process OPTIONAL,OUT PETHREAD * Thread)<ntifs.h>
PSLookupPropertyHandlerCLSID(PCWSTR pszFilePath,CLSID * pclsid)PSSTDAPI <propsys.h>
PsLookupThreadByThreadId(IN HANDLE UniqueThreadId,OUT PETHREAD * Thread)<ntifs.h>
PSMX_GETEXTENDEDERRORSTRING(VOID)typedef LPTSTR<smx.h>
PSMX_INITIALIZEMENU(VOID)typedef VOID<smx.h>
PSMX_LOADMENU(HWND hWnd,PSMS_LOADMENU psmsload)typedef DWORD<smx.h>
PSMX_MENUACTION(HWND hwndParent,DWORD dwEventId)typedef VOID<smx.h>
PSMX_REFRESH(HWND hwndParent)typedef VOID<smx.h>
PSMX_UNLOADMENU(VOID)typedef VOID<smx.h>
PSMX_VALIDATE(PSMS_VALIDATE psmsvalidate)typedef WINBOOL<smx.h>
PSP_DETSIG_CMPPROC(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA NewDeviceData,PSP_DEVINFO_DATA ExistingDeviceData,PVOID CompareContext) typedef DWORD<setupapi.h>
PSP_FILE_CALLBACK_A(PVOID Context,UINT Notification,UINT_PTR Param1,UINT_PTR Param2) typedef UINT<setupapi.h>
PSP_FILE_CALLBACK_W(PVOID Context,UINT Notification,UINT_PTR Param1,UINT_PTR Param2) typedef UINT<setupapi.h>
PSPropertyBag_Delete(IPropertyBag * propBag,LPCWSTR propName)PSSTDAPI <propsys.h>
PSPropertyBag_ReadBOOL(IPropertyBag * propBag,LPCWSTR propName,BOOL * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadBSTR(IPropertyBag * propBag,LPCWSTR propName,BSTR * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadDWORD(IPropertyBag * propBag,LPCWSTR propName,DWORD * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadGUID(IPropertyBag * propBag,LPCWSTR propName,GUID * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadInt(IPropertyBag * propBag,LPCWSTR propName,INT * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadLONG(IPropertyBag * propBag,LPCWSTR propName,LONG * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadPOINTL(IPropertyBag * propBag,LPCWSTR propName,POINTL * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadPOINTS(IPropertyBag * propBag,LPCWSTR propName,POINTS * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadPropertyKey(IPropertyBag * propBag,LPCWSTR propName,PROPERTYKEY * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadRECTL(IPropertyBag * propBag,LPCWSTR propName,RECTL * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadSHORT(IPropertyBag * propBag,LPCWSTR propName,SHORT * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadStr(IPropertyBag * propBag,LPCWSTR propName,LPWSTR value,int characterCount)PSSTDAPI <propsys.h>
PSPropertyBag_ReadStrAlloc(IPropertyBag * propBag,LPCWSTR propName,PWSTR * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadStream(IPropertyBag * propBag,LPCWSTR propName,IStream ** value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadType(IPropertyBag * propBag,LPCWSTR propName,VARIANT * var,VARTYPE type)PSSTDAPI <propsys.h>
PSPropertyBag_ReadULONGLONG(IPropertyBag * propBag,LPCWSTR propName,ULONGLONG * value)PSSTDAPI <propsys.h>
PSPropertyBag_ReadUnknown(IPropertyBag * propBag,LPCWSTR propName,REFIID riid,void ** ppv)PSSTDAPI <propsys.h>
PSPropertyBag_WriteBOOL(IPropertyBag * propBag,LPCWSTR propName,BOOL value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteBSTR(IPropertyBag * propBag,LPCWSTR propName,BSTR value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteDWORD(IPropertyBag * propBag,LPCWSTR propName,DWORD value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteGUID(IPropertyBag * propBag,LPCWSTR propName,const GUID * value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteInt(IPropertyBag * propBag,LPCWSTR propName,INT value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteLONG(IPropertyBag * propBag,LPCWSTR propName,LONG value)PSSTDAPI <propsys.h>
PSPropertyBag_WritePOINTL(IPropertyBag * propBag,LPCWSTR propName,const POINTL * value)PSSTDAPI <propsys.h>
PSPropertyBag_WritePOINTS(IPropertyBag * propBag,LPCWSTR propName,const POINTS * value)PSSTDAPI <propsys.h>
PSPropertyBag_WritePropertyKey(IPropertyBag * propBag,LPCWSTR propName,REFPROPERTYKEY value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteRECTL(IPropertyBag * propBag,LPCWSTR propName,const RECTL * value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteSHORT(IPropertyBag * propBag,LPCWSTR propName,SHORT value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteStr(IPropertyBag * propBag,LPCWSTR propName,LPCWSTR value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteStream(IPropertyBag * propBag,LPCWSTR propName,IStream * value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteULONGLONG(IPropertyBag * propBag,LPCWSTR propName,ULONGLONG value)PSSTDAPI <propsys.h>
PSPropertyBag_WriteUnknown(IPropertyBag * propBag,LPCWSTR propName,IUnknown * punk)PSSTDAPI <propsys.h>
PSPropertyKeyFromString(LPCWSTR pszString,PROPERTYKEY * pkey)PSSTDAPI <propsys.h>
PsReferenceImpersonationToken(IN OUT PETHREAD Thread,OUT PBOOLEAN CopyOnOpen,OUT PBOOLEAN EffectiveOnly,OUT PSECURITY_IMPERSONATION_LEVEL ImpersonationLevel)<ntifs.h>
PsReferencePrimaryToken(IN OUT PEPROCESS Process)<ntifs.h>
PSRefreshPropertySchema(void)PSSTDAPI <propsys.h>
PSRegisterPropertySchema(PCWSTR pszPath)PSSTDAPI <propsys.h>
PsRemoveCreateThreadNotifyRoutine(IN PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine)<ntddk.h>
PsRemoveLoadImageNotifyRoutine(IN PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine)<ntddk.h>
PsRestoreImpersonation(IN PETHREAD Thread,IN PSE_IMPERSONATION_STATE ImpersonationState)<ntifs.h>
PsReturnPoolQuota(IN PEPROCESS Process,IN POOL_TYPE PoolType,IN ULONG_PTR Amount)<ntifs.h>
PsRevertToSelf(VOID)<ntifs.h>
PSSamplers(D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT)BYTE <d3d10effect.h>
PsSetCreateProcessNotifyRoutine(IN PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine,IN BOOLEAN Remove)<ntddk.h>
PsSetCreateProcessNotifyRoutineEx(IN PCREATE_PROCESS_NOTIFY_ROUTINE_EX NotifyRoutine,IN BOOLEAN Remove)<ntddk.h>
PsSetCreateThreadNotifyRoutine(IN PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine)<ntddk.h>
PsSetCurrentThreadPrefetching(IN BOOLEAN Prefetching)<ntddk.h>
PsSetLoadImageNotifyRoutine(IN PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine)<ntddk.h>
PSSetPropertyValue(IPropertyStore * pps,IPropertyDescription * ppd,REFPROPVARIANT propvar)PSSTDAPI <propsys.h>
PSShaderResources(D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT)BYTE <d3d10effect.h>
PSSTDAPI(type)<propsys.h>
PSStringFromPropertyKey(REFPROPERTYKEY pkey,LPWSTR psz,UINT cch)PSSTDAPI <propsys.h>
PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK(PVOID CallerContext,PMIB_UNICASTIPADDRESS_TABLE AddressTable) typedef VOID<netioapi.h>
PSTART_COMPLETE(VOID) typedef DWORD<routprot.h>
PSTART_PROTOCOL(HANDLE NotificationEvent,PSUPPORT_FUNCTIONS SupportFunctions,LPVOID GlobalInfo,ULONG StructureVersion,ULONG StructureSize,ULONG StructureCount) typedef DWORD<routprot.h>
PSTARTUP_EX_ROUTINE(LPCWSTR ResourceType,DWORD MinVersionSupported,DWORD MaxVersionSupported,PCLRES_CALLBACK_FUNCTION_TABLE MonitorCallbackFunctions,PCLRES_FUNCTION_TABLE * ResourceDllInterfaceFunctions) typedef DWORD<resapi.h>
PSTARTUP_ROUTINE(LPCWSTR ResourceType,DWORD MinVersionSupported,DWORD MaxVersionSupported,PSET_RESOURCE_STATUS_ROUTINE SetResourceStatus,PLOG_EVENT_ROUTINE LogEvent,PCLRES_FUNCTION_TABLE * FunctionTable) typedef DWORD<resapi.h>
PsTerminateSystemThread(IN NTSTATUS ExitStatus)<wdm.h>
PSTOP_PROTOCOL(VOID) typedef DWORD<routprot.h>
PStoreCreateInstance(IPStore ** ppProvider,PST_PROVIDERID * pProviderID,void * pReserved,DWORD dwFlags) HRESULT WINAPI <pstore.h>
PStoreEnumProviders(DWORD dwFlags,IEnumPStoreProviders ** ppenum) HRESULT WINAPI <pstore.h>
PSTPTR(rP,rPtr,rS)<kxia64.h>
PSUnregisterPropertySchema(PCWSTR pszPath)PSSTDAPI <propsys.h>
PsWrapApcWow64Thread(IN OUT PVOID * ApcContext,IN OUT PVOID * ApcRoutine)<wdm.h>
PSYM_ENUMERATESYMBOLS_CALLBACK(PSYMBOL_INFO pSymInfo,ULONG SymbolSize,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMERATESYMBOLS_CALLBACKW(PSYMBOL_INFOW pSymInfo,ULONG SymbolSize,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMLINES_CALLBACK(PSRCCODEINFO LineInfo,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMLINES_CALLBACKW(PSRCCODEINFOW LineInfo,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMMODULES_CALLBACK(PCSTR ModuleName,ULONG BaseOfDll,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMMODULES_CALLBACK64(PCSTR ModuleName,DWORD64 BaseOfDll,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMMODULES_CALLBACKW64(PCWSTR ModuleName,DWORD64 BaseOfDll,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMSOURCEFILES_CALLBACK(PSOURCEFILE pSourceFile,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMSOURCEFILES_CALLBACKW(PSOURCEFILEW pSourceFile,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMSYMBOLS_CALLBACK(PCSTR SymbolName,ULONG SymbolAddress,ULONG SymbolSize,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMSYMBOLS_CALLBACK64(PCSTR SymbolName,DWORD64 SymbolAddress,ULONG SymbolSize,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMSYMBOLS_CALLBACK64W(PCWSTR SymbolName,DWORD64 SymbolAddress,ULONG SymbolSize,PVOID UserContext) typedef WINBOOL<psdk>
PSYM_ENUMSYMBOLS_CALLBACKW(PCWSTR SymbolName,ULONG SymbolAddress,ULONG SymbolSize,PVOID UserContext) typedef WINBOOL<psdk>
PSYMBOL_FUNCENTRY_CALLBACK(HANDLE hProcess,DWORD AddrBase,PVOID UserContext) typedef PVOID<psdk>
PSYMBOL_FUNCENTRY_CALLBACK64(HANDLE hProcess,ULONG64 AddrBase,ULONG64 UserContext) typedef PVOID<psdk>
PSYMBOL_REGISTERED_CALLBACK(HANDLE hProcess,ULONG ActionCode,PVOID CallbackData,PVOID UserContext) typedef WINBOOL<psdk>
PSYMBOL_REGISTERED_CALLBACK64(HANDLE hProcess,ULONG ActionCode,ULONG64 CallbackData,ULONG64 UserContext) typedef WINBOOL<psdk>
PSYMBOLSERVERCALLBACKPROC(UINT_PTR action,ULONG64 data,ULONG64 context) typedef WINBOOL<psdk>
PSYMBOLSERVERCLOSEPROC(VOID) typedef WINBOOL<psdk>
PSYMBOLSERVERGETOPTIONSPROC() typedef UINT_PTR<psdk>
PSYMBOLSERVEROPENPROC(VOID) typedef WINBOOL<psdk>
PSYMBOLSERVERPINGPROC(LPCSTR) typedef WINBOOL<psdk>
PSYMBOLSERVERPROC(LPCSTR,LPCSTR,PVOID,DWORD,DWORD,LPSTR) typedef WINBOOL<psdk>
PSYMBOLSERVERSETOPTIONSPROC(UINT_PTR,ULONG64) typedef WINBOOL<psdk>
PTEREDO_PORT_CHANGE_CALLBACK(PVOID CallerContext,USHORT Port,MIB_NOTIFICATION_TYPE NotificationType) typedef VOID<netioapi.h>
PTERMINATE_ROUTINE(RESID Resource) typedef VOID<resapi.h>
PTHREAD_START_ROUTINE(LPVOID lpThreadParameter) typedef DWORD<minwinbase.h>
PTIMERAPCROUTINE(LPVOID lpArgToCompletionRoutine,DWORD dwTimerLowValue,DWORD dwTimerHighValue) typedef VOID<synchapi.h>
PtInRect(CONST RECT * lprc,POINT pt) WINUSERAPI WINBOOL WINAPI <winuser.h>
PtInRegion(HRGN hrgn,int x,int y) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PTOP_LEVEL_EXCEPTION_FILTER(struct _EXCEPTION_POINTERS * ExceptionInfo)typedef LONG<errhandlingapi.h>
PTP_CLEANUP_GROUP_CANCEL_CALLBACK(PVOID ObjectContext,PVOID CleanupContext) typedef VOID<winnt.h>
PTP_SIMPLE_CALLBACK(PTP_CALLBACK_INSTANCE Instance,PVOID Context) typedef VOID<winnt.h>
PTP_TIMER_CALLBACK(PTP_CALLBACK_INSTANCE Instance,PVOID Context,PTP_TIMER Timer) typedef VOID<winnt.h>
PTP_WAIT_CALLBACK(PTP_CALLBACK_INSTANCE Instance,PVOID Context,PTP_WAIT Wait,TP_WAIT_RESULT WaitResult) typedef VOID<winnt.h>
PTP_WIN32_IO_CALLBACK(PTP_CALLBACK_INSTANCE Instance,PVOID Context,PVOID Overlapped,ULONG IoResult,ULONG_PTR NumberOfBytesTransferred,PTP_IO Io) typedef VOID<threadpoolapiset.h>
PTP_WORK_CALLBACK(PTP_CALLBACK_INSTANCE Instance,PVOID Context,PTP_WORK Work) typedef VOID<winnt.h>
Ptr(void *) typedef void __RPC_API RPC_CLIENT_FREE<winnt.h>
Ptr32ToPtr(const void * POINTER_32 p) static __inline void<basetsd.h>
Ptr32ToPtr(p)<basetsd.h>
Ptr64ToPtr(const void * POINTER_64 p) static __inline void<basetsd.h>
Ptr64ToPtr(p)<basetsd.h>
PTRANSLATE_ADDRESS_ROUTINE(HANDLE hProcess,HANDLE hThread,LPADDRESS lpaddr) typedef DWORD<psdk>
PTRANSLATE_ADDRESS_ROUTINE64(HANDLE hProcess,HANDLE hThread,LPADDRESS64 lpaddr) typedef DWORD64<psdk>
PtrToInt(const void * p) static __inline int <basetsd.h>
PtrToInt(p)<basetsd.h>
PtrToLong(const void * p) static __inline __LONG32 <basetsd.h>
PtrToLong(p)<basetsd.h>
PtrToPtr32(const void * p) static __inline void<basetsd.h>
PtrToPtr32(p)<basetsd.h>
PtrToPtr64(const void * p) static __inline void<basetsd.h>
PtrToPtr64(p)<basetsd.h>
PtrToShort(const void * p) static __inline short <basetsd.h>
PtrToShort(p)<basetsd.h>
PtrToUint(const void * p) static __inline unsigned int <basetsd.h>
PtrToUint(p)<basetsd.h>
PtrToUlong(const void * p) static __inline unsigned __LONG32 <basetsd.h>
PtrToUlong(p)<basetsd.h>
PtrToUshort(const void * p) static __inline unsigned short <basetsd.h>
PtrToUshort(p)<basetsd.h>
PtVisible(HDC hdc,int x,int y) WINGDIAPI WINBOOL WINAPI <wingdi.h>
PublicFunction(Name)<kxia64.h>
Publish(ICalendarMessage ** Request)virtual HRESULT WINAPI <netioapi.h>
PublishCRL(const BSTR strConfig,DATE Date)virtual HRESULT WINAPI <certadm.h>
PublishCRLs(const BSTR strConfig,DATE Date,LONG CRLFlags)virtual HRESULT WINAPI <certadm.h>
Pull(char * i_pszTxUrl,ITransaction ** o_ppITransaction)virtual HRESULT WINAPI <txcoord.h>
PullAsync(char * i_pszTxUrl,ITipPullSink * i_pTipPullSink,ITransaction ** o_ppITransaction)virtual HRESULT WINAPI <txcoord.h>
PullComplete(HRESULT i_hrPull)virtual HRESULT WINAPI <txcoord.h>
PulseEvent(HANDLE hEvent) WINBASEAPI WINBOOL WINAPI <winbase.h>
pULWInfo(HWND hWnd,const UPDATELAYEREDWINDOWINFO *) WINUSERAPI WINBOOL WINAPI UpdateLayeredWindowIndirect<winuser.h>
PUMX_CREATEA(HWND hwndParent,PUMS_GETSELA pumsSelection)typedef VOID<umx.h>
PUMX_CREATEW(HWND hwndParent,PUMS_GETSELW pumsSelection)typedef VOID<umx.h>
PUMX_DELETEA(HWND hwndParent,PUMS_GETSELA pumsSelection)typedef VOID<umx.h>
PUMX_DELETEW(HWND hwndParent,PUMS_GETSELW pumsSelection)typedef VOID<umx.h>
PUMX_GETEXTENDEDERRORSTRINGA(VOID)typedef LPSTR<umx.h>
PUMX_GETEXTENDEDERRORSTRINGW(VOID)typedef LPWSTR<umx.h>
PUMX_INITIALIZEMENU(VOID)typedef VOID<umx.h>
PUMX_LOADMENUA(HWND hWnd,PUMS_LOADMENUA pumsload)typedef DWORD<umx.h>
PUMX_LOADMENUW(HWND hWnd,PUMS_LOADMENUW pumsload)typedef DWORD<umx.h>
PUMX_MENUACTION(HWND hwndParent,DWORD dwEventId)typedef VOID<umx.h>
PUMX_REFRESH(HWND hwndParent)typedef VOID<umx.h>
PUMX_RENAMEA(HWND hwndParent,PUMS_GETSELA pumsSelection,LPSTR pchNewName)typedef VOID<umx.h>
PUMX_RENAMEW(HWND hwndParent,PUMS_GETSELW pumsSelection,LPWSTR pchNewName)typedef VOID<umx.h>
PUMX_UNLOADMENU(VOID)typedef VOID<umx.h>
PUNICAST_IPADDRESS_CHANGE_CALLBACK(PVOID CallerContext,PMIB_UNICASTIPADDRESS_ROW Row,MIB_NOTIFICATION_TYPE NotificationType) typedef VOID<netioapi.h>
Purge(DWORDLONG dwlSpaceToFree,IEmptyVolumeCacheCallBack * picb)virtual HRESULT WINAPI <mqoai.h>
Purge(void)virtual HRESULT WINAPI <mqoai.h>
PurgeComm(HANDLE hFile,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
PurgeObjectHeap(HOBJECTHEAP hObjectHeap) extern VOID WINAPI <nmsupp.h>
PurgeProgress(DWORDLONG dwlSpaceFreed,DWORDLONG dwlSpaceToFree,DWORD dwFlags,LPCWSTR pcwszStatus)virtual HRESULT WINAPI <emptyvc.h>
PurgePropertyList(void)virtual HRESULT WINAPI <iads.h>
pUserData(DWORD openHandle,LPVOID pData,ULONG dataLength,LPVOID) typedef UINT _stdcall VIRTUALCHANNELWRITE<raseapif.h>
Push(char * i_pszRemoteTmUrl,char ** o_ppszRemoteTxUrl)virtual HRESULT WINAPI <wsdtypes.h>
PushEntryList(IN OUT PSINGLE_LIST_ENTRY ListHead,IN OUT PSINGLE_LIST_ENTRY Entry)<wdm.h>
PushThroughData(IPin * pOutputPin,IPinConnection * pConnection,HANDLE hEventAbort)virtual HRESULT WINAPI <strmif.h>
Put(BSTR bstrName,VARIANT vProp)virtual HRESULT WINAPI <iads.h>
PutAltWord(const WCHAR * pwcInBuf,ULONG cwc)virtual HRESULT WINAPI <indexsrv.h>
PutAltWord(ULONG cwc,const WCHAR * pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos)virtual HRESULT WINAPI <indexsrv.h>
PutBaseBrowserData(void)virtual LPBASEBROWSERDATA WINAPI <shdeprecated.h>
PutBreak(WORDREP_BREAK_TYPE breakType)virtual HRESULT WINAPI <indexsrv.h>
PutClass(IWbemClassObject * pObject,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI <wmiatlprov.h>
PutClassAsync(IWbemClassObject * pObject,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)HRESULT WINAPI <wmiatlprov.h>
PutData(BYTE byP1,BYTE byP2,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
PutDefaultProperty(BSTR bstrPropertyName,VARIANT * propertyValue)virtual HRESULT WINAPI <eventsys.h>
PutEndTx(IUnknown * pObj)virtual void WINAPI <comsvcs.h>
PutEx(__LONG32 lnControlCode,BSTR bstrName,VARIANT vProp)virtual HRESULT WINAPI <iads.h>
PutInstance(IWbemClassObject * pInst,__LONG32 lFlags,IWbemContext * pCtx,IWbemCallResult ** ppCallResult)virtual HRESULT WINAPI <wmiatlprov.h>
PutInstanceAsync(IWbemClassObject * pInst,__LONG32 lFlags,IWbemContext * pCtx,IWbemObjectSink * pResponseHandler)virtual HRESULT WINAPI <wmiatlprov.h>
PutObjectProperty(__LONG32 lnADsType,VARIANT vProp)virtual HRESULT WINAPI <iads.h>
PutPhrase(const WCHAR * pwcPhrase,ULONG cwcPhrase)virtual HRESULT WINAPI <indexsrv.h>
PutProperty(LONG Id,VARIANT * pValue)virtual HRESULT WINAPI <sdoias.h>
PutPropertyItem(VARIANT varData)virtual HRESULT WINAPI <iads.h>
PutPublisherProperty(BSTR bstrPropertyName,VARIANT * propertyValue)virtual HRESULT WINAPI <eventsys.h>
PutResource(IObjPool * pPool,IUnknown * pUnk)virtual HRESULT WINAPI <comsvcs.h>
PutSchemaPropertyAttributes(IDispatch * pObject)virtual HRESULT WINAPI <iiis.h>
PutSmallPhrase(const WCHAR * pwcNoun,ULONG cwcNoun,const WCHAR * pwcModifier,ULONG cwcModifier,ULONG ulAttachmentType)virtual HRESULT WINAPI <indexsrv.h>
PutSubscriberProperty(BSTR bstrPropertyName,VARIANT * propertyValue)virtual HRESULT WINAPI <eventsys.h>
putwc(_c,_stm)<wchar.h>
putwchar(_c)<wchar.h>
PutWord(const WCHAR * pwcInBuf,ULONG cwc)virtual HRESULT WINAPI <indexsrv.h>
PutWord(ULONG cwc,const WCHAR * pwcInBuf,ULONG cwcSrcLen,ULONG cwcSrcPos)virtual HRESULT WINAPI <indexsrv.h>
pvArgOut(HWND hwndParent,IMoniker * pmk,DWORD dwDialogFlags,VARIANT * pvarArgIn,WCHAR * pchOptions,VARIANT *)typedef HRESULT STDAPICALLTYPE SHOWHTMLDIALOGEXFN<mshtmhst.h>
pvArgOut(HWND hwndParent,IMoniker * pmk,VARIANT * pvarArgIn,WCHAR * pchOptions,VARIANT *)typedef HRESULT STDAPICALLTYPE SHOWHTMLDIALOGFN<mshtmhst.h>
PVECTORED_EXCEPTION_HANDLER(struct _EXCEPTION_POINTERS * ExceptionInfo)typedef LONG<winnt.h>
PvGetInstanceGlobals()<mapiwin.h>
PvGetVerifyInstanceGlobals(	_pid)<mapiwin.h>
PVOID(WINAPI * GetStackLocation) <wtypesbase.h>
PvSlowGetInstanceGlobals(	_pid)<mapiwin.h>
PWAITCHAINCALLBACK(HWCT WctHandle,DWORD_PTR Context,DWORD CallbackStatus,LPDWORD NodeCount,PWAITCHAIN_NODE_INFO NodeInfoArray,LPBOOL IsCycle) typedef VOID<wct.h>
PWINSTATIONQUERYINFORMATIONW(HANDLE,ULONG,WINSTATIONINFOCLASS,PVOID,ULONG,PULONG) typedef BOOLEAN<winternl.h>
PWLX_ASSIGN_SHELL_PROTECTION(HANDLE hWlx,HANDLE hToken,HANDLE hProcess,HANDLE hThread)typedef int<winwlx.h>
PWLX_CHANGE_PASSWORD_NOTIFY(HANDLE hWlx,PWLX_MPR_NOTIFY_INFO pMprInfo,DWORD dwChangeInfo)typedef int<winwlx.h>
PWLX_CHANGE_PASSWORD_NOTIFY_EX(HANDLE hWlx,PWLX_MPR_NOTIFY_INFO pMprInfo,DWORD dwChangeInfo,PWSTR ProviderName,PVOID Reserved)typedef int<winwlx.h>
PWLX_CLOSE_USER_DESKTOP(HANDLE hWlx,PWLX_DESKTOP pDesktop,HANDLE hToken)typedef WINBOOL<winwlx.h>
PWLX_CREATE_USER_DESKTOP(HANDLE hWlx,HANDLE hToken,DWORD Flags,PWSTR pszDesktopName,PWLX_DESKTOP * ppDesktop)typedef WINBOOL<winwlx.h>
PWLX_DIALOG_BOX(HANDLE hWlx,HANDLE hInst,LPWSTR lpszTemplate,HWND hwndOwner,DLGPROC dlgprc)typedef int<winwlx.h>
PWLX_DIALOG_BOX_INDIRECT(HANDLE hWlx,HANDLE hInst,LPCDLGTEMPLATE hDialogTemplate,HWND hwndOwner,DLGPROC dlgprc)typedef int<winwlx.h>
PWLX_DIALOG_BOX_INDIRECT_PARAM(HANDLE hWlx,HANDLE hInst,LPCDLGTEMPLATE hDialogTemplate,HWND hwndOwner,DLGPROC dlgprc,LPARAM dwInitParam)typedef int<winwlx.h>
PWLX_DIALOG_BOX_PARAM(HANDLE hWlx,HANDLE hInst,LPWSTR lpszTemplate,HWND hwndOwner,DLGPROC dlgprc,LPARAM dwInitParam)typedef int<winwlx.h>
PWLX_DISCONNECT()typedef WINBOOL<winwlx.h>
PWLX_GET_OPTION(HANDLE hWlx,DWORD Option,ULONG_PTR * Value)typedef WINBOOL<winwlx.h>
PWLX_GET_SOURCE_DESKTOP(HANDLE hWlx,PWLX_DESKTOP * ppDesktop)typedef WINBOOL<winwlx.h>
PWLX_MESSAGE_BOX(HANDLE hWlx,HWND hwndOwner,LPWSTR lpszText,LPWSTR lpszTitle,UINT fuStyle)typedef int<winwlx.h>
PWLX_QUERY_CLIENT_CREDENTIALS(PWLX_CLIENT_CREDENTIALS_INFO_V1_0 pCred)typedef WINBOOL<winwlx.h>
PWLX_QUERY_CONSOLESWITCH_CREDENTIALS(PWLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 pCred)typedef DWORD<winwlx.h>
PWLX_QUERY_IC_CREDENTIALS(PWLX_CLIENT_CREDENTIALS_INFO_V1_0 pCred)typedef WINBOOL<winwlx.h>
PWLX_QUERY_TERMINAL_SERVICES_DATA(HANDLE hWlx,PWLX_TERMINAL_SERVICES_DATA pTSData,WCHAR * UserName,WCHAR * Domain)typedef DWORD<winwlx.h>
PWLX_QUERY_TS_LOGON_CREDENTIALS(PWLX_CLIENT_CREDENTIALS_INFO_V2_0 pCred)typedef WINBOOL<winwlx.h>
PWLX_SAS_NOTIFY(HANDLE hWlx,DWORD dwSasType)typedef VOID<winwlx.h>
PWLX_SET_CONTEXT_POINTER(HANDLE hWlx,PVOID pWlxContext)typedef VOID<winwlx.h>
PWLX_SET_OPTION(HANDLE hWlx,DWORD Option,ULONG_PTR Value,ULONG_PTR * OldValue)typedef WINBOOL<winwlx.h>
PWLX_SET_RETURN_DESKTOP(HANDLE hWlx,PWLX_DESKTOP pDesktop)typedef WINBOOL<winwlx.h>
PWLX_SET_TIMEOUT(HANDLE hWlx,DWORD Timeout)typedef WINBOOL<winwlx.h>
PWLX_SWITCH_DESKTOP_TO_USER(HANDLE hWlx)typedef int<winwlx.h>
PWLX_SWITCH_DESKTOP_TO_WINLOGON(HANDLE hWlx)typedef int<winwlx.h>
PWLX_USE_CTRL_ALT_DEL(HANDLE hWlx)typedef VOID<winwlx.h>
PWLX_WIN31_MIGRATE(HANDLE hWlx)typedef VOID<winwlx.h>
PWORKER_START_ROUTINE(PCLUS_WORKER pWorker,LPVOID lpThreadParameter) typedef DWORD<resapi.h>
PWRSCHEMESENUMPROC(UINT,DWORD,LPTSTR,DWORD,LPTSTR,PPOWER_POLICY,LPARAM) typedef BOOLEAN<powrprof.h>
PWSD_SOAP_MESSAGE_HANDLER(IUnknown * thisUnknown,WSD_EVENT * event)typedef HRESULT<wsdtypes.h>
PxeDhcpAppendOption(PVOID pReplyPacket,ULONG uMaxReplyPacketLen,PULONG puReplyPacketLen,BYTE bOption,BYTE bOptionLen,PVOID pValue)DWORD PXEAPI <wdspxe.h>
PxeDhcpGetOptionValue(PVOID pPacket,ULONG uPacketLen,ULONG uInstance,BYTE bOption,PBYTE pbOptionLen,PVOID * ppOptionValue)DWORD PXEAPI <wdspxe.h>
PxeDhcpGetVendorOptionValue(PVOID pPacket,ULONG uPacketLen,BYTE bOption,ULONG uInstance,PBYTE pbOptionLen,PVOID * ppOptionValue)DWORD PXEAPI <wdspxe.h>
PxeDhcpInitialize(PVOID pRecvPacket,ULONG uRecvPacketLen,PVOID pReplyPacket,ULONG uMaxReplyPacketLen,PULONG puReplyPacketLen)DWORD PXEAPI <wdspxe.h>
PxeDhcpIsValid(PVOID pPacket,ULONG uPacketLen,WINBOOL bRequestPacket,PBOOL pbPxeOptionPresent)DWORD PXEAPI <wdspxe.h>
PxeGetServerInfo(PXE_GSI_TYPE uInfoType,PVOID pBuffer,ULONG uBufferLen)DWORD PXEAPI <wdspxe.h>
PxePacketAllocate(HANDLE hProvider,HANDLE hClientRequest,ULONG uSize)PVOID PXEAPI <wdspxe.h>
PxePacketFree(HANDLE hProvider,HANDLE hClientRequest,PVOID pPacket)DWORD PXEAPI <wdspxe.h>
PxeProviderEnumClose(HANDLE hEnum)DWORD PXEAPI <wdspxe.h>
PxeProviderEnumFirst(HANDLE * phEnum)DWORD PXEAPI <wdspxe.h>
PxeProviderEnumNext(HANDLE hEnum,PPXE_PROVIDER * ppProvider)DWORD PXEAPI <wdspxe.h>
PxeProviderFreeInfo(PPXE_PROVIDER pProvider)DWORD PXEAPI <wdspxe.h>
PxeProviderInitialize(HANDLE hProvider,HKEY hProviderKey)DWORD PXEAPI <wdspxe.h>
PxeProviderQueryIndex(LPCWSTR pszProviderName,PULONG puIndex)DWORD PXEAPI <wdspxe.h>
PxeProviderRecvRequest(HANDLE hClientRequest,PVOID pPacket,ULONG uPacketLen,PXE_ADDRESS * pLocalAddress,PXE_ADDRESS * pRemoteAddress,PXE_BOOT_ACTION pAction,PVOID pContext)DWORD PXEAPI <wdspxe.h>
PxeProviderRegister(LPCWSTR pszProviderName,LPCWSTR pszModulePath,PXE_REG_INDEX Index,WINBOOL bIsCritical,PHKEY phProviderKey)DWORD PXEAPI <wdspxe.h>
PxeProviderServiceControl(PVOID pContext,DWORD dwControl)DWORD PXEAPI <wdspxe.h>
PxeProviderSetAttribute(HANDLE hProvider,PXE_PROVIDER_ATTRIBUTE Attribute,PVOID pParameterBuffer,ULONG uParamLen)DWORD PXEAPI <wdspxe.h>
PxeProviderShutdown(PVOID pContext)DWORD PXEAPI <wdspxe.h>
PxeProviderUnRegister(LPCWSTR pszProviderName)DWORD PXEAPI <wdspxe.h>
PxeRegisterCallback(HANDLE hProvider,PXE_CALLBACK_TYPE CallbackType,PVOID pCallbackFunction,PVOID pContext)DWORD PXEAPI <wdspxe.h>
PxeSendReply(HANDLE hClientRequest,PVOID pPacket,ULONG uPacketLen,PXE_ADDRESS * pAddress)DWORD PXEAPI <wdspxe.h>
PxeTrace(HANDLE hProvider,PXE_SEVERITY Severity,LPCWSTR pszFormat,...)DWORD WINAPIV <wdspxe.h>
QICAST(typename)<stdunk.h>
QICASTUNKNOWN(typename)<stdunk.h>
QOSAddSocketToFlow(HANDLE QOSHandle,SOCKET Socket,PSOCKADDR DestAddr,QOS_TRAFFIC_TYPE TrafficType,DWORD Flags,PQOS_FLOWID FlowId)WINBOOL WINAPI <qos2.h>
QOSCancel(HANDLE QOSHandle,LPOVERLAPPED Overlapped)WINBOOL WINAPI <qos2.h>
QOSCloseHandle(HANDLE QOSHandle)WINBOOL WINAPI <qos2.h>
QOSCreateHandle(PQOS_VERSION Version,PHANDLE QOSHandle)WINBOOL WINAPI <qos2.h>
QOSEnumerateFlows(HANDLE QOSHandle,PULONG Size,PVOID Buffer)WINBOOL WINAPI <qos2.h>
QOSNotifyFlow(HANDLE QOSHandle,QOS_FLOWID FlowId,QOS_NOTIFY_FLOW Operation,PULONG Size,PVOID Buffer,DWORD Flags,LPOVERLAPPED Overlapped)WINBOOL WINAPI <qos2.h>
QOSQueryFlow(HANDLE QOSHandle,QOS_FLOWID FlowId,QOS_QUERY_FLOW Operation,PULONG Size,PVOID Buffer,DWORD Flags,LPOVERLAPPED Overlapped)WINBOOL WINAPI <qos2.h>
QOSRemoveSocketFromFlow(HANDLE QOSHandle,SOCKET Socket,QOS_FLOWID FlowId,DWORD Flags)WINBOOL WINAPI <qos2.h>
QOSSetFlow(HANDLE QOSHandle,QOS_FLOWID FlowId,QOS_SET_FLOW Operation,ULONG Size,PVOID Buffer,DWORD Flags,LPOVERLAPPED Overlapped)WINBOOL WINAPI <qos2.h>
QOSStartTrackingClient(HANDLE QOSHandle,PSOCKADDR DestAddr,DWORD Flags)WINBOOL WINAPI <qos2.h>
QOSStopTrackingClient(HANDLE QOSHandle,PSOCKADDR DestAddr,DWORD Flags)WINBOOL WINAPI <qos2.h>
QQUOTE(y)<ksdebug.h>
QuadraticBezierSegment(const D2D1_POINT_2F & point1,const D2D1_POINT_2F & point2)D2D1FORCEINLINE D2D1_QUADRATIC_BEZIER_SEGMENT <d2d1helper.h>
Qualifiers(IADsCollection ** ppQualifiers)virtual HRESULT WINAPI <iads.h>
Query(BSTR progID,BSTR queryCriteria,int * errorIndex,IUnknown ** ppInterface)virtual HRESULT WINAPI <netprov.h>
Query(LPCWSTR pszwDomain,LPCWSTR pszwLanguage,LPCWSTR pszwXPathQuery,IXMLDOMNodeList ** Nodes)virtual HRESULT WINAPI <netprov.h>
QUERY_CONTEXT_ATTRIBUTES_FN_A(PCtxtHandle,unsigned __LONG32,void *) typedef SECURITY_STATUS<sspi.h>
QUERY_CONTEXT_ATTRIBUTES_FN_W(PCtxtHandle,unsigned __LONG32,void *) typedef SECURITY_STATUS<sspi.h>
QUERY_CREDENTIALS_ATTRIBUTES_FN_A(PCredHandle,unsigned __LONG32,void *) typedef SECURITY_STATUS<sspi.h>
QUERY_CREDENTIALS_ATTRIBUTES_FN_W(PCredHandle,unsigned __LONG32,void *) typedef SECURITY_STATUS<sspi.h>
QUERY_FILL_STATUS(x)<ntquery.h>
QUERY_GLOBAL_STATISTICS_HANDLER(IN NDIS_HANDLE MacAdapterContext,IN PNDIS_REQUEST NdisRequest)typedef NDIS_STATUS<ndis.h>
QUERY_RELIABILITY_STATUS(x)<ntquery.h>
QUERY_SECURITY_CONTEXT_TOKEN_FN(PCtxtHandle,HANDLE *) typedef SECURITY_STATUS<sspi.h>
QUERY_SECURITY_PACKAGE_INFO_FN_A(SEC_CHAR *,PSecPkgInfoA *) typedef SECURITY_STATUS<sspi.h>
QUERY_SECURITY_PACKAGE_INFO_FN_W(PSECURITY_STRING,PSecPkgInfoW *) typedef SECURITY_STATUS<sspi.h>
QueryActCtxSettingsW(DWORD dwFlags,HANDLE hActCtx,PCWSTR settingsNameSpace,PCWSTR settingName,PWSTR pvBuffer,SIZE_T dwBuffer,SIZE_T * pdwWrittenOrRequired) WINBASEAPI WINBOOL WINAPI <winbase.h>
QueryActCtxW(DWORD dwFlags,HANDLE hActCtx,PVOID pvSubInstance,ULONG ulInfoClass,PVOID pvBuffer,SIZE_T cbBuffer,SIZE_T * pcbWrittenOrRequired) WINBASEAPI WINBOOL WINAPI <winbase.h>
QueryAllTraces(PEVENT_TRACE_PROPERTIES * PropertyArray,ULONG PropertyArrayCount,PULONG LoggerCount) EXTERN_C ULONG WMIAPI <evntrace.h>
QueryAllTracesA(PEVENT_TRACE_PROPERTIES * PropertyArray,ULONG PropertyArrayCount,PULONG LoggerCount) EXTERN_C ULONG WMIAPI <evntrace.h>
QueryAllTracesW(PEVENT_TRACE_PROPERTIES * PropertyArray,ULONG PropertyArrayCount,PULONG LoggerCount) EXTERN_C ULONG WMIAPI <evntrace.h>
QueryBreaks(DWORD * pdwBreaks)virtual HRESULT WINAPI <mshtmlc.h>
QueryChangesVirtualDisk(HANDLE VirtualDiskHandle,PCWSTR ChangeTrackingId,ULONG64 ByteOffset,ULONG64 ByteLength,QUERY_CHANGES_VIRTUAL_DISK_FLAG Flags,PQUERY_CHANGES_VIRTUAL_DISK_RANGE Ranges,PULONG RangeCount,PULONG64 ProcessedLength)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
QUERYCLIENTCERT(PLDAP Connection,PSecPkgContext_IssuerListInfoEx trusted_CAs,PCCERT_CONTEXT * ppCertificate) typedef BOOLEAN<winldap.h>
QueryCompressorInformation(COMPRESSOR_HANDLE CompressorHandle,COMPRESS_INFORMATION_CLASS CompressInformationClass,PVOID CompressInformation,SIZE_T CompressInformationSize) WINBOOL WINAPI <compressapi.h>
QueryConsoleVerb(LPCONSOLEVERB * ppConsoleVerb)virtual HRESULT WINAPI <mmc.h>
QueryContextAttributes(PCtxtHandle phContext,unsigned __LONG32 ulAttribute,void * pBuffer) SECURITY_STATUS WINAPI <sspi.h>
QueryContextAttributesA(PCtxtHandle phContext,unsigned __LONG32 ulAttribute,void * pBuffer) SECURITY_STATUS WINAPI <sspi.h>
QueryContextAttributesW(PCtxtHandle phContext,unsigned __LONG32 ulAttribute,void * pBuffer) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
QueryCredentialsAttributes(PCredHandle phCredential,unsigned __LONG32 ulAttribute,void * pBuffer) SECURITY_STATUS WINAPI <sspi.h>
QueryCredentialsAttributesA(PCredHandle phCredential,unsigned __LONG32 ulAttribute,void * pBuffer) SECURITY_STATUS WINAPI <sspi.h>
QueryCredentialsAttributesW(PCredHandle phCredential,unsigned __LONG32 ulAttribute,void * pBuffer) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
QueryDataObject(MMC_COOKIE cookie,DATA_OBJECT_TYPES type,LPDATAOBJECT * ppDataObject)virtual HRESULT WINAPI <mmc.h>
QueryDecimationUsage(DECIMATION_USAGE * lpUsage)virtual HRESULT WINAPI <strmif.h>
QueryDecompressorInformation(DECOMPRESSOR_HANDLE DecompressorHandle,COMPRESS_INFORMATION_CLASS CompressInformationClass,PVOID CompressInformation,SIZE_T CompressInformationSize) WINBOOL WINAPI <compressapi.h>
QueryDepthSList(Head)<interlockedapi.h>
QueryDepthSList(PSLIST_HEADER ListHead) WINBASEAPI USHORT WINAPI <interlockedapi.h>
QueryDispatch(MMC_COOKIE cookie,DATA_OBJECT_TYPES type,LPDISPATCH * ppDispatch)virtual HRESULT WINAPI <mmc.h>
QueryDispatchInterface(BSTR pIID,IDispatch * pInterfaceToMap,IDispatch ** ppReturnedInterface)virtual HRESULT WINAPI <tapi3if.h>
QueryDisplayConfig(UINT32 flags,UINT32 * numPathArrayElements,DISPLAYCONFIG_PATH_INFO * pathArray,UINT32 * numModeInfoArrayElements,DISPLAYCONFIG_MODE_INFO * modeInfoArray,DISPLAYCONFIG_TOPOLOGY_ID * currentTopologyId) WINUSERAPI LONG WINAPI <winuser.h>
QueryDosDevice(LPCSTR lpDeviceName,LPSTR lpTargetPath,DWORD ucchMax) WINBASEAPI DWORD WINAPI <winbase.h>
QueryDosDeviceA(LPCSTR lpDeviceName,LPSTR lpTargetPath,DWORD ucchMax) WINBASEAPI DWORD WINAPI <winbase.h>
QueryDosDeviceW(LPCWSTR lpDeviceName,LPWSTR lpTargetPath,DWORD ucchMax) WINBASEAPI DWORD WINAPI <fileapi.h>
QueryExtraLoggingFields(PDWORD cbSize,PCHAR szParameters) virtual HRESULT WINAPI <ilogobj.h>
QUERYFORCONNECTION(PLDAP PrimaryConnection,PLDAP ReferralFromConnection,PWCHAR NewDN,PCHAR HostName,ULONG PortNumber,PVOID SecAuthIdentity,PVOID CurrentUserToken,PLDAP * ConnectionToUse) typedef ULONG<winldap.h>
QueryFullProcessImageName(HANDLE hProcess,DWORD dwFlags,LPSTR lpExeName,PDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
QueryFullProcessImageNameA(HANDLE hProcess,DWORD dwFlags,LPSTR lpExeName,PDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
QueryFullProcessImageNameW(HANDLE hProcess,DWORD dwFlags,LPWSTR lpExeName,PDWORD lpdwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
QueryGroupIDStatus(BSTR bstrGroupID,VARIANT * bstrBuffer)virtual HRESULT WINAPI <iiisext.h>
QueryHilites(HHILITER hhil,int base,int limit,int cHilites,HILITE * paHilites) int WINAPI <ftsiface.h>
QueryHlink(DWORD grfHLQF,ULONG uHLID)virtual HRESULT WINAPI <hlink.h>
QueryIdleProcessorCycleTime(PULONG BufferLength,PULONG64 ProcessorIdleCycleTime) WINBASEAPI WINBOOL WINAPI <realtimeapiset.h>
QueryIdleProcessorCycleTimeEx(USHORT Group,PULONG BufferLength,PULONG64 ProcessorIdleCycleTime) WINBASEAPI WINBOOL WINAPI <realtimeapiset.h>
QueryInformationJobObject(HANDLE hJob,JOBOBJECTINFOCLASS JobObjectInformationClass,LPVOID lpJobObjectInformation,DWORD cbJobObjectInformationLength,LPDWORD lpReturnLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
QueryInterface(const IID & iid,_InterfaceType * & p) template<unknwnbase.h>
QueryInterface(const IID & iid,_InterfaceType ** p) template<unknwnbase.h>
QueryInterface(Q ** pp)HRESULT STDMETHODCALLTYPE <unknwnbase.h>
QueryInterface(REFIID riid,void ** ppvObject)virtual HRESULT STDMETHODCALLTYPE <unknwnbase.h>
QueryLogPolicy(HANDLE hLog,CLFS_MGMT_POLICY_TYPE ePolicyType,PCLFS_MGMT_POLICY pPolicyBuffer,PULONG pcbPolicyBuffer)WINBOOL WINAPI <clfsw32.h>
QueryMediaType(__LONG32 lMediaType,VARIANT_BOOL * pfSupport)virtual HRESULT WINAPI <tapi3if.h>
QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle,PBOOL ResourceState) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
QueryNewJobInterface(REFIID iid,IUnknown ** pUnk)virtual HRESULT WINAPI <qmgr.h>
QueryObjectSink(__LONG32 lFlags,IWbemObjectSink ** ppResponseHandler)virtual HRESULT WINAPI <wmiatlprov.h>
QueryOptionalDelayLoadedAPI(HMODULE CallerModule,LPCSTR lpDllName,LPCSTR lpProcName,DWORD Reserved) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
QueryOptions(HSEARCHER hsrch,INT iIndex,PUINT pfdwOptions) ERRORCODE WINAPI <ftsiface.h>
QueryOverlayFXCaps(DWORD * lpdwOverlayFXCaps)virtual HRESULT WINAPI <strmif.h>
QueryPagesFor(LPDATAOBJECT lpDataObject)virtual HRESULT WINAPI <mmc.h>
QueryPathOfRegTypeLib(REFGUID guid,USHORT wMaj,USHORT wMin,LCID lcid,LPBSTR lpbstrPathName)WINOLEAUTAPI <oleauto.h>
QueryPerformanceCounter(LARGE_INTEGER * lpPerformanceCount) WINBASEAPI WINBOOL WINAPI <profileapi.h>
QueryPerformanceFrequency(LARGE_INTEGER * lpFrequency) WINBASEAPI WINBOOL WINAPI <profileapi.h>
QueryProcessAffinityUpdateMode(HANDLE hProcess,LPDWORD lpdwFlags) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
QueryProcessCycleTime(HANDLE ProcessHandle,PULONG64 CycleTime) WINBASEAPI WINBOOL WINAPI <realtimeapiset.h>
QueryProgress(LONGLONG * pllTotal,LONGLONG * pllCurrent)virtual HRESULT WINAPI <strmif.h>
QueryPropertyNames(ISnapinPropertiesCallback * pCallback)virtual HRESULT WINAPI <mmcobj.h>
QueryRecoveryAgentsOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST * pRecoveryAgents) WINADVAPI DWORD WINAPI <winefs.h>
QueryResultImageList(LPIMAGELIST * ppImageList)virtual HRESULT WINAPI <mmc.h>
QueryResultView(LPUNKNOWN * pUnknown)virtual HRESULT WINAPI <mmc.h>
QueryS(BSTR progID,BSTR queryCriteria,IUnknown ** ppInterface)virtual HRESULT WINAPI <eventsys.h>
QueryScopeImageList(LPIMAGELIST * ppImageList)virtual HRESULT WINAPI <mmc.h>
QuerySecurityAccessMask(SECURITY_INFORMATION SecurityInformation,LPDWORD DesiredAccess) WINADVAPI VOID WINAPI <securitybaseapi.h>
QuerySecurityContextToken(PCtxtHandle phContext,HANDLE * Token) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
QuerySecurityPackageInfo(SEC_CHAR * pszPackageName,PSecPkgInfoA * ppPackageInfo) SECURITY_STATUS WINAPI <sspi.h>
QuerySecurityPackageInfoA(SEC_CHAR * pszPackageName,PSecPkgInfoA * ppPackageInfo) SECURITY_STATUS WINAPI <sspi.h>
QuerySecurityPackageInfoW(PSECURITY_STRING pPackageName,PSecPkgInfoW * ppPackageInfo) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
QueryService(DWORD dwSiteData,REFGUID guidService,REFIID riid,IUnknown ** ppiunk)virtual HRESULT WINAPI <hlink.h>
QueryServiceConfig(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceConfig2(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceConfigW(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGW lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceLockStatus(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceLockStatusA(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceLockStatusW(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded) WINADVAPI WINBOOL WINAPI <winsvc.h>
QueryStations(QUERYTABLE * lpQueryTable)virtual HRESULT WINAPI <netmon.h>
QueryStatus(DHTMLEDITCMDID cmdID,DHTMLEDITCMDF * retval)virtual HRESULT WINAPI <netmon.h>
QueryStatus(NETWORKSTATUS * pNetworkStatus)virtual HRESULT WINAPI <netmon.h>
QueryStdInterfaces(const _variant_t & varSrc) HRESULT <comip.h>
QueryThreadCycleTime(HANDLE ThreadHandle,PULONG64 CycleTime) WINBASEAPI WINBOOL WINAPI <realtimeapiset.h>
QueryThreadpoolStackInformation(PTP_POOL ptpp,PTP_POOL_STACK_INFORMATION ptpsi) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
QueryThreadProfiling(HANDLE ThreadHandle,PBOOLEAN Enabled) WINBASEAPI DWORD APIENTRY <winbase.h>
QueryTrace(a, b, c)<evntrace.h>
QueryTrace(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
QueryTraceA(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
QueryTraceW(TRACEHANDLE TraceHandle,LPCWSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime) WINBASEAPI WINBOOL WINAPI <realtimeapiset.h>
QueryUsersOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST * pUsers) WINADVAPI DWORD WINAPI <winefs.h>
QueryWorkingSet(HANDLE hProcess,PVOID pv,DWORD cb) WINBOOL WINAPI <psapi.h>
QueryWorkingSetEx(HANDLE hProcess,PVOID pv,DWORD cb) WINBOOL WINAPI <psapi.h>
QueryWriteSync(void)virtual HRESULT WINAPI <strmif.h>
QueueUserAPC(PAPCFUNC pfnAPC,HANDLE hThread,ULONG_PTR dwData) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
QueueUserWorkItem(LPTHREAD_START_ROUTINE Function,PVOID Context,ULONG Flags) WINBASEAPI WINBOOL WINAPI <threadpoollegacyapiset.h>
QueueWorkItem(LPTHREAD_START_ROUTINE Function,PVOID Context,WINBOOL fSynchronous) HRESULT <rtutils.h>
QueueWorkItem(WORKERFUNCTION functionptr,PVOID context,WINBOOL serviceinalertablethread) DWORD WINAPI <rtutils.h>
Quit(void)virtual void WINAPI <mmcobj.h>
QUOTE(x)<ksdebug.h>
QWORD_ALIGN(x)<dmusbuff.h>
RadialGradientBrushProperties(const D2D1_POINT_2F & center,const D2D1_POINT_2F & gradientOriginOffset,FLOAT radiusX,FLOAT radiusY)D2D1FORCEINLINE D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES <d2d1helper.h>
RaiseException(DWORD dwExceptionCode,DWORD dwExceptionFlags,DWORD nNumberOfArguments,CONST ULONG_PTR * lpArguments) WINBASEAPI VOID WINAPI <errhandlingapi.h>
RaiseException(HRESULT hr,DWORD flags=EXCEPTION_NONCONTINUABLE)       inline void DECLSPEC_NORETURN <errhandlingapi.h>
RaiseFailFastException(PEXCEPTION_RECORD pExceptionRecord,PCONTEXT pContextRecord,DWORD dwFlags) WINBASEAPI VOID WINAPI <winbase.h>
RaiseNMEvent(HINSTANCE hInstance,WORD EventType,DWORD EventID,WORD nStrings,const char ** aInsertStrs,LPVOID lpvData,DWORD dwDataSize) WINBOOL __cdecl <netmon.h>
rand_r(__seed)<stdlib.h>
Range(__LONG32 cp1,__LONG32 cp2,ITextRange ** ppRange)virtual HRESULT WINAPI <tom.h>
RangeFromPoint(__LONG32 x,__LONG32 y,ITextRange ** ppRange)virtual HRESULT WINAPI <tom.h>
RASADFUNCA(LPSTR,LPSTR,LPRASADPARAMS,LPDWORD) typedef WINBOOL<ras.h>
RASADFUNCW(LPWSTR,LPWSTR,LPRASADPARAMS,LPDWORD) typedef WINBOOL<ras.h>
RasAdminAcceptNewConnection(RAS_PORT_1 * pRasPort1,RAS_PORT_STATISTICS * pRasStats,RAS_PARAMETERS * pRasParams) WINBOOL WINAPI <rassapi.h>
RasAdminConnectionHangupNotification(RAS_PORT_1 * pRasPort1,RAS_PORT_STATISTICS * pRasStats,RAS_PARAMETERS * pRasParams) VOID WINAPI <rassapi.h>
RasAdminFreeBuffer(PVOID Pointer) DWORD WINAPI <rassapi.h>
RasAdminGetIpAddressForUser(WCHAR * lpszUserName,WCHAR * lpszPortName,IPADDR * pipAddress,WINBOOL * bNotifyRelease) DWORD WINAPI <rassapi.h>
RasAdminGetUserAccountServer(const WCHAR * lpszDomain,const WCHAR * lpszServer,LPWSTR lpszUserAccountServer) DWORD WINAPI <rassapi.h>
RasAdminPortClearStatistics(const WCHAR * lpszServer,const WCHAR * lpszPort) DWORD WINAPI <rassapi.h>
RasAdminPortDisconnect(const WCHAR * lpszServer,const WCHAR * lpszPort) DWORD WINAPI <rassapi.h>
RasAdminPortEnum(const WCHAR * lpszServer,PRAS_PORT_0 * ppRasPort0,WORD * pcEntriesRead) DWORD WINAPI <rassapi.h>
RasAdminPortGetInfo(const WCHAR * lpszServer,const WCHAR * lpszPort,RAS_PORT_1 * pRasPort1,RAS_PORT_STATISTICS * pRasStats,RAS_PARAMETERS ** ppRasParams) DWORD WINAPI <rassapi.h>
RasAdminReleaseIpAddress(WCHAR * lpszUserName,WCHAR * lpszPortName,IPADDR * pipAddress) VOID WINAPI <rassapi.h>
RasAdminServerGetInfo(const WCHAR * lpszServer,PRAS_SERVER_0 pRasServer0) DWORD WINAPI <rassapi.h>
RasAdminUserGetInfo(const WCHAR * lpszUserAccountServer,const WCHAR * lpszUser,PRAS_USER_0 pRasUser0) DWORD WINAPI <rassapi.h>
RasAdminUserSetInfo(const WCHAR * lpszUserAccountServer,const WCHAR * lpszUser,const PRAS_USER_0 pRasUser0) DWORD WINAPI <rassapi.h>
RasClearConnectionStatistics(HRASCONN hRasConn) DWORD WINAPI <ras.h>
RasClearLinkStatistics(HRASCONN hRasConn,DWORD dwSubEntry) DWORD WINAPI <ras.h>
RasConnectionNotification(HRASCONN,HANDLE,DWORD) DWORD WINAPI <ras.h>
RasConnectionNotificationA(HRASCONN,HANDLE,DWORD) DWORD WINAPI <ras.h>
RasConnectionNotificationW(HRASCONN,HANDLE,DWORD) DWORD WINAPI <ras.h>
RasCreatePhonebookEntry(HWND,LPCSTR) DWORD WINAPI <ras.h>
RasCreatePhonebookEntryA(HWND,LPCSTR) DWORD WINAPI <ras.h>
RasCreatePhonebookEntryW(HWND,LPCWSTR) DWORD WINAPI <ras.h>
RasCustomDeleteEntryNotifyFn(LPCWSTR lpszPhonebook,LPCWSTR lpszEntry,DWORD dwFlags) typedef DWORD<ras.h>
RasCustomDialDlgFn(HINSTANCE hInstDll,DWORD dwFlags,LPWSTR lpszPhonebook,LPWSTR lpszEntry,LPWSTR lpszPhoneNumber,LPRASDIALDLG lpInfo,PVOID pvInfo) typedef WINBOOL<rasdlg.h>
RasCustomDialFn(HINSTANCE hInstDll,LPRASDIALEXTENSIONS lpRasDialExtensions,LPCWSTR lpszPhonebook,LPRASDIALPARAMS lpRasDialParams,DWORD dwNotifierType,LPVOID lpvNotifier,LPHRASCONN lphRasConn,DWORD dwFlags) typedef DWORD<ras.h>
RasCustomEntryDlgFn(HINSTANCE hInstDll,LPWSTR lpszPhonebook,LPWSTR lpszEntry,LPRASENTRYDLG lpInfo,DWORD dwFlags) typedef WINBOOL<rasdlg.h>
RasCustomHangUpFn(HRASCONN hRasConn) typedef DWORD<ras.h>
RasCustomScriptExecuteFn(HANDLE hPort,LPCWSTR lpszPhonebook,LPCWSTR lpszEntryName,PFNRASGETBUFFER pfnRasGetBuffer,PFNRASFREEBUFFER pfnRasFreeBuffer,PFNRASSENDBUFFER pfnRasSendBuffer,PFNRASRECEIVEBUFFER pfnRasReceiveBuffer,PFNRASRETRIEVEBUFFER pfnRasRetrieveBuffer,HWND hWnd,RASDIALPARAMS * pRasDialParams,PVOID pvReserved) typedef DWORD<ras.h>
RasDeleteEntry(LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasDeleteEntryA(LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasDeleteEntryW(LPCWSTR,LPCWSTR) DWORD WINAPI <ras.h>
RasDeleteSubEntry(LPCSTR pszPhonebook,LPCSTR pszEntry,DWORD dwSubentryId) DWORD WINAPI <ras.h>
RasDeleteSubEntryA(LPCSTR pszPhonebook,LPCSTR pszEntry,DWORD dwSubentryId) DWORD WINAPI <ras.h>
RasDeleteSubEntryW(LPCWSTR pszPhonebook,LPCWSTR pszEntry,DWORD dwSubEntryId) DWORD WINAPI <ras.h>
RasDial(LPRASDIALEXTENSIONS,LPCSTR,LPRASDIALPARAMSA,DWORD,LPVOID,LPHRASCONN) DWORD WINAPI <ras.h>
RasDialA(LPRASDIALEXTENSIONS,LPCSTR,LPRASDIALPARAMSA,DWORD,LPVOID,LPHRASCONN) DWORD WINAPI <ras.h>
RasDialDlg(LPSTR lpszPhonebook,LPSTR lpszEntry,LPSTR lpszPhoneNumber,LPRASDIALDLG lpInfo) WINBOOL WINAPI <rasdlg.h>
RasDialDlgA(LPSTR lpszPhonebook,LPSTR lpszEntry,LPSTR lpszPhoneNumber,LPRASDIALDLG lpInfo) WINBOOL WINAPI <rasdlg.h>
RasDialDlgW(LPWSTR lpszPhonebook,LPWSTR lpszEntry,LPWSTR lpszPhoneNumber,LPRASDIALDLG lpInfo) WINBOOL WINAPI <rasdlg.h>
RASDIALFUNC(UINT,RASCONNSTATE,DWORD) typedef VOID<ras.h>
RASDIALFUNC1(HRASCONN,UINT,RASCONNSTATE,DWORD,DWORD) typedef VOID<ras.h>
RASDIALFUNC2(ULONG_PTR,DWORD,HRASCONN,UINT,RASCONNSTATE,DWORD,DWORD) typedef DWORD<ras.h>
RasDialW(LPRASDIALEXTENSIONS,LPCWSTR,LPRASDIALPARAMSW,DWORD,LPVOID,LPHRASCONN) DWORD WINAPI <ras.h>
RasEapFreeMemory(BYTE * pMemory) DWORD WINAPI <raseapif.h>
RasEapGetIdentity(DWORD dwEapTypeId,HWND hwndParent,DWORD dwFlags,const WCHAR * pwszPhonebook,const WCHAR * pwszEntry,BYTE * pConnectionDataIn,DWORD dwSizeOfConnectionDataIn,BYTE * pUserDataIn,DWORD dwSizeOfUserDataIn,BYTE ** ppUserDataOut,DWORD * pdwSizeOfUserDataOut,WCHAR ** ppwszIdentityOut) DWORD WINAPI <raseapif.h>
RasEapGetInfo(DWORD dwEapTypeId,PPP_EAP_INFO * pEapInfo) DWORD WINAPI <raseapif.h>
RasEapInvokeConfigUI(DWORD dwEapTypeId,HWND hwndParent,DWORD dwFlags,BYTE * pConnectionDataIn,DWORD dwSizeOfConnectionDataIn,BYTE ** ppConnectionDataOut,DWORD * pdwSizeOfConnectionDataOut) DWORD WINAPI <raseapif.h>
RasEapInvokeInteractiveUI(DWORD dwEapTypeId,HWND hwndParent,BYTE * pUIContextData,DWORD dwSizeOfUIContextData,BYTE ** ppDataFromInteractiveUI,DWORD * pdwSizeOfDataFromInteractiveUI) DWORD WINAPI <raseapif.h>
RasEditPhonebookEntry(HWND,LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasEditPhonebookEntryA(HWND,LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasEditPhonebookEntryW(HWND,LPCWSTR,LPCWSTR) DWORD WINAPI <ras.h>
RasEntryDlg(LPSTR lpszPhonebook,LPSTR lpszEntry,LPRASENTRYDLGA lpInfo) WINBOOL WINAPI <rasdlg.h>
RasEntryDlgA(LPSTR lpszPhonebook,LPSTR lpszEntry,LPRASENTRYDLGA lpInfo) WINBOOL WINAPI <rasdlg.h>
RasEntryDlgW(LPWSTR lpszPhonebook,LPWSTR lpszEntry,LPRASENTRYDLGW lpInfo) WINBOOL WINAPI <rasdlg.h>
RasEnumAutodialAddresses(LPSTR *,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumAutodialAddressesA(LPSTR *,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumAutodialAddressesW(LPWSTR *,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumConnections(LPRASCONNA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumConnectionsA(LPRASCONNA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumConnectionsW(LPRASCONNW,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumDevices(LPRASDEVINFOA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumDevicesA(LPRASDEVINFOA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumDevicesW(LPRASDEVINFOW,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumEntries(LPCSTR,LPCSTR,LPRASENTRYNAMEA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumEntriesA(LPCSTR,LPCSTR,LPRASENTRYNAMEA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasEnumEntriesW(LPCWSTR,LPCWSTR,LPRASENTRYNAMEW,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasFreeEapUserIdentity(LPRASEAPUSERIDENTITYA pRasEapUserIdentity) VOID WINAPI <ras.h>
RasFreeEapUserIdentityA(LPRASEAPUSERIDENTITYA pRasEapUserIdentity) VOID WINAPI <ras.h>
RasFreeEapUserIdentityW(LPRASEAPUSERIDENTITYW pRasEapUserIdentity) VOID WINAPI <ras.h>
RasGetAutodialAddress(LPCSTR,LPDWORD,LPRASAUTODIALENTRYA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasGetAutodialAddressA(LPCSTR,LPDWORD,LPRASAUTODIALENTRYA,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasGetAutodialAddressW(LPCWSTR,LPDWORD,LPRASAUTODIALENTRYW,LPDWORD,LPDWORD) DWORD WINAPI <ras.h>
RasGetAutodialEnable(DWORD,LPBOOL) DWORD WINAPI <ras.h>
RasGetAutodialEnableA(DWORD,LPBOOL) DWORD WINAPI <ras.h>
RasGetAutodialEnableW(DWORD,LPBOOL) DWORD WINAPI <ras.h>
RasGetAutodialParam(DWORD,LPVOID,LPDWORD) DWORD WINAPI <ras.h>
RasGetAutodialParamA(DWORD,LPVOID,LPDWORD) DWORD WINAPI <ras.h>
RasGetAutodialParamW(DWORD,LPVOID,LPDWORD) DWORD WINAPI <ras.h>
RasGetConnectionStatistics(HRASCONN hRasConn,RAS_STATS * lpStatistics) DWORD WINAPI <ras.h>
RasGetConnectStatus(HRASCONN,LPRASCONNSTATUSA) DWORD WINAPI <ras.h>
RasGetConnectStatusA(HRASCONN,LPRASCONNSTATUSA) DWORD WINAPI <ras.h>
RasGetConnectStatusW(HRASCONN,LPRASCONNSTATUSW) DWORD WINAPI <ras.h>
RasGetCountryInfo(LPRASCTRYINFOA,LPDWORD) DWORD WINAPI <ras.h>
RasGetCountryInfoA(LPRASCTRYINFOA,LPDWORD) DWORD WINAPI <ras.h>
RasGetCountryInfoW(LPRASCTRYINFOW,LPDWORD) DWORD WINAPI <ras.h>
RasGetCredentials(LPCSTR,LPCSTR,LPRASCREDENTIALSA) DWORD WINAPI <ras.h>
RasGetCredentialsA(LPCSTR,LPCSTR,LPRASCREDENTIALSA) DWORD WINAPI <ras.h>
RasGetCredentialsW(LPCWSTR,LPCWSTR,LPRASCREDENTIALSW) DWORD WINAPI <ras.h>
RasGetCustomAuthData(LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbCustomAuthData,DWORD * pdwSizeofCustomAuthData) DWORD WINAPI <ras.h>
RasGetCustomAuthDataA(LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbCustomAuthData,DWORD * pdwSizeofCustomAuthData) DWORD WINAPI <ras.h>
RasGetCustomAuthDataW(LPCWSTR pszPhonebook,LPCWSTR pszEntry,BYTE * pbCustomAuthData,DWORD * pdwSizeofCustomAuthData) DWORD WINAPI <ras.h>
RasGetEapUserData(HANDLE hToken,LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbEapData,DWORD * pdwSizeofEapData) DWORD WINAPI <ras.h>
RasGetEapUserDataA(HANDLE hToken,LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbEapData,DWORD * pdwSizeofEapData) DWORD WINAPI <ras.h>
RasGetEapUserDataW(HANDLE hToken,LPCWSTR pszPhonebook,LPCWSTR pszEntry,BYTE * pbEapData,DWORD * pdwSizeofEapData) DWORD WINAPI <ras.h>
RasGetEapUserIdentity(LPCSTR pszPhonebook,LPCSTR pszEntry,DWORD dwFlags,HWND hwnd,LPRASEAPUSERIDENTITYA * ppRasEapUserIdentity) DWORD WINAPI <ras.h>
RasGetEapUserIdentityA(LPCSTR pszPhonebook,LPCSTR pszEntry,DWORD dwFlags,HWND hwnd,LPRASEAPUSERIDENTITYA * ppRasEapUserIdentity) DWORD WINAPI <ras.h>
RasGetEapUserIdentityW(LPCWSTR pszPhonebook,LPCWSTR pszEntry,DWORD dwFlags,HWND hwnd,LPRASEAPUSERIDENTITYW * ppRasEapUserIdentity) DWORD WINAPI <ras.h>
RasGetEntryDialParams(LPCSTR,LPRASDIALPARAMSA,LPBOOL) DWORD WINAPI <ras.h>
RasGetEntryDialParamsA(LPCSTR,LPRASDIALPARAMSA,LPBOOL) DWORD WINAPI <ras.h>
RasGetEntryDialParamsW(LPCWSTR,LPRASDIALPARAMSW,LPBOOL) DWORD WINAPI <ras.h>
RasGetEntryProperties(LPCSTR,LPCSTR,LPRASENTRYA,LPDWORD,LPBYTE,LPDWORD) DWORD WINAPI <ras.h>
RasGetEntryPropertiesA(LPCSTR,LPCSTR,LPRASENTRYA,LPDWORD,LPBYTE,LPDWORD) DWORD WINAPI <ras.h>
RasGetEntryPropertiesW(LPCWSTR,LPCWSTR,LPRASENTRYW,LPDWORD,LPBYTE,LPDWORD) DWORD WINAPI <ras.h>
RasGetErrorString(UINT,LPSTR,DWORD) DWORD WINAPI <ras.h>
RasGetErrorStringA(UINT,LPSTR,DWORD) DWORD WINAPI <ras.h>
RasGetErrorStringW(UINT,LPWSTR,DWORD) DWORD WINAPI <ras.h>
RasGetLinkStatistics(HRASCONN hRasConn,DWORD dwSubEntry,RAS_STATS * lpStatistics) DWORD WINAPI <ras.h>
RasGetProjectionInfo(HRASCONN,RASPROJECTION,LPVOID,LPDWORD) DWORD WINAPI <ras.h>
RasGetProjectionInfoA(HRASCONN,RASPROJECTION,LPVOID,LPDWORD) DWORD WINAPI <ras.h>
RasGetProjectionInfoW(HRASCONN,RASPROJECTION,LPVOID,LPDWORD) DWORD WINAPI <ras.h>
RasGetSubEntryHandle(HRASCONN,DWORD,LPHRASCONN) DWORD WINAPI <ras.h>
RasGetSubEntryHandleA(HRASCONN,DWORD,LPHRASCONN) DWORD WINAPI <ras.h>
RasGetSubEntryHandleW(HRASCONN,DWORD,LPHRASCONN) DWORD WINAPI <ras.h>
RasGetSubEntryProperties(LPCSTR,LPCSTR,DWORD,LPRASSUBENTRYA,LPDWORD,LPBYTE,LPDWORD) DWORD WINAPI <ras.h>
RasGetSubEntryPropertiesA(LPCSTR,LPCSTR,DWORD,LPRASSUBENTRYA,LPDWORD,LPBYTE,LPDWORD) DWORD WINAPI <ras.h>
RasGetSubEntryPropertiesW(LPCWSTR,LPCWSTR,DWORD,LPRASSUBENTRYW,LPDWORD,LPBYTE,LPDWORD) DWORD WINAPI <ras.h>
RasHangUp(HRASCONN) DWORD WINAPI <ras.h>
RasHangUpA(HRASCONN) DWORD WINAPI <ras.h>
RasHangUpW(HRASCONN) DWORD WINAPI <ras.h>
RasInvokeEapUI(HRASCONN,DWORD,LPRASDIALEXTENSIONS,HWND) DWORD WINAPI <ras.h>
RASPBDLGFUNCA(ULONG_PTR,DWORD,LPSTR,LPVOID) typedef VOID<rasdlg.h>
RASPBDLGFUNCW(ULONG_PTR,DWORD,LPWSTR,LPVOID) typedef VOID<rasdlg.h>
RasPhonebookDlg(LPSTR lpszPhonebook,LPSTR lpszEntry,LPRASPBDLGA lpInfo) WINBOOL WINAPI <rasdlg.h>
RasPhonebookDlgA(LPSTR lpszPhonebook,LPSTR lpszEntry,LPRASPBDLGA lpInfo) WINBOOL WINAPI <rasdlg.h>
RasPhonebookDlgW(LPWSTR lpszPhonebook,LPWSTR lpszEntry,LPRASPBDLGW lpInfo) WINBOOL WINAPI <rasdlg.h>
RasRenameEntry(LPCSTR,LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasRenameEntryA(LPCSTR,LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasRenameEntryW(LPCWSTR,LPCWSTR,LPCWSTR) DWORD WINAPI <ras.h>
RasSecurityDialogBegin(SECURITY_MESSAGE *)))))))))))))))))DWORD WINAPI <rasshost.h>
RasSecurityDialogComplete(SECURITY_MESSAGE * pSecMsg)VOID WINAPI <rasshost.h>
RasSecurityDialogEnd(HPORT hPort)DWORD WINAPI <rasshost.h>
RasSecurityDialogGetInfo(HPORT hPort,RAS_SECURITY_INFO * pBuffer)DWORD WINAPI <rasshost.h>
RasSecurityDialogReceive(HPORT hPort,PBYTE pBuffer,PWORD pBufferLength,DWORD Timeout,HANDLE hEvent)DWORD WINAPI <rasshost.h>
RasSecurityDialogSend(HPORT hPort,PBYTE pBuffer,WORD BufferLength)DWORD WINAPI <rasshost.h>
RASSECURITYPROC()typedef DWORD<rasshost.h>
RasSetAutodialAddress(LPCSTR,DWORD,LPRASAUTODIALENTRYA,DWORD,DWORD) DWORD WINAPI <ras.h>
RasSetAutodialAddressA(LPCSTR,DWORD,LPRASAUTODIALENTRYA,DWORD,DWORD) DWORD WINAPI <ras.h>
RasSetAutodialAddressW(LPCWSTR,DWORD,LPRASAUTODIALENTRYW,DWORD,DWORD) DWORD WINAPI <ras.h>
RasSetAutodialEnable(DWORD,WINBOOL) DWORD WINAPI <ras.h>
RasSetAutodialEnableA(DWORD,WINBOOL) DWORD WINAPI <ras.h>
RasSetAutodialEnableW(DWORD,WINBOOL) DWORD WINAPI <ras.h>
RasSetAutodialParam(DWORD,LPVOID,DWORD) DWORD WINAPI <ras.h>
RasSetAutodialParamA(DWORD,LPVOID,DWORD) DWORD WINAPI <ras.h>
RasSetAutodialParamW(DWORD,LPVOID,DWORD) DWORD WINAPI <ras.h>
RasSetCredentials(LPCSTR,LPCSTR,LPRASCREDENTIALSA,WINBOOL) DWORD WINAPI <ras.h>
RasSetCredentialsA(LPCSTR,LPCSTR,LPRASCREDENTIALSA,WINBOOL) DWORD WINAPI <ras.h>
RasSetCredentialsW(LPCWSTR,LPCWSTR,LPRASCREDENTIALSW,WINBOOL) DWORD WINAPI <ras.h>
RasSetCustomAuthData(LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbCustomAuthData,DWORD dwSizeofCustomAuthData) DWORD WINAPI <ras.h>
RasSetCustomAuthDataA(LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbCustomAuthData,DWORD dwSizeofCustomAuthData) DWORD WINAPI <ras.h>
RasSetCustomAuthDataW(LPCWSTR pszPhonebook,LPCWSTR pszEntry,BYTE * pbCustomAuthData,DWORD dwSizeofCustomAuthData) DWORD WINAPI <ras.h>
RasSetEapUserData(HANDLE hToken,LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbEapData,DWORD dwSizeofEapData) DWORD WINAPI <ras.h>
RasSetEapUserDataA(HANDLE hToken,LPCSTR pszPhonebook,LPCSTR pszEntry,BYTE * pbEapData,DWORD dwSizeofEapData) DWORD WINAPI <ras.h>
RasSetEapUserDataW(HANDLE hToken,LPCWSTR pszPhonebook,LPCWSTR pszEntry,BYTE * pbEapData,DWORD dwSizeofEapData) DWORD WINAPI <ras.h>
RasSetEntryDialParams(LPCSTR,LPRASDIALPARAMSA,WINBOOL) DWORD WINAPI <ras.h>
RasSetEntryDialParamsA(LPCSTR,LPRASDIALPARAMSA,WINBOOL) DWORD WINAPI <ras.h>
RasSetEntryDialParamsW(LPCWSTR,LPRASDIALPARAMSW,WINBOOL) DWORD WINAPI <ras.h>
RasSetEntryProperties(LPCSTR,LPCSTR,LPRASENTRYA,DWORD,LPBYTE,DWORD) DWORD WINAPI <ras.h>
RasSetEntryPropertiesA(LPCSTR,LPCSTR,LPRASENTRYA,DWORD,LPBYTE,DWORD) DWORD WINAPI <ras.h>
RasSetEntryPropertiesW(LPCWSTR,LPCWSTR,LPRASENTRYW,DWORD,LPBYTE,DWORD) DWORD WINAPI <ras.h>
RasSetSubEntryProperties(LPCSTR,LPCSTR,DWORD,LPRASSUBENTRYA,DWORD,LPBYTE,DWORD) DWORD WINAPI <ras.h>
RasSetSubEntryPropertiesA(LPCSTR,LPCSTR,DWORD,LPRASSUBENTRYA,DWORD,LPBYTE,DWORD) DWORD WINAPI <ras.h>
RasSetSubEntryPropertiesW(LPCWSTR,LPCWSTR,DWORD,LPRASSUBENTRYW,DWORD,LPBYTE,DWORD) DWORD WINAPI <ras.h>
RasValidateEntryName(LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasValidateEntryNameA(LPCSTR,LPCSTR) DWORD WINAPI <ras.h>
RasValidateEntryNameW(LPCWSTR,LPCWSTR) DWORD WINAPI <ras.h>
RateResource(const RESTYPID ResTypId,const RESID ResId,const WINBOOL fRequiresTransactionEnlistment,RESOURCERATING * pRating)virtual HRESULT WINAPI <comsvcs.h>
RatingAccessDeniedDialog(HWND hDlg,LPCSTR pszUsername,LPCSTR pszContentDescription,void * pRatingDetails)STDAPI <ratings.h>
RatingAccessDeniedDialog2(HWND hDlg,LPCSTR pszUsername,void * pRatingDetails)STDAPI <ratings.h>
RatingAccessDeniedDialogW(HWND hDlg,LPCWSTR pszUsername,LPCWSTR pszContentDescription,void * pRatingDetails)STDAPI <ratings.h>
RatingAddPropertyPage(PROPSHEETHEADER * ppsh)STDAPI <ratings.h>
RatingAddToApprovedSites(HWND hDlg,DWORD cbPasswordBlob,BYTE * pbPasswordBlob,LPCWSTR lpszUrl,WINBOOL fAlwaysNever,WINBOOL fSitePage,WINBOOL fApprovedSitesEnforced)STDAPI <ratings.h>
RatingCheckUserAccess(LPCSTR pszUsername,LPCSTR pszURL,LPCSTR pszRatingInfo,LPBYTE pData,DWORD cbData,void ** ppRatingDetails)STDAPI <ratings.h>
RatingCheckUserAccessW(LPCWSTR pszUsername,LPCWSTR pszURL,LPCWSTR pszRatingInfo,LPBYTE pData,DWORD cbData,void ** ppRatingDetails)STDAPI <ratings.h>
RatingClickedOnPRFInternal(HWND hWndOwner,HINSTANCE,LPSTR lpszFileName,int nShow)STDAPI <ratings.h>
RatingClickedOnRATInternal(HWND hWndOwner,HINSTANCE,LPSTR lpszFileName,int nShow)STDAPI <ratings.h>
RatingEnable(HWND hwndParent,LPCSTR pszUsername,WINBOOL fEnable)STDAPI <ratings.h>
RatingEnabledQuery()STDAPI <ratings.h>
RatingEnableW(HWND hwndParent,LPCWSTR pszUsername,WINBOOL fEnable)STDAPI <ratings.h>
RatingFreeDetails(void * pRatingDetails)STDAPI <ratings.h>
RatingInit()STDAPI <ratings.h>
RatingObtainCancel(HANDLE hRatingObtainQuery)STDAPI <ratings.h>
RatingObtainQuery(DWORD dwUserData,HRESULT hr,LPCSTR pszRating,void * lpvRatingDetails),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery)STDAPI <ratings.h>
RatingObtainQueryW(DWORD dwUserData,HRESULT hr,LPCWSTR pszRating,void * lpvRatingDetails),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery),HANDLE * phRatingObtainQuery)STDAPI <ratings.h>
RatingSetupUI(HWND hDlg,LPCSTR pszUsername)STDAPI <ratings.h>
RatingSetupUIW(HWND hDlg,LPCWSTR pszUsername)STDAPI <ratings.h>
RatingTerm()STDAPI_<ratings.h>
RatioFinished(DBCOUNTITEM * pulDenominator,DBCOUNTITEM * pulNumerator,DBCOUNTITEM * pcRows,WINBOOL * pfNewRows)virtual HRESULT WINAPI <oledbdep.h>
RAWINPUT_ALIGN(x)<winuser.h>
RCYIELDPROC(VOID) typedef WINBOOL<penwin.h>
Read() DWORD <scardssp.h>
Read(BYTE * pByte,LONG cb,LONG * pcbRead=0)virtual HRESULT WINAPI <scardssp.h>
READ_PORT_BUFFER_UCHAR(IN PUCHAR Port,IN PUCHAR Buffer,IN ULONG Count)<wdm.h>
READ_PORT_BUFFER_ULONG(IN PULONG Port,IN PULONG Buffer,IN ULONG Count)<wdm.h>
READ_PORT_BUFFER_USHORT(IN PUSHORT Port,IN PUSHORT Buffer,IN ULONG Count)<wdm.h>
READ_PORT_UCHAR(IN PUCHAR Port)<wdm.h>
READ_PORT_UCHAR(p)<wdm.h>
READ_PORT_UCHAR(r)<wdm.h>
READ_PORT_ULONG(IN PULONG Port)<wdm.h>
READ_PORT_ULONG(p)<wdm.h>
READ_PORT_ULONG(r)<wdm.h>
READ_PORT_USHORT(IN PUSHORT Port)<wdm.h>
READ_PORT_USHORT(p)<wdm.h>
READ_PORT_USHORT(r)<wdm.h>
READ_REGISTER_BUFFER_UCHAR(IN PUCHAR Register,IN PUCHAR Buffer,IN ULONG Count)<wdm.h>
READ_REGISTER_BUFFER_ULONG(IN PULONG Register,IN PULONG Buffer,IN ULONG Count)<wdm.h>
READ_REGISTER_BUFFER_USHORT(IN PUSHORT Register,IN PUSHORT Buffer,IN ULONG Count)<wdm.h>
READ_REGISTER_UCHAR(IN PUCHAR Register)<wdm.h>
READ_REGISTER_UCHAR(IN volatile UCHAR * Register)<wdm.h>
READ_REGISTER_UCHAR(r)<wdm.h>
READ_REGISTER_ULONG(IN PULONG Register)<wdm.h>
READ_REGISTER_ULONG(IN volatile ULONG * Register)<wdm.h>
READ_REGISTER_ULONG(r)<wdm.h>
READ_REGISTER_USHORT(IN PUSHORT Register)<wdm.h>
READ_REGISTER_USHORT(IN volatile USHORT * Register)<wdm.h>
READ_REGISTER_USHORT(r)<wdm.h>
ReadAccessRuleset(PST_KEY Key,const GUID * pType,const GUID * pSubtype,PPST_ACCESSRULESET * ppRules,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
ReadBinary(BYTE byP1,BYTE byP2,LONG lBytesToRead,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
ReadBlobFromFile(HBLOB * phBlob,const char * pFileName) DWORD __cdecl <netmon.h>
ReadCabinetState(CABINETSTATE * pcs,int cLength) SHSTDAPI_<shlobj.h>
ReadClassStg(LPSTORAGE pStg,CLSID * pclsid)WINOLEAPI <ole2.h>
ReadClassStm(LPSTREAM pStm,CLSID * pclsid)WINOLEAPI <ole2.h>
ReadConsole(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleA(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleInput(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutput(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutputA(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutputAttribute(HANDLE hConsoleOutput,LPWORD lpAttribute,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfAttrsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutputCharacter(HANDLE hConsoleOutput,LPSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutputCharacterA(HANDLE hConsoleOutput,LPSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutputCharacterW(HANDLE hConsoleOutput,LPWSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleOutputW(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadConsoleW(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <wincon.h>
ReadData(HCHAPTER hChapter,DBBKMARK cbBookmark,const BYTE * pBookmark,DBROWOFFSET lRowsOffset,HACCESSOR hAccessor,DBROWCOUNT cRows,DBCOUNTITEM * pcRowsObtained,BYTE ** ppFixedData,DBLENGTH * pcbVariableTotal,BYTE ** ppVariableData)virtual HRESULT WINAPI <oledbdep.h>
ReadDirectoryChangesW(HANDLE hDirectory,LPVOID lpBuffer,DWORD nBufferLength,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINBASEAPI WINBOOL WINAPI <winbase.h>
READEMBEDPROC(void *,void *,ULONG)typedef ULONG<t2embapi.h>
ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback,PVOID pvCallbackContext,PVOID pvContext) WINADVAPI DWORD WINAPI <winbase.h>
ReadEventLog(HANDLE hEventLog,DWORD dwReadFlags,DWORD dwRecordOffset,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,DWORD * pnBytesRead,DWORD * pnMinNumberOfBytesNeeded) WINADVAPI WINBOOL WINAPI <winbase.h>
ReadEventLogA(HANDLE hEventLog,DWORD dwReadFlags,DWORD dwRecordOffset,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,DWORD * pnBytesRead,DWORD * pnMinNumberOfBytesNeeded) WINADVAPI WINBOOL WINAPI <winbase.h>
ReadEventLogW(HANDLE hEventLog,DWORD dwReadFlags,DWORD dwRecordOffset,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,DWORD * pnBytesRead,DWORD * pnMinNumberOfBytesNeeded) WINADVAPI WINBOOL WINAPI <winbase.h>
ReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <fileapi.h>
ReadFileEx(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINBASEAPI WINBOOL WINAPI <fileapi.h>
ReadFileScatter(HANDLE hFile,FILE_SEGMENT_ELEMENT aSegmentArray[],DWORD nNumberOfBytesToRead,LPDWORD lpReserved,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <fileapi.h>
ReadFmtUserTypeStg(LPSTORAGE pstg,CLIPFORMAT * pcf,LPOLESTR * lplpszUserType)WINOLEAPI <ole2.h>
ReadForWriteAccess(p)<winnt.h>
ReadFromFile(BSTR FileName)virtual HRESULT WINAPI <cdonts.h>
ReadGlobalPwrPolicy(PGLOBAL_POWER_POLICY) BOOLEAN WINAPI <powrprof.h>
ReadHWL(HWL,HFILE) int WINAPI <penwin.h>
ReadItem(PST_KEY Key,const GUID * pItemType,const GUID * pItemSubtype,LPCWSTR szItemName,DWORD * pcbData,BYTE ** ppbData,PPST_PROMPTINFO pPromptInfo,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
ReadLogArchiveMetadata(CLFS_LOG_ARCHIVE_CONTEXT pvArchiveContext,ULONG cbOffset,ULONG cbBytesToRead,PBYTE pbReadBuffer,PULONG pcbBytesRead)WINBOOL WINAPI <clfsw32.h>
ReadLogNotification(HANDLE hLog,PCLFS_MGMT_NOTIFICATION pNotification,LPOVERLAPPED lpOverlapped)WINBOOL WINAPI <clfsmgmtw32.h>
ReadLogRecord(PVOID pvMarshal,PCLFS_LSN plsnFirst,CLFS_CONTEXT_MODE eContextMode,PVOID * ppvReadBuffer,PULONG pcbReadBuffer,PCLFS_RECORD_TYPE peRecordType,PCLFS_LSN plsnUndoNext,PCLFS_LSN plsnPrevious,PVOID * ppvReadContext,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
ReadLogRestartArea(PVOID pvMarshal,PVOID * ppvRestartBuffer,PULONG pcbRestartBuffer,PCLFS_LSN plsn,PVOID * ppvContext,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
ReadMultiple(ULONG cpspec,const PROPSPEC rgpspec[],PROPVARIANT rgpropvar[])virtual HRESULT WINAPI <wia.h>
ReadNextLogRecord(PVOID pvReadContext,PVOID * ppvBuffer,PULONG pcbBuffer,PCLFS_RECORD_TYPE peRecordType,PCLFS_LSN plsnUser,PCLFS_LSN plsnUndoNext,PCLFS_LSN plsnPrevious,PCLFS_LSN plsnRecord,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
ReadOnlyEnlistment(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
ReadPort(HANDLE hPort,LPBYTE pBuffer,DWORD cbBuffer,LPDWORD pcbRead)<winsplp.h>
ReadPreviousLogRestartArea(PVOID pvReadContext,PVOID * ppvRestartBuffer,PULONG pcbRestartBuffer,PCLFS_LSN plsnRestart,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
ReadPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pNoBytesRead) WINBOOL WINAPI <winspool.h>
ReadProcessMemory(HANDLE hProcess,LPCVOID lpBaseAddress,LPVOID lpBuffer,SIZE_T nSize,SIZE_T * lpNumberOfBytesRead) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
ReadProcessorPwrScheme(UINT,PMACHINE_PROCESSOR_POWER_POLICY) BOOLEAN WINAPI <powrprof.h>
ReadProperties(ULONG nCount,const LPCWSTR rgwszName[],VARIANT rgValue[])virtual HRESULT WINAPI <subsmgr.h>
ReadPropertyNames(ULONG cpropid,const PROPID rgpropid[],LPOLESTR rglpwstrName[])virtual HRESULT WINAPI <wia.h>
ReadPwrScheme(UINT,PPOWER_POLICY) BOOLEAN WINAPI <powrprof.h>
ReadRecord(BYTE byRecordId,BYTE byRefCtrl,LONG lBytesToRead,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
ReadThreadProfilingData(HANDLE PerformanceDataHandle,DWORD Flags,PPERFORMANCE_DATA PerformanceData) WINBASEAPI DWORD APIENTRY <winbase.h>
ReadTimeStampCounter()<winnt.h>
ReadUrlCacheEntryStream(HANDLE hUrlCacheStream,DWORD dwLocation,LPVOID lpBuffer,LPDWORD lpdwLen,DWORD Reserved) BOOLAPI <wininet.h>
ReadyToNavigate(DWORD dwSiteData,DWORD dwReserved)virtual HRESULT WINAPI <hlink.h>
RealChildWindowFromPoint(HWND hwndParent,POINT ptParentClientCoords) WINUSERAPI HWND WINAPI <winuser.h>
RealDriveType(int iDrive,WINBOOL fOKToHitNet) SHSTDAPI_<shlobj.h>
RealGetWindowClass(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax) WINUSERAPI UINT WINAPI <winuser.h>
RealGetWindowClassA(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax) WINUSERAPI UINT WINAPI <winuser.h>
RealGetWindowClassW(HWND hwnd,LPWSTR ptszClassName,UINT cchClassNameMax) WINUSERAPI UINT WINAPI <winuser.h>
RealizePalette(HDC hdc) WINGDIAPI UINT WINAPI <wingdi.h>
ReallocADsMem(LPVOID pOldMem,DWORD cbOld,DWORD cbNew) LPVOID WINAPI <adshlp.h>
ReallocADsStr(LPWSTR * ppStr,LPWSTR pStr) WINBOOL WINAPI <adshlp.h>
ReallocMemory(LPVOID ptr,SIZE_T NewSize) extern LPVOID WINAPI <nmsupp.h>
Reassociate(void)virtual HRESULT WINAPI <strmif.h>
ReAttach(SCARD_SHARE_MODES ShareMode=EXCLUSIVE,SCARD_DISPOSITIONS InitState=LEAVE)virtual HRESULT WINAPI <scardssp.h>
ReBaseImage(PCSTR CurrentImageName,PCSTR SymbolPath,WINBOOL fReBase,WINBOOL fRebaseSysfileOk,WINBOOL fGoingDown,ULONG CheckImageSize,ULONG * OldImageSize,ULONG_PTR * OldImageBase,ULONG * NewImageSize,ULONG_PTR * NewImageBase,ULONG TimeStamp) WINBOOL IMAGEAPI <imagehlp.h>
ReBaseImage64(PCSTR CurrentImageName,PCSTR SymbolPath,WINBOOL fReBase,WINBOOL fRebaseSysfileOk,WINBOOL fGoingDown,ULONG CheckImageSize,ULONG * OldImageSize,ULONG64 * OldImageBase,ULONG * NewImageSize,ULONG64 * NewImageBase,ULONG TimeStamp) WINBOOL IMAGEAPI <imagehlp.h>
Reboot(DWORD dwTimeouMsecs,DWORD dwForceAppsClosed)virtual HRESULT WINAPI <iisrsta.h>
RebootCheckOnInstall(HWND hwnd,PCSTR pszINF,PCSTR pszSec,DWORD dwReserved) HRESULT WINAPI <advpub.h>
REBOOTCHECKONINSTALL(HWND,PCSTR,PCSTR,DWORD) typedef HRESULT<advpub.h>
Receive(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <ntddndis.h>
Receive(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage2 ** ppmsg)virtual HRESULT WINAPI <ntddndis.h>
Receive(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <ntddndis.h>
Receive_v1(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveByLookupId(VARIANT LookupId,VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveCurrent(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveCurrent(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage2 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveCurrent(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveCurrent_v1(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * ReceiveTimeout,IMSMQMessage ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveFirstByLookupId(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveLastByLookupId(VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveNextByLookupId(VARIANT LookupId,VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceivePreviousByLookupId(VARIANT LookupId,VARIANT * Transaction,VARIANT * WantDestinationQueue,VARIANT * WantBody,VARIANT * WantConnectorType,IMSMQMessage3 ** ppmsg)virtual HRESULT WINAPI <mqoai.h>
ReceiveTSPAddressData(PBYTE pBuffer,DWORD dwSize) virtual HRESULT <mspaddr.h>
ReceiveTSPCallData(PBYTE pBuffer,DWORD dwSize) virtual HRESULT <mspcall.h>
ReceiveTSPData(IUnknown * pMSPCall,BYTE * pBuffer,DWORD dwSize)virtual HRESULT WINAPI <tapi3.h>
ReclaimVirtualMemory(PVOID VirtualAddress,SIZE_T Size) WINBASEAPI DWORD WINAPI <memoryapi.h>
Recognize(LPRC) REC WINAPI <penwin.h>
RecognizeData(LPRC,HPENDATA) REC WINAPI <penwin.h>
RecognizeDataInternal(LPRC,HPENDATA,LPFUNCRESULTS) REC WINAPI <penwin.h>
RECOGNIZEFRAME(HFRAME,ULPBYTE,ULPBYTE,DWORD,DWORD,HPROTOCOL,DWORD,LPDWORD,LPHPROTOCOL,PDWORD_PTR) typedef LPBYTE<netmon.h>
RecognizeInternal(LPRC,LPFUNCRESULTS) REC WINAPI <penwin.h>
Reconfigure(IGraphConfigCallback * pCallback,PVOID pvContext,DWORD dwFlags,HANDLE hAbortEvent)virtual HRESULT WINAPI <strmif.h>
Reconfigure(PVOID pvContext,DWORD dwFlags)virtual HRESULT WINAPI <strmif.h>
Reconnect(IPin * pOutputPin,IPin * pInputPin,const AM_MEDIA_TYPE * pmtFirstConnection,IBaseFilter * pUsingFilter,HANDLE hAbortEvent,DWORD dwFlags)virtual HRESULT WINAPI <strmif.h>
RecoverEnlistment(HANDLE EnlistmentHandle,PVOID EnlistmentKey) WINBOOL WINAPI <ktmw32.h>
RecoverResourceManager(HANDLE ResourceManagerHandle) WINBOOL WINAPI <ktmw32.h>
RecoverTransactionManager(HANDLE TransactionManagerHandle) WINBOOL WINAPI <ktmw32.h>
RecoveryDone(void)virtual HRESULT WINAPI <txdtc.h>
Rect()	<d2d1helper.h>
Rect(const Point & location,const Size & size)	<d2d1helper.h>
Rect(const Point & point)	VOID Offset<d2d1helper.h>
Rect(const Rect & rc)	BOOL IntersectsWith<d2d1helper.h>
Rect(const Rect & rect)	BOOL Intersect<d2d1helper.h>
Rect(INT dx,INT dy)	VOID Offset<d2d1helper.h>
Rect(INT x,INT y)	BOOL Contains<d2d1helper.h>
Rect(INT x,INT y,INT width,INT height)	<d2d1helper.h>
Rect(Point * point)	VOID GetLocation<d2d1helper.h>
Rect(Rect & c,const Rect & a,const Rect & b)	static BOOL Union<d2d1helper.h>
Rect(Rect * rect)	VOID GetBounds<d2d1helper.h>
Rect(Size * size)	VOID GetSize<d2d1helper.h>
Rect(T left,T top,T right,T bottom)template<d2d1helper.h>
Rectangle(HDC hdc,int left,int top,int right,int bottom) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RectF()	<d2d1helper.h>
RectF(const PointF & location,const SizeF & size)	<d2d1helper.h>
RectF(const PointF & point)	VOID Offset<d2d1helper.h>
RectF(const RectF & rc)	BOOL IntersectsWith<d2d1helper.h>
RectF(const RectF & rect)	BOOL Intersect<d2d1helper.h>
RectF(FLOAT left=0.0f,FLOAT top=0.0f,FLOAT right=0.0f,FLOAT bottom=0.0f)D2D1FORCEINLINE D2D1_RECT_F <d2d1helper.h>
RectF(PointF * point)	VOID GetLocation<d2d1helper.h>
RectF(REAL dx,REAL dy)	VOID Offset<d2d1helper.h>
RectF(REAL x,REAL y)	BOOL Contains<d2d1helper.h>
RectF(REAL x,REAL y,REAL width,REAL height)	<d2d1helper.h>
RectF(RectF & c,const RectF & a,const RectF & b)	static BOOL Union<d2d1helper.h>
RectF(RectF * rect)	VOID GetBounds<d2d1helper.h>
RectF(SizeF * size)	VOID GetSize<d2d1helper.h>
RectInRegion(HRGN hrgn,CONST RECT * lprect) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RectL(INT32 left=0.0f,INT32 top=0.0f,INT32 right=0.0f,INT32 bottom=0.0f)D2D1FORCEINLINE D2D1_RECT_L <d2d1_1helper.h>
RectU(UINT32 left=0,UINT32 top=0,UINT32 right=0,UINT32 bottom=0)D2D1FORCEINLINE D2D1_RECT_U <d2d1helper.h>
RectVisible(HDC hdc,CONST RECT * lprect) WINGDIAPI WINBOOL WINAPI <wingdi.h>
recv(SOCKET s,char * buf,int len,int flags) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
recvfrom(SOCKET s,char * buf,int len,int flags,struct sockaddr * from,int * fromlen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
Recycle(void)virtual HRESULT WINAPI <iiisext.h>
RecycleApplicationPool(LPCWSTR szPool)virtual HRESULT WINAPI <iwamreg.h>
RecycleSurrogate(__LONG32 lReasonCode) extern HRESULT __cdecl <comsvcs.h>
Redirect(BSTR bstrURL)virtual HRESULT WINAPI <rtccore.h>
Redirect(RTC_SESSION_TYPE enType,BSTR bstrLocalPhoneURI,IRTCProfile * pProfile,__LONG32 lFlags)virtual HRESULT WINAPI <rtccore.h>
RedisplayPenData(HDC,HPENDATA,LPPOINT,LPPOINT,int,DWORD) WINBOOL WINAPI <penwin.h>
Redo(__LONG32 Count,__LONG32 * prop)virtual HRESULT WINAPI <tom.h>
RedrawWindow(HWND hWnd,CONST RECT * lprcUpdate,HRGN hrgnUpdate,UINT flags) WINUSERAPI WINBOOL WINAPI <winuser.h>
Reenlist(byte * pPrepInfo,ULONG cbPrepInfo,DWORD lTimeout,XACTSTAT * pXactStat)virtual HRESULT WINAPI <txdtc.h>
Reenlist2(XID * pXid,DWORD dwTimeout,XACTSTAT * pXactStat)virtual HRESULT WINAPI <txdtc.h>
ReenlistmentComplete(void)virtual HRESULT WINAPI <txdtc.h>
RefCount()inline unsigned __LONG32 _bstr_t::Data_t::<rpcproxy.h>
RefCountEx(ULONG)ULONG <ndis.h>
Refer(BSTR bstrReferToURI,BSTR bstrReferCookie)virtual HRESULT WINAPI <rtccore.h>
REFERENCE_PROXY_FILE(name)<rpcproxy.h>
Refresh(DBCOUNTITEM * pcChangesObtained,DBROWWATCHCHANGE ** prgChanges)virtual HRESULT WINAPI <rtccore.h>
Refresh(VOID) virtual VOID <rtccore.h>
Refresh(void)virtual HRESULT WINAPI <rtccore.h>
RefreshConnections(void)virtual HRESULT WINAPI <netcon.h>
RefreshDirectoryObject(ITDirectoryObject * pDirectoryObject)virtual HRESULT WINAPI <rend.h>
RefreshIScsiSendTargetPortal(PCHAR InitiatorInstance,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA Portal)HRESULT WINAPI <iscsidsc.h>
RefreshIScsiSendTargetPortalA(PCHAR InitiatorInstance,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA Portal)HRESULT WINAPI <iscsidsc.h>
RefreshIScsiSendTargetPortalW(PWCHAR InitiatorInstance,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALW Portal)HRESULT WINAPI <iscsidsc.h>
RefreshISNSServer(PCHAR Address)HRESULT WINAPI <iscsidsc.h>
RefreshISNSServerA(PCHAR Address)HRESULT WINAPI <iscsidsc.h>
RefreshISNSServerW(PWCHAR Address)HRESULT WINAPI <iscsidsc.h>
RefreshPolicy(WINBOOL bMachine) USERENVAPI WINBOOL WINAPI <userenv.h>
RefreshPolicyEx(WINBOOL bMachine,DWORD dwOptions) USERENVAPI WINBOOL WINAPI <userenv.h>
RefreshSchemaCache(void)virtual HRESULT WINAPI <iads.h>
RefreshScopeNode(VARIANT ScopeNode)virtual HRESULT WINAPI <mmcobj.h>
RefreshSelection(void)virtual HRESULT WINAPI <mmcobj.h>
RefreshVisibleData(HCHAPTER hChapter,DBCOUNTITEM cRows,const HROW rghRows[],WINBOOL fOverWrite,DBCOUNTITEM * pcRowsRefreshed,HROW ** prghRowsRefreshed,DBROWSTATUS ** prgRowStatus)virtual HRESULT WINAPI <oledb.h>
RegConnectRegistry(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegConnectRegistryEx(LPCSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegConnectRegistryExA(LPCSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegConnectRegistryExW(LPCWSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegConnectRegistryW(LPCWSTR lpMachineName,HKEY hKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegCopyTree(HKEY hKeySrc,LPCSTR lpSubKey,HKEY hKeyDest)WINADVAPI LONG WINAPI <winreg.h>
RegCopyTreeA(HKEY hKeySrc,LPCSTR lpSubKey,HKEY hKeyDest)WINADVAPI LONG WINAPI <winreg.h>
RegCopyTreeW(HKEY hKeySrc,LPCWSTR lpSubKey,HKEY hKeyDest)WINADVAPI LONG WINAPI <winreg.h>
RegCreateBlobKey(HKEY hkey,const char * szBlobName,HBLOB hBlob) DWORD __cdecl <netmon.h>
RegCreateKey(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyEx(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition) WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition) WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPWSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition) WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyTransacted(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,const LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition,HANDLE hTransaction,PVOID pExtendedParemeter)WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyTransactedA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,const LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition,HANDLE hTransaction,PVOID pExtendedParemeter)WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyTransactedW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPWSTR lpClass,DWORD dwOptions,REGSAM samDesired,const LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition,HANDLE hTransaction,PVOID pExtendedParemeter)WINADVAPI LONG WINAPI <winreg.h>
RegCreateKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKey(HKEY hKey,LPCSTR lpSubKey) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyA(HKEY hKey,LPCSTR lpSubKey) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyEx(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyExW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyTransacted(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved,HANDLE hTransaction,PVOID pExtendedParameter)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyTransactedA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved,HANDLE hTransaction,PVOID pExtendedParameter)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyTransactedW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved,HANDLE hTransaction,PVOID pExtendedParameter)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyValue(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpValueName)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyValueA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpValueName)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyValueW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpValueName)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteKeyW(HKEY hKey,LPCWSTR lpSubKey) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteTree(HKEY hKey,LPCSTR lpSubKey)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteTreeA(HKEY hKey,LPCSTR lpSubKey)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteTreeW(HKEY hKey,LPCWSTR lpSubKey)WINADVAPI LONG WINAPI <winreg.h>
RegDeleteValue(HKEY hKey,LPCSTR lpValueName) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteValueA(HKEY hKey,LPCSTR lpValueName) WINADVAPI LONG WINAPI <winreg.h>
RegDeleteValueW(HKEY hKey,LPCWSTR lpValueName) WINADVAPI LONG WINAPI <winreg.h>
RegDisablePredefinedCache(void) WINADVAPI LONG WINAPI <winreg.h>
RegDisablePredefinedCacheEx(void)WINADVAPI LONG WINAPI <winreg.h>
RegDisableReflectionKey(HKEY hBase) WINADVAPI LONG WINAPI <winreg.h>
RegEnableReflectionKey(HKEY hBase) WINADVAPI LONG WINAPI <winreg.h>
RegEnumKey(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cchName) WINADVAPI LONG WINAPI <winreg.h>
RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cchName) WINADVAPI LONG WINAPI <winreg.h>
RegEnumKeyEx(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime) WINADVAPI LONG WINAPI <winreg.h>
RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime) WINADVAPI LONG WINAPI <winreg.h>
RegEnumKeyExW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPWSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime) WINADVAPI LONG WINAPI <winreg.h>
RegEnumKeyW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,DWORD cchName) WINADVAPI LONG WINAPI <winreg.h>
RegEnumValue(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegEnumValueW(HKEY hKey,DWORD dwIndex,LPWSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegFlushKey(HKEY hKey) WINADVAPI LONG WINAPI <winreg.h>
RegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor) WINADVAPI LONG WINAPI <winreg.h>
RegGetValue(HKEY hkey,LPCSTR lpSubKey,LPCSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData) WINADVAPI LONG WINAPI <winreg.h>
RegGetValueA(HKEY hkey,LPCSTR lpSubKey,LPCSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData) WINADVAPI LONG WINAPI <winreg.h>
RegGetValueW(HKEY hkey,LPCWSTR lpSubKey,LPCWSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData) WINADVAPI LONG WINAPI <winreg.h>
RegInstall(HMODULE hm,LPCSTR pszSection,LPCSTRTABLE pstTable) HRESULT WINAPI <advpub.h>
REGINSTALL(HMODULE hm,LPCSTR pszSection,LPCSTRTABLE pstTable) typedef HRESULT<advpub.h>
Region()__inline__ ::~<minwinbase.h>
Region(BYTE * buffer,UINT bufferSize,UINT * sizeFilled)__inline__ Status ::GetData<minwinbase.h>
Region(const BYTE * regionData,INT size)__inline__ ::<minwinbase.h>
Region(const Graphics * graphics)__inline__ BOOL ::IsInfinite<minwinbase.h>
Region(const GraphicsPath * path)__inline__ Status ::Xor<minwinbase.h>
Region(const Matrix * matrix)__inline__ Status ::Transform<minwinbase.h>
Region(const Matrix * matrix,Rect * rects,INT * count)__inline__ Status ::GetScans<minwinbase.h>
Region(const Matrix * matrix,RectF * rects,INT * count)__inline__ Status ::GetScans<minwinbase.h>
Region(const Point & point,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(const Point & point,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(const PointF & point,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(const PointF & point,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(const Rect & rect)__inline__ Status ::Xor<minwinbase.h>
Region(const Rect & rect,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(const Rect & rect,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(const RectF & rect)__inline__ Status ::Xor<minwinbase.h>
Region(const RectF & rect,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(const RectF & rect,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(const Region &)	<minwinbase.h>
Region(const Region * region)__inline__ Status ::Xor<minwinbase.h>
Region(const Region * region,const Graphics * graphics)__inline__ BOOL ::Equals<minwinbase.h>
Region(GpRegion * region,Status status)	<minwinbase.h>
Region(HRGN hrgn)__inline__ ::<minwinbase.h>
Region(INT dx,INT dy)__inline__ Status ::Translate<minwinbase.h>
Region(INT x,INT y,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(INT x,INT y,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(INT x,INT y,INT width,INT height,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(INT x,INT y,INT width,INT height,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(REAL dx,REAL dy)__inline__ Status ::Translate<minwinbase.h>
Region(REAL x,REAL y,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(REAL x,REAL y,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(REAL x,REAL y,REAL width,REAL height,const Graphics * graphics)__inline__ BOOL ::IsVisible<minwinbase.h>
Region(REAL x,REAL y,REAL width,REAL height,const Graphics * graphics=NULL)	BOOL IsVisible<minwinbase.h>
Region(Rect * rect,const Graphics * graphics)__inline__ Status ::GetBounds<minwinbase.h>
Region(RectF * rect,const Graphics * graphics)__inline__ Status ::GetBounds<minwinbase.h>
Region(Status newStatus)	Status updateStatus<minwinbase.h>
Register(DWORD reserved,IUnknown * piunk,IMoniker * pimk,DWORD * pdwRegister)virtual HRESULT WINAPI <netmon.h>
REGISTER(HPROTOCOL) typedef VOID<netmon.h>
Register(IUnknown * punkNotifySink,__LONG32 * pdwSinkID)virtual HRESULT WINAPI <netmon.h>
REGISTER_PROXY_DLL_ROUTINES(pProxyFileList,pClsID)<rpcproxy.h>
RegisterActiveObject(IUnknown * punk,REFCLSID rclsid,DWORD dwFlags,DWORD * pdwRegister)WINOLEAUTAPI <oleauto.h>
RegisterAdminExtensions(const WCHAR * pcszResTypeNameIn,ULONG cExtClsidCountIn,const CLSID * rgclsidExtClsidsIn)virtual HRESULT WINAPI <cluscfgserver.h>
RegisterAnimator(ANIMATOR pAnimator,HWND hwndAnimator) ERRORCODE WINAPI <ftsiface.h>
RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,PVOID pvParameter,DWORD dwPingInterval,DWORD dwFlags) WINBASEAPI HRESULT WINAPI <winbase.h>
RegisterApplicationRestart(PCWSTR pwzCommandline,DWORD dwFlags) WINBASEAPI HRESULT WINAPI <winbase.h>
RegisterBadMemoryNotification(PBAD_MEMORY_CALLBACK_ROUTINE Callback) WINBASEAPI PVOID WINAPI <winbase.h>
RegisterBindStatusCallback(LPBC pBC,IBindStatusCallback * pBSCb,IBindStatusCallback ** ppBSCBPrev,DWORD dwReserved)STDAPI <urlmon.h>
RegisterCallNotifications(ITAddress * pAddress,VARIANT_BOOL fMonitor,VARIANT_BOOL fOwner,__LONG32 lMediaTypes,__LONG32 lCallbackInstance,__LONG32 * plRegister)virtual HRESULT WINAPI <tapi3if.h>
RegisterCertificate(VARIANT * Flags,VARIANT * ExternalCertificate)virtual HRESULT WINAPI <mqoai.h>
RegisterClass(CONST WNDCLASSA * lpWndClass) WINUSERAPI ATOM WINAPI <winuser.h>
RegisterClassA(CONST WNDCLASSA * lpWndClass) WINUSERAPI ATOM WINAPI <winuser.h>
RegisterClassEx(CONST WNDCLASSEXA *) WINUSERAPI ATOM WINAPI <winuser.h>
RegisterClassExA(CONST WNDCLASSEXA *) WINUSERAPI ATOM WINAPI <winuser.h>
RegisterClassExW(CONST WNDCLASSEXW *) WINUSERAPI ATOM WINAPI <winuser.h>
RegisterClassW(CONST WNDCLASSW * lpWndClass) WINUSERAPI ATOM WINAPI <winuser.h>
RegisterClipboardFormat(LPCSTR lpszFormat) WINUSERAPI UINT WINAPI <winuser.h>
RegisterClipboardFormatA(LPCSTR lpszFormat) WINUSERAPI UINT WINAPI <winuser.h>
RegisterClipboardFormatW(LPCWSTR lpszFormat) WINUSERAPI UINT WINAPI <winuser.h>
RegisterClusterNotify(HCHANGE hChange,DWORD dwFilterType,HANDLE hObject,DWORD_PTR dwNotifyKey) DWORD WINAPI <clusapi.h>
RegisterCMM(PCSTR,DWORD,PCSTR) WINBOOL WINAPI <icm.h>
RegisterCMMA(PCSTR,DWORD,PCSTR) WINBOOL WINAPI <icm.h>
RegisterCMMW(PCWSTR,DWORD,PCWSTR) WINBOOL WINAPI <icm.h>
RegisterCompensator(LPCWSTR lpcwstrProgIdCompensator,LPCWSTR lpcwstrDescription,LONG lCrmRegFlags)virtual HRESULT WINAPI <comsvcs.h>
RegisterDeviceNotification(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags) WINUSERAPI HDEVNOTIFY WINAPI <winuser.h>
RegisterDeviceNotificationA(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags) WINUSERAPI HDEVNOTIFY WINAPI <winuser.h>
RegisterDeviceNotificationW(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags) WINUSERAPI HDEVNOTIFY WINAPI <winuser.h>
RegisterDialogClasses(HANDLE hInst) WINBOOL WINAPI <scrnsave.h>
RegisterDispenser(IDispenserDriver * __MIDL_0014,LPCOLESTR szDispenserName,IHolder ** __MIDL_0015)virtual HRESULT WINAPI <comsvcs.h>
RegisterDragDrop(HWND hwnd,LPDROPTARGET pDropTarget)WINOLEAPI <ole2.h>
RegisterEvent(LPOLESTR pchEvent,LONG lFlags,LONG * plCookie)virtual HRESULT WINAPI <mshtmlc.h>
RegisterEventCallbackCLSID(LONG lFlags,BSTR bstrDeviceID,const GUID * pEventGUID,const GUID * pClsID,BSTR bstrName,BSTR bstrDescription,BSTR bstrIcon)virtual HRESULT WINAPI <wia.h>
RegisterEventCallbackInterface(LONG lFlags,BSTR bstrDeviceID,const GUID * pEventGUID,IWiaEventCallback * pIWiaEventCallback,IUnknown ** pEventObject)virtual HRESULT WINAPI <wia.h>
RegisterEventCallbackProgram(LONG lFlags,BSTR bstrDeviceID,const GUID * pEventGUID,BSTR bstrCommandline,BSTR bstrName,BSTR bstrDescription,BSTR bstrIcon)virtual HRESULT WINAPI <wia.h>
RegisterEventSource(LPCSTR lpUNCServerName,LPCSTR lpSourceName) WINADVAPI HANDLE WINAPI <winbase.h>
RegisterEventSourceA(LPCSTR lpUNCServerName,LPCSTR lpSourceName) WINADVAPI HANDLE WINAPI <winbase.h>
RegisterEventSourceW(LPCWSTR lpUNCServerName,LPCWSTR lpSourceName) WINADVAPI HANDLE WINAPI <winbase.h>
RegisterForDirtyRange(IHTMLChangeSink * pChangeSink,DWORD * pdwCookie)virtual HRESULT WINAPI <mshtmlc.h>
RegisterForEvent(const GUID * Api,LONG_PTR userData)virtual HRESULT WINAPI <strmif.h>
RegisterForLogWriteNotification(HANDLE hLog,ULONG cbThreshold,WINBOOL fEnable)WINBOOL WINAPI <clfsmgmtw32.h>
RegisterFormatEnumerator(LPBC pBC,IEnumFORMATETC * pEFetc,DWORD reserved)STDAPI <urlmon.h>
RegisterForPrintAsyncNotifications(LPCWSTR pName,PrintAsyncNotificationType * pSchema,PrintAsyncNotifyUserFilter filter,PrintAsyncNotifyConversationStyle directionality,IPrintAsyncNotifyCallback * pCallback,HANDLE * pRegistrationHandler)HRESULT <prnasnot.h>
RegisterGPNotification(HANDLE hEvent,WINBOOL bMachine) USERENVAPI WINBOOL WINAPI <userenv.h>
RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterManageableLogClient(HANDLE hLog,PLOG_MANAGEMENT_CALLBACKS pCallbacks)WINBOOL WINAPI <clfsmgmtw32.h>
RegisterMediaTypeClass(LPBC pBC,UINT ctypes,const LPCSTR * rgszTypes,CLSID * rgclsID,DWORD reserved)STDAPI <urlmon.h>
RegisterMediaTypes(UINT ctypes,const LPCSTR * rgszTypes,CLIPFORMAT * rgcfTypes)STDAPI <urlmon.h>
RegisterName(LPOLESTR pchName)virtual HRESULT WINAPI <mshtmlc.h>
RegisterNotification(LONG lEvent)virtual HRESULT WINAPI <ntsecpkg.h>
RegisterNotificationCallBack(IAMTunerNotification * pNotify,LONG lEvents)virtual HRESULT WINAPI <strmif.h>
RegisterOpRegionHandler(IN PDEVICE_OBJECT DeviceObject,IN ULONG AccessType,IN ULONG RegionSpace,IN PACPI_OP_REGION_HANDLER Handler,IN PVOID Context,IN ULONG Flags,IN OUT PVOID * OperationRegionObject)<oprghdlr.h>
RegisterPluggableTerminalEventSink(ITTerminal * pTerminal) HRESULT <mspstrm.h>
RegisterPnpNotification(CMSPAddress * pCMSPAddress) HRESULT <mspthrd.h>
RegisterPointerDeviceNotifications(HWND window,WINBOOL notifyRange) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterPointerInputTarget(HWND hwnd,POINTER_INPUT_TYPE pointerType) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterPowerSettingNotification(HANDLE hRecipient,LPCGUID PowerSettingGuid,DWORD Flags) WINUSERAPI HPOWERNOTIFY WINAPI <winuser.h>
RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices,UINT uiNumDevices,UINT cbSize) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterRequestRecipient(__LONG32 lRegistrationInstance,__LONG32 lRequestMode,VARIANT_BOOL fEnable)virtual HRESULT WINAPI <tapi3if.h>
RegisterService(REFGUID guidService,IUnknown * pUnkObject)virtual HRESULT WINAPI <strmif.h>
RegisterServiceCtrlHandler(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc) WINADVAPI SERVICE_STATUS_HANDLE WINAPI <winsvc.h>
RegisterServiceCtrlHandlerA(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc) WINADVAPI SERVICE_STATUS_HANDLE WINAPI <winsvc.h>
RegisterServiceCtrlHandlerEx(LPCSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext) WINADVAPI SERVICE_STATUS_HANDLE WINAPI <winsvc.h>
RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext) WINADVAPI SERVICE_STATUS_HANDLE WINAPI <winsvc.h>
RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext) WINADVAPI SERVICE_STATUS_HANDLE WINAPI <winsvc.h>
RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc) WINADVAPI SERVICE_STATUS_HANDLE WINAPI <winsvc.h>
RegisterShellHookWindow(HWND hwnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterSink(ICallFrameEvents * psink)virtual HRESULT WINAPI <tapi3.h>
RegisterSink(ITPluggableTerminalEventSink * pEventSink)virtual HRESULT WINAPI <tapi3.h>
RegisterSuspendResumeNotification(HANDLE hRecipient,DWORD Flags) WINUSERAPI HPOWERNOTIFY WINAPI <winuser.h>
RegisterSyncMgrHandler(REFCLSID rclsidHandler,LPCWSTR pwszDescription,DWORD dwSyncMgrRegisterFlags)virtual HRESULT WINAPI <mobsync.h>
RegisterTouchHitTestingWindow(HWND hwnd,ULONG value) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterTouchWindow(HWND hwnd,ULONG ulFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
RegisterTraceGuids(WMIDPREQUEST RequestAddress,PVOID RequestContext,LPCGUID ControlGuid,ULONG GuidCount,PTRACE_GUID_REGISTRATION TraceGuidReg,LPCSTR MofImagePath,LPCSTR MofResourceName,PTRACEHANDLE RegistrationHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
RegisterTraceGuidsA(WMIDPREQUEST RequestAddress,PVOID RequestContext,LPCGUID ControlGuid,ULONG GuidCount,PTRACE_GUID_REGISTRATION TraceGuidReg,LPCSTR MofImagePath,LPCSTR MofResourceName,PTRACEHANDLE RegistrationHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
RegisterTraceGuidsW(WMIDPREQUEST RequestAddress,PVOID RequestContext,LPCGUID ControlGuid,ULONG GuidCount,PTRACE_GUID_REGISTRATION TraceGuidReg,LPCWSTR MofImagePath,LPCWSTR MofResourceName,PTRACEHANDLE RegistrationHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
RegisterTypeLib(ITypeLib * ptlib,OLECHAR * szFullPath,OLECHAR * szHelpDir)WINOLEAUTAPI <oleauto.h>
RegisterUrn(LPOLESTR pchUrn)virtual HRESULT WINAPI <mshtmlc.h>
RegisterWaitChainCOMCallback(PCOGETCALLSTATE CallStateCallback,PCOGETACTIVATIONSTATE ActivationStateCallback)VOID WINAPI <wct.h>
RegisterWaitEvent(IMediaEvent * pIMediaEvent,ITStream * pITStream) HRESULT <mspcall.h>
RegisterWaitEventBinding(PWT_EVENT_BINDING pwiWorkItem) DWORD WINAPI <rtutils.h>
RegisterWaitEventsTimers(PLIST_ENTRY pLEventsToAdd,PLIST_ENTRY pLTimersToAdd) DWORD WINAPI <rtutils.h>
RegisterWaitForSingleObject(PHANDLE phNewWaitObject,HANDLE hObject,WAITORTIMERCALLBACK Callback,PVOID Context,ULONG dwMilliseconds,ULONG dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
RegisterWindow(WINBOOL fForceRegister,int swc)virtual HRESULT WINAPI <shdeprecated.h>
RegisterWindowMessage(LPCSTR lpString) WINUSERAPI UINT WINAPI <winuser.h>
RegisterWindowMessageA(LPCSTR lpString) WINUSERAPI UINT WINAPI <winuser.h>
RegisterWindowMessageW(LPCWSTR lpString) WINUSERAPI UINT WINAPI <winuser.h>
RegisterWordA(HKL hKL,LPSTR szReading,DWORD dwStyle,LPSTR szRegister)virtual HRESULT WINAPI <mshtmlc.h>
REGISTERWORDENUMPROCA(LPCSTR,DWORD,LPCSTR,LPVOID) typedef int<imm.h>
REGISTERWORDENUMPROCW(LPCWSTR,DWORD,LPCWSTR,LPVOID) typedef int<imm.h>
RegisterWordW(HKL hKL,LPWSTR szReading,DWORD dwStyle,LPWSTR szRegister)virtual HRESULT WINAPI <mshtmlc.h>
RegLoadAppKey(LPCSTR lpFile,PHKEY phkResult,REGSAM samDesired,DWORD dwOptions,DWORD Reserved)WINADVAPI LONG WINAPI <winreg.h>
RegLoadAppKeyA(LPCSTR lpFile,PHKEY phkResult,REGSAM samDesired,DWORD dwOptions,DWORD Reserved)WINADVAPI LONG WINAPI <winreg.h>
RegLoadAppKeyW(LPCWSTR lpFile,PHKEY phkResult,REGSAM samDesired,DWORD dwOptions,DWORD Reserved)WINADVAPI LONG WINAPI <winreg.h>
RegLoadKey(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpFile) WINADVAPI LONG WINAPI <winreg.h>
RegLoadKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpFile) WINADVAPI LONG WINAPI <winreg.h>
RegLoadKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpFile) WINADVAPI LONG WINAPI <winreg.h>
RegLoadMUIString(HKEY hKey,LPCSTR pszValue,LPSTR pszOutBuf,DWORD cbOutBuf,LPDWORD pcbData,DWORD Flags,LPCSTR pszDirectory)WINADVAPI LONG WINAPI <winreg.h>
RegLoadMUIStringA(HKEY hKey,LPCSTR pszValue,LPSTR pszOutBuf,DWORD cbOutBuf,LPDWORD pcbData,DWORD Flags,LPCSTR pszDirectory)WINADVAPI LONG WINAPI <winreg.h>
RegLoadMUIStringW(HKEY hKey,LPCWSTR pszValue,LPWSTR pszOutBuf,DWORD cbOutBuf,LPDWORD pcbData,DWORD Flags,LPCWSTR pszDirectory)WINADVAPI LONG WINAPI <winreg.h>
RegNotifyChangeKeyValue(HKEY hKey,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,HANDLE hEvent,WINBOOL fAsynchronous) WINADVAPI LONG WINAPI <winreg.h>
RegOpenBlobKey(HKEY hkey,const char * szBlobName,HBLOB * phBlob) DWORD __cdecl <netmon.h>
RegOpenCurrentUser(REGSAM samDesired,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenKey(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyEx(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyTransacted(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult,HANDLE hTransaction,PVOID pExtendedParameter)WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyTransactedA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult,HANDLE hTransaction,PVOID pExtendedParameter)WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyTransactedW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult,HANDLE hTransaction,PVOID pExtendedParameter)WINADVAPI LONG WINAPI <winreg.h>
RegOpenKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOpenUserClassesRoot(HANDLE hToken,DWORD dwOptions,REGSAM samDesired,PHKEY phkResult) WINADVAPI LONG WINAPI <winreg.h>
RegOverridePredefKey(HKEY hKey,HKEY hNewHKey) WINADVAPI LONG WINAPI <winreg.h>
RegQueryInfoKey(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime) WINADVAPI LONG WINAPI <winreg.h>
RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime) WINADVAPI LONG WINAPI <winreg.h>
RegQueryInfoKeyW(HKEY hKey,LPWSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime) WINADVAPI LONG WINAPI <winreg.h>
RegQueryMultipleValues(HKEY hKey,PVALENTA val_list,DWORD num_vals,LPSTR lpValueBuf,LPDWORD ldwTotsize) WINADVAPI LONG WINAPI <winreg.h>
RegQueryMultipleValuesA(HKEY hKey,PVALENTA val_list,DWORD num_vals,LPSTR lpValueBuf,LPDWORD ldwTotsize) WINADVAPI LONG WINAPI <winreg.h>
RegQueryMultipleValuesW(HKEY hKey,PVALENTW val_list,DWORD num_vals,LPWSTR lpValueBuf,LPDWORD ldwTotsize) WINADVAPI LONG WINAPI <winreg.h>
RegQueryReflectionKey(HKEY hBase,WINBOOL * bIsReflectionDisabled) WINADVAPI LONG WINAPI <winreg.h>
RegQueryValue(HKEY hKey,LPCSTR lpSubKey,LPSTR lpData,PLONG lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegQueryValueA(HKEY hKey,LPCSTR lpSubKey,LPSTR lpData,PLONG lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegQueryValueEx(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegQueryValueW(HKEY hKey,LPCWSTR lpSubKey,LPWSTR lpData,PLONG lpcbData) WINADVAPI LONG WINAPI <winreg.h>
RegReplaceKey(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpNewFile,LPCSTR lpOldFile) WINADVAPI LONG WINAPI <winreg.h>
RegReplaceKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpNewFile,LPCSTR lpOldFile) WINADVAPI LONG WINAPI <winreg.h>
RegReplaceKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpNewFile,LPCWSTR lpOldFile) WINADVAPI LONG WINAPI <winreg.h>
RegRestoreAll(HWND hWnd,PSTR pszTitleString,HKEY hkBckupKey) HRESULT WINAPI <advpub.h>
REGRESTOREALL(HWND hWnd,PSTR pszTitleString,HKEY hkBckupKey) typedef HRESULT<advpub.h>
RegRestoreKey(HKEY hKey,LPCSTR lpFile,DWORD dwFlags) WINADVAPI LONG WINAPI <winreg.h>
RegRestoreKeyA(HKEY hKey,LPCSTR lpFile,DWORD dwFlags) WINADVAPI LONG WINAPI <winreg.h>
RegRestoreKeyW(HKEY hKey,LPCWSTR lpFile,DWORD dwFlags) WINADVAPI LONG WINAPI <winreg.h>
RegSaveKey(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINADVAPI LONG WINAPI <winreg.h>
RegSaveKeyA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINADVAPI LONG WINAPI <winreg.h>
RegSaveKeyEx(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags) WINADVAPI LONG WINAPI <winreg.h>
RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags) WINADVAPI LONG WINAPI <winreg.h>
RegSaveKeyExW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags) WINADVAPI LONG WINAPI <winreg.h>
RegSaveKeyW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes) WINADVAPI LONG WINAPI <winreg.h>
RegSaveRestore(HWND hWnd,PCSTR pszTitleString,HKEY hkBckupKey,PCSTR pcszRootKey,PCSTR pcszSubKey,PCSTR pcszValueName,DWORD dwFlags) HRESULT WINAPI <advpub.h>
REGSAVERESTORE(HWND hWnd,PCSTR pszTitleString,HKEY hkBckupKey,PCSTR pcszRootKey,PCSTR pcszSubKey,PCSTR pcszValueName,DWORD dwFlags) typedef HRESULT<advpub.h>
RegSaveRestoreOnINF(HWND hWnd,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,HKEY hHKLMBackKey,HKEY hHKCUBackKey,DWORD dwFlags) HRESULT WINAPI <advpub.h>
REGSAVERESTOREONINF(HWND hWnd,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,HKEY hHKLMBackKey,HKEY hHKCUBackKey,DWORD dwFlags) typedef HRESULT<advpub.h>
RegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) WINADVAPI LONG WINAPI <winreg.h>
RegSetKeyValue(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpValueName,DWORD dwType,LPCVOID lpData,DWORD cbData)WINADVAPI LONG WINAPI <winreg.h>
RegSetKeyValueA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpValueName,DWORD dwType,LPCVOID lpData,DWORD cbData)WINADVAPI LONG WINAPI <winreg.h>
RegSetKeyValueW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpValueName,DWORD dwType,LPCVOID lpData,DWORD cbData)WINADVAPI LONG WINAPI <winreg.h>
RegSetValue(HKEY hKey,LPCSTR lpSubKey,DWORD dwType,LPCSTR lpData,DWORD cbData) WINADVAPI LONG WINAPI <winreg.h>
RegSetValueA(HKEY hKey,LPCSTR lpSubKey,DWORD dwType,LPCSTR lpData,DWORD cbData) WINADVAPI LONG WINAPI <winreg.h>
RegSetValueEx(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,CONST BYTE * lpData,DWORD cbData) WINADVAPI LONG WINAPI <winreg.h>
RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,CONST BYTE * lpData,DWORD cbData) WINADVAPI LONG WINAPI <winreg.h>
RegSetValueExW(HKEY hKey,LPCWSTR lpValueName,DWORD Reserved,DWORD dwType,CONST BYTE * lpData,DWORD cbData) WINADVAPI LONG WINAPI <winreg.h>
RegSetValueW(HKEY hKey,LPCWSTR lpSubKey,DWORD dwType,LPCWSTR lpData,DWORD cbData) WINADVAPI LONG WINAPI <winreg.h>
RegUnLoadKey(HKEY hKey,LPCSTR lpSubKey) WINADVAPI LONG WINAPI <winreg.h>
RegUnLoadKeyA(HKEY hKey,LPCSTR lpSubKey) WINADVAPI LONG WINAPI <winreg.h>
RegUnLoadKeyW(HKEY hKey,LPCWSTR lpSubKey) WINADVAPI LONG WINAPI <winreg.h>
ReinterpretBaseType(const D2D1_MATRIX_3X2_F * pMatrix)static inline const Matrix3x2F<d2d1helper.h>
ReinterpretBaseType(D2D1_MATRIX_3X2_F * pMatrix)static inline Matrix3x2F<d2d1helper.h>
ReInviteWithSessionDescription(BSTR bstrContentType,BSTR bstrSessionDescription,LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
Reject(void)virtual HRESULT WINAPI <rtccore.h>
rel_operator() int <sql_1.h>
Release()virtual ULONG STDMETHODCALLTYPE <unknwnbase.h>
Release(void)virtual ULONG STDMETHODCALLTYPE <unknwnbase.h>
RELEASE_SPINLOCK(rpLock)<kxia64.h>
ReleaseAccessor(HACCESSOR hAccessor,DBREFCOUNT * pcRefCount)virtual HRESULT WINAPI <oledb.h>
ReleaseActCtx(HANDLE hActCtx) WINBASEAPI VOID WINAPI <winbase.h>
ReleaseAddress(IMcastLeaseInfo * pReleaseRequest)virtual HRESULT WINAPI <mdhcp.h>
ReleaseAll(void)virtual HRESULT WINAPI <agtsvr.h>
ReleaseAndGetAddressOf()       InterfaceType<client.h>
ReleaseBindInfo(BINDINFO * pbindinfo)STDAPI_<urlmon.h>
ReleaseCapture(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
ReleaseChapter(HCHAPTER hChapter)virtual HRESULT WINAPI <oledbdep.h>
ReleaseChapter(HCHAPTER hChapter,DBREFCOUNT * pcRefCount)virtual HRESULT WINAPI <oledbdep.h>
ReleaseContext(HWND hWnd,HIMC hIMC)virtual HRESULT WINAPI <mshtmlc.h>
ReleaseContext(PFIO_CONTEXT) FILEHC_EXPORT void WINAPI <mshtmlc.h>
ReleaseDC(HWND hWnd,HDC hDC) WINUSERAPI int WINAPI <winuser.h>
ReleaseErrors(const DWORD dwDynamicErrorID)virtual HRESULT WINAPI <oledb.h>
ReleaseFont(HFONT hFont)virtual HRESULT WINAPI <mlang.h>
ReleaseFormat(AM_MEDIA_TYPE * pMediaType)virtual HRESULT WINAPI <ipmsp.h>
ReleaseHDC(HDC hdc)	VOID <gdiplusgraphics.h>
ReleaseImmContext(__LONG32 Context)virtual HRESULT WINAPI <tom.h>
ReleaseMapping(BSTR bstrInternalLocalAddress,__LONG32 lInternalLocalPort,BSTR bstrExternalLocalAddress,__LONG32 lExternalLocalAddress)virtual HRESULT WINAPI <rtccore.h>
ReleaseMarshalData(PVOID pBuffer,ULONG cbBuffer,ULONG ibFirstRelease,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT * pcontext)virtual HRESULT WINAPI <callobj.h>
ReleaseMarshalData(ULONG iMethod,PVOID pBuffer,ULONG cbBuffer,ULONG ibFirstRelease,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT * pcontext)virtual HRESULT WINAPI <callobj.h>
ReleaseMutex(HANDLE hMutex) WINBASEAPI WINBOOL WINAPI <synchapi.h>
ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HANDLE mut) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
ReleaseNameCache(PNAME_CACHE_CONTEXT pNameCache) FILEHC_EXPORT __LONG32 WINAPI <filehc.h>
ReleaseNtmsCleanerSlot(HANDLE hSession,LPNTMS_GUID lpLibrary) DWORD WINAPI <ntmsapi.h>
ReleaseOne(void * pnNotify)virtual HRESULT WINAPI <agtsvr.h>
ReleaseQueryResults(void)virtual HRESULT WINAPI <gpmgmt.h>
ReleaseResourceManager(DWORD dwRMCookie)virtual HRESULT WINAPI <oletx2xa.h>
ReleaseRMCookie(DWORD i_dwRMCookie,WINBOOL i_fNormal)virtual void WINAPI <oletx2xa.h>
ReleaseRows(DBCOUNTITEM cRows,const HROW rghRows[],DBROWOPTIONS rgRowOptions[],DBREFCOUNT rgRefCounts[],DBROWSTATUS rgRowStatus[])virtual HRESULT WINAPI <oledb.h>
ReleaseSchemaLock(HANDLE hLockHandle)virtual HRESULT WINAPI <sqloledb.h>
ReleaseSemaphore(HANDLE hSemaphore,LONG lReleaseCount,LPLONG lpPreviousCount) WINBASEAPI WINBOOL WINAPI <synchapi.h>
ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HANDLE sem,DWORD crel) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
ReleaseShellView(void)virtual HRESULT WINAPI <shdeprecated.h>
ReleaseSID(PSID pSID)virtual HRESULT WINAPI <comsvcs.h>
ReleaseSink() HRESULT <mspstrm.h>
ReleaseSRWLockExclusive(PSRWLOCK SRWLock) VOID WINAPI <synchapi.h>
ReleaseSRWLockShared(PSRWLOCK SRWLock) VOID WINAPI <synchapi.h>
ReleaseStgMedium(LPSTGMEDIUM)WINOLEAPI_<ole2.h>
ReleaseUserUserInfo(void)virtual HRESULT WINAPI <tapi3if.h>
RelinquishInterface(REFIID riid)virtual HRESULT WINAPI <iads.h>
Reload(void)virtual HRESULT WINAPI <sdoias.h>
REMIND(str)<ksdebug.h>
RemoteNavigate(ULONG cLength,ULONG * pulData)virtual HRESULT WINAPI <htiface.h>
Remove(__LONG32 dwID)virtual HRESULT WINAPI <tapi3if.h>
Remove(__LONG32 Index)virtual HRESULT WINAPI <tapi3if.h>
Remove(__LONG32 lIndex)virtual HRESULT WINAPI <tapi3if.h>
Remove(BSTR bstrItemToBeRemoved)virtual HRESULT WINAPI <tapi3if.h>
Remove(BSTR Name)virtual HRESULT WINAPI <tapi3if.h>
Remove(BSTR objectID)virtual HRESULT WINAPI <tapi3if.h>
Remove(BSTR progID,BSTR queryCriteria,int * errorIndex)virtual HRESULT WINAPI <tapi3if.h>
Remove(IDispatch * pContact)virtual HRESULT WINAPI <tapi3if.h>
Remove(IDispatch * pItem)virtual HRESULT WINAPI <tapi3if.h>
Remove(IGPMPermission * pPerm)virtual HRESULT WINAPI <tapi3if.h>
Remove(IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish)virtual HRESULT WINAPI <tapi3if.h>
Remove(PSNAPIN SnapIn)virtual HRESULT WINAPI <tapi3if.h>
Remove(T & t) WINBOOL <tapi3if.h>
Remove(VARIANT VarKey)virtual HRESULT WINAPI <tapi3if.h>
Remove(VARIANT vUser)virtual HRESULT WINAPI <tapi3if.h>
REMOVE_ADAPTER_HANDLER(IN NDIS_HANDLE MacAdapterContext)typedef VOID<ndis.h>
RemoveAce(IDispatch * pAccessControlEntry)virtual HRESULT WINAPI <iads.h>
RemoveAll() void <sdoias.h>
RemoveAll(void)virtual HRESULT WINAPI <sdoias.h>
RemoveAllKeys(ULONG uFlags)virtual HRESULT WINAPI <wmiutils.h>
RemoveAllNamespaces(void)virtual HRESULT WINAPI <wmiutils.h>
RemoveAllScopes(void)virtual HRESULT WINAPI <wmiutils.h>
RemoveApplication(BSTR bstrAppName)virtual HRESULT WINAPI <iiisext.h>
RemoveAt(DXLISTPOS position)void CDXList<msputils.h>
RemoveAt(int nIndex) WINBOOL <msputils.h>
RemoveAt(int nIndex,int nCount)void CDXArray<msputils.h>
RemoveAt(int nIndex,int nCount=1) void <msputils.h>
RemoveBuddy(IRTCBuddy * pBuddy)virtual HRESULT WINAPI <rtccore.h>
RemoveChain(IBaseFilter * pStartFilter,IBaseFilter * pEndFilter)virtual HRESULT WINAPI <strmif.h>
RemoveClipboardFormatListener(HWND hwnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
RemoveClusterResourceDependency(HRESOURCE hResource,HRESOURCE hDependsOn) DWORD WINAPI <clusapi.h>
RemoveClusterResourceNode(HRESOURCE hResource,HNODE hNode) DWORD WINAPI <clusapi.h>
RemoveCredentials(BG_AUTH_TARGET Target,BG_AUTH_SCHEME Scheme)virtual HRESULT WINAPI <bits1_5.h>
RemoveDefaultProperty(BSTR bstrPropertyName)virtual HRESULT WINAPI <eventsys.h>
RemoveDependency(BSTR bstrApplication,BSTR bstrGroupID)virtual HRESULT WINAPI <iiisext.h>
RemoveDesigner(IHTMLEditDesigner * pIDesigner)virtual HRESULT WINAPI <mshtmlc.h>
RemoveDirectory(LPCSTR lpPathName) WINBASEAPI WINBOOL WINAPI <fileapi.h>
RemoveDirectoryA(LPCSTR lpPathName) WINBASEAPI WINBOOL WINAPI <fileapi.h>
RemoveDirectoryTransacted(LPCSTR lpPathName,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
RemoveDirectoryTransactedA(LPCSTR lpPathName,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
RemoveDirectoryTransactedW(LPCWSTR lpPathName,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
RemoveDirectoryW(LPCWSTR lpPathName) WINBASEAPI WINBOOL WINAPI <fileapi.h>
RemoveDllDirectory(DLL_DIRECTORY_COOKIE Cookie) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
RemoveElement(IHTMLElement * pElementRemove)virtual HRESULT WINAPI <mshtmlc.h>
RemoveEntryList(Entry)<msputils.h>
RemoveEntryList(IN PLIST_ENTRY Entry)<msputils.h>
RemoveFilterEx(IBaseFilter * pFilter,DWORD Flags)virtual HRESULT WINAPI <strmif.h>
RemoveFilterFromCache(IBaseFilter * pFilter)virtual HRESULT WINAPI <strmif.h>
RemoveFiltersFromGraph() virtual HRESULT <mspterm.h>
RemoveFontMemResourceEx(HANDLE h) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFontResource(LPCSTR lpFileName) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFontResourceA(LPCSTR lpFileName) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFontResourceEx(LPCSTR name,DWORD fl,PVOID pdv) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFontResourceExA(LPCSTR name,DWORD fl,PVOID pdv) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFontResourceExW(LPCWSTR name,DWORD fl,PVOID pdv) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFontResourceW(LPCWSTR lpFileName) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RemoveFromAvailable(VARIANT varContact)virtual HRESULT WINAPI <msimcntl.h>
RemoveFromBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName) DWORD __cdecl <netmon.h>
RemoveFromConference(void)virtual HRESULT WINAPI <tapi3if.h>
RemoveGroup(IRTCBuddyGroup * pGroup)virtual HRESULT WINAPI <rtccore.h>
RemoveHead()TYPE CDXList<dxtmpl.h>
RemoveHeadList(IN OUT PLIST_ENTRY ListHead)<msputils.h>
RemoveHeadList(ListHead)<msputils.h>
RemoveIScsiConnection(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiPersistentTarget(PCHAR InitiatorInstance,ULONG InitiatorPortNumber,PCHAR TargetName,PISCSI_TARGET_PORTALA Portal)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiPersistentTargetA(PCHAR InitiatorInstance,ULONG InitiatorPortNumber,PCHAR TargetName,PISCSI_TARGET_PORTALA Portal)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiPersistentTargetW(PWCHAR InitiatorInstance,ULONG InitiatorPortNumber,PWCHAR TargetName,PISCSI_TARGET_PORTALW Portal)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiSendTargetPortal(PCHAR InitiatorInstance,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA Portal)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiSendTargetPortalA(PCHAR InitiatorInstance,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALA Portal)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiSendTargetPortalW(PWCHAR InitiatorInstance,ULONG InitiatorPortNumber,PISCSI_TARGET_PORTALW Portal)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiStaticTarget(PCHAR TargetName)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiStaticTargetA(PCHAR TargetName)HRESULT WINAPI <iscsidsc.h>
RemoveIScsiStaticTargetW(PWCHAR TargetName)HRESULT WINAPI <iscsidsc.h>
RemoveISNSServer(PCHAR Address)HRESULT WINAPI <iscsidsc.h>
RemoveISNSServerA(PCHAR Address)HRESULT WINAPI <iscsidsc.h>
RemoveISNSServerW(PWCHAR Address)HRESULT WINAPI <iscsidsc.h>
RemoveItem(VARIANT varIndex)virtual HRESULT WINAPI <msclus.h>
RemoveKey(ARG_KEY key)WINBOOL CDXMap<wmiutils.h>
RemoveKey(LPCWSTR wszName,ULONG uFlags)virtual HRESULT WINAPI <wmiutils.h>
RemoveLeafElement(void)virtual HRESULT WINAPI <iads.h>
RemoveList(BSTR bstrListName)virtual HRESULT WINAPI <msimcsdk.h>
RemoveLogContainer(HANDLE hLog,LPWSTR pwszContainerPath,WINBOOL fForce,LPVOID pReserved)WINBOOL WINAPI <clfsw32.h>
RemoveLogContainerSet(HANDLE hLog,USHORT cContainers,LPWSTR * rgwszContainerPath,WINBOOL fForce,LPVOID pReserved)WINBOOL WINAPI <clfsw32.h>
RemoveLogPolicy(HANDLE hLog,CLFS_MANAGEMENT_POLICY_TYPE ePolicyType)WINBOOL WINAPI <clfsmgmtw32.h>
RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
RemoveNamespaceAt(ULONG uIndex)virtual HRESULT WINAPI <wmiutils.h>
RemoveNodeFromList(BSTR bstrNodeNameIn)virtual HRESULT WINAPI <cluscfgwizard.h>
RemovePage(HPROPSHEETPAGE hPage)virtual HRESULT WINAPI <mmc.h>
RemoveParticipant(IRTCParticipant * pParticipant)virtual HRESULT WINAPI <rtccore.h>
RemovePenDataStrokes(HPENDATA,UINT,UINT) int WINAPI <penwin.h>
RemovePersistentIScsiDevice(PCHAR VolumePath)HRESULT WINAPI <iscsidsc.h>
RemovePersistentIScsiDeviceA(PCHAR VolumePath)HRESULT WINAPI <iscsidsc.h>
RemovePersistentIScsiDeviceW(PWCHAR VolumePath)HRESULT WINAPI <iscsidsc.h>
RemovePortMapping(INetSharingPortMapping * pMapping)virtual HRESULT WINAPI <netcon.h>
REMOVEPREPROCESSINFO(LPMESSAGE lpMessage) typedef HRESULT<mapispi.h>
RemoveProp(HWND hWnd,LPCSTR lpString) WINUSERAPI HANDLE WINAPI <winuser.h>
RemovePropA(HWND hWnd,LPCSTR lpString) WINUSERAPI HANDLE WINAPI <winuser.h>
RemoveProperty(BSTR name)virtual HRESULT WINAPI <comsvcs.h>
RemovePropertyItem(PROPID propId)__inline__ Status Image::<gdiplusimpl.h>
RemovePropW(HWND hWnd,LPCWSTR lpString) WINUSERAPI HANDLE WINAPI <winuser.h>
RemoveProtocol(LPCOLESTR pszMachineName,DWORD dwTransportId,DWORD dwProtocolId,HWND hWnd,DWORD dwFlags,IUnknown * pRouter,ULONG_PTR uReserved1)virtual HRESULT WINAPI <rrascfg.h>
RemovePublisherProperty(BSTR bstrPropertyName)virtual HRESULT WINAPI <eventsys.h>
RemoveRadiusServer(PCHAR Address)HRESULT WINAPI <iscsidsc.h>
RemoveRadiusServerA(PCHAR Address)HRESULT WINAPI <iscsidsc.h>
RemoveRadiusServerW(PWCHAR Address)HRESULT WINAPI <iscsidsc.h>
RemoveResourceNode(ISClusNode * pNode)virtual HRESULT WINAPI <msclus.h>
RemoveS(BSTR progID,BSTR queryCriteria)virtual HRESULT WINAPI <eventsys.h>
RemoveScope(ULONG uIndex)virtual HRESULT WINAPI <wmiutils.h>
RemoveSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack) WINBASEAPI WINBOOL WINAPI <winbase.h>
RemoveSegment(IHighlightSegment * pISegment)virtual HRESULT WINAPI <mshtmlc.h>
RemoveSegment(ISegment * pISegment)virtual HRESULT WINAPI <mshtmlc.h>
RemoveStream(__LONG32 lMediaType,LONG_PTR lCookie)virtual HRESULT WINAPI <tapi3if.h>
RemoveStream(ITStream * pStream)virtual HRESULT WINAPI <tapi3if.h>
RemoveSubscriberProperty(BSTR bstrPropertyName)virtual HRESULT WINAPI <eventsys.h>
RemoveSubStream(ITSubStream * pSubStream)virtual HRESULT WINAPI <tapi3if.h>
RemoveTail()TYPE CDXList<dxtmpl.h>
RemoveTailList(IN OUT PLIST_ENTRY ListHead)<msputils.h>
RemoveTailList(ListHead)<msputils.h>
RemoveTextFrag(__LONG32 iFrag)virtual HRESULT WINAPI <mshtmlc.h>
RemoveTraceCallback(LPCGUID pGuid) EXTERN_C ULONG WMIAPI <evntrace.h>
RemoveTrackTerminal(ITTerminal * pTrackTerminalToRemove)virtual HRESULT WINAPI <tapi3if.h>
RemoveTrustee(BSTR bstrTrustee)virtual HRESULT WINAPI <gpmgmt.h>
RemoveUsersFromEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST pHashes) WINADVAPI DWORD WINAPI <winefs.h>
RemoveVectoredContinueHandler(PVOID Handle) WINBASEAPI ULONG WINAPI <errhandlingapi.h>
RemoveVectoredExceptionHandler(PVOID Handle) WINBASEAPI ULONG WINAPI <errhandlingapi.h>
RemoveWatcher(IRTCWatcher * pWatcher)virtual HRESULT WINAPI <rtccore.h>
RemoveWindowSubclass(HWND hWnd,SUBCLASSPROC pfnSubclass,UINT_PTR uIdSubclass) WINBOOL WINAPI <commctrl.h>
Rename(LPCWSTR pszwNewName)virtual HRESULT WINAPI <netcon.h>
RenameColumn(DBID * pTableId,DBID * pOldColumnId,DBID * pNewColumnId)virtual HRESULT WINAPI <oledbdep.h>
RenameKey(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,LPCWSTR pszMDNewName)virtual HRESULT WINAPI <iadmw.h>
RenameResultItem(HRESULTITEM itemID)virtual HRESULT WINAPI <mmc.h>
RenameScopeItem(HSCOPEITEM hScopeItem)virtual HRESULT WINAPI <mmc.h>
RenameScopeNode(BSTR NewName,VARIANT ScopeNode)virtual HRESULT WINAPI <mmcobj.h>
RenameSelectedItem(BSTR NewName)virtual HRESULT WINAPI <mmcobj.h>
RenameTable(DBID * pOldTableId,DBID * pOldIndexId,DBID * pNewTableId,DBID * pNewIndexId)virtual HRESULT WINAPI <oledbdep.h>
RenameTransactionManager(LPWSTR LogFileName,LPGUID ExistingTransactionManagerGuid) WINBOOL WINAPI <ktmw32.h>
Render(void)virtual HRESULT WINAPI <control.h>
RenderDvdVideoVolume(LPCWSTR lpcwszPathName,DWORD dwFlags,AM_DVD_RENDERSTATUS * pStatus)virtual HRESULT WINAPI <strmif.h>
RenderTargetProperties(),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT),FLOAT dpiX=0.0,FLOAT dpiY=0.0,D2D1_RENDER_TARGET_USAGE usage=D2D1_RENDER_TARGET_USAGE_NONE,D2D1_FEATURE_LEVEL minLevel=D2D1_FEATURE_LEVEL_DEFAULT)D2D1FORCEINLINE D2D1_RENDER_TARGET_PROPERTIES <d2d1helper.h>
RenewAddress(__LONG32 lReserved,IMcastLeaseInfo * pRenewRequest,IMcastLeaseInfo ** ppRenewResponse)virtual HRESULT WINAPI <mdhcp.h>
ReOpenFile(HANDLE hOriginalFile,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwFlagsAndAttributes) WINBASEAPI HANDLE WINAPI <winbase.h>
ReOrderCapabilities(DWORD * pdwIndices,WINBOOL * pfEnabled,WINBOOL * pfPublicize,DWORD dwNumIndices)virtual HRESULT WINAPI <ipmsp.h>
RepaintVideo(HWND hwnd,HDC hdc)virtual HRESULT WINAPI <strmif.h>
ReplaceFile(LPCSTR lpReplacedFileName,LPCSTR lpReplacementFileName,LPCSTR lpBackupFileName,DWORD dwReplaceFlags,LPVOID lpExclude,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <winbase.h>
ReplaceFileA(LPCSTR lpReplacedFileName,LPCSTR lpReplacementFileName,LPCSTR lpBackupFileName,DWORD dwReplaceFlags,LPVOID lpExclude,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <winbase.h>
ReplaceFileW(LPCWSTR lpReplacedFileName,LPCWSTR lpReplacementFileName,LPCWSTR lpBackupFileName,DWORD dwReplaceFlags,LPVOID lpExclude,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <winbase.h>
ReplacePartitionUnit(PWSTR TargetPartition,PWSTR SparePartition,ULONG Flags) WINBASEAPI WINBOOL WINAPI <winbase.h>
ReplaceRemotePrefix(LPCWSTR OldPrefix,LPCWSTR NewPrefix)virtual HRESULT WINAPI <bits2_0.h>
ReplaceText(LPFINDREPLACEA) WINCOMMDLGAPI HWND WINAPI <commdlg.h>
ReplaceTextA(LPFINDREPLACEA) WINCOMMDLGAPI HWND WINAPI <commdlg.h>
ReplaceTextW(LPFINDREPLACEW) WINCOMMDLGAPI HWND WINAPI <commdlg.h>
ReplayChapter(DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
Reply(IMessage ** ppMsg)virtual HRESULT WINAPI <cdosys.h>
ReplyAll(IMessage ** ppMsg)virtual HRESULT WINAPI <cdosys.h>
ReplyMessage(LRESULT lResult) WINUSERAPI WINBOOL WINAPI <winuser.h>
ReplyPrinterChangeNotification(HANDLE hNotify,DWORD fdwFlags,PDWORD pdwResult,PVOID pPrinterNotifyInfo)WINBOOL WINAPI <winsplp.h>
ReplyPrinterChangeNotificationEx(HANDLE hNotify,DWORD dwColor,DWORD fdwFlags,PDWORD pdwResult,PVOID pPrinterNotifyInfo)WINBOOL WINAPI <winsplp.h>
ReportActiveIScsiTargetMappings(PULONG BufferSize,PULONG MappingCount,PISCSI_TARGET_MAPPINGA Mappings)HRESULT WINAPI <iscsidsc.h>
ReportActiveIScsiTargetMappingsA(PULONG BufferSize,PULONG MappingCount,PISCSI_TARGET_MAPPINGA Mappings)HRESULT WINAPI <iscsidsc.h>
ReportActiveIScsiTargetMappingsW(PULONG BufferSize,PULONG MappingCount,PISCSI_TARGET_MAPPINGW Mappings)HRESULT WINAPI <iscsidsc.h>
ReportEvent(HANDLE hEventLog,WORD wType,WORD wCategory,DWORD dwEventID,PSID lpUserSid,WORD wNumStrings,DWORD dwDataSize,LPCSTR * lpStrings,LPVOID lpRawData) WINADVAPI WINBOOL WINAPI <winbase.h>
ReportEventA(HANDLE hEventLog,WORD wType,WORD wCategory,DWORD dwEventID,PSID lpUserSid,WORD wNumStrings,DWORD dwDataSize,LPCSTR * lpStrings,LPVOID lpRawData) WINADVAPI WINBOOL WINAPI <winbase.h>
ReportEventW(HANDLE hEventLog,WORD wType,WORD wCategory,DWORD dwEventID,PSID lpUserSid,WORD wNumStrings,DWORD dwDataSize,LPCWSTR * lpStrings,LPVOID lpRawData) WINADVAPI WINBOOL WINAPI <winbase.h>
ReportFault(LPEXCEPTION_POINTERS pep,DWORD dwOpt)EFaultRepRetVal WINAPI <errorrep.h>
ReportIScsiInitiatorListA(ULONG * BufferSize,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportIScsiInitiatorListW(ULONG * BufferSize,PWCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportIScsiPersistentLogins(ULONG * Count,PPERSISTENT_ISCSI_LOGIN_INFOA PersistentLoginInfo,PULONG BufferSizeInBytes)HRESULT WINAPI <iscsidsc.h>
ReportIScsiPersistentLoginsA(ULONG * Count,PPERSISTENT_ISCSI_LOGIN_INFOA PersistentLoginInfo,PULONG BufferSizeInBytes)HRESULT WINAPI <iscsidsc.h>
ReportIScsiPersistentLoginsW(ULONG * Count,PPERSISTENT_ISCSI_LOGIN_INFOW PersistentLoginInfo,PULONG BufferSizeInBytes)HRESULT WINAPI <iscsidsc.h>
ReportIScsiSendTargetPortals(PULONG PortalCount,PISCSI_TARGET_PORTAL_INFOA PortalInfo)HRESULT WINAPI <iscsidsc.h>
ReportIScsiSendTargetPortalsA(PULONG PortalCount,PISCSI_TARGET_PORTAL_INFOA PortalInfo)HRESULT WINAPI <iscsidsc.h>
ReportIScsiSendTargetPortalsEx(PULONG PortalCount,PULONG PortalInfoSize,PISCSI_TARGET_PORTAL_INFO_EXA PortalInfo)HRESULT WINAPI <iscsidsc.h>
ReportIScsiSendTargetPortalsExA(PULONG PortalCount,PULONG PortalInfoSize,PISCSI_TARGET_PORTAL_INFO_EXA PortalInfo)HRESULT WINAPI <iscsidsc.h>
ReportIScsiSendTargetPortalsExW(PULONG PortalCount,PULONG PortalInfoSize,PISCSI_TARGET_PORTAL_INFO_EXW PortalInfo)HRESULT WINAPI <iscsidsc.h>
ReportIScsiSendTargetPortalsW(PULONG PortalCount,PISCSI_TARGET_PORTAL_INFOA PortalInfo)HRESULT WINAPI <iscsidsc.h>
ReportIScsiTargetPortals(PCHAR InitiatorName,PCHAR TargetName,PUSHORT TargetPortalTag,PULONG ElementCount,PISCSI_TARGET_PORTALA Portals)HRESULT WINAPI <iscsidsc.h>
ReportIScsiTargetPortalsA(PCHAR InitiatorName,PCHAR TargetName,PUSHORT TargetPortalTag,PULONG ElementCount,PISCSI_TARGET_PORTALA Portals)HRESULT WINAPI <iscsidsc.h>
ReportIScsiTargetPortalsW(PWCHAR InitiatorName,PWCHAR TargetName,PUSHORT TargetPortalTag,PULONG ElementCount,PISCSI_TARGET_PORTALW Portals)HRESULT WINAPI <iscsidsc.h>
ReportIScsiTargets(BOOLEAN ForceUpdate,PULONG BufferSize,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportIScsiTargetsA(BOOLEAN ForceUpdate,PULONG BufferSize,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportIScsiTargetsW(BOOLEAN ForceUpdate,PULONG BufferSize,PWCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportISNSServerList(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportISNSServerListA(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportISNSServerListW(PULONG BufferSizeInChar,PWCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportJobProcessingProgress(HANDLE printerHandle,ULONG jobId,EPrintXPSJobOperation jobOperation,EPrintXPSJobProgress jobProgress)HRESULT <winspool.h>
ReportPersistentiScsiDevices(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportPersistentiScsiDevicesA(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportPersistentiScsiDevicesW(PULONG BufferSizeInChar,PWCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportRadiusServerList(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportRadiusServerListA(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
ReportRadiusServerListW(PULONG BufferSizeInChar,PCHAR Buffer)HRESULT WINAPI <iscsidsc.h>
Requery(DBPARAMS * pParams,ULONG * pulErrorParam,HCHAPTER * phReserved)virtual HRESULT WINAPI <oledbdep.h>
Request(DWORD dwFlags,const wchar_t * pwszAuthority,DWORD * pdwRequestId,DWORD * pdwDisposition,const wchar_t * pwszAttributes,const CERTTRANSBLOB * pctbRequest,CERTTRANSBLOB * pctbCertChain,CERTTRANSBLOB * pctbEncodedCert,CERTTRANSBLOB * pctbDispositionMessage)virtual HRESULT WINAPI <winusb.h>
Request2(const wchar_t * pwszAuthority,DWORD dwFlags,const wchar_t * pwszSerialNumber,DWORD * pdwRequestId,DWORD * pdwDisposition,const wchar_t * pwszAttributes,const CERTTRANSBLOB * pctbRequest,CERTTRANSBLOB * pctbFullResponse,CERTTRANSBLOB * pctbEncodedCert,CERTTRANSBLOB * pctbDispositionMessage)virtual HRESULT WINAPI <certreqd.h>
REQUEST_APC_INT(pReq)<kxia64.h>
REQUEST_DISPATCH_INT(pReq)<kxia64.h>
RequestAddress(IMcastScope * pScope,DATE LeaseStartTime,DATE LeaseStopTime,__LONG32 NumAddresses,IMcastLeaseInfo ** ppLeaseResponse)virtual HRESULT WINAPI <mdhcp.h>
RequestCommit(void)virtual HRESULT WINAPI <txdtc.h>
RequestComplete(__LONG32 dwRequestID,__LONG32 hrStatus)virtual HRESULT WINAPI <agtsvr.h>
RequestDestroyResource(const RESID __MIDL_0027)virtual HRESULT WINAPI <comsvcs.h>
RequestDeviceWakeup(HANDLE hDevice) WINBASEAPI WINBOOL WINAPI <winbase.h>
RequestDiagFields(ULONG cDiagFields,KAGREQDIAG rgDiagFields[])virtual HRESULT WINAPI <msdasql.h>
RequestNewResourceManager(char * pszDSN,char * pszClientDllName,DWORD * pdwRMCookie)virtual HRESULT WINAPI <oletx2xa.h>
RequestStart(__LONG32 dwRequestID)virtual HRESULT WINAPI <agtsvr.h>
RequestTerminal(BSTR bstrTerminalClassGUID,__LONG32 lMediaType,TERMINAL_DIRECTION Direction,ITTerminal ** ppTerminal)virtual HRESULT WINAPI <tapi3if.h>
RequestWakeupLatency(LATENCY_TIME latency) WINBASEAPI WINBOOL WINAPI <winbase.h>
Reserve(DWORD dwFlags,PVOID pvReserved)virtual HRESULT WINAPI <strmif.h>
ReserveAndAppendLog(PVOID pvMarshal,PCLFS_WRITE_ENTRY rgWriteEntries,ULONG cWriteEntries,PCLFS_LSN plsnUndoNext,PCLFS_LSN plsnPrevious,ULONG cReserveRecords,LONGLONG rgcbReservation[],ULONG fFlags,PCLFS_LSN plsn,LPOVERLAPPED pOverlapped)WINBOOL WINAPI <clfsw32.h>
ReserveAndAppendLogAligned(PVOID pvMarshal,PCLFS_WRITE_ENTRY rgWriteEntries,ULONG cWriteEntries,ULONG cbEntryAlignment,PCLFS_LSN plsnUndoNext,PCLFS_LSN plsnPrevious,ULONG cReserveRecords,LONGLONG rgcbReservation[],ULONG fFlags,PCLFS_LSN plsn,LPOVERLAPPED overlapped)WINBOOL WINAPI <clfsw32.h>
Reserved1(ULONG))))))))))))))))) UCHAR <winternl.h>
Reserved1(void)virtual void WINAPI <winternl.h>
Reserved10(void)virtual void WINAPI <ntddndis.h>
Reserved11(void)virtual void WINAPI <ntddndis.h>
Reserved12(void)virtual void WINAPI <ntddndis.h>
Reserved13(void)virtual void WINAPI <ntddndis.h>
Reserved14(void)virtual void WINAPI <ntddndis.h>
Reserved15(void)virtual void WINAPI <ntddndis.h>
Reserved16(void)virtual void WINAPI <ntddndis.h>
Reserved17(void)virtual void WINAPI <ntddndis.h>
Reserved2(ULONG))))))))))))))))) UCHAR <winternl.h>
Reserved2(void)virtual void WINAPI <winternl.h>
Reserved3(ULONG)))))))))))))))))UCHAR <winternl.h>
Reserved3(void)virtual void WINAPI <winternl.h>
Reserved4(void)virtual void WINAPI <winternl.h>
Reserved5(void)virtual void WINAPI <winternl.h>
Reserved6(void)virtual void WINAPI <winternl.h>
Reserved7(void)virtual void WINAPI <winternl.h>
Reserved8(void)virtual void WINAPI <usb.h>
Reserved9(void)virtual void WINAPI <ntddcdrm.h>
ReserveNtmsCleanerSlot(HANDLE hSession,LPNTMS_GUID lpLibrary,LPNTMS_GUID lpSlot) DWORD WINAPI <ntmsapi.h>
Reset()       unsigned long <xenroll.h>
Reset(__LONG32 Value)virtual HRESULT WINAPI <xenroll.h>
Reset(ColorAdjustType type=ColorAdjustTypeDefault)	Status <xenroll.h>
Reset(LONG Count)virtual HRESULT WINAPI <xenroll.h>
Reset(LONG Count,LONG StringType)virtual HRESULT WINAPI <xenroll.h>
Reset(LONG DistPointCount)virtual HRESULT WINAPI <xenroll.h>
Reset(LONG Index,LONG * pCount)virtual HRESULT WINAPI <xenroll.h>
Reset(LONG NameCount)virtual HRESULT WINAPI <xenroll.h>
Reset(void)virtual HRESULT WINAPI <xenroll.h>
ResetAlcBitAnsi(lprc,i)<penwin.h>
ResetClip()	Status <gdiplusgraphics.h>
ResetCompressor(COMPRESSOR_HANDLE CompressorHandle) WINBOOL WINAPI <compressapi.h>
ResetDC(HDC hdc,CONST DEVMODEA * lpdm) WINGDIAPI HDC WINAPI <wingdi.h>
ResetDCA(HDC hdc,CONST DEVMODEA * lpdm) WINGDIAPI HDC WINAPI <wingdi.h>
ResetDCW(HDC hdc,CONST DEVMODEW * lpdm) WINGDIAPI HDC WINAPI <wingdi.h>
ResetDecimationImageSize(void)virtual HRESULT WINAPI <strmif.h>
ResetDecompressor(DECOMPRESSOR_HANDLE DecompressorHandle) WINBOOL WINAPI <compressapi.h>
ResetEvent(HANDLE hEvent) WINBASEAPI WINBOOL WINAPI <synchapi.h>
ResetFontMapping(void)virtual HRESULT WINAPI <mlang.h>
ResetIdleTimer(DWORD dwFlags)virtual HRESULT WINAPI <mmc.h>
ResetPrinter(HANDLE hPrinter,LPPRINTER_DEFAULTSA pDefault) WINBOOL WINAPI <winspool.h>
ResetPrinterA(HANDLE hPrinter,LPPRINTER_DEFAULTSA pDefault) WINBOOL WINAPI <winspool.h>
ResetPrinterW(HANDLE hPrinter,LPPRINTER_DEFAULTSW pDefault) WINBOOL WINAPI <winspool.h>
ResetProperty(LONG Id)virtual HRESULT WINAPI <sdoias.h>
ResetPropertyInstanceLength(LPPROPERTYINST lpProp,WORD nOrgLen,WORD nNewLen) DWORD WINAPI <netmon.h>
ResetPropertyItem(VARIANT varEntry)virtual HRESULT WINAPI <iads.h>
ResetResource(const RESID ResId)virtual HRESULT WINAPI <comsvcs.h>
ResetService(void)virtual HRESULT WINAPI <sdoias.h>
ResetTransform()	Status <gdipluspen.h>
ResetWriteWatch(LPVOID lpBaseAddress,SIZE_T dwRegionSize) WINBASEAPI UINT WINAPI <memoryapi.h>
ResizePalette(HPALETTE hpal,UINT n) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ResizePenData(HPENDATA,LPRECT) WINBOOL WINAPI <penwin.h>
ResizeVideo(WINBOOL bStretchToFitParent)virtual HRESULT WINAPI <wiavideo.h>
ResizeVirtualDisk(HANDLE VirtualDiskHandle,RESIZE_VIRTUAL_DISK_FLAG Flags,PRESIZE_VIRTUAL_DISK_PARAMETERS Parameters,LPOVERLAPPED Overlapped)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
Resolve(BSTR bstrNamespace,BSTR bstrTagName,BSTR bstrAttrs,IElementNamespace * pNamespace)virtual HRESULT WINAPI <mshtmlc.h>
ResolveIpNetEntry2(PMIB_IPNET_ROW2 Row,CONST SOCKADDR_INET * SourceAddress) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
ResolveLocaleName(LPCWSTR lpNameToResolve,LPWSTR lpLocaleName,int cchLocaleName) WINBASEAPI int WINAPI <winnls.h>
ResolveNeighbor(SOCKADDR * NetworkAddress,PVOID PhysicalAddress,PULONG PhysicalAddressLength) ULONG WINAPI <iphlpapi.h>
Resources(IADsCollection ** ppResources)virtual HRESULT WINAPI <winnt.h>
Restart(void)virtual HRESULT WINAPI <winioctl.h>
RestartDialog(HWND hwnd,PCWSTR pszPrompt,DWORD dwReturn) SHSTDAPI_<shlobj.h>
RestartDialogEx(HWND hwnd,PCWSTR pszPrompt,DWORD dwReturn,DWORD dwReasonCode) SHSTDAPI_<shlobj.h>
RestartDtcService(void)virtual HRESULT WINAPI <txcoord.h>
RestartPosition(HCHAPTER hReserved)virtual HRESULT WINAPI <oledb.h>
Restore(BSTR bstrLocation,LONG lVersion,LONG lFlags)virtual HRESULT WINAPI <sdoias.h>
Restore(GraphicsState state)	Status <sdoias.h>
Restore(LPCWSTR pszMDBackupLocation,DWORD dwMDVersion,DWORD dwMDFlags)virtual HRESULT WINAPI <sdoias.h>
Restore(void)virtual HRESULT WINAPI <sdoias.h>
RESTORE_INTERRUPTS(reg)<kxia64.h>
RestoreClusterDatabase(LPCWSTR lpszPathName,WINBOOL bForce,LPCWSTR lpszQuorumDriveLetter) DWORD WINAPI <clusapi.h>
RestoreDC(HDC hdc,int nSavedDC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RestoreDDrawSurfaces(void)virtual HRESULT WINAPI <strmif.h>
RestoreDefaultHandling(__LONG32 lEvCode)virtual HRESULT WINAPI <control.h>
RestoreGPO(IGPMBackup * pIGPMBackup,__LONG32 lDCFlags,VARIANT * pvarGPMProgress,VARIANT * pvarGPMCancel,IGPMResult ** ppIGPMResult)virtual HRESULT WINAPI <gpmgmt.h>
RestoreHistory(LPCWSTR pszMDHistoryLocation,DWORD dwMDMajorVersion,DWORD dwMDMinorVersion,DWORD dwMDFlags)virtual HRESULT WINAPI <iadmw.h>
RestoreInterface(REFIID riid)virtual HRESULT WINAPI <iads.h>
RestoreLastError(DWORD dwErrCode) WINBASEAPI VOID WINAPI <winbase.h>
RestoreMediaSense(OVERLAPPED * pOverlapped,LPDWORD lpdwEnableCount) DWORD WINAPI <iphlpapi.h>
RestoreMonitorFactoryColorDefaults(HANDLE hMonitor) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
RestoreMonitorFactoryDefaults(HANDLE hMonitor) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
RestorePerfRegistryFromFileW(LPCWSTR szFileName,LPCWSTR szLangId) DWORD <loadperf.h>
RestoreResultView(MMC_COOKIE cookie,PRESULT_VIEW_TYPE_INFO pResultViewType)virtual HRESULT WINAPI <mmc.h>
RestoreWithPasswd(LPCWSTR pszMDBackupLocation,DWORD dwMDVersion,DWORD dwMDFlags,LPCWSTR pszPasswd)virtual HRESULT WINAPI <iadmw.h>
RestoreWithPassword(BSTR bstrLocation,LONG lVersion,LONG lFlags,BSTR bstrPassword)virtual HRESULT WINAPI <iiisext.h>
ResubmitRequest(const BSTR strConfig,LONG RequestId,LONG * pDisposition)virtual HRESULT WINAPI <certadm.h>
ResultFromScode(sc)<winerror.h>
Resume(DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
Resume(void)virtual HRESULT WINAPI <strmif.h>
ResumeClusterNode(HNODE hNode) DWORD WINAPI <clusapi.h>
ResumeGroup(void)virtual HRESULT WINAPI <qmgr.h>
ResumeSuspendedDownload(HINTERNET hRequest,DWORD dwResultCode) INTERNETAPI_<wininet.h>
ResumeThread(HANDLE hThread) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
ResUtilAddUnknownProperties(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,DWORD pcbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilCreateDirectoryTree(LPCWSTR pszPath) DWORD WINAPI <resapi.h>
ResUtilDupParameterBlock(LPBYTE pOutParams,const LPBYTE pInParams,const PRESUTIL_PROPERTY_ITEM pPropertyTable) DWORD WINAPI <resapi.h>
ResUtilDupString(LPCWSTR pszInString) PWSTR WINAPI <resapi.h>
ResUtilEnumPrivateProperties(HKEY hkeyClusterKey,LPWSTR pszOutProperties,DWORD cbOutPropertiesSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilEnumProperties(const PRESUTIL_PROPERTY_ITEM pPropertyTable,LPWSTR pszOutProperties,DWORD cbOutPropertiesSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilEnumResources(HRESOURCE hSelf,LPCWSTR lpszResTypeName,LPRESOURCE_CALLBACK pResCallBack,PVOID pParameter) DWORD WINAPI <resapi.h>
ResUtilEnumResourcesEx(HCLUSTER hCluster,HRESOURCE hSelf,LPCWSTR lpszResTypeName,LPRESOURCE_CALLBACK_EX pResCallBack,PVOID pParameter) DWORD WINAPI <resapi.h>
ResUtilEnumResourcesEx2(HCLUSTER hCluster,HRESOURCE hSelf,LPCWSTR lpszResTypeName,LPRESOURCE_CALLBACK_EX pResCallBack,PVOID pParameter,DWORD dwDesiredAccess) DWORD WINAPI <resapi.h>
ResUtilExpandEnvironmentStrings(LPCWSTR pszSrc) LPWSTR WINAPI <resapi.h>
ResUtilFindBinaryProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPBYTE * pbPropertyValue,LPDWORD pcbPropertyValueSize) DWORD WINAPI <resapi.h>
ResUtilFindDependentDiskResourceDriveLetter(HCLUSTER hCluster,HRESOURCE hResource,LPWSTR pszDriveLetter,DWORD * pcchDriveLetter) DWORD WINAPI <resapi.h>
ResUtilFindDwordProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPDWORD pdwPropertyValue) DWORD WINAPI <resapi.h>
ResUtilFindExpandedSzProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue) DWORD WINAPI <resapi.h>
ResUtilFindExpandSzProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue) DWORD WINAPI <resapi.h>
ResUtilFindFileTimeProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPFILETIME pftPropertyValue) DWORD WINAPI <resapi.h>
ResUtilFindLongProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPLONG plPropertyValue) DWORD WINAPI <resapi.h>
ResUtilFindMultiSzProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue,LPDWORD pcbPropertyValueSize) DWORD WINAPI <resapi.h>
ResUtilFindSzProperty(const PVOID pPropertyList,DWORD cbPropertyListSize,LPCWSTR pszPropertyName,LPWSTR * pszPropertyValue) DWORD WINAPI <resapi.h>
ResUtilFreeEnvironment(LPVOID lpEnvironment) DWORD WINAPI <resapi.h>
ResUtilFreeParameterBlock(LPBYTE pOutParams,const LPBYTE pInParams,const PRESUTIL_PROPERTY_ITEM pPropertyTable) void WINAPI <resapi.h>
ResUtilGetAllProperties(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,DWORD cbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilGetBinaryProperty(LPBYTE * ppbOutValue,LPDWORD pcbOutValueSize,const PCLUSPROP_BINARY pValueStruct,const LPBYTE pbOldValue,DWORD cbOldValueSize,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilGetBinaryValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPBYTE * ppbOutValue,LPDWORD pcbOutValueSize) DWORD WINAPI <resapi.h>
ResUtilGetClusterRoleState(HCLUSTER hCluster,CLUSTER_ROLE eClusterRole) CLUSTER_ROLE_STATE WINAPI <resapi.h>
ResUtilGetCoreClusterResources(HCLUSTER hCluster,HRESOURCE * phClusterNameResource,HRESOURCE * phClusterIPAddressResource,HRESOURCE * phClusterQuorumResource) DWORD WINAPI <resapi.h>
ResUtilGetCoreClusterResourcesEx(HCLUSTER hClusterIn,HRESOURCE * phClusterNameResourceOut,HRESOURCE * phClusterQuorumResourceOut,DWORD dwDesiredAccess) DWORD WINAPI <resapi.h>
ResUtilGetDwordProperty(LPDWORD pdwOutValue,const PCLUSPROP_DWORD pValueStruct,DWORD dwOldValue,DWORD dwMinimum,DWORD dwMaximum,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilGetDwordValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPDWORD pdwOutValue,DWORD dwDefaultValue) DWORD WINAPI <resapi.h>
ResUtilGetEnvironmentWithNetName(HRESOURCE hResource) LPVOID WINAPI <resapi.h>
ResUtilGetExpandSzValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,WINBOOL bExpand) LPWSTR WINAPI <resapi.h>
ResUtilGetFileTimeProperty(LPFILETIME pftOutValue,const PCLUSPROP_FILETIME pValueStruct,FILETIME ftOldValue,FILETIME ftMinimum,FILETIME ftMaximum,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilGetLongProperty(LPLONG plOutValue,const PCLUSPROP_LONG pValueStruct,LONG lOldValue,LONG lMinimum,LONG lMaximum,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilGetMultiSzProperty(LPWSTR * ppszOutValue,LPDWORD pcbOutValueSize,const PCLUSPROP_SZ pValueStruct,LPCWSTR pszOldValue,DWORD cbOldValueSize,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilGetMultiSzValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPWSTR * ppszOutValue,LPDWORD pcbOutValueSize) FORCEINLINE DWORD WINAPI_INLINE <resapi.h>
ResUtilGetPrivateProperties(HKEY hkeyClusterKey,PVOID pOutPropertyList,DWORD cbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilGetProperties(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,DWORD cbOutPropertyListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilGetPropertiesToParameterBlock(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,LPBYTE pOutParams,WINBOOL bCheckForRequiredProperties,LPWSTR * pszNameOfPropInError) DWORD WINAPI <resapi.h>
ResUtilGetProperty(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTableItem,PVOID * pOutPropertyItem,LPDWORD pcbOutPropertyItemSize) DWORD WINAPI <resapi.h>
ResUtilGetPropertyFormats(const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyFormatList,DWORD cbPropertyFormatListSize,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilGetPropertySize(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTableItem,LPDWORD pcbOutPropertyListSize,LPDWORD pnPropertyCount) DWORD WINAPI <resapi.h>
ResUtilGetQwordValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,PULONGLONG pqwOutValue,ULONGLONG qwDefaultValue) DWORD WINAPI <resapi.h>
ResUtilGetResourceDependency(HANDLE hSelf,LPCWSTR lpszResourceType) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceDependencyByClass(HCLUSTER hCluster,HANDLE hSelf,PCLUS_RESOURCE_CLASS_INFO prci,WINBOOL bRecurse) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceDependencyByClassEx(HCLUSTER hCluster,HANDLE hSelf,PCLUS_RESOURCE_CLASS_INFO prci,WINBOOL bRecurse,DWORD dwDesiredAccess) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceDependencyByName(HCLUSTER hCluster,HANDLE hSelf,LPCWSTR lpszResourceType,WINBOOL bRecurse) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceDependencyByNameEx(HCLUSTER hCluster,HANDLE hSelf,LPCWSTR lpszResourceType,WINBOOL bRecurse,DWORD dwDesiredAccess) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceDependencyEx(HANDLE hSelf,LPCWSTR lpszResourceType,DWORD dwDesiredAccess) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceDependentIPAddressProps(HRESOURCE hResource,LPWSTR pszAddress,DWORD * pcchAddress,LPWSTR pszSubnetMask,DWORD * pcchSubnetMask,LPWSTR pszNetwork,DWORD * pcch_Network) DWORD WINAPI <resapi.h>
ResUtilGetResourceName(HRESOURCE hResource,PWSTR pszResourceName,DWORD * pcchResourceNameInOut) DWORD WINAPI <resapi.h>
ResUtilGetResourceNameDependency(LPCWSTR lpszResourceName,LPCWSTR lpszResourceType) HRESOURCE WINAPI <resapi.h>
ResUtilGetResourceNameDependencyEx(LPCWSTR lpszResourceName,LPCWSTR lpszResourceType,DWORD dwDesiredAccess) HRESOURCE WINAPI <resapi.h>
ResUtilGetSzProperty(LPWSTR * ppszOutValue,const PCLUSPROP_SZ pValueStruct,LPCWSTR pszOldValue,LPBYTE * ppPropertyList,LPDWORD pcbPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilGetSzValue(HKEY hkeyClusterKey,LPCWSTR pszValueName) LPWSTR WINAPI <resapi.h>
ResUtilInitializeResourceStatus(	_resource_status_)<resapi.h>
ResUtilInitializeResourceStatus(_resource_status_)<resapi.h>
ResUtilInitializeResourceStatusEx(	_resource_status_)<resapi.h>
ResUtilInitializeResourceStatusEx(_resource_status_)<resapi.h>
ResUtilIsPathValid(LPCWSTR pszPath) WINBOOL WINAPI <resapi.h>
ResUtilIsResourceClassEqual(PCLUS_RESOURCE_CLASS_INFO prci,HRESOURCE hResource) WINBOOL WINAPI <resapi.h>
ResUtilPropertyListFromParameterBlock(const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID pOutPropertyList,LPDWORD pcbOutPropertyListSize,const LPBYTE pInParams,LPDWORD pcbBytesReturned,LPDWORD pcbRequired) DWORD WINAPI <resapi.h>
ResUtilRemoveResourceServiceEnvironment(LPCWSTR pszServiceName,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) DWORD WINAPI <resapi.h>
ResUtilResourcesEqual(HRESOURCE hSelf,HRESOURCE hResource) WINBOOL WINAPI <resapi.h>
ResUtilResourceTypesEqual(LPCWSTR lpszResourceTypeName,HRESOURCE hResource) WINBOOL WINAPI <resapi.h>
ResUtilSetBinaryValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,const LPBYTE pbNewValue,DWORD cbNewValueSize,LPBYTE * ppbOutValue,LPDWORD pcbOutValueSize) DWORD WINAPI <resapi.h>
ResUtilSetDwordValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,DWORD dwNewValue,LPDWORD pdwOutValue) DWORD WINAPI <resapi.h>
ResUtilSetExpandSzValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPCWSTR pszNewValue,LPWSTR * ppszOutString) DWORD WINAPI <resapi.h>
ResUtilSetMultiSzValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPCWSTR pszNewValue,DWORD cbNewValueSize,LPWSTR * ppszOutValue,LPDWORD pcbOutValueSize) DWORD WINAPI <resapi.h>
ResUtilSetPrivatePropertyList(HKEY hkeyClusterKey,const PVOID pInPropertyList,DWORD cbInPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilSetPropertyParameterBlock(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,const LPBYTE pInParams,const PVOID pInPropertyList,DWORD cbInPropertyListSize,LPBYTE pOutParams) DWORD WINAPI <resapi.h>
ResUtilSetPropertyParameterBlockEx(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,const LPBYTE pInParams,const PVOID pInPropertyList,DWORD cbInPropertyListSize,WINBOOL bForceWrite,LPBYTE pOutParams) DWORD WINAPI <resapi.h>
ResUtilSetPropertyTable(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,WINBOOL bAllowUnknownProperties,const PVOID pInPropertyList,DWORD cbInPropertyListSize,LPBYTE pOutParams) DWORD WINAPI <resapi.h>
ResUtilSetPropertyTableEx(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,WINBOOL bAllowUnknownProperties,const PVOID pInPropertyList,DWORD cbInPropertyListSize,WINBOOL bForceWrite,LPBYTE pOutParams) DWORD WINAPI <resapi.h>
ResUtilSetQwordValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,ULONGLONG qwNewValue,PULONGLONG pqwOutValue) DWORD WINAPI <resapi.h>
ResUtilSetResourceServiceEnvironment(LPCWSTR pszServiceName,HRESOURCE hResource,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) DWORD WINAPI <resapi.h>
ResUtilSetResourceServiceStartParameters(LPCWSTR pszServiceName,SC_HANDLE schSCMHandle,LPSC_HANDLE phService,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) DWORD WINAPI <resapi.h>
ResUtilSetResourceServiceStartParametersEx(LPCWSTR pszServiceName,SC_HANDLE schSCMHandle,LPSC_HANDLE phService,DWORD dwDesiredAccess,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) DWORD WINAPI <resapi.h>
ResUtilSetSzValue(HKEY hkeyClusterKey,LPCWSTR pszValueName,LPCWSTR pszNewValue,LPWSTR * ppszOutString) DWORD WINAPI <resapi.h>
ResUtilSetUnknownProperties(HKEY hkeyClusterKey,const PRESUTIL_PROPERTY_ITEM pPropertyTable,const PVOID pInPropertyList,DWORD cbInPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilStartResourceService(LPCWSTR pszServiceName,LPSC_HANDLE phServiceHandle) DWORD WINAPI <resapi.h>
ResUtilStopResourceService(LPCWSTR pszServiceName) DWORD WINAPI <resapi.h>
ResUtilStopService(SC_HANDLE hServiceHandle) DWORD WINAPI <resapi.h>
ResUtilTerminateServiceProcessFromResDll(DWORD dwServicePid,WINBOOL bOffline,PDWORD pdwResourceState,PLOG_EVENT_ROUTINE pfnLogEvent,RESOURCE_HANDLE hResourceHandle) DWORD WINAPI <resapi.h>
ResUtilVerifyPrivatePropertyList(const PVOID pInPropertyList,DWORD cbInPropertyListSize) DWORD WINAPI <resapi.h>
ResUtilVerifyPropertyTable(const PRESUTIL_PROPERTY_ITEM pPropertyTable,PVOID Reserved,WINBOOL bAllowUnknownProperties,const PVOID pInPropertyList,DWORD cbInPropertyListSize,LPBYTE pOutParams) DWORD WINAPI <resapi.h>
ResUtilVerifyResourceService(LPCWSTR pszServiceName) DWORD WINAPI <resapi.h>
ResUtilVerifyService(SC_HANDLE hServiceHandle) DWORD WINAPI <resapi.h>
ResynchRows(DBCOUNTITEM cRows,const HROW rghRows[],DBCOUNTITEM * pcRowsResynched,HROW ** prghRowsResynched,DBROWSTATUS ** prgRowStatus)virtual HRESULT WINAPI <oledb.h>
Retrieve(__LONG32 lnFormatType,BSTR * pbstrADsPath)virtual HRESULT WINAPI <iads.h>
RetrievePending(LONG RequestId,const BSTR strConfig,LONG * pDisposition)virtual HRESULT WINAPI <certcli.h>
RetrieveUrlCacheEntryFile(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,DWORD dwReserved) BOOLAPI <wininet.h>
RetrieveUrlCacheEntryFileA(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,DWORD dwReserved) BOOLAPI <wininet.h>
RetrieveUrlCacheEntryFileW(LPCWSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,DWORD dwReserved) BOOLAPI <wininet.h>
RetrieveUrlCacheEntryStream(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,WINBOOL fRandomRead,DWORD dwReserved) INTERNETAPI_<wininet.h>
RetrieveUrlCacheEntryStreamA(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,WINBOOL fRandomRead,DWORD dwReserved) INTERNETAPI_<wininet.h>
RetrieveUrlCacheEntryStreamW(LPCWSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,LPDWORD lpcbCacheEntryInfo,WINBOOL fRandomRead,DWORD dwReserved) INTERNETAPI_<wininet.h>
RETURNCODETOHRESULT(rc)<mdcommsg.h>
ReturnFromSubmenu(DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
ReuseDDElParam(LPARAM lParam,UINT msgIn,UINT msgOut,UINT_PTR uiLo,UINT_PTR uiHi) LPARAM WINAPI <dde.h>
Reverse()	Status <wincrypt.h>
REVERSE_BYTES(Destination, Source)<scsi.h>
REVERSE_BYTES_QUAD(Destination, Source)<scsi.h>
REVERSE_BYTES_SHORT(Destination, Source)<scsi.h>
REVERSE_LONG(Long)<scsi.h>
REVERSE_SHORT(Short)<scsi.h>
Revert(void)virtual HRESULT WINAPI <wia.h>
REVERT_SECURITY_CONTEXT_FN(PCtxtHandle) typedef SECURITY_STATUS<sspi.h>
RevertSecurityContext(PCtxtHandle phContext) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
RevertToPrinterSelf(VOID)HANDLE WINAPI <winsplp.h>
RevertToSelf(VOID) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
Revoke(DWORD dwRegister)virtual HRESULT WINAPI <hlink.h>
RevokeAccessRights(LPWSTR lpProperty,ULONG cTrustees,TRUSTEEW prgTrustees[])virtual HRESULT WINAPI <iaccess.h>
RevokeActiveObject(DWORD dwRegister,void * pvReserved)WINOLEAUTAPI <oleauto.h>
RevokeAuditRights(LPWSTR lpProperty,ULONG cTrustees,TRUSTEEW prgTrustees[])virtual HRESULT WINAPI <iaccess.h>
RevokeBindStatusCallback(LPBC pBC,IBindStatusCallback * pBSCb)STDAPI <urlmon.h>
RevokeCertificate(const BSTR strConfig,const BSTR strSerialNumber,LONG Reason,DATE Date)virtual HRESULT WINAPI <certadm.h>
RevokeDragDrop(HWND hwnd)WINOLEAPI <ole2.h>
RevokeFormatEnumerator(LPBC pBC,IEnumFORMATETC * pEFetc)STDAPI <urlmon.h>
Rewind()	VOID <gdipluspath.h>
Rfc1766ToLcid(LCID * pLocale,LPCSTR pszRfc1766) STDAPI <mlang.h>
Rfc1766ToLcidA(LCID * pLocale,LPCSTR pszRfc1766) STDAPI <mlang.h>
Rfc1766ToLcidW(LCID * pLocale,LPCWSTR pszRfc1766) STDAPI <mlang.h>
RGB(r,g,b)<wingdi.h>
RGB_GETBLUE(rgb)<d3dtypes.h>
RGB_GETGREEN(rgb)<d3dtypes.h>
RGB_GETRED(rgb)<d3dtypes.h>
RGB_MAKE()()()
RGB_MAKE(r, g, b)<d3dtypes.h>
RGB_TORGBA(rgb)<d3dtypes.h>
RGBA_GETALPHA(rgb)<d3dtypes.h>
RGBA_GETBLUE(rgb)<d3dtypes.h>
RGBA_GETGREEN(rgb)<d3dtypes.h>
RGBA_GETRED(rgb)<d3dtypes.h>
RGBA_MAKE()()()
RGBA_MAKE(r, g, b, a)<d3dtypes.h>
RGBA_SETALPHA()()()
RGBA_SETALPHA(rgba, x)<d3dtypes.h>
RGBA_TORGB(rgba)<d3dtypes.h>
RIDEV_EXMODE(mode)<winuser.h>
RidFromToken(tk)<correg.h>
RidToToken(rid, tktype)<correg.h>
RidToToken(rid,tktype)<correg.h>
RIFFNEXT(pChunk)<aviriff.h>
RIFFROUND(cb)<aviriff.h>
Right(WINBOOL fMove,MARKUP_CONTEXT_TYPE * pContext,IHTMLElement ** ppElement,__LONG32 * pcch,OLECHAR * pchText)virtual HRESULT WINAPI <wincon.h>
RightButtonSelect(void)virtual HRESULT WINAPI <strmif.h>
RKeyCloseKeyService(KEYSVCC_HANDLE hKeySvcCli,void * pReserved) ULONG <rkeysvcc.h>
RKeyOpenKeyService(LPSTR pszMachineName,KEYSVC_TYPE OwnerType,LPWSTR pwszOwnerName,void * pAuthentication,void * pReserved,KEYSVCC_HANDLE * phKeySvcCli) ULONG <rkeysvcc.h>
RKeyPFXInstall(KEYSVCC_HANDLE hKeySvcCli,PKEYSVC_BLOB pPFX,PKEYSVC_UNICODE_STRING pPassword,ULONG ulFlags) ULONG <rkeysvcc.h>
RM_WRITE_STATUS_CALLBACK(UINT nPercentComplete) typedef void<restartmanager.h>
RmAddFilter(DWORD dwSessionHandle,LPCWSTR strModuleName,RM_UNIQUE_PROCESS * pProcess,LPCWSTR strServiceShortName,RM_FILTER_ACTION FilterAction) DWORD WINAPI <restartmanager.h>
RmCancelCurrentTask(DWORD dwSessionHandle) DWORD WINAPI <restartmanager.h>
RMCount(DWORD dwcTotalNumberOfRMs)virtual HRESULT WINAPI <txdtc.h>
RmEndSession(DWORD dwSessionHandle) DWORD WINAPI <restartmanager.h>
RmGetFilterList(DWORD dwSessionHandle,PBYTE pbFilterBuf,DWORD cbFilterBuf,LPDWORD cbFilterBufNeeded) DWORD WINAPI <restartmanager.h>
RmGetList(DWORD dwSessionHandle,UINT * pnProcInfoNeeded,UINT * pnProcInfo,RM_PROCESS_INFO rgAffectedApps[],LPDWORD lpdwRebootReasons) DWORD WINAPI <restartmanager.h>
RMInfo(xa_switch_t * pXa_Switch,WINBOOL fCDeclCallingConv,char * pszOpenString,char * pszCloseString,GUID guidRMRecovery)virtual HRESULT WINAPI <txdtc.h>
RmJoinSession(DWORD * pSessionHandle,const WCHAR strSessionKey[]) DWORD WINAPI <restartmanager.h>
RmRegisterResources(DWORD dwSessionHandle,UINT nFiles,LPCWSTR rgsFileNames[],UINT nApplications,RM_UNIQUE_PROCESS rgApplications[],UINT nServices,LPCWSTR rgsServiceNames[]) DWORD WINAPI <restartmanager.h>
RmRemoveFilter(DWORD dwSessionHandle,LPCWSTR strModuleName,RM_UNIQUE_PROCESS * pProcess,LPCWSTR strServiceShortName) DWORD WINAPI <restartmanager.h>
RmRestart(DWORD dwSessionHandle,DWORD dwRestartFlags,RM_WRITE_STATUS_CALLBACK fnStatus) DWORD WINAPI <restartmanager.h>
RmShutdown(DWORD dwSessionHandle,ULONG lActionFlags,RM_WRITE_STATUS_CALLBACK fnStatus) DWORD WINAPI <restartmanager.h>
RmStartSession(DWORD * pSessionHandle,DWORD dwSessionFlags,WCHAR strSessionKey[]) DWORD WINAPI <restartmanager.h>
RoActivateInstance(HSTRING activatableClassId,IInspectable ** instance)HRESULT WINAPI <roapi.h>
RoGetActivationFactory(HSTRING activatableClassId,REFIID iid,void ** factory)HRESULT WINAPI <roapi.h>
RoGetApartmentIdentifier(UINT64 * apartmentId)HRESULT WINAPI <roapi.h>
RoGetApartmentIdentifier(UINT64 * apartmentIdentifier)HRESULT WINAPI <roapi.h>
RoInitialize(RO_INIT_TYPE initType)HRESULT WINAPI <roapi.h>
RoInitializeWrapper(RO_INIT_TYPE flags)           <corewrappers.h>
RollbackComplete(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
RollbackEnlistment(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
RollbackTransaction(HANDLE TransactionHandle) WINBOOL WINAPI <ktmw32.h>
RollbackTransactionAsync(HANDLE TransactionHandle) WINBOOL WINAPI <ktmw32.h>
RollforwardTransactionManager(HANDLE TransactionManagerHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
RoRegisterActivationFactories(HSTRING * activatableClassIds,PFNGETACTIVATIONFACTORY * activationFactoryCallbacks,UINT32 count,RO_REGISTRATION_COOKIE * cookie)HRESULT WINAPI <roapi.h>
RoRegisterForApartmentShutdown(IApartmentShutdown * callbackObj,UINT64 * apartmentId,APARTMENT_SHUTDOWN_REGISTRATION_COOKIE * regCookie)HRESULT WINAPI <roapi.h>
RoRevokeActivationFactories(RO_REGISTRATION_COOKIE cookie)void WINAPI <roapi.h>
Rotate(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status <gdiplusmatrix.h>
RotateAt(REAL angle,const PointF & center,MatrixOrder order=MatrixOrderPrepend)	Status <gdiplusmatrix.h>
RotateFlip(RotateFlipType rotateFlipType)__inline__ Status Image::<gdiplusimpl.h>
RotateTranform(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status <gdiplusbrush.h>
RotateTransform(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status <gdipluspen.h>
Rotation()))))))))))))))))static D2D1FORCEINLINE Matrix3x2F <dxgi.h>
ROUND_TO_PAGES(Size)<wdm.h>
RoundedRect(const D2D1_RECT_F & rect,FLOAT radiusX,FLOAT radiusY)D2D1FORCEINLINE D2D1_ROUNDED_RECT <d2d1helper.h>
RoundRect(HDC hdc,int left,int top,int right,int bottom,int width,int height) WINGDIAPI WINBOOL WINAPI <wingdi.h>
RoUninitialize(void)void WINAPI <roapi.h>
RoUnregisterForApartmentShutdown(APARTMENT_SHUTDOWN_REGISTRATION_COOKIE regCookie)HRESULT WINAPI <roapi.h>
Route(LONG OutputPinIndex,LONG InputPinIndex)virtual HRESULT WINAPI <strmif.h>
RouterAllocBidiMem(size_t NumBytes)PVOID WINAPI <winsplp.h>
RouterAllocBidiResponseContainer(DWORD Count)PBIDI_RESPONSE_CONTAINER WINAPI <winsplp.h>
RouterAllocPrinterNotifyInfo(DWORD cPrinterNotifyInfoData)PPRINTER_NOTIFY_INFO WINAPI <winsplp.h>
RouterAssert(PSTR pszFailedAssertion,PSTR pszFileName,DWORD dwLineNumber,PSTR pszMessage) VOID <rtutils.h>
RouterFreeBidiMem(PVOID pMemPointer)VOID WINAPI <winsplp.h>
RouterFreeBidiResponseContainer(PBIDI_RESPONSE_CONTAINER pData)DWORD WINAPI <winsplp.h>
RouterFreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pInfo)WINBOOL WINAPI <winsplp.h>
RouterGetErrorString(DWORD dwErrorCode,LPSTR * lplpszErrorString) DWORD <rtutils.h>
RouterGetErrorStringA(DWORD dwErrorCode,LPSTR * lplpszErrorString) DWORD <rtutils.h>
RouterGetErrorStringW(DWORD dwErrorCode,LPWSTR * lplpwszErrorString) DWORD <rtutils.h>
RouterInvokeConfigUI(DWORD dwEapTypeId,ULONG_PTR uConnectionParam,HWND hwndParent,DWORD dwFlags,BYTE * pConnectionDataIn,DWORD dwSizeOfConnectionDataIn,BYTE ** ppConnectionDataOut,DWORD * pdwSizeOfConnectionDataOut)virtual HRESULT WINAPI <rrascfg.h>
RouterInvokeCredentialsUI(DWORD dwEapTypeId,ULONG_PTR uConnectionParam,HWND hwndParent,DWORD dwFlags,BYTE * pConnectionDataIn,DWORD dwSizeOfConnectionDataIn,BYTE * pUserDataIn,DWORD dwSizeOfUserDataIn,BYTE ** ppUserDataOut,DWORD * pdwSizeOfUserDataOut)virtual HRESULT WINAPI <rrascfg.h>
RouterLogDeregister(HANDLE hLogHandle) VOID <rtutils.h>
RouterLogDeregisterA(HANDLE hLogHandle) VOID <rtutils.h>
RouterLogDeregisterW(HANDLE hLogHandle) VOID <rtutils.h>
RouterLogErrorA(h,msg,count,array,err)<rtutils.h>
RouterLogErrorDataA(h,msg,count,array,c,buf)<rtutils.h>
RouterLogErrorDataW(h,msg,count,array,c,buf)<rtutils.h>
RouterLogErrorStringA(h,msg,count,array,err,index)<rtutils.h>
RouterLogErrorStringW(h,msg,count,array,err,index)<rtutils.h>
RouterLogErrorW(h,msg,count,array,err)<rtutils.h>
RouterLogEvent(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPSTR * plpszSubStringArray,DWORD dwErrorCode) VOID <rtutils.h>
RouterLogEventA(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPSTR * plpszSubStringArray,DWORD dwErrorCode) VOID <rtutils.h>
RouterLogEventData(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPSTR * plpszSubStringArray,DWORD dwDataBytes,LPBYTE lpDataBytes) VOID <rtutils.h>
RouterLogEventDataA(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPSTR * plpszSubStringArray,DWORD dwDataBytes,LPBYTE lpDataBytes) VOID <rtutils.h>
RouterLogEventDataW(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPWSTR * plpszSubStringArray,DWORD dwDataBytes,LPBYTE lpDataBytes) VOID <rtutils.h>
RouterLogEventEx(HANDLE hLogHandle,DWORD dwEventType,DWORD dwErrorCode,DWORD dwMessageId,LPCSTR ptszFormat,...) VOID __cdecl <rtutils.h>
RouterLogEventExA(HANDLE hLogHandle,DWORD dwEventType,DWORD dwErrorCode,DWORD dwMessageId,LPCSTR ptszFormat,...) VOID __cdecl <rtutils.h>
RouterLogEventExW(HANDLE hLogHandle,DWORD dwEventType,DWORD dwErrorCode,DWORD dwMessageId,LPCWSTR ptszFormat,...) VOID __cdecl <rtutils.h>
RouterLogEventString(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPSTR * plpszSubStringArray,DWORD dwErrorCode,DWORD dwErrorIndex) VOID <rtutils.h>
RouterLogEventStringA(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPSTR * plpszSubStringArray,DWORD dwErrorCode,DWORD dwErrorIndex) VOID <rtutils.h>
RouterLogEventStringW(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPWSTR * plpszSubStringArray,DWORD dwErrorCode,DWORD dwErrorIndex) VOID <rtutils.h>
RouterLogEventValistEx(HANDLE hLogHandle,DWORD dwEventType,DWORD dwErrorCode,DWORD dwMessageId,LPCSTR ptszFormat,va_list arglist) VOID <rtutils.h>
RouterLogEventValistExA(HANDLE hLogHandle,DWORD dwEventType,DWORD dwErrorCode,DWORD dwMessageId,LPCSTR ptszFormat,va_list arglist) VOID <rtutils.h>
RouterLogEventValistExW(HANDLE hLogHandle,DWORD dwEventType,DWORD dwErrorCode,DWORD dwMessageId,LPCWSTR ptszFormat,va_list arglist) VOID <rtutils.h>
RouterLogEventW(HANDLE hLogHandle,DWORD dwEventType,DWORD dwMessageId,DWORD dwSubStringCount,LPWSTR * plpszSubStringArray,DWORD dwErrorCode) VOID <rtutils.h>
RouterLogInformationA(h,msg,count,array,err)<rtutils.h>
RouterLogInformationDataA(h,msg,count,array,c,buf)<rtutils.h>
RouterLogInformationDataW(h,msg,count,array,c,buf)<rtutils.h>
RouterLogInformationStringA(h,msg,count,array,err,index)<rtutils.h>
RouterLogInformationStringW(h,msg,count,array,err,index)<rtutils.h>
RouterLogInformationW(h,msg,count,array,err)<rtutils.h>
RouterLogRegister(LPCSTR lpszSource) HANDLE <rtutils.h>
RouterLogRegisterA(LPCSTR lpszSource) HANDLE <rtutils.h>
RouterLogRegisterW(LPCWSTR lpszSource) HANDLE <rtutils.h>
RouterLogWarningA(h,msg,count,array,err)<rtutils.h>
RouterLogWarningDataA(h,msg,count,array,c,buf)<rtutils.h>
RouterLogWarningDataW(h,msg,count,array,c,buf)<rtutils.h>
RouterLogWarningStringA(h,msg,count,array,err,index)<rtutils.h>
RouterLogWarningStringW(h,msg,count,array,err,index)<rtutils.h>
RouterLogWarningW(h,msg,count,array,err)<rtutils.h>
RPC_AUTH_KEY_RETRIEVAL_FN(void * Arg,unsigned short * ServerPrincName,unsigned __LONG32 KeyVer,void ** Key,RPC_STATUS * Status) typedef void<rpcdce.h>
RPC_BLOCKING_FN(void * hWnd,void * Context,void * hSyncEvent) typedef RPC_STATUS<rpcdcep.h>
RPC_DISPATCH_FUNCTION(PRPC_MESSAGE Message) typedef void<rpcdcep.h>
RPC_HTTP_PROXY_FREE_STRING(unsigned short * String) typedef void<rpcdce.h>
RPC_MGMT_AUTHORIZATION_FN(RPC_BINDING_HANDLE ClientBinding,unsigned __LONG32 RequestedMgmtOperation,RPC_STATUS * Status) typedef int<rpcdce.h>
RPC_NEW_HTTP_PROXY_CHANNEL(RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,unsigned short * ServerName,unsigned short * ServerPort,unsigned short * RemoteUser,unsigned short * AuthType,void * ResourceUuid,void * Metadata,void * SessionId,void * Interface,void * Reserved,unsigned __LONG32 Flags,unsigned short ** NewServerName,unsigned short ** NewServerPort) typedef RPC_STATUS<rpcdce.h>
RPC_SETFILTER_FUNC(RPCLT_PDU_FILTER_FUNC pfnFilter) typedef void<rpcdcep.h>
RpcAbnormalTermination()<rpc.h>
RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned __LONG32 ExceptionCode) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync,WINBOOL fAbort) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcAsyncCleanupThread(DWORD dwTimeout) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync,void * Reply) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcAsyncGetCallHandle(pAsync)<rpcasync.h>
RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync,unsigned int Size) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcBindingBind(PRPC_ASYNC_STATE pAsync,RPC_BINDING_HANDLE Binding,RPC_IF_HANDLE IfSpec)RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE * DestinationBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingCreate(RPC_BINDING_HANDLE_TEMPLATE * Template,RPC_BINDING_HANDLE_SECURITY * Security,RPC_BINDING_HANDLE_OPTIONS * Options,RPC_BINDING_HANDLE * Binding)RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE * Template,RPC_BINDING_HANDLE_SECURITY * Security,RPC_BINDING_HANDLE_OPTIONS * Options,RPC_BINDING_HANDLE * Binding)RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE * Template,RPC_BINDING_HANDLE_SECURITY * Security,RPC_BINDING_HANDLE_OPTIONS * Options,RPC_BINDING_HANDLE * Binding)RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingFree(RPC_BINDING_HANDLE * Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingFromStringBinding(RPC_CSTR StringBinding,RPC_BINDING_HANDLE * Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingFromStringBindingA(RPC_CSTR StringBinding,RPC_BINDING_HANDLE * Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingFromStringBindingW(RPC_WSTR StringBinding,RPC_BINDING_HANDLE * Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthClient(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE * Privs,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,unsigned __LONG32 * AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE * Privs,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,unsigned __LONG32 * AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthClientEx(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE * Privs,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,unsigned __LONG32 * AuthzSvc,unsigned __LONG32 Flags) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE * Privs,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,unsigned __LONG32 * AuthzSvc,unsigned __LONG32 Flags) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE * Privs,RPC_WSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,unsigned __LONG32 * AuthzSvc,unsigned __LONG32 Flags) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE * Privs,RPC_WSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,unsigned __LONG32 * AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthInfo(RPC_BINDING_HANDLE Binding,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,unsigned __LONG32 * AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,unsigned __LONG32 * AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthInfoEx(RPC_BINDING_HANDLE Binding,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,unsigned __LONG32 * AuthzSvc,unsigned __LONG32 RpcQosVersion,RPC_SECURITY_QOS * SecurityQOS) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,unsigned __LONG32 * AuthzSvc,unsigned __LONG32 RpcQosVersion,RPC_SECURITY_QOS * SecurityQOS) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,unsigned __LONG32 * AuthzSvc,unsigned __LONG32 RpcQosVersion,RPC_SECURITY_QOS * SecurityQOS) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR * ServerPrincName,unsigned __LONG32 * AuthnLevel,unsigned __LONG32 * AuthnSvc,RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,unsigned __LONG32 * AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqObject(RPC_BINDING_HANDLE Binding,UUID * ObjectUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingInqOption(RPC_BINDING_HANDLE hBinding,unsigned __LONG32 option,ULONG_PTR * pOptionValue) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingReset(RPC_BINDING_HANDLE Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding,RPC_BINDING_HANDLE * ServerBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetAuthInfo(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned __LONG32 AuthnLevel,unsigned __LONG32 AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned __LONG32 AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned __LONG32 AuthnLevel,unsigned __LONG32 AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned __LONG32 AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetAuthInfoEx(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned __LONG32 AuthnLevel,unsigned __LONG32 AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned __LONG32 AuthzSvc,RPC_SECURITY_QOS * SecurityQos) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned __LONG32 AuthnLevel,unsigned __LONG32 AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned __LONG32 AuthzSvc,RPC_SECURITY_QOS * SecurityQos) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned __LONG32 AuthnLevel,unsigned __LONG32 AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned __LONG32 AuthzSvc,RPC_SECURITY_QOS * SecurityQOS) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned __LONG32 AuthnLevel,unsigned __LONG32 AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned __LONG32 AuthzSvc) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetObject(RPC_BINDING_HANDLE Binding,UUID * ObjectUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingSetOption(RPC_BINDING_HANDLE hBinding,unsigned __LONG32 option,ULONG_PTR optionValue) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingToStringBinding(RPC_BINDING_HANDLE Binding,RPC_CSTR * StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding,RPC_CSTR * StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding,RPC_WSTR * StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcBindingUnbind(RPC_BINDING_HANDLE Binding)RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcBindingVectorFree(RPC_BINDING_VECTOR ** BindingVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcCancelThread(void * Thread) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcCancelThreadEx(void * Thread,__LONG32 Timeout) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcCertGeneratePrincipalName(PCCERT_CONTEXT Context,DWORD Flags,RPC_CSTR * pBuffer) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcssl.h>
RpcCertGeneratePrincipalNameA(PCCERT_CONTEXT Context,DWORD Flags,RPC_CSTR * pBuffer) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcssl.h>
RpcCertGeneratePrincipalNameW(PCCERT_CONTEXT Context,DWORD Flags,RPC_WSTR * pBuffer) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcssl.h>
RpcCsGetTags(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned __LONG32 * pulSendingTag,unsigned __LONG32 * pulDesiredReceivingTag,unsigned __LONG32 * pulReceivingTag,error_status_t * pStatus) void __RPC_API <rpcndr.h>
RpcDiagnoseError(RPC_BINDING_HANDLE BindingHandle,RPC_IF_HANDLE IfSpec,RPC_STATUS RpcStatus,RPC_ERROR_ENUM_HANDLE * EnumHandle,ULONG Options,HWND ParentWindow)RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcEpRegister(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector,RPC_CSTR Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpRegisterA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector,RPC_CSTR Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpRegisterNoReplace(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector,RPC_CSTR Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector,RPC_CSTR Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector,RPC_WSTR Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpRegisterW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector,RPC_WSTR Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpResolveBinding(RPC_BINDING_HANDLE Binding,RPC_IF_HANDLE IfSpec) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcEpUnregister(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVector,UUID_VECTOR * UuidVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO * ErrorInfo) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorClearInformation(void) RPCRTAPI void RPC_ENTRY <rpcasync.h>
RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE * EnumHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE * EnumHandle,WINBOOL CopyStrings,RPC_EXTENDED_ERROR_INFO * ErrorInfo) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE * EnumHandle,int * Records) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorLoadErrorInfo(PVOID ErrorBlob,size_t BlobSize,RPC_ERROR_ENUM_HANDLE * EnumHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE * EnumHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE * EnumHandle,PVOID * ErrorBlob,size_t * BlobSize) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE * EnumHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcExcept(expr)<rpc.h>
RpcExceptionCode()<rpc.h>
RpcFreeAuthorizationContext(PVOID * pAuthzClientContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding,WINBOOL ImpersonateOnReturn,PVOID Reserved1,PLARGE_INTEGER pExpirationTime,LUID Reserved2,DWORD Reserved3,PVOID Reserved4,PVOID * pAuthzClientContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcIfIdVectorFree(RPC_IF_ID_VECTOR ** IfIdVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcIfInqId(RPC_IF_HANDLE RpcIfHandle,RPC_IF_ID * RpcIfId) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RPCLT_PDU_FILTER_FUNC(void * Buffer,unsigned int BufferLength,int fDatagram) typedef void<rpcdcep.h>
RpcMgmtEnableIdleCleanup(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding,unsigned __LONG32 InquiryType,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,UUID * ObjectUuid,RPC_EP_INQ_HANDLE * InquiryContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE * InquiryContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtEpEltInqNext(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID * IfId,RPC_BINDING_HANDLE * Binding,UUID * ObjectUuid,RPC_CSTR * Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID * IfId,RPC_BINDING_HANDLE * Binding,UUID * ObjectUuid,RPC_CSTR * Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID * IfId,RPC_BINDING_HANDLE * Binding,UUID * ObjectUuid,RPC_WSTR * Annotation) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding,RPC_IF_ID * IfId,RPC_BINDING_HANDLE Binding,UUID * ObjectUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding,unsigned int * Timeout) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqDefaultProtectLevel(unsigned __LONG32 AuthnSvc,unsigned __LONG32 * AuthnLevel) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding,RPC_IF_ID_VECTOR ** IfIdVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqServerPrincName(RPC_BINDING_HANDLE Binding,unsigned __LONG32 AuthnSvc,RPC_CSTR * ServerPrincName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding,unsigned __LONG32 AuthnSvc,RPC_CSTR * ServerPrincName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding,unsigned __LONG32 AuthnSvc,RPC_WSTR * ServerPrincName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtInqStats(RPC_BINDING_HANDLE Binding,RPC_STATS_VECTOR ** Statistics) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtSetCancelTimeout(__LONG32 Timeout) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding,unsigned int Timeout) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtSetServerStackSize(unsigned __LONG32 ThreadStackSize) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtStatsVectorFree(RPC_STATS_VECTOR ** StatsVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcMgmtWaitServerListen(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNetworkInqProtseqs(RPC_PROTSEQ_VECTORA ** ProtseqVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA ** ProtseqVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW ** ProtseqVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNetworkIsProtseqValid(RPC_CSTR Protseq) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNetworkIsProtseqValidA(RPC_CSTR Protseq) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNetworkIsProtseqValidW(RPC_WSTR Protseq) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNsBindingExport(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVec,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingExportA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVec,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingExportPnP(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectVector)RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingExportPnPA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectVector)RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingExportPnPW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectVector)RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingExportW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR * BindingVec,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingImportBegin(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID * ObjUuid,RPC_NS_HANDLE * ImportContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingImportBeginA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID * ObjUuid,RPC_NS_HANDLE * ImportContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingImportBeginW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID * ObjUuid,RPC_NS_HANDLE * ImportContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingImportDone(RPC_NS_HANDLE * ImportContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext,RPC_BINDING_HANDLE * Binding)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingInqEntryName(RPC_BINDING_HANDLE Binding,unsigned __LONG32 EntryNameSyntax,RPC_CSTR * EntryName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding,unsigned __LONG32 EntryNameSyntax,RPC_CSTR * EntryName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding,unsigned __LONG32 EntryNameSyntax,RPC_WSTR * EntryName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcNsBindingLookupBegin(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID * ObjUuid,unsigned __LONG32 BindingMaxCount,RPC_NS_HANDLE * LookupContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingLookupBeginA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID * ObjUuid,unsigned __LONG32 BindingMaxCount,RPC_NS_HANDLE * LookupContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingLookupBeginW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID * ObjUuid,unsigned __LONG32 BindingMaxCount,RPC_NS_HANDLE * LookupContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingLookupDone(RPC_NS_HANDLE * LookupContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext,RPC_BINDING_VECTOR ** BindingVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingSelect(RPC_BINDING_VECTOR * BindingVec,RPC_BINDING_HANDLE * Binding)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingUnexport(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingUnexportA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingUnexportPnP(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectVector)RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingUnexportPnPA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectVector)RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingUnexportPnPW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectVector)RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsBindingUnexportW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryExpandName(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_CSTR * ExpandedName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryExpandNameA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_CSTR * ExpandedName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryExpandNameW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_WSTR * ExpandedName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryObjectInqBegin(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryObjectInqBeginA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryObjectInqBeginW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryObjectInqDone(RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext,UUID * ObjUuid)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupDelete(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupDeleteA(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupDeleteW(unsigned __LONG32 GroupNameSyntax,RPC_WSTR GroupName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrAdd(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrAddA(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrAddW(unsigned __LONG32 GroupNameSyntax,RPC_WSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_WSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqBegin(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqBeginA(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqBeginW(unsigned __LONG32 GroupNameSyntax,RPC_WSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqDone(RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqNext(RPC_NS_HANDLE InquiryContext,RPC_CSTR * MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext,RPC_CSTR * MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext,RPC_WSTR * MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrRemove(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrRemoveA(unsigned __LONG32 GroupNameSyntax,RPC_CSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsGroupMbrRemoveW(unsigned __LONG32 GroupNameSyntax,RPC_WSTR GroupName,unsigned __LONG32 MemberNameSyntax,RPC_WSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtBindingUnexport(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtBindingUnexportA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtBindingUnexportW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,UUID_VECTOR * ObjectUuidVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryCreate(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryCreateA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryCreateW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryDelete(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryDeleteA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryDeleteW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryInqIfIds(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID_VECTOR ** IfIdVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryInqIfIdsA(unsigned __LONG32 EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID_VECTOR ** IfIdVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtEntryInqIfIdsW(unsigned __LONG32 EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID_VECTOR ** IfIdVec)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle,unsigned __LONG32 ExpirationAge)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtInqExpAge(unsigned __LONG32 * ExpirationAge)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsMgmtSetExpAge(unsigned __LONG32 ExpirationAge)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileDelete(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileDeleteA(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileDeleteW(unsigned __LONG32 ProfileNameSyntax,RPC_WSTR ProfileName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltAdd(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID * IfId,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName,unsigned __LONG32 Priority,RPC_CSTR Annotation)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltAddA(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID * IfId,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName,unsigned __LONG32 Priority,RPC_CSTR Annotation)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltAddW(unsigned __LONG32 ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID * IfId,unsigned __LONG32 MemberNameSyntax,RPC_WSTR MemberName,unsigned __LONG32 Priority,RPC_WSTR Annotation)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqBegin(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName,unsigned __LONG32 InquiryType,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqBeginA(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName,unsigned __LONG32 InquiryType,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqBeginW(unsigned __LONG32 ProfileNameSyntax,RPC_WSTR ProfileName,unsigned __LONG32 InquiryType,RPC_IF_ID * IfId,unsigned __LONG32 VersOption,unsigned __LONG32 MemberNameSyntax,RPC_WSTR MemberName,RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqDone(RPC_NS_HANDLE * InquiryContext)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqNext(RPC_NS_HANDLE InquiryContext,RPC_IF_ID * IfId,RPC_CSTR * MemberName,unsigned __LONG32 * Priority,RPC_CSTR * Annotation)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext,RPC_IF_ID * IfId,RPC_CSTR * MemberName,unsigned __LONG32 * Priority,RPC_CSTR * Annotation)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext,RPC_IF_ID * IfId,RPC_WSTR * MemberName,unsigned __LONG32 * Priority,RPC_WSTR * Annotation)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltRemove(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID * IfId,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltRemoveA(unsigned __LONG32 ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID * IfId,unsigned __LONG32 MemberNameSyntax,RPC_CSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcNsProfileEltRemoveW(unsigned __LONG32 ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID * IfId,unsigned __LONG32 MemberNameSyntax,RPC_WSTR MemberName)RPCNSAPI RPC_STATUS RPC_ENTRY <rpcnsi.h>
RpcObjectInqType(UUID * ObjUuid,UUID * TypeUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcObjectSetInqFn(RPC_OBJECT_INQ_FN * InquiryFn) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcObjectSetType(UUID * ObjUuid,UUID * TypeUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcProtseqVectorFree(RPC_PROTSEQ_VECTORA ** ProtseqVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA ** ProtseqVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW ** ProtseqVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcRaiseException(RPC_STATUS exception) RPCRTAPI DECLSPEC_NORETURN void RPC_ENTRY <rpcdce.h>
RpcRevertToSelf(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerInqBindingHandle(RPC_BINDING_HANDLE * Binding)RPC_STATUS <rpcdce.h>
RpcServerInqBindings(RPC_BINDING_VECTOR ** BindingVector) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerInqCallAttributes(RPC_BINDING_HANDLE ClientBinding,void * RpcCallAttributes) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding,void * RpcCallAttributes) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding,void * RpcCallAttributes) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcServerInqDefaultPrincName(unsigned __LONG32 AuthnSvc,RPC_CSTR * PrincName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerInqDefaultPrincNameA(unsigned __LONG32 AuthnSvc,RPC_CSTR * PrincName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerInqDefaultPrincNameW(unsigned __LONG32 AuthnSvc,RPC_WSTR * PrincName) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerInqIf(RPC_IF_HANDLE IfSpec,UUID * MgrTypeUuid,RPC_MGR_EPV ** MgrEpv) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerListen(unsigned int MinimumCallThreads,unsigned int MaxCalls,unsigned int DontWait) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerRegisterAuthInfo(RPC_CSTR ServerPrincName,unsigned __LONG32 AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void * Arg) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName,unsigned __LONG32 AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void * Arg) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName,unsigned __LONG32 AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void * Arg) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerRegisterIf(RPC_IF_HANDLE IfSpec,UUID * MgrTypeUuid,RPC_MGR_EPV * MgrEpv) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec,UUID * MgrTypeUuid,RPC_MGR_EPV * MgrEpv,unsigned int Flags,unsigned int MaxCalls,unsigned int MaxRpcSize,RPC_IF_CALLBACK_FN * IfCallbackFn) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec,UUID * MgrTypeUuid,RPC_MGR_EPV * MgrEpv,unsigned int Flags,unsigned int MaxCalls,RPC_IF_CALLBACK_FN * IfCallback) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding,DWORD Notification,RPC_NOTIFICATION_TYPES NotificationType,RPC_ASYNC_NOTIFICATION_INFO * NotificationInfo)RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec,UUID * MgrTypeUuid,unsigned int WaitForCallsToComplete) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec,UUID * MgrTypeUuid,int RundownContextHandles) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding,RPC_NOTIFICATIONS Notification,unsigned __LONG32 * NotificationsQueued)RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcServerUseAllProtseqs(unsigned int MaxCalls,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseAllProtseqsEx(unsigned int MaxCalls,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseAllProtseqsIf(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseq(RPC_CSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqA(RPC_CSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEp(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEpA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEpEx(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEpExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEpExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEpW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqEx(RPC_CSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqExA(RPC_CSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqExW(RPC_WSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqIf(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqIfA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqIfEx(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqIfExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqIfExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor,PRPC_POLICY Policy) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqIfW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerUseProtseqW(RPC_WSTR Protseq,unsigned int MaxCalls,void * SecurityDescriptor) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcServerYield(void) RPCRTAPI void RPC_ENTRY <rpcdce.h>
RpcSmAllocate(size_t Size,RPC_STATUS * pStatus) RPCRTAPI void<rpcndr.h>
RpcSmClientFree(void * pNodeToFree) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmDestroyClientContext(void ** ContextHandle) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmDisableAllocate(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmEnableAllocate(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmFree(void * NodeToFree) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmGetThreadHandle(RPC_STATUS * pStatus) RPCRTAPI RPC_SS_THREAD_HANDLE RPC_ENTRY <rpcndr.h>
RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc,RPC_CLIENT_FREE * ClientFree) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc,RPC_CLIENT_FREE * ClientFree,RPC_CLIENT_ALLOC ** OldClientAlloc,RPC_CLIENT_FREE ** OldClientFree) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcndr.h>
RpcSsAllocate(size_t Size) RPCRTAPI void<rpcndr.h>
RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcasync.h>
RpcSsDestroyClientContext(void ** ContextHandle) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcSsDisableAllocate(void) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcSsDontSerializeContext(void) RPCRTAPI void RPC_ENTRY <rpcdce.h>
RpcSsEnableAllocate(void) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcSsFree(void * NodeToFree) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcSsGetContextBinding(void * ContextHandle,RPC_BINDING_HANDLE * Binding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcSsGetThreadHandle(void) RPCRTAPI RPC_SS_THREAD_HANDLE RPC_ENTRY <rpcndr.h>
RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc,RPC_CLIENT_FREE * ClientFree) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC * ClientAlloc,RPC_CLIENT_FREE * ClientFree,RPC_CLIENT_ALLOC ** OldClientAlloc,RPC_CLIENT_FREE ** OldClientFree) RPCRTAPI void RPC_ENTRY <rpcndr.h>
RpcStringBindingCompose(RPC_CSTR ObjUuid,RPC_CSTR Protseq,RPC_CSTR NetworkAddr,RPC_CSTR Endpoint,RPC_CSTR Options,RPC_CSTR * StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringBindingComposeA(RPC_CSTR ObjUuid,RPC_CSTR Protseq,RPC_CSTR NetworkAddr,RPC_CSTR Endpoint,RPC_CSTR Options,RPC_CSTR * StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringBindingComposeW(RPC_WSTR ObjUuid,RPC_WSTR Protseq,RPC_WSTR NetworkAddr,RPC_WSTR Endpoint,RPC_WSTR Options,RPC_WSTR * StringBinding) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringBindingParse(RPC_CSTR StringBinding,RPC_CSTR * ObjUuid,RPC_CSTR * Protseq,RPC_CSTR * NetworkAddr,RPC_CSTR * Endpoint,RPC_CSTR * NetworkOptions) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringBindingParseA(RPC_CSTR StringBinding,RPC_CSTR * ObjUuid,RPC_CSTR * Protseq,RPC_CSTR * NetworkAddr,RPC_CSTR * Endpoint,RPC_CSTR * NetworkOptions) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringBindingParseW(RPC_WSTR StringBinding,RPC_WSTR * ObjUuid,RPC_WSTR * Protseq,RPC_WSTR * NetworkAddr,RPC_WSTR * Endpoint,RPC_WSTR * NetworkOptions) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringFree(RPC_CSTR * String) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringFreeA(RPC_CSTR * String) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcStringFreeW(RPC_WSTR * String) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcTestCancel(void) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
RpcUserFree(handle_t AsyncHandle,void * pBuffer) void RPC_ENTRY <rpcndr.h>
RPMGetAvailableDevices(HANDLE RegisteredDriver,USHORT Locale,PUSBRPM_DEVICE_LIST * DeviceList)<usbrpmif.h>
RPMLoadAlternateDriverForDevice(HANDLE RegisteredDriver,ULONG64 HubID,ULONG ConnectionIndex,REFGUID OwnerGuid)<usbrpmif.h>
RPMRegisterAlternateDriver(PDRIVER_OBJECT DriverObject,LPCWSTR CompatibleId,PHANDLE RegisteredDriver)<usbrpmif.h>
RPMUnloadAlternateDriverForDevice(HANDLE RegisteredDriver,ULONG64 HubID,ULONG ConnectionIndex)<usbrpmif.h>
RPMUnregisterAlternateDriver(HANDLE RegisteredDriver)<usbrpmif.h>
RR_FROM_SVCID(_RR)<svcguid.h>
RsopAccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pPrincipalSelfSid,PRSOPTOKEN pRsopToken,DWORD dwDesiredAccessMask,POBJECT_TYPE_LIST pObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING pGenericMapping,PPRIVILEGE_SET pPrivilegeSet,LPDWORD pdwPrivilegeSetLength,LPDWORD pdwGrantedAccessMask,LPBOOL pbAccessStatus) USERENVAPI HRESULT WINAPI <userenv.h>
RsopFileAccessCheck(LPWSTR pszFileName,PRSOPTOKEN pRsopToken,DWORD dwDesiredAccessMask,LPDWORD pdwGrantedAccessMask,LPBOOL pbAccessStatus) USERENVAPI HRESULT WINAPI <userenv.h>
RsopResetPolicySettingStatus(DWORD dwFlags,IWbemServices * pServices,IWbemClassObject * pSettingInstance) USERENVAPI HRESULT WINAPI <userenv.h>
RsopSetPolicySettingStatus(DWORD dwFlags,IWbemServices * pServices,IWbemClassObject * pSettingInstance,DWORD nInfo,POLICYSETTINGSTATUSINFO * pStatus) USERENVAPI HRESULT WINAPI <userenv.h>
RSVP_BYTE_MULTIPLE(x)<qospol.h>
RTASSERT(exp)<rtutils.h>
RTASSERTMSG(msg,exp)<rtutils.h>
RTFSync(LPMESSAGE lpMessage,ULONG ulFlags,WINBOOL * lpfMessageUpdated) STDAPI_<wabutil.h>
RTL_BITS_OF(sizeOfArg)<winnt.h>
RTL_BITS_OF_FIELD()()()
RTL_BITS_OF_FIELD(type, field)<winnt.h>
RTL_BITS_OF_FIELD(type,field)<winnt.h>
RTL_CONST_CAST(type)<winnt.h>
RTL_CONSTANT_STRING(s)<ntdef.h>
RTL_CONTAINS_FIELD()()()
RTL_CONTAINS_FIELD(Struct, Size, Field)<winnt.h>
RTL_CONTAINS_FIELD(Struct,Size,Field)<winnt.h>
RTL_CONTEXT_CHUNK(Context, Chunk)<wdm.h>
RTL_CONTEXT_EX_CHUNK(Base, Layout, Chunk)<wdm.h>
RTL_CONTEXT_EX_LENGTH(ContextEx, Chunk)<wdm.h>
RTL_CONTEXT_EX_OFFSET(ContextEx, Chunk)<wdm.h>
RTL_CONTEXT_LENGTH(Context, Chunk)<wdm.h>
RTL_CONTEXT_OFFSET(Context, Chunk)<wdm.h>
RTL_FIELD_SIZE()()()
RTL_FIELD_SIZE(type, field)<winnt.h>
RTL_FIELD_SIZE(type,field)<winnt.h>
RTL_FIELD_TYPE()()()
RTL_FIELD_TYPE(type, field)<winnt.h>
RTL_FIELD_TYPE(type,field)<winnt.h>
RTL_NUMBER_OF_FIELD(type,field)<winnt.h>
RTL_NUMBER_OF_V1(A)<winnt.h>
RTL_NUMBER_OF_V2(A)<winnt.h>
RTL_SIZEOF_THROUGH_FIELD()()()
RTL_SIZEOF_THROUGH_FIELD(type, field)<winnt.h>
RTL_SIZEOF_THROUGH_FIELD(type,field)<winnt.h>
RTL_SOFT_ASSERT(exp)<wdm.h>
RTL_SOFT_ASSERTMSG(msg, exp)<wdm.h>
RTL_SOFT_VERIFY(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp) RTL_SOFT_ASSERT(exp)<wdm.h>
RTL_SOFT_VERIFY(exp)<wdm.h>
RTL_SOFT_VERIFYMSG(msg, exp)<wdm.h>
RTL_STATIC_LIST_HEAD(x)<wdm.h>
RTL_VERIFIER_DLL_LOAD_CALLBACK(PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved)typedef VOID<winnt.h>
RTL_VERIFIER_DLL_UNLOAD_CALLBACK(PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved)typedef VOID<winnt.h>
RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK(PVOID AllocationBase,SIZE_T AllocationSize)typedef VOID<winnt.h>
RTL_VERIFY(exp) ASSERT(exp) ASSERT(exp) ASSERT(exp) ASSERT(exp) ASSERT(exp) ASSERT(exp) ASSERT(exp) ASSERT(exp)<wdm.h>
RTL_VERIFY(exp)<wdm.h>
RTL_VERIFYMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp) ASSERTMSG(msg, exp)<wdm.h>
RTL_VERIFYMSG(msg, exp)<wdm.h>
RtlAbsoluteToSelfRelativeSD(IN PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,OUT PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor OPTIONAL,IN OUT PULONG BufferLength)<ntifs.h>
RtlActiveEnumeratorsHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlAddAccessAllowedAce(IN OUT PACL Acl,IN ULONG AceRevision,IN ACCESS_MASK AccessMask,IN PSID Sid)<ntifs.h>
RtlAddAccessAllowedAceEx(IN OUT PACL Acl,IN ULONG AceRevision,IN ULONG AceFlags,IN ACCESS_MASK AccessMask,IN PSID Sid)<ntifs.h>
RtlAddAce(IN OUT PACL Acl,IN ULONG AceRevision,IN ULONG StartingAceIndex,IN PVOID AceList,IN ULONG AceListLength)<ntifs.h>
RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable,DWORD EntryCount,DWORD BaseAddress)NTSYSAPI BOOLEAN __cdecl <winnt.h>
RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable,DWORD EntryCount,DWORD64 BaseAddress)NTSYSAPI BOOLEAN __cdecl <winnt.h>
RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable,DWORD EntryCount,ULONGLONG BaseAddress,ULONGLONG TargetGp)NTSYSAPI BOOLEAN NTAPI <winnt.h>
RtlAddGrowableFunctionTable(PVOID * DynamicTable,PRUNTIME_FUNCTION FunctionTable,DWORD EntryCount,DWORD MaximumEntryCount,ULONG_PTR RangeBase,ULONG_PTR RangeEnd)NTSYSAPI DWORD NTAPI <winnt.h>
RtlAllocateAndInitializeSid(IN PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,IN UCHAR SubAuthorityCount,IN ULONG SubAuthority0,IN ULONG SubAuthority1,IN ULONG SubAuthority2,IN ULONG SubAuthority3,IN ULONG SubAuthority4,IN ULONG SubAuthority5,IN ULONG SubAuthority6,IN ULONG SubAuthority7,OUT PSID * Sid)<ntifs.h>
RtlAllocateHeap(IN HANDLE HeapHandle,IN ULONG Flags OPTIONAL,IN SIZE_T Size)<winternl.h>
RtlAllocateHeap(PVOID HeapHandle,ULONG Flags,SIZE_T Size) PVOID NTAPI <winternl.h>
RtlAnsiStringToUnicodeSize(String)<wdm.h>
RtlAnsiStringToUnicodeString(IN OUT PUNICODE_STRING DestinationString,IN PANSI_STRING SourceString,IN BOOLEAN AllocateDestinationString)<winternl.h>
RtlAnsiStringToUnicodeString(PUNICODE_STRING DestinationString,PCANSI_STRING SourceString,BOOLEAN AllocateDestinationString) NTSTATUS NTAPI <winternl.h>
RtlAppendStringToString(IN OUT PSTRING Destination,IN const STRING * Source)<ntifs.h>
RtlAppendUnicodeStringToString(IN OUT PUNICODE_STRING Destination,IN PCUNICODE_STRING Source)<wdm.h>
RtlAppendUnicodeToString(IN OUT PUNICODE_STRING Destination,IN PCWSTR Source)<wdm.h>
RtlApplicationVerifierStop(ULONG_PTR Code,PSTR Message,ULONG_PTR Param1,PSTR Description1,ULONG_PTR Param2,PSTR Description2,ULONG_PTR Param3,PSTR Description3,ULONG_PTR Param4,PSTR Description4)VOID NTAPI <winnt.h>
RtlAreBitsClear(IN PRTL_BITMAP BitMapHeader,IN ULONG StartingIndex,IN ULONG Length)<wdm.h>
RtlAreBitsSet(IN PRTL_BITMAP BitMapHeader,IN ULONG StartingIndex,IN ULONG Length)<wdm.h>
RtlAssert(IN PVOID FailedAssertion,IN PVOID FileName,IN ULONG LineNumber,IN PSTR Message)<wdm.h>
RtlCaptureContext(OUT PCONTEXT ContextRecord)<winnt.h>
RtlCaptureContext(PCONTEXT ContextRecord)NTSYSAPI VOID NTAPI <winnt.h>
RtlCaptureStackBackTrace(DWORD FramesToSkip,DWORD FramesToCapture,PVOID * BackTrace,PDWORD BackTraceHash)NTSYSAPI WORD NTAPI <winnt.h>
RtlCaptureStackBackTrace(IN ULONG FramesToSkip,IN ULONG FramesToCapture,OUT PVOID * BackTrace,OUT PULONG BackTraceHash OPTIONAL)<winnt.h>
RtlCharToInteger(IN PCSZ String,IN ULONG Base OPTIONAL,OUT PULONG Value)<winternl.h>
RtlCharToInteger(PCSZ String,ULONG Base,PULONG Value) NTSTATUS NTAPI <winternl.h>
RtlCheckBit(BMH,BP)<wdm.h>
RtlCheckBit(IN PRTL_BITMAP BitMapHeader,IN ULONG BitPosition)<wdm.h>
RtlCheckRegistryKey(IN ULONG RelativeTo,IN PWSTR Path)<wdm.h>
RtlClearAllBits(IN PRTL_BITMAP BitMapHeader)<wdm.h>
RtlClearBit(PRTL_BITMAP BitMapHeader,ULONG BitNumber)<wdm.h>
RtlClearBits(IN PRTL_BITMAP BitMapHeader,IN ULONG StartingIndex,IN ULONG NumberToClear)<wdm.h>
RtlCmDecodeMemIoResource(IN struct _CM_PARTIAL_RESOURCE_DESCRIPTOR * Descriptor,OUT PULONGLONG Start OPTIONAL)<wdm.h>
RtlCmEncodeMemIoResource(IN PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor,IN UCHAR Type,IN ULONGLONG Length,IN ULONGLONG Start)<wdm.h>
RtlCompareAltitudes(IN PCUNICODE_STRING Altitude1,IN PCUNICODE_STRING Altitude2)<ntifs.h>
RtlCompareMemory(const VOID * Source1,const VOID * Source2,SIZE_T Length)NTSYSAPI SIZE_T NTAPI <winnt.h>
RtlCompareMemory(IN CONST VOID * Source1,IN CONST VOID * Source2,IN SIZE_T Length)<winnt.h>
RtlCompareMemoryUlong(IN PVOID Source,IN SIZE_T Length,IN ULONG Pattern)<ntifs.h>
RtlCompareString(IN const PSTRING String1,IN const PSTRING String2,IN BOOLEAN CaseInSensitive)<ntddk.h>
RtlCompareUnicodeString(IN PCUNICODE_STRING String1,IN PCUNICODE_STRING String2,IN BOOLEAN CaseInSensitive)<wdm.h>
RtlCompareUnicodeStrings(IN PCWCH String1,IN SIZE_T String1Length,IN PCWCH String2,IN SIZE_T String2Length,IN BOOLEAN CaseInSensitive)<wdm.h>
RtlCompressBuffer(IN USHORT CompressionFormatAndEngine,IN PUCHAR UncompressedBuffer,IN ULONG UncompressedBufferSize,OUT PUCHAR CompressedBuffer,IN ULONG CompressedBufferSize,IN ULONG UncompressedChunkSize,OUT PULONG FinalCompressedSize,IN PVOID WorkSpace)<ntifs.h>
RtlCompressChunks(IN PUCHAR UncompressedBuffer,IN ULONG UncompressedBufferSize,OUT PUCHAR CompressedBuffer,IN ULONG CompressedBufferSize,IN OUT PCOMPRESSED_DATA_INFO CompressedDataInfo,IN ULONG CompressedDataInfoLength,IN PVOID WorkSpace)<ntifs.h>
RtlContractHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlConvertLongToLargeInteger(IN LONG SignedInteger)<wdm.h>
RtlConvertLongToLuid(IN LONG Val)<ntddk.h>
RtlConvertSidToUnicodeString(IN OUT PUNICODE_STRING UnicodeString,IN PSID Sid,IN BOOLEAN AllocateDestinationString)<winternl.h>
RtlConvertSidToUnicodeString(PUNICODE_STRING UnicodeString,PSID Sid,BOOLEAN AllocateDestinationString) NTSTATUS NTAPI <winternl.h>
RtlConvertUlongToLargeInteger(IN ULONG UnsignedInteger)<wdm.h>
RtlConvertUlongToLuid(IN ULONG Val)<ntddk.h>
RtlCopyLuid(OUT PLUID DestinationLuid,IN PLUID SourceLuid)<ntifs.h>
RtlCopyMemory(Destination, Source, Length)<winnt.h>
RtlCopyMemory(Destination,Source,Length)<winnt.h>
RtlCopyMemoryNonTemporal(VOID UNALIGNED * Destination,CONST VOID UNALIGNED * Source,SIZE_T Length)<wdm.h>
RtlCopySid(IN ULONG Length,IN PSID Destination,IN PSID Source)<ntifs.h>
RtlCopyString(OUT PSTRING DestinationString,IN const PSTRING SourceString OPTIONAL)<ntddk.h>
RtlCopyUnicodeString(IN OUT PUNICODE_STRING DestinationString,IN PCUNICODE_STRING SourceString OPTIONAL)<wdm.h>
RtlCrc32(const void * Buffer,size_t Size,DWORD InitialCrc)NTSYSAPI DWORD NTAPI <winnt.h>
RtlCrc64(const void * Buffer,size_t Size,ULONGLONG InitialCrc)NTSYSAPI ULONGLONG NTAPI <winnt.h>
RtlCreateAcl(OUT PACL Acl,IN ULONG AclLength,IN ULONG AclRevision)<ntifs.h>
RtlCreateHashTable(IN OUT PRTL_DYNAMIC_HASH_TABLE * HashTable OPTIONAL,IN ULONG Shift,IN ULONG Flags)<ntddk.h>
RtlCreateHeap(IN ULONG Flags,IN PVOID HeapBase OPTIONAL,IN SIZE_T ReserveSize OPTIONAL,IN SIZE_T CommitSize OPTIONAL,IN PVOID Lock OPTIONAL,IN PRTL_HEAP_PARAMETERS Parameters OPTIONAL)<winternl.h>
RtlCreateHeap(ULONG Flags,PVOID HeapBase,SIZE_T ReserveSize,SIZE_T CommitSize,PVOID Lock,PRTL_HEAP_PARAMETERS Parameters) PVOID NTAPI <winternl.h>
RtlCreateRegistryKey(IN ULONG RelativeTo,IN PWSTR Path)<wdm.h>
RtlCreateSecurityDescriptor(IN OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN ULONG Revision)<wdm.h>
RtlCreateSecurityDescriptorRelative(OUT PISECURITY_DESCRIPTOR_RELATIVE SecurityDescriptor,IN ULONG Revision)<ntifs.h>
RtlCreateServiceSid(IN PUNICODE_STRING ServiceName,OUT PSID ServiceSid,IN OUT PULONG ServiceSidLength)<ntifs.h>
RtlCreateSystemVolumeInformationFolder(IN PCUNICODE_STRING VolumeRootPath)<ntifs.h>
RtlCreateUnicodeString(OUT PUNICODE_STRING DestinationString,IN PCWSTR SourceString)<ntifs.h>
RtlCreateUnicodeStringFromAsciiz(PUNICODE_STRING target,LPCSTR src) BOOLEAN NTAPI <winternl.h>
RtlCreateVirtualAccountSid(IN PCUNICODE_STRING Name,IN ULONG BaseSubAuthority,OUT PSID Sid,IN OUT PULONG SidLength)<ntifs.h>
RtlCustomCPToUnicodeN(IN PCPTABLEINFO CustomCP,OUT PWCH UnicodeString,IN ULONG MaxBytesInUnicodeString,OUT PULONG BytesInUnicodeString OPTIONAL,IN PCH CustomCPString,IN ULONG BytesInCustomCPString)<ntifs.h>
RtlDecompressBuffer(IN USHORT CompressionFormat,OUT PUCHAR UncompressedBuffer,IN ULONG UncompressedBufferSize,IN PUCHAR CompressedBuffer,IN ULONG CompressedBufferSize,OUT PULONG FinalUncompressedSize)<ntifs.h>
RtlDecompressChunks(OUT PUCHAR UncompressedBuffer,IN ULONG UncompressedBufferSize,IN PUCHAR CompressedBuffer,IN ULONG CompressedBufferSize,IN PUCHAR CompressedTail,IN ULONG CompressedTailSize,IN PCOMPRESSED_DATA_INFO CompressedDataInfo)<ntifs.h>
RtlDecompressFragment(IN USHORT CompressionFormat,OUT PUCHAR UncompressedFragment,IN ULONG UncompressedFragmentSize,IN PUCHAR CompressedBuffer,IN ULONG CompressedBufferSize,IN ULONG FragmentOffset,OUT PULONG FinalUncompressedSize,IN PVOID WorkSpace)<ntifs.h>
RtlDecryptMemory(PVOID Memory,ULONG MemorySize,ULONG OptionFlags) NTSTATUS <ntsecapi.h>
RtlDelete(IN PRTL_SPLAY_LINKS Links)<ntddk.h>
RtlDeleteAce(IN OUT PACL Acl,IN ULONG AceIndex)<ntifs.h>
RtlDeleteElementGenericTable(IN PRTL_GENERIC_TABLE Table,IN PVOID Buffer)<ntddk.h>
RtlDeleteElementGenericTableAvl(IN PRTL_AVL_TABLE Table,IN PVOID Buffer)<ntddk.h>
RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable)NTSYSAPI BOOLEAN __cdecl <winnt.h>
RtlDeleteGrowableFunctionTable(PVOID DynamicTable)NTSYSAPI VOID NTAPI <winnt.h>
RtlDeleteHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlDeleteNoSplay(IN PRTL_SPLAY_LINKS Links,IN OUT PRTL_SPLAY_LINKS * Root)<ntddk.h>
RtlDeleteRegistryValue(IN ULONG RelativeTo,IN PCWSTR Path,IN PCWSTR ValueName)<wdm.h>
RtlDescribeChunk(IN USHORT CompressionFormat,IN OUT PUCHAR * CompressedBuffer,IN PUCHAR EndOfCompressedBufferPlus1,OUT PUCHAR * ChunkBuffer,OUT PULONG ChunkSize)<ntifs.h>
RtlDestroyHeap(IN PVOID HeapHandle)<winternl.h>
RtlDestroyHeap(PVOID HeapHandle) PVOID NTAPI <winternl.h>
RtlDosPathNameToNtPathName_U(PCWSTR DosPathName,PUNICODE_STRING NtPathName,PCWSTR * NtFileNamePart,VOID * DirectoryInfo) BOOL NTAPI <winternl.h>
RtlDowncaseUnicodeChar(IN WCHAR SourceCharacter)<wdm.h>
RtlDowncaseUnicodeString(IN OUT PUNICODE_STRING UniDest,IN PCUNICODE_STRING UniSource,IN BOOLEAN AllocateDestinationString)<ntifs.h>
RtlDuplicateUnicodeString(IN ULONG Flags,IN PCUNICODE_STRING SourceString,OUT PUNICODE_STRING DestinationString)<ntifs.h>
RtlEmptyBucketsHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlEncryptMemory(PVOID Memory,ULONG MemorySize,ULONG OptionFlags) NTSTATUS <ntsecapi.h>
RtlEndEnumerationHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN OUT PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlEndWeakEnumerationHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN OUT PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlEnlargedIntegerMultiply(IN LONG Multiplicand,IN LONG Multiplier)<wdm.h>
RtlEnlargedUnsignedDivide(IN ULARGE_INTEGER Dividend,IN ULONG Divisor,IN OUT PULONG Remainder)<wdm.h>
RtlEnlargedUnsignedMultiply(IN ULONG Multiplicand,IN ULONG Multiplier)<wdm.h>
RtlEnumerateEntryHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN OUT PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlEnumerateGenericTable(IN PRTL_GENERIC_TABLE Table,IN BOOLEAN Restart)<ntddk.h>
RtlEnumerateGenericTableAvl(IN PRTL_AVL_TABLE Table,IN BOOLEAN Restart)<ntddk.h>
RtlEnumerateGenericTableLikeADirectory(IN PRTL_AVL_TABLE Table,IN PRTL_AVL_MATCH_FUNCTION MatchFunction OPTIONAL,IN PVOID MatchData OPTIONAL,IN ULONG NextFlag,IN OUT PVOID * RestartKey,IN OUT PULONG DeleteCount,IN PVOID Buffer)<ntddk.h>
RtlEnumerateGenericTableWithoutSplaying(IN PRTL_GENERIC_TABLE Table,IN OUT PVOID * RestartKey)<ntddk.h>
RtlEnumerateGenericTableWithoutSplayingAvl(IN PRTL_AVL_TABLE Table,IN OUT PVOID * RestartKey)<ntddk.h>
RtlEqualLuid(Luid1, Luid2)<wdm.h>
RtlEqualMemory(Destination, Source, Length)<winnt.h>
RtlEqualMemory(Destination,Source,Length)<winnt.h>
RtlEqualPrefixSid(IN PSID Sid1,IN PSID Sid2)<ntifs.h>
RtlEqualSid(IN PSID Sid1,IN PSID Sid2)<ntifs.h>
RtlEqualString(IN const PSTRING String1,IN const PSTRING String2,IN BOOLEAN CaseInSensitive)<ntddk.h>
RtlEqualUnicodeString(IN CONST UNICODE_STRING * String1,IN CONST UNICODE_STRING * String2,IN BOOLEAN CaseInSensitive)<wdm.h>
RtlExpandHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlExtendedIntegerMultiply(IN LARGE_INTEGER Multiplicand,IN LONG Multiplier)<wdm.h>
RtlExtendedLargeIntegerDivide(IN LARGE_INTEGER Dividend,IN ULONG Divisor,OUT PULONG Remainder OPTIONAL)<wdm.h>
RtlExtendedMagicDivide(IN LARGE_INTEGER Dividend,IN LARGE_INTEGER MagicDivisor,IN CCHAR ShiftCount)<wdm.h>
RtlFillMemory(Destination, Length, Fill)<winternl.h>
RtlFillMemory(Destination,Length,Fill)<winternl.h>
RtlFillMemoryUlong(OUT PVOID Destination,IN SIZE_T Length,IN ULONG Pattern)<ntifs.h>
RtlFillMemoryUlonglong(Destination, Length, Pattern)<ntifs.h>
RtlFillMemoryUlonglong(OUT PVOID Destination,IN SIZE_T Length,IN ULONGLONG Pattern)<ntifs.h>
RtlFindClearBits(IN PRTL_BITMAP BitMapHeader,IN ULONG NumberToFind,IN ULONG HintIndex)<wdm.h>
RtlFindClearBitsAndSet(IN PRTL_BITMAP BitMapHeader,IN ULONG NumberToFind,IN ULONG HintIndex)<wdm.h>
RtlFindClearRuns(IN PRTL_BITMAP BitMapHeader,OUT PRTL_BITMAP_RUN RunArray,IN ULONG SizeOfRunArray,IN BOOLEAN LocateLongestRuns)<wdm.h>
RtlFindClosestEncodableLength(IN ULONGLONG SourceLength,OUT PULONGLONG TargetLength)<wdm.h>
RtlFindFirstRunClear(IN PRTL_BITMAP BitMapHeader,OUT PULONG StartingIndex)<wdm.h>
RtlFindLastBackwardRunClear(IN PRTL_BITMAP BitMapHeader,IN ULONG FromIndex,OUT PULONG StartingRunIndex)<wdm.h>
RtlFindLeastSignificantBit(IN ULONGLONG Set)<wdm.h>
RtlFindLongestRunClear(IN PRTL_BITMAP BitMapHeader,OUT PULONG StartingIndex)<wdm.h>
RtlFindMostSignificantBit(IN ULONGLONG Set)<wdm.h>
RtlFindNextForwardRunClear(IN PRTL_BITMAP BitMapHeader,IN ULONG FromIndex,OUT PULONG StartingRunIndex)<wdm.h>
RtlFindSetBits(IN PRTL_BITMAP BitMapHeader,IN ULONG NumberToFind,IN ULONG HintIndex)<wdm.h>
RtlFindSetBitsAndClear(IN PRTL_BITMAP BitMapHeader,IN ULONG NumberToFind,IN ULONG HintIndex)<wdm.h>
RtlFindUnicodePrefix(IN PUNICODE_PREFIX_TABLE PrefixTable,IN PUNICODE_STRING FullName,IN ULONG CaseInsensitiveIndex)<ntifs.h>
RtlFirstEntrySList(const SLIST_HEADER * ListHead)NTSYSAPI PSLIST_ENTRY NTAPI <winnt.h>
RtlFreeAnsiString(IN PANSI_STRING AnsiString)<winternl.h>
RtlFreeAnsiString(PANSI_STRING AnsiString) VOID NTAPI <winternl.h>
RtlFreeHeap(IN PVOID HeapHandle,IN ULONG Flags OPTIONAL,IN PVOID BaseAddress)<winternl.h>
RtlFreeHeap(PVOID HeapHandle,ULONG Flags,PVOID HeapBase) BOOLEAN NTAPI <winternl.h>
RtlFreeOemString(IN OUT POEM_STRING OemString)<winternl.h>
RtlFreeOemString(POEM_STRING OemString) VOID NTAPI <winternl.h>
RtlFreeSid(IN PSID Sid)<ntifs.h>
RtlFreeUnicodeString(IN OUT PUNICODE_STRING UnicodeString)<winternl.h>
RtlFreeUnicodeString(PUNICODE_STRING UnicodeString) VOID NTAPI <winternl.h>
RtlGenerate8dot3Name(IN PCUNICODE_STRING Name,IN BOOLEAN AllowExtendedCharacters,IN OUT PGENERATE_NAME_CONTEXT Context,IN OUT PUNICODE_STRING Name8dot3)<ntifs.h>
RtlGenRandom(PVOID RandomBuffer,ULONG RandomBufferLength) BOOLEAN <ntsecapi.h>
RtlGetAce(IN PACL Acl,IN ULONG AceIndex,OUT PVOID * Ace)<ntifs.h>
RtlGetCallersAddress(CallersAddress, CallersCaller)<ntddk.h>
RtlGetCallersAddress(OUT PVOID * CallersAddress,OUT PVOID * CallersCaller)<ntddk.h>
RtlGetCompressionWorkSpaceSize(IN USHORT CompressionFormatAndEngine,OUT PULONG CompressBufferWorkSpaceSize,OUT PULONG CompressFragmentWorkSpaceSize)<ntifs.h>
RtlGetDaclSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptor,OUT PBOOLEAN DaclPresent,OUT PACL * Dacl,OUT PBOOLEAN DaclDefaulted)<ntifs.h>
RtlGetElementGenericTable(IN PRTL_GENERIC_TABLE Table,IN ULONG I)<ntddk.h>
RtlGetElementGenericTableAvl(IN PRTL_AVL_TABLE Table,IN ULONG I)<ntddk.h>
RtlGetEnabledExtendedFeatures(IN ULONG64 FeatureMask)<wdm.h>
RtlGetGroupSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptor,OUT PSID * Group,OUT PBOOLEAN GroupDefaulted)<ntifs.h>
RtlGetNextEntryHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context)<ntddk.h>
RtlGetOwnerSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptor,OUT PSID * Owner,OUT PBOOLEAN OwnerDefaulted)<ntifs.h>
RtlGetProductInfo(DWORD OSMajorVersion,DWORD OSMinorVersion,DWORD SpMajorVersion,DWORD SpMinorVersion,PDWORD ReturnedProductType)NTSYSAPI BOOLEAN NTAPI <winnt.h>
RtlGetProductInfo(IN ULONG OSMajorVersion,IN ULONG OSMinorVersion,IN ULONG SpMajorVersion,IN ULONG SpMinorVersion,OUT PULONG ReturnedProductType)<winnt.h>
RtlGetSaclSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptor,OUT PBOOLEAN SaclPresent,OUT PACL * Sacl,OUT PBOOLEAN SaclDefaulted)<ntifs.h>
RtlGetVersion(IN OUT PRTL_OSVERSIONINFOW lpVersionInformation)<ntddk.h>
RtlGrowFunctionTable(PVOID DynamicTable,DWORD NewEntryCount)NTSYSAPI VOID NTAPI <winnt.h>
RtlGUIDFromString(IN PUNICODE_STRING GuidString,OUT GUID * Guid)<wdm.h>
RtlHashUnicodeString(IN CONST UNICODE_STRING * String,IN BOOLEAN CaseInSensitive,IN ULONG HashAlgorithm,OUT PULONG HashValue)<wdm.h>
RtlIdentifierAuthoritySid(IN PSID Sid)<ntifs.h>
RtlIdnToAscii(IN ULONG Flags,IN PCWSTR SourceString,IN LONG SourceStringLength,OUT PWSTR DestinationString,IN OUT PLONG DestinationStringLength)<ntifs.h>
RtlIdnToNameprepUnicode(IN ULONG Flags,IN PCWSTR SourceString,IN LONG SourceStringLength,OUT PWSTR DestinationString,IN OUT PLONG DestinationStringLength)<ntifs.h>
RtlIdnToUnicode(IN ULONG Flags,IN PCWSTR SourceString,IN LONG SourceStringLength,OUT PWSTR DestinationString,IN OUT PLONG DestinationStringLength)<ntifs.h>
RtlInitAnsiString(IN OUT PANSI_STRING DestinationString,IN PCSZ SourceString)<winternl.h>
RtlInitAnsiString(PANSI_STRING DestinationString,PCSZ SourceString) VOID NTAPI <winternl.h>
RtlInitAnsiStringEx(OUT PANSI_STRING DestinationString,IN PCSZ SourceString OPTIONAL)<ntifs.h>
RtlInitCodePageTable(IN PUSHORT TableBase,IN OUT PCPTABLEINFO CodePageTable)<ntifs.h>
RtlInitEmptyAnsiString(OUT PANSI_STRING AnsiString,IN PCHAR Buffer,IN USHORT BufferSize)<wdm.h>
RtlInitEmptyUnicodeString(OUT PUNICODE_STRING UnicodeString,IN PWSTR Buffer,IN USHORT BufferSize)<wdm.h>
RtlInitEnumerationHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,OUT PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlInitHashTableContext(IN OUT PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context)<ntddk.h>
RtlInitHashTableContextFromEnumerator(IN OUT PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context,IN PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlInitializeBitMap(IN PRTL_BITMAP BitMapHeader,IN PULONG BitMapBuffer,IN ULONG SizeOfBitMap)<wdm.h>
RtlInitializeGenericTable(OUT PRTL_GENERIC_TABLE Table,IN PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine,IN PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine,IN PRTL_GENERIC_FREE_ROUTINE FreeRoutine,IN PVOID TableContext OPTIONAL)<ntddk.h>
RtlInitializeGenericTableAvl(OUT PRTL_AVL_TABLE Table,IN PRTL_AVL_COMPARE_ROUTINE CompareRoutine,IN PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine,IN PRTL_AVL_FREE_ROUTINE FreeRoutine,IN PVOID TableContext OPTIONAL)<ntddk.h>
RtlInitializeSid(OUT PSID Sid,IN PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,IN UCHAR SubAuthorityCount)<ntifs.h>
RtlInitializeSplayLinks(Links)<ntddk.h>
RtlInitializeUnicodePrefix(OUT PUNICODE_PREFIX_TABLE PrefixTable)<ntifs.h>
RtlInitString(IN OUT PSTRING DestinationString,IN PCSZ SourceString)<winternl.h>
RtlInitString(PSTRING DestinationString,PCSZ SourceString) VOID NTAPI <winternl.h>
RtlInitUnicodeString(IN OUT PUNICODE_STRING DestinationString,IN PCWSTR SourceString OPTIONAL)<winternl.h>
RtlInitUnicodeString(PUNICODE_STRING DestinationString,PCWSTR SourceString) VOID NTAPI <winternl.h>
RtlInitUnicodeStringEx(OUT PUNICODE_STRING DestinationString,IN PCWSTR SourceString OPTIONAL)<ntifs.h>
RtlInitWeakEnumerationHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,OUT PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlInsertAsLeftChild(ParentLinks,ChildLinks)<ntddk.h>
RtlInsertAsRightChild(ParentLinks,ChildLinks)<ntddk.h>
RtlInsertElementGenericTable(IN PRTL_GENERIC_TABLE Table,IN PVOID Buffer,IN CLONG BufferSize,OUT PBOOLEAN NewElement OPTIONAL)<ntddk.h>
RtlInsertElementGenericTableAvl(IN PRTL_AVL_TABLE Table,IN PVOID Buffer,IN CLONG BufferSize,OUT PBOOLEAN NewElement OPTIONAL)<ntddk.h>
RtlInsertElementGenericTableFull(IN PRTL_GENERIC_TABLE Table,IN PVOID Buffer,IN CLONG BufferSize,OUT PBOOLEAN NewElement OPTIONAL,IN PVOID NodeOrParent,IN TABLE_SEARCH_RESULT SearchResult)<ntddk.h>
RtlInsertElementGenericTableFullAvl(IN PRTL_AVL_TABLE Table,IN PVOID Buffer,IN CLONG BufferSize,OUT PBOOLEAN NewElement OPTIONAL,IN PVOID NodeOrParent,IN TABLE_SEARCH_RESULT SearchResult)<ntddk.h>
RtlInsertEntryHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry,IN ULONG_PTR Signature,IN OUT PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context OPTIONAL)<ntddk.h>
RtlInsertUnicodePrefix(IN PUNICODE_PREFIX_TABLE PrefixTable,IN PUNICODE_STRING Prefix,OUT PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry)<ntifs.h>
RtlInstallFunctionTableCallback(DWORD TableIdentifier,DWORD BaseAddress,DWORD Length,PGET_RUNTIME_FUNCTION_CALLBACK Callback,PVOID Context,PCWSTR OutOfProcessCallbackDll)NTSYSAPI BOOLEAN __cdecl <winnt.h>
RtlInstallFunctionTableCallback(DWORD64 TableIdentifier,DWORD64 BaseAddress,DWORD Length,DWORD64 TargetGp,PGET_RUNTIME_FUNCTION_CALLBACK Callback,PVOID Context,PCWSTR OutOfProcessCallbackDll)NTSYSAPI BOOLEAN NTAPI <winnt.h>
RtlInstallFunctionTableCallback(DWORD64 TableIdentifier,DWORD64 BaseAddress,DWORD Length,PGET_RUNTIME_FUNCTION_CALLBACK Callback,PVOID Context,PCWSTR OutOfProcessCallbackDll)NTSYSAPI BOOLEAN __cdecl <winnt.h>
RtlInt64ToUnicodeString(IN ULONGLONG Value,IN ULONG Base OPTIONAL,IN OUT PUNICODE_STRING String)<wdm.h>
RtlIntegerToUnicodeString(IN ULONG Value,IN ULONG Base OPTIONAL,IN OUT PUNICODE_STRING String)<wdm.h>
RtlInterlockedAndBits(Flags, Flag)<wdm.h>
RtlInterlockedAndBitsDiscardReturn(Flags, Flag)<wdm.h>
RtlInterlockedClearBits(Flags, Flag)<wdm.h>
RtlInterlockedClearBitsDiscardReturn(Flags, Flag)<wdm.h>
RtlInterlockedFlushSList(PSLIST_HEADER ListHead)NTSYSAPI PSLIST_ENTRY NTAPI <winnt.h>
RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead)NTSYSAPI PSLIST_ENTRY NTAPI <winnt.h>
RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead,PSLIST_ENTRY ListEntry)NTSYSAPI PSLIST_ENTRY NTAPI <winnt.h>
RtlInterlockedPushListSListEx(PSLIST_HEADER ListHead,PSLIST_ENTRY List,PSLIST_ENTRY ListEnd,DWORD Count)NTSYSAPI PSLIST_ENTRY NTAPI <winnt.h>
RtlInterlockedSetBits(Flags, Flag)<wdm.h>
RtlInterlockedSetBitsDiscardReturn(Flags, Flag)<wdm.h>
RtlInterlockedXorBits(Flags, Flag)<wdm.h>
RtlIntPtrToUnicodeString(Value, Base, String)<wdm.h>
RtlIoDecodeMemIoResource(IN struct _IO_RESOURCE_DESCRIPTOR * Descriptor,OUT PULONGLONG Alignment OPTIONAL,OUT PULONGLONG MinimumAddress OPTIONAL,OUT PULONGLONG MaximumAddress OPTIONAL)<wdm.h>
RtlIoEncodeMemIoResource(IN struct _IO_RESOURCE_DESCRIPTOR * Descriptor,IN UCHAR Type,IN ULONGLONG Length,IN ULONGLONG Alignment,IN ULONGLONG MinimumAddress,IN ULONGLONG MaximumAddress)<wdm.h>
RtlIpv4AddressToString(const IN_ADDR * Addr,LPSTR S)LPSTR NTAPI <mstcpip.h>
RtlIpv4AddressToStringA(const IN_ADDR * Addr,LPSTR S)LPSTR NTAPI <mstcpip.h>
RtlIpv4AddressToStringEx(const IN_ADDR * Address,USHORT Port,LPSTR AddressString,PULONG AddressStringLength)LONG NTAPI <mstcpip.h>
RtlIpv4AddressToStringExA(const IN_ADDR * Address,USHORT Port,LPSTR AddressString,PULONG AddressStringLength)LONG NTAPI <mstcpip.h>
RtlIpv4AddressToStringExW(const IN_ADDR * Address,USHORT Port,LPWSTR AddressString,PULONG AddressStringLength)LONG NTAPI <mstcpip.h>
RtlIpv4AddressToStringW(const IN_ADDR * Addr,LPWSTR S)LPWSTR NTAPI <mstcpip.h>
RtlIpv4StringToAddress(PCSTR S,BOOLEAN Strict,LPSTR * Terminator,IN_ADDR * Addr)LONG NTAPI <mstcpip.h>
RtlIpv4StringToAddressA(PCSTR S,BOOLEAN Strict,LPSTR * Terminator,IN_ADDR * Addr)LONG NTAPI <mstcpip.h>
RtlIpv4StringToAddressEx(PCSTR AddressString,BOOLEAN Strict,IN_ADDR * Address,PUSHORT Port)LONG NTAPI <mstcpip.h>
RtlIpv4StringToAddressExA(PCSTR AddressString,BOOLEAN Strict,IN_ADDR * Address,PUSHORT Port)LONG NTAPI <mstcpip.h>
RtlIpv4StringToAddressExW(PCWSTR AddressString,BOOLEAN Strict,IN_ADDR * Address,PUSHORT Port)LONG NTAPI <mstcpip.h>
RtlIpv4StringToAddressW(PCWSTR S,BOOLEAN Strict,LPWSTR * Terminator,IN_ADDR * Addr)LONG NTAPI <mstcpip.h>
RtlIpv6AddressToString(const IN6_ADDR * Addr,LPSTR S)LPSTR NTAPI <mstcpip.h>
RtlIpv6AddressToStringA(const IN6_ADDR * Addr,LPSTR S)LPSTR NTAPI <mstcpip.h>
RtlIpv6AddressToStringEx(const IN6_ADDR * Address,ULONG ScopeId,USHORT Port,LPSTR AddressString,PULONG AddressStringLength)LONG NTAPI <mstcpip.h>
RtlIpv6AddressToStringExA(const IN6_ADDR * Address,ULONG ScopeId,USHORT Port,LPSTR AddressString,PULONG AddressStringLength)LONG NTAPI <mstcpip.h>
RtlIpv6AddressToStringExW(const IN6_ADDR * Address,ULONG ScopeId,USHORT Port,LPWSTR AddressString,PULONG AddressStringLength)LONG NTAPI <mstcpip.h>
RtlIpv6AddressToStringW(const IN6_ADDR * Addr,LPWSTR S)LPWSTR NTAPI <mstcpip.h>
RtlIpv6StringToAddressEx(PCSTR AddressString,IN6_ADDR * Address,PULONG ScopeId,PUSHORT Port)LONG NTAPI <mstcpip.h>
RtlIpv6StringToAddressExA(PCSTR AddressString,IN6_ADDR * Address,PULONG ScopeId,PUSHORT Port)LONG NTAPI <mstcpip.h>
RtlIpv6StringToAddressExW(PCWSTR AddressString,IN6_ADDR * Address,PULONG ScopeId,PUSHORT Port)LONG NTAPI <mstcpip.h>
RtlIsGenericTableEmpty(IN PRTL_GENERIC_TABLE Table)<ntddk.h>
RtlIsGenericTableEmptyAvl(IN PRTL_AVL_TABLE Table)<ntddk.h>
RtlIsLeftChild(Links)<ntddk.h>
RtlIsNameLegalDOS8Dot3(IN PCUNICODE_STRING Name,IN OUT POEM_STRING OemName OPTIONAL,IN OUT PBOOLEAN NameContainsSpaces OPTIONAL)<winternl.h>
RtlIsNameLegalDOS8Dot3(PUNICODE_STRING Name,POEM_STRING OemName,PBOOLEAN NameContainsSpaces) BOOLEAN NTAPI <winternl.h>
RtlIsNormalizedString(IN ULONG NormForm,IN PCWSTR SourceString,IN LONG SourceStringLength,OUT PBOOLEAN Normalized)<ntifs.h>
RtlIsRightChild(Links)<ntddk.h>
RtlIsRoot(Links)<ntddk.h>
RtlIsValidOemCharacter(IN OUT PWCHAR Char)<ntifs.h>
RtlIsZeroLuid(_L1)<wdm.h>
RtlLargeIntegerAdd(IN LARGE_INTEGER Addend1,IN LARGE_INTEGER Addend2)<wdm.h>
RtlLargeIntegerAnd(Result, Source, Mask)<wdm.h>
RtlLargeIntegerArithmeticShift(IN LARGE_INTEGER LargeInteger,IN CCHAR ShiftCount)<wdm.h>
RtlLargeIntegerDivide(IN LARGE_INTEGER Dividend,IN LARGE_INTEGER Divisor,OUT PLARGE_INTEGER Remainder OPTIONAL)<ntddk.h>
RtlLargeIntegerEqualTo(X,Y)<wdm.h>
RtlLargeIntegerEqualToZero(X) <wdm.h>
RtlLargeIntegerGreaterOrEqualToZero(X) <wdm.h>
RtlLargeIntegerGreaterThan(X,Y)<wdm.h>
RtlLargeIntegerGreaterThanOrEqualTo(X,Y)<wdm.h>
RtlLargeIntegerGreaterThanZero(X)<wdm.h>
RtlLargeIntegerLessOrEqualToZero(X) <wdm.h>
RtlLargeIntegerLessThan(X,Y)<wdm.h>
RtlLargeIntegerLessThanOrEqualTo(X,Y)<wdm.h>
RtlLargeIntegerLessThanZero(X)<wdm.h>
RtlLargeIntegerNegate(IN LARGE_INTEGER Subtrahend)<wdm.h>
RtlLargeIntegerNotEqualTo(X,Y)<wdm.h>
RtlLargeIntegerNotEqualToZero(X)<wdm.h>
RtlLargeIntegerShiftLeft(IN LARGE_INTEGER LargeInteger,IN CCHAR ShiftCount)<wdm.h>
RtlLargeIntegerShiftRight(IN LARGE_INTEGER LargeInteger,IN CCHAR ShiftCount)<wdm.h>
RtlLargeIntegerSubtract(IN LARGE_INTEGER Minuend,IN LARGE_INTEGER Subtrahend)<wdm.h>
RtlLeftChild(Links)<ntddk.h>
RtlLengthRequiredSid(IN ULONG SubAuthorityCount)<ntifs.h>
RtlLengthSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptor)<wdm.h>
RtlLengthSid(IN PSID Sid)<ntifs.h>
RtlLocalTimeToSystemTime(PLARGE_INTEGER LocalTime,PLARGE_INTEGER SystemTime) NTSTATUS NTAPI <winternl.h>
RtlLookupElementGenericTable(IN PRTL_GENERIC_TABLE Table,IN PVOID Buffer)<ntddk.h>
RtlLookupElementGenericTableAvl(IN PRTL_AVL_TABLE Table,IN PVOID Buffer)<ntddk.h>
RtlLookupElementGenericTableFull(IN PRTL_GENERIC_TABLE Table,IN PVOID Buffer,OUT PVOID * NodeOrParent,OUT TABLE_SEARCH_RESULT * SearchResult)<ntddk.h>
RtlLookupElementGenericTableFullAvl(IN PRTL_AVL_TABLE Table,IN PVOID Buffer,OUT PVOID * NodeOrParent,OUT TABLE_SEARCH_RESULT * SearchResult)<ntddk.h>
RtlLookupEntryHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN ULONG_PTR Signature,OUT PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context OPTIONAL)<ntddk.h>
RtlLookupFirstMatchingElementGenericTableAvl(IN PRTL_AVL_TABLE Table,IN PVOID Buffer,OUT PVOID * RestartKey)<ntddk.h>
RtlLookupFunctionEntry(DWORD64 ControlPc,PDWORD64 ImageBase,PUNWIND_HISTORY_TABLE HistoryTable)NTSYSAPI PRUNTIME_FUNCTION NTAPI <winnt.h>
RtlLookupFunctionEntry(ULONG_PTR ControlPc,PDWORD ImageBase,PUNWIND_HISTORY_TABLE HistoryTable)NTSYSAPI PRUNTIME_FUNCTION NTAPI <winnt.h>
RtlLookupFunctionEntry(ULONGLONG ControlPc,PULONGLONG ImageBase,PULONGLONG TargetGp)NTSYSAPI PRUNTIME_FUNCTION NTAPI <winnt.h>
RtlMapGenericMask(IN OUT PACCESS_MASK AccessMask,IN PGENERIC_MAPPING GenericMapping)<ntddk.h>
RtlMoveMemory(Destination, Source, Length)<winternl.h>
RtlMoveMemory(Destination,Source,Length)<winternl.h>
RtlMultiByteToUnicodeN(OUT PWCH UnicodeString,IN ULONG MaxBytesInUnicodeString,OUT PULONG BytesInUnicodeString OPTIONAL,IN const CHAR * MultiByteString,IN ULONG BytesInMultiByteString)<ntifs.h>
RtlMultiByteToUnicodeSize(OUT PULONG BytesInUnicodeString,IN const CHAR * MultiByteString,IN ULONG BytesInMultiByteString)<ntifs.h>
RtlMultipleAllocateHeap(PVOID HeapHandle,DWORD Flags,SIZE_T Size,DWORD Count,PVOID * Array)DWORD NTAPI <winnt.h>
RtlMultipleFreeHeap(PVOID HeapHandle,DWORD Flags,DWORD Count,PVOID * Array)DWORD NTAPI <winnt.h>
RtlNextUnicodePrefix(IN PUNICODE_PREFIX_TABLE PrefixTable,IN BOOLEAN Restart)<ntifs.h>
RtlNonEmptyBucketsHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlNormalizeString(IN ULONG NormForm,IN PCWSTR SourceString,IN LONG SourceStringLength,OUT PWSTR DestinationString,IN OUT PLONG DestinationStringLength)<ntifs.h>
RtlNtStatusToDosError(IN NTSTATUS Status)<winternl.h>
RtlNtStatusToDosError(NTSTATUS Status) ULONG NTAPI <winternl.h>
RtlNtStatusToDosErrorNoTeb(IN NTSTATUS Status)<ntifs.h>
RtlNumberGenericTableElements(IN PRTL_GENERIC_TABLE Table)<ntddk.h>
RtlNumberGenericTableElementsAvl(IN PRTL_AVL_TABLE Table)<ntddk.h>
RtlNumberOfClearBits(IN PRTL_BITMAP BitMapHeader)<wdm.h>
RtlNumberOfSetBits(IN PRTL_BITMAP BitMapHeader)<wdm.h>
RtlNumberOfSetBitsUlongPtr(IN ULONG_PTR Target)<wdm.h>
RtlOemStringToCountedUnicodeSize(STRING)<ntifs.h>
RtlOemStringToCountedUnicodeString(IN OUT PUNICODE_STRING DestinationString,IN PCOEM_STRING SourceString,IN BOOLEAN AllocateDestinationString)<ntifs.h>
RtlOemStringToUnicodeSize(STRING)<ntifs.h>
RtlOemStringToUnicodeString(IN OUT PUNICODE_STRING DestinationString,IN PCOEM_STRING SourceString,IN BOOLEAN AllocateDestinationString)<ntifs.h>
RtlOemToUnicodeN(OUT PWSTR UnicodeString,IN ULONG MaxBytesInUnicodeString,OUT PULONG BytesInUnicodeString OPTIONAL,IN PCCH OemString,IN ULONG BytesInOemString)<ntifs.h>
RtlOffsetToPointer(B,O)<ntifs.h>
RtlParent(Links)<ntddk.h>
RtlPcToFileHeader(PVOID PcValue,PVOID * BaseOfImage)NTSYSAPI PVOID NTAPI <winnt.h>
RtlPointerToOffset(B,P)<ntifs.h>
RtlPrefetchMemoryNonTemporal(IN PVOID Source,IN SIZE_T Length)<wdm.h>
RtlPrefixUnicodeString(IN PCUNICODE_STRING String1,IN PCUNICODE_STRING String2,IN BOOLEAN CaseInSensitive)<winternl.h>
RtlPrefixUnicodeString(PCUNICODE_STRING String1,PCUNICODE_STRING String2,BOOLEAN CaseInSensitive) BOOLEAN NTAPI <winternl.h>
RtlQueryDepthSList(PSLIST_HEADER ListHead)NTSYSAPI WORD NTAPI <winnt.h>
RtlQueryHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength)NTSYSAPI DWORD NTAPI <winnt.h>
RtlQueryRegistryValues(IN ULONG RelativeTo,IN PCWSTR Path,IN OUT PRTL_QUERY_REGISTRY_TABLE QueryTable,IN PVOID Context OPTIONAL,IN PVOID Environment OPTIONAL)<wdm.h>
RtlRandom(IN OUT PULONG Seed)<ntifs.h>
RtlRandomEx(IN OUT PULONG Seed)<ntifs.h>
RtlRealPredecessor(IN PRTL_SPLAY_LINKS Links)<ntddk.h>
RtlRealSuccessor(IN PRTL_SPLAY_LINKS Links)<ntddk.h>
RtlReleaseHashTableContext(IN OUT PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context)<ntddk.h>
RtlRemoveEntryHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry,IN OUT PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context OPTIONAL)<ntddk.h>
RtlRemoveUnicodePrefix(IN PUNICODE_PREFIX_TABLE PrefixTable,IN PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry)<ntifs.h>
RtlReplaceSidInSd(IN OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID OldSid,IN PSID NewSid,OUT ULONG * NumChanges)<ntifs.h>
RtlReserveChunk(IN USHORT CompressionFormat,IN OUT PUCHAR * CompressedBuffer,IN PUCHAR EndOfCompressedBufferPlus1,OUT PUCHAR * ChunkBuffer,IN ULONG ChunkSize)<ntifs.h>
RtlRestoreContext(PCONTEXT ContextRecord,struct _EXCEPTION_RECORD * ExceptionRecord)NTSYSAPI VOID __cdecl <winnt.h>
RtlRetrieveUlong(DestAddress,SrcAddress)<wdm.h>
RtlRetrieveUshort(DestAddress,SrcAddress)<wdm.h>
RtlRightChild(Links)<ntddk.h>
RtlRunOnceBeginInitialize(IN OUT PRTL_RUN_ONCE RunOnce,IN ULONG Flags,OUT PVOID * Context OPTIONAL)<ntddk.h>
RtlRunOnceComplete(IN OUT PRTL_RUN_ONCE RunOnce,IN ULONG Flags,IN PVOID Context OPTIONAL)<ntddk.h>
RtlRunOnceExecuteOnce(IN OUT PRTL_RUN_ONCE RunOnce,IN PRTL_RUN_ONCE_INIT_FN InitFn,IN OUT PVOID Parameter OPTIONAL,OUT PVOID * Context OPTIONAL)<ntddk.h>
RtlRunOnceInitialize(OUT PRTL_RUN_ONCE RunOnce)<ntddk.h>
RtlSecondsSince1970ToTime(IN ULONG ElapsedSeconds,OUT PLARGE_INTEGER Time)<ntifs.h>
RtlSecondsSince1980ToTime(IN ULONG ElapsedSeconds,OUT PLARGE_INTEGER Time)<ntifs.h>
RtlSecureZeroMemory(OUT PVOID Pointer,IN SIZE_T Size)<winnt.h>
RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt)__CRT_INLINE PVOID WINAPI <winnt.h>
RtlSelfRelativeToAbsoluteSD(IN PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,OUT PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor OPTIONAL,IN OUT PULONG AbsoluteSecurityDescriptorSize,OUT PACL Dacl OPTIONAL,IN OUT PULONG DaclSize,OUT PACL Sacl OPTIONAL,IN OUT PULONG SaclSize,OUT PSID Owner OPTIONAL,IN OUT PULONG OwnerSize,OUT PSID PrimaryGroup OPTIONAL,IN OUT PULONG PrimaryGroupSize)<ntifs.h>
RtlSetAllBits(IN PRTL_BITMAP BitMapHeader)<wdm.h>
RtlSetBit(PRTL_BITMAP BitMapHeader,ULONG BitNumber)<wdm.h>
RtlSetBits(IN PRTL_BITMAP BitMapHeader,IN ULONG StartingIndex,IN ULONG NumberToSet)<wdm.h>
RtlSetDaclSecurityDescriptor(IN OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN BOOLEAN DaclPresent,IN PACL Dacl OPTIONAL,IN BOOLEAN DaclDefaulted OPTIONAL)<wdm.h>
RtlSetGroupSecurityDescriptor(IN OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID Group OPTIONAL,IN BOOLEAN GroupDefaulted OPTIONAL)<ntifs.h>
RtlSetHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength)NTSYSAPI DWORD NTAPI <winnt.h>
RtlSetOwnerSecurityDescriptor(IN OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSID Owner OPTIONAL,IN BOOLEAN OwnerDefaulted)<ntifs.h>
RtlSetSaclSecurityDescriptor(IN OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN BOOLEAN SaclPresent,IN PACL Sacl,IN BOOLEAN SaclDefaulted)<ntifs.h>
RtlSplay(IN OUT PRTL_SPLAY_LINKS Links)<ntddk.h>
RtlStoreUlong(Address,Value)<wdm.h>
RtlStoreUlonglong(Address,Value)<wdm.h>
RtlStoreUlongPtr(Address,Value) <wdm.h>
RtlStoreUshort(Address,Value)<wdm.h>
RtlStringCbCatExA(IN OUT LPSTR Destination,IN SIZE_T Length,IN LPCSTR Source,OUT LPSTR * DestinationEnd OPTIONAL,OUT PSIZE_T RemainingSize OPTIONAL,IN DWORD Flags)<ntstrsafe.h>
RtlStringCbCopyA(OUT LPSTR Destination,IN SIZE_T Length,IN LPCSTR Source)<ntstrsafe.h>
RtlStringCbCopyExA(OUT LPSTR Destination,IN SIZE_T Length,IN LPCSTR Source,OUT LPSTR * DestinationEnd OPTIONAL,OUT PSIZE_T RemainingSize OPTIONAL,IN DWORD Flags)<ntstrsafe.h>
RtlStringCbPrintfA(OUT LPSTR Destination,IN SIZE_T Length,IN LPCSTR Format,...)<ntstrsafe.h>
RtlStringCbPrintfExA(OUT LPSTR Destination,IN SIZE_T Length,OUT LPSTR * DestinationEnd OPTIONAL,OUT PSIZE_T RemainingSize OPTIONAL,IN DWORD Flags,IN LPCSTR Format,...)<ntstrsafe.h>
RtlStringCbPrintfW(LPWSTR pszDest,IN size_t cbDest,IN LPCWSTR pszFormat,...)<ntstrsafe.h>
RtlStringCchCopyA(IN LPSTR Destination,IN SIZE_T cchDest,IN LPCSTR pszSrc)<ntstrsafe.h>
RtlStringCopyWorkerA(OUT LPSTR Destination,IN SIZE_T Length,OUT PSIZE_T NewLength OPTIONAL,IN LPCSTR Source,IN SIZE_T CopyLength)<ntstrsafe.h>
RtlStringExValidateDestA(IN OUT LPSTR * Destination,IN OUT PSIZE_T DestinationLength,OUT PSIZE_T ReturnLength OPTIONAL,IN SIZE_T MaxLength,IN DWORD Flags)<ntstrsafe.h>
RtlStringExValidateSrcA(IN OUT LPCSTR * Source OPTIONAL,IN OUT PSIZE_T ReturnLength OPTIONAL,IN SIZE_T MaxLength,IN DWORD Flags)<ntstrsafe.h>
RtlStringFromGUID(IN REFGUID Guid,OUT PUNICODE_STRING GuidString)<wdm.h>
RtlStringLengthWorkerA(IN LPCSTR String,IN SIZE_T MaxLength,OUT PSIZE_T ReturnLength OPTIONAL)<ntstrsafe.h>
RtlStringValidateDestA(IN LPSTR Destination,IN SIZE_T Length,OUT PSIZE_T ReturnLength OPTIONAL,IN SIZE_T MaxLength)<ntstrsafe.h>
RtlStringVPrintfWorkerA(OUT LPSTR Destination,IN SIZE_T Length,OUT PSIZE_T NewLength OPTIONAL,IN LPCSTR Format,IN va_list argList)<ntstrsafe.h>
RtlSubAuthorityCountSid(IN PSID Sid)<ntifs.h>
RtlSubAuthoritySid(IN PSID Sid,IN ULONG SubAuthority)<ntifs.h>
RtlSubtreePredecessor(IN PRTL_SPLAY_LINKS Links)<ntddk.h>
RtlSubtreeSuccessor(IN PRTL_SPLAY_LINKS Links)<ntddk.h>
RtlTestBit(IN PRTL_BITMAP BitMapHeader,IN ULONG BitNumber)<wdm.h>
RtlTimeFieldsToTime(IN PTIME_FIELDS TimeFields,IN PLARGE_INTEGER Time)<wdm.h>
RtlTimeToSecondsSince1970(IN PLARGE_INTEGER Time,OUT PULONG ElapsedSeconds)<winternl.h>
RtlTimeToSecondsSince1970(PLARGE_INTEGER Time,PULONG ElapsedSeconds) BOOLEAN NTAPI <winternl.h>
RtlTimeToSecondsSince1980(IN PLARGE_INTEGER Time,OUT PULONG ElapsedSeconds)<ntifs.h>
RtlTimeToTimeFields(IN PLARGE_INTEGER Time,IN PTIME_FIELDS TimeFields)<wdm.h>
RtlTotalBucketsHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlTotalEntriesHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable)<ntddk.h>
RtlUlongByteSwap(_x)<wdm.h>
RtlUlongByteSwap(IN ULONG Source)<wdm.h>
RtlUlonglongByteSwap(_x)<wdm.h>
RtlUlonglongByteSwap(IN ULONGLONG Source)<wdm.h>
RtlUnicodeStringToAnsiSize(String)<wdm.h>
RtlUnicodeStringToAnsiString(IN OUT PANSI_STRING DestinationString,IN PCUNICODE_STRING SourceString,IN BOOLEAN AllocateDestinationString)<winternl.h>
RtlUnicodeStringToAnsiString(PANSI_STRING DestinationString,PCUNICODE_STRING SourceString,BOOLEAN AllocateDestinationString) NTSTATUS NTAPI <winternl.h>
RtlUnicodeStringToCountedOemString(IN OUT POEM_STRING DestinationString,IN PCUNICODE_STRING SourceString,IN BOOLEAN AllocateDestinationString)<ntifs.h>
RtlUnicodeStringToInteger(IN PCUNICODE_STRING String,IN ULONG Base OPTIONAL,OUT PULONG Value)<wdm.h>
RtlUnicodeStringToOemSize(STRING)<ntifs.h>
RtlUnicodeStringToOemString(IN OUT POEM_STRING DestinationString,IN PCUNICODE_STRING SourceString,IN BOOLEAN AllocateDestinationString)<winternl.h>
RtlUnicodeStringToOemString(POEM_STRING DestinationString,PCUNICODE_STRING SourceString,BOOLEAN AllocateDestinationString) NTSTATUS NTAPI <winternl.h>
RtlUnicodeToCustomCPN(IN PCPTABLEINFO CustomCP,OUT PCH CustomCPString,IN ULONG MaxBytesInCustomCPString,OUT PULONG BytesInCustomCPString OPTIONAL,IN PWCH UnicodeString,IN ULONG BytesInUnicodeString)<ntifs.h>
RtlUnicodeToMultiByteN(OUT PCHAR MultiByteString,IN ULONG MaxBytesInMultiByteString,OUT PULONG BytesInMultiByteString OPTIONAL,IN PCWCH UnicodeString,IN ULONG BytesInUnicodeString)<ntifs.h>
RtlUnicodeToMultiByteSize(OUT PULONG BytesInMultiByteString,IN PCWCH UnicodeString,IN ULONG BytesInUnicodeString)<winternl.h>
RtlUnicodeToMultiByteSize(PULONG BytesInMultiByteString,PWCH UnicodeString,ULONG BytesInUnicodeString) NTSTATUS NTAPI <winternl.h>
RtlUnicodeToOemN(OUT PCHAR OemString,IN ULONG MaxBytesInOemString,OUT PULONG BytesInOemString OPTIONAL,IN PCWCH UnicodeString,IN ULONG BytesInUnicodeString)<ntifs.h>
RtlUnicodeToUTF8N(OUT PCHAR UTF8StringDestination,IN ULONG UTF8StringMaxByteCount,OUT PULONG UTF8StringActualByteCount,IN PCWCH UnicodeStringSource,IN ULONG UnicodeStringByteCount)<wdm.h>
RtlUniform(PULONG Seed) ULONG NTAPI <winternl.h>
RtlUnwind(PVOID TargetFrame,PVOID TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue) VOID NTAPI <winternl.h>
RtlUnwind2(FRAME_POINTERS TargetFrame,PVOID TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue,PCONTEXT ContextRecord) VOID <winternl.h>
RtlUnwindEx(FRAME_POINTERS TargetFrame,PVOID TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue,PCONTEXT ContextRecord,PUNWIND_HISTORY_TABLE HistoryTable) VOID <winternl.h>
RtlUnwindEx(PVOID TargetFrame,PVOID TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue,PCONTEXT ContextRecord,PUNWIND_HISTORY_TABLE HistoryTable)NTSYSAPI VOID NTAPI <winternl.h>
RtlUpcaseUnicodeChar(IN WCHAR SourceCharacter)<wdm.h>
RtlUpcaseUnicodeString(IN OUT PUNICODE_STRING DestinationString,IN PCUNICODE_STRING SourceString,IN BOOLEAN AllocateDestinationString)<ntddk.h>
RtlUpcaseUnicodeStringToCountedOemString(IN OUT POEM_STRING DestinationString,IN PCUNICODE_STRING SourceString,IN BOOLEAN AllocateDestinationString)<ntifs.h>
RtlUpcaseUnicodeStringToOemString(IN OUT POEM_STRING DestinationString,IN PCUNICODE_STRING SourceString,IN BOOLEAN AllocateDestinationString)<ntifs.h>
RtlUpcaseUnicodeToCustomCPN(IN PCPTABLEINFO CustomCP,OUT PCH CustomCPString,IN ULONG MaxBytesInCustomCPString,OUT PULONG BytesInCustomCPString OPTIONAL,IN PWCH UnicodeString,IN ULONG BytesInUnicodeString)<ntifs.h>
RtlUpcaseUnicodeToMultiByteN(OUT PCHAR MultiByteString,IN ULONG MaxBytesInMultiByteString,OUT PULONG BytesInMultiByteString OPTIONAL,IN PCWCH UnicodeString,IN ULONG BytesInUnicodeString)<ntifs.h>
RtlUpcaseUnicodeToOemN(OUT PCHAR OemString,IN ULONG MaxBytesInOemString,OUT PULONG BytesInOemString OPTIONAL,IN PCWCH UnicodeString,IN ULONG BytesInUnicodeString)<ntifs.h>
RtlUpperChar(IN CHAR Character)<ntddk.h>
RtlUpperString(IN OUT PSTRING DestinationString,IN const PSTRING SourceString)<ntddk.h>
RtlUshortByteSwap(_x) <wdm.h>
RtlUshortByteSwap(IN USHORT Source)<wdm.h>
RtlUTF8ToUnicodeN(OUT PWSTR UnicodeStringDestination,IN ULONG UnicodeStringMaxByteCount,OUT PULONG UnicodeStringActualByteCount,IN PCCH UTF8StringSource,IN ULONG UTF8StringByteCount)<wdm.h>
RtlValidateUnicodeString(IN ULONG Flags,IN PCUNICODE_STRING String)<ntifs.h>
RtlValidRelativeSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptorInput,IN ULONG SecurityDescriptorLength,IN SECURITY_INFORMATION RequiredInformation)<wdm.h>
RtlValidSecurityDescriptor(IN PSECURITY_DESCRIPTOR SecurityDescriptor)<wdm.h>
RtlValidSid(IN PSID Sid)<ntifs.h>
RtlVerifyVersionInfo(IN PRTL_OSVERSIONINFOEXW VersionInfo,IN ULONG TypeMask,IN ULONGLONG ConditionMask)<ntddk.h>
RTLVERLIB_DDI(RtlIsNtDdiVersionAvailable)<wdm.h>
RTLVERLIB_DDI(RtlIsServicePackVersionInstalled)<wdm.h>
RTLVERLIB_DDI(x)<wdm.h>
RtlVirtualUnwind(DWORD HandlerType,DWORD ImageBase,DWORD ControlPc,PRUNTIME_FUNCTION FunctionEntry,PCONTEXT ContextRecord,PVOID * HandlerData,PDWORD EstablisherFrame,PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)NTSYSAPI PEXCEPTION_ROUTINE NTAPI <winnt.h>
RtlVirtualUnwind(DWORD HandlerType,DWORD64 ImageBase,DWORD64 ControlPc,PRUNTIME_FUNCTION FunctionEntry,PCONTEXT ContextRecord,PVOID * HandlerData,PDWORD64 EstablisherFrame,PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)NTSYSAPI PEXCEPTION_ROUTINE NTAPI <winnt.h>
RtlVirtualUnwind(ULONGLONG ImageBase,ULONGLONG ControlPc,PRUNTIME_FUNCTION FunctionEntry,PCONTEXT ContextRecord,PBOOLEAN InFunction,PFRAME_POINTERS EstablisherFrame,PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)NTSYSAPI ULONGLONG NTAPI <winnt.h>
RtlVolumeDeviceToDosName(IN PVOID VolumeDeviceObject,OUT PUNICODE_STRING DosName)<ntddk.h>
RtlWalkFrameChain(OUT PVOID * Callers,IN ULONG Count,IN ULONG Flags)<ntddk.h>
RtlWeaklyEnumerateEntryHashTable(IN PRTL_DYNAMIC_HASH_TABLE HashTable,IN OUT PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator)<ntddk.h>
RtlWriteRegistryValue(IN ULONG RelativeTo,IN PCWSTR Path,IN PCWSTR ValueName,IN ULONG ValueType,IN PVOID ValueData,IN ULONG ValueLength)<wdm.h>
RtlxAnsiStringToUnicodeSize(IN PCANSI_STRING AnsiString)<wdm.h>
RtlxOemStringToUnicodeSize(IN PCOEM_STRING OemString)<ntifs.h>
RtlxUnicodeStringToAnsiSize(IN PCUNICODE_STRING UnicodeString)<wdm.h>
RtlxUnicodeStringToOemSize(IN PCUNICODE_STRING UnicodeString)<ntifs.h>
RtlZeroMemory(Destination, Length)<winternl.h>
RtlZeroMemory(Destination,Length)<winternl.h>
RTM_CHECK_NTH_BIT(Value,N,Len)<rtmv2.h>
RTM_IPV4_GET_ADDR_AND_LEN(Addr,Len,NetAddress)<rtmv2.h>
RTM_IPV4_GET_ADDR_AND_MASK(Addr,Mask,NetAddress)<rtmv2.h>
RTM_IPV4_LEN_FROM_MASK(Len,Mask)<rtmv2.h>
RTM_IPV4_MAKE_NET_ADDRESS(NetAddress,Addr,Len)<rtmv2.h>
RTM_IPV4_MASK_FROM_LEN(Len)<rtmv2.h>
RTM_IPV4_SET_ADDR_AND_LEN(NetAddress,Addr,Len)<rtmv2.h>
RTM_IPV4_SET_ADDR_AND_MASK(NetAddress,Addr,Mask)<rtmv2.h>
RTM_SIZE_OF_DEST_INFO(NumViews)<rtmv2.h>
RTM_SIZE_OF_ROUTE_INFO(NumHops)<rtmv2.h>
RtmAddNextHop(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_NEXTHOP_INFO NextHopInfo,PRTM_NEXTHOP_HANDLE NextHopHandle,PRTM_NEXTHOP_CHANGE_FLAGS ChangeFlags) DWORD WINAPI <rtmv2.h>
RtmAddRoute(HANDLE ClientHandle,PVOID Route,DWORD TimeToLive,DWORD * Flags,PVOID CurBestRoute,PVOID PrevBestRoute) DWORD WINAPI <rtm.h>
RtmAddRouteToDest(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_ROUTE_HANDLE RouteHandle,PRTM_NET_ADDRESS DestAddress,PRTM_ROUTE_INFO RouteInfo,ULONG TimeToLive,RTM_ROUTE_LIST_HANDLE RouteListHandle,RTM_NOTIFY_FLAGS NotifyType,RTM_NOTIFY_HANDLE NotifyHandle,PRTM_ROUTE_CHANGE_FLAGS ChangeFlags) DWORD WINAPI <rtmv2.h>
RtmBlockDeleteRoutes(HANDLE ClientHandle,DWORD EnumerationFlags,PVOID CriteriaRoute) DWORD WINAPI <rtm.h>
RtmBlockMethods(RTM_ENTITY_HANDLE RtmRegHandle,HANDLE TargetHandle,UCHAR TargetType,DWORD BlockingFlag) DWORD WINAPI <rtmv2.h>
RtmCloseEnumerationHandle(HANDLE EnumerationHandle) DWORD WINAPI <rtm.h>
RtmCreateDestEnum(RTM_ENTITY_HANDLE RtmRegHandle,RTM_VIEW_SET TargetViews,RTM_ENUM_FLAGS EnumFlags,PRTM_NET_ADDRESS NetAddress,ULONG ProtocolId,PRTM_ENUM_HANDLE RtmEnumHandle) DWORD WINAPI <rtmv2.h>
RtmCreateEnumerationHandle(DWORD ProtocolFamily,DWORD EnumerationFlags,PVOID CriteriaRoute) HANDLE WINAPI <rtm.h>
RtmCreateNextHopEnum(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENUM_FLAGS EnumFlags,PRTM_NET_ADDRESS NetAddress,PRTM_ENUM_HANDLE RtmEnumHandle) DWORD WINAPI <rtmv2.h>
RtmCreateRouteEnum(RTM_ENTITY_HANDLE RtmRegHandle,RTM_DEST_HANDLE DestHandle,RTM_VIEW_SET TargetViews,RTM_ENUM_FLAGS EnumFlags,PRTM_NET_ADDRESS StartDest,RTM_MATCH_FLAGS MatchingFlags,PRTM_ROUTE_INFO CriteriaRoute,ULONG CriteriaInterface,PRTM_ENUM_HANDLE RtmEnumHandle) DWORD WINAPI <rtmv2.h>
RtmCreateRouteList(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_ROUTE_LIST_HANDLE RouteListHandle) DWORD WINAPI <rtmv2.h>
RtmCreateRouteListEnum(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_LIST_HANDLE RouteListHandle,PRTM_ENUM_HANDLE RtmEnumHandle) DWORD WINAPI <rtmv2.h>
RtmDeleteEnumHandle(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENUM_HANDLE EnumHandle) DWORD WINAPI <rtmv2.h>
RtmDeleteNextHop(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NEXTHOP_HANDLE NextHopHandle,PRTM_NEXTHOP_INFO NextHopInfo) DWORD WINAPI <rtmv2.h>
RtmDeleteRoute(HANDLE ClientHandle,PVOID Route,DWORD * Flags,PVOID CurBestRoute) DWORD WINAPI <rtm.h>
RtmDeleteRouteList(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_LIST_HANDLE RouteListHandle) DWORD WINAPI <rtmv2.h>
RtmDeleteRouteToDest(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_HANDLE RouteHandle,PRTM_ROUTE_CHANGE_FLAGS ChangeFlags) DWORD WINAPI <rtmv2.h>
RtmDequeueRouteChangeMessage(HANDLE ClientHandle,DWORD * Flags,PVOID CurBestRoute,PVOID PrevBestRoute) DWORD WINAPI <rtm.h>
RtmDeregisterClient(HANDLE ClientHandle) DWORD WINAPI <rtm.h>
RtmDeregisterEntity(RTM_ENTITY_HANDLE RtmRegHandle) DWORD WINAPI <rtmv2.h>
RtmDeregisterFromChangeNotification(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle) DWORD WINAPI <rtmv2.h>
RtmEnumerateGetNextRoute(HANDLE EnumerationHandle,PVOID Route) DWORD WINAPI <rtm.h>
RtmFindNextHop(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_NEXTHOP_INFO NextHopInfo,PRTM_NEXTHOP_HANDLE NextHopHandle,PRTM_NEXTHOP_INFO * NextHopPointer) DWORD WINAPI <rtmv2.h>
RtmGetChangedDests(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle,PUINT NumDests,PRTM_DEST_INFO ChangedDests) DWORD WINAPI <rtmv2.h>
RtmGetChangeStatus(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle,RTM_DEST_HANDLE DestHandle,PBOOL ChangeStatus) DWORD WINAPI <rtmv2.h>
RtmGetDestInfo(RTM_ENTITY_HANDLE RtmRegHandle,RTM_DEST_HANDLE DestHandle,ULONG ProtocolId,RTM_VIEW_SET TargetViews,PRTM_DEST_INFO DestInfo) DWORD WINAPI <rtmv2.h>
RtmGetEntityInfo(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENTITY_HANDLE EntityHandle,PRTM_ENTITY_INFO EntityInfo) DWORD WINAPI <rtmv2.h>
RtmGetEntityMethods(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENTITY_HANDLE EntityHandle,PUINT NumMethods,PRTM_ENTITY_EXPORT_METHOD ExptMethods) DWORD WINAPI <rtmv2.h>
RtmGetEnumDests(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENUM_HANDLE EnumHandle,PUINT NumDests,PRTM_DEST_INFO DestInfos) DWORD WINAPI <rtmv2.h>
RtmGetEnumNextHops(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENUM_HANDLE EnumHandle,PUINT NumNextHops,PRTM_NEXTHOP_HANDLE NextHopHandles) DWORD WINAPI <rtmv2.h>
RtmGetEnumRoutes(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENUM_HANDLE EnumHandle,PUINT NumRoutes,PRTM_ROUTE_HANDLE RouteHandles) DWORD WINAPI <rtmv2.h>
RtmGetExactMatchDestination(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_NET_ADDRESS DestAddress,ULONG ProtocolId,RTM_VIEW_SET TargetViews,PRTM_DEST_INFO DestInfo) DWORD WINAPI <rtmv2.h>
RtmGetExactMatchRoute(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_NET_ADDRESS DestAddress,RTM_MATCH_FLAGS MatchingFlags,PRTM_ROUTE_INFO RouteInfo,ULONG InterfaceIndex,RTM_VIEW_SET TargetViews,PRTM_ROUTE_HANDLE RouteHandle) DWORD WINAPI <rtmv2.h>
RtmGetFirstRoute(DWORD ProtocolFamily,DWORD EnumerationFlags,PVOID Route) DWORD WINAPI <rtm.h>
RtmGetLessSpecificDestination(RTM_ENTITY_HANDLE RtmRegHandle,RTM_DEST_HANDLE DestHandle,ULONG ProtocolId,RTM_VIEW_SET TargetViews,PRTM_DEST_INFO DestInfo) DWORD WINAPI <rtmv2.h>
RtmGetListEnumRoutes(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENUM_HANDLE EnumHandle,PUINT NumRoutes,PRTM_ROUTE_HANDLE RouteHandles) DWORD WINAPI <rtmv2.h>
RtmGetMostSpecificDestination(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_NET_ADDRESS DestAddress,ULONG ProtocolId,RTM_VIEW_SET TargetViews,PRTM_DEST_INFO DestInfo) DWORD WINAPI <rtmv2.h>
RtmGetNetworkCount(DWORD ProtocolFamily) ULONG WINAPI <rtm.h>
RtmGetNextHopInfo(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NEXTHOP_HANDLE NextHopHandle,PRTM_NEXTHOP_INFO NextHopInfo) DWORD WINAPI <rtmv2.h>
RtmGetNextHopPointer(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NEXTHOP_HANDLE NextHopHandle,PRTM_NEXTHOP_INFO * NextHopPointer) DWORD WINAPI <rtmv2.h>
RtmGetNextRoute(DWORD ProtocolFamily,DWORD EnumerationFlags,PVOID Route) DWORD WINAPI <rtm.h>
RtmGetOpaqueInformationPointer(RTM_ENTITY_HANDLE RtmRegHandle,RTM_DEST_HANDLE DestHandle,PVOID * OpaqueInfoPointer) DWORD WINAPI <rtmv2.h>
RtmGetRegisteredEntities(RTM_ENTITY_HANDLE RtmRegHandle,PUINT NumEntities,PRTM_ENTITY_HANDLE EntityHandles,PRTM_ENTITY_INFO EntityInfos) DWORD WINAPI <rtmv2.h>
RtmGetRouteAge(PVOID Route) ULONG WINAPI <rtm.h>
RtmGetRouteInfo(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_HANDLE RouteHandle,PRTM_ROUTE_INFO RouteInfo,PRTM_NET_ADDRESS DestAddress) DWORD WINAPI <rtmv2.h>
RtmGetRoutePointer(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_HANDLE RouteHandle,PRTM_ROUTE_INFO * RoutePointer) DWORD WINAPI <rtmv2.h>
RtmGetSpecificRoute(ProtocolFamily,Route)<rtm.h>
RtmHoldDestination(RTM_ENTITY_HANDLE RtmRegHandle,RTM_DEST_HANDLE DestHandle,RTM_VIEW_SET TargetViews,ULONG HoldTime) DWORD WINAPI <rtmv2.h>
RtmIgnoreChangedDests(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle,UINT NumDests,PRTM_DEST_HANDLE ChangedDests) DWORD WINAPI <rtmv2.h>
RtmInsertInRouteList(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_LIST_HANDLE RouteListHandle,UINT NumRoutes,PRTM_ROUTE_HANDLE RouteHandles) DWORD WINAPI <rtmv2.h>
RtmInvokeMethod(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ENTITY_HANDLE EntityHandle,PRTM_ENTITY_METHOD_INPUT Input,PUINT OutputSize,PRTM_ENTITY_METHOD_OUTPUT Output) DWORD WINAPI <rtmv2.h>
RtmIsBestRoute(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_HANDLE RouteHandle,PRTM_VIEW_SET BestInViews) DWORD WINAPI <rtmv2.h>
RtmIsMarkedForChangeNotification(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle,RTM_DEST_HANDLE DestHandle,PBOOL DestMarked) DWORD WINAPI <rtmv2.h>
RtmIsRoute(DWORD ProtocolFamily,PVOID Network,PVOID BestRoute) WINBOOL WINAPI <rtm.h>
RtmLockDestination(RTM_ENTITY_HANDLE RtmRegHandle,RTM_DEST_HANDLE DestHandle,WINBOOL Exclusive,WINBOOL LockDest) DWORD WINAPI <rtmv2.h>
RtmLockNextHop(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NEXTHOP_HANDLE NextHopHandle,WINBOOL Exclusive,WINBOOL LockNextHop,PRTM_NEXTHOP_INFO * NextHopPointer) DWORD WINAPI <rtmv2.h>
RtmLockRoute(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_HANDLE RouteHandle,WINBOOL Exclusive,WINBOOL LockRoute,PRTM_ROUTE_INFO * RoutePointer) DWORD WINAPI <rtmv2.h>
RtmLookupIPDestination(DWORD dwDestAddr,PRTM_IP_ROUTE prir) WINBOOL WINAPI <rtm.h>
RtmMarkDestForChangeNotification(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle,RTM_DEST_HANDLE DestHandle,WINBOOL MarkDest) DWORD WINAPI <rtmv2.h>
RtmReferenceHandles(RTM_ENTITY_HANDLE RtmRegHandle,UINT NumHandles,HANDLE * RtmHandles) DWORD WINAPI <rtmv2.h>
RtmRegisterClient(DWORD ProtocolFamily,DWORD RoutingProtocol,HANDLE ChangeEvent,DWORD Flags) HANDLE WINAPI <rtm.h>
RtmRegisterEntity(PRTM_ENTITY_INFO RtmEntityInfo,PRTM_ENTITY_EXPORT_METHODS ExportMethods,RTM_EVENT_CALLBACK EventCallback,WINBOOL ReserveOpaquePointer,PRTM_REGN_PROFILE RtmRegProfile,PRTM_ENTITY_HANDLE RtmRegHandle) DWORD WINAPI <rtmv2.h>
RtmRegisterForChangeNotification(RTM_ENTITY_HANDLE RtmRegHandle,RTM_VIEW_SET TargetViews,RTM_NOTIFY_FLAGS NotifyFlags,PVOID NotifyContext,PRTM_NOTIFY_HANDLE NotifyHandle) DWORD WINAPI <rtmv2.h>
RtmReleaseChangedDests(RTM_ENTITY_HANDLE RtmRegHandle,RTM_NOTIFY_HANDLE NotifyHandle,UINT NumDests,PRTM_DEST_INFO ChangedDests) DWORD WINAPI <rtmv2.h>
RtmReleaseDestInfo(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_DEST_INFO DestInfo) DWORD WINAPI <rtmv2.h>
RtmReleaseDests(RTM_ENTITY_HANDLE RtmRegHandle,UINT NumDests,PRTM_DEST_INFO DestInfos) DWORD WINAPI <rtmv2.h>
RtmReleaseEntities(RTM_ENTITY_HANDLE RtmRegHandle,UINT NumEntities,PRTM_ENTITY_HANDLE EntityHandles) DWORD WINAPI <rtmv2.h>
RtmReleaseEntityInfo(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_ENTITY_INFO EntityInfo) DWORD WINAPI <rtmv2.h>
RtmReleaseNextHopInfo(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_NEXTHOP_INFO NextHopInfo) DWORD WINAPI <rtmv2.h>
RtmReleaseNextHops(RTM_ENTITY_HANDLE RtmRegHandle,UINT NumNextHops,PRTM_NEXTHOP_HANDLE NextHopHandles) DWORD WINAPI <rtmv2.h>
RtmReleaseRouteInfo(RTM_ENTITY_HANDLE RtmRegHandle,PRTM_ROUTE_INFO RouteInfo) DWORD WINAPI <rtmv2.h>
RtmReleaseRoutes(RTM_ENTITY_HANDLE RtmRegHandle,UINT NumRoutes,PRTM_ROUTE_HANDLE RouteHandles) DWORD WINAPI <rtmv2.h>
RtmUpdateAndUnlockRoute(RTM_ENTITY_HANDLE RtmRegHandle,RTM_ROUTE_HANDLE RouteHandle,ULONG TimeToLive,RTM_ROUTE_LIST_HANDLE RouteListHandle,RTM_NOTIFY_FLAGS NotifyType,RTM_NOTIFY_HANDLE NotifyHandle,PRTM_ROUTE_CHANGE_FLAGS ChangeFlags) DWORD WINAPI <rtmv2.h>
Run(REFERENCE_TIME tStart)virtual HRESULT WINAPI <strmif.h>
Run(void)virtual HRESULT WINAPI <strmif.h>
RunHTMLApplication(HINSTANCE hinst,HINSTANCE hPrevInst,LPSTR szCmdLine,int nCmdShow)STDAPI <mshtmhst.h>
RunRenderFilter(void)virtual HRESULT WINAPI <termmgr.h>
RunSetupCommand(HWND hWnd,LPCSTR szCmdName,LPCSTR szInfSection,LPCSTR szDir,LPCSTR lpszTitle,HANDLE * phEXE,DWORD dwFlags,LPVOID pvReserved) HRESULT WINAPI <advpub.h>
RUNSETUPCOMMAND(HWND hWnd,LPCSTR szCmdName,LPCSTR szInfSection,LPCSTR szDir,LPCSTR szTitle,HANDLE * phEXE,DWORD dwFlags,LPVOID pvReserved) typedef HRESULT<advpub.h>
RunWizard(HWND hwndParent,FLASHCONFIG_FLAGS eFlags)virtual HRESULT WINAPI <netprov.h>
RVA_TO_ADDR(Mapping,Rva)<psdk>
RxRemoteApi(DWORD ApiNumber,LPCWSTR UncServerName,LPDESC ParmDescString,LPDESC DataDesc16,LPDESC DataDesc32,LPDESC DataDescSmb,LPDESC AuxDesc16,LPDESC AuxDesc32,LPDESC AuxDescSmb,DWORD Flags,...) NET_API_STATUS __cdecl <lmremutl.h>
SAFE_SUBTRACT_POINTERS(p1,p2)<celib.h>
SafeArrayAccessData(SAFEARRAY * psa,void HUGEP ** ppvData)WINOLEAUTAPI <oleauto.h>
SafeArrayAllocData(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SafeArrayAllocDescriptor(UINT cDims,SAFEARRAY ** ppsaOut)WINOLEAUTAPI <oleauto.h>
SafeArrayAllocDescriptorEx(VARTYPE vt,UINT cDims,SAFEARRAY ** ppsaOut)WINOLEAUTAPI <oleauto.h>
SafeArrayCopy(SAFEARRAY * psa,SAFEARRAY ** ppsaOut)WINOLEAUTAPI <oleauto.h>
SafeArrayCopyData(SAFEARRAY * psaSource,SAFEARRAY * psaTarget)WINOLEAUTAPI <oleauto.h>
SafeArrayCreate(VARTYPE vt,UINT cDims,SAFEARRAYBOUND * rgsabound)WINOLEAUTAPI_<oleauto.h>
SafeArrayCreateEx(VARTYPE vt,UINT cDims,SAFEARRAYBOUND * rgsabound,PVOID pvExtra)WINOLEAUTAPI_<oleauto.h>
SafeArrayCreateVector(VARTYPE vt,LONG lLbound,ULONG cElements)WINOLEAUTAPI_<oleauto.h>
SafeArrayCreateVectorEx(VARTYPE vt,LONG lLbound,ULONG cElements,PVOID pvExtra)WINOLEAUTAPI_<oleauto.h>
SafeArrayDestroy(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SafeArrayDestroyData(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SafeArrayDestroyDescriptor(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SafeArrayGetDim(SAFEARRAY * psa)WINOLEAUTAPI_<oleauto.h>
SafeArrayGetElement(SAFEARRAY * psa,LONG * rgIndices,void * pv)WINOLEAUTAPI <oleauto.h>
SafeArrayGetElemsize(SAFEARRAY * psa)WINOLEAUTAPI_<oleauto.h>
SafeArrayGetIID(SAFEARRAY * psa,GUID * pguid)WINOLEAUTAPI <oleauto.h>
SafeArrayGetLBound(SAFEARRAY * psa,UINT nDim,LONG * plLbound)WINOLEAUTAPI <oleauto.h>
SafeArrayGetRecordInfo(SAFEARRAY * psa,IRecordInfo ** prinfo)WINOLEAUTAPI <oleauto.h>
SafeArrayGetUBound(SAFEARRAY * psa,UINT nDim,LONG * plUbound)WINOLEAUTAPI <oleauto.h>
SafeArrayGetVartype(SAFEARRAY * psa,VARTYPE * pvt)WINOLEAUTAPI <oleauto.h>
SafeArrayLock(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SafeArrayPtrOfIndex(SAFEARRAY * psa,LONG * rgIndices,void ** ppvData)WINOLEAUTAPI <oleauto.h>
SafeArrayPutElement(SAFEARRAY * psa,LONG * rgIndices,void * pv)WINOLEAUTAPI <oleauto.h>
SafeArrayRedim(SAFEARRAY * psa,SAFEARRAYBOUND * psaboundNew)WINOLEAUTAPI <oleauto.h>
SafeArraySetIID(SAFEARRAY * psa,REFGUID guid)WINOLEAUTAPI <oleauto.h>
SafeArraySetRecordInfo(SAFEARRAY * psa,IRecordInfo * prinfo)WINOLEAUTAPI <oleauto.h>
SafeArrayUnaccessData(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SafeArrayUnlock(SAFEARRAY * psa)WINOLEAUTAPI <oleauto.h>
SaferCloseLevel(SAFER_LEVEL_HANDLE hLevelHandle) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferComputeTokenFromLevel(SAFER_LEVEL_HANDLE LevelHandle,HANDLE InAccessToken,PHANDLE OutAccessToken,DWORD dwFlags,LPVOID lpReserved) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferCreateLevel(DWORD dwScopeId,DWORD dwLevelId,DWORD OpenFlags,SAFER_LEVEL_HANDLE * pLevelHandle,LPVOID lpReserved) WINADVAPI WINBOOL WINAPI <winsafer.h>
SafeRef(REFIID rid,IUnknown * pUnk) extern void<comsvcs.h>
SaferGetLevelInformation(SAFER_LEVEL_HANDLE LevelHandle,SAFER_OBJECT_INFO_CLASS dwInfoType,LPVOID lpQueryBuffer,DWORD dwInBufferSize,LPDWORD lpdwOutBufferSize) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferGetPolicyInformation(DWORD dwScopeId,SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass,DWORD InfoBufferSize,PVOID InfoBuffer,PDWORD InfoBufferRetSize,LPVOID lpReserved) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferIdentifyLevel(DWORD dwNumProperties,PSAFER_CODE_PROPERTIES pCodeProperties,SAFER_LEVEL_HANDLE * pLevelHandle,LPVOID lpReserved) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferiIsExecutableFileType(LPCWSTR szFullPathname,BOOLEAN bFromShellExecute) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferRecordEventLogEntry(SAFER_LEVEL_HANDLE hLevel,LPCWSTR szTargetPath,LPVOID lpReserved) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferSetLevelInformation(SAFER_LEVEL_HANDLE LevelHandle,SAFER_OBJECT_INFO_CLASS dwInfoType,LPVOID lpQueryBuffer,DWORD dwInBufferSize) WINADVAPI WINBOOL WINAPI <winsafer.h>
SaferSetPolicyInformation(DWORD dwScopeId,SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass,DWORD InfoBufferSize,PVOID InfoBuffer,LPVOID lpReserved) WINADVAPI WINBOOL WINAPI <winsafer.h>
SAPID_FROM_SVCID_NETWARE(_g)<svcguid.h>
SaslAcceptSecurityContext(PCredHandle phCredential,PCtxtHandle phContext,PSecBufferDesc pInput,unsigned __LONG32 fContextReq,unsigned __LONG32 TargetDataRep,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
SaslEnumerateProfiles(LPSTR * ProfileList,ULONG * ProfileCount) SECURITY_STATUS WINAPI <sspi.h>
SaslEnumerateProfilesA(LPSTR * ProfileList,ULONG * ProfileCount) SECURITY_STATUS WINAPI <sspi.h>
SaslEnumerateProfilesW(LPWSTR * ProfileList,ULONG * ProfileCount) SECURITY_STATUS WINAPI <sspi.h>
SaslGetContextOption(PCtxtHandle ContextHandle,ULONG Option,PVOID Value,ULONG Size,PULONG Needed) SECURITY_STATUS WINAPI <sspi.h>
SaslGetProfilePackage(LPSTR ProfileName,PSecPkgInfoA * PackageInfo) SECURITY_STATUS WINAPI <sspi.h>
SaslGetProfilePackageA(LPSTR ProfileName,PSecPkgInfoA * PackageInfo) SECURITY_STATUS WINAPI <sspi.h>
SaslGetProfilePackageW(LPWSTR ProfileName,PSecPkgInfoW * PackageInfo) SECURITY_STATUS WINAPI <sspi.h>
SaslIdentifyPackage(PSecBufferDesc pInput,PSecPkgInfoA * PackageInfo) SECURITY_STATUS WINAPI <sspi.h>
SaslIdentifyPackageA(PSecBufferDesc pInput,PSecPkgInfoA * PackageInfo) SECURITY_STATUS WINAPI <sspi.h>
SaslIdentifyPackageW(PSecBufferDesc pInput,PSecPkgInfoW * PackageInfo) SECURITY_STATUS WINAPI <sspi.h>
SaslInitializeSecurityContext(PCredHandle phCredential,PCtxtHandle phContext,LPSTR pszTargetName,unsigned __LONG32 fContextReq,unsigned __LONG32 Reserved1,unsigned __LONG32 TargetDataRep,PSecBufferDesc pInput,unsigned __LONG32 Reserved2,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
SaslInitializeSecurityContextA(PCredHandle phCredential,PCtxtHandle phContext,LPSTR pszTargetName,unsigned __LONG32 fContextReq,unsigned __LONG32 Reserved1,unsigned __LONG32 TargetDataRep,PSecBufferDesc pInput,unsigned __LONG32 Reserved2,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
SaslInitializeSecurityContextW(PCredHandle phCredential,PCtxtHandle phContext,LPWSTR pszTargetName,unsigned __LONG32 fContextReq,unsigned __LONG32 Reserved1,unsigned __LONG32 TargetDataRep,PSecBufferDesc pInput,unsigned __LONG32 Reserved2,PCtxtHandle phNewContext,PSecBufferDesc pOutput,unsigned __LONG32 * pfContextAttr,PTimeStamp ptsExpiry) SECURITY_STATUS WINAPI <sspi.h>
SaslSetContextOption(PCtxtHandle ContextHandle,ULONG Option,PVOID Value,ULONG Size) SECURITY_STATUS WINAPI <sspi.h>
SatisfyNtmsOperatorRequest(HANDLE hSession,LPNTMS_GUID lpRequestId) DWORD WINAPI <ntmsapi.h>
Save()	GraphicsState <tom.h>
Save(BSTR bstrMigrationTablePath)virtual HRESULT WINAPI <tom.h>
Save(const WCHAR * filename,const CLSID * clsidEncoder,const EncoderParameters * encoderParams)__inline__ Status Image::<tom.h>
Save(IStream * stream,const CLSID * clsidEncoder,const EncoderParameters * encoderParams)__inline__ Status Image::<tom.h>
Save(LPTSTR lpTemplateName,SCESVC_HANDLE * scesvcHandle,PVOID * ppvData,PBOOL pbOverwriteAll)virtual HRESULT WINAPI <tom.h>
Save(VARIANT * pVar,__LONG32 Flags,__LONG32 CodePage)virtual HRESULT WINAPI <tom.h>
Save(void)virtual HRESULT WINAPI <tom.h>
SaveAdd(const EncoderParameters * encoderParams)__inline__ Status Image::<gdiplusimpl.h>
SaveAdd(Image * newImage,const EncoderParameters * encoderParams)__inline__ Status Image::<gdiplusimpl.h>
SaveAs(BSTR Filename)virtual HRESULT WINAPI <mmcobj.h>
SaveChanges(__LONG32 * retval)virtual HRESULT WINAPI <mtxadmin.h>
SaveChanges(VARIANT * pvarStatusCode=0)virtual HRESULT WINAPI <mtxadmin.h>
SaveChanges(void)virtual HRESULT WINAPI <mtxadmin.h>
SaveCommand(DBID * pCommandID,DWORD dwFlags)virtual HRESULT WINAPI <oledb.h>
SaveCurrentMonitorSettings(HANDLE hMonitor) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SaveData(void)virtual HRESULT WINAPI <iiisext.h>
SaveDC(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
SaveDocument(VARIANT * pathIn,VARIANT * promptUser)virtual HRESULT WINAPI <dhtmled.h>
SaveGroup(HSEARCHER hsrch,PSZ pszFileName) ERRORCODE WINAPI <ftsiface.h>
SaveHistory(IStream * pStream)virtual HRESULT WINAPI <perhist.h>
SaveIndex(HINDEX hinx,PSZ pszFileName) ERRORCODE WINAPI <ftsiface.h>
SaveSegmentsToClipboard(ISegmentList * pSegmentList,DWORD dwFlags)virtual HRESULT WINAPI <mshtmlc.h>
SaveTo(BSTR SourceURL,IDispatch * ActiveConnection,ConnectModeEnum Mode,RecordCreateOptionsEnum CreateOptions,RecordOpenOptionsEnum Options,BSTR UserName,BSTR Password)virtual HRESULT WINAPI <cdosys.h>
SaveToContainer(BSTR ContainerURL,IDispatch * ActiveConnection,ConnectModeEnum Mode,RecordCreateOptionsEnum CreateOptions,RecordOpenOptionsEnum Options,BSTR UserName,BSTR Password)virtual HRESULT WINAPI <cdosys.h>
SaveToFile(BSTR FileName)virtual HRESULT WINAPI <cdosys.h>
SaveToObject(IUnknown * Source,BSTR InterfaceName)virtual HRESULT WINAPI <cdosys.h>
SBTTL(x)<kxia64.h>
Scale()))))))))))))))))static D2D1FORCEINLINE Matrix3x2F <perflib.h>
Scale(REAL scaleX,REAL scaleY,MatrixOrder order=MatrixOrderPrepend)	Status <perflib.h>
ScaleTransform(REAL sx,REAL sy,MatrixOrder order=MatrixOrderPrepend)	Status <gdipluspen.h>
ScaleViewportExtEx(HDC hdc,int xn,int dx,int yn,int yd,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ScaleWindowExtEx(HDC hdc,int xn,int xd,int yn,int yd,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
ScanDisplayText(HHILITER hhil,PBYTE pbText,int cbText,UINT iCharset,LCID lcid) ERRORCODE WINAPI <ftsiface.h>
ScanLogContainers(PCLFS_SCAN_CONTEXT pcxScan,CLFS_SCAN_MODE eScanMode,LPVOID pReserved)WINBOOL WINAPI <clfsw32.h>
ScanProgress(DWORDLONG dwlSpaceUsed,DWORD dwFlags,LPCWSTR pcwszStatus)virtual HRESULT WINAPI <emptyvc.h>
ScanText(HCOMPRESSOR hcmp,PBYTE pbText,UINT cbText,UINT iCharset) ERRORCODE WINAPI <ftsiface.h>
ScanTopicText(HINDEX hinx,PBYTE pbText,UINT cbText,UINT iCharset,UINT lcid) ERRORCODE WINAPI <ftsiface.h>
ScanTopicTitle(HINDEX hinx,PBYTE pbTitle,UINT cbTitle,UINT iTopic,HANDLE hTopic,UINT iCharset,UINT lcid) ERRORCODE WINAPI <ftsiface.h>
SCARD_ATTR_VALUE(Class,Tag)<winsmcrd.h>
SCARD_CTL_CODE(code)<winsmcrd.h>
SCardAccessStartedEvent(void) extern WINSCARDAPI HANDLE WINAPI <winscard.h>
SCardAddReaderToGroup(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardAddReaderToGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardAddReaderToGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardBeginTransaction(SCARDHANDLE hCard) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardCancel(SCARDCONTEXT hContext) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardCancelTransaction(SCARDHANDLE hCard) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardConnect(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardConnectA(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardConnectW(SCARDCONTEXT hContext,LPCWSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardControl(SCARDHANDLE hCard,DWORD dwControlCode,LPCVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardDisconnect(SCARDHANDLE hCard,DWORD dwDisposition) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardDlgExtendedError(void) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardEndTransaction(SCARDHANDLE hCard,DWORD dwDisposition) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardEstablishContext(DWORD dwScope,LPCVOID pvReserved1,LPCVOID pvReserved2,LPSCARDCONTEXT phContext) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetCardType(SCARDCONTEXT hContext,LPCSTR szCardName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetReader(SCARDCONTEXT hContext,LPCSTR szReaderName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetReaderGroup(SCARDCONTEXT hContext,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardForgetReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardFreeMemory(SCARDCONTEXT hContext,LPCVOID pvMem) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPBYTE pbAttr,LPDWORD pcbAttrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetCardTypeProviderName(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPSTR szProvider,LPDWORD pcchProvider) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPSTR szProvider,LPDWORD pcchProvider) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPWSTR szProvider,LPDWORD pcchProvider) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetProviderId(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidProviderId) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetProviderIdA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidProviderId) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetProviderIdW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidProviderId) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetStatusChange(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetStatusChangeA(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetStatusChangeW(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardGetTransmitCount(SCARDHANDLE hCard,LPDWORD pcTransmitCount)LONG WINAPI <winscard.h>
SCardIntroduceCardType(SCARDCONTEXT hContext,LPCSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceReader(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szDeviceName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szDeviceName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceReaderGroup(SCARDCONTEXT hContext,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIntroduceReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szDeviceName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardIsValidContext(SCARDCONTEXT hContext) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListCards(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPSTR mszCards,LPDWORD pcchCards) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListCardsA(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPSTR mszCards,LPDWORD pcchCards) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListCardsW(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPWSTR mszCards,LPDWORD pcchCards) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListInterfaces(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListInterfacesA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListInterfacesW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListReaderGroups(SCARDCONTEXT hContext,LPSTR mszGroups,LPDWORD pcchGroups) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListReaderGroupsA(SCARDCONTEXT hContext,LPSTR mszGroups,LPDWORD pcchGroups) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListReaderGroupsW(SCARDCONTEXT hContext,LPWSTR mszGroups,LPDWORD pcchGroups) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListReaders(SCARDCONTEXT hContext,LPCSTR mszGroups,LPSTR mszReaders,LPDWORD pcchReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListReadersA(SCARDCONTEXT hContext,LPCSTR mszGroups,LPSTR mszReaders,LPDWORD pcchReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardListReadersW(SCARDCONTEXT hContext,LPCWSTR mszGroups,LPWSTR mszReaders,LPDWORD pcchReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardLocateCardsByATR(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardLocateCardsByATRA(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardLocateCardsByATRW(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardLocateCardsW(SCARDCONTEXT hContext,LPCWSTR mszCards,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardReadCache(SCARDCONTEXT hContext,UUID * CardIdentifier,DWORD FreshnessCounter,LPSTR LookupName,PBYTE Data,DWORD * DataLen)LONG WINAPI <winscard.h>
SCardReadCacheA(SCARDCONTEXT hContext,UUID * CardIdentifier,DWORD FreshnessCounter,LPSTR LookupName,PBYTE Data,DWORD * DataLen)LONG WINAPI <winscard.h>
SCardReadCacheW(SCARDCONTEXT hContext,UUID * CardIdentifier,DWORD FreshnessCounter,LPWSTR LookupName,PBYTE Data,DWORD * DataLen)LONG WINAPI <winscard.h>
SCardReconnect(SCARDHANDLE hCard,DWORD dwShareMode,DWORD dwPreferredProtocols,DWORD dwInitialization,LPDWORD pdwActiveProtocol) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardReleaseContext(SCARDCONTEXT hContext) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardReleaseStartedEvent(void) extern WINSCARDAPI void WINAPI <winscard.h>
SCardRemoveReaderFromGroup(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardSetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPCBYTE pbAttr,DWORD cbAttrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardSetCardTypeProviderName(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPCSTR szProvider) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPCSTR szProvider) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPCWSTR szProvider) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardState(SCARDHANDLE hCard,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardStatus(SCARDHANDLE hCard,LPSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardStatusA(SCARDHANDLE hCard,LPSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardStatusW(SCARDHANDLE hCard,LPWSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardTransmit(SCARDHANDLE hCard,LPCSCARD_IO_REQUEST pioSendPci,LPCBYTE pbSendBuffer,DWORD cbSendLength,LPSCARD_IO_REQUEST pioRecvPci,LPBYTE pbRecvBuffer,LPDWORD pcbRecvLength) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardUIDlgSelectCardW(LPOPENCARDNAMEW_EX) extern WINSCARDAPI LONG WINAPI <winscard.h>
SCardWriteCache(SCARDCONTEXT hContext,UUID * CardIdentifier,DWORD FreshnessCounter,LPSTR LookupName,PBYTE Data,DWORD DataLen)LONG WINAPI <winscard.h>
SCardWriteCacheA(SCARDCONTEXT hContext,UUID * CardIdentifier,DWORD FreshnessCounter,LPSTR LookupName,PBYTE Data,DWORD DataLen)LONG WINAPI <winscard.h>
SCardWriteCacheW(SCARDCONTEXT hContext,UUID * CardIdentifier,DWORD FreshnessCounter,LPWSTR LookupName,PBYTE Data,DWORD DataLen)LONG WINAPI <winscard.h>
ScBinFromHexBounded(LPTSTR lpsz,LPBYTE lpb,ULONG cb) STDAPI_<mapiutil.h>
ScCheckSc(sc,fn)<mapidbg.h>
ScCheckScFn(SCODE,SCODE *,char *,char *,int)SCODE EXPORTDBG __cdecl <mapidbg.h>
ScCopyNotifications(int cNotification,LPNOTIFICATION lpNotifications,LPVOID lpvDst,ULONG * lpcb) STDAPI_<wabutil.h>
ScCopyProps(int cValues,LPSPropValue lpPropArray,LPVOID lpvDst,ULONG * lpcb) STDAPI_<wabutil.h>
ScCountNotifications(int cNotifications,LPNOTIFICATION lpNotifications,ULONG * lpcb) STDAPI_<wabutil.h>
ScCountProps(int cValues,LPSPropValue lpPropArray,ULONG * lpcb) STDAPI_<wabutil.h>
ScCreateConversationIndex(ULONG cbParent,LPBYTE lpbParent,ULONG * lpcbConvIndex,LPBYTE * lppbConvIndex) STDAPI_<wabutil.h>
ScDupPropset(int cValues,LPSPropValue lpPropArray,LPALLOCATEBUFFER lpAllocateBuffer,LPSPropValue * lppPropArray) STDAPI_<wabutil.h>
SchedPropTag(n)<msfs.h>
ScheduleJob(HANDLE hPrinter,DWORD JobId) WINBOOL WINAPI <winspool.h>
SchedulerParam(RTL_UMS_SCHEDULER_REASON Reason,ULONG_PTR ActivationPayload,PVOID)typedef VOID NTAPI RTL_UMS_SCHEDULER_ENTRY_POINT<winnt.h>
ScInitMapiUtil(ULONG ulFlags) STDAPI_<wabutil.h>
ScLocalPathFromUNC(LPSTR lpszUNC,LPSTR lpszLocal,UINT cchLocal) STDAPI_<wabutil.h>
ScMAPIXFromCMC(CMC_session_id cmc_session,ULONG ulFlags,LPCIID lpInterface,LPMAPISESSION * lppMAPISession) STDMETHODIMP_<xcmcmsx2.h>
ScMAPIXFromSMAPI(LHANDLE lhSimpleSession,ULONG ulFlags,LPCIID lpInterface,LPMAPISESSION * lppMAPISession) STDMETHODIMP_<mapi.h>
SCODE_CODE(sc)<winerror.h>
SCODE_FACILITY(sc)<winerror.h>
SCODE_SEVERITY(sc)<winerror.h>
ScodeFromSz(	_sz)<mapidbg.h>
ScodeFromSz(_sz)<mapidbg.h>
ScodeFromSzFn(char * psz)SCODE EXPORTDBG __cdecl <mapidbg.h>
ScopeCnt(scp)<lpmapi.h>
ScopeLen(cnt)<lpmapi.h>
ScreenSaverChangePassword(HWND hParent) void WINAPI <scrnsave.h>
ScreenSaverConfigureDialog(HWND hDlg,UINT message,WPARAM wParam,LPARAM lParam) WINBOOL WINAPI <scrnsave.h>
ScreenSaverProcW(HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam) LRESULT WINAPI <scrnsave.h>
ScreenToClient(HWND hWnd,LPPOINT lpPoint) WINUSERAPI WINBOOL WINAPI <winuser.h>
ScRelocNotifications(int cNotification,LPNOTIFICATION lpNotifications,LPVOID lpvBaseOld,LPVOID lpvBaseNew,ULONG * lpcb) STDAPI_<wabutil.h>
ScRelocProps(int cValues,LPSPropValue lpPropArray,LPVOID lpvBaseOld,LPVOID lpvBaseNew,ULONG * lpcb) STDAPI_<wabutil.h>
ScriptApplyDigitSubstitution(const SCRIPT_DIGITSUBSTITUTE * psds,SCRIPT_CONTROL * psc,SCRIPT_STATE * pss) HRESULT WINAPI <usp10.h>
ScriptApplyLogicalWidth(const int * piDx,int cChars,int cGlyphs,const WORD * pwLogClust,const SCRIPT_VISATTR * psva,const int * piAdvance,const SCRIPT_ANALYSIS * psa,ABC * pABC,int * piJustify) HRESULT WINAPI <usp10.h>
ScriptBreak(const WCHAR * pwcChars,int cChars,const SCRIPT_ANALYSIS * psa,SCRIPT_LOGATTR * psla) HRESULT WINAPI <usp10.h>
ScriptCacheGetHeight(HDC hdc,SCRIPT_CACHE * psc,long * tmHeight) HRESULT WINAPI <usp10.h>
ScriptCPtoX(int iCP,WINBOOL fTrailing,int cChars,int cGlyphs,const WORD * pwLogClust,const SCRIPT_VISATTR * psva,const int * piAdvance,const SCRIPT_ANALYSIS * psa,int * piX) HRESULT WINAPI <usp10.h>
ScriptFreeCache(SCRIPT_CACHE * psc) HRESULT WINAPI <usp10.h>
ScriptGetCMap(HDC hdc,SCRIPT_CACHE * psc,const WCHAR * pwcInChars,int cChars,DWORD dwFlags,WORD * pwOutGlyphs) HRESULT WINAPI <usp10.h>
ScriptGetFontAlternateGlyphs(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,OPENTYPE_TAG tagLangSys,OPENTYPE_TAG tagFeature,WORD wGlyphId,int cMaxAlternates,WORD * pAlternateGlyphs,int * pcAlternates) HRESULT WINAPI <usp10.h>
ScriptGetFontFeatureTags(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,OPENTYPE_TAG tagLangSys,int cMaxTags,OPENTYPE_TAG * pFeatureTags,int * pcTags) HRESULT WINAPI <usp10.h>
ScriptGetFontLanguageTags(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,int cMaxTags,OPENTYPE_TAG * pLangsysTags,int * pcTags) HRESULT WINAPI <usp10.h>
ScriptGetFontProperties(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_FONTPROPERTIES * sfp) HRESULT WINAPI <usp10.h>
ScriptGetFontScriptTags(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,int cMaxTags,OPENTYPE_TAG * pScriptTags,int * pcTags) HRESULT WINAPI <usp10.h>
ScriptGetGlyphABCWidth(HDC hdc,SCRIPT_CACHE * psc,WORD wGlyph,ABC * pABC) HRESULT WINAPI <usp10.h>
ScriptGetLogicalWidths(const SCRIPT_ANALYSIS * psa,int cChars,int cGlyphs,const int * piGlyphWidth,const WORD * pwLogClust,const SCRIPT_VISATTR * psva,int * piDx) HRESULT WINAPI <usp10.h>
ScriptGetProperties(const SCRIPT_PROPERTIES *** ppSp,int * piNumScripts) HRESULT WINAPI <usp10.h>
ScriptIsComplex(const WCHAR * pwcInChars,int cInChars,DWORD dwFlags) HRESULT WINAPI <usp10.h>
ScriptItemize(const WCHAR * pwcInChars,int cInChars,int cMaxItems,const SCRIPT_CONTROL * psControl,const SCRIPT_STATE * psState,SCRIPT_ITEM * pItems,int * pcItems) HRESULT WINAPI <usp10.h>
ScriptItemizeOpenType(const WCHAR * pwcInChars,int cInChars,int cMaxItems,const SCRIPT_CONTROL * psControl,const SCRIPT_STATE * psState,SCRIPT_ITEM * pItems,OPENTYPE_TAG * pScriptTags,int * pcItems) HRESULT WINAPI <usp10.h>
ScriptJustify(const SCRIPT_VISATTR * psva,const int * piAdvance,int cGlyphs,int iDx,int iMinKashida,int * piJustify) HRESULT WINAPI <usp10.h>
ScriptLayout(int cRuns,const BYTE * pbLevel,int * piVisualToLogical,int * piLogicalToVisual) HRESULT WINAPI <usp10.h>
ScriptPlace(HDC hdc,SCRIPT_CACHE * psc,const WORD * pwGlyphs,int cGlyphs,const SCRIPT_VISATTR * psva,SCRIPT_ANALYSIS * psa,int * piAdvance,GOFFSET * pGoffset,ABC * pABC) HRESULT WINAPI <usp10.h>
ScriptPlaceOpenType(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,OPENTYPE_TAG tagLangSys,int * rcRangeChars,TEXTRANGE_PROPERTIES ** rpRangeProperties,int cRanges,const WCHAR * pwcChars,WORD * pwLogClust,SCRIPT_CHARPROP * pCharProps,int cChars,const WORD * pwGlyphs,const SCRIPT_GLYPHPROP * pGlyphProps,int cGlyphs,int * piAdvance,GOFFSET * pGoffset,ABC * pABC) HRESULT WINAPI <usp10.h>
ScriptPositionSingleGlyph(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,OPENTYPE_TAG tagLangSys,OPENTYPE_TAG tagFeature,LONG lParameter,WORD wGlyphId,int iAdvance,GOFFSET GOffset,int * piOutAdvance,GOFFSET * pOutGoffset) HRESULT WINAPI <usp10.h>
ScriptRecordDigitSubstitution(LCID Locale,SCRIPT_DIGITSUBSTITUTE * psds) HRESULT WINAPI <usp10.h>
ScriptShape(HDC hdc,SCRIPT_CACHE * psc,const WCHAR * pwcChars,int cChars,int cMaxGlyphs,SCRIPT_ANALYSIS * psa,WORD * pwOutGlyphs,WORD * pwLogClust,SCRIPT_VISATTR * psva,int * pcGlyphs) HRESULT WINAPI <usp10.h>
ScriptShapeOpenType(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,OPENTYPE_TAG tagLangSys,int * rcRangeChars,TEXTRANGE_PROPERTIES ** rpRangeProperties,int cRanges,const WCHAR * pwcChars,int cChars,int cMaxGlyphs,WORD * pwLogClust,SCRIPT_CHARPROP * pCharProps,WORD * pwOutGlyphs,SCRIPT_GLYPHPROP * pOutGlyphProps,int * pcGlyphs) HRESULT WINAPI <usp10.h>
ScriptString_pcOutChars(SCRIPT_STRING_ANALYSIS ssa) const int<usp10.h>
ScriptString_pLogAttr(SCRIPT_STRING_ANALYSIS ssa) const SCRIPT_LOGATTR<usp10.h>
ScriptString_pSize(SCRIPT_STRING_ANALYSIS ssa) const SIZE<usp10.h>
ScriptStringAnalyse(HDC hdc,const void * pString,int cString,int cGlyphs,int iCharset,DWORD dwFlags,int iReqWidth,SCRIPT_CONTROL * psControl,SCRIPT_STATE * psState,const int * piDx,SCRIPT_TABDEF * pTabdef,const BYTE * pbInClass,SCRIPT_STRING_ANALYSIS * pssa) HRESULT WINAPI <usp10.h>
ScriptStringCPtoX(SCRIPT_STRING_ANALYSIS ssa,int icp,WINBOOL fTrailing,int * pX) HRESULT WINAPI <usp10.h>
ScriptStringFree(SCRIPT_STRING_ANALYSIS * pssa) HRESULT WINAPI <usp10.h>
ScriptStringGetLogicalWidths(SCRIPT_STRING_ANALYSIS ssa,int * piDx) HRESULT WINAPI <usp10.h>
ScriptStringGetOrder(SCRIPT_STRING_ANALYSIS ssa,UINT * puOrder) HRESULT WINAPI <usp10.h>
ScriptStringOut(SCRIPT_STRING_ANALYSIS ssa,int iX,int iY,UINT uOptions,const RECT * prc,int iMinSel,int iMaxSel,WINBOOL fDisabled) HRESULT WINAPI <usp10.h>
ScriptStringValidate(SCRIPT_STRING_ANALYSIS ssa) HRESULT WINAPI <usp10.h>
ScriptStringXtoCP(SCRIPT_STRING_ANALYSIS ssa,int iX,int * piCh,int * piTrailing) HRESULT WINAPI <usp10.h>
ScriptSubstituteSingleGlyph(HDC hdc,SCRIPT_CACHE * psc,SCRIPT_ANALYSIS * psa,OPENTYPE_TAG tagScript,OPENTYPE_TAG tagLangSys,OPENTYPE_TAG tagFeature,LONG lParameter,WORD wGlyphId,WORD * pwOutGlyphId) HRESULT WINAPI <usp10.h>
ScriptTextOut(const HDC hdc,SCRIPT_CACHE * psc,int x,int y,UINT fuOptions,const RECT * lprc,const SCRIPT_ANALYSIS * psa,const WCHAR * pwcReserved,int iReserved,const WORD * pwGlyphs,int cGlyphs,const int * piAdvance,const int * piJustify,const GOFFSET * pGoffset) HRESULT WINAPI <usp10.h>
ScriptXtoCP(int iX,int cChars,int cGlyphs,const WORD * pwLogClust,const SCRIPT_VISATTR * psva,const int * piAdvance,const SCRIPT_ANALYSIS * psa,int * piCP,int * piTrailing) HRESULT WINAPI <usp10.h>
ScrollBar_Enable(hwndCtl,flags)<windowsx.h>
ScrollBar_GetPos(hwndCtl)<windowsx.h>
ScrollBar_GetRange(hwndCtl,lpposMin,lpposMax)<windowsx.h>
ScrollBar_SetPos(hwndCtl,pos,fRedraw)<windowsx.h>
ScrollBar_SetRange(hwndCtl,posMin,posMax,fRedraw)<windowsx.h>
ScrollBar_Show(hwndCtl,fShow)<windowsx.h>
ScrollConsoleScreenBuffer(HANDLE hConsoleOutput,CONST SMALL_RECT * lpScrollRectangle,CONST SMALL_RECT * lpClipRectangle,COORD dwDestinationOrigin,CONST CHAR_INFO * lpFill) WINBASEAPI WINBOOL WINAPI <wincon.h>
ScrollConsoleScreenBufferA(HANDLE hConsoleOutput,CONST SMALL_RECT * lpScrollRectangle,CONST SMALL_RECT * lpClipRectangle,COORD dwDestinationOrigin,CONST CHAR_INFO * lpFill) WINBASEAPI WINBOOL WINAPI <wincon.h>
ScrollConsoleScreenBufferW(HANDLE hConsoleOutput,CONST SMALL_RECT * lpScrollRectangle,CONST SMALL_RECT * lpClipRectangle,COORD dwDestinationOrigin,CONST CHAR_INFO * lpFill) WINBASEAPI WINBOOL WINAPI <wincon.h>
ScrollDC(HDC hDC,int dx,int dy,CONST RECT * lprcScroll,CONST RECT * lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate) WINUSERAPI WINBOOL WINAPI <winuser.h>
ScrollIntoView(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
ScrollIntoView(void)virtual HRESULT WINAPI <tom.h>
ScrollRectIntoView(IHTMLElement * pIElement,RECT rect)virtual HRESULT WINAPI <mshtmlc.h>
ScrollWindow(HWND hWnd,int XAmount,int YAmount,CONST RECT * lpRect,CONST RECT * lpClipRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
ScrollWindowEx(HWND hWnd,int dx,int dy,CONST RECT * prcScroll,CONST RECT * prcClip,HRGN hrgnUpdate,LPRECT prcUpdate,UINT flags) WINUSERAPI int WINAPI <winuser.h>
ScSetInstanceGlobals(	_pv)<mapiwin.h>
ScSetInstanceGlobals(_pv)<mapiwin.h>
ScSetVerifyInstanceGlobals(	_pv,_pid)<mapiwin.h>
ScSetVerifyInstanceGlobals(_pv,_pid)<mapiwin.h>
SCSI_COMBINE_BUS_TARGET(Bus, Target)<srb.h>
SCSI_DECODE_BUS_TARGET(Value, Bus, Target)<srb.h>
ScsiDebugPrint(IN ULONG DebugPrintLevel,IN PCCHAR DebugMessage,IN...)<srb.h>
ScsiPortCompleteRequest(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN UCHAR SrbStatus)<srb.h>
ScsiPortConvertPhysicalAddressToUlong(Address)<srb.h>
ScsiPortConvertPhysicalAddressToUlong(IN SCSI_PHYSICAL_ADDRESS Address)<srb.h>
ScsiPortConvertPhysicalAddressToULongPtr(Address)))))))))<srb.h>
ScsiPortConvertUlongToPhysicalAddress(IN ULONG_PTR UlongAddress)<srb.h>
ScsiPortFlushDma(IN PVOID DeviceExtension)<srb.h>
ScsiPortFreeDeviceBase(IN PVOID HwDeviceExtension,IN PVOID MappedAddress)<srb.h>
ScsiPortGetBusData(IN PVOID DeviceExtension,IN ULONG BusDataType,IN ULONG SystemIoBusNumber,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Length)<srb.h>
ScsiPortGetDeviceBase(IN PVOID HwDeviceExtension,IN INTERFACE_TYPE BusType,IN ULONG SystemIoBusNumber,IN SCSI_PHYSICAL_ADDRESS IoAddress,IN ULONG NumberOfBytes,IN BOOLEAN InIoSpace)<srb.h>
ScsiPortGetLogicalUnit(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun)<srb.h>
ScsiPortGetPhysicalAddress(IN PVOID HwDeviceExtension,IN PSCSI_REQUEST_BLOCK Srb OPTIONAL,IN PVOID VirtualAddress,OUT ULONG * Length)<srb.h>
ScsiPortGetSrb(IN PVOID DeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN LONG QueueTag)<srb.h>
ScsiPortGetUncachedExtension(IN PVOID HwDeviceExtension,IN PPORT_CONFIGURATION_INFORMATION ConfigInfo,IN ULONG NumberOfBytes)<srb.h>
ScsiPortGetVirtualAddress(IN PVOID HwDeviceExtension,IN SCSI_PHYSICAL_ADDRESS PhysicalAddress)<srb.h>
ScsiPortInitialize(IN PVOID Argument1,IN PVOID Argument2,IN struct _HW_INITIALIZATION_DATA * HwInitializationData,IN PVOID HwContext OPTIONAL)<srb.h>
ScsiPortIoMapTransfer(IN PVOID HwDeviceExtension,IN PSCSI_REQUEST_BLOCK Srb,IN PVOID LogicalAddress,IN ULONG Length)<srb.h>
ScsiPortLogError(IN PVOID HwDeviceExtension,IN PSCSI_REQUEST_BLOCK Srb OPTIONAL,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN ULONG ErrorCode,IN ULONG UniqueId)<srb.h>
ScsiPortMoveMemory(IN PVOID WriteBuffer,IN PVOID ReadBuffer,IN ULONG Length)<srb.h>
ScsiPortNotification(IN SCSI_NOTIFICATION_TYPE NotificationType,IN PVOID HwDeviceExtension,IN...)<srb.h>
ScsiPortQuerySystemTime(OUT PLARGE_INTEGER CurrentTime)<srb.h>
ScsiPortReadPortBufferUchar(IN PUCHAR Port,IN PUCHAR Buffer,IN ULONG Count)<srb.h>
ScsiPortReadPortBufferUlong(IN PULONG Port,IN PULONG Buffer,IN ULONG Count)<srb.h>
ScsiPortReadPortBufferUshort(IN PUSHORT Port,IN PUSHORT Buffer,IN ULONG Count)<srb.h>
ScsiPortReadPortUchar(IN PUCHAR Port)<srb.h>
ScsiPortReadPortUlong(IN PULONG Port)<srb.h>
ScsiPortReadPortUshort(IN PUSHORT Port)<srb.h>
ScsiPortReadRegisterBufferUchar(IN PUCHAR Register,IN PUCHAR Buffer,IN ULONG Count)<srb.h>
ScsiPortReadRegisterBufferUlong(IN PULONG Register,IN PULONG Buffer,IN ULONG Count)<srb.h>
ScsiPortReadRegisterBufferUshort(IN PUSHORT Register,IN PUSHORT Buffer,IN ULONG Count)<srb.h>
ScsiPortReadRegisterUchar(IN PUCHAR Register)<srb.h>
ScsiPortReadRegisterUlong(IN PULONG Register)<srb.h>
ScsiPortReadRegisterUshort(IN PUSHORT Register)<srb.h>
ScsiPortSetBusDataByOffset(IN PVOID DeviceExtension,IN ULONG BusDataType,IN ULONG SystemIoBusNumber,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Offset,IN ULONG Length)<srb.h>
ScsiPortStallExecution(IN ULONG Delay)<srb.h>
ScsiPortValidateRange(IN PVOID HwDeviceExtension,IN INTERFACE_TYPE BusType,IN ULONG SystemIoBusNumber,IN SCSI_PHYSICAL_ADDRESS IoAddress,IN ULONG NumberOfBytes,IN BOOLEAN InIoSpace)<srb.h>
ScsiPortWmiDispatchFunction(IN PSCSI_WMILIB_CONTEXT WmiLibInfo,IN UCHAR MinorFunction,IN PVOID DeviceContext,IN PSCSIWMI_REQUEST_CONTEXT RequestContext,IN PVOID DataPath,IN ULONG BufferSize,IN PVOID Buffer)<scsiwmi.h>
ScsiPortWmiFireAdapterEvent(\\\nHwDeviceExtension,\\\nGuid,\\\nInstanceIndex,\\\nEventDataSize,\\\nEventData) EventData<scsiwmi.h>
ScsiPortWmiFireLogicalUnitEvent(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN LPGUID Guid,IN ULONG InstanceIndex,IN ULONG EventDataSize,IN PVOID EventData)<scsiwmi.h>
ScsiPortWmiGetReturnSize(RequestContext)<scsiwmi.h>
ScsiPortWmiGetReturnStatus(RequestContext)<scsiwmi.h>
ScsiPortWmiPostProcess(IN PSCSIWMI_REQUEST_CONTEXT RequestContext,IN UCHAR SrbStatus,IN ULONG BufferUsed)<scsiwmi.h>
ScsiPortWritePortBufferUchar(IN PUCHAR Port,IN PUCHAR Buffer,IN ULONG Count)<srb.h>
ScsiPortWritePortBufferUlong(IN PULONG Port,IN PULONG Buffer,IN ULONG Count)<srb.h>
ScsiPortWritePortBufferUshort(IN PUSHORT Port,IN PUSHORT Buffer,IN ULONG Count)<srb.h>
ScsiPortWritePortUchar(IN PUCHAR Port,IN UCHAR Value)<srb.h>
ScsiPortWritePortUlong(IN PULONG Port,IN ULONG Value)<srb.h>
ScsiPortWritePortUshort(IN PUSHORT Port,IN USHORT Value)<srb.h>
ScsiPortWriteRegisterBufferUchar(IN PUCHAR Register,IN PUCHAR Buffer,IN ULONG Count)<srb.h>
ScsiPortWriteRegisterBufferUlong(IN PULONG Register,IN PULONG Buffer,IN ULONG Count)<srb.h>
ScsiPortWriteRegisterBufferUshort(IN PUSHORT Register,IN PUSHORT Buffer,IN ULONG Count)<srb.h>
ScsiPortWriteRegisterUchar(IN PUCHAR Register,IN UCHAR Value)<srb.h>
ScsiPortWriteRegisterUlong(IN PULONG Register,IN ULONG Value)<srb.h>
ScsiPortWriteRegisterUshort(IN PUSHORT Register,IN USHORT Value)<srb.h>
ScUNCFromLocalPath(LPSTR lpszLocal,LPSTR lpszUNC,UINT cchUNC) STDAPI_<wabutil.h>
SeAccessCheck(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,IN BOOLEAN SubjectContextLocked,IN ACCESS_MASK DesiredAccess,IN ACCESS_MASK PreviouslyGrantedAccess,OUT PPRIVILEGE_SET * Privileges OPTIONAL,IN PGENERIC_MAPPING GenericMapping,IN KPROCESSOR_MODE AccessMode,OUT PACCESS_MASK GrantedAccess,OUT PNTSTATUS AccessStatus)<wdm.h>
SeAccessCheckFromState(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PTOKEN_ACCESS_INFORMATION PrimaryTokenInformation,IN PTOKEN_ACCESS_INFORMATION ClientTokenInformation OPTIONAL,IN ACCESS_MASK DesiredAccess,IN ACCESS_MASK PreviouslyGrantedAccess,OUT PPRIVILEGE_SET * Privileges OPTIONAL,IN PGENERIC_MAPPING GenericMapping,IN KPROCESSOR_MODE AccessMode,OUT PACCESS_MASK GrantedAccess,OUT PNTSTATUS AccessStatus)<ntifs.h>
SeAppendPrivileges(IN OUT PACCESS_STATE AccessState,IN PPRIVILEGE_SET Privileges)<ntifs.h>
SearchBackups(IGPMSearchCriteria * pIGPMSearchCriteria,IGPMBackupCollection ** ppIGPMBackupCollection)virtual HRESULT WINAPI <gpmgmt.h>
SearchGPOs(IGPMSearchCriteria * pIGPMSearchCriteria,IGPMGPOCollection ** ppIGPMGPOCollection)virtual HRESULT WINAPI <gpmgmt.h>
SearchPath(LPCSTR lpPath,LPCSTR lpFileName,LPCSTR lpExtension,DWORD nBufferLength,LPSTR lpBuffer,LPSTR * lpFilePart) WINBASEAPI DWORD APIENTRY <processenv.h>
SearchPathA(LPCSTR lpPath,LPCSTR lpFileName,LPCSTR lpExtension,DWORD nBufferLength,LPSTR lpBuffer,LPSTR * lpFilePart) WINBASEAPI DWORD APIENTRY <processenv.h>
SearchPathW(LPCWSTR lpPath,LPCWSTR lpFileName,LPCWSTR lpExtension,DWORD nBufferLength,LPWSTR lpBuffer,LPWSTR * lpFilePart) WINBASEAPI DWORD WINAPI <processenv.h>
SearchSites(IGPMSearchCriteria * pIGPMSearchCriteria,IGPMSOMCollection ** ppIGPMSOMCollection)virtual HRESULT WINAPI <gpmgmt.h>
SearchSOMs(IGPMSearchCriteria * pIGPMSearchCriteria,IGPMSOMCollection ** ppIGPMSOMCollection)virtual HRESULT WINAPI <gpmgmt.h>
SearchTreeForFile(PSTR RootPath,PSTR InputPathName,PSTR OutputPathBuffer) WINBOOL IMAGEAPI <psdk>
SearchTreeForFileW(PWSTR RootPath,PWSTR InputPathName,PWSTR OutputPathBuffer) WINBOOL IMAGEAPI <psdk>
SearchWMIFilters(IGPMSearchCriteria * pIGPMSearchCriteria,IGPMWMIFilterCollection ** ppIGPMWMIFilterCollection)virtual HRESULT WINAPI <gpmgmt.h>
SeAssignSecurity(IN PSECURITY_DESCRIPTOR ParentDescriptor OPTIONAL,IN PSECURITY_DESCRIPTOR ExplicitDescriptor OPTIONAL,OUT PSECURITY_DESCRIPTOR * NewDescriptor,IN BOOLEAN IsDirectoryObject,IN PSECURITY_SUBJECT_CONTEXT SubjectContext,IN PGENERIC_MAPPING GenericMapping,IN POOL_TYPE PoolType)<wdm.h>
SeAssignSecurityEx(IN PSECURITY_DESCRIPTOR ParentDescriptor OPTIONAL,IN PSECURITY_DESCRIPTOR ExplicitDescriptor OPTIONAL,OUT PSECURITY_DESCRIPTOR * NewDescriptor,IN GUID * ObjectType OPTIONAL,IN BOOLEAN IsDirectoryObject,IN ULONG AutoInheritFlags,IN PSECURITY_SUBJECT_CONTEXT SubjectContext,IN PGENERIC_MAPPING GenericMapping,IN POOL_TYPE PoolType)<wdm.h>
SeAuditHardLinkCreation(IN PUNICODE_STRING FileName,IN PUNICODE_STRING LinkName,IN BOOLEAN bSuccess)<ntifs.h>
SeAuditHardLinkCreationWithTransaction(IN PUNICODE_STRING FileName,IN PUNICODE_STRING LinkName,IN BOOLEAN bSuccess,IN GUID * TransactionId OPTIONAL)<ntifs.h>
SeAuditingAnyFileEventsWithContext(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext OPTIONAL)<ntifs.h>
SeAuditingFileEvents(IN BOOLEAN AccessGranted,IN PSECURITY_DESCRIPTOR SecurityDescriptor)<ntifs.h>
SeAuditingFileEventsWithContext(IN BOOLEAN AccessGranted,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext OPTIONAL)<ntifs.h>
SeAuditingFileOrGlobalEvents(IN BOOLEAN AccessGranted,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext)<ntifs.h>
SeAuditingHardLinkEvents(IN BOOLEAN AccessGranted,IN PSECURITY_DESCRIPTOR SecurityDescriptor)<ntifs.h>
SeAuditingHardLinkEventsWithContext(IN BOOLEAN AccessGranted,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext OPTIONAL)<ntifs.h>
SeAuditTransactionStateChange(IN GUID * TransactionId,IN GUID * ResourceManagerId,IN ULONG NewTransactionState)<ntifs.h>
SEC_GET_KEY_FN(void * Arg,void * Principal,unsigned __LONG32 KeyVer,void ** Key,SECURITY_STATUS * Status) typedef void<sspi.h>
SEC_SUCCESS(Status)<sspi.h>
SeCaptureSubjectContext(OUT PSECURITY_SUBJECT_CONTEXT SubjectContext)<wdm.h>
SecEqualLuid(L1,L2)<ntsecpkg.h>
SECFDefault(SECFIgnoreCase | SECFIgnoreKanaType)<sapi54.h>
SecInvalidateHandle(x)<sspi.h>
SecIsValidHandle(x)<sspi.h>
SecIsZeroLuid(L1)<ntsecpkg.h>
SecLookupAccountName(PUNICODE_STRING Name,PULONG SidSize,PSID Sid,PSID_NAME_USE NameUse,PULONG DomainSize,PUNICODE_STRING ReferencedDomain) KSECDDDECLSPEC NTSTATUS WINAPI <sspi.h>
SecLookupAccountSid(PSID Sid,PULONG NameSize,PUNICODE_STRING NameBuffer,PULONG DomainSize,PUNICODE_STRING DomainBuffer,PSID_NAME_USE NameUse) KSECDDDECLSPEC NTSTATUS WINAPI <sspi.h>
SecLookupWellKnownSid(WELL_KNOWN_SID_TYPE SidType,PSID Sid,ULONG SidBufferSize,PULONG SidSize) KSECDDDECLSPEC NTSTATUS WINAPI <sspi.h>
SecMakeSPN(PUNICODE_STRING ServiceClass,PUNICODE_STRING ServiceName,PUNICODE_STRING InstanceName,USHORT InstancePort,PUNICODE_STRING Referrer,PUNICODE_STRING Spn,PULONG Length,BOOLEAN Allocate) KSECDDDECLSPEC NTSTATUS NTAPI <sspi.h>
SecMakeSPNEx(PUNICODE_STRING ServiceClass,PUNICODE_STRING ServiceName,PUNICODE_STRING InstanceName,USHORT InstancePort,PUNICODE_STRING Referrer,PUNICODE_STRING TargetInfo,PUNICODE_STRING Spn,PULONG Length,BOOLEAN Allocate) KSECDDDECLSPEC NTSTATUS NTAPI <sspi.h>
SeComputeAutoInheritByObjectType(IN PVOID ObjectType,IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL,IN PSECURITY_DESCRIPTOR ParentSecurityDescriptor OPTIONAL)<wdm.h>
SECOND_IPADDRESS(x)<commctrl.h>
SECONDBYTE(VALUE)<wdm.h>
SeCreateClientSecurity(IN PETHREAD ClientThread,IN PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos,IN BOOLEAN RemoteSession,OUT PSECURITY_CLIENT_CONTEXT ClientContext)<ntifs.h>
SeCreateClientSecurityFromSubjectContext(IN PSECURITY_SUBJECT_CONTEXT SubjectContext,IN PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos,IN BOOLEAN ServerIsRemote,OUT PSECURITY_CLIENT_CONTEXT ClientContext)<ntifs.h>
SecureZeroMemory(Destination, Length)<winbase.h>
SecurityDescriptorToBinarySD(VARIANT vVarSecDes,PSECURITY_DESCRIPTOR * ppSecurityDescriptor,PDWORD pdwSDLength,LPCWSTR pszServerName,LPCWSTR userName,LPCWSTR passWord,DWORD dwFlags) HRESULT WINAPI <adshlp.h>
SeDeassignSecurity(IN OUT PSECURITY_DESCRIPTOR * SecurityDescriptor)<wdm.h>
SeDeleteClientSecurity(C)<ntifs.h>
SeDeleteObjectAuditAlarm(IN PVOID Object,IN HANDLE Handle)<ntifs.h>
SeDeleteObjectAuditAlarmWithTransaction(IN PVOID Object,IN HANDLE Handle,IN GUID * TransactionId OPTIONAL)<ntifs.h>
Seek(HACCESSOR hAccessor,DBORDINAL cKeyValues,void * pData,DBSEEK dwSeekOptions)virtual HRESULT WINAPI <scardssp.h>
Seek(LONG dLibMove,LONG dwOrigin,LONG * pLibnewPosition=0)virtual HRESULT WINAPI <scardssp.h>
SeEnableAccessToExports()<ntifs.h>
SeExamineGlobalSacl(IN PUNICODE_STRING ObjectType,IN PACCESS_TOKEN Token,IN ACCESS_MASK DesiredAccess,IN BOOLEAN AccessGranted,IN OUT PBOOLEAN GenerateAudit,IN OUT PBOOLEAN GenerateAlarm OPTIONAL)<ntifs.h>
SeExamineSacl(IN PACL Sacl,IN PACCESS_TOKEN Token,IN ACCESS_MASK DesiredAccess,IN BOOLEAN AccessGranted,OUT PBOOLEAN GenerateAudit,OUT PBOOLEAN GenerateAlarm)<ntifs.h>
SeFilterToken(IN PACCESS_TOKEN ExistingToken,IN ULONG Flags,IN PTOKEN_GROUPS SidsToDisable OPTIONAL,IN PTOKEN_PRIVILEGES PrivilegesToDelete OPTIONAL,IN PTOKEN_GROUPS RestrictedSids OPTIONAL,OUT PACCESS_TOKEN * FilteredToken)<ntifs.h>
SeFreePrivileges(IN PPRIVILEGE_SET Privileges)<ntifs.h>
SeGetWorldRights(IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PGENERIC_MAPPING GenericMapping,OUT PACCESS_MASK GrantedAccess)<wdm.h>
SeImpersonateClient(IN PSECURITY_CLIENT_CONTEXT ClientContext,IN PETHREAD ServerThread OPTIONAL)<ntifs.h>
SeImpersonateClientEx(IN PSECURITY_CLIENT_CONTEXT ClientContext,IN PETHREAD ServerThread OPTIONAL)<ntifs.h>
select(int nfds,fd_set * readfds,fd_set * writefds,fd_set * exceptfds,const PTIMEVAL timeout) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
Select(PNODE Node)virtual HRESULT WINAPI <tom.h>
Select(void)virtual HRESULT WINAPI <tom.h>
select(void)virtual HRESULT WINAPI <winsock2.h>
SelectActiveFrame(const GUID * dimensionID,UINT frameIndex)__inline__ Status Image::<gdiplusimpl.h>
SelectAll(void)virtual HRESULT WINAPI <mmcobj.h>
SelectAndActivateButton(ULONG ulButton)virtual HRESULT WINAPI <strmif.h>
SelectAngle(ULONG ulAngle,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
SelectAtPosition(POINT point)virtual HRESULT WINAPI <strmif.h>
SelectAudioStream(ULONG ulAudio,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
SelectBitmap(hdc,hbm)<windowsx.h>
SelectBrush(hdc,hbr)<windowsx.h>
SelectButton(ULONG ulButton)virtual HRESULT WINAPI <strmif.h>
SelectCall(ITCallInfo * pCall,VARIANT_BOOL fSelectDefaultTerminals)virtual HRESULT WINAPI <tapi3if.h>
SelectClipPath(HDC hdc,int mode) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SelectClipRgn(HDC hdc,HRGN hrgn) WINGDIAPI int WINAPI <wingdi.h>
SelectCMM(DWORD) WINBOOL WINAPI <icm.h>
SelectDefaultAudioLanguage(LCID Language,DVD_AUDIO_LANG_EXT audioExtension)virtual HRESULT WINAPI <strmif.h>
SelectDefaultMenuLanguage(LCID Language)virtual HRESULT WINAPI <strmif.h>
SelectDefaultSubpictureLanguage(LCID Language,DVD_SUBPICTURE_LANG_EXT subpictureExtension)virtual HRESULT WINAPI <strmif.h>
SelectDeviceDlg(HWND hwndParent,LONG lDeviceType,LONG lFlags,BSTR * pbstrDeviceID,IWiaItem ** ppItemRoot)virtual HRESULT WINAPI <wia.h>
SelectDeviceDlgID(HWND hwndParent,LONG lDeviceType,LONG lFlags,BSTR * pbstrDeviceID)virtual HRESULT WINAPI <wia.h>
SelectFile(BYTE byP1,BYTE byP2,LPBYTEBUFFER pData,LONG lBytesToRead,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
SelectFont(hdc,hfont)<windowsx.h>
SelectKaraokeAudioPresentationMode(ULONG ulMode)virtual HRESULT WINAPI <strmif.h>
SelectNPPBlobFromTable(HWND hwnd,PBLOB_TABLE pBlobTable,HBLOB * hBlob) DWORD __cdecl <netmon.h>
SelectNPPBlobFromTableExU(HWND hwnd,PBLOB_TABLE pBlobTable,HBLOB * hBlob,char * szHelpFileName) DWORD __cdecl <netmon.h>
SelectObject(HDC hdc,HGDIOBJ h) WINGDIAPI HGDIOBJ WINAPI <wingdi.h>
SelectPalette(HDC hdc,HPALETTE hPal,WINBOOL bForceBkgd) WINGDIAPI HPALETTE WINAPI <wingdi.h>
SelectParentalCountry(BYTE bCountry[2])virtual HRESULT WINAPI <strmif.h>
SelectParentalLevel(ULONG ulParentalLevel)virtual HRESULT WINAPI <strmif.h>
SelectPen(hdc,hpen)<windowsx.h>
SelectRange(IMarkupPointer * pStart,IMarkupPointer * pEnd,SELECTION_TYPE eType)virtual HRESULT WINAPI <mshtmlc.h>
SelectRelativeButton(DVD_RELATIVE_BUTTON buttonDir)virtual HRESULT WINAPI <strmif.h>
SelectScopeItem(HSCOPEITEM hScopeItem)virtual HRESULT WINAPI <mmc.h>
SelectSubpictureStream(ULONG ulSubPicture,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
SelectTerminal(ITTerminal * pTerminal)virtual HRESULT WINAPI <tapi3if.h>
SelectTerminalOnCall(ITTerminal * pTerminal)virtual HRESULT WINAPI <tapi3if.h>
SelectThreadPool(CSC_ThreadPool threadPool)virtual HRESULT WINAPI <comsvcs.h>
SelectVideoModePreference(ULONG ulPreferredDisplayMode)virtual HRESULT WINAPI <strmif.h>
SeLengthSid( Sid )<ntifs.h>
SeLocateProcessImageName(IN OUT PEPROCESS Process,OUT PUNICODE_STRING * pImageFileName)<ntifs.h>
SeLockSubjectContext(IN PSECURITY_SUBJECT_CONTEXT SubjectContext)<wdm.h>
SeMarkLogonSessionForTerminationNotification(IN PLUID LogonId)<ntifs.h>
SeMaximumAuditMaskFromGlobalSacl(IN PUNICODE_STRING ObjectTypeName OPTIONAL,IN ACCESS_MASK GrantedAccess,IN PACCESS_TOKEN Token,IN OUT PACCESS_MASK AuditMask)<ntifs.h>
Send(IDispatch * DestinationQueue,VARIANT * Transaction)virtual HRESULT WINAPI <ntddndis.h>
Send(IMSMQQueue * DestinationQueue,VARIANT * Transaction)virtual HRESULT WINAPI <ntddndis.h>
Send(IMSMQQueue2 * DestinationQueue,VARIANT * Transaction)virtual HRESULT WINAPI <ntddndis.h>
send(SOCKET s,const char * buf,int len,int flags) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
Send(VARIANT From,VARIANT To,VARIANT Subject,VARIANT Body,VARIANT Importance)virtual HRESULT WINAPI <ntddndis.h>
send(VARIANT varBody) virtual HRESULT WINAPI <winsock2.h>
Send(void)virtual HRESULT WINAPI <ntddndis.h>
SEND_DGVSIGNAL(dwFlags,dwCallback,hDriver,wDeviceID,dwUser,dwPos)<digitalv.h>
SEND_VCRSIGNAL(dwFlags,dwCallback,hDriver,wDeviceID,dwUser,dwPos)<vcr.h>
SendARP(IPAddr DestIP,IPAddr SrcIP,PVOID pMacAddr,PULONG PhyAddrLen) DWORD WINAPI <iphlpapi.h>
SENDASYNCPROC(HWND,UINT,ULONG_PTR,LRESULT) typedef VOID<winuser.h>
SendDlgItemMessage(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
SendDlgItemMessageW(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
SendDriverMessage(HDRVR hDriver,UINT message,LPARAM lParam1,LPARAM lParam2) WINMMAPI LRESULT WINAPI <strmif.h>
SendDriverMessage(int uMsg,LONG dw1,LONG dw2)virtual HRESULT WINAPI <strmif.h>
SendDTMF(RTC_DTMF enDTMF)virtual HRESULT WINAPI <rtccore.h>
SendIMEMessageEx(HWND,LPARAM) LRESULT WINAPI <ime.h>
SendIMEMessageExA(HWND,LPARAM) LRESULT WINAPI <ime.h>
SendIMEMessageExW(HWND,LPARAM) LRESULT WINAPI <ime.h>
SendInfo(BSTR bstrInfoHeader,BSTR bstrInfo,LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
SendInput(UINT cInputs,LPINPUT pInputs,int cbSize) WINUSERAPI UINT WINAPI <winuser.h>
SendMessage(BSTR bstrMessageHeader,BSTR bstrMessage,LONG_PTR lCookie)virtual HRESULT WINAPI <winuser.h>
SendMessage(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
SendMessageCallback(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData) WINUSERAPI WINBOOL WINAPI <winuser.h>
SendMessageCallbackA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData) WINUSERAPI WINBOOL WINAPI <winuser.h>
SendMessageCallbackW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData) WINUSERAPI WINBOOL WINAPI <winuser.h>
SendMessageStatus(RTC_MESSAGING_USER_STATUS enUserStatus,LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
SendMessageTimeout(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult) WINUSERAPI LRESULT WINAPI <winuser.h>
SendMessageTimeoutA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult) WINUSERAPI LRESULT WINAPI <winuser.h>
SendMessageTimeoutW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult) WINUSERAPI LRESULT WINAPI <winuser.h>
SendMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI LRESULT WINAPI <winuser.h>
SendMethodCall(const void * pIdentity,REFIID riid,DWORD dwMeth)virtual HRESULT WINAPI <comsvcs.h>
SendMethodReturn(const void * pIdentity,REFIID riid,DWORD dwMeth,HRESULT hrCall,HRESULT hrServer)virtual HRESULT WINAPI <comsvcs.h>
SendNetMeetingAccept(VARIANT varContact,__LONG32 lInviteCookie,__LONG32 lInviteType,__LONG32 * plSendCookie)virtual HRESULT WINAPI <msimcsdk.h>
SendNetMeetingCancel(VARIANT varContact,__LONG32 lInviteCookie,__LONG32 hrReason,__LONG32 * plSendCookie)virtual HRESULT WINAPI <msimcsdk.h>
SendNetMeetingInvite(VARIANT varContact,__LONG32 lInviteCookie,__LONG32 * plSendCookie)virtual HRESULT WINAPI <msimcsdk.h>
SendNotifications(LPCWSTR pcszNodeNameIn)virtual HRESULT WINAPI <cluscfgserver.h>
SendNotifications(void)virtual HRESULT WINAPI <cluscfgserver.h>
SendNotifyMessage(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
SendNotifyMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
SendNotifyMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINUSERAPI WINBOOL WINAPI <winuser.h>
SendRecv(const LPCWSTR pszAction,IBidiRequest * pRequest)virtual HRESULT WINAPI <bidispl.h>
SendResourceControl(DWORD dwControlCodeIn,LPVOID lpBufferIn,DWORD cbBufferSizeIn)virtual HRESULT WINAPI <cluscfgserver.h>
SendResourceControl(DWORD dwControlCodeIn,LPVOID lpBufferIn,DWORD cbBufferSizeIn,LPVOID lBufferInout,DWORD cbOutBufferSizeIn,LPDWORD lpcbBytesReturnedOut)virtual HRESULT WINAPI <cluscfgserver.h>
SendSAS(WINBOOL AsUser) VOID WINAPI <sas.h>
SendScsiInquiry(PISCSI_UNIQUE_SESSION_ID * UniqueSessionId,ULONGLONG Lun,UCHAR EvpdCmddt,UCHAR PageCode,PUCHAR * ScsiStatus,PULONG * ReponseSize,PUCHAR ReponseBuffer,PULONG * SenseSize,PUCHAR SenseBuffer)HRESULT WINAPI <iscsidsc.h>
SendScsiReadCapacity(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,ULONGLONG Lun,PUCHAR * ScsiStatus,PULONG * ResponseSize,PUCHAR ResponseBuffer,PULONG * SenseSize,PUCHAR SenseBuffer)HRESULT WINAPI <iscsidsc.h>
SendScsiReportLuns(PISCSI_UNIQUE_SESSION_ID UniqueSessionId,PUCHAR * ScsiStatus,PULONG * ResponseSize,PUCHAR ResponseBuffer,PULONG * SenseSize,PUCHAR SenseBuffer)HRESULT WINAPI <iscsidsc.h>
SendStatusReport(LPCWSTR pcszNodeNameIn,CLSID clsidTaskMajorIn,CLSID clsidTaskMinorIn,ULONG ulMinIn,ULONG ulMaxIn,ULONG ulCurrentIn,HRESULT hrStatusIn,LPCWSTR pcszDescriptionIn,FILETIME * pftTimeIn,LPCWSTR pcszReferenceIn)virtual HRESULT WINAPI <cluscfgserver.h>
SendText(BSTR bstrMsgHeader,BSTR bstrMsgText,IM_MSG_TYPE MsgType,LONG * plCookie)virtual HRESULT WINAPI <msimcsdk.h>
sendto(SOCKET s,const char * buf,int len,int flags,const struct sockaddr * to,int tolen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
SeObjectCreateSaclAccessBits(IN PSECURITY_DESCRIPTOR SecurityDescriptor)<wdm.h>
SeOpenObjectAuditAlarm(IN PUNICODE_STRING ObjectTypeName,IN PVOID Object OPTIONAL,IN PUNICODE_STRING AbsoluteObjectName OPTIONAL,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PACCESS_STATE AccessState,IN BOOLEAN ObjectCreated,IN BOOLEAN AccessGranted,IN KPROCESSOR_MODE AccessMode,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
SeOpenObjectAuditAlarmWithTransaction(IN PUNICODE_STRING ObjectTypeName,IN PVOID Object OPTIONAL,IN PUNICODE_STRING AbsoluteObjectName OPTIONAL,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PACCESS_STATE AccessState,IN BOOLEAN ObjectCreated,IN BOOLEAN AccessGranted,IN KPROCESSOR_MODE AccessMode,IN GUID * TransactionId OPTIONAL,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
SeOpenObjectForDeleteAuditAlarm(IN PUNICODE_STRING ObjectTypeName,IN PVOID Object OPTIONAL,IN PUNICODE_STRING AbsoluteObjectName OPTIONAL,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PACCESS_STATE AccessState,IN BOOLEAN ObjectCreated,IN BOOLEAN AccessGranted,IN KPROCESSOR_MODE AccessMode,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
SeOpenObjectForDeleteAuditAlarmWithTransaction(IN PUNICODE_STRING ObjectTypeName,IN PVOID Object OPTIONAL,IN PUNICODE_STRING AbsoluteObjectName OPTIONAL,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN PACCESS_STATE AccessState,IN BOOLEAN ObjectCreated,IN BOOLEAN AccessGranted,IN KPROCESSOR_MODE AccessMode,IN GUID * TransactionId OPTIONAL,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
SePrivilegeCheck(IN OUT PPRIVILEGE_SET RequiredPrivileges,IN PSECURITY_SUBJECT_CONTEXT SubjectContext,IN KPROCESSOR_MODE AccessMode)<ntifs.h>
SeQueryAuthenticationIdToken(IN PACCESS_TOKEN Token,OUT PLUID AuthenticationId)<ntifs.h>
SeQueryInformationToken(IN PACCESS_TOKEN Token,IN TOKEN_INFORMATION_CLASS TokenInformationClass,OUT PVOID * TokenInformation)<ntifs.h>
SeQuerySecurityDescriptorInfo(IN PSECURITY_INFORMATION SecurityInformation,OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN OUT PULONG Length,IN OUT PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor)<ntifs.h>
SeQuerySessionIdToken(IN PACCESS_TOKEN Token,OUT PULONG SessionId)<ntifs.h>
SeQuerySubjectContextToken( SubjectContext )<ntifs.h>
SeQueryTokenIntegrity(IN PACCESS_TOKEN Token,IN OUT PSID_AND_ATTRIBUTES IntegritySA)<ntifs.h>
SeRegisterLogonSessionTerminatedRoutine(IN PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine)<ntifs.h>
SeReleaseSubjectContext(IN OUT PSECURITY_SUBJECT_CONTEXT SubjectContext)<wdm.h>
SeReleaseSubjectContext(IN PSECURITY_SUBJECT_CONTEXT SubjectContext)<wdm.h>
SeReportSecurityEvent(IN ULONG Flags,IN PUNICODE_STRING SourceName,IN PSID UserSid OPTIONAL,IN PSE_ADT_PARAMETER_ARRAY AuditParameters)<wdm.h>
SeReportSecurityEventWithSubCategory(IN ULONG Flags,IN PUNICODE_STRING SourceName,IN PSID UserSid OPTIONAL,IN PSE_ADT_PARAMETER_ARRAY AuditParameters,IN ULONG AuditSubcategoryId)<ntifs.h>
Serialize(DWORD dwBufferSize,unsigned char * pbBuffer,DWORD * pdwMDRequiredBufferSize)virtual HRESULT WINAPI <ndrtypes.h>
SERVER_ROUTINE() typedef __LONG32<rpcndr.h>
ServerInvokeConfigUI(DWORD dwEapTypeId,ULONG_PTR uConnectionParam,HWND hWnd,ULONG_PTR uReserved1,ULONG_PTR uReserved2)virtual HRESULT WINAPI <rrascfg.h>
SERVICE_CCP_CODE(tt,nn)<lmsvc.h>
SERVICE_IP_CODE(tt,nn)<lmsvc.h>
SERVICE_NT_CCP_CODE(tt,nn)<lmsvc.h>
SERVICE_NT_WAIT_GET(code)<lmsvc.h>
SERVICE_UIC_CODE(cc,mm)<lmsvc.h>
SERVICEWIZARDDLGPROC(HWND hDlg,UINT wMsgID,WPARAM wParam,LPARAM lParam)typedef WINBOOL<mapiwz.h>
SeSetAccessStateGenericMapping(IN OUT PACCESS_STATE AccessState,IN PGENERIC_MAPPING GenericMapping)<ntifs.h>
SeSetAuditParameter(IN OUT PSE_ADT_PARAMETER_ARRAY AuditParameters,IN SE_ADT_PARAMETER_TYPE Type,IN ULONG Index,IN PVOID Data)<wdm.h>
SeSetSecurityDescriptorInfo(IN PVOID Object OPTIONAL,IN PSECURITY_INFORMATION SecurityInformation,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN OUT PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,IN POOL_TYPE PoolType,IN PGENERIC_MAPPING GenericMapping)<ntifs.h>
SeSetSecurityDescriptorInfoEx(IN PVOID Object OPTIONAL,IN PSECURITY_INFORMATION SecurityInformation,IN PSECURITY_DESCRIPTOR ModificationDescriptor,IN OUT PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,IN ULONG AutoInheritFlags,IN POOL_TYPE PoolType,IN PGENERIC_MAPPING GenericMapping)<ntifs.h>
SeSetSessionIdToken(IN PACCESS_TOKEN Token,IN ULONG SessionId)<ntifs.h>
SeSinglePrivilegeCheck(IN LUID PrivilegeValue,IN KPROCESSOR_MODE PreviousMode)<ntddk.h>
SessionDisconnect(BSTR bstrUserName,DWORD dwSessionId)virtual HRESULT WINAPI <sensevts.h>
SessionLost(void)virtual HRESULT WINAPI <txdtc.h>
SessionReconnect(BSTR bstrUserName,DWORD dwSessionId)virtual HRESULT WINAPI <sensevts.h>
Sessions(IADsCollection ** ppSessions)virtual HRESULT WINAPI <lmstats.h>
SeStopImpersonatingClient() PsRevertToSelf() PsRevertToSelf() PsRevertToSelf() PsRevertToSelf() PsRevertToSelf() PsRevertToSelf() PsRevertToSelf() PsRevertToSelf()<ntifs.h>
Set(__LONG32 lnSetType,BSTR bstrADsPath)virtual HRESULT WINAPI <txdtc.h>
Set(AudioDeviceProperty Property,__LONG32 lValue,TAPIControlFlags lFlags)virtual HRESULT WINAPI <txdtc.h>
Set(AudioSettingsProperty Property,__LONG32 lValue,TAPIControlFlags lFlags)virtual HRESULT WINAPI <txdtc.h>
Set(BSTR bstrADsPath,__LONG32 lnSetType)virtual HRESULT WINAPI <txdtc.h>
Set(CallQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags)virtual HRESULT WINAPI <txdtc.h>
Set(ITransaction * pTransaction)virtual HRESULT WINAPI <txdtc.h>
Set(LONG Property,LONG lValue,LONG Flags)virtual HRESULT WINAPI <txdtc.h>
Set(StreamQualityProperty Property,__LONG32 lValue,TAPIControlFlags lFlags)virtual HRESULT WINAPI <txdtc.h>
SET_ADRPARM_VERSION(ulFlags,ulVersion)<wabdefs.h>
SET_CONTEXT_ATTRIBUTES_FN_A(PCtxtHandle,unsigned __LONG32,void *,unsigned __LONG32) typedef SECURITY_STATUS<sspi.h>
SET_CONTEXT_ATTRIBUTES_FN_W(PCtxtHandle,unsigned __LONG32,void *,unsigned __LONG32) typedef SECURITY_STATUS<sspi.h>
SET_CREDENTIALS_ATTRIBUTES_FN_A(PCredHandle,unsigned __LONG32,void *,unsigned __LONG32) typedef SECURITY_STATUS<sspi.h>
SET_CREDENTIALS_ATTRIBUTES_FN_W(PCredHandle,unsigned __LONG32,void *,unsigned __LONG32) typedef SECURITY_STATUS<sspi.h>
SET_FLAG()()()
SET_FLAG(Flags, Bit)<classpnp.h>
SET_IRQL(rNewIrql)<kxia64.h>
SET_NETBIOS_SOCKADDR(_snb,_type,_name,_port)<wsnetbs.h>
SET_NETWARE_SVCID(_g,_SapId)<svcguid.h>
SET_TCP_SVCID(_g,_Port)<svcguid.h>
SET_TCP_SVCID_RR(_g,_Port,_RR)<svcguid.h>
SET_UDP_SVCID(_g,_Port)<svcguid.h>
SET_UDP_SVCID_RR(_g,_Port,_RR)<svcguid.h>
SetAbort()	VOID <comsvcs.h>
SetAbort(GdiplusAbort * pIAbort)__inline__ Status Image::<comsvcs.h>
SetAbort(void)virtual HRESULT WINAPI <comsvcs.h>
SetAbortProc(HDC hdc,ABORTPROC lpProc) WINGDIAPI int WINAPI <wingdi.h>
SetAcceleratorMenu(HACCEL hacc)virtual HRESULT WINAPI <shdeprecated.h>
SetAccessRights(PACTRL_ACCESSW pAccessList)virtual HRESULT WINAPI <iaccess.h>
SetAccountInformation(LPCWSTR pwszAccountName,LPCWSTR pwszPassword)virtual HRESULT WINAPI <mstask.h>
SetAcct(LONG lMethod,VARIANT vKey,BSTR bstrAcct)virtual HRESULT WINAPI <iiisext.h>
SetAclInformation(PACL pAcl,LPVOID pAclInformation,DWORD nAclInformationLength,ACL_INFORMATION_CLASS dwAclInformationClass) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetActivateState(UINT u)virtual HRESULT WINAPI <shdeprecated.h>
SetActivePwrScheme(UINT,PGLOBAL_POWER_POLICY,PPOWER_POLICY) BOOLEAN WINAPI <powrprof.h>
SetActiveWindow(HWND hWnd) WINUSERAPI HWND WINAPI <winuser.h>
SetActivityPerThread(DWORD activitiesPerThread)virtual HRESULT WINAPI <comsvcs.h>
SetActivityRatio(DOUBLE activityRatio)virtual HRESULT WINAPI <comsvcs.h>
SetAdditionalHeaders(LPCWSTR pwzAdditionalHeaders)virtual HRESULT WINAPI <hlink.h>
SetAdditionalParams(LPCWSTR pwzAdditionalParams)virtual HRESULT WINAPI <hlink.h>
SetAddressInfo(BSTR pStartAddress,LONG NumAddresses,unsigned char Ttl)virtual HRESULT WINAPI <sdpblb.h>
SetAddrInfoEx(PCSTR pName,PCSTR pServiceName,SOCKET_ADDRESS * pAddresses,DWORD dwAddressCount,LPBLOB lpBlob,DWORD dwFlags,DWORD dwNameSpace,LPGUID lpNspId,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
SetAddrInfoExA(PCSTR pName,PCSTR pServiceName,SOCKET_ADDRESS * pAddresses,DWORD dwAddressCount,LPBLOB lpBlob,DWORD dwFlags,DWORD dwNameSpace,LPGUID lpNspId,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
SetAddrInfoExW(PCWSTR pName,PCWSTR pServiceName,SOCKET_ADDRESS * pAddresses,DWORD dwAddressCount,LPBLOB lpBlob,DWORD dwFlags,DWORD dwNameSpace,LPGUID lpNspId,PTIMEVAL timeout,LPOVERLAPPED lpOverlapped,LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine,LPHANDLE lpNameHandle)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
SetAlcBitAnsi(lprc,i)<penwin.h>
SetAlias(WCHAR * strAlias,DWORD dwLength)virtual HRESULT WINAPI <h323priv.h>
SetAlignment(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetAlignment(PenAlignment penAlignment)	Status <tom.h>
SetAlignment(StringAlignment align)	Status <tom.h>
SetAllCaps(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetAllDefaults(void)virtual HRESULT WINAPI <strmif.h>
SetAllDefaultsWithNotify(GUID ** ChangedParam,ULONG * ChangedParamCount)virtual HRESULT WINAPI <strmif.h>
SetAllocateBuffers(WINBOOL bAllocBuffers)virtual HRESULT WINAPI <tapi3ds.h>
SetAllocatorProperties(ALLOCATOR_PROPERTIES * pAllocProperties)virtual HRESULT WINAPI <tapi3ds.h>
SetAllSettings(IStream * __MIDL_0017)virtual HRESULT WINAPI <strmif.h>
SetAllSettingsWithNotify(IStream * __MIDL_0018,GUID ** ChangedParam,ULONG * ChangedParamCount)virtual HRESULT WINAPI <strmif.h>
SetAlpha(DWORD dwStreamID,float Alpha)virtual HRESULT WINAPI <strmif.h>
SetAlphabetHRC(HRC,ALC,LPBYTE) int WINAPI <penwin.h>
SetAlphabetPriorityHRC(HRC,ALC,LPBYTE) int WINAPI <penwin.h>
SetAlphaBitmap(const VMRALPHABITMAP * pBmpParms)virtual HRESULT WINAPI <strmif.h>
SetAnimation(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetAnyNetworkAccess(WINBOOL bAnyNetworkAccess)virtual HRESULT WINAPI <txcoord.h>
SetApplicationName(LPCWSTR pwszApplicationName)virtual HRESULT WINAPI <mstask.h>
SetApplicationPriority(BSTR pAppFilename,__LONG32 lMediaType,VARIANT_BOOL fPriority)virtual HRESULT WINAPI <tapi3if.h>
SetArcDirection(HDC hdc,int dir) WINGDIAPI int WINAPI <wingdi.h>
SetAsDefFolderSettings(void)virtual HRESULT WINAPI <shdeprecated.h>
SetAspectRatioMode(DWORD AspectRatioMode)virtual HRESULT WINAPI <strmif.h>
SetAspectRatioMode(DWORD dwARMode)virtual HRESULT WINAPI <strmif.h>
SetAssistedTelephonyPriority(BSTR pAppFilename,VARIANT_BOOL fPriority)virtual HRESULT WINAPI <tapi3if.h>
SetAsSortColumn(COLUMNSORTORDER SortOrder)virtual HRESULT WINAPI <mmcobj.h>
SetAStr(__LONG32 lDestPos,__LONG32 lDestLen,UINT uCodePage,const CHAR * pszSrc,__LONG32 cchSrc,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
SetAt(ARG_KEY key,ARG_VALUE newValue)inline void CDXMap<dxtmpl.h>
SetAt(DXLISTPOS pos,ARG_TYPE newElement)inline void CDXList<dxtmpl.h>
SetAt(int nIndex,ARG_TYPE newElement)inline void CDXArray<dxtmpl.h>
SetAtGrow(int nIndex,ARG_TYPE newElement)void CDXArray<dxtmpl.h>
SetAtIndex(int nIndex,T & t) void <msputils.h>
SetAttribIMsgOnIStg(LPVOID lpObject,LPSPropTagArray lpPropTags,LPSPropAttrArray lpPropAttrs,LPSPropProblemArray * lppPropProblems) STDAPI <imessage.h>
SetAuditRights(PACTRL_AUDITW pAuditList)virtual HRESULT WINAPI <iaccess.h>
SetAuthenticateData(HWND phwnd,LPCWSTR pwzUsername,LPCWSTR pwzPassword)virtual HRESULT WINAPI <hlink.h>
SetAuthenticationLevel(AUTHENTICATION_LEVEL AuthLevel)virtual HRESULT WINAPI <txcoord.h>
SetAutoPopupMenu(__LONG32 bAutoPopupMenu)virtual HRESULT WINAPI <agtsvr.h>
SetBackColor(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetBackgroundClr(COLORREF ClrBkg)virtual HRESULT WINAPI <strmif.h>
SetBandwidthInfo(BSTR pModifier,DOUBLE Bandwidth)virtual HRESULT WINAPI <sdpblb.h>
SetBaseCap(LineCap baseCap)__inline__ Status CustomLineCap::<gdiplusimpl.h>
SetBaseInset(REAL inset)__inline__ Status CustomLineCap::<gdiplusimpl.h>
SetBindingInfo(CSC_Binding binding)virtual HRESULT WINAPI <comsvcs.h>
SetBindingString(LPCWSTR pcszBindingStringIn)virtual HRESULT WINAPI <cluscfgserver.h>
SETBIT(pb,i)<celib.h>
SetBitmapBits(HBITMAP hbm,DWORD cb,CONST VOID * pvBits) WINGDIAPI LONG WINAPI <wingdi.h>
SetBitmapDimensionEx(HBITMAP hbm,int w,int h,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetBkColor(HDC hdc,COLORREF color) WINGDIAPI COLORREF WINAPI <wingdi.h>
SetBkMode(HDC hdc,int mode) WINGDIAPI int WINAPI <wingdi.h>
SetBlend(const REAL * blendFactors,const REAL * blendPositions,INT count)	Status <gdipluspath.h>
SetBlend(REAL * blendFactors,REAL * blendPositions,INT count)	Status <gdipluspath.h>
SetBlendBellShape(REAL focus,REAL scale=1.0f)	Status <gdipluspath.h>
SetBlendTriangularShape(REAL focus,REAL scale=1.0f)	Status <gdipluspath.h>
SetBodyText(LPCOLESTR pszBodyText)virtual HRESULT WINAPI <mmc.h>
SetBold(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetBoolInBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,WINBOOL Bool) DWORD __cdecl <netmon.h>
SetBorderColor(COLORREF Clr)virtual HRESULT WINAPI <strmif.h>
SetBorderColor(COLORREF clrBorder)virtual HRESULT WINAPI <strmif.h>
SetBoundsRect(HDC hdc,CONST RECT * lprect,UINT flags) WINGDIAPI UINT WINAPI <wingdi.h>
SetBoxAlphabetHRC(HRC,LPALC,UINT) int WINAPI <penwin.h>
SetBrowseContext(IHlinkBrowseContext * pihlbc)virtual HRESULT WINAPI <hlink.h>
SetBrowseWindowInfo(HLBWINFO * phlbwi)virtual HRESULT WINAPI <hlink.h>
SetBrush(const Brush * brush)	Status <gdipluspen.h>
SetBrushOrgEx(HDC hdc,int x,int y,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetBrushRemapTable(UINT mapSize,ColorMap * map)	Status <gdiplusimageattributes.h>
SetBufferSize(DWORD BufferSize)virtual HRESULT WINAPI <tapi3ds.h>
SetBump(LONG Speed,LONG Duration)virtual HRESULT WINAPI <strmif.h>
SetButton(int idCommand,LPOLESTR lpButtonText,LPOLESTR lpTooltipText)virtual HRESULT WINAPI <mmc.h>
SetButtonState(int idCommand,MMC_BUTTON_STATE nState,WINBOOL bState)virtual HRESULT WINAPI <mmc.h>
SetCachedSigningLevel(PHANDLE SourceFiles,ULONG SourceFileCount,ULONG Flags,HANDLE TargetFile) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetCalendarInfo(LCID Locale,CALID Calendar,CALTYPE CalType,LPCSTR lpCalData) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetCalendarInfoA(LCID Locale,CALID Calendar,CALTYPE CalType,LPCSTR lpCalData) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetCalendarInfoW(LCID Locale,CALID Calendar,CALTYPE CalType,LPCWSTR lpCalData) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetCAList(DWORD dwBufferSize,unsigned char * pbBuffer)virtual HRESULT WINAPI <admex.h>
SetCallbackInterface(IDDrawExclModeVideoCallback * pCallback,DWORD dwFlags)virtual HRESULT WINAPI <strmif.h>
SetCallHubTracking(VARIANT pAddresses,VARIANT_BOOL bTracking)virtual HRESULT WINAPI <tapi3if.h>
SetCallInfoBuffer(CALLINFO_BUFFER CallInfoBuffer,DWORD dwSize,BYTE * pCallInfoBuffer)virtual HRESULT WINAPI <tapi3if.h>
SetCandidateWindow(HIMC hIMC,CANDIDATEFORM * pCandidate)virtual HRESULT WINAPI <mshtmlc.h>
SetCAProperty(const BSTR strConfig,LONG PropId,LONG PropIndex,LONG PropType,VARIANT * pvarPropertyValue)virtual HRESULT WINAPI <certadm.h>
SetCaption(BSTR bszCaption)virtual HRESULT WINAPI <agtsvr.h>
SetCapture(HWND hWnd) WINUSERAPI HWND WINAPI <winuser.h>
SetCaretBlinkTime(UINT uMSeconds) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetCaretDirection(CARET_DIRECTION eDir)virtual HRESULT WINAPI <mshtmlc.h>
SetCaretPos(int X,int Y) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetCaretType(__LONG32 CaretType)virtual HRESULT WINAPI <tom.h>
SetCatalogState(WCHAR const * pwcsCat,WCHAR const * pwcsMachine,DWORD dwNewState,DWORD * pdwOldState) STDAPI <ntquery.h>
SetCCInstPtr(LPVOID lpCurCaptureInst) VOID WINAPI <netmon.h>
SetCenterColor(const Color & color)	Status <gdipluspath.h>
SetCenterPoint(const Point & point)	Status <gdipluspath.h>
SetCenterPoint(const PointF & point)	Status <gdipluspath.h>
SetCertificateExtension(const BSTR strConfig,LONG RequestId,const BSTR strExtensionName,LONG Type,LONG Flags,const VARIANT * pvarValue)virtual HRESULT WINAPI <certif.h>
SetCertificateExtension(const BSTR strExtensionName,LONG Type,LONG ExtFlags,const VARIANT * pvarValue)virtual HRESULT WINAPI <certif.h>
SetCertificateProperty(const BSTR strPropertyName,LONG PropertyType,const VARIANT * pvarPropertyValue)virtual HRESULT WINAPI <certif.h>
SetChangeTimeOut(unsigned __LONG32 uTimeout)virtual HRESULT WINAPI <mmc.h>
SetChar(__LONG32 ch)virtual HRESULT WINAPI <tom.h>
SetChase(LONG Enable,LONG Offset,HEVENT hEvent)virtual HRESULT WINAPI <strmif.h>
SetClass(REFCLSID clsid)virtual HRESULT WINAPI <wia.h>
SetClassIDInBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,const CLSID * pClsID) DWORD __cdecl <netmon.h>
SetClassLong(HWND hWnd,int nIndex,LONG dwNewLong) WINUSERAPI DWORD WINAPI <winuser.h>
SetClassLongA(HWND hWnd,int nIndex,LONG dwNewLong) WINUSERAPI DWORD WINAPI <winuser.h>
SetClassLongPtr(HWND hWnd,int nIndex,LONG_PTR dwNewLong) WINUSERAPI ULONG_PTR WINAPI <winuser.h>
SetClassLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong) WINUSERAPI ULONG_PTR WINAPI <winuser.h>
SetClassLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong) WINUSERAPI ULONG_PTR WINAPI <winuser.h>
SetClassLongW(HWND hWnd,int nIndex,LONG dwNewLong) WINUSERAPI DWORD WINAPI <winuser.h>
SetClassName(LPCWSTR Name)virtual HRESULT WINAPI <wmiutils.h>
SetClassType(CLSID * pclsidIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetClassWord(HWND hWnd,int nIndex,WORD wNewWord) WINUSERAPI WORD WINAPI <winuser.h>
SetCling(WINBOOL fCLing)virtual HRESULT WINAPI <mshtmlc.h>
SetClip(const Graphics * g,CombineMode combineMode=CombineModeReplace)	Status <gdiplusgraphics.h>
SetClip(const GraphicsPath * path,CombineMode combineMode=CombineModeReplace)	Status <gdiplusgraphics.h>
SetClip(const Rect & rect,CombineMode combineMode=CombineModeReplace)	Status <gdiplusgraphics.h>
SetClip(const RectF & rect,CombineMode combineMode=CombineModeReplace)	Status <gdiplusgraphics.h>
SetClip(const Region * region,CombineMode combineMode=CombineModeReplace)	Status <gdiplusgraphics.h>
SetClip(HRGN hRgn,CombineMode combineMode=CombineModeReplace)	Status <gdiplusgraphics.h>
SetClipboardData(UINT uFormat,HANDLE hMem) WINUSERAPI HANDLE WINAPI <winuser.h>
SetClipboardViewer(HWND hWndNewViewer) WINUSERAPI HWND WINAPI <winuser.h>
SetClockDelta(REFERENCE_TIME rtDelta)virtual HRESULT WINAPI <strmif.h>
SetCLSID(CLSID * pCLSID)virtual HRESULT WINAPI <comsvcs.h>
SetClusterGroupName(HGROUP hGroup,LPCWSTR lpszGroupName) DWORD WINAPI <clusapi.h>
SetClusterGroupNodeList(HGROUP hGroup,DWORD NodeCount,HNODE NodeList[]) DWORD WINAPI <clusapi.h>
SetClusterName(HCLUSTER hCluster,LPCWSTR lpszNewClusterName) DWORD WINAPI <clusapi.h>
SetClusterNetworkName(HNETWORK hNetwork,LPCWSTR lpszName) DWORD WINAPI <clusapi.h>
SetClusterNetworkPriorityOrder(HCLUSTER hCluster,DWORD NetworkCount,HNETWORK NetworkList[]) DWORD WINAPI <clusapi.h>
SetClusterQuorumResource(HRESOURCE hResource,LPCWSTR lpszDeviceName,DWORD dwMaxQuoLogSize) DWORD WINAPI <clusapi.h>
SetClusterResourceDependencyExpression(HRESOURCE hResource,LPCWSTR lpszDependencyExpression)DWORD WINAPI <clusapi.h>
SetClusterResourceName(HRESOURCE hResource,LPCWSTR lpszResourceName) DWORD WINAPI <clusapi.h>
SetClusterServiceAccountPassword(LPCWSTR lpszClusterName,LPCWSTR lpszNewPassword,DWORD dwFlags,PCLUSTER_SET_PASSWORD_STATUS lpReturnStatusBuffer,LPDWORD lpcbReturnStatusBufferSize) DWORD WINAPI <clusapi.h>
SetCoalescableTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc,ULONG uToleranceDelay) WINUSERAPI UINT_PTR WINAPI <winuser.h>
SetColor(const Color & color)	Status <gdipluspen.h>
SetColorAdjustment(HDC hdc,CONST COLORADJUSTMENT * lpca) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetColorKey(COLORREF Clr)virtual HRESULT WINAPI <strmif.h>
SetColorKey(const Color & colorLow,const Color & colorHigh,ColorAdjustType type=ColorAdjustTypeDefault)	Status <strmif.h>
SetColorKey(LPDDCOLORKEY lpClrKey)virtual HRESULT WINAPI <strmif.h>
SetColorMatrices(const ColorMatrix * colorMatrix,const ColorMatrix * grayMatrix,ColorMatrixFlags mode=ColorMatrixFlagsDefault,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetColorMatrix(const ColorMatrix * colorMatrix,ColorMatrixFlags mode=ColorMatrixFlagsDefault,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetColorProfileElement(HPROFILE,TAGTYPE,DWORD,PDWORD,PVOID) WINBOOL WINAPI <icm.h>
SetColorProfileElementReference(HPROFILE,TAGTYPE,TAGTYPE) WINBOOL WINAPI <icm.h>
SetColorProfileElementSize(HPROFILE,TAGTYPE,DWORD) WINBOOL WINAPI <icm.h>
SetColorProfileHeader(HPROFILE,PPROFILEHEADER) WINBOOL WINAPI <icm.h>
SetColorSpace(HDC hdc,HCOLORSPACE hcs) WINGDIAPI HCOLORSPACE WINAPI <wingdi.h>
SetColumnConfigData(SColumnSetID * pColID,MMC_COLUMN_SET_DATA * pColSetData)virtual HRESULT WINAPI <mmc.h>
SetColumnFilter(UINT nColumn,DWORD dwType,MMC_FILTERDATA * pFilterData)virtual HRESULT WINAPI <mmc.h>
SetColumns(DBORDINAL cColumns,DBCOLUMNACCESS rgColumns[])virtual HRESULT WINAPI <oledb.h>
SetColumnSortData(SColumnSetID * pColID,MMC_SORT_SET_DATA * pColSortData)virtual HRESULT WINAPI <mmc.h>
SetColumnText(int nCol,LPCWSTR title)virtual HRESULT WINAPI <mmc.h>
SetColumnWidth(int nCol,int nWidth)virtual HRESULT WINAPI <mmc.h>
SetCommandStream(REFIID riid,REFGUID rguidDialect,IUnknown * pCommandStream)virtual HRESULT WINAPI <oledb.h>
SetCommandText(REFGUID rguidDialect,LPCOLESTR pwszCommand)virtual HRESULT WINAPI <oledb.h>
SetCommandTree(DBCOMMANDTREE ** ppRoot,DBCOMMANDREUSE dwCommandReuse,WINBOOL fCopy)virtual HRESULT WINAPI <cmdtree.h>
SetCommBreak(HANDLE hFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetCommConfig(HANDLE hCommDev,LPCOMMCONFIG lpCC,DWORD dwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetComment(LPCWSTR pwszComment)virtual HRESULT WINAPI <mstask.h>
SetCommitMode(ECommitMode ecmNewModeIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetCommMask(HANDLE hFile,DWORD dwEvtMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetCommState(HANDLE hFile,LPDCB lpDCB) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetCommTimeouts(HANDLE hFile,LPCOMMTIMEOUTS lpCommTimeouts) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetComplete(void)virtual HRESULT WINAPI <comsvcs.h>
SetCompositingMode(CompositingMode compositingMode)	Status <gdiplusgraphics.h>
SetCompositingQuality(CompositingQuality compositingQuality)	Status <gdiplusgraphics.h>
SetCompositionFontA(HIMC hIMC,LOGFONTA * plf)virtual HRESULT WINAPI <mshtmlc.h>
SetCompositionFontW(HIMC hIMC,LOGFONTW * plf)virtual HRESULT WINAPI <mshtmlc.h>
SetCompositionStringA(HIMC hIMC,DWORD dwIndex,LPVOID pComp,DWORD dwCompLen,LPVOID pRead,DWORD dwReadLen)virtual HRESULT WINAPI <mshtmlc.h>
SetCompositionStringW(HIMC hIMC,DWORD dwIndex,LPVOID pComp,DWORD dwCompLen,LPVOID pRead,DWORD dwReadLen)virtual HRESULT WINAPI <mshtmlc.h>
SetCompositionWindow(HIMC hIMC,COMPOSITIONFORM * pCompForm)virtual HRESULT WINAPI <mshtmlc.h>
SetCompoundArray(const REAL * compoundArray,INT count)	Status <gdipluspen.h>
SetCompressorInformation(COMPRESSOR_HANDLE CompressorHandle,COMPRESS_INFORMATION_CLASS CompressInformationClass,PVOID CompressInformation,SIZE_T CompressInformationSize) WINBOOL WINAPI <compressapi.h>
SetComputerEnabled(VARIANT_BOOL vbEnabled)virtual HRESULT WINAPI <gpmgmt.h>
SetComputerName(LPCSTR lpComputerName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetComputerNameA(LPCSTR lpComputerName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetComputerNameEx(COMPUTER_NAME_FORMAT NameType,LPCTSTR lpBuffer) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetComputerNameExA(COMPUTER_NAME_FORMAT NameType,LPCTSTR lpBuffer) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetComputerNameExW(COMPUTER_NAME_FORMAT NameType,LPCWSTR lpBuffer) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
SetComputerNameW(LPCWSTR lpComputerName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetConferenceBlob(BLOB_CHARACTER_SET CharacterSet,BSTR pBlob)virtual HRESULT WINAPI <sdpblb.h>
SetConfidenceText(BSTR bszTipText)virtual HRESULT WINAPI <agtsvr.h>
SetConfidenceThreshold(__LONG32 lThreshold)virtual HRESULT WINAPI <agtsvr.h>
SetConfig(DWORD cbSize,PBYTE Log) virtual HRESULT WINAPI <ilogobj.h>
SetConfigEntry(const BSTR strConfig,const BSTR strNodePath,const BSTR strEntryName,VARIANT * pvarEntry)virtual HRESULT WINAPI <certadm.h>
SetConnection(INetConnection * pCon)virtual HRESULT WINAPI <netcon.h>
SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleCP(UINT wCodePageID) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine,WINBOOL Add) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleCursorInfo(HANDLE hConsoleOutput,CONST CONSOLE_CURSOR_INFO * lpConsoleCursorInfo) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleCursorPosition(HANDLE hConsoleOutput,COORD dwCursorPosition) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleDisplayMode(HANDLE hConsoleOutput,DWORD dwFlags,PCOORD lpNewScreenBufferDimensions) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo)WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleMode(HANDLE hConsoleHandle,DWORD dwMode) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleOutputCP(UINT wCodePageID) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx)WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleScreenBufferSize(HANDLE hConsoleOutput,COORD dwSize) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleTextAttribute(HANDLE hConsoleOutput,WORD wAttributes) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleTitle(LPCSTR lpConsoleTitle) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleTitleA(LPCSTR lpConsoleTitle) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleTitleW(LPCWSTR lpConsoleTitle) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetConsoleWindowInfo(HANDLE hConsoleOutput,WINBOOL bAbsolute,CONST SMALL_RECT * lpConsoleWindow) WINBASEAPI WINBOOL WINAPI <wincon.h>
SetContext(LONG Context)virtual HRESULT WINAPI <certif.h>
SetContextAttributes(PCtxtHandle phContext,unsigned __LONG32 ulAttribute,void * pBuffer,unsigned __LONG32 cbBuffer) SECURITY_STATUS WINAPI <sspi.h>
SetContextAttributesA(PCtxtHandle phContext,unsigned __LONG32 ulAttribute,void * pBuffer,unsigned __LONG32 cbBuffer) SECURITY_STATUS WINAPI <sspi.h>
SetContextAttributesW(PCtxtHandle phContext,unsigned __LONG32 ulAttribute,void * pBuffer,unsigned __LONG32 cbBuffer) SECURITY_STATUS WINAPI <sspi.h>
SetContextMenu(VARIANT * menuStrings,VARIANT * menuStates)virtual HRESULT WINAPI <dhtmled.h>
SetContractDelegateWindow(HWND hwndSource,HWND hwndDelegate) __forceinline void <shobjidl.h>
SetControlbar(LPCONTROLBAR pControlbar)virtual HRESULT WINAPI <mmc.h>
SetConversionStatus(HIMC hIMC,DWORD fdwConversion,DWORD fdwSentence)virtual HRESULT WINAPI <mshtmlc.h>
SetConvertStg(LPSTORAGE pStg,WINBOOL fConvert)WINOLEAPI <ole2.h>
SetCostGoals(LPCOLESTR pwszRowsetName,ULONG cCostGoals,const DBCOST rgCostGoals[])virtual HRESULT WINAPI <oledbdep.h>
SetCostLimits(LPCOLESTR pwszRowsetName,ULONG cCostLimits,DBCOST * prgCostLimits,DBEXECLIMITS dwExecutionFlags)virtual HRESULT WINAPI <oledbdep.h>
SetCPSUIUserData(HWND hDlg,ULONG_PTR CPSUIUserData)<compstui.h>
SetCPUMetricEnabled(WINBOOL bMetricEnabled)virtual HRESULT WINAPI <comsvcs.h>
SetCreateThreadsAggressively(WINBOOL bMetricEnabled)virtual HRESULT WINAPI <comsvcs.h>
SetCreator(LPCWSTR pwszCreator)virtual HRESULT WINAPI <mstask.h>
SetCredentials(BG_AUTH_CREDENTIALS * credentials)virtual HRESULT WINAPI <rtccore.h>
SetCredentials(BSTR bstrUserURI,BSTR bstrUserAccount,BSTR bstrPassword)virtual HRESULT WINAPI <rtccore.h>
SetCredentials(LPCWSTR pcszUserIn,LPCWSTR pcszDomainIn,LPCWSTR pcszPasswordIn)virtual HRESULT WINAPI <rtccore.h>
SetCredentialsAttributes(PCredHandle phCredential,unsigned __LONG32 ulAttribute,void * pBuffer,unsigned __LONG32 cbBuffer) SECURITY_STATUS WINAPI <sspi.h>
SetCredentialsAttributesA(PCredHandle phCredential,unsigned __LONG32 ulAttribute,void * pBuffer,unsigned __LONG32 cbBuffer) SECURITY_STATUS WINAPI <sspi.h>
SetCredentialsAttributesW(PCredHandle phCredential,unsigned __LONG32 ulAttribute,void * pBuffer,unsigned __LONG32 cbBuffer) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount) WINBASEAPI DWORD WINAPI <synchapi.h>
SetCurrentConsoleFontEx(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx)WINBASEAPI WINBOOL WINAPI <wincon.h>
SetCurrentDirectory(LPCSTR lpPathName) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetCurrentDirectoryA(LPCSTR lpPathName) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetCurrentDirectoryW(LPCWSTR lpPathName) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetCurrentFilter(HFILTER) VOID WINAPI <netmon.h>
SetCurrentHlink(ULONG uHLID)virtual HRESULT WINAPI <hlink.h>
SetCurrentProcessExplicitAppUserModelID(PCWSTR AppID)SHSTDAPI <shobjidl.h>
SetCurrentThreadCompartmentId(NET_IF_COMPARTMENT_ID CompartmentId) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetCursor(HCURSOR hCursor) WINUSERAPI HCURSOR WINAPI <winuser.h>
SetCursor(LONG lPartID)virtual HRESULT WINAPI <winuser.h>
SetCursorPos(int X,int Y) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetCustomEndCap(const CustomLineCap * customCap)	Status <gdipluspen.h>
SetCustomStartCap(const CustomLineCap * customCap)	Status <gdipluspen.h>
SetDashCap(DashCap dashCap)	Status <gdipluspen.h>
SetDashOffset(REAL dashOffset)	Status <gdipluspen.h>
SetDashPattern(const REAL * dashArray,INT count)	Status <gdipluspen.h>
SetDashStyle(DashStyle dashStyle)	Status <gdipluspen.h>
SetData(HROW hRow,HACCESSOR hAccessor,void * pData)virtual HRESULT WINAPI <oledb.h>
SetData(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,PMETADATA_RECORD pmdrMDData)virtual HRESULT WINAPI <oledb.h>
SetDBEngine(DAODBEngine * peng) VOID <_dbdao.h>
SetDCBrushColor(HDC hdc,COLORREF color) WINGDIAPI COLORREF WINAPI <wingdi.h>
SetDCPenColor(HDC hdc,COLORREF color) WINGDIAPI COLORREF WINAPI <wingdi.h>
SetDDrawDevice(LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor)virtual HRESULT WINAPI <strmif.h>
SetDDrawObject(IDirectDraw * pDDrawObject)virtual HRESULT WINAPI <strmif.h>
SetDDrawSurface(IDirectDrawSurface * pDDrawSurface)virtual HRESULT WINAPI <strmif.h>
SetDeactivateOnReturn(VARIANT_BOOL bDeactivate)virtual HRESULT WINAPI <comsvcs.h>
SetDebugErrorLevel(DWORD dwLevel) WINUSERAPI VOID WINAPI <winuser.h>
SetDecimationImageSize(LONG lWidth,LONG lHeight)virtual HRESULT WINAPI <strmif.h>
SetDecimationUsage(DECIMATION_USAGE Usage)virtual HRESULT WINAPI <strmif.h>
SetDecompressorInformation(DECOMPRESSOR_HANDLE DecompressorHandle,COMPRESS_INFORMATION_CLASS CompressInformationClass,PVOID CompressInformation,SIZE_T CompressInformationSize) WINBOOL WINAPI <compressapi.h>
SetDefaultCapabilityPreferrence(DWORD dwNumCaps,H245_CAPABILITY * pCapabilities,DWORD * pWeights)virtual HRESULT WINAPI <h323priv.h>
SetDefaultClassId(BYTE byClass)virtual HRESULT WINAPI <scardssp.h>
SetDefaultCommConfig(LPCSTR lpszName,LPCOMMCONFIG lpCC,DWORD dwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetDefaultCommConfigA(LPCSTR lpszName,LPCOMMCONFIG lpCC,DWORD dwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetDefaultCommConfigW(LPCWSTR lpszName,LPCOMMCONFIG lpCC,DWORD dwSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetDefaultDestinationPosition(void)virtual HRESULT WINAPI <control.h>
SetDefaultDllDirectories(DWORD DirectoryFlags) WINBASEAPI WINBOOL WINAPI <libloaderapi.h>
SetDefaultID(__LONG32 dwID)virtual HRESULT WINAPI <agtsvr.h>
SetDefaultMonitor(const VMRGUID * pGUID)virtual HRESULT WINAPI <strmif.h>
SetDefaultPrinter(LPCSTR pszPrinter) WINBOOL WINAPI <winspool.h>
SetDefaultPrinterA(LPCSTR pszPrinter) WINBOOL WINAPI <winspool.h>
SetDefaultPrinterW(LPCWSTR pszPrinter) WINBOOL WINAPI <winspool.h>
SetDefaultQuery(BSTR methodName,BSTR criteria,int * errorIndex)virtual HRESULT WINAPI <eventsys.h>
SetDefaultQuery(REFIID eventIID,BSTR bstrMethodName,BSTR bstrCriteria,int * errorIndex)virtual HRESULT WINAPI <eventsys.h>
SetDefaultSourcePosition(void)virtual HRESULT WINAPI <control.h>
SetDefaultTabStop(float Value)virtual HRESULT WINAPI <tom.h>
SetDefaultVerb(MMC_CONSOLE_VERB eCmdID)virtual HRESULT WINAPI <mmc.h>
SetDeinterlaceMode(DWORD dwStreamID,LPGUID lpDeinterlaceMode)virtual HRESULT WINAPI <strmif.h>
SetDeinterlacePrefs(DWORD dwDeinterlacePrefs)virtual HRESULT WINAPI <strmif.h>
SetDeleteDelay(__LONG32 msecDeleteDelay)virtual HRESULT WINAPI <comsvcs.h>
SetDependency(LPCLSID pclsidDepResTypeIn,DWORD dfIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetDescBarText(LPOLESTR DescText)virtual HRESULT WINAPI <mmc.h>
SetDescription(BSTR bszDescription)virtual HRESULT WINAPI <cluscfgserver.h>
SetDescription(LPCWSTR pcszDescriptionIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetDescription(LPCWSTR Val)virtual HRESULT WINAPI <cluscfgserver.h>
SetDestinationPosition(__LONG32 Left,__LONG32 Top,__LONG32 Width,__LONG32 Height)virtual HRESULT WINAPI <control.h>
SetDevConfig(BSTR pDeviceClass,DWORD dwSize,BYTE * pDeviceConfig)virtual HRESULT WINAPI <tapi3if.h>
SetDeviceGammaRamp(HDC hdc,LPVOID lpRamp) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,CONST RGBQUAD * prgbq) WINGDIAPI UINT WINAPI <wingdi.h>
SetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,CONST VOID * lpBits,CONST BITMAPINFO * lpbmi,UINT ColorUse) WINGDIAPI int WINAPI <wingdi.h>
SetDIBitsToDevice(HDC hdc,int xDest,int yDest,DWORD w,DWORD h,int xSrc,int ySrc,UINT StartScan,UINT cLines,CONST VOID * lpvBits,CONST BITMAPINFO * lpbmi,UINT ColorUse) WINGDIAPI int WINAPI <wingdi.h>
SetDigitSubstitution(LANGID language,StringDigitSubstitute substitute)	Status <gdiplusstringformat.h>
SetDirectoryLocator(HWND hwndLocator) void WINAPI <ftsiface.h>
SetDisplay(__LONG32 lRow,__LONG32 lColumn,BSTR bstrDisplay)virtual HRESULT WINAPI <tapi3if.h>
SetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE orientation) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetDisplayConfig(UINT32 numPathArrayElements,DISPLAYCONFIG_PATH_INFO * pathArray,UINT32 numModeInfoArrayElements,DISPLAYCONFIG_MODE_INFO * modeInfoArray,UINT32 flags) WINUSERAPI LONG WINAPI <winuser.h>
SetDisplayGravity(DISPLAY_GRAVITY eGravity)virtual HRESULT WINAPI <mshtmlc.h>
SetDisplayName(LPCWSTR Val)virtual HRESULT WINAPI <bits.h>
SetDisplayType(__LONG32 lnDisplayType)virtual HRESULT WINAPI <iads.h>
SetDlgItemInt(HWND hDlg,int nIDDlgItem,UINT uValue,WINBOOL bSigned) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetDlgItemText(HWND hDlg,int nIDDlgItem,LPCSTR lpString) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPCWSTR lpString) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetDlgMsgResult(hwnd,msg,result)<windowsx.h>
SetDllDirectory(LPCSTR lpPathName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetDllDirectoryA(LPCSTR lpPathName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetDllDirectoryW(LPCWSTR lpPathName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetDocumentPrinter(BSTR bstrPrinterName,HDC hDC)virtual HRESULT WINAPI <mshtmlc.h>
SetDotScanningOnReads(FIO_CONTEXT * pContext,WINBOOL fEnable) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
SetDotScanningOnWrites(FIO_CONTEXT * pContext,WINBOOL fEnable) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
SetDotStuffingOnWrites(FIO_CONTEXT * pContext,WINBOOL fEnable,WINBOOL fStripDots) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
SetDotStuffState(FIO_CONTEXT * pContext,WINBOOL fKnown,WINBOOL fRequiresStuffing) FILEHC_EXPORT void WINAPI <filehc.h>
SetDoubleClickTime(UINT) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetDownLevelRasterizationLimit(UINT limitDpi)	Status <gdiplusmetafile.h>
SetDrawParameters(const RECT * prcSource,const RECT * prcTarget)virtual HRESULT WINAPI <strmif.h>
SetDriveLetterMappings(SDriveLetterMapping dlmDriveLetterMappingIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetDuplicate(ITextFont * pFont)virtual HRESULT WINAPI <tom.h>
SetDuplicate(ITextPara * pPara)virtual HRESULT WINAPI <tom.h>
SetDVDDirectory(LPCWSTR pszwPath)virtual HRESULT WINAPI <strmif.h>
SetDwordInBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,DWORD Dword) DWORD __cdecl <netmon.h>
SetDynamicTimeZoneInformation(CONST DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
SetEditProperty(LONG EditID,LONG Param,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetEditPropertySet(LONG * pEditID,LONG State)virtual HRESULT WINAPI <strmif.h>
SetEffectColor(__LONG32 Index,COLORREF cr)virtual HRESULT WINAPI <tom.h>
SetElements(REAL m11,REAL m12,REAL m21,REAL m22,REAL dx,REAL dy)	Status <gdiplusmatrix.h>
SetEmailNames(VARIANT Addresses,VARIANT Names)virtual HRESULT WINAPI <sdpblb.h>
SetEmboss(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetEnabled(__LONG32 bEnabled)virtual HRESULT WINAPI <iiisext.h>
SetEnabled(LONG lMethod,VARIANT vKey,LONG lEnabled)virtual HRESULT WINAPI <iiisext.h>
SetEncryptionKey(BSTR pKeyType,BSTR * ppKeyData)virtual HRESULT WINAPI <sdpblb.h>
SetEnd(__LONG32 cpLim)virtual HRESULT WINAPI <tom.h>
SetEndCap(LineCap endCap)	Status <gdipluspen.h>
SetEndOfFile(HANDLE hFile) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetEndOfLog(HANDLE hLog,PCLFS_LSN plsnEnd,LPOVERLAPPED lpOverlapped)WINBOOL WINAPI <clfsw32.h>
SetEngine(BSTR bszEngine)virtual HRESULT WINAPI <agtsvr.h>
SetEngrave(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetEnhMetaFileBits(UINT nSize,CONST BYTE * pb) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
SetEnlistmentRecoveryInformation(HANDLE EnlistmentHandle,ULONG BufferSize,PVOID Buffer) WINBOOL WINAPI <ktmw32.h>
SetEntriesInAcl(ULONG cCountOfExplicitEntries,PEXPLICIT_ACCESS_A pListOfExplicitEntries,PACL OldAcl,PACL * NewAcl) WINADVAPI DWORD WINAPI <aclapi.h>
SetEntriesInAclA(ULONG cCountOfExplicitEntries,PEXPLICIT_ACCESS_A pListOfExplicitEntries,PACL OldAcl,PACL * NewAcl) WINADVAPI DWORD WINAPI <aclapi.h>
SetEntriesInAclW(ULONG cCountOfExplicitEntries,PEXPLICIT_ACCESS_W pListOfExplicitEntries,PACL OldAcl,PACL * NewAcl) WINADVAPI DWORD WINAPI <aclapi.h>
SetEnvironmentStrings(LPCH NewEnvironment) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetEnvironmentStringsA(LPCH NewEnvironment) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetEnvironmentStringsW(LPWCH NewEnvironment) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetEnvironmentVariable(LPCSTR lpName,LPCSTR lpValue) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetEnvironmentVariableA(LPCSTR lpName,LPCSTR lpValue) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetEnvironmentVariableW(LPCWSTR lpName,LPCWSTR lpValue) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetError(DWORD dw) DWORD <parser.h>
SetErrorInfo(ULONG dwReserved,IErrorInfo * perrinfo)WINOLEAUTAPI <oleauto.h>
SetErrorMode(UINT uMode)WINBASEAPI UINT WINAPI <errhandlingapi.h>
SetErrorRetryCount(WORD wRetryCount)virtual HRESULT WINAPI <mstask.h>
SetErrorRetryInterval(WORD wRetryInterval)virtual HRESULT WINAPI <mstask.h>
SetEvent(HANDLE hEvent) WINBASEAPI WINBOOL WINAPI <synchapi.h>
SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HANDLE evt) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
SetEx(__LONG32 lnFormatType,VARIANT pvar)virtual HRESULT WINAPI <iads.h>
SetExecutionState(DWORD dwAdd,DWORD dwRemove)virtual HRESULT WINAPI <mmc.h>
SetExternalT120Address(WINBOOL fEnable,DWORD dwIP,WORD wPort)virtual HRESULT WINAPI <h323priv.h>
SetFileACLFlags(DWORD Flags)virtual HRESULT WINAPI <bits2_0.h>
SetFileApisToANSI(VOID) WINBASEAPI VOID WINAPI <winbase.h>
SetFileApisToOEM(VOID) WINBASEAPI VOID WINAPI <winbase.h>
SetFileAttributes(LPCSTR lpFileName,DWORD dwFileAttributes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFileAttributesA(LPCSTR lpFileName,DWORD dwFileAttributes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFileAttributesTransacted(LPCSTR lpFileName,DWORD dwFileAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileAttributesTransactedA(LPCSTR lpFileName,DWORD dwFileAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileAttributesTransactedW(LPCWSTR lpFileName,DWORD dwFileAttributes,HANDLE hTransaction) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileAttributesW(LPCWSTR lpFileName,DWORD dwFileAttributes) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFileBandwidthReservation(HANDLE hFile,DWORD nPeriodMilliseconds,DWORD nBytesPerPeriod,WINBOOL bDiscardable,LPDWORD lpTransferSize,LPDWORD lpNumOutstandingRequests) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileCompletionNotificationModes(HANDLE FileHandle,UCHAR Flags) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileInformationByHandle(HANDLE hFile,FILE_INFO_BY_HANDLE_CLASS FileInformationClass,LPVOID lpFileInformation,DWORD dwBufferSize) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFileIoOverlappedRange(HANDLE FileHandle,PUCHAR OverlappedRangeStart,ULONG Length) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFilePointer(HANDLE hFile,LONG lDistanceToMove,PLONG lpDistanceToMoveHigh,DWORD dwMoveMethod)WINBASEAPI DWORD WINAPI <fileapi.h>
SetFilePointerEx(HANDLE hFile,LARGE_INTEGER liDistanceToMove,PLARGE_INTEGER lpNewFilePointer,DWORD dwMoveMethod) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFileSecurity(LPCSTR lpFileName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) WINADVAPI WINBOOL WINAPI <winbase.h>
SetFileSecurityA(LPCSTR lpFileName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) WINADVAPI WINBOOL WINAPI <winbase.h>
SetFileSecurityW(LPCWSTR lpFileName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetFileShortName(HANDLE hFile,LPCSTR lpShortName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileShortNameA(HANDLE hFile,LPCSTR lpShortName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileShortNameW(HANDLE hFile,LPCWSTR lpShortName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFileTime(HANDLE hFile,CONST FILETIME * lpCreationTime,CONST FILETIME * lpLastAccessTime,CONST FILETIME * lpLastWriteTime) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFileValidData(HANDLE hFile,LONGLONG ValidDataLength) WINBASEAPI WINBOOL WINAPI <fileapi.h>
SetFillMode(FillMode fillMode)	Status <gdipluspath.h>
SetFillState(BOOL isFilled)	Status <gdipluslinecaps.h>
SetFilter(HACCESSOR hAccessor,DBCOUNTITEM cRows,DBCOMPAREOP CompareOps[],void * pCriteriaData)virtual HRESULT WINAPI <oledb.h>
SetFilterFlags(IBaseFilter * pFilter,DWORD dwFlags)virtual HRESULT WINAPI <strmif.h>
SetFirmwareEnvironmentVariable(LPCSTR lpName,LPCSTR lpGuid,PVOID pValue,DWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFirmwareEnvironmentVariableA(LPCSTR lpName,LPCSTR lpGuid,PVOID pValue,DWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFirmwareEnvironmentVariableEx(LPCSTR lpName,LPCSTR lpGuid,PVOID pValue,DWORD nSize,DWORD dwAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFirmwareEnvironmentVariableExA(LPCSTR lpName,LPCSTR lpGuid,PVOID pValue,DWORD nSize,DWORD dwAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFirmwareEnvironmentVariableExW(LPCWSTR lpName,LPCWSTR lpGuid,PVOID pValue,DWORD nSize,DWORD dwAttributes) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFirmwareEnvironmentVariableW(LPCWSTR lpName,LPCWSTR lpGuid,PVOID pValue,DWORD nSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetFlag(_F,_SF) <ntifs.h>
SetFlags(DWORD dwFlags)virtual HRESULT WINAPI <tom.h>
SetFlags(DWORD dwFlags,DWORD dwFlagMask)virtual HRESULT WINAPI <tom.h>
SetFlags(LONG Flags)virtual HRESULT WINAPI <tom.h>
SetFocus(HWND hWnd) WINUSERAPI HWND WINAPI <winuser.h>
SetFocusScales(REAL xScale,REAL yScale)	Status <gdipluspath.h>
SetFont(ITextFont * pFont)virtual HRESULT WINAPI <tom.h>
SetFontCharSet(short sFontCharSet)virtual HRESULT WINAPI <agtsvr.h>
SetFontName(BSTR bszFontName)virtual HRESULT WINAPI <agtsvr.h>
SetFontSize(__LONG32 lFontSize)virtual HRESULT WINAPI <agtsvr.h>
SetForeColor(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetForegroundWindow(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetForm(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm) WINBOOL WINAPI <winspool.h>
SetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm) WINBOOL WINAPI <winspool.h>
SetFormatFlags(INT flags)	Status <gdiplusstringformat.h>
SetFormattedText(ITextRange * pRange)virtual HRESULT WINAPI <tom.h>
SetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm) WINBOOL WINAPI <winspool.h>
SetForwardType(__LONG32 ForwardType,BSTR pDestAddress,BSTR pCallerAddress)virtual HRESULT WINAPI <tapi3if.h>
SetForwardType2(__LONG32 ForwardType,BSTR pDestAddress,__LONG32 DestAddressType,BSTR pCallerAddress,__LONG32 CallerAddressType)virtual HRESULT WINAPI <tapi3if.h>
SetFrameMargins(DWORD dwWidth,DWORD dwHeight)virtual HRESULT WINAPI <htiframe.h>
SetFrameName(LPCWSTR pszFrameName)virtual HRESULT WINAPI <htiframe.h>
SetFrameOptions(DWORD dwFlags)virtual HRESULT WINAPI <htiframe.h>
SetFrameSrc(LPCWSTR pszFrameSrc)virtual HRESULT WINAPI <htiframe.h>
SetFriendlyName(LPCWSTR pwzFriendlyName)virtual HRESULT WINAPI <hlink.h>
SetFromCOLORREF(COLORREF rgb)	VOID <gdipluscolor.h>
SetGamma(REAL gamma,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetGammaCorrection(BOOL useGammaCorrection)	Status <gdipluspath.h>
SetGenericParse(VARIANT_BOOL fDoGeneric)virtual HRESULT WINAPI <mshtmlc.h>
SetGestureConfig(HWND hwnd,DWORD dwReserved,UINT cIDs,PGESTURECONFIG pGestureConfig,UINT cbSize) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetGlobalRC(LPRC,LPSTR,LPSTR) UINT WINAPI <penwin.h>
SetGlobalVoiceCommandsEnabled(__LONG32 bEnable)virtual HRESULT WINAPI <agtsvr.h>
SetGPRM(ULONG ulIndex,WORD wValue,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
SetGraphicsMode(HDC hdc,int iMode) WINGDIAPI int WINAPI <wingdi.h>
SetGravity(POINTER_GRAVITY Gravity)virtual HRESULT WINAPI <mshtmlc.h>
SetGuideHRC(HRC,LPGUIDE,UINT) int WINAPI <penwin.h>
SetHandleCount(UINT uNumber) WINBASEAPI UINT WINAPI <winbase.h>
SetHandleInformation(HANDLE hObject,DWORD dwMask,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <handleapi.h>
SetHeader(LPHEADERCTRL pHeader)virtual HRESULT WINAPI <mmc.h>
SetHeight(REAL height)	Status <gdipluslinecaps.h>
SetHeld(WINBOOL m_bHeld)virtual HRESULT WINAPI <comsvcs.h>
SetHelpContextID(__LONG32 ulHelpID)virtual HRESULT WINAPI <agtsvr.h>
SetHelpContextID(__LONG32 ulID)virtual HRESULT WINAPI <agtsvr.h>
SetHelpFileName(BSTR bszName)virtual HRESULT WINAPI <agtsvr.h>
SetHelpModeOn(__LONG32 bHelpModeOn)virtual HRESULT WINAPI <agtsvr.h>
SetHidden(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetHistoryObject(IOleObject * pole,WINBOOL fIsLocalAnchor)virtual HRESULT WINAPI <shdeprecated.h>
SetHlinkSite(IHlinkSite * pihlSite,DWORD dwSiteData)virtual HRESULT WINAPI <hlink.h>
SetHmenuProp(HMENU hmenu,DWORD idChild,MSAAPROPID idProp,VARIANT var)virtual HRESULT WINAPI <oleacc.h>
SetHmenuPropServer(HMENU hmenu,DWORD idChild,const MSAAPROPID * paProps,int cProps,IAccPropServer * pServer,AnnoScope annoScope)virtual HRESULT WINAPI <oleacc.h>
SetHmenuPropStr(HMENU hmenu,DWORD idChild,MSAAPROPID idProp,LPCWSTR str)virtual HRESULT WINAPI <oleacc.h>
SetHotkeyPrefix(HotkeyPrefix hotkeyPrefix)	Status <gdiplusstringformat.h>
SetHStoreCA(HCERTSTORE hStore)virtual HRESULT WINAPI <xenroll.h>
SetHStoreMy(HCERTSTORE hStore)virtual HRESULT WINAPI <xenroll.h>
SetHStoreRequest(HCERTSTORE hStore)virtual HRESULT WINAPI <xenroll.h>
SetHStoreROOT(HCERTSTORE hStore)virtual HRESULT WINAPI <xenroll.h>
SetHwndProp(HWND hwnd,DWORD idObject,DWORD idChild,MSAAPROPID idProp,VARIANT var)virtual HRESULT WINAPI <oleacc.h>
SetHwndPropServer(HWND hwnd,DWORD idObject,DWORD idChild,const MSAAPROPID * paProps,int cProps,IAccPropServer * pServer,AnnoScope annoScope)virtual HRESULT WINAPI <oleacc.h>
SetHwndPropStr(HWND hwnd,DWORD idObject,DWORD idChild,MSAAPROPID idProp,LPCWSTR str)virtual HRESULT WINAPI <oleacc.h>
SetHyphenation(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetICMMode(HDC hdc,int mode) WINGDIAPI int WINAPI <wingdi.h>
SetICMProfile(HDC hdc,LPSTR lpFileName) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetICMProfileA(HDC hdc,LPSTR lpFileName) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetICMProfileW(HDC hdc,LPWSTR lpFileName) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetIcon(IconIdentifier id)virtual HRESULT WINAPI <mmc.h>
SetIdleOn(__LONG32 bOn)virtual HRESULT WINAPI <agtsvr.h>
SetIdleWait(WORD wIdleMinutes,WORD wDeadlineMinutes)virtual HRESULT WINAPI <mstask.h>
SetIfEntry(PMIB_IFROW pIfRow) DWORD WINAPI <iphlpapi.h>
SetIID(REFIID iid)virtual HRESULT WINAPI <callobj.h>
SetImageCompositor(IVMRImageCompositor * lpVMRImgCompositor)virtual HRESULT WINAPI <strmif.h>
SetImageConfigInformation(PLOADED_IMAGE LoadedImage,PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation) WINBOOL IMAGEAPI <imagehlp.h>
SetIndents(float StartIndent,float LeftIndent,float RightIndent)virtual HRESULT WINAPI <tom.h>
SetIndex(__LONG32 Unit,__LONG32 Index,__LONG32 Extend)virtual HRESULT WINAPI <tom.h>
SetIndex(DBID * pIndexID)virtual HRESULT WINAPI <tom.h>
SetInfo(ULONG cInfo,DCINFO rgInfo[])virtual HRESULT WINAPI <winioctl.h>
SetInfo(void)virtual HRESULT WINAPI <winioctl.h>
SetInformationJobObject(HANDLE hJob,JOBOBJECTINFOCLASS JobObjectInformationClass,LPVOID lpJobObjectInformation,DWORD cbJobObjectInformationLength) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetInitialHlink(IMoniker * pimkTarget,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName)virtual HRESULT WINAPI <hlink.h>
SetInPool(WINBOOL bInPool,IManagedPooledObj * pPooledObj)virtual HRESULT WINAPI <comsvcs.h>
SetInputData(const DWORD dwType,const BYTE * pData,const UINT uSize)virtual HRESULT WINAPI <bidispl.h>
SetInputScope(HWND hwnd,InputScope inputscope)HRESULT WINAPI <inputscope.h>
SetInputScopes(HWND hwnd,const InputScope * pInputScopes,UINT cInputScopes,WCHAR ** ppszPhraseList,UINT cPhrases,WCHAR * pszRegExp,WCHAR * pszSRGS)HRESULT WINAPI <inputscope.h>
SetInputScopeXML(HWND hwnd,WCHAR * pszXML)HRESULT WINAPI <inputscope.h>
SetInterface(LPUNKNOWN punk,WINBOOL bAddRef=FALSE) VOID <_dbdao.h>
SetInterface(REFIID riidClass,REFIID riidInterface) VOID <_dbdao.h>
SetInterfaceLic(REFIID riidClass,REFIID riidInterface) VOID <_dbdao.h>
SetInterfaceSafetyOptions(REFIID riid,DWORD dwOptionSetMask,DWORD dwEnabledOptions)virtual HRESULT WINAPI <objsafe.h>
SetInternationalHRC(HRC,UINT,LPCSTR,UINT,UINT) int WINAPI <penwin.h>
SetInterpolationColors(const Color * presetColors,const REAL * blendPositions,INT count)	Status <gdipluspath.h>
SetInterpolationColors(const Color * presetColors,REAL * blendPositions,INT count)	Status <gdipluspath.h>
SetInterpolationMode(InterpolationMode interpolationMode)	Status <gdiplusgraphics.h>
SetIoCompletionProc(HANDLE FileHandle,LPOVERLAPPED_COMPLETION_ROUTINE CompletionProc) DWORD WINAPI <rtutils.h>
SetIPAddress(ULONG ulDottedQuadIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetIpForwardEntry(PMIB_IPFORWARDROW pRoute) DWORD WINAPI <iphlpapi.h>
SetIpForwardEntry2(CONST MIB_IPFORWARD_ROW2 * Route) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetIpInterfaceEntry(PMIB_IPINTERFACE_ROW Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetIpNetEntry(PMIB_IPNETROW pArpEntry) DWORD WINAPI <iphlpapi.h>
SetIpNetEntry2(PMIB_IPNET_ROW2 Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetIpStatistics(PMIB_IPSTATS pIpStats) DWORD WINAPI <iphlpapi.h>
SetIpStatisticsEx(PMIB_IPSTATS Statistics,ULONG Family) ULONG WINAPI <iphlpapi.h>
SetIpTTL(UINT nTTL) DWORD WINAPI <iphlpapi.h>
SetIScsiGroupPresharedKey(ULONG KeyLength,PUCHAR Key,BOOLEAN Persist)HRESULT WINAPI <iscsidsc.h>
SetIScsiInitiatorCHAPSharedSecret(ULONG SharedSecretLength,PUCHAR SharedSecret)HRESULT WINAPI <iscsidsc.h>
SetIScsiInitiatorNodeName(PCHAR InitiatorNodeName)HRESULT WINAPI <iscsidsc.h>
SetIScsiInitiatorNodeNameA(PCHAR InitiatorNodeName)HRESULT WINAPI <iscsidsc.h>
SetIScsiInitiatorNodeNameW(PWCHAR InitiatorNodeName)HRESULT WINAPI <iscsidsc.h>
SetIscsiInitiatorRADIUSSharedSecret(ULONG SharedSecretLength,PUCHAR SharedSecret)HRESULT WINAPI <iscsidsc.h>
SetIScsiTunnelModeOuterAddress(PCHAR InitiatorName,ULONG InitiatorPortNumber,PCHAR DestinationAddress,PCHAR OuterModeAddress,BOOLEAN Persist)HRESULT WINAPI <iscsidsc.h>
SetIScsiTunnelModeOuterAddressA(PCHAR InitiatorName,ULONG InitiatorPortNumber,PCHAR DestinationAddress,PCHAR OuterModeAddress,BOOLEAN Persist)HRESULT WINAPI <iscsidsc.h>
SetIScsiTunnelModeOuterAddressW(PWCHAR InitiatorName,ULONG InitiatorPortNumber,PWCHAR DestinationAddress,PWCHAR OuterModeAddress,BOOLEAN Persist)HRESULT WINAPI <iscsidsc.h>
SetIsFileDotTerminated(FIO_CONTEXT * pContext,WINBOOL fIsDotTerminated) FILEHC_EXPORT void WINAPI <filehc.h>
SetItalic(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetItem(LPRESULTDATAITEM item)virtual HRESULT WINAPI <mmc.h>
SetItem(LPSCOPEDATAITEM item)virtual HRESULT WINAPI <mmc.h>
SetItemCount(int nItemCount,DWORD dwOptions)virtual HRESULT WINAPI <mmc.h>
SetItemStatus(REFSYNCMGRITEMID pItemID,DWORD dwSyncMgrStatus)virtual HRESULT WINAPI <mobsync.h>
SetJob(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command) WINBOOL WINAPI <winspool.h>
SetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command) WINBOOL WINAPI <winspool.h>
SetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command) WINBOOL WINAPI <winspool.h>
SetKeepTogether(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetKeepWithNext(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetKernelObjectSecurity(HANDLE Handle,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR SecurityDescriptor) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetKerning(float Value)virtual HRESULT WINAPI <tom.h>
SetKey(LPCWSTR wszName,ULONG uFlags,ULONG uCimType,LPVOID pKeyVal)virtual HRESULT WINAPI <wmiutils.h>
SetKey2(LPCWSTR wszName,ULONG uFlags,ULONG uCimType,VARIANT * pKeyVal)virtual HRESULT WINAPI <wmiutils.h>
SetKeyboardState(LPBYTE lpKeyState) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetLanguageFeatures(ULONG uFlags,ULONG uArraySize,ULONG * puFeatures)virtual HRESULT WINAPI <wmiutils.h>
SetLanguageID(__LONG32 langid)virtual HRESULT WINAPI <tom.h>
SetLanguageID(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetLastChangeTime(METADATA_HANDLE hMDHandle,LPCWSTR pszMDPath,PFILETIME pftMDLastChangeTime,WINBOOL bLocalTime)virtual HRESULT WINAPI <iadmw.h>
SetLastError(DWORD dwErrCode) WINBASEAPI VOID WINAPI <errhandlingapi.h>
SetLastErrorEx(DWORD dwErrCode,DWORD dwType) WINUSERAPI VOID WINAPI <winuser.h>
SetLayeredWindowAttributes(HWND hwnd,COLORREF crKey,BYTE bAlpha,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetLayout(HDC hdc,DWORD l) WINGDIAPI DWORD WINAPI <wingdi.h>
SetLineAlignment(StringAlignment align)	Status <gdiplusstringformat.h>
SetLinearColors(const Color & color1,const Color & color2)	Status <gdiplusbrush.h>
SetLineCap(LineCap startCap,LineCap endCap,DashCap dashCap)	Status <gdipluspen.h>
SetLineJoin(LineJoin lineJoin)	Status <gdipluspen.h>
SetLineSpacing(__LONG32 LineSpacingRule,float LineSpacing)virtual HRESULT WINAPI <tom.h>
SetListAlignment(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetListLevelIndex(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetListStart(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetListTab(float Value)virtual HRESULT WINAPI <tom.h>
SetListType(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetLocale(__LONG32 lDestPos,__LONG32 lDestLen,LCID locale)virtual HRESULT WINAPI <mlang.h>
SetLocaleIDs(__LONG32 CodePageID)virtual HRESULT WINAPI <cdonts.h>
SetLocaleInfo(LCID Locale,LCTYPE LCType,LPCSTR lpLCData) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetLocaleInfoA(LCID Locale,LCTYPE LCType,LPCSTR lpLCData) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetLocaleInfoW(LCID Locale,LCTYPE LCType,LPCWSTR lpLCData) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetLocalPresenceInfo(RTC_PRESENCE_STATUS enStatus,BSTR bstrNotes)virtual HRESULT WINAPI <rtccore.h>
SetLocalState(__LONG32 lState,BSTR bstrDescription,VARIANT varData)virtual HRESULT WINAPI <msimcsdk.h>
SetLocalState(__LONG32 lState,VARIANT varDescription,VARIANT varData)virtual HRESULT WINAPI <msimcsdk.h>
SetLocalTime(CONST SYSTEMTIME * lpSystemTime) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
SetLogArchiveMode(HANDLE hLog,CLFS_LOG_ARCHIVE_MODE eMode)WINBOOL WINAPI <clfsw32.h>
SetLogArchiveTail(HANDLE hLog,PCLFS_LSN plsnArchiveTail,LPVOID pReserved)WINBOOL WINAPI <clfsw32.h>
SetLogControl(ICrmLogControl * pLogControl)virtual HRESULT WINAPI <comsvcs.h>
SetLogControlVariants(ICrmLogControl * pLogControl)virtual HRESULT WINAPI <comsvcs.h>
SetLogFileSizeWithPolicy(HANDLE hLog,PULONGLONG pDesiredSize,PULONGLONG pResultingSize)WINBOOL WINAPI <clfsmgmtw32.h>
SetMacAddressInBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,const BYTE * pMacAddress) DWORD __cdecl <netmon.h>
SetMachineName(ULONG cchSvr,WCHAR szServerName[])virtual HRESULT WINAPI <comsvcs.h>
SetMailslotInfo(HANDLE hMailslot,DWORD lReadTimeout) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetManaged(WINBOOL fIsManagedIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetManagedByDefault(WINBOOL fIsManagedByDefaultIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetMapMode(HDC hdc,int iMode) WINGDIAPI int WINAPI <wingdi.h>
SetMapperFlags(HDC hdc,DWORD flags) WINGDIAPI DWORD WINAPI <wingdi.h>
SetMapping(LPCOLESTR pszMIMEType,DWORD dwMapMode,REFCLSID clsid)virtual HRESULT WINAPI <ocmm.h>
SetMarker()	Status <gdipluspath.h>
SetMaxCPULoad(__LONG32 pdwLoad)virtual HRESULT WINAPI <comsvcs.h>
SetMaxCSR(__LONG32 dwCSR)virtual HRESULT WINAPI <comsvcs.h>
SetMaxGraphLatency(REFERENCE_TIME rtMaxGraphLatency)virtual HRESULT WINAPI <strmif.h>
SetMaxQueuedRequests(__LONG32 lcMaxQueuedRequests)virtual HRESULT WINAPI <comsvcs.h>
SetMaxResultsHRC(HRC,UINT) int WINAPI <penwin.h>
SetMaxRunTime(DWORD dwMaxRunTimeMS)virtual HRESULT WINAPI <mstask.h>
SetMaxStreamOffset(REFERENCE_TIME rtMaxOffset)virtual HRESULT WINAPI <strmif.h>
SetMaxThreadCount(DWORD maxThreads)virtual HRESULT WINAPI <comsvcs.h>
SetMaxThreads(__LONG32 lcMaxThreads)virtual HRESULT WINAPI <comsvcs.h>
SetMeasurableCharacterRanges(INT rangeCount,const CharacterRange * ranges)	Status <gdiplusstringformat.h>
SetMediaType(__LONG32 lMediaType)virtual HRESULT WINAPI <tapi3if.h>
SetMenu(HWND hWnd,HMENU hMenu) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuContextHelpId(HMENU,DWORD) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuDefaultItem(HMENU hMenu,UINT uItem,UINT fByPos) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuInfo(HMENU,LPCMENUINFO) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuItemInfo(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOA lpmii) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOA lpmii) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOW lpmii) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMessageExtraInfo(LPARAM lParam) WINUSERAPI LPARAM WINAPI <winuser.h>
SetMessageQueue(int cMessagesMax) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetMessageWaitingIndicator(HANDLE hMsgIndicator,ULONG ulMsgCount) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetMetaFileBitsEx(UINT cbBuffer,CONST BYTE * lpData) WINGDIAPI HMETAFILE WINAPI <wingdi.h>
SetMetaRgn(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
SetMiddleInset(REAL middleInset)	Status <gdipluslinecaps.h>
SetMimeDBSource(MIMECONTF dwSource)virtual HRESULT WINAPI <mlang.h>
SetMinimumRetryDelay(ULONG Seconds)virtual HRESULT WINAPI <bits.h>
SetMinThreadCount(DWORD minThreads)virtual HRESULT WINAPI <comsvcs.h>
SetMinThreads(__LONG32 lcMinThreads)virtual HRESULT WINAPI <comsvcs.h>
SetMiterLimit(HDC hdc,FLOAT limit,PFLOAT old) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetMiterLimit(REAL miterLimit)	Status <wingdi.h>
SetMixingPrefs(DWORD dwMixerPrefs)virtual HRESULT WINAPI <strmif.h>
SetMLStr(__LONG32 lDestPos,__LONG32 lDestLen,IUnknown * pSrcMLStr,__LONG32 lSrcPos,__LONG32 lSrcLen)virtual HRESULT WINAPI <mlang.h>
SetMode(IPin * pPin,LONG Mode)virtual HRESULT WINAPI <strmif.h>
SetMonikerReference(DWORD grfHLSETF,IMoniker * pimkTarget,LPCWSTR pwzLocation)virtual HRESULT WINAPI <hlink.h>
SetMonitor(const VMRGUID * pGUID)virtual HRESULT WINAPI <strmif.h>
SetMonitorBrightness(HANDLE hMonitor,DWORD dwNewBrightness) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMonitorColorTemperature(HANDLE hMonitor,MC_COLOR_TEMPERATURE ctCurrentColorTemperature) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMonitorContrast(HANDLE hMonitor,DWORD dwNewContrast) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMonitorDisplayAreaPosition(HANDLE hMonitor,MC_POSITION_TYPE ptPositionType,DWORD dwNewPosition) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMonitorDisplayAreaSize(HANDLE hMonitor,MC_SIZE_TYPE stSizeType,DWORD dwNewDisplayAreaWidthOrHeight) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMonitorRedGreenOrBlueDrive(HANDLE hMonitor,MC_DRIVE_TYPE dtDriveType,DWORD dwNewDrive) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMonitorRedGreenOrBlueGain(HANDLE hMonitor,MC_GAIN_TYPE gtGainType,DWORD dwNewGain) _BOOL WINAPI <highlevelmonitorconfigurationapi.h>
SetMultiInterfacePublisherFilter(IMultiInterfacePublisherFilter * classFilter)virtual HRESULT WINAPI <eventsys.h>
SetMultiNodeCapable(WINBOOL fMultiNodeCapableIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetMyTransactionVote(TransactionVote txVote)virtual HRESULT WINAPI <comsvcs.h>
SetName(BSTR bstr)virtual HRESULT WINAPI <tom.h>
SetName(BSTR bszName)virtual HRESULT WINAPI <tom.h>
SetName(LONG lMethod,VARIANT vKey,BSTR bstrName)virtual HRESULT WINAPI <tom.h>
SetName(LPCTSTR pstr) virtual VOID <tom.h>
SetName(LPCWSTR pcszNameIn)virtual HRESULT WINAPI <tom.h>
SetNameCacheSecurityFunction(PNAME_CACHE_CONTEXT pNameCache,CACHE_ACCESS_CHECK pfnAccessCheck) FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
SetNameCount(LONG DistPointIndex,LONG NameCount)virtual HRESULT WINAPI <certenc.h>
SetNamedPipeHandleState(HANDLE hNamedPipe,LPDWORD lpMode,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
SetNamedSecurityInfo(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID psidOwner,PSID psidGroup,PACL pDacl,PACL pSacl) WINADVAPI DWORD WINAPI <aclapi.h>
SetNamedSecurityInfoA(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID psidOwner,PSID psidGroup,PACL pDacl,PACL pSacl) WINADVAPI DWORD WINAPI <aclapi.h>
SetNamedSecurityInfoW(LPWSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID psidOwner,PSID psidGroup,PACL pDacl,PACL pSacl) WINADVAPI DWORD WINAPI <aclapi.h>
SetNamedTimerReference(REFGUID rguidName,ITimer * pReferenceTimer)virtual HRESULT WINAPI <ocmm.h>
SetNameEntry(LONG DistPointIndex,LONG NameIndex,LONG NameChoice,const BSTR strName)virtual HRESULT WINAPI <certenc.h>
SetNameEntry(LONG NameIndex,LONG NameChoice,const BSTR strName)virtual HRESULT WINAPI <certenc.h>
SetNamespaceAt(ULONG uIndex,LPCWSTR pszName)virtual HRESULT WINAPI <wmiutils.h>
SetNavigateState(BNSTATE bnstate)virtual HRESULT WINAPI <shdeprecated.h>
SetNetScheduleAccountInformation(LPCWSTR pwszServerName,LPCWSTR pwszAccount,LPCWSTR pwszPassword) STDAPI <atacct.h>
SetNetworkAdministrationAccess(WINBOOL bNetworkAdministrationAccess)virtual HRESULT WINAPI <txcoord.h>
SetNetworkClientAccess(WINBOOL bNetworkClientAccess)virtual HRESULT WINAPI <txcoord.h>
SetNetworkInboundAccess(WINBOOL bInbound)virtual HRESULT WINAPI <txcoord.h>
SetNetworkInfo(IClusCfgNetworkInfo * piccniIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetNetworkInfoInBlob(HBLOB hBlob,LPNETWORKINFO lpNetworkInfo) DWORD __cdecl <netmon.h>
SetNetworkInformation(CONST NET_IF_NETWORK_GUID * NetworkGuid,NET_IF_COMPARTMENT_ID CompartmentId,CONST WCHAR * NetworkName) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetNetworkOutboundAccess(WINBOOL bOutbound)virtual HRESULT WINAPI <txcoord.h>
SetNetworkTIPAccess(WINBOOL bNetworkTIPAccess)virtual HRESULT WINAPI <txcoord.h>
SetNetworkTransactionAccess(WINBOOL bNetworkTransactionAccess)virtual HRESULT WINAPI <txcoord.h>
SetNewDataAfter(HCHAPTER hChapter,ULONG cbbmPrevious,const BYTE * pbmPrevious,HACCESSOR hAccessor,BYTE * pData,HROW * phRow)virtual HRESULT WINAPI <oledbdep.h>
SetNoLineNumber(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetNoOp(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetNoProgressTimeout(ULONG Seconds)virtual HRESULT WINAPI <bits.h>
SetNotificationMode(__LONG32 Mode)virtual HRESULT WINAPI <tom.h>
SetNotificationPointer(REFIID iid,IUnknown * pUnk)virtual HRESULT WINAPI <qmgr.h>
SetNotifyCmdLine(LPCWSTR Program,LPCWSTR Parameters)virtual HRESULT WINAPI <bits1_5.h>
SetNotifyFlags(__LONG32 lNoNotifyFlags)virtual HRESULT WINAPI <control.h>
SetNotifyFlags(ULONG Val)virtual HRESULT WINAPI <control.h>
SetNotifyInterface(IUnknown * Val)virtual HRESULT WINAPI <bits.h>
SetNotifyWindow(OAHWND hwnd,__LONG32 lMsg,LONG_PTR lInstanceData)virtual HRESULT WINAPI <control.h>
SetNPPAddress2FilterInBlob(HBLOB hBlob,LPADDRESSTABLE2 pAddressTable) DWORD __cdecl <netmon.h>
SetNPPAddressFilterInBlob(HBLOB hBlob,LPADDRESSTABLE pAddressTable) DWORD __cdecl <netmon.h>
SetNPPEtypeSapFilter(HBLOB hBlob,WORD nSaps,WORD nEtypes,LPBYTE lpSapTable,LPWORD lpEtypeTable,DWORD FilterFlags,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
SetNPPPatternFilterInBlob(HBLOB hBlob,LPEXPRESSION pExpression,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
SetNPPTriggerInBlob(HBLOB hBlob,LPTRIGGER pTrigger,HBLOB hErrorBlob) DWORD __cdecl <netmon.h>
SetNtmsDeviceChangeDetection(HANDLE hSession,HANDLE DetectHandle,LPNTMS_GUID lpRequestId,DWORD dwType,DWORD dwCount) DWORD WINAPI <ntmsapi.h>
SetNtmsMediaComplete(HANDLE hSession,LPNTMS_GUID lpMediaId) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectAttribute(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,LPCSTR lpAttributeName,LPVOID lpAttributeData,DWORD dwAttributeSize) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectAttributeA(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,LPCSTR lpAttributeName,LPVOID lpAttributeData,DWORD dwAttributeSize) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectAttributeW(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,LPCWSTR lpAttributeName,LPVOID lpAttributeData,DWORD AttributeSize) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectInformation(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATION lpInfo) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectInformation(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATIONA lpInfo) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectInformationA(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATIONA lpInfo) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectInformationW(HANDLE hSession,LPNTMS_GUID lpObjectId,LPNTMS_OBJECTINFORMATIONW lpInfo) DWORD WINAPI <ntmsapi.h>
SetNtmsObjectSecurity(HANDLE hSession,LPNTMS_GUID lpObjectId,DWORD dwType,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor) DWORD WINAPI <ntmsapi.h>
SetNtmsRequestOrder(HANDLE hSession,LPNTMS_GUID lpRequestId,DWORD dwOrderNumber) DWORD WINAPI <ntmsapi.h>
SetNtmsUIOptions(HANDLE hSession,const LPNTMS_GUID lpObjectId,DWORD dwType,DWORD dwOperation,LPCSTR lpszDestination) DWORD WINAPI <ntmsapi.h>
SetNtmsUIOptionsA(HANDLE hSession,const LPNTMS_GUID lpObjectId,DWORD dwType,DWORD dwOperation,LPCSTR lpszDestination) DWORD WINAPI <ntmsapi.h>
SetNtmsUIOptionsW(HANDLE hSession,const LPNTMS_GUID lpObjectId,DWORD dwType,DWORD dwOperation,LPCWSTR lpszDestination) DWORD WINAPI <ntmsapi.h>
SetNumberOfStreams(DWORD dwMaxStreams)virtual HRESULT WINAPI <strmif.h>
SetNumCharsPerLine(__LONG32 lCharsPerLine)virtual HRESULT WINAPI <agtsvr.h>
SetNumLines(__LONG32 lLines)virtual HRESULT WINAPI <agtsvr.h>
SetObjectAccessRights(SEC_OBJECT * pObject,ULONG cAccessEntries,EXPLICIT_ACCESS_W * prgAccessEntries)virtual HRESULT WINAPI <oledb.h>
SetObjectAttributes(PADS_ATTR_INFO pAttributeEntries,DWORD dwNumAttributes,DWORD * pdwNumAttributesModified)virtual HRESULT WINAPI <iads.h>
SetObjectOwner(SEC_OBJECT * pObject,TRUSTEE_W * pOwner)virtual HRESULT WINAPI <oledb.h>
SeTokenIsAdmin(IN PACCESS_TOKEN Token)<ntifs.h>
SeTokenIsRestricted(IN PACCESS_TOKEN Token)<ntifs.h>
SeTokenIsWriteRestricted(IN PACCESS_TOKEN Token)<ntifs.h>
SeTokenType(IN PACCESS_TOKEN Token)<ntifs.h>
SetOpenStatus(HIMC hIMC,WINBOOL fOpen)virtual HRESULT WINAPI <mshtmlc.h>
SetOption(__LONG32 lnOption,VARIANT vValue)virtual HRESULT WINAPI <strmif.h>
SetOption(DVD_OPTION_FLAG flag,WINBOOL fState)virtual HRESULT WINAPI <strmif.h>
SetOptions(XACTOPT * pOptions)virtual HRESULT WINAPI <transact.h>
SetOutline(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetOutputChannel(ColorChannelFlags channelFlags,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetOutputChannelColorProfile(const WCHAR * colorProfileFilename,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetOutputPinMediaType(LPWSTR pszPinName,AM_MEDIA_TYPE * pMediaType)virtual HRESULT WINAPI <strmif.h>
SetOutputRect(DWORD dwStreamID,const NORMALIZEDRECT * pRect)virtual HRESULT WINAPI <strmif.h>
SetOverlayFX(DWORD dwOverlayFX)virtual HRESULT WINAPI <strmif.h>
SetOwner(IUnknown * punkOwner)virtual HRESULT WINAPI <shdeprecated.h>
SetOwner(PTRUSTEEW pOwner,PTRUSTEEW pGroup)virtual HRESULT WINAPI <shdeprecated.h>
SetPage(BSTR bszPage)virtual HRESULT WINAPI <agtsvr.h>
SetPageBreakBefore(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetPageScale(REAL scale)	Status <gdiplusgraphics.h>
SetPageUnit(Unit unit)	Status <gdiplusgraphics.h>
SetPalette(const ColorPalette * palette)__inline__ Status Image::<ddrawi.h>
SetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,CONST PALETTEENTRY * pPalEntries) WINGDIAPI UINT WINAPI <wingdi.h>
SetPara(ITextPara * pPara)virtual HRESULT WINAPI <tom.h>
SetParam(ULONG iparam,VARIANT * pvar)virtual HRESULT WINAPI <callobj.h>
SetParameterInfo(DB_UPARAMS cParams,const DB_UPARAMS rgParamOrdinals[],const DBPARAMBINDINFO rgParamBindInfo[])virtual HRESULT WINAPI <oledb.h>
SetParameters(LPCWSTR pwszParameters)virtual HRESULT WINAPI <mstask.h>
SetParent(HWND hWndChild,HWND hWndNewParent) WINUSERAPI HWND WINAPI <winuser.h>
SetPassword(BSTR bstrNewPassword)virtual HRESULT WINAPI <iads.h>
SetPassword(BSTR NewPassword)virtual HRESULT WINAPI <iads.h>
SetPenAppFlags(UINT,UINT) VOID WINAPI <penwin.h>
SetPenHook(HKP,LPFNRAWHOOK) WINBOOL WINAPI <penwin.h>
SetPenMiscInfo(WPARAM,LPARAM) LONG WINAPI <penwin.h>
SetPerTcp6ConnectionEStats(PMIB_TCP6ROW Row,TCP_ESTATS_TYPE EstatsType,PUCHAR Rw,ULONG RwVersion,ULONG RwSize,ULONG Offset) ULONG WINAPI <iphlpapi.h>
SetPerTcpConnectionEStats(PMIB_TCPROW Row,TCP_ESTATS_TYPE EstatsType,PUCHAR Rw,ULONG RwVersion,ULONG RwSize,ULONG Offset) ULONG WINAPI <iphlpapi.h>
SetPerUserSecValues(PPERUSERSECTION pPerUser) HRESULT WINAPI <advpub.h>
SETPERUSERSECVALUES(PPERUSERSECTION pPerUser) typedef HRESULT<advpub.h>
SetPhoneNumbers(VARIANT Numbers,VARIANT Names)virtual HRESULT WINAPI <sdpblb.h>
SetPhraseTable(HCOMPRESSOR hcmp,PBYTE pbImages,UINT cbImages,PBYTE pacbImageCompressed,UINT cbCompressed) ERRORCODE WINAPI <ftsiface.h>
SetPhysicalCursorPos(int X,int Y) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetPixel(HDC hdc,int x,int y,COLORREF color) WINGDIAPI COLORREF WINAPI <wingdi.h>
SetPixel(INT x,INT y,const Color & color)__inline__ Status Bitmap::<wingdi.h>
SetPixelFormat(HDC hdc,int format,CONST PIXELFORMATDESCRIPTOR * ppfd) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetPixelOffsetMode(PixelOffsetMode pixelOffsetMode)	Status <gdiplusgraphics.h>
SetPixelV(HDC hdc,int x,int y,COLORREF color) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetPoint(__LONG32 x,__LONG32 y,__LONG32 Type,__LONG32 Extend)virtual HRESULT WINAPI <tom.h>
SetPointerGravity(POINTER_GRAVITY eGravity)virtual HRESULT WINAPI <mshtmlc.h>
SetPolyFillMode(HDC hdc,int mode) WINGDIAPI int WINAPI <wingdi.h>
SetPort(LPSTR pName,LPSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo) WINBOOL WINAPI <winspool.h>
SetPortA(LPSTR pName,LPSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo) WINBOOL WINAPI <winspool.h>
SetPortInfo(LONG StartPort,LONG NumPorts)virtual HRESULT WINAPI <sdpblb.h>
SetPortManager(IRTCPortManager * pPortManager)virtual HRESULT WINAPI <rtccore.h>
SetPortW(LPWSTR pName,LPWSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo) WINBOOL WINAPI <winspool.h>
SetPosition(__LONG32 lLeft,__LONG32 lTop)virtual HRESULT WINAPI <tom.h>
SetPosition(float Value)virtual HRESULT WINAPI <tom.h>
SetPositionCookie(DWORD dwPositioncookie)virtual HRESULT WINAPI <perhist.h>
SetPreferredMediaTypes(__LONG32 lMediaTypes,VARIANT_BOOL fPersistent)virtual HRESULT WINAPI <rtccore.h>
SetPresenceData(BSTR bstrNamespace,BSTR bstrData)virtual HRESULT WINAPI <rtccore.h>
SetPrimary(WINBOOL fPrimary)virtual HRESULT WINAPI <mshtmlc.h>
SetPrimaryNetworkAddress(IClusCfgIPAddressInfo * pIPAddressIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPrinter(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command) WINBOOL WINAPI <winspool.h>
SetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command) WINBOOL WINAPI <winspool.h>
SetPrinterData(HANDLE hPrinter,LPSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData) DWORD WINAPI <winspool.h>
SetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData) DWORD WINAPI <winspool.h>
SetPrinterDataEx(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData) DWORD WINAPI <winspool.h>
SetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData) DWORD WINAPI <winspool.h>
SetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData) DWORD WINAPI <winspool.h>
SetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData) DWORD WINAPI <winspool.h>
SetPrinterToken(HANDLE hToken)WINBOOL WINAPI <winsplp.h>
SetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command) WINBOOL WINAPI <winspool.h>
SetPriority(BG_JOB_PRIORITY Val)virtual HRESULT WINAPI <mstask.h>
SetPriority(DWORD dwPriority)virtual HRESULT WINAPI <mstask.h>
SetPriorityClass(HANDLE hProcess,DWORD dwPriorityClass) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetPrivate(WINBOOL fIsPrivateIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPrivateKeyArchiveCertificate(PCCERT_CONTEXT pPrivateKeyArchiveCert)virtual HRESULT WINAPI <xenroll.h>
SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ModificationDescriptor,PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,PGENERIC_MAPPING GenericMapping,HANDLE Token) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ModificationDescriptor,PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,ULONG AutoInheritFlags,PGENERIC_MAPPING GenericMapping,HANDLE Token) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetProcessAffinityMask(HANDLE hProcess,DWORD_PTR dwProcessAffinityMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetProcessAffinityUpdateMode(HANDLE hProcess,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetProcessDefaultLayout(DWORD dwDefaultLayout) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetProcessDEPPolicy(DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetProcessDPIAware(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetProcessGroupAffinity(HANDLE hProcess,CONST GROUP_AFFINITY * GroupAffinity,PGROUP_AFFINITY PreviousGroupAffinity) WINBASEAPI WINBOOL WINAPI <processtopologyapi.h>
SetProcessInformation(HANDLE hProcess,PROCESS_INFORMATION_CLASS ProcessInformationClass,LPVOID ProcessInformation,DWORD ProcessInformationSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetProcessMitigationPolicy(PROCESS_MITIGATION_POLICY MitigationPolicy,PVOID lpBuffer,SIZE_T dwLength) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetProcessPreferredUILanguages(DWORD dwFlags,PCZZWSTR pwszLanguagesBuffer,PULONG pulNumLanguages) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetProcessPriorityBoost(HANDLE hProcess,WINBOOL bDisablePriorityBoost) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetProcessRestrictionExemption(WINBOOL fEnableExemption) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetProcessShutdownParameters(DWORD dwLevel,DWORD dwFlags) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetProcessWindowStation(HWINSTA hWinSta) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetProcessWorkingSetSize(HANDLE hProcess,SIZE_T dwMinimumWorkingSetSize,SIZE_T dwMaximumWorkingSetSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetProcessWorkingSetSizeEx(HANDLE hProcess,SIZE_T dwMinimumWorkingSetSize,SIZE_T dwMaximumWorkingSetSize,DWORD Flags) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
SetProduct(const Matrix3x2F & a,const Matrix3x2F & b)inline void <d2d1helper.h>
SetProgressCallback(ISyncMgrSynchronizeCallback * lpCallBack)virtual HRESULT WINAPI <mobsync.h>
SetProp(GROUPPROP propID,VARIANT * pvarVal)virtual HRESULT WINAPI <winuser.h>
SetProp(HWND hWnd,LPCSTR lpString,HANDLE hData) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetProperties(ULONG cPropertySets,DBPROPSET rgPropertySets[])virtual HRESULT WINAPI <oledb.h>
SetProperty(BSTR name,VARIANT property)virtual HRESULT WINAPI <iedial.h>
SetProperty(const BSTR strConfig,BSTR strStorageLocation,BSTR strPropertyName,LONG Flags,const VARIANT * pvarProperty)virtual HRESULT WINAPI <iedial.h>
SetProperty(LONG lPropId,VARIANT varProp,VARIANT varReserved)virtual HRESULT WINAPI <iedial.h>
SetProperty(LPCWSTR pwzProperty,LPCWSTR pwzValue)virtual HRESULT WINAPI <iedial.h>
SetPropertyBinary(LPCWSTR pcszNameIn,const DWORD cbSizeIn,const BYTE * pbyteIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyDWORD(LPCWSTR pcszNameIn,const DWORD dwDWORDIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyExpandString(LPCWSTR pcszNameIn,LPCWSTR pcszStringIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyItem(const PropertyItem * item)__inline__ Status Image::<gdiplusimpl.h>
SetPropertyLargeInt(LPCWSTR pcszNameIn,const LARGE_INTEGER lIntIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyLong(LPCWSTR pcszNameIn,const LONG lLongIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyMultiString(LPCWSTR pcszNameIn,const DWORD cbMultiStringIn,LPCWSTR pcszMultiStringIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertySecurityDescriptor(LPCWSTR pcszNameIn,const SECURITY_DESCRIPTOR * pcsdIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyStream(GUID * pCompatibilityId,IStream * pIStream)virtual HRESULT WINAPI <wia.h>
SetPropertyString(LPCWSTR pcszNameIn,LPCWSTR pcszStringIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropertyUnsignedLargeInt(LPCWSTR pcszNameIn,const ULARGE_INTEGER ulIntIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPropServer(const BYTE * pIDString,DWORD dwIDStringLen,const MSAAPROPID * paProps,int cProps,IAccPropServer * pServer,AnnoScope annoScope)virtual HRESULT WINAPI <oleacc.h>
SetPropValue(const BYTE * pIDString,DWORD dwIDStringLen,MSAAPROPID idProp,VARIANT var)virtual HRESULT WINAPI <oleacc.h>
SetPropW(HWND hWnd,LPCWSTR lpString,HANDLE hData) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetProtected(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetProviderStatusFunc(SetProviderStatusInfo * pspsi) typedef HRESULT<timeprov.h>
SetProviderStatusInfoFreeFunc(struct SetProviderStatusInfo * pspsi) typedef void<timeprov.h>
SetProvParam(DWORD dwParam,DWORD cbData,BYTE * pbData,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
SetProxySettings(BG_JOB_PROXY_USAGE ProxyUsage,const WCHAR * ProxyList,const WCHAR * ProxyBypassList)virtual HRESULT WINAPI <bits.h>
SetPSTUIUserData(HWND,ULONG_PTR)WINBOOL WINAPI <compstui.h>
SetPublic(WINBOOL fIsPublicIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetPublisherFilter(BSTR methodName,IPublisherFilter * pPublisherFilter)virtual HRESULT WINAPI <eventsys.h>
SetPushSourceFlags(ULONG Flags)virtual HRESULT WINAPI <strmif.h>
SetPwd(LONG lMethod,VARIANT vKey,BSTR bstrPwd)virtual HRESULT WINAPI <iiisext.h>
SetQOS(__LONG32 lMediaType,QOS_SERVICE_LEVEL ServiceLevel)virtual HRESULT WINAPI <tapi3if.h>
SetQOSApplicationID(BSTR pApplicationID,BSTR pApplicationGUID,BSTR pSubIDs)virtual HRESULT WINAPI <ipmsp.h>
SetQueueDepth(__LONG32 dwQDepth)virtual HRESULT WINAPI <comsvcs.h>
SetQueueDepth(__LONG32 lcQueueDepth)virtual HRESULT WINAPI <comsvcs.h>
SetQuorumCapable(WINBOOL fIsQuorumCapableIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetQuorumResource(WINBOOL fIsQuorumResourceIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetRange(__LONG32 cpActive,__LONG32 cpOther)virtual HRESULT WINAPI <tom.h>
SetRange(HACCESSOR hAccessor,DBORDINAL cStartKeyColumns,void * pStartData,DBORDINAL cEndKeyColumns,void * pEndData,DBRANGE dwRangeOptions)virtual HRESULT WINAPI <tom.h>
SetRecogHook(UINT,UINT,HWND) WINBOOL WINAPI <penwin.h>
SetRect(LPRECT lprc,int xLeft,int yTop,int xRight,int yBottom) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetRectEmpty(LPRECT lprc) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetRectRgn(HRGN hrgn,int left,int top,int right,int bottom) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetReferredSessionState(RTC_SESSION_STATE enState)virtual HRESULT WINAPI <rtccore.h>
SetReferrer(LPITEMIDLIST pidl)virtual HRESULT WINAPI <shdeprecated.h>
SetRemapTable(UINT mapSize,const ColorMap * map,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetRemoteName(LPCWSTR Val)virtual HRESULT WINAPI <bits2_0.h>
SetRenderingMode(DWORD Mode)virtual HRESULT WINAPI <strmif.h>
SetRenderingOrigin(INT x,INT y)	Status <gdiplusgraphics.h>
SetRenderingPrefs(DWORD dwRenderFlags)virtual HRESULT WINAPI <strmif.h>
SetReplyFileName(LPCWSTR ReplyFileName)virtual HRESULT WINAPI <bits1_5.h>
SetRequestAttributes(const BSTR strConfig,LONG RequestId,const BSTR strAttributes)virtual HRESULT WINAPI <certadm.h>
SetReserved(VARIANT var1,VARIANT var2)virtual HRESULT WINAPI <cdonts.h>
SetResolution(REAL xdpi,REAL ydpi)__inline__ Status Bitmap::<gdiplusimpl.h>
SetResourceManagerCompletionPort(HANDLE ResourceManagerHandle,HANDLE IoCompletionPortHandle,ULONG_PTR CompletionKey) WINBOOL WINAPI <ktmw32.h>
SetResourcePrivateData(const BYTE * pcbBufferIn,DWORD cbBufferIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetRestriction(LONG ColumnIndex,LONG SeekOperator,LONG SortOrder,const VARIANT * pvarValue)virtual HRESULT WINAPI <certview.h>
SetResultColumn(LONG ColumnIndex)virtual HRESULT WINAPI <certview.h>
SetResultColumnCount(LONG cResultColumn)virtual HRESULT WINAPI <certview.h>
SetResultsHookHREC(HREC,HRCRESULTHOOKPROC) HRECHOOK WINAPI <penwin.h>
SetReturnValue(HRESULT hr)virtual void WINAPI <callobj.h>
SetRGB219(WINBOOL bState)virtual HRESULT WINAPI <strmif.h>
SetRichErrorInfo(LPOLESTR pstrSource,LPOLESTR pstrDescription,LPOLESTR pstrHelpFile,ULONG ulHelpID) VOID <_dbdao.h>
SetRightIndent(float Value)virtual HRESULT WINAPI <tom.h>
SetRoot(LPCWSTR pszPath)virtual HRESULT WINAPI <strmif.h>
SetROP2(HDC hdc,int rop2) WINGDIAPI int WINAPI <wingdi.h>
SetRouteValid(pRoute)<rtm.h>
SetRowPosition(HCHAPTER hChapter,HROW hRow,DBPOSITIONFLAGS dwPositionFlags)virtual HRESULT WINAPI <oledb.h>
SetSaved(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetSchema(const LPCWSTR pszSchema)virtual HRESULT WINAPI <bidispl.h>
SetScope(ULONG uIndex,LPWSTR pszClass)virtual HRESULT WINAPI <wmiutils.h>
SetScopeFromText(ULONG uIndex,LPWSTR pszText)virtual HRESULT WINAPI <wmiutils.h>
SetScrollInfo(HWND hwnd,int nBar,LPCSCROLLINFO lpsi,WINBOOL redraw) WINUSERAPI int WINAPI <winuser.h>
SetScrollPos(HWND hWnd,int nBar,int nPos,WINBOOL bRedraw) WINUSERAPI int WINAPI <winuser.h>
SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,WINBOOL bRedraw) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetSearchPathMode(DWORD Flags) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetSearchPreference(PADS_SEARCHPREF_INFO pSearchPrefs,DWORD dwNumPrefs)virtual HRESULT WINAPI <iads.h>
SetSecurityAccessMask(SECURITY_INFORMATION SecurityInformation,LPDWORD DesiredAccess) WINADVAPI VOID WINAPI <securitybaseapi.h>
SetSecurityDescriptor(__LONG32 lFlags,IDispatch * pSD)virtual HRESULT WINAPI <iads.h>
SetSecurityDescriptor(VARIANT varPath,__LONG32 lPathFormat,VARIANT varData,__LONG32 lDataFormat)virtual HRESULT WINAPI <iads.h>
SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor,SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,WINBOOL bDaclPresent,PACL pDacl,WINBOOL bDaclDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pGroup,WINBOOL bGroupDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pOwner,WINBOOL bOwnerDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor,PUCHAR RMControl) WINADVAPI DWORD WINAPI <securitybaseapi.h>
SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,WINBOOL bSaclPresent,PACL pSacl,WINBOOL bSaclDefaulted) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetSecurityInfo(HANDLE handle,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID psidOwner,PSID psidGroup,PACL pDacl,PACL pSacl) WINADVAPI DWORD WINAPI <gpmgmt.h>
SetSecurityInfo(IGPMSecurityInfo * pSecurityInfo)virtual HRESULT WINAPI <gpmgmt.h>
SetSelectionType(SELECTION_TYPE eType,ISelectionServicesListener * pIListener)virtual HRESULT WINAPI <mshtmlc.h>
SetServer(LPCWSTR Name)virtual HRESULT WINAPI <wmiutils.h>
SetService(DWORD dwNameSpace,DWORD dwOperation,DWORD dwFlags,LPSERVICE_INFOA lpServiceInfo,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,LPDWORD lpdwStatusFlags) INT WINAPI <nspapi.h>
SetService(IDispatch * pService,IDispatch * pApp=0)virtual HRESULT WINAPI <nspapi.h>
SetServiceA(DWORD dwNameSpace,DWORD dwOperation,DWORD dwFlags,LPSERVICE_INFOA lpServiceInfo,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,LPDWORD lpdwStatusFlags) INT WINAPI <nspapi.h>
SetServiceAsTrusted(LPCSTR szReserved,LPCSTR szServiceName) LOADPERF_FUNCTION <loadperf.h>
SetServiceAsTrustedA(LPCSTR szReserved,LPCSTR szServiceName) LOADPERF_FUNCTION <loadperf.h>
SetServiceAsTrustedW(LPCWSTR szReserved,LPCWSTR szServiceName) LOADPERF_FUNCTION <loadperf.h>
SetServiceBits(SERVICE_STATUS_HANDLE hServiceStatus,DWORD dwServiceBits,WINBOOL bSetBitsOn,WINBOOL bUpdateImmediately) WINBOOL WINAPI <lmserver.h>
SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor) WINADVAPI WINBOOL WINAPI <winsvc.h>
SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus,LPSERVICE_STATUS lpServiceStatus) WINADVAPI WINBOOL WINAPI <winsvc.h>
SetServiceW(DWORD dwNameSpace,DWORD dwOperation,DWORD dwFlags,LPSERVICE_INFOW lpServiceInfo,LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,LPDWORD lpdwStatusFlags) INT WINAPI <nspapi.h>
SetSessionCompartmentId(ULONG SessionId,NET_IF_COMPARTMENT_ID CompartmentId) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetSessionDescriptionManager(IRTCSessionDescriptionManager * pSessionDescriptionManager)virtual HRESULT WINAPI <rtccore.h>
SetShadow(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetSharedFolder(const BSTR strSharedFolder)virtual HRESULT WINAPI <certcli.h>
SetSignerCertificate(PCCERT_CONTEXT pSignerCert)virtual HRESULT WINAPI <xenroll.h>
SetSinkStream(CMSPStream * pStream) HRESULT <mspstrm.h>
SetSite(ICSSFilterSite * pSink)virtual HRESULT WINAPI <mshtmlc.h>
SetSite(IUnknown * pUnkSite) virtual HRESULT WINAPI <mshtmlc.h>
SetSize(__LONG32 lWidth,__LONG32 lHeight)virtual HRESULT WINAPI <tom.h>
SetSize(float Value)virtual HRESULT WINAPI <tom.h>
SetSize(int nNewSize,int nGrowBy)void CDXArray<tom.h>
SetSize(int nNewSize,int nGrowBy=-1) void <tom.h>
SetSize(LONG libNewSize)virtual HRESULT WINAPI <tom.h>
SetSmallCaps(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetSmoothingMode(SmoothingMode smoothingMode)	Status <gdiplusgraphics.h>
setsockopt(SOCKET s,int level,int optname,const char * optval,int optlen) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit,DWORD dwAdState,DWORD dwAdvertisedVersionMS,DWORD dwAdvertisedVersionLS)STDAPI <urlmon.h>
SetSortOrder(DBORDINAL cValues,const DBORDINAL rgColumns[],const DBSORT rgOrders[])virtual HRESULT WINAPI <oledb.h>
SetSoundEffectsOn(__LONG32 bOn)virtual HRESULT WINAPI <agtsvr.h>
SetSource(CGenLexSource * pSrc) void <sql_1.h>
SetSourcePosition(__LONG32 Left,__LONG32 Top,__LONG32 Width,__LONG32 Height)virtual HRESULT WINAPI <control.h>
SetSpaceAfter(float Value)virtual HRESULT WINAPI <tom.h>
SetSpaceBefore(float Value)virtual HRESULT WINAPI <tom.h>
SetSpacing(float Value)virtual HRESULT WINAPI <tom.h>
SetSRModeID(BSTR bszModeID)virtual HRESULT WINAPI <agtsvr.h>
SetStackLocation(PVOID pvStack)virtual void WINAPI <callobj.h>
SetStandardColorSpaceProfile(PCSTR,DWORD,PCSTR) WINBOOL WINAPI <icm.h>
SetStandardColorSpaceProfileA(PCSTR,DWORD,PCSTR) WINBOOL WINAPI <icm.h>
SetStandardColorSpaceProfileW(PCWSTR,DWORD,PCWSTR) WINBOOL WINAPI <icm.h>
SetStart(__LONG32 cpFirst)virtual HRESULT WINAPI <tom.h>
SetStartCap(LineCap startCap)	Status <gdipluspen.h>
SetState(IDvdState * pState,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
SetState(LPVOID pState,int cbState)virtual HRESULT WINAPI <strmif.h>
SetStatusText(LPOLESTR pszStatusText)virtual HRESULT WINAPI <mmc.h>
SetStatusWindowPos(HIMC hIMC,POINT * pptPos)virtual HRESULT WINAPI <mshtmlc.h>
SetStdHandle(DWORD nStdHandle,HANDLE hHandle) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetStdHandleEx(DWORD nStdHandle,HANDLE hHandle,PHANDLE phPrevValue) WINBASEAPI WINBOOL WINAPI <processenv.h>
SetStrBufA(__LONG32 lDestPos,__LONG32 lDestLen,UINT uCodePage,IMLangStringBufA * pSrcBuf,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
SetStrBufW(__LONG32 lDestPos,__LONG32 lDestLen,IMLangStringBufW * pSrcBuf,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
SetStreamActiveState(WINBOOL fActive)virtual HRESULT WINAPI <strmif.h>
SetStreamMediaType(DWORD dwStrmID,AM_MEDIA_TYPE * pmt,WINBOOL fTexture)virtual HRESULT WINAPI <strmif.h>
SetStreamOffset(REFERENCE_TIME rtOffset)virtual HRESULT WINAPI <strmif.h>
SetStretchBltMode(HDC hdc,int mode) WINGDIAPI int WINAPI <wingdi.h>
SetStrikeThrough(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetString(const char * pSrc)inline void _variant_t::<comutil.h>
SetStringInBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,const char * pString) DWORD __cdecl <netmon.h>
SetStringReference(DWORD grfHLSETF,LPCWSTR pwzTarget,LPCWSTR pwzLocation)virtual HRESULT WINAPI <hlink.h>
SetStrokeAttributes(HPENDATA,UINT,LPARAM,UINT) int WINAPI <penwin.h>
SetStrokeCap(LineCap strokeCap)__inline__ Status CustomLineCap::<gdiplusimpl.h>
SetStrokeCaps(LineCap startCap,LineCap endCap)__inline__ Status CustomLineCap::<gdiplusimpl.h>
SetStrokeJoin(LineJoin lineJoin)__inline__ Status CustomLineCap::<gdiplusimpl.h>
SetStrokeTableAttributes(HPENDATA,UINT,LPARAM,UINT) int WINAPI <penwin.h>
SetStyle(__LONG32 lStyle)virtual HRESULT WINAPI <tom.h>
SetStyle(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetSubnetMask(ULONG ulDottedQuadIn)virtual HRESULT WINAPI <cluscfgserver.h>
SetSubpictureState(WINBOOL bState,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
SetSubscript(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetSubscriptionItemInfo(const SUBSCRIPTIONITEMINFO * pSubscriptionItemInfo)virtual HRESULT WINAPI <subsmgr.h>
SetSuperscript(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetSurroundColors(const Color * colors,INT * count)	Status <gdipluspath.h>
SetSuspendState(BOOLEAN,BOOLEAN,BOOLEAN) BOOLEAN WINAPI <powrprof.h>
SetSwapAreaSize(w)<winbase.h>
SetSyncSource(IReferenceClock * pClock)virtual HRESULT WINAPI <strmif.h>
SetSysColors(int cElements,CONST INT * lpaElements,CONST COLORREF * lpaRgbValues) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetSysModalWindow(hWnd)<winuser.h>
SetSystemCursor(HCURSOR hcur,DWORD id) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize,SIZE_T MaximumFileCacheSize,DWORD Flags) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
SetSystemPaletteUse(HDC hdc,UINT use) WINGDIAPI UINT WINAPI <wingdi.h>
SetSystemPowerState(WINBOOL fSuspend,WINBOOL fForce) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetSystemTime(CONST SYSTEMTIME * lpSystemTime) WINBASEAPI WINBOOL WINAPI <sysinfoapi.h>
SetSystemTimeAdjustment(DWORD dwTimeAdjustment,WINBOOL bTimeAdjustmentDisabled) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetTable(LONG Table)virtual HRESULT WINAPI <certview.h>
SetTabStops(REAL firstTabOffset,INT count,const REAL * tabStops)	Status <gdiplusstringformat.h>
SetTapeParameters(HANDLE hDevice,DWORD dwOperation,LPVOID lpTapeInformation) WINBASEAPI DWORD WINAPI <winbase.h>
SetTapePosition(HANDLE hDevice,DWORD dwPositionMethod,DWORD dwPartition,DWORD dwOffsetLow,DWORD dwOffsetHigh,WINBOOL bImmediate) WINBASEAPI DWORD WINAPI <winbase.h>
SetTargetComputer(LPCWSTR pwszComputer)virtual HRESULT WINAPI <mstask.h>
SetTargetFrameName(LPCWSTR pwzTargetFrameName)virtual HRESULT WINAPI <hlink.h>
SetTaskFlags(DWORD dwFlags)virtual HRESULT WINAPI <mstask.h>
SetTCDisplay(LONG Param,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetTCDisplayEnable(LONG State)virtual HRESULT WINAPI <strmif.h>
SetTCGMode(LONG Param,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetTcpEntry(PMIB_TCPROW pTcpRow) DWORD WINAPI <iphlpapi.h>
SetTCRMode(LONG Param,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetText(BSTR bstr)virtual HRESULT WINAPI <wmiutils.h>
SetText(ULONG uMode,LPCWSTR pszPath)virtual HRESULT WINAPI <wmiutils.h>
SetTextAlign(HDC hdc,UINT align) WINGDIAPI UINT WINAPI <wingdi.h>
SetTextCharacterExtra(HDC hdc,int extra) WINGDIAPI int WINAPI <wingdi.h>
SetTextColor(HDC hdc,COLORREF color) WINGDIAPI COLORREF WINAPI <wingdi.h>
SetTextContrast(UINT contrast)	Status <gdiplusgraphics.h>
SetTextJustification(HDC hdc,int extra,int count) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetTextRenderingHint(TextRenderingHint textRenderingHint)	Status <gdiplusgraphics.h>
SetThemeAppProperties(DWORD dwFlags)THEMEAPI_<uxtheme.h>
SetThreadAffinityMask(HANDLE hThread,DWORD_PTR dwThreadAffinityMask) WINBASEAPI DWORD_PTR WINAPI <winbase.h>
SetThreadContext(HANDLE hThread,CONST CONTEXT * lpContext) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetThreadDesktop(HDESK hDesktop) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetThreadErrorMode(DWORD dwNewMode,LPDWORD lpOldMode) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetThreadExecutionState(EXECUTION_STATE esFlags) WINBASEAPI EXECUTION_STATE WINAPI <winbase.h>
SetThreadGroupAffinity(HANDLE hThread,CONST GROUP_AFFINITY * GroupAffinity,PGROUP_AFFINITY PreviousGroupAffinity) WINBASEAPI WINBOOL WINAPI <processtopologyapi.h>
SetThreadIdealProcessor(HANDLE hThread,DWORD dwIdealProcessor) WINBASEAPI DWORD WINAPI <winbase.h>
SetThreadIdealProcessorEx(HANDLE hThread,PPROCESSOR_NUMBER lpIdealProcessor,PPROCESSOR_NUMBER lpPreviousIdealProcessor) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetThreadInformation(HANDLE hThread,THREAD_INFORMATION_CLASS ThreadInformationClass,LPVOID ThreadInformation,DWORD ThreadInformationSize) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetThreadLocale(LCID Locale) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetThreadpoolStackInformation(PTP_POOL ptpp,PTP_POOL_STACK_INFORMATION ptpsi) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
SetThreadpoolThreadMaximum(PTP_POOL ptpp,DWORD cthrdMost) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
SetThreadpoolThreadMinimum(PTP_POOL ptpp,DWORD cthrdMic) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
SetThreadpoolTimer(PTP_TIMER pti,PFILETIME pftDueTime,DWORD msPeriod,DWORD msWindowLength) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
SetThreadpoolTimerEx(PTP_TIMER pti,PFILETIME pftDueTime,DWORD msPeriod,DWORD msWindowLength) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
SetThreadpoolWait(PTP_WAIT pwa,HANDLE h,PFILETIME pftTimeout) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
SetThreadpoolWaitEx(PTP_WAIT pwa,HANDLE h,PFILETIME pftTimeout,PVOID Reserved) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
SetThreadPreferredUILanguages(DWORD dwFlags,PCZZWSTR pwszLanguagesBuffer,PULONG pulNumLanguages) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetThreadPriority(HANDLE hThread,int nPriority) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetThreadPriorityBoost(HANDLE hThread,WINBOOL bDisablePriorityBoost) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetThreadStackGuarantee(PULONG StackSizeInBytes) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SetThreadToken(PHANDLE Thread,HANDLE Token) WINADVAPI WINBOOL APIENTRY <processthreadsapi.h>
SetThreadUILanguage(LANGID LangId) WINBASEAPI LANGID WINAPI <winnls.h>
SetThreshold(REAL threshold,ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetTimecode(PTIMECODE_SAMPLE pTimecodeSample)virtual HRESULT WINAPI <strmif.h>
SetTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc) WINUSERAPI UINT_PTR WINAPI <winuser.h>
SetTimerQueueTimer(HANDLE TimerQueue,WAITORTIMERCALLBACK Callback,PVOID Parameter,DWORD DueTime,DWORD Period,WINBOOL PreferIo) WINBASEAPI HANDLE WINAPI <winbase.h>
SetTimes(const FILETIME * pctime,const FILETIME * patime,const FILETIME * pmtime)virtual HRESULT WINAPI <wia.h>
SetTimeZoneInformation(CONST TIME_ZONE_INFORMATION * lpTimeZoneInformation) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
SetTitle(IShellView * psv,LPCWSTR pszName)virtual HRESULT WINAPI <shdeprecated.h>
SetTitleText(LPCOLESTR pszTitleText)virtual HRESULT WINAPI <mmc.h>
SetToIdentity(ColorAdjustType type=ColorAdjustTypeDefault)	Status <gdiplusimageattributes.h>
SetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength) WINADVAPI WINBOOL WINAPI <securitybaseapi.h>
SetToolbar(LPTOOLBAR pToolbar)virtual HRESULT WINAPI <mmc.h>
SetTopBrowser(void)virtual HRESULT WINAPI <shdeprecated.h>
SetTraceCallback(LPCGUID pGuid,PEVENT_CALLBACK EventCallback) EXTERN_C ULONG WMIAPI <evntrace.h>
SetTransactionInformation(HANDLE TransactionHandle,DWORD IsolationLevel,DWORD IsolationFlags,DWORD Timeout,LPWSTR Description) WINBOOL WINAPI <ktmw32.h>
SetTransactionStatus(HRESULT hrStatus)virtual HRESULT WINAPI <comsvcs.h>
SetTransform(const Matrix * matrix)	Status <gdipluspen.h>
SetTransportAudioParameters(LONG Param,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetTransportBasicParameters(LONG Param,LONG Value,LPCOLESTR pszData)virtual HRESULT WINAPI <strmif.h>
SetTransportVideoParameters(LONG Param,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetTrigger(const PTASK_TRIGGER pTrigger)virtual HRESULT WINAPI <mstask.h>
SetTrimming(StringTrimming trimming)	Status <gdiplusstringformat.h>
SetTrusteeProperties(TRUSTEE_W * pTrustee,ULONG cPropertySets,DBPROPSET rgPropertySets[])virtual HRESULT WINAPI <oledb.h>
SetTTSModeID(BSTR bszModeID)virtual HRESULT WINAPI <agtsvr.h>
SetType(CLSID * pclsidIn)virtual HRESULT WINAPI <tdi.h>
SetUnderline(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)WINBASEAPI LPTOP_LEVEL_EXCEPTION_FILTER WINAPI <errhandlingapi.h>
SetUnicastIpAddressEntry(CONST MIB_UNICASTIPADDRESS_ROW * Row) NETIO_STATUS NETIOAPI_API_ <netioapi.h>
SetupAddInstallSectionToDiskSpaceList(HDSKSPC DiskSpace,HINF InfHandle,HINF LayoutInfHandle,PCSTR SectionName,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddInstallSectionToDiskSpaceListA(HDSKSPC DiskSpace,HINF InfHandle,HINF LayoutInfHandle,PCSTR SectionName,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddInstallSectionToDiskSpaceListW(HDSKSPC DiskSpace,HINF InfHandle,HINF LayoutInfHandle,PCWSTR SectionName,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddSectionToDiskSpaceList(HDSKSPC DiskSpace,HINF InfHandle,HINF ListInfHandle,PCSTR SectionName,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddSectionToDiskSpaceListA(HDSKSPC DiskSpace,HINF InfHandle,HINF ListInfHandle,PCSTR SectionName,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddSectionToDiskSpaceListW(HDSKSPC DiskSpace,HINF InfHandle,HINF ListInfHandle,PCWSTR SectionName,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddToDiskSpaceList(HDSKSPC DiskSpace,PCSTR TargetFilespec,LONGLONG FileSize,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddToDiskSpaceListA(HDSKSPC DiskSpace,PCSTR TargetFilespec,LONGLONG FileSize,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddToDiskSpaceListW(HDSKSPC DiskSpace,PCWSTR TargetFilespec,LONGLONG FileSize,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddToSourceList(DWORD Flags,PCSTR Source) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddToSourceListA(DWORD Flags,PCSTR Source) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAddToSourceListW(DWORD Flags,PCWSTR Source) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAdjustDiskSpaceList(HDSKSPC DiskSpace,LPCSTR DriveRoot,LONGLONG Amount,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAdjustDiskSpaceListA(HDSKSPC DiskSpace,LPCSTR DriveRoot,LONGLONG Amount,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupAdjustDiskSpaceListW(HDSKSPC DiskSpace,LPCWSTR DriveRoot,LONGLONG Amount,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupBackupError(HWND hwndParent,PCSTR DialogTitle,PCSTR SourceFile,PCSTR TargetFile,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupBackupErrorA(HWND hwndParent,PCSTR DialogTitle,PCSTR SourceFile,PCSTR TargetFile,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupBackupErrorW(HWND hwndParent,PCWSTR DialogTitle,PCWSTR SourceFile,PCWSTR TargetFile,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupCancelTemporarySourceList(VOID) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCloseFileQueue(HSPFILEQ QueueHandle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCloseInfFile(HINF InfHandle) WINSETUPAPI VOID WINAPI <setupapi.h>
SetupCloseLog(VOID) WINSETUPAPI VOID WINAPI <setupapi.h>
SetupColorMatching(PCOLORMATCHSETUPA pcms) WINBOOL WINAPI <icm.h>
SetupColorMatchingA(PCOLORMATCHSETUPA pcms) WINBOOL WINAPI <icm.h>
SetupColorMatchingW(PCOLORMATCHSETUPW pcms) WINBOOL WINAPI <icm.h>
SetupComm(HANDLE hFile,DWORD dwInQueue,DWORD dwOutQueue) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetupCommitFileQueue(HWND Owner,HSPFILEQ QueueHandle,PSP_FILE_CALLBACK_A MsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCommitFileQueueA(HWND Owner,HSPFILEQ QueueHandle,PSP_FILE_CALLBACK_A MsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCommitFileQueueW(HWND Owner,HSPFILEQ QueueHandle,PSP_FILE_CALLBACK_W MsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupConfigureWmiFromInfSection(HINF InfHandle,PCSTR SectionName,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupConfigureWmiFromInfSectionA(HINF InfHandle,PCSTR SectionName,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupConfigureWmiFromInfSectionW(HINF InfHandle,PCWSTR SectionName,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCopyError(HWND hwndParent,PCSTR DialogTitle,PCSTR DiskName,PCSTR PathToSource,PCSTR SourceFile,PCSTR TargetPathFile,UINT Win32ErrorCode,DWORD Style,PSTR PathBuffer,DWORD PathBufferSize,PDWORD PathRequiredSize) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupCopyErrorA(HWND hwndParent,PCSTR DialogTitle,PCSTR DiskName,PCSTR PathToSource,PCSTR SourceFile,PCSTR TargetPathFile,UINT Win32ErrorCode,DWORD Style,PSTR PathBuffer,DWORD PathBufferSize,PDWORD PathRequiredSize) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupCopyErrorW(HWND hwndParent,PCWSTR DialogTitle,PCWSTR DiskName,PCWSTR PathToSource,PCWSTR SourceFile,PCWSTR TargetPathFile,UINT Win32ErrorCode,DWORD Style,PWSTR PathBuffer,DWORD PathBufferSize,PDWORD PathRequiredSize) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupCopyOEMInf(PCSTR SourceInfFileName,PCSTR OEMSourceMediaLocation,DWORD OEMSourceMediaType,DWORD CopyStyle,PSTR DestinationInfFileName,DWORD DestinationInfFileNameSize,PDWORD RequiredSize,PSTR * DestinationInfFileNameComponent) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCopyOEMInfA(PCSTR SourceInfFileName,PCSTR OEMSourceMediaLocation,DWORD OEMSourceMediaType,DWORD CopyStyle,PSTR DestinationInfFileName,DWORD DestinationInfFileNameSize,PDWORD RequiredSize,PSTR * DestinationInfFileNameComponent) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCopyOEMInfW(PCWSTR SourceInfFileName,PCWSTR OEMSourceMediaLocation,DWORD OEMSourceMediaType,DWORD CopyStyle,PWSTR DestinationInfFileName,DWORD DestinationInfFileNameSize,PDWORD RequiredSize,PWSTR * DestinationInfFileNameComponent) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupCreateDiskSpaceList(PVOID Reserved1,DWORD Reserved2,UINT Flags) WINSETUPAPI HDSKSPC WINAPI <setupapi.h>
SetupCreateDiskSpaceListA(PVOID Reserved1,DWORD Reserved2,UINT Flags) WINSETUPAPI HDSKSPC WINAPI <setupapi.h>
SetupCreateDiskSpaceListW(PVOID Reserved1,DWORD Reserved2,UINT Flags) WINSETUPAPI HDSKSPC WINAPI <setupapi.h>
SetupDecompressOrCopyFile(PCSTR SourceFileName,PCSTR TargetFileName,PUINT CompressionType) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupDecompressOrCopyFileA(PCSTR SourceFileName,PCSTR TargetFileName,PUINT CompressionType) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupDecompressOrCopyFileW(PCWSTR SourceFileName,PCWSTR TargetFileName,PUINT CompressionType) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupDefaultQueueCallback(PVOID Context,UINT Notification,UINT_PTR Param1,UINT_PTR Param2) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupDefaultQueueCallbackA(PVOID Context,UINT Notification,UINT_PTR Param1,UINT_PTR Param2) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupDefaultQueueCallbackW(PVOID Context,UINT Notification,UINT_PTR Param1,UINT_PTR Param2) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupDeleteError(HWND hwndParent,PCSTR DialogTitle,PCSTR File,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupDeleteErrorA(HWND hwndParent,PCSTR DialogTitle,PCSTR File,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupDeleteErrorW(HWND hwndParent,PCWSTR DialogTitle,PCWSTR File,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupDestroyDiskSpaceList(HDSKSPC DiskSpace) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiAskForOEMDisk(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiBuildClassInfoList(DWORD Flags,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiBuildClassInfoListEx(DWORD Flags,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiBuildClassInfoListExA(DWORD Flags,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiBuildClassInfoListExW(DWORD Flags,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiBuildDriverInfoList(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD DriverType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCallClassInstaller(DI_FUNCTION InstallFunction,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCancelDriverInfoSearch(HDEVINFO DeviceInfoSet) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiChangeState(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassGuidsFromName(PCSTR ClassName,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassGuidsFromNameA(PCSTR ClassName,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassGuidsFromNameEx(PCSTR ClassName,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassGuidsFromNameExA(PCSTR ClassName,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassGuidsFromNameExW(PCWSTR ClassName,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassGuidsFromNameW(PCWSTR ClassName,LPGUID ClassGuidList,DWORD ClassGuidListSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassNameFromGuid(CONST GUID * ClassGuid,PSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassNameFromGuidA(CONST GUID * ClassGuid,PSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassNameFromGuidEx(CONST GUID * ClassGuid,PSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassNameFromGuidExA(CONST GUID * ClassGuid,PSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassNameFromGuidExW(CONST GUID * ClassGuid,PWSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiClassNameFromGuidW(CONST GUID * ClassGuid,PWSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDeviceInfo(HDEVINFO DeviceInfoSet,PCSTR DeviceName,CONST GUID * ClassGuid,PCSTR DeviceDescription,HWND hwndParent,DWORD CreationFlags,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDeviceInfoA(HDEVINFO DeviceInfoSet,PCSTR DeviceName,CONST GUID * ClassGuid,PCSTR DeviceDescription,HWND hwndParent,DWORD CreationFlags,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDeviceInfoList(CONST GUID * ClassGuid,HWND hwndParent) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiCreateDeviceInfoListEx(CONST GUID * ClassGuid,HWND hwndParent,PCSTR MachineName,PVOID Reserved) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiCreateDeviceInfoListExA(CONST GUID * ClassGuid,HWND hwndParent,PCSTR MachineName,PVOID Reserved) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiCreateDeviceInfoListExW(CONST GUID * ClassGuid,HWND hwndParent,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiCreateDeviceInfoW(HDEVINFO DeviceInfoSet,PCWSTR DeviceName,CONST GUID * ClassGuid,PCWSTR DeviceDescription,HWND hwndParent,DWORD CreationFlags,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDeviceInterface(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,CONST GUID * InterfaceClassGuid,PCSTR ReferenceString,DWORD CreationFlags,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDeviceInterfaceA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,CONST GUID * InterfaceClassGuid,PCSTR ReferenceString,DWORD CreationFlags,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDeviceInterfaceRegKey(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,DWORD Reserved,REGSAM samDesired,HINF InfHandle,PCSTR InfSectionName) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiCreateDeviceInterfaceRegKeyA(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,DWORD Reserved,REGSAM samDesired,HINF InfHandle,PCSTR InfSectionName) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiCreateDeviceInterfaceRegKeyW(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,DWORD Reserved,REGSAM samDesired,HINF InfHandle,PCWSTR InfSectionName) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiCreateDeviceInterfaceW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,CONST GUID * InterfaceClassGuid,PCWSTR ReferenceString,DWORD CreationFlags,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiCreateDevRegKey(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Scope,DWORD HwProfile,DWORD KeyType,HINF InfHandle,PCSTR InfSectionName) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiCreateDevRegKeyA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Scope,DWORD HwProfile,DWORD KeyType,HINF InfHandle,PCSTR InfSectionName) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiCreateDevRegKeyW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Scope,DWORD HwProfile,DWORD KeyType,HINF InfHandle,PCWSTR InfSectionName) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiDeleteDeviceInfo(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDeleteDeviceInterfaceData(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDeleteDeviceInterfaceRegKey(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,DWORD Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDeleteDevRegKey(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Scope,DWORD HwProfile,DWORD KeyType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDestroyClassImageList(PSP_CLASSIMAGELIST_DATA ClassImageListData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDestroyDeviceInfoList(HDEVINFO DeviceInfoSet) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDestroyDriverInfoList(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD DriverType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiDrawMiniIcon(HDC hdc,RECT rc,INT MiniIconIndex,DWORD Flags) WINSETUPAPI INT WINAPI <setupapi.h>
SetupDiEnumDeviceInfo(HDEVINFO DeviceInfoSet,DWORD MemberIndex,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiEnumDeviceInterfaces(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,CONST GUID * InterfaceClassGuid,DWORD MemberIndex,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiEnumDriverInfo(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD DriverType,DWORD MemberIndex,PSP_DRVINFO_DATA_A DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiEnumDriverInfoA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD DriverType,DWORD MemberIndex,PSP_DRVINFO_DATA_A DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiEnumDriverInfoW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD DriverType,DWORD MemberIndex,PSP_DRVINFO_DATA_W DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualModelsSection(PINFCONTEXT Context,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualModelsSectionA(PINFCONTEXT Context,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualModelsSectionW(PINFCONTEXT Context,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PWSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualSectionToInstall(HINF InfHandle,PCSTR InfSectionName,PSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PSTR * Extension) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualSectionToInstallA(HINF InfHandle,PCSTR InfSectionName,PSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PSTR * Extension) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualSectionToInstallEx(HINF InfHandle,PCSTR InfSectionName,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PSTR * Extension,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualSectionToInstallExA(HINF InfHandle,PCSTR InfSectionName,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PSTR * Extension,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualSectionToInstallExW(HINF InfHandle,PCWSTR InfSectionName,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PWSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PWSTR * Extension,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetActualSectionToInstallW(HINF InfHandle,PCWSTR InfSectionName,PWSTR InfSectionWithExt,DWORD InfSectionWithExtSize,PDWORD RequiredSize,PWSTR * Extension) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassBitmapIndex(CONST GUID * ClassGuid,PINT MiniIconIndex) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDescription(CONST GUID * ClassGuid,PSTR ClassDescription,DWORD ClassDescriptionSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDescriptionA(CONST GUID * ClassGuid,PSTR ClassDescription,DWORD ClassDescriptionSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDescriptionEx(CONST GUID * ClassGuid,PSTR ClassDescription,DWORD ClassDescriptionSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDescriptionExA(CONST GUID * ClassGuid,PSTR ClassDescription,DWORD ClassDescriptionSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDescriptionExW(CONST GUID * ClassGuid,PWSTR ClassDescription,DWORD ClassDescriptionSize,PDWORD RequiredSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDescriptionW(CONST GUID * ClassGuid,PWSTR ClassDescription,DWORD ClassDescriptionSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDevPropertySheets(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,LPPROPSHEETHEADERA PropertySheetHeader,DWORD PropertySheetHeaderPageListSize,PDWORD RequiredSize,DWORD PropertySheetType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDevPropertySheetsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,LPPROPSHEETHEADERA PropertySheetHeader,DWORD PropertySheetHeaderPageListSize,PDWORD RequiredSize,DWORD PropertySheetType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDevPropertySheetsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,LPPROPSHEETHEADERW PropertySheetHeader,DWORD PropertySheetHeaderPageListSize,PDWORD RequiredSize,DWORD PropertySheetType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassDevs(CONST GUID * ClassGuid,PCSTR Enumerator,HWND hwndParent,DWORD Flags) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiGetClassDevsA(CONST GUID * ClassGuid,PCSTR Enumerator,HWND hwndParent,DWORD Flags) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiGetClassDevsEx(CONST GUID * ClassGuid,PCSTR Enumerator,HWND hwndParent,DWORD Flags,HDEVINFO DeviceInfoSet,PCSTR MachineName,PVOID Reserved) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiGetClassDevsExA(CONST GUID * ClassGuid,PCSTR Enumerator,HWND hwndParent,DWORD Flags,HDEVINFO DeviceInfoSet,PCSTR MachineName,PVOID Reserved) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiGetClassDevsExW(CONST GUID * ClassGuid,PCWSTR Enumerator,HWND hwndParent,DWORD Flags,HDEVINFO DeviceInfoSet,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiGetClassDevsW(CONST GUID * ClassGuid,PCWSTR Enumerator,HWND hwndParent,DWORD Flags) WINSETUPAPI HDEVINFO WINAPI <setupapi.h>
SetupDiGetClassImageIndex(PSP_CLASSIMAGELIST_DATA ClassImageListData,CONST GUID * ClassGuid,PINT ImageIndex) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassImageList(PSP_CLASSIMAGELIST_DATA ClassImageListData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassImageListEx(PSP_CLASSIMAGELIST_DATA ClassImageListData,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassImageListExA(PSP_CLASSIMAGELIST_DATA ClassImageListData,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassImageListExW(PSP_CLASSIMAGELIST_DATA ClassImageListData,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassInstallParams(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_CLASSINSTALL_HEADER ClassInstallParams,DWORD ClassInstallParamsSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassInstallParamsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_CLASSINSTALL_HEADER ClassInstallParams,DWORD ClassInstallParamsSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassInstallParamsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_CLASSINSTALL_HEADER ClassInstallParams,DWORD ClassInstallParamsSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassRegistryProperty(CONST GUID * ClassGuid,DWORD Property,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassRegistryPropertyA(CONST GUID * ClassGuid,DWORD Property,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetClassRegistryPropertyW(CONST GUID * ClassGuid,DWORD Property,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetCustomDeviceProperty(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PCSTR CustomPropertyName,DWORD Flags,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetCustomDevicePropertyA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PCSTR CustomPropertyName,DWORD Flags,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetCustomDevicePropertyW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PCWSTR CustomPropertyName,DWORD Flags,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInfoListClass(HDEVINFO DeviceInfoSet,LPGUID ClassGuid) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInfoListDetail(HDEVINFO DeviceInfoSet,PSP_DEVINFO_LIST_DETAIL_DATA_A DeviceInfoSetDetailData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInfoListDetailA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_LIST_DETAIL_DATA_A DeviceInfoSetDetailData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInfoListDetailW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_LIST_DETAIL_DATA_W DeviceInfoSetDetailData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInstallParams(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DEVINSTALL_PARAMS_A DeviceInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInstallParamsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DEVINSTALL_PARAMS_A DeviceInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInstallParamsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DEVINSTALL_PARAMS_W DeviceInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInstanceId(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSTR DeviceInstanceId,DWORD DeviceInstanceIdSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInstanceIdA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSTR DeviceInstanceId,DWORD DeviceInstanceIdSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInstanceIdW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PWSTR DeviceInstanceId,DWORD DeviceInstanceIdSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInterfaceAlias(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,CONST GUID * AliasInterfaceClassGuid,PSP_DEVICE_INTERFACE_DATA AliasDeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInterfaceDetail(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData,DWORD DeviceInterfaceDetailDataSize,PDWORD RequiredSize,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInterfaceDetailA(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData,DWORD DeviceInterfaceDetailDataSize,PDWORD RequiredSize,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceInterfaceDetailW(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData,DWORD DeviceInterfaceDetailDataSize,PDWORD RequiredSize,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDevicePropertyKeys(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DEVPROPKEY * PropertyKeyArray,DWORD PropertyKeyCount,PDWORD RequiredPropertyKeyCount,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDevicePropertyW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,const DEVPROPKEY * PropertyKey,DEVPROPTYPE * PropertyType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceRegistryProperty(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Property,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceRegistryPropertyA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Property,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDeviceRegistryPropertyW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Property,PDWORD PropertyRegDataType,PBYTE PropertyBuffer,DWORD PropertyBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDriverInfoDetail(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData,PSP_DRVINFO_DETAIL_DATA_A DriverInfoDetailData,DWORD DriverInfoDetailDataSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDriverInfoDetailA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData,PSP_DRVINFO_DETAIL_DATA_A DriverInfoDetailData,DWORD DriverInfoDetailDataSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDriverInfoDetailW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_W DriverInfoData,PSP_DRVINFO_DETAIL_DATA_W DriverInfoDetailData,DWORD DriverInfoDetailDataSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDriverInstallParams(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData,PSP_DRVINSTALL_PARAMS DriverInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDriverInstallParamsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData,PSP_DRVINSTALL_PARAMS DriverInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetDriverInstallParamsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_W DriverInfoData,PSP_DRVINSTALL_PARAMS DriverInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileFriendlyName(DWORD HwProfile,PSTR FriendlyName,DWORD FriendlyNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileFriendlyNameA(DWORD HwProfile,PSTR FriendlyName,DWORD FriendlyNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileFriendlyNameEx(DWORD HwProfile,PSTR FriendlyName,DWORD FriendlyNameSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileFriendlyNameExA(DWORD HwProfile,PSTR FriendlyName,DWORD FriendlyNameSize,PDWORD RequiredSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileFriendlyNameExW(DWORD HwProfile,PWSTR FriendlyName,DWORD FriendlyNameSize,PDWORD RequiredSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileFriendlyNameW(DWORD HwProfile,PWSTR FriendlyName,DWORD FriendlyNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileList(PDWORD HwProfileList,DWORD HwProfileListSize,PDWORD RequiredSize,PDWORD CurrentlyActiveIndex) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileListEx(PDWORD HwProfileList,DWORD HwProfileListSize,PDWORD RequiredSize,PDWORD CurrentlyActiveIndex,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileListExA(PDWORD HwProfileList,DWORD HwProfileListSize,PDWORD RequiredSize,PDWORD CurrentlyActiveIndex,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetHwProfileListExW(PDWORD HwProfileList,DWORD HwProfileListSize,PDWORD RequiredSize,PDWORD CurrentlyActiveIndex,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetINFClass(PCSTR InfName,LPGUID ClassGuid,PSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetINFClassA(PCSTR InfName,LPGUID ClassGuid,PSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetINFClassW(PCWSTR InfName,LPGUID ClassGuid,PWSTR ClassName,DWORD ClassNameSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetSelectedDevice(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetSelectedDriver(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetSelectedDriverA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetSelectedDriverW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_W DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiGetWizardPage(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_INSTALLWIZARD_DATA InstallWizardData,DWORD PageType,DWORD Flags) WINSETUPAPI HPROPSHEETPAGE WINAPI <setupapi.h>
SetupDiInstallClass(HWND hwndParent,PCSTR InfFileName,DWORD Flags,HSPFILEQ FileQueue) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallClassA(HWND hwndParent,PCSTR InfFileName,DWORD Flags,HSPFILEQ FileQueue) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallClassEx(HWND hwndParent,PCSTR InfFileName,DWORD Flags,HSPFILEQ FileQueue,CONST GUID * InterfaceClassGuid,PVOID Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallClassExA(HWND hwndParent,PCSTR InfFileName,DWORD Flags,HSPFILEQ FileQueue,CONST GUID * InterfaceClassGuid,PVOID Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallClassExW(HWND hwndParent,PCWSTR InfFileName,DWORD Flags,HSPFILEQ FileQueue,CONST GUID * InterfaceClassGuid,PVOID Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallClassW(HWND hwndParent,PCWSTR InfFileName,DWORD Flags,HSPFILEQ FileQueue) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallDevice(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallDeviceInterfaces(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiInstallDriverFiles(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiLoadClassIcon(CONST GUID * ClassGuid,HICON * LargeIcon,PINT MiniIconIndex) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenClassRegKey(CONST GUID * ClassGuid,REGSAM samDesired) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiOpenClassRegKeyEx(CONST GUID * ClassGuid,REGSAM samDesired,DWORD Flags,PCSTR MachineName,PVOID Reserved) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiOpenClassRegKeyExA(CONST GUID * ClassGuid,REGSAM samDesired,DWORD Flags,PCSTR MachineName,PVOID Reserved) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiOpenClassRegKeyExW(CONST GUID * ClassGuid,REGSAM samDesired,DWORD Flags,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiOpenDeviceInfo(HDEVINFO DeviceInfoSet,PCSTR DeviceInstanceId,HWND hwndParent,DWORD OpenFlags,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenDeviceInfoA(HDEVINFO DeviceInfoSet,PCSTR DeviceInstanceId,HWND hwndParent,DWORD OpenFlags,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenDeviceInfoW(HDEVINFO DeviceInfoSet,PCWSTR DeviceInstanceId,HWND hwndParent,DWORD OpenFlags,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenDeviceInterface(HDEVINFO DeviceInfoSet,PCSTR DevicePath,DWORD OpenFlags,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenDeviceInterfaceA(HDEVINFO DeviceInfoSet,PCSTR DevicePath,DWORD OpenFlags,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenDeviceInterfaceRegKey(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,DWORD Reserved,REGSAM samDesired) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiOpenDeviceInterfaceW(HDEVINFO DeviceInfoSet,PCWSTR DevicePath,DWORD OpenFlags,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiOpenDevRegKey(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Scope,DWORD HwProfile,DWORD KeyType,REGSAM samDesired) WINSETUPAPI HKEY WINAPI <setupapi.h>
SetupDiRegisterCoDeviceInstallers(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiRegisterDeviceInfo(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Flags,PSP_DETSIG_CMPPROC CompareProc,PVOID CompareContext,PSP_DEVINFO_DATA DupDeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiRemoveDevice(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiRemoveDeviceInterface(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiRestartDevices(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSelectBestCompatDrv(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSelectDevice(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSelectOEMDrv(HWND hwndParent,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetClassInstallParams(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_CLASSINSTALL_HEADER ClassInstallParams,DWORD ClassInstallParamsSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetClassInstallParamsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_CLASSINSTALL_HEADER ClassInstallParams,DWORD ClassInstallParamsSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetClassInstallParamsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_CLASSINSTALL_HEADER ClassInstallParams,DWORD ClassInstallParamsSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetClassRegistryProperty(CONST GUID * ClassGuid,DWORD Property,CONST BYTE * PropertyBuffer,DWORD PropertyBufferSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetClassRegistryPropertyA(CONST GUID * ClassGuid,DWORD Property,CONST BYTE * PropertyBuffer,DWORD PropertyBufferSize,PCSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetClassRegistryPropertyW(CONST GUID * ClassGuid,DWORD Property,CONST BYTE * PropertyBuffer,DWORD PropertyBufferSize,PCWSTR MachineName,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceInstallParams(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DEVINSTALL_PARAMS_A DeviceInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceInstallParamsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DEVINSTALL_PARAMS_A DeviceInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceInstallParamsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DEVINSTALL_PARAMS_W DeviceInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceInterfaceDefault(HDEVINFO DeviceInfoSet,PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,DWORD Flags,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceRegistryProperty(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Property,CONST BYTE * PropertyBuffer,DWORD PropertyBufferSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceRegistryPropertyA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Property,CONST BYTE * PropertyBuffer,DWORD PropertyBufferSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDeviceRegistryPropertyW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,DWORD Property,CONST BYTE * PropertyBuffer,DWORD PropertyBufferSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDriverInstallParams(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData,PSP_DRVINSTALL_PARAMS DriverInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDriverInstallParamsA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData,PSP_DRVINSTALL_PARAMS DriverInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetDriverInstallParamsW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_W DriverInfoData,PSP_DRVINSTALL_PARAMS DriverInstallParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetSelectedDevice(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetSelectedDriver(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetSelectedDriverA(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_A DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiSetSelectedDriverW(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PSP_DRVINFO_DATA_W DriverInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDiUnremoveDevice(HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupDuplicateDiskSpaceList(HDSKSPC DiskSpace,PVOID Reserved1,DWORD Reserved2,UINT Flags) WINSETUPAPI HDSKSPC WINAPI <setupapi.h>
SetupDuplicateDiskSpaceListA(HDSKSPC DiskSpace,PVOID Reserved1,DWORD Reserved2,UINT Flags) WINSETUPAPI HDSKSPC WINAPI <setupapi.h>
SetupDuplicateDiskSpaceListW(HDSKSPC DiskSpace,PVOID Reserved1,DWORD Reserved2,UINT Flags) WINSETUPAPI HDSKSPC WINAPI <setupapi.h>
SetupEnumInfSections(HINF InfHandle,UINT Index,PSTR Buffer,UINT Size,UINT * SizeNeeded) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupEnumInfSectionsA(HINF InfHandle,UINT Index,PSTR Buffer,UINT Size,UINT * SizeNeeded) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupEnumInfSectionsW(HINF InfHandle,UINT Index,PWSTR Buffer,UINT Size,UINT * SizeNeeded) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindFirstLine(HINF InfHandle,PCSTR Section,PCSTR Key,PINFCONTEXT Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindFirstLineA(HINF InfHandle,PCSTR Section,PCSTR Key,PINFCONTEXT Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindFirstLineW(HINF InfHandle,PCWSTR Section,PCWSTR Key,PINFCONTEXT Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindNextLine(PINFCONTEXT ContextIn,PINFCONTEXT ContextOut) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindNextMatchLine(PINFCONTEXT ContextIn,PCSTR Key,PINFCONTEXT ContextOut) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindNextMatchLineA(PINFCONTEXT ContextIn,PCSTR Key,PINFCONTEXT ContextOut) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFindNextMatchLineW(PINFCONTEXT ContextIn,PCWSTR Key,PINFCONTEXT ContextOut) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFreeSourceList(PCSTR ** List,UINT Count) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFreeSourceListA(PCSTR ** List,UINT Count) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupFreeSourceListW(PCWSTR ** List,UINT Count) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetBackupInformation(HSPFILEQ QueueHandle,PSP_BACKUP_QUEUE_PARAMS_A BackupParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetBackupInformationA(HSPFILEQ QueueHandle,PSP_BACKUP_QUEUE_PARAMS_A BackupParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetBackupInformationW(HSPFILEQ QueueHandle,PSP_BACKUP_QUEUE_PARAMS_W BackupParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetBinaryField(PINFCONTEXT Context,DWORD FieldIndex,PBYTE ReturnBuffer,DWORD ReturnBufferSize,LPDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetFieldCount(PINFCONTEXT Context) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupGetFileCompressionInfo(PCSTR SourceFileName,PSTR * ActualSourceFileName,PDWORD SourceFileSize,PDWORD TargetFileSize,PUINT CompressionType) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupGetFileCompressionInfoA(PCSTR SourceFileName,PSTR * ActualSourceFileName,PDWORD SourceFileSize,PDWORD TargetFileSize,PUINT CompressionType) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupGetFileCompressionInfoEx(PCSTR SourceFileName,PSTR ActualSourceFileNameBuffer,DWORD ActualSourceFileNameBufferLen,PDWORD RequiredBufferLen,PDWORD SourceFileSize,PDWORD TargetFileSize,PUINT CompressionType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetFileCompressionInfoExA(PCSTR SourceFileName,PSTR ActualSourceFileNameBuffer,DWORD ActualSourceFileNameBufferLen,PDWORD RequiredBufferLen,PDWORD SourceFileSize,PDWORD TargetFileSize,PUINT CompressionType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetFileCompressionInfoExW(PCWSTR SourceFileName,PWSTR ActualSourceFileNameBuffer,DWORD ActualSourceFileNameBufferLen,PDWORD RequiredBufferLen,PDWORD SourceFileSize,PDWORD TargetFileSize,PUINT CompressionType) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetFileCompressionInfoW(PCWSTR SourceFileName,PWSTR * ActualSourceFileName,PDWORD SourceFileSize,PDWORD TargetFileSize,PUINT CompressionType) WINSETUPAPI DWORD WINAPI <setupapi.h>
SetupGetFileQueueCount(HSPFILEQ FileQueue,UINT SubQueueFileOp,PUINT NumOperations) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetFileQueueFlags(HSPFILEQ FileQueue,PDWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetInfFileList(PCSTR DirectoryPath,DWORD InfStyle,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetInfFileListA(PCSTR DirectoryPath,DWORD InfStyle,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetInfFileListW(PCWSTR DirectoryPath,DWORD InfStyle,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetInfInformation(LPCVOID InfSpec,DWORD SearchControl,PSP_INF_INFORMATION ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetInfInformationA(LPCVOID InfSpec,DWORD SearchControl,PSP_INF_INFORMATION ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetInfInformationW(LPCVOID InfSpec,DWORD SearchControl,PSP_INF_INFORMATION ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetIntField(PINFCONTEXT Context,DWORD FieldIndex,PINT IntegerValue) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetLineByIndex(HINF InfHandle,PCSTR Section,DWORD Index,PINFCONTEXT Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetLineByIndexA(HINF InfHandle,PCSTR Section,DWORD Index,PINFCONTEXT Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetLineByIndexW(HINF InfHandle,PCWSTR Section,DWORD Index,PINFCONTEXT Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetLineCount(HINF InfHandle,PCSTR Section) WINSETUPAPI LONG WINAPI <setupapi.h>
SetupGetLineCountA(HINF InfHandle,PCSTR Section) WINSETUPAPI LONG WINAPI <setupapi.h>
SetupGetLineCountW(HINF InfHandle,PCWSTR Section) WINSETUPAPI LONG WINAPI <setupapi.h>
SetupGetLineText(PINFCONTEXT Context,HINF InfHandle,PCSTR Section,PCSTR Key,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetLineTextA(PINFCONTEXT Context,HINF InfHandle,PCSTR Section,PCSTR Key,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetLineTextW(PINFCONTEXT Context,HINF InfHandle,PCWSTR Section,PCWSTR Key,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetMultiSzField(PINFCONTEXT Context,DWORD FieldIndex,PSTR ReturnBuffer,DWORD ReturnBufferSize,LPDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetMultiSzFieldA(PINFCONTEXT Context,DWORD FieldIndex,PSTR ReturnBuffer,DWORD ReturnBufferSize,LPDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetMultiSzFieldW(PINFCONTEXT Context,DWORD FieldIndex,PWSTR ReturnBuffer,DWORD ReturnBufferSize,LPDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetNonInteractiveMode(VOID) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceFileLocation(HINF InfHandle,PINFCONTEXT InfContext,PCSTR FileName,PUINT SourceId,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceFileLocationA(HINF InfHandle,PINFCONTEXT InfContext,PCSTR FileName,PUINT SourceId,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceFileLocationW(HINF InfHandle,PINFCONTEXT InfContext,PCWSTR FileName,PUINT SourceId,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceFileSize(HINF InfHandle,PINFCONTEXT InfContext,PCSTR FileName,PCSTR Section,PDWORD FileSize,UINT RoundingFactor) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceFileSizeA(HINF InfHandle,PINFCONTEXT InfContext,PCSTR FileName,PCSTR Section,PDWORD FileSize,UINT RoundingFactor) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceFileSizeW(HINF InfHandle,PINFCONTEXT InfContext,PCWSTR FileName,PCWSTR Section,PDWORD FileSize,UINT RoundingFactor) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceInfo(HINF InfHandle,UINT SourceId,UINT InfoDesired,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceInfoA(HINF InfHandle,UINT SourceId,UINT InfoDesired,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetSourceInfoW(HINF InfHandle,UINT SourceId,UINT InfoDesired,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetStringField(PINFCONTEXT Context,DWORD FieldIndex,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetStringFieldA(PINFCONTEXT Context,DWORD FieldIndex,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetStringFieldW(PINFCONTEXT Context,DWORD FieldIndex,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetTargetPath(HINF InfHandle,PINFCONTEXT InfContext,PCSTR Section,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetTargetPathA(HINF InfHandle,PINFCONTEXT InfContext,PCSTR Section,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupGetTargetPathW(HINF InfHandle,PINFCONTEXT InfContext,PCWSTR Section,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInitDefaultQueueCallback(HWND OwnerWindow) WINSETUPAPI PVOID WINAPI <setupapi.h>
SetupInitDefaultQueueCallbackEx(HWND OwnerWindow,HWND AlternateProgressWindow,UINT ProgressMessage,DWORD Reserved1,PVOID Reserved2) WINSETUPAPI PVOID WINAPI <setupapi.h>
SetupInitializeFileLog(PCSTR LogFileName,DWORD Flags) WINSETUPAPI HSPFILELOG WINAPI <setupapi.h>
SetupInitializeFileLogA(PCSTR LogFileName,DWORD Flags) WINSETUPAPI HSPFILELOG WINAPI <setupapi.h>
SetupInitializeFileLogW(PCWSTR LogFileName,DWORD Flags) WINSETUPAPI HSPFILELOG WINAPI <setupapi.h>
SetupInstallFile(HINF InfHandle,PINFCONTEXT InfContext,PCSTR SourceFile,PCSTR SourcePathRoot,PCSTR DestinationName,DWORD CopyStyle,PSP_FILE_CALLBACK_A CopyMsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFileA(HINF InfHandle,PINFCONTEXT InfContext,PCSTR SourceFile,PCSTR SourcePathRoot,PCSTR DestinationName,DWORD CopyStyle,PSP_FILE_CALLBACK_A CopyMsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFileEx(HINF InfHandle,PINFCONTEXT InfContext,PCSTR SourceFile,PCSTR SourcePathRoot,PCSTR DestinationName,DWORD CopyStyle,PSP_FILE_CALLBACK_A CopyMsgHandler,PVOID Context,PBOOL FileWasInUse) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFileExA(HINF InfHandle,PINFCONTEXT InfContext,PCSTR SourceFile,PCSTR SourcePathRoot,PCSTR DestinationName,DWORD CopyStyle,PSP_FILE_CALLBACK_A CopyMsgHandler,PVOID Context,PBOOL FileWasInUse) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFileExW(HINF InfHandle,PINFCONTEXT InfContext,PCWSTR SourceFile,PCWSTR SourcePathRoot,PCWSTR DestinationName,DWORD CopyStyle,PSP_FILE_CALLBACK_W CopyMsgHandler,PVOID Context,PBOOL FileWasInUse) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFilesFromInfSection(HINF InfHandle,HINF LayoutInfHandle,HSPFILEQ FileQueue,PCSTR SectionName,PCSTR SourceRootPath,UINT CopyFlags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFilesFromInfSectionA(HINF InfHandle,HINF LayoutInfHandle,HSPFILEQ FileQueue,PCSTR SectionName,PCSTR SourceRootPath,UINT CopyFlags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFilesFromInfSectionW(HINF InfHandle,HINF LayoutInfHandle,HSPFILEQ FileQueue,PCWSTR SectionName,PCWSTR SourceRootPath,UINT CopyFlags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFileW(HINF InfHandle,PINFCONTEXT InfContext,PCWSTR SourceFile,PCWSTR SourcePathRoot,PCWSTR DestinationName,DWORD CopyStyle,PSP_FILE_CALLBACK_W CopyMsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFromInfSection(HWND Owner,HINF InfHandle,PCSTR SectionName,UINT Flags,HKEY RelativeKeyRoot,PCSTR SourceRootPath,UINT CopyFlags,PSP_FILE_CALLBACK_A MsgHandler,PVOID Context,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFromInfSectionA(HWND Owner,HINF InfHandle,PCSTR SectionName,UINT Flags,HKEY RelativeKeyRoot,PCSTR SourceRootPath,UINT CopyFlags,PSP_FILE_CALLBACK_A MsgHandler,PVOID Context,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallFromInfSectionW(HWND Owner,HINF InfHandle,PCWSTR SectionName,UINT Flags,HKEY RelativeKeyRoot,PCWSTR SourceRootPath,UINT CopyFlags,PSP_FILE_CALLBACK_W MsgHandler,PVOID Context,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallServicesFromInfSection(HINF InfHandle,PCSTR SectionName,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallServicesFromInfSectionA(HINF InfHandle,PCSTR SectionName,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallServicesFromInfSectionEx(HINF InfHandle,PCSTR SectionName,DWORD Flags,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PVOID Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallServicesFromInfSectionExA(HINF InfHandle,PCSTR SectionName,DWORD Flags,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PVOID Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallServicesFromInfSectionExW(HINF InfHandle,PCWSTR SectionName,DWORD Flags,HDEVINFO DeviceInfoSet,PSP_DEVINFO_DATA DeviceInfoData,PVOID Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupInstallServicesFromInfSectionW(HINF InfHandle,PCWSTR SectionName,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupIterateCabinet(PCSTR CabinetFile,DWORD Reserved,PSP_FILE_CALLBACK_A MsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupIterateCabinetA(PCSTR CabinetFile,DWORD Reserved,PSP_FILE_CALLBACK_A MsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupIterateCabinetW(PCWSTR CabinetFile,DWORD Reserved,PSP_FILE_CALLBACK_W MsgHandler,PVOID Context) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupLogError(LPCSTR MessageString,LogSeverity Severity) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupLogErrorA(LPCSTR MessageString,LogSeverity Severity) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupLogErrorW(LPCWSTR MessageString,LogSeverity Severity) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupLogFile(HSPFILELOG FileLogHandle,PCSTR LogSectionName,PCSTR SourceFilename,PCSTR TargetFilename,DWORD Checksum,PCSTR DiskTagfile,PCSTR DiskDescription,PCSTR OtherInfo,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupLogFileA(HSPFILELOG FileLogHandle,PCSTR LogSectionName,PCSTR SourceFilename,PCSTR TargetFilename,DWORD Checksum,PCSTR DiskTagfile,PCSTR DiskDescription,PCSTR OtherInfo,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupLogFileW(HSPFILELOG FileLogHandle,PCWSTR LogSectionName,PCWSTR SourceFilename,PCWSTR TargetFilename,DWORD Checksum,PCWSTR DiskTagfile,PCWSTR DiskDescription,PCWSTR OtherInfo,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupOpenAppendInfFile(PCSTR FileName,HINF InfHandle,PUINT ErrorLine) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupOpenAppendInfFileA(PCSTR FileName,HINF InfHandle,PUINT ErrorLine) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupOpenAppendInfFileW(PCWSTR FileName,HINF InfHandle,PUINT ErrorLine) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupOpenFileQueue(VOID) WINSETUPAPI HSPFILEQ WINAPI <setupapi.h>
SetupOpenInfFile(PCSTR FileName,PCSTR InfClass,DWORD InfStyle,PUINT ErrorLine) WINSETUPAPI HINF WINAPI <setupapi.h>
SetupOpenInfFileA(PCSTR FileName,PCSTR InfClass,DWORD InfStyle,PUINT ErrorLine) WINSETUPAPI HINF WINAPI <setupapi.h>
SetupOpenInfFileW(PCWSTR FileName,PCWSTR InfClass,DWORD InfStyle,PUINT ErrorLine) WINSETUPAPI HINF WINAPI <setupapi.h>
SetupOpenLog(WINBOOL Erase) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupOpenMasterInf(VOID) WINSETUPAPI HINF WINAPI <setupapi.h>
SetupPersistentIScsiDevices(void)HRESULT WINAPI <iscsidsc.h>
SetupPrepareQueueForRestore(HSPFILEQ QueueHandle,PCSTR BackupPath,DWORD RestoreFlags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupPrepareQueueForRestoreA(HSPFILEQ QueueHandle,PCSTR BackupPath,DWORD RestoreFlags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupPrepareQueueForRestoreW(HSPFILEQ QueueHandle,PCWSTR BackupPath,DWORD RestoreFlags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupPromptForDisk(HWND hwndParent,PCSTR DialogTitle,PCSTR DiskName,PCSTR PathToSource,PCSTR FileSought,PCSTR TagFile,DWORD DiskPromptStyle,PSTR PathBuffer,DWORD PathBufferSize,PDWORD PathRequiredSize) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupPromptForDiskA(HWND hwndParent,PCSTR DialogTitle,PCSTR DiskName,PCSTR PathToSource,PCSTR FileSought,PCSTR TagFile,DWORD DiskPromptStyle,PSTR PathBuffer,DWORD PathBufferSize,PDWORD PathRequiredSize) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupPromptForDiskW(HWND hwndParent,PCWSTR DialogTitle,PCWSTR DiskName,PCWSTR PathToSource,PCWSTR FileSought,PCWSTR TagFile,DWORD DiskPromptStyle,PWSTR PathBuffer,DWORD PathBufferSize,PDWORD PathRequiredSize) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupPromptReboot(HSPFILEQ FileQueue,HWND Owner,WINBOOL ScanOnly) WINSETUPAPI INT WINAPI <setupapi.h>
SetupQueryDrivesInDiskSpaceList(HDSKSPC DiskSpace,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryDrivesInDiskSpaceListA(HDSKSPC DiskSpace,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryDrivesInDiskSpaceListW(HDSKSPC DiskSpace,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryFileLog(HSPFILELOG FileLogHandle,PCSTR LogSectionName,PCSTR TargetFilename,SetupFileLogInfo DesiredInfo,PSTR DataOut,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryFileLogA(HSPFILELOG FileLogHandle,PCSTR LogSectionName,PCSTR TargetFilename,SetupFileLogInfo DesiredInfo,PSTR DataOut,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryFileLogW(HSPFILELOG FileLogHandle,PCWSTR LogSectionName,PCWSTR TargetFilename,SetupFileLogInfo DesiredInfo,PWSTR DataOut,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfFileInformation(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfFileInformationA(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfFileInformationW(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfOriginalFileInformation(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSP_ORIGINAL_FILE_INFO_A OriginalFileInfo) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfOriginalFileInformationA(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSP_ORIGINAL_FILE_INFO_A OriginalFileInfo) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfOriginalFileInformationW(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PSP_ORIGINAL_FILE_INFO_W OriginalFileInfo) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfVersionInformation(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PCSTR Key,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfVersionInformationA(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PCSTR Key,PSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueryInfVersionInformationW(PSP_INF_INFORMATION InfInformation,UINT InfIndex,PCWSTR Key,PWSTR ReturnBuffer,DWORD ReturnBufferSize,PDWORD RequiredSize) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQuerySourceList(DWORD Flags,PCSTR ** List,PUINT Count) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQuerySourceListA(DWORD Flags,PCSTR ** List,PUINT Count) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQuerySourceListW(DWORD Flags,PCWSTR ** List,PUINT Count) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQuerySpaceRequiredOnDrive(HDSKSPC DiskSpace,PCSTR DriveSpec,LONGLONG * SpaceRequired,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQuerySpaceRequiredOnDriveA(HDSKSPC DiskSpace,PCSTR DriveSpec,LONGLONG * SpaceRequired,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQuerySpaceRequiredOnDriveW(HDSKSPC DiskSpace,PCWSTR DriveSpec,LONGLONG * SpaceRequired,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopy(HSPFILEQ QueueHandle,PCSTR SourceRootPath,PCSTR SourcePath,PCSTR SourceFilename,PCSTR SourceDescription,PCSTR SourceTagfile,PCSTR TargetDirectory,PCSTR TargetFilename,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopyA(HSPFILEQ QueueHandle,PCSTR SourceRootPath,PCSTR SourcePath,PCSTR SourceFilename,PCSTR SourceDescription,PCSTR SourceTagfile,PCSTR TargetDirectory,PCSTR TargetFilename,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopyIndirect(PSP_FILE_COPY_PARAMS_A CopyParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopyIndirectA(PSP_FILE_COPY_PARAMS_A CopyParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopyIndirectW(PSP_FILE_COPY_PARAMS_W CopyParams) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopySection(HSPFILEQ QueueHandle,PCSTR SourceRootPath,HINF InfHandle,HINF ListInfHandle,PCSTR Section,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopySectionA(HSPFILEQ QueueHandle,PCSTR SourceRootPath,HINF InfHandle,HINF ListInfHandle,PCSTR Section,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopySectionW(HSPFILEQ QueueHandle,PCWSTR SourceRootPath,HINF InfHandle,HINF ListInfHandle,PCWSTR Section,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueCopyW(HSPFILEQ QueueHandle,PCWSTR SourceRootPath,PCWSTR SourcePath,PCWSTR SourceFilename,PCWSTR SourceDescription,PCWSTR SourceTagfile,PCWSTR TargetDirectory,PCWSTR TargetFilename,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDefaultCopy(HSPFILEQ QueueHandle,HINF InfHandle,PCSTR SourceRootPath,PCSTR SourceFilename,PCSTR TargetFilename,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDefaultCopyA(HSPFILEQ QueueHandle,HINF InfHandle,PCSTR SourceRootPath,PCSTR SourceFilename,PCSTR TargetFilename,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDefaultCopyW(HSPFILEQ QueueHandle,HINF InfHandle,PCWSTR SourceRootPath,PCWSTR SourceFilename,PCWSTR TargetFilename,DWORD CopyStyle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDelete(HSPFILEQ QueueHandle,PCSTR PathPart1,PCSTR PathPart2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDeleteA(HSPFILEQ QueueHandle,PCSTR PathPart1,PCSTR PathPart2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDeleteSection(HSPFILEQ QueueHandle,HINF InfHandle,HINF ListInfHandle,PCSTR Section) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDeleteSectionA(HSPFILEQ QueueHandle,HINF InfHandle,HINF ListInfHandle,PCSTR Section) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDeleteSectionW(HSPFILEQ QueueHandle,HINF InfHandle,HINF ListInfHandle,PCWSTR Section) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueDeleteW(HSPFILEQ QueueHandle,PCWSTR PathPart1,PCWSTR PathPart2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueRename(HSPFILEQ QueueHandle,PCSTR SourcePath,PCSTR SourceFilename,PCSTR TargetPath,PCSTR TargetFilename) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueRenameA(HSPFILEQ QueueHandle,PCSTR SourcePath,PCSTR SourceFilename,PCSTR TargetPath,PCSTR TargetFilename) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueRenameSection(HSPFILEQ QueueHandle,HINF InfHandle,HINF ListInfHandle,PCSTR Section) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueRenameSectionA(HSPFILEQ QueueHandle,HINF InfHandle,HINF ListInfHandle,PCSTR Section) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueRenameSectionW(HSPFILEQ QueueHandle,HINF InfHandle,HINF ListInfHandle,PCWSTR Section) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupQueueRenameW(HSPFILEQ QueueHandle,PCWSTR SourcePath,PCWSTR SourceFilename,PCWSTR TargetPath,PCWSTR TargetFilename) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFileLogEntry(HSPFILELOG FileLogHandle,PCSTR LogSectionName,PCSTR TargetFilename) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFileLogEntryA(HSPFILELOG FileLogHandle,PCSTR LogSectionName,PCSTR TargetFilename) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFileLogEntryW(HSPFILELOG FileLogHandle,PCWSTR LogSectionName,PCWSTR TargetFilename) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFromDiskSpaceList(HDSKSPC DiskSpace,PCSTR TargetFilespec,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFromDiskSpaceListA(HDSKSPC DiskSpace,PCSTR TargetFilespec,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFromDiskSpaceListW(HDSKSPC DiskSpace,PCWSTR TargetFilespec,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFromSourceList(DWORD Flags,PCSTR Source) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFromSourceListA(DWORD Flags,PCSTR Source) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveFromSourceListW(DWORD Flags,PCWSTR Source) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveInstallSectionFromDiskSpaceList(HDSKSPC DiskSpace,HINF InfHandle,HINF LayoutInfHandle,PCSTR SectionName,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveInstallSectionFromDiskSpaceListA(HDSKSPC DiskSpace,HINF InfHandle,HINF LayoutInfHandle,PCSTR SectionName,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveInstallSectionFromDiskSpaceListW(HDSKSPC DiskSpace,HINF InfHandle,HINF LayoutInfHandle,PCWSTR SectionName,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveSectionFromDiskSpaceList(HDSKSPC DiskSpace,HINF InfHandle,HINF ListInfHandle,PCSTR SectionName,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveSectionFromDiskSpaceListA(HDSKSPC DiskSpace,HINF InfHandle,HINF ListInfHandle,PCSTR SectionName,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRemoveSectionFromDiskSpaceListW(HDSKSPC DiskSpace,HINF InfHandle,HINF ListInfHandle,PCWSTR SectionName,UINT Operation,PVOID Reserved1,UINT Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupRenameError(HWND hwndParent,PCSTR DialogTitle,PCSTR SourceFile,PCSTR TargetFile,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupRenameErrorA(HWND hwndParent,PCSTR DialogTitle,PCSTR SourceFile,PCSTR TargetFile,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupRenameErrorW(HWND hwndParent,PCWSTR DialogTitle,PCWSTR SourceFile,PCWSTR TargetFile,UINT Win32ErrorCode,DWORD Style) WINSETUPAPI UINT WINAPI <setupapi.h>
SetupScanFileQueue(HSPFILEQ FileQueue,DWORD Flags,HWND Window,PSP_FILE_CALLBACK_A CallbackRoutine,PVOID CallbackContext,PDWORD Result) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupScanFileQueueA(HSPFILEQ FileQueue,DWORD Flags,HWND Window,PSP_FILE_CALLBACK_A CallbackRoutine,PVOID CallbackContext,PDWORD Result) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupScanFileQueueW(HSPFILEQ FileQueue,DWORD Flags,HWND Window,PSP_FILE_CALLBACK_W CallbackRoutine,PVOID CallbackContext,PDWORD Result) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetDirectoryId(HINF InfHandle,DWORD Id,PCSTR Directory) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetDirectoryIdA(HINF InfHandle,DWORD Id,PCSTR Directory) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetDirectoryIdEx(HINF InfHandle,DWORD Id,PCSTR Directory,DWORD Flags,DWORD Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetDirectoryIdExA(HINF InfHandle,DWORD Id,PCSTR Directory,DWORD Flags,DWORD Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetDirectoryIdExW(HINF InfHandle,DWORD Id,PCWSTR Directory,DWORD Flags,DWORD Reserved1,PVOID Reserved2) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetDirectoryIdW(HINF InfHandle,DWORD Id,PCWSTR Directory) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetFileQueueAlternatePlatform(HSPFILEQ QueueHandle,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PCSTR AlternateDefaultCatalogFile) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetFileQueueAlternatePlatformA(HSPFILEQ QueueHandle,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PCSTR AlternateDefaultCatalogFile) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetFileQueueAlternatePlatformW(HSPFILEQ QueueHandle,PSP_ALTPLATFORM_INFO AlternatePlatformInfo,PCWSTR AlternateDefaultCatalogFile) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetFileQueueFlags(HSPFILEQ FileQueue,DWORD FlagMask,DWORD Flags) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetNonInteractiveMode(WINBOOL NonInteractiveFlag) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetPlatformPathOverride(PCSTR Override) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetPlatformPathOverrideA(PCSTR Override) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetPlatformPathOverrideW(PCWSTR Override) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetSourceList(DWORD Flags,PCSTR * SourceList,UINT SourceCount) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetSourceListA(DWORD Flags,PCSTR * SourceList,UINT SourceCount) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupSetSourceListW(DWORD Flags,PCWSTR * SourceList,UINT SourceCount) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupTermDefaultQueueCallback(PVOID Context) WINSETUPAPI VOID WINAPI <setupapi.h>
SetupTerminateFileLog(HSPFILELOG FileLogHandle) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupUninstallNewlyCopiedInfs(HSPFILEQ FileQueue,DWORD Flags,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupUninstallOEMInf(PCSTR InfFileName,DWORD Flags,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupUninstallOEMInfA(PCSTR InfFileName,DWORD Flags,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupUninstallOEMInfW(PCWSTR InfFileName,DWORD Flags,PVOID Reserved) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetupVerifyInfFileW(PCWSTR InfName,PSP_ALTPLATFORM_INFO AltPlatformInfo,PSP_INF_SIGNER_INFO_W InfSignerInfo) WINSETUPAPI WINBOOL WINAPI <setupapi.h>
SetUrlCacheConfigInfo(LPINTERNET_CACHE_CONFIG_INFOA,DWORD)WINBOOL     WINAPI <winineti.h>
SetUrlCacheConfigInfoA(LPINTERNET_CACHE_CONFIG_INFOA,DWORD)WINBOOL     WINAPI <winineti.h>
SetUrlCacheConfigInfoW(LPINTERNET_CACHE_CONFIG_INFOW,DWORD)WINBOOL     WINAPI <winineti.h>
SetUrlCacheEntryGroup(LPCSTR lpszUrlName,DWORD dwFlags,GROUPID GroupId,LPBYTE pbGroupAttributes,DWORD cbGroupAttributes,LPVOID lpReserved) BOOLAPI <wininet.h>
SetUrlCacheEntryGroupA(LPCSTR lpszUrlName,DWORD dwFlags,GROUPID GroupId,LPBYTE pbGroupAttributes,DWORD cbGroupAttributes,LPVOID lpReserved) BOOLAPI <wininet.h>
SetUrlCacheEntryGroupW(LPCWSTR lpszUrlName,DWORD dwFlags,GROUPID GroupId,LPBYTE pbGroupAttributes,DWORD cbGroupAttributes,LPVOID lpReserved) BOOLAPI <wininet.h>
SetUrlCacheEntryInfo(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,DWORD dwFieldControl) BOOLAPI <wininet.h>
SetUrlCacheEntryInfoA(LPCSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,DWORD dwFieldControl) BOOLAPI <wininet.h>
SetUrlCacheEntryInfoW(LPCWSTR lpszUrlName,LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,DWORD dwFieldControl) BOOLAPI <wininet.h>
SetUrlCacheGroupAttribute(GROUPID gid,DWORD dwFlags,DWORD dwAttributes,LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
SetUrlCacheGroupAttributeA(GROUPID gid,DWORD dwFlags,DWORD dwAttributes,LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
SetUrlCacheGroupAttributeW(GROUPID gid,DWORD dwFlags,DWORD dwAttributes,LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo,LPVOID lpReserved) URLCACHEAPI_<wininet.h>
SetURLMapping(LPCOLESTR pwszURL,DB_DWRESERVE dwReserved,REFCLSID rclsidProvider)virtual HRESULT WINAPI <oledb.h>
SetUrlPolicyPermissions(dw,dw2)<urlmon.h>
SetUserEnabled(VARIANT_BOOL vbEnabled)virtual HRESULT WINAPI <gpmgmt.h>
SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE pEncryptionCertificate) WINADVAPI DWORD WINAPI <winefs.h>
SetUserGeoID(GEOID GeoId) WINBASEAPI WINBOOL WINAPI <winnls.h>
SetUserObjectInformation(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetValue(ARGB argb)	VOID <strmif.h>
SetValue(const GUID * Api,VARIANT * Value)virtual HRESULT WINAPI <strmif.h>
SetValue(LONG Index,const BSTR str)virtual HRESULT WINAPI <strmif.h>
SetValue(LONG Index,DATE Value)virtual HRESULT WINAPI <strmif.h>
SetValue(LONG Index,LONG Value)virtual HRESULT WINAPI <strmif.h>
SetValueWithNotify(const GUID * Api,VARIANT * Value,GUID ** ChangedParam,ULONG * ChangedParamCount)virtual HRESULT WINAPI <strmif.h>
SetVerbState(MMC_CONSOLE_VERB eCmdID,MMC_BUTTON_STATE nState,WINBOOL bState)virtual HRESULT WINAPI <mmc.h>
SetVideoClippingWindow(HWND hwnd)virtual HRESULT WINAPI <strmif.h>
SetVideoPortIndex(DWORD dwVideoPortIndex)virtual HRESULT WINAPI <strmif.h>
SetVideoPosition(const LPRECT lpSRCRect,const LPRECT lpDSTRect)virtual HRESULT WINAPI <strmif.h>
SetViewMode(__LONG32 lViewMode)virtual HRESULT WINAPI <mmc.h>
SetViewportExtEx(HDC hdc,int x,int y,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetVirtualDiskInformation(HANDLE VirtualDiskHandle,PSET_VIRTUAL_DISK_INFO VirtualDiskInfo)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
SetVirtualDiskMetadata(HANDLE VirtualDiskHandle,LPGUID Item,ULONG MetaDataSize,PVOID MetaData)VIRTDISKAPI DWORD WINAPI <virtdisk.h>
SetVisible(__LONG32 bVisible)virtual HRESULT WINAPI <agtsvr.h>
SetVoice(BSTR bszVoice)virtual HRESULT WINAPI <agtsvr.h>
SetVoiceCaption(BSTR bszVoiceCaption)virtual HRESULT WINAPI <agtsvr.h>
SetVolumeLabel(LPCSTR lpRootPathName,LPCSTR lpVolumeName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetVolumeLabelA(LPCSTR lpRootPathName,LPCSTR lpVolumeName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetVolumeLabelW(LPCWSTR lpRootPathName,LPCWSTR lpVolumeName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetVolumeMountPoint(LPCSTR lpszVolumeMountPoint,LPCSTR lpszVolumeName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint,LPCSTR lpszVolumeName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint,LPCWSTR lpszVolumeName) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetWaitableTimer(HANDLE hTimer,const LARGE_INTEGER * lpDueTime,LONG lPeriod,PTIMERAPCROUTINE pfnCompletionRoutine,LPVOID lpArgToCompletionRoutine,WINBOOL fResume) WINBASEAPI WINBOOL WINAPI <synchapi.h>
SetWaitableTimerEx(HANDLE hTimer,const LARGE_INTEGER * lpDueTime,LONG lPeriod,PTIMERAPCROUTINE pfnCompletionRoutine,LPVOID lpArgToCompletionRoutine,PREASON_CONTEXT WakeContext,ULONG TolerableDelay) WINBOOL WINAPI <synchapi.h>
SetWaitTimeForThreadCleanup(__LONG32 dwThreadCleanupWaitTime)virtual HRESULT WINAPI <comsvcs.h>
SetWeight(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetWidowControl(__LONG32 Value)virtual HRESULT WINAPI <tom.h>
SetWidth(REAL width)	Status <gdipluspen.h>
SetWidthScale(REAL widthScale)__inline__ Status CustomLineCap::<gdiplusimpl.h>
SetWindowContextHelpId(HWND,DWORD) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowDisplayAffinity(HWND hWnd,DWORD dwAffinity) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowExtEx(HDC hdc,int x,int y,LPSIZE lpsz) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetWindowFeedbackSetting(HWND hwnd,FEEDBACK_TYPE feedback,DWORD dwFlags,UINT32 size,CONST VOID * configuration) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowFont(hwnd,hfont,fRedraw)<windowsx.h>
SetWindowForeground(__LONG32 Focus)virtual HRESULT WINAPI <control.h>
SetWindowLong(HWND hWnd,int nIndex,LONG dwNewLong) WINUSERAPI LONG WINAPI <winuser.h>
SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong) WINUSERAPI LONG WINAPI <winuser.h>
SetWindowLongPtr(HWND hWnd,int nIndex,LONG_PTR dwNewLong) WINUSERAPI LONG_PTR WINAPI <winuser.h>
SetWindowLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong) WINUSERAPI LONG_PTR WINAPI <winuser.h>
SetWindowLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong) WINUSERAPI LONG_PTR WINAPI <winuser.h>
SetWindowLongW(HWND hWnd,int nIndex,LONG dwNewLong) WINUSERAPI LONG WINAPI <winuser.h>
SetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetWindowPlacement(HWND hWnd,CONST WINDOWPLACEMENT * lpwndpl) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowPos(HWND hWnd,HWND hWndInsertAfter,int X,int Y,int cx,int cy,UINT uFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowPosition(__LONG32 Left,__LONG32 Top,__LONG32 Width,__LONG32 Height)virtual HRESULT WINAPI <control.h>
SetWindowRedraw(hwnd,fRedraw)<windowsx.h>
SetWindowRgn(HWND hWnd,HRGN hRgn,WINBOOL bRedraw) WINUSERAPI int WINAPI <winuser.h>
SetWindowsHook(int nFilterType,HOOKPROC pfnFilterProc) WINUSERAPI HOOKPROC WINAPI <winuser.h>
SetWindowsHookA(int nFilterType,HOOKPROC pfnFilterProc) WINUSERAPI HOOKPROC WINAPI <winuser.h>
SetWindowsHookEx(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId) WINUSERAPI HHOOK WINAPI <winuser.h>
SetWindowsHookExA(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId) WINUSERAPI HHOOK WINAPI <winuser.h>
SetWindowsHookExW(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId) WINUSERAPI HHOOK WINAPI <winuser.h>
SetWindowsHookW(int nFilterType,HOOKPROC pfnFilterProc) WINUSERAPI HOOKPROC WINAPI <winuser.h>
SetWindowSubclass(HWND hWnd,SUBCLASSPROC pfnSubclass,UINT_PTR uIdSubclass,DWORD_PTR dwRefData) WINBOOL WINAPI <commctrl.h>
SetWindowText(HWND hWnd,LPCSTR lpString) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowTextA(HWND hWnd,LPCSTR lpString) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowTextW(HWND hWnd,LPCWSTR lpString) WINUSERAPI WINBOOL WINAPI <winuser.h>
SetWindowTheme(HWND hwnd,LPCWSTR pszSubAppName,LPCWSTR pszSubIdList)THEMEAPI <uxtheme.h>
SetWindowThemeAttribute(HWND hwnd,enum WINDOWTHEMEATTRIBUTETYPE eAttribute,PVOID pvAttribute,DWORD cbAttribute)THEMEAPI <uxtheme.h>
SetWindowThemeNonClientAttributes(HWND hwnd,DWORD dwMask,DWORD dwAttributes)static __inline HRESULT <uxtheme.h>
SetWindowWord(HWND hWnd,int nIndex,WORD wNewWord) WINUSERAPI WORD WINAPI <winuser.h>
SetWinEventHook(DWORD eventMin,DWORD eventMax,HMODULE hmodWinEventProc,WINEVENTPROC pfnWinEventProc,DWORD idProcess,DWORD idThread,DWORD dwFlags) WINUSERAPI HWINEVENTHOOK WINAPI <winuser.h>
SetWinMetaFileBits(UINT nSize,CONST BYTE * lpMeta16Data,HDC hdcRef,CONST METAFILEPICT * lpMFP) WINGDIAPI HENHMETAFILE WINAPI <wingdi.h>
SetWMIFilter(IGPMWMIFilter * pIGPMWMIFilter)virtual HRESULT WINAPI <gpmgmt.h>
SetWordlistCoercionHRC(HRC,UINT) int WINAPI <penwin.h>
SetWordlistHRC(HRC,HWL) int WINAPI <penwin.h>
SetWorkingDirectory(LPCWSTR pwszWorkingDirectory)virtual HRESULT WINAPI <mstask.h>
SetWorkItemData(WORD cbData,BYTE rgbData[])virtual HRESULT WINAPI <mstask.h>
SetWorkspace(DAOWorkspace * pParent) VOID <_dbdao.h>
SetWorldTransform(HDC hdc,CONST XFORM * lpxf) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SetWrapMode(),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE),BOOL clamp=FALSE)	Status <gdipluspath.h>
SetWrapMode(WrapMode wrapMode)	Status <gdipluspath.h>
SetWrapperStrength(WINBOOL bStrong)virtual HRESULT WINAPI <comsvcs.h>
SetWriterFailure(HRESULT hr)HRESULT WINAPI <vswriter.h>
SetWriterFailureEx(HRESULT hrWriter,HRESULT hrApplication,LPCWSTR wszApplicationMessage)HRESULT WINAPI <vswriter.h>
SetWStr(__LONG32 lDestPos,__LONG32 lDestLen,const WCHAR * pszSrc,__LONG32 cchSrc,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
SetWStringInBlob(HBLOB hBlob,const char * pOwnerName,const char * pCategoryName,const char * pTagName,const WCHAR * pwString) DWORD __cdecl <netmon.h>
SetXAAccess(WINBOOL bXAAccess)virtual HRESULT WINAPI <txcoord.h>
SetXlcModeDDObjAndPrimarySurface(LPDIRECTDRAW7 lpDDObj,LPDIRECTDRAWSURFACE7 lpPrimarySurf)virtual HRESULT WINAPI <strmif.h>
SetXStateFeaturesMask(PCONTEXT Context,DWORD64 FeatureMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
SetZOrder(DWORD dwStreamID,DWORD dwZ)virtual HRESULT WINAPI <strmif.h>
SeUnlockSubjectContext(IN PSECURITY_SUBJECT_CONTEXT SubjectContext)<wdm.h>
SeUnregisterLogonSessionTerminatedRoutine(IN PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine)<ntifs.h>
SeValidSecurityDescriptor(IN ULONG Length,IN PSECURITY_DESCRIPTOR SecurityDescriptor)<wdm.h>
SfcGetNextProtectedFile(HANDLE RpcHandle,PPROTECTED_FILE_DATA ProtFileData) WINBOOL WINAPI <sfc.h>
SfcIsFileProtected(HANDLE RpcHandle,LPCWSTR ProtFileName) WINBOOL WINAPI <sfc.h>
SfcIsKeyProtected(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired)WINBOOL WINAPI <sfc.h>
SfpVerifyFile(LPCSTR pszFileName,LPSTR pszError,DWORD dwErrSize) WINBOOL WINAPI <sfc.h>
SHAddDefaultPropertiesByExt(PCWSTR pszExt,IPropertyStore * pPropStore) SHSTDAPI <shobjidl.h>
SHAddFolderPathToLibrary(IShellLibrary * plib,PCWSTR pszFolderPath)  __forceinline HRESULT <shobjidl.h>
SHAddFromPropSheetExtArray(HPSXA hpsxa,LPFNADDPROPSHEETPAGE lpfnAddPage,LPARAM lParam) WINSHELLAPI UINT WINAPI <shlobj.h>
SHAddToRecentDocs(UINT uFlags,LPCVOID pv) SHSTDAPI_<shlobj.h>
SHAlloc(SIZE_T cb) SHSTDAPI_<shlobj.h>
SHAllocShared(const void * pvData,DWORD dwSize,DWORD dwProcessId) LWSTDAPI_<shlwapi.h>
SHAppBarMessage(DWORD dwMessage,PAPPBARDATA pData) SHSTDAPI_<shellapi.h>
SHARD_APPIDINFOIDLIST(0x00000005)<shlobj.h>
SHARD_APPIDINFOLINK(0x00000007)<shlobj.h>
SHARD_LINK(0x00000006)<shlobj.h>
SHARD_PATHA(0x00000002)<shlobj.h>
SHARD_PATHW(0x00000003)<shlobj.h>
SHARD_PIDL(0x00000001)<shlobj.h>
SHARD_SHELLITEM(0x00000008)<shlobj.h>
SHAssocEnumHandlersForProtocolByApplication(PCWSTR protocol,REFIID riid,void ** enumHandlers)SHSTDAPI <shobjidl.h>
SHAutoComplete(HWND hwndEdit,DWORD dwFlags) LWSTDAPI <shlwapi.h>
SHBindToFolderIDListParent(IShellFolder * psfRoot,PCUIDLIST_RELATIVE pidl,REFIID riid,void ** ppv,PCUITEMID_CHILD * ppidlLast) SHSTDAPI <shlobj.h>
SHBindToFolderIDListParentEx(IShellFolder * psfRoot,PCUIDLIST_RELATIVE pidl,IBindCtx * ppbc,REFIID riid,void ** ppv,PCUITEMID_CHILD * ppidlLast) SHSTDAPI <shlobj.h>
SHBindToObject(IShellFolder * psf,PCUIDLIST_RELATIVE pidl,IBindCtx * pbc,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHBindToParent(PCIDLIST_ABSOLUTE pidl,REFIID riid,void ** ppv,PCUITEMID_CHILD * ppidlLast) SHSTDAPI <shlobj.h>
SHBrowseForFolder(LPBROWSEINFOA lpbi) SHSTDAPI_<shlobj.h>
SHBrowseForFolderA(LPBROWSEINFOA lpbi) SHSTDAPI_<shlobj.h>
SHBrowseForFolderW(LPBROWSEINFOW lpbi) SHSTDAPI_<shlobj.h>
SHChangeNotification_Lock(HANDLE hChange,DWORD dwProcId,PIDLIST_ABSOLUTE ** pppidl,LONG * plEvent) SHSTDAPI_<shlobj.h>
SHChangeNotification_Unlock(HANDLE hLock) SHSTDAPI_<shlobj.h>
SHChangeNotify(LONG wEventId,UINT uFlags,LPCVOID dwItem1,LPCVOID dwItem2) SHSTDAPI_<shlobj.h>
SHChangeNotifyDeregister(ULONG ulID) SHSTDAPI_<shlobj.h>
SHChangeNotifyRegister(HWND hwnd,int fSources,LONG fEvents,UINT wMsg,int cEntries,const SHChangeNotifyEntry * pshcne) SHSTDAPI_<shlobj.h>
SHChangeNotifyRegisterThread(SCNRT_STATUS status) STDAPI_<shlobj.h>
SHCloneSpecialIDList(HWND hwnd,int csidl,WINBOOL fCreate) SHSTDAPI_<shlobj.h>
SHCLSIDFromString(PCWSTR psz,CLSID * pclsid) SHSTDAPI <shlobj.h>
SHCoCreateInstance(PCWSTR pszCLSID,const CLSID * pclsid,IUnknown * pUnkOuter,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHCopyKey(HKEY hkeySrc,LPCSTR szSrcSubKey,HKEY hkeyDest,DWORD fReserved) LWSTDAPI_<shlwapi.h>
SHCopyKeyA(HKEY hkeySrc,LPCSTR szSrcSubKey,HKEY hkeyDest,DWORD fReserved) LWSTDAPI_<shlwapi.h>
SHCopyKeyW(HKEY hkeySrc,LPCWSTR wszSrcSubKey,HKEY hkeyDest,DWORD fReserved) LWSTDAPI_<shlwapi.h>
SHCreateAssociationRegistration(REFIID riid,void ** ppv)SHSTDAPI <shobjidl.h>
SHCreateDataObject(PCIDLIST_ABSOLUTE pidlFolder,UINT cidl,PCUITEMID_CHILD_ARRAY apidl,IDataObject * pdtInner,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHCreateDefaultContextMenu(const DEFCONTEXTMENU * pdcm,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHCreateDefaultExtractIcon(REFIID riid,void ** ppv)STDAPI <shobjidl.h>
SHCreateDefaultPropertiesOp(IShellItem * psi,IFileOperation ** ppFileOp) SHSTDAPI <shobjidl.h>
SHCreateDirectory(HWND hwnd,PCWSTR pszPath) SHSTDAPI_<shlobj.h>
SHCreateDirectoryEx(HWND hwnd,LPCSTR pszPath,const SECURITY_ATTRIBUTES * psa) SHSTDAPI_<shlobj.h>
SHCreateDirectoryExA(HWND hwnd,LPCSTR pszPath,const SECURITY_ATTRIBUTES * psa) SHSTDAPI_<shlobj.h>
SHCreateDirectoryExW(HWND hwnd,LPCWSTR pszPath,const SECURITY_ATTRIBUTES * psa) SHSTDAPI_<shlobj.h>
SHCreateFileExtractIcon(LPCSTR pszFile,DWORD dwFileAttributes,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHCreateFileExtractIconA(LPCSTR pszFile,DWORD dwFileAttributes,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHCreateFileExtractIconW(LPCWSTR pszFile,DWORD dwFileAttributes,REFIID riid,void ** ppv) SHSTDAPI <shlobj.h>
SHCreateItemFromIDList(PCIDLIST_ABSOLUTE pidl,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHCreateItemFromParsingName(PCWSTR pszPath,IBindCtx * pbc,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHCreateItemFromRelativeName(IShellItem * psiParent,PCWSTR pszName,IBindCtx * pbc,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHCreateItemInKnownFolder(REFKNOWNFOLDERID kfid,DWORD dwKFFlags,PCWSTR pszItem,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHCreateItemWithParent(PCIDLIST_ABSOLUTE pidlParent,IShellFolder * psfParent,PCUITEMID_CHILD pidl,REFIID riid,void ** ppvItem) SHSTDAPI <shobjidl.h>
SHCreateLibrary(REFIID riid,void ** ppv) __forceinline HRESULT <shobjidl.h>
SHCreateMemStream(const BYTE * pInit,_In_ UINT cbInit)LWSTDAPI_<shlwapi.h>
SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi) SHSTDAPI_<shellapi.h>
SHCreatePropSheetExtArray(HKEY hKey,PCWSTR pszSubKey,UINT max_iface) WINSHELLAPI HPSXA WINAPI <shlobj.h>
SHCreateQueryCancelAutoPlayMoniker(IMoniker ** ppmoniker) SHSTDAPI <shlobj.h>
SHCreateShellFolderView(const SFV_CREATE * pcsfv,IShellView ** ppsv) SHSTDAPI <shlobj.h>
SHCreateShellFolderViewEx(CSFV * pcsfv,IShellView ** ppsv) SHSTDAPI <shlobj.h>
SHCreateShellItem(PCIDLIST_ABSOLUTE pidlParent,IShellFolder * psfParent,PCUITEMID_CHILD pidl,IShellItem ** ppsi) SHSTDAPI <shlobj.h>
SHCreateShellItemArray(PCIDLIST_ABSOLUTE pidlParent,IShellFolder * psf,UINT cidl,PCUITEMID_CHILD_ARRAY ppidl,IShellItemArray ** ppsiItemArray) SHSTDAPI <shobjidl.h>
SHCreateShellItemArrayFromDataObject(IDataObject * pdo,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHCreateShellItemArrayFromIDLists(UINT cidl,PCIDLIST_ABSOLUTE_ARRAY rgpidl,IShellItemArray ** ppsiItemArray) SHSTDAPI <shobjidl.h>
SHCreateShellItemArrayFromShellItem(IShellItem * psi,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHCreateShellPalette(HDC hdc) LWSTDAPI_<shlwapi.h>
SHCreateStdEnumFmtEtc(UINT cfmt,const FORMATETC afmt[],IEnumFORMATETC ** ppenumFormatEtc) SHSTDAPI <shlobj.h>
SHCreateStreamOnFile(LPCSTR pszFile,DWORD grfMode,struct IStream ** ppstm) LWSTDAPI <shlwapi.h>
SHCreateStreamOnFileA(LPCSTR pszFile,DWORD grfMode,struct IStream ** ppstm) LWSTDAPI <shlwapi.h>
SHCreateStreamOnFileEx(LPCWSTR pszFile,DWORD grfMode,DWORD dwAttributes,WINBOOL fCreate,struct IStream * pstmTemplate,struct IStream ** ppstm) LWSTDAPI <shlwapi.h>
SHCreateStreamOnFileW(LPCWSTR pszFile,DWORD grfMode,struct IStream ** ppstm) LWSTDAPI <shlwapi.h>
SHCreateThread(LPTHREAD_START_ROUTINE pfnThreadProc,void * pData,DWORD dwFlags,LPTHREAD_START_ROUTINE pfnCallback) LWSTDAPI_<shlwapi.h>
SHCreateThreadRef(LONG * pcRef,IUnknown ** ppunk) LWSTDAPI <shlwapi.h>
SHDefExtractIcon(LPCSTR pszIconFile,int iIndex,UINT uFlags,HICON * phiconLarge,HICON * phiconSmall,UINT nIconSize) SHSTDAPI <shlobj.h>
SHDefExtractIconA(LPCSTR pszIconFile,int iIndex,UINT uFlags,HICON * phiconLarge,HICON * phiconSmall,UINT nIconSize) SHSTDAPI <shlobj.h>
SHDefExtractIconW(LPCWSTR pszIconFile,int iIndex,UINT uFlags,HICON * phiconLarge,HICON * phiconSmall,UINT nIconSize) SHSTDAPI <shlobj.h>
SHDeleteEmptyKey(HKEY hkey,LPCSTR pszSubKey) LWSTDAPI_<shlwapi.h>
SHDeleteEmptyKeyA(HKEY hkey,LPCSTR pszSubKey) LWSTDAPI_<shlwapi.h>
SHDeleteEmptyKeyW(HKEY hkey,LPCWSTR pszSubKey) LWSTDAPI_<shlwapi.h>
SHDeleteKey(HKEY hkey,LPCSTR pszSubKey) LWSTDAPI_<shlwapi.h>
SHDeleteKeyA(HKEY hkey,LPCSTR pszSubKey) LWSTDAPI_<shlwapi.h>
SHDeleteKeyW(HKEY hkey,LPCWSTR pszSubKey) LWSTDAPI_<shlwapi.h>
SHDeleteValue(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue) LWSTDAPI_<shlwapi.h>
SHDeleteValueA(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue) LWSTDAPI_<shlwapi.h>
SHDeleteValueW(HKEY hkey,LPCWSTR pszSubKey,LPCWSTR pszValue) LWSTDAPI_<shlwapi.h>
SHDestroyPropSheetExtArray(HPSXA hpsxa) WINSHELLAPI void WINAPI <shlobj.h>
SHDOCAPI(type)<shlobj.h>
SHDoDragDrop(HWND hwnd,IDataObject * pdata,IDropSource * pdsrc,DWORD dwEffect,DWORD * pdwEffect) SHSTDAPI <shlobj.h>
Shear(REAL shearX,REAL shearY,MatrixOrder order=MatrixOrderPrepend)	Status <gdiplusmatrix.h>
Shell_GetCachedImageIndex(LPCSTR pszIconPath,int iIconIndex,UINT uIconFlags) SHSTDAPI_<shlobj.h>
Shell_GetCachedImageIndex(PCWSTR pwszIconPath,int iIconIndex,UINT uIconFlags) SHSTDAPI_<shlobj.h>
Shell_GetCachedImageIndexA(LPCSTR pszIconPath,int iIconIndex,UINT uIconFlags) SHSTDAPI_<shlobj.h>
Shell_GetCachedImageIndexW(LPCWSTR pszIconPath,int iIconIndex,UINT uIconFlags) SHSTDAPI_<shlobj.h>
Shell_GetImageLists(HIMAGELIST * phiml,HIMAGELIST * phimlSmall) SHSTDAPI_<shlobj.h>
Shell_MergeMenus(HMENU hmDst,HMENU hmSrc,UINT uInsert,UINT uIDAdjust,UINT uIDAdjustMax,ULONG uFlags) SHSTDAPI_<shlobj.h>
Shell_NotifyIcon(DWORD dwMessage,PNOTIFYICONDATAA lpData) SHSTDAPI_<shellapi.h>
Shell_NotifyIconA(DWORD dwMessage,PNOTIFYICONDATAA lpData) SHSTDAPI_<shellapi.h>
Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER * identifier,RECT * iconLocation) SHSTDAPI <shellapi.h>
Shell_NotifyIconW(DWORD dwMessage,PNOTIFYICONDATAW lpData) SHSTDAPI_<shellapi.h>
ShellAbout(HWND hWnd,LPCSTR szApp,LPCSTR szOtherStuff,HICON hIcon) SHSTDAPI_<shellapi.h>
ShellAboutA(HWND hWnd,LPCSTR szApp,LPCSTR szOtherStuff,HICON hIcon) SHSTDAPI_<shellapi.h>
ShellAboutW(HWND hWnd,LPCWSTR szApp,LPCWSTR szOtherStuff,HICON hIcon) SHSTDAPI_<shellapi.h>
ShellExecute(HWND hwnd,LPCSTR lpOperation,LPCSTR lpFile,LPCSTR lpParameters,LPCSTR lpDirectory,INT nShowCmd) SHSTDAPI_<shellapi.h>
ShellExecuteA(HWND hwnd,LPCSTR lpOperation,LPCSTR lpFile,LPCSTR lpParameters,LPCSTR lpDirectory,INT nShowCmd) SHSTDAPI_<shellapi.h>
ShellExecuteExW(SHELLEXECUTEINFOW * pExecInfo) SHSTDAPI_<shellapi.h>
ShellExecuteW(HWND hwnd,LPCWSTR lpOperation,LPCWSTR lpFile,LPCWSTR lpParameters,LPCWSTR lpDirectory,INT nShowCmd) SHSTDAPI_<shellapi.h>
ShellFolderView_AddObject(	_hwnd, _pidl)<shlobj.h>
ShellFolderView_GetSelectedObjects(	_hwnd, ppidl)<shlobj.h>
ShellFolderView_ReArrange(	_hwnd, _lparam)<shlobj.h>
ShellFolderView_RemoveObject(	_hwnd, _pidl)<shlobj.h>
ShellFolderView_SetClipboard(	_hwnd, _dwEffect)<shlobj.h>
ShellFolderView_SetItemPos(	_hwnd, _pidl, _x, _y)<shlobj.h>
ShellFolderView_SetPoints(	_hwnd, _pdtobj)<shlobj.h>
ShellFolderView_UpdateObject(	_hwnd, _ppidl)<shlobj.h>
ShellMessageBox(HINSTANCE hAppInst,HWND hWnd,LPCSTR lpcText,LPCSTR lpcTitle,UINT fuStyle,...) LWSTDAPIV_<shellapi.h>
ShellMessageBoxA(HINSTANCE hAppInst,HWND hWnd,LPCSTR lpcText,LPCSTR lpcTitle,UINT fuStyle,...) LWSTDAPIV_<shellapi.h>
ShellMessageBoxW(HINSTANCE hAppInst,HWND hWnd,LPCWSTR lpcText,LPCWSTR lpcTitle,UINT fuStyle,...) LWSTDAPIV_<shellapi.h>
SHEmptyRecycleBin(HWND hwnd,LPCSTR pszRootPath,DWORD dwFlags) SHSTDAPI <shellapi.h>
SHEmptyRecycleBinA(HWND hwnd,LPCSTR pszRootPath,DWORD dwFlags) SHSTDAPI <shellapi.h>
SHEmptyRecycleBinW(HWND hwnd,LPCWSTR pszRootPath,DWORD dwFlags) SHSTDAPI <shellapi.h>
SHEnumerateUnreadMailAccounts(HKEY hKeyUser,DWORD dwIndex,LPSTR pszMailAddress,int cchMailAddress) STDAPI <shellapi.h>
SHEnumerateUnreadMailAccountsA(HKEY hKeyUser,DWORD dwIndex,LPSTR pszMailAddress,int cchMailAddress) STDAPI <shellapi.h>
SHEnumerateUnreadMailAccountsW(HKEY hKeyUser,DWORD dwIndex,LPWSTR pszMailAddress,int cchMailAddress) STDAPI <shellapi.h>
SHEnumKeyEx(HKEY hkey,DWORD dwIndex,LPSTR pszName,LPDWORD pcchName) LWSTDAPI_<shlwapi.h>
SHEnumKeyExA(HKEY hkey,DWORD dwIndex,LPSTR pszName,LPDWORD pcchName) LWSTDAPI_<shlwapi.h>
SHEnumKeyExW(HKEY hkey,DWORD dwIndex,LPWSTR pszName,LPDWORD pcchName) LWSTDAPI_<shlwapi.h>
SHEnumValue(HKEY hkey,DWORD dwIndex,LPSTR pszValueName,LPDWORD pcchValueName,LPDWORD pdwType,void * pvData,LPDWORD pcbData) LWSTDAPI_<shlwapi.h>
SHEnumValueA(HKEY hkey,DWORD dwIndex,LPSTR pszValueName,LPDWORD pcchValueName,LPDWORD pdwType,void * pvData,LPDWORD pcbData) LWSTDAPI_<shlwapi.h>
SHEnumValueW(HKEY hkey,DWORD dwIndex,LPWSTR pszValueName,LPDWORD pcchValueName,LPDWORD pdwType,void * pvData,LPDWORD pcbData) LWSTDAPI_<shlwapi.h>
SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate,PWSTR * ppszApplication,PWSTR * ppszCommandLine,PWSTR * ppszParameters) SHSTDAPI <shellapi.h>
SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp) SHSTDAPI_<shellapi.h>
SHFind_InitMenuPopup(HMENU hmenu,HWND hwndOwner,UINT idCmdFirst,UINT idCmdLast) SHSTDAPI_<shlobj.h>
SHFindFiles(PCIDLIST_ABSOLUTE pidlFolder,PCIDLIST_ABSOLUTE pidlSaveFile) SHSTDAPI_<shlobj.h>
SHFlushSFCache(void) SHSTDAPI_<shlobj.h>
SHFormatDrive(HWND hwnd,UINT drive,UINT fmtID,UINT options) SHSTDAPI_<shlobj.h>
SHFree(void * pv) SHSTDAPI_<shlobj.h>
SHFreeNameMappings(HANDLE hNameMappings) SHSTDAPI_<shellapi.h>
SHFreeShared(HANDLE hData,DWORD dwProcessId) LWSTDAPI_<shlwapi.h>
SHGetAttributesFromDataObject(IDataObject * pdo,DWORD dwAttributeMask,DWORD * pdwAttributes,UINT * pcItems) STDAPI <shlobj.h>
SHGetDataFromIDList(IShellFolder * psf,PCUITEMID_CHILD pidl,int nFormat,void * pv,int cb) SHSTDAPI <shlobj.h>
SHGetDataFromIDListA(IShellFolder * psf,PCUITEMID_CHILD pidl,int nFormat,void * pv,int cb) SHSTDAPI <shlobj.h>
SHGetDataFromIDListW(IShellFolder * psf,PCUITEMID_CHILD pidl,int nFormat,void * pv,int cb) SHSTDAPI <shlobj.h>
SHGetDesktopFolder(IShellFolder ** ppshf) SHSTDAPI <shlobj.h>
SHGetDiskFreeSpaceEx(LPCSTR pszDirectoryName,ULARGE_INTEGER * pulFreeBytesAvailableToCaller,ULARGE_INTEGER * pulTotalNumberOfBytes,ULARGE_INTEGER * pulTotalNumberOfFreeBytes) SHSTDAPI_<shellapi.h>
SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName,ULARGE_INTEGER * pulFreeBytesAvailableToCaller,ULARGE_INTEGER * pulTotalNumberOfBytes,ULARGE_INTEGER * pulTotalNumberOfFreeBytes) SHSTDAPI_<shellapi.h>
SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName,ULARGE_INTEGER * pulFreeBytesAvailableToCaller,ULARGE_INTEGER * pulTotalNumberOfBytes,ULARGE_INTEGER * pulTotalNumberOfFreeBytes) SHSTDAPI_<shellapi.h>
SHGetDriveMedia(PCWSTR pszDrive,DWORD * pdwMediaContent)STDAPI <shellapi.h>
SHGetFileInfoW(LPCWSTR pszPath,DWORD dwFileAttributes,SHFILEINFOW * psfi,UINT cbFileInfo,UINT uFlags) SHSTDAPI_<shellapi.h>
SHGetFolderLocation(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,PIDLIST_ABSOLUTE * ppidl) SHSTDAPI <shlobj.h>
SHGetFolderPath(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,LPSTR pszPath) SHFOLDERAPI <shlobj.h>
SHGetFolderPathA(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,LPSTR pszPath) SHFOLDERAPI <shlobj.h>
SHGetFolderPathAndSubDir(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,LPCSTR pszSubDir,LPSTR pszPath) SHSTDAPI <shlobj.h>
SHGetFolderPathAndSubDirA(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,LPCSTR pszSubDir,LPSTR pszPath) SHSTDAPI <shlobj.h>
SHGetFolderPathAndSubDirW(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,LPCWSTR pszSubDir,LPWSTR pszPath) SHSTDAPI <shlobj.h>
SHGetFolderPathW(HWND hwnd,int csidl,HANDLE hToken,DWORD dwFlags,LPWSTR pszPath) SHFOLDERAPI <shlobj.h>
SHGetIconOverlayIndex(LPCSTR pszIconPath,int iIconIndex) SHSTDAPI_<shlobj.h>
SHGetIconOverlayIndexA(LPCSTR pszIconPath,int iIconIndex) SHSTDAPI_<shlobj.h>
SHGetIconOverlayIndexW(LPCWSTR pszIconPath,int iIconIndex) SHSTDAPI_<shlobj.h>
SHGetIDListFromObject(IUnknown * punk,PIDLIST_ABSOLUTE * ppidl) SHSTDAPI <shobjidl.h>
SHGetImageList(int iImageList,REFIID riid,void ** ppvObj) SHSTDAPI <shellapi.h>
SHGetInstanceExplorer(IUnknown ** ppunk) SHSTDAPI <shlobj.h>
SHGetItemFromObject(IUnknown * punk,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHGetKnownFolderIDList(REFKNOWNFOLDERID rfid,DWORD dwFlags,HANDLE hToken,PIDLIST_ABSOLUTE * ppidl) STDAPI <shlobj.h>
SHGetKnownFolderItem(REFKNOWNFOLDERID rfid,KNOWN_FOLDER_FLAG flags,HANDLE hToken,REFIID riid,void ** ppv) STDAPI <shlobj.h>
SHGetKnownFolderPath(REFKNOWNFOLDERID rfid,DWORD dwFlags,HANDLE hToken,PWSTR * ppszPath) STDAPI <shlobj.h>
SHGetLocalizedName(PCWSTR pszPath,PWSTR pszResModule,UINT cch,int * pidsRes) SHSTDAPI <shellapi.h>
SHGetMalloc(IMalloc ** ppMalloc) SHSTDAPI <shlobj.h>
SHGetNameFromIDList(PCIDLIST_ABSOLUTE pidl,SIGDN sigdnName,PWSTR * ppszName) SHSTDAPI <shobjidl.h>
SHGetNewLinkInfo(LPCSTR pszLinkTo,LPCSTR pszDir,LPSTR pszName,WINBOOL * pfMustCopy,UINT uFlags) SHSTDAPI_<shellapi.h>
SHGetNewLinkInfoA(LPCSTR pszLinkTo,LPCSTR pszDir,LPSTR pszName,WINBOOL * pfMustCopy,UINT uFlags) SHSTDAPI_<shellapi.h>
SHGetNewLinkInfoW(LPCWSTR pszLinkTo,LPCWSTR pszDir,LPWSTR pszName,WINBOOL * pfMustCopy,UINT uFlags) SHSTDAPI_<shellapi.h>
SHGetPathFromIDList(PCIDLIST_ABSOLUTE pidl,LPSTR pszPath) SHSTDAPI_<shlobj.h>
SHGetPathFromIDListA(PCIDLIST_ABSOLUTE pidl,LPSTR pszPath) SHSTDAPI_<shlobj.h>
SHGetPathFromIDListEx(PCIDLIST_ABSOLUTE pidl,PWSTR pszPath,DWORD cchPath,GPFIDL_FLAGS uOpts) SHSTDAPI_<shlobj.h>
SHGetPathFromIDListW(PCIDLIST_ABSOLUTE pidl,LPWSTR pszPath) SHSTDAPI_<shlobj.h>
SHGetPropertyStoreForWindow(HWND hwnd,REFIID riid,void ** ppv) SHSTDAPI <shellapi.h>
SHGetPropertyStoreFromIDList(PCIDLIST_ABSOLUTE pidl,GETPROPERTYSTOREFLAGS flags,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHGetPropertyStoreFromParsingName(PCWSTR pszPath,IBindCtx * pbc,GETPROPERTYSTOREFLAGS flags,REFIID riid,void ** ppv) SHSTDAPI <shobjidl.h>
SHGetRealIDL(IShellFolder * psf,PCUITEMID_CHILD pidlSimple,PITEMID_CHILD * ppidlReal) SHSTDAPI <shlobj.h>
SHGetSetFolderCustomSettings(LPSHFOLDERCUSTOMSETTINGS pfcs,PCWSTR pszPath,DWORD dwReadWrite) SHSTDAPI <shlobj.h>
SHGetSetSettings(LPSHELLSTATE lpss,DWORD dwMask,WINBOOL bSet) SHSTDAPI_<shlobj.h>
SHGetSettings(SHELLFLAGSTATE * psfs,DWORD dwMask) SHSTDAPI_<shlobj.h>
SHGetSpecialFolderLocation(HWND hwnd,int csidl,PIDLIST_ABSOLUTE * ppidl) SHSTDAPI <shlobj.h>
SHGetSpecialFolderPath(HWND hwnd,LPSTR pszPath,int csidl,WINBOOL fCreate) SHSTDAPI_<shlobj.h>
SHGetSpecialFolderPathA(HWND hwnd,LPSTR pszPath,int csidl,WINBOOL fCreate) SHSTDAPI_<shlobj.h>
SHGetSpecialFolderPathW(HWND hwnd,LPWSTR pszPath,int csidl,WINBOOL fCreate) SHSTDAPI_<shlobj.h>
SHGetStockIconInfo(SHSTOCKICONID siid,UINT uFlags,SHSTOCKICONINFO * psii) SHSTDAPI <shellapi.h>
SHGetThreadRef(IUnknown ** ppunk) LWSTDAPI <shlwapi.h>
SHGetUnreadMailCount(HKEY hKeyUser,LPCSTR pszMailAddress,DWORD * pdwCount,FILETIME * pFileTime,LPSTR pszShellExecuteCommand,int cchShellExecuteCommand) STDAPI <shellapi.h>
SHGetUnreadMailCountA(HKEY hKeyUser,LPCSTR pszMailAddress,DWORD * pdwCount,FILETIME * pFileTime,LPSTR pszShellExecuteCommand,int cchShellExecuteCommand) STDAPI <shellapi.h>
SHGetUnreadMailCountW(HKEY hKeyUser,LPCWSTR pszMailAddress,DWORD * pdwCount,FILETIME * pFileTime,LPWSTR pszShellExecuteCommand,int cchShellExecuteCommand) STDAPI <shellapi.h>
SHGetValue(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHGetValueA(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHGetValueW(HKEY hkey,LPCWSTR pszSubKey,LPCWSTR pszValue,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHGetViewStatePropertyBag(LPCITEMIDLIST pidl,LPCWSTR pszBagName,DWORD dwFlags,REFIID riid,void ** ppv) LWSTDAPI <shlwapi.h>
SHHandleUpdateImage(PCIDLIST_ABSOLUTE pidlExtra) SHSTDAPI_<shlobj.h>
ShiftLeft128(DWORD64 LowPart,DWORD64 HighPart,BYTE Shift)DWORD64 <winnt.h>
ShiftRight128(DWORD64 LowPart,DWORD64 HighPart,BYTE Shift)DWORD64 <winnt.h>
SHILCreateFromPath(PCWSTR pszPath,PIDLIST_ABSOLUTE * ppidl,DWORD * rgfInOut) SHSTDAPI <shlobj.h>
SHInvokePrinterCommand(HWND hwnd,UINT uAction,LPCSTR lpBuf1,LPCSTR lpBuf2,WINBOOL fModal) SHSTDAPI_<shellapi.h>
SHInvokePrinterCommandA(HWND hwnd,UINT uAction,LPCSTR lpBuf1,LPCSTR lpBuf2,WINBOOL fModal) SHSTDAPI_<shellapi.h>
SHInvokePrinterCommandW(HWND hwnd,UINT uAction,LPCWSTR lpBuf1,LPCWSTR lpBuf2,WINBOOL fModal) SHSTDAPI_<shellapi.h>
SHIsFileAvailableOffline(PCWSTR pwszPath,DWORD * pdwStatus) SHSTDAPI <shellapi.h>
SHLimitInputEdit(HWND hwndEdit,IShellFolder * psf) SHSTDAPI <shlobj.h>
SHLoadIndirectString(LPCWSTR pszSource,LPWSTR pszOutBuf,UINT cchOutBuf,void ** ppvReserved) LWSTDAPI <shlwapi.h>
SHLoadInProc(REFCLSID rclsid) SHSTDAPI <shlobj.h>
SHLoadLibraryFromItem(IShellItem * psiLibrary,DWORD grfMode,REFIID riid,void ** ppv) __forceinline HRESULT <shobjidl.h>
SHLoadLibraryFromKnownFolder(REFKNOWNFOLDERID kfidLibrary,DWORD grfMode,REFIID riid,void ** ppv) __forceinline HRESULT <shobjidl.h>
SHLoadLibraryFromParsingName(PCWSTR pszParsingName,DWORD grfMode,REFIID riid,void ** ppv) __forceinline HRESULT <shobjidl.h>
SHLoadOLE(LPARAM lParam) SHSTDAPI <shlobj.h>
SHLockShared(HANDLE hData,DWORD dwProcessId) LWSTDAPI_<shlwapi.h>
SHMapPIDLToSystemImageListIndex(IShellFolder * pshf,PCUITEMID_CHILD pidl,int * piIndexSel) SHSTDAPI_<shlobj.h>
SHMultiFileProperties(IDataObject * pdtobj,DWORD dwFlags) SHSTDAPI <shlobj.h>
SHObjectProperties(HWND hwnd,DWORD shopObjectType,PCWSTR pszObjectName,PCWSTR pszPropertyPage) SHSTDAPI_<shlobj.h>
SHOpenFolderAndSelectItems(PCIDLIST_ABSOLUTE pidlFolder,UINT cidl,PCUITEMID_CHILD_ARRAY apidl,DWORD dwFlags) SHSTDAPI <shlobj.h>
SHOpenPropSheet(LPCSTR pszCaption,HKEY ahkeys[],UINT ckeys,const CLSID * pclsidDefault,IDataObject * pdtobj,IShellBrowser * psb,LPCSTR pStartPage) SHSTDAPI_<shlobj.h>
SHOpenPropSheetA(LPCSTR pszCaption,HKEY ahkeys[],UINT ckeys,const CLSID * pclsidDefault,IDataObject * pdtobj,IShellBrowser * psb,LPCSTR pStartPage) SHSTDAPI_<shlobj.h>
SHOpenPropSheetW(LPCWSTR pszCaption,HKEY ahkeys[],UINT ckeys,const CLSID * pclsidDefault,IDataObject * pdtobj,IShellBrowser * psb,LPCWSTR pStartPage) SHSTDAPI_<shlobj.h>
SHOpenRegStream(HKEY hkey,LPCSTR pszSubkey,LPCSTR pszValue,DWORD grfMode) LWSTDAPI_<shlwapi.h>
SHOpenRegStream2(HKEY hkey,LPCSTR pszSubkey,LPCSTR pszValue,DWORD grfMode) LWSTDAPI_<shlwapi.h>
SHOpenRegStream2A(HKEY hkey,LPCSTR pszSubkey,LPCSTR pszValue,DWORD grfMode) LWSTDAPI_<shlwapi.h>
SHOpenRegStream2W(HKEY hkey,LPCWSTR pszSubkey,LPCWSTR pszValue,DWORD grfMode) LWSTDAPI_<shlwapi.h>
SHOpenRegStreamA(HKEY hkey,LPCSTR pszSubkey,LPCSTR pszValue,DWORD grfMode) LWSTDAPI_<shlwapi.h>
SHOpenRegStreamW(HKEY hkey,LPCWSTR pszSubkey,LPCWSTR pszValue,DWORD grfMode) LWSTDAPI_<shlwapi.h>
SHOpenWithDialog(HWND hwndParent,const OPENASINFO * poainfo) SHSTDAPI <shlobj.h>
ShouldBlockRevert(LPCWSTR wszVolumeName,BOOLEAN * pbBlock)HRESULT WINAPI <vsbackup.h>
ShouldBlockRevertInternal(LPCWSTR wszVolumeName,BOOLEAN * pbBlock)HRESULT WINAPI <vsbackup.h>
Show(__LONG32 bFast,__LONG32 * pdwReqID)virtual HRESULT WINAPI <msimcsdk.h>
Show(LONG_PTR window,int page)virtual HRESULT WINAPI <msimcsdk.h>
Show(VARIANT Fast,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <msimcsdk.h>
Show(void)virtual HRESULT WINAPI <msimcsdk.h>
Show(WINBOOL fScrollIntoView)virtual HRESULT WINAPI <msimcsdk.h>
ShowCaret(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShowConnectionProperties(HWND hwndParent,INetConnection * pCon)virtual HRESULT WINAPI <netcon.h>
ShowContextMenu(HWND hwndParent,__LONG32 xPos,__LONG32 yPos,__LONG32 * plSelected)virtual HRESULT WINAPI <mmc.h>
ShowControlWindow(UINT id,WINBOOL fShow)virtual HRESULT WINAPI <shdeprecated.h>
ShowCursor(WINBOOL bShow) WINUSERAPI int WINAPI <winuser.h>
ShowDefaultCharacterProperties(short x,short y,__LONG32 bUseDefaultPosition)virtual HRESULT WINAPI <agtsvr.h>
ShowDefaultCharacterProperties(VARIANT x,VARIANT y)virtual HRESULT WINAPI <agtsvr.h>
ShowDialog(int iDialog,HWND hwnd)virtual HRESULT WINAPI <strmif.h>
ShowError(HWND hWndParent,REFSYNCMGRERRORID ErrorID)virtual HRESULT WINAPI <mobsync.h>
ShowErrorCompleted(HRESULT hr,ULONG cbNumItems,SYNCMGRITEMID * pItemIDs)virtual HRESULT WINAPI <mobsync.h>
ShowHideMenuCtl(HWND hWnd,UINT_PTR uFlags,LPINT lpInfo) WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
ShowHTMLDialog(HWND hwndParent,IMoniker * pMk,VARIANT * pvarArgIn,LPWSTR pchOptions,VARIANT * pvarArgOut)STDAPI <mshtmhst.h>
ShowHTMLDialogEx(HWND hwndParent,IMoniker * pMk,DWORD dwDialogFlags,VARIANT * pvarArgIn,LPWSTR pchOptions,VARIANT * pvarArgOut)STDAPI <mshtmhst.h>
ShowKeyboard(HWND,UINT,LPPOINT,LPSKBINFO) WINBOOL WINAPI <penwin.h>
ShowMenu(DVD_MENU_ID MenuID,DWORD dwFlags,IDvdCmd ** ppCmd)virtual HRESULT WINAPI <strmif.h>
ShowModelessHTMLDialog(HWND hwndParent,IMoniker * pMk,VARIANT * pvarArgIn,VARIANT * pvarOptions,IHTMLWindow2 ** ppWindow)STDAPI <mshtmhst.h>
ShowOptions(void)virtual HRESULT WINAPI <msimcsdk.h>
ShowOwnedPopups(HWND hWnd,WINBOOL fShow) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShowPopupMenu(short x,short y)virtual HRESULT WINAPI <agtsvr.h>
ShowPopupMenu(short x,short y,VARIANT_BOOL * Showed)virtual HRESULT WINAPI <agtsvr.h>
ShowProperties(HWND hwnd)virtual HRESULT WINAPI <mobsync.h>
ShowProperties(HWND hWndParent,REFSYNCMGRITEMID ItemID)virtual HRESULT WINAPI <mobsync.h>
ShowPropertiesCompleted(HRESULT hr)virtual HRESULT WINAPI <mobsync.h>
ShowScrollBar(HWND hWnd,int wBar,WINBOOL bShow) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShowSubscriptionProperties(LPCWSTR pwszURL,HWND hwnd)virtual HRESULT WINAPI <subsmgr.h>
ShowTopic(LPOLESTR pszHelpTopic)virtual HRESULT WINAPI <mmc.h>
ShowWindow(HWND hWnd,int nCmdShow) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShowWindowAsync(HWND hWnd,int nCmdShow) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShowWizard(__LONG32 lParentWindowHandleIn,VARIANT_BOOL * pfCompletedOut)virtual HRESULT WINAPI <cluscfgwizard.h>
SHParseDisplayName(PCWSTR pszName,IBindCtx * pbc,PIDLIST_ABSOLUTE * ppidl,SFGAOF sfgaoIn,SFGAOF * psfgaoOut) SHSTDAPI <shlobj.h>
SHPathPrepareForWrite(HWND hwnd,IUnknown * punkEnableModless,LPCSTR pszPath,DWORD dwFlags) SHSTDAPI <shlobj.h>
SHPathPrepareForWriteA(HWND hwnd,IUnknown * punkEnableModless,LPCSTR pszPath,DWORD dwFlags) SHSTDAPI <shlobj.h>
SHPathPrepareForWriteW(HWND hwnd,IUnknown * punkEnableModless,LPCWSTR pszPath,DWORD dwFlags) SHSTDAPI <shlobj.h>
SHPropStgCreate(IPropertySetStorage * psstg,REFFMTID fmtid,const CLSID * pclsid,DWORD grfFlags,DWORD grfMode,DWORD dwDisposition,IPropertyStorage ** ppstg,UINT * puCodePage) SHSTDAPI <shlobj.h>
SHPropStgReadMultiple(IPropertyStorage * pps,UINT uCodePage,ULONG cpspec,PROPSPEC const rgpspec[],PROPVARIANT rgvar[]) SHSTDAPI <shlobj.h>
SHPropStgWriteMultiple(IPropertyStorage * pps,UINT * puCodePage,ULONG cpspec,PROPSPEC const rgpspec[],PROPVARIANT rgvar[],PROPID propidNameFirst) SHSTDAPI <shlobj.h>
SHQueryInfoKey(HKEY hkey,LPDWORD pcSubKeys,LPDWORD pcchMaxSubKeyLen,LPDWORD pcValues,LPDWORD pcchMaxValueNameLen) LWSTDAPI_<shlwapi.h>
SHQueryInfoKeyA(HKEY hkey,LPDWORD pcSubKeys,LPDWORD pcchMaxSubKeyLen,LPDWORD pcValues,LPDWORD pcchMaxValueNameLen) LWSTDAPI_<shlwapi.h>
SHQueryInfoKeyW(HKEY hkey,LPDWORD pcSubKeys,LPDWORD pcchMaxSubKeyLen,LPDWORD pcValues,LPDWORD pcchMaxValueNameLen) LWSTDAPI_<shlwapi.h>
SHQueryRecycleBin(LPCSTR pszRootPath,LPSHQUERYRBINFO pSHQueryRBInfo) SHSTDAPI <shellapi.h>
SHQueryRecycleBinA(LPCSTR pszRootPath,LPSHQUERYRBINFO pSHQueryRBInfo) SHSTDAPI <shellapi.h>
SHQueryRecycleBinW(LPCWSTR pszRootPath,LPSHQUERYRBINFO pSHQueryRBInfo) SHSTDAPI <shellapi.h>
SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE * pquns) SHSTDAPI <shellapi.h>
SHQueryValueEx(HKEY hkey,LPCSTR pszValue,DWORD * pdwReserved,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHQueryValueExA(HKEY hkey,LPCSTR pszValue,DWORD * pdwReserved,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHQueryValueExW(HKEY hkey,LPCWSTR pszValue,DWORD * pdwReserved,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHRegCloseUSKey(HUSKEY hUSKey) LWSTDAPI_<shlwapi.h>
SHRegCreateUSKey(LPCSTR pszPath,REGSAM samDesired,HUSKEY hRelativeUSKey,PHUSKEY phNewUSKey,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegCreateUSKeyA(LPCSTR pszPath,REGSAM samDesired,HUSKEY hRelativeUSKey,PHUSKEY phNewUSKey,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegCreateUSKeyW(LPCWSTR pwzPath,REGSAM samDesired,HUSKEY hRelativeUSKey,PHUSKEY phNewUSKey,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegDeleteEmptyUSKey(HUSKEY hUSKey,LPCSTR pszSubKey,SHREGDEL_FLAGS delRegFlags) LWSTDAPI_<shlwapi.h>
SHRegDeleteEmptyUSKeyA(HUSKEY hUSKey,LPCSTR pszSubKey,SHREGDEL_FLAGS delRegFlags) LWSTDAPI_<shlwapi.h>
SHRegDeleteEmptyUSKeyW(HUSKEY hUSKey,LPCWSTR pwzSubKey,SHREGDEL_FLAGS delRegFlags) LWSTDAPI_<shlwapi.h>
SHRegDeleteUSValue(HUSKEY hUSKey,LPCSTR pszValue,SHREGDEL_FLAGS delRegFlags) LWSTDAPI_<shlwapi.h>
SHRegDeleteUSValueA(HUSKEY hUSKey,LPCSTR pszValue,SHREGDEL_FLAGS delRegFlags) LWSTDAPI_<shlwapi.h>
SHRegDeleteUSValueW(HUSKEY hUSKey,LPCWSTR pwzValue,SHREGDEL_FLAGS delRegFlags) LWSTDAPI_<shlwapi.h>
SHRegDuplicateHKey(HKEY hkey) LWSTDAPI_<shlwapi.h>
SHRegEnumUSKey(HUSKEY hUSKey,DWORD dwIndex,LPSTR pszName,LPDWORD pcchName,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegEnumUSKeyA(HUSKEY hUSKey,DWORD dwIndex,LPSTR pszName,LPDWORD pcchName,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegEnumUSKeyW(HUSKEY hUSKey,DWORD dwIndex,LPWSTR pwzName,LPDWORD pcchName,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegEnumUSValue(HUSKEY hUSkey,DWORD dwIndex,LPSTR pszValueName,LPDWORD pcchValueName,LPDWORD pdwType,void * pvData,LPDWORD pcbData,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegEnumUSValueA(HUSKEY hUSkey,DWORD dwIndex,LPSTR pszValueName,LPDWORD pcchValueName,LPDWORD pdwType,void * pvData,LPDWORD pcbData,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegEnumUSValueW(HUSKEY hUSkey,DWORD dwIndex,LPWSTR pszValueName,LPDWORD pcchValueName,LPDWORD pdwType,void * pvData,LPDWORD pcbData,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegGetBoolUSValue(LPCSTR pszSubKey,LPCSTR pszValue,WINBOOL fIgnoreHKCU,WINBOOL fDefault) LWSTDAPI_<shlwapi.h>
SHRegGetBoolUSValueA(LPCSTR pszSubKey,LPCSTR pszValue,WINBOOL fIgnoreHKCU,WINBOOL fDefault) LWSTDAPI_<shlwapi.h>
SHRegGetBoolUSValueW(LPCWSTR pszSubKey,LPCWSTR pszValue,WINBOOL fIgnoreHKCU,WINBOOL fDefault) LWSTDAPI_<shlwapi.h>
SHRegGetIntW(HKEY hk,LPCWSTR pwzKey,int iDefault) LWSTDAPI_<shlwapi.h>
SHRegGetPath(HKEY hKey,LPCSTR pcszSubKey,LPCSTR pcszValue,LPSTR pszPath,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegGetPathA(HKEY hKey,LPCSTR pcszSubKey,LPCSTR pcszValue,LPSTR pszPath,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegGetPathW(HKEY hKey,LPCWSTR pcszSubKey,LPCWSTR pcszValue,LPWSTR pszPath,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegGetUSValue(LPCSTR pszSubKey,LPCSTR pszValue,LPDWORD pdwType,void * pvData,LPDWORD pcbData,WINBOOL fIgnoreHKCU,void * pvDefaultData,DWORD dwDefaultDataSize) LWSTDAPI_<shlwapi.h>
SHRegGetUSValueA(LPCSTR pszSubKey,LPCSTR pszValue,LPDWORD pdwType,void * pvData,LPDWORD pcbData,WINBOOL fIgnoreHKCU,void * pvDefaultData,DWORD dwDefaultDataSize) LWSTDAPI_<shlwapi.h>
SHRegGetUSValueW(LPCWSTR pwzSubKey,LPCWSTR pwzValue,LPDWORD pdwType,void * pvData,LPDWORD pcbData,WINBOOL fIgnoreHKCU,void * pvDefaultData,DWORD dwDefaultDataSize) LWSTDAPI_<shlwapi.h>
SHRegGetValue(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue,SRRF dwFlags,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHRegGetValueA(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue,SRRF dwFlags,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHRegGetValueW(HKEY hkey,LPCWSTR pszSubKey,LPCWSTR pszValue,SRRF dwFlags,DWORD * pdwType,void * pvData,DWORD * pcbData) LWSTDAPI_<shlwapi.h>
SHRegOpenUSKey(LPCSTR pszPath,REGSAM samDesired,HUSKEY hRelativeUSKey,PHUSKEY phNewUSKey,WINBOOL fIgnoreHKCU) LWSTDAPI_<shlwapi.h>
SHRegOpenUSKeyA(LPCSTR pszPath,REGSAM samDesired,HUSKEY hRelativeUSKey,PHUSKEY phNewUSKey,WINBOOL fIgnoreHKCU) LWSTDAPI_<shlwapi.h>
SHRegOpenUSKeyW(LPCWSTR pwzPath,REGSAM samDesired,HUSKEY hRelativeUSKey,PHUSKEY phNewUSKey,WINBOOL fIgnoreHKCU) LWSTDAPI_<shlwapi.h>
SHRegQueryInfoUSKey(HUSKEY hUSKey,LPDWORD pcSubKeys,LPDWORD pcchMaxSubKeyLen,LPDWORD pcValues,LPDWORD pcchMaxValueNameLen,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegQueryInfoUSKeyA(HUSKEY hUSKey,LPDWORD pcSubKeys,LPDWORD pcchMaxSubKeyLen,LPDWORD pcValues,LPDWORD pcchMaxValueNameLen,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegQueryInfoUSKeyW(HUSKEY hUSKey,LPDWORD pcSubKeys,LPDWORD pcchMaxSubKeyLen,LPDWORD pcValues,LPDWORD pcchMaxValueNameLen,SHREGENUM_FLAGS enumRegFlags) LWSTDAPI_<shlwapi.h>
SHRegQueryUSValue(HUSKEY hUSKey,LPCSTR pszValue,LPDWORD pdwType,void * pvData,LPDWORD pcbData,WINBOOL fIgnoreHKCU,void * pvDefaultData,DWORD dwDefaultDataSize) LWSTDAPI_<shlwapi.h>
SHRegQueryUSValueA(HUSKEY hUSKey,LPCSTR pszValue,LPDWORD pdwType,void * pvData,LPDWORD pcbData,WINBOOL fIgnoreHKCU,void * pvDefaultData,DWORD dwDefaultDataSize) LWSTDAPI_<shlwapi.h>
SHRegQueryUSValueW(HUSKEY hUSKey,LPCWSTR pwzValue,LPDWORD pdwType,void * pvData,LPDWORD pcbData,WINBOOL fIgnoreHKCU,void * pvDefaultData,DWORD dwDefaultDataSize) LWSTDAPI_<shlwapi.h>
SHRegSetPath(HKEY hKey,LPCSTR pcszSubKey,LPCSTR pcszValue,LPCSTR pcszPath,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegSetPathA(HKEY hKey,LPCSTR pcszSubKey,LPCSTR pcszValue,LPCSTR pcszPath,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegSetPathW(HKEY hKey,LPCWSTR pcszSubKey,LPCWSTR pcszValue,LPCWSTR pcszPath,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegSetUSValue(LPCSTR pszSubKey,LPCSTR pszValue,DWORD dwType,const void * pvData,DWORD cbData,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegSetUSValueA(LPCSTR pszSubKey,LPCSTR pszValue,DWORD dwType,const void * pvData,DWORD cbData,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegSetUSValueW(LPCWSTR pwzSubKey,LPCWSTR pwzValue,DWORD dwType,const void * pvData,DWORD cbData,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegWriteUSValue(HUSKEY hUSKey,LPCSTR pszValue,DWORD dwType,const void * pvData,DWORD cbData,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegWriteUSValueA(HUSKEY hUSKey,LPCSTR pszValue,DWORD dwType,const void * pvData,DWORD cbData,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHRegWriteUSValueW(HUSKEY hUSKey,LPCWSTR pwzValue,DWORD dwType,const void * pvData,DWORD cbData,DWORD dwFlags) LWSTDAPI_<shlwapi.h>
SHReleaseThreadRef() LWSTDAPI <shlwapi.h>
SHRemoveFolderPathFromLibrary(IShellLibrary * plib,PCWSTR pszFolderPath) __forceinline HRESULT <shobjidl.h>
SHRemoveLocalizedName(PCWSTR pszPath) SHSTDAPI <shellapi.h>
SHRemovePersonalPropertyValues(IShellItemArray * psia) SHSTDAPI <shobjidl.h>
SHReplaceFromPropSheetExtArray(HPSXA hpsxa,UINT uPageID,LPFNADDPROPSHEETPAGE lpfnReplaceWith,LPARAM lParam) WINSHELLAPI UINT WINAPI <shlobj.h>
SHResolveFolderPathInLibrary(IShellLibrary * plib,PCWSTR pszFolderPath,DWORD dwTimeout,PWSTR * ppszResolvedPath) __forceinline HRESULT <shobjidl.h>
SHResolveLibrary(IShellItem * psiLibrary) SHSTDAPI <shobjidl.h>
SHRestricted(RESTRICTIONS rest) SHSTDAPI_<shlobj.h>
ShrinkWatchRegion(HWATCHREGION hRegion,HCHAPTER hChapter,DBBKMARK cbBookmark,BYTE * pBookmark,DBROWCOUNT cRows)virtual HRESULT WINAPI <oledbdep.h>
SHRunControlPanel(PCWSTR lpcszCmdLine,HWND hwndMsgParent) SHSTDAPI_<shlobj.h>
SHSaveLibraryInFolderPath(IShellLibrary * plib,PCWSTR pszFolderPath,PCWSTR pszLibraryName,LIBRARYSAVEFLAGS lsf,PWSTR * ppszSavedToPath) __forceinline HRESULT <shobjidl.h>
SHSetDefaultProperties(HWND hwnd,IShellItem * psi,DWORD dwFileOpFlags,IFileOperationProgressSink * pfops) SHSTDAPI <shobjidl.h>
SHSetFolderPath(int csidl,HANDLE hToken,DWORD dwFlags,LPCSTR pszPath) SHSTDAPI <shlobj.h>
SHSetFolderPathA(int csidl,HANDLE hToken,DWORD dwFlags,LPCSTR pszPath) SHSTDAPI <shlobj.h>
SHSetFolderPathW(int csidl,HANDLE hToken,DWORD dwFlags,LPCWSTR pszPath) SHSTDAPI <shlobj.h>
SHSetInstanceExplorer(IUnknown * punk) SHSTDAPI_<shlobj.h>
SHSetKnownFolderPath(REFKNOWNFOLDERID rfid,DWORD dwFlags,HANDLE hToken,PCWSTR pszPath) STDAPI <shlobj.h>
SHSetLocalizedName(PCWSTR pszPath,PCWSTR pszResModule,int idsRes) SHSTDAPI <shellapi.h>
SHSetTemporaryPropertyForItem(IShellItem * psi,REFPROPERTYKEY propkey,REFPROPVARIANT propvar) SHSTDAPI <shobjidl.h>
SHSetThreadRef(IUnknown * punk) LWSTDAPI <shlwapi.h>
SHSetUnreadMailCount(LPCSTR pszMailAddress,DWORD dwCount,LPCSTR pszShellExecuteCommand) STDAPI <shellapi.h>
SHSetUnreadMailCountA(LPCSTR pszMailAddress,DWORD dwCount,LPCSTR pszShellExecuteCommand) STDAPI <shellapi.h>
SHSetUnreadMailCountW(LPCWSTR pszMailAddress,DWORD dwCount,LPCWSTR pszShellExecuteCommand) STDAPI <shellapi.h>
SHSetValue(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue,DWORD dwType,LPCVOID pvData,DWORD cbData) LWSTDAPI_<shlwapi.h>
SHSetValueA(HKEY hkey,LPCSTR pszSubKey,LPCSTR pszValue,DWORD dwType,LPCVOID pvData,DWORD cbData) LWSTDAPI_<shlwapi.h>
SHSetValueW(HKEY hkey,LPCWSTR pszSubKey,LPCWSTR pszValue,DWORD dwType,LPCVOID pvData,DWORD cbData) LWSTDAPI_<shlwapi.h>
SHShellFolderView_Message(HWND hwndMain,UINT uMsg,LPARAM lParam) SHSTDAPI_<shlobj.h>
SHSimpleIDListFromPath(PCWSTR pszPath)SHSTDAPI_<shobjidl.h>
SHSkipJunction(struct IBindCtx * pbc,const CLSID * pclsid) LWSTDAPI_<shlwapi.h>
SHStartNetConnectionDialog(HWND hwnd,LPCSTR pszRemoteName,DWORD dwType) SHSTDAPI <shlobj.h>
SHStartNetConnectionDialogA(HWND hwnd,LPCSTR pszRemoteName,DWORD dwType) SHSTDAPI <shlobj.h>
SHStartNetConnectionDialogW(HWND hwnd,LPCWSTR pszRemoteName,DWORD dwType) SHSTDAPI <shlobj.h>
SHSTDAPI(DWORD_PTR) <shobjidl.h>
SHSTDAPI(type)<shobjidl.h>
SHSTDDOCAPI(type)<shlobj.h>
SHStrDup(LPCSTR psz,WCHAR ** ppwsz) LWSTDAPI <shlwapi.h>
SHStrDupA(LPCSTR psz,WCHAR ** ppwsz) LWSTDAPI <shlwapi.h>
SHStrDupW(LPCWSTR psz,WCHAR ** ppwsz) LWSTDAPI <shlwapi.h>
SHTestTokenMembership(HANDLE hToken,ULONG ulRID) STDAPI_<shellapi.h>
SHUnlockShared(void * pvData) LWSTDAPI_<shlwapi.h>
SHUpdateImage(LPCSTR pszHashItem,int iIndex,UINT uFlags,int iImageIndex) SHSTDAPI_<shlobj.h>
SHUpdateImageA(LPCSTR pszHashItem,int iIndex,UINT uFlags,int iImageIndex) SHSTDAPI_<shlobj.h>
SHUpdateImageW(LPCWSTR pszHashItem,int iIndex,UINT uFlags,int iImageIndex) SHSTDAPI_<shlobj.h>
Shutdown() HRESULT <tapi3if.h>
ShutDown() virtual HRESULT <mspstrm.h>
shutdown(SOCKET s,int how) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
Shutdown(VARIANT_BOOL bReboot)virtual HRESULT WINAPI <tapi3if.h>
ShutDown(void)virtual HRESULT WINAPI <mspstrm.h>
Shutdown(void)virtual HRESULT WINAPI <tapi3if.h>
ShutdownBlockReasonCreate(HWND hWnd,LPCWSTR pwszReason) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShutdownBlockReasonDestroy(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShutdownBlockReasonQuery(HWND hWnd,LPWSTR pwszBuff,DWORD * pcchBuff) WINUSERAPI WINBOOL WINAPI <winuser.h>
ShutdownMSPCall(IUnknown * pStreamControl)virtual HRESULT WINAPI <tapi3.h>
ShutdownMSPCallHelper(IUnknown * pUnknown,T ** ppCMSPCall)template<mspaddr.h>
ShutdownNotify(void)virtual HRESULT WINAPI <iadmw.h>
ShutdownPackage(BSTR bstrPackageID)virtual HRESULT WINAPI <mtxadmin.h>
ShutdownPool(BSTR CLSIDOrProgID)virtual HRESULT WINAPI <comsvcs.h>
SHValidateUNC(HWND hwndOwner,PWSTR pszFile,UINT fConnect) SHSTDAPI_<shlobj.h>
SICHINT_ALLFIELDS(int)<shobjidl.h>
SideAssert(t)<mapidbg.h>
SideAssertSz(t,psz)<mapidbg.h>
SideAssertSz1(t,psz,a1)<mapidbg.h>
SideAssertSz2(t,psz,a1,a2)<mapidbg.h>
SideAssertSz3(t,psz,a1,a2,a3)<mapidbg.h>
SideAssertSz4(t,psz,a1,a2,a3,a4)<mapidbg.h>
SideAssertSz5(t,psz,a1,a2,a3,a4,a5)<mapidbg.h>
SideAssertSz6(t,psz,a1,a2,a3,a4,a5,a6)<mapidbg.h>
SideAssertSz7(t,psz,a1,a2,a3,a4,a5,a6,a7)<mapidbg.h>
SideAssertSz8(t,psz,a1,a2,a3,a4,a5,a6,a7,a8)<mapidbg.h>
SideAssertSz9(t,psz,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapidbg.h>
SIGDN_DESKTOPABSOLUTEEDITING(int)<shobjidl.h>
SIGDN_DESKTOPABSOLUTEPARSING(int)<shobjidl.h>
SIGDN_FILESYSPATH(int)<shobjidl.h>
SIGDN_PARENTRELATIVE(int)<shobjidl.h>
SIGDN_PARENTRELATIVEEDITING(int)<shobjidl.h>
SIGDN_PARENTRELATIVEFORADDRESSBAR(int)<shobjidl.h>
SIGDN_PARENTRELATIVEFORUI(int)<shobjidl.h>
SIGDN_PARENTRELATIVEPARSING(int)<shobjidl.h>
SIGDN_URL(int)<shobjidl.h>
SignalFileOpen(PCIDLIST_ABSOLUTE pidl) SHSTDAPI_<shlobj.h>
SignalObjectAndWait(HANDLE hObjectToSignal,HANDLE hObjectToWaitOn,DWORD dwMilliseconds,WINBOOL bAlertable) WINBASEAPI DWORD WINAPI <winbase.h>
SignalPresent(LONG * plSignalStrength)virtual HRESULT WINAPI <strmif.h>
SignalThreadProc() WINBOOL <mspthrd.h>
simple_expr() int <sql_1.h>
SimulateHotKey(HWND hWnd,DWORD dwHotKeyID)virtual HRESULT WINAPI <mshtmlc.h>
SinglePhaseReject(HANDLE EnlistmentHandle,PLARGE_INTEGER TmVirtualClock) WINBOOL WINAPI <ktmw32.h>
SinkNotify(DWORD dwMDNumElements,MD_CHANGE_OBJECT_W pcoChangeList[])virtual HRESULT WINAPI <iadmw.h>
SisCreateBackupStructure(PWCHAR volumeRoot,PVOID * sisBackupStructure,PWCHAR * commonStoreRootPathname,PULONG countOfCommonStoreFilesToBackup,PWCHAR ** commonStoreFilesToBackup) WINBOOL __stdcall <sisbkup.h>
SisCreateRestoreStructure(PWCHAR volumeRoot,PVOID * sisRestoreStructure,PWCHAR * commonStoreRootPathname,PULONG countOfCommonStoreFilesToRestore,PWCHAR ** commonStoreFilesToRestore) WINBOOL __stdcall <sisbkup.h>
SisCSFilesToBackupForLink(PVOID sisBackupStructure,PVOID reparseData,ULONG reparseDataSize,PVOID thisFileContext,PVOID * matchingFileContext,PULONG countOfCommonStoreFilesToBackup,PWCHAR ** commonStoreFilesToBackup) WINBOOL __stdcall <sisbkup.h>
SisFreeAllocatedMemory(PVOID allocatedSpace) VOID __stdcall <sisbkup.h>
SisFreeBackupStructure(PVOID sisBackupStructure) WINBOOL __stdcall <sisbkup.h>
SisFreeRestoreStructure(PVOID sisRestoreStructure) WINBOOL __stdcall <sisbkup.h>
SisRestoredCommonStoreFile(PVOID sisRestoreStructure,PWCHAR commonStoreFileName) WINBOOL __stdcall <sisbkup.h>
SisRestoredLink(PVOID sisRestoreStructure,PWCHAR restoredFileName,PVOID reparseData,ULONG reparseDataSize,PULONG countOfCommonStoreFilesToRestore,PWCHAR ** commonStoreFilesToRestore) WINBOOL __stdcall <sisbkup.h>
Size()	<winwlx.h>
Size(__LONG32 dwCharID,__LONG32 lWidth,__LONG32 lHeight)virtual HRESULT WINAPI <winwlx.h>
Size(const Size & size)	 operator<winwlx.h>
Size(INT width,INT height)	<winwlx.h>
Size(size_t) typedef void<winwlx.h>
Size(T width,T height)template<winwlx.h>
SizedDtblButton(n,u)<wabdefs.h>
SizedDtblCheckBox(n,u)<wabdefs.h>
SizedDtblComboBox(n,u)<wabdefs.h>
SizedDtblEdit(n,u)<wabdefs.h>
SizedDtblGroupBox(n,u)<wabdefs.h>
SizedDtblLabel(n,u)<wabdefs.h>
SizedDtblPage(n,n1,u)<wabdefs.h>
SizedDtblRadioButton(n,u)<wabdefs.h>
SizedSPropAttrArray(	_cattr,_name)<imessage.h>
SizedSPropProblemArray(	_cprob,_name)<wabdefs.h>
SizedSPropTagArray(	_ctag,_name)<wabdefs.h>
SizedSRowSet(	_crow,_name)<wabdefs.h>
SizedSSortOrderSet(	_csort,_name)<wabdefs.h>
SizeF()	<d2d1helper.h>
SizeF(const SizeF & size)	 operator<d2d1helper.h>
SizeF(FLOAT width=0.0f,FLOAT height=0.0f)D2D1FORCEINLINE D2D1_SIZE_F <d2d1helper.h>
SizeF(REAL width,REAL height)	<d2d1helper.h>
SIZEOF_ARRAY(ar)<ks.h>
SIZEOF_BOUNDARY_TABLE(X)<iprtrmib.h>
SIZEOF_IFTABLE(X)<iprtrmib.h>
SIZEOF_INT3264()()()
SIZEOF_IP_BINDING(X)<routprot.h>
SIZEOF_IPADDRTABLE(X)<iprtrmib.h>
SIZEOF_IPFORWARDTABLE(X)<iprtrmib.h>
SIZEOF_IPNETTABLE(X)<iprtrmib.h>
SIZEOF_MCAST_IF_TABLE(X)<iprtrmib.h>
SIZEOF_MEM_PTR()()
SIZEOF_MEM_PTR()()()
SIZEOF_MIB_MFE(X)<iprtrmib.h>
SIZEOF_MIB_MFE_STATS(X)<iprtrmib.h>
SIZEOF_MIB_MFE_STATS_EX(X)<iprtrmib.h>
SIZEOF_PTR(f64)<ndrtypes.h>
SIZEOF_TCP6TABLE_OWNER_MODULE(X)<iprtrmib.h>
SIZEOF_TCP6TABLE_OWNER_PID(X)<iprtrmib.h>
SIZEOF_TCPTABLE(X)<iprtrmib.h>
SIZEOF_TCPTABLE_OWNER_MODULE(X)<iprtrmib.h>
SIZEOF_TCPTABLE_OWNER_PID(X)<iprtrmib.h>
SIZEOF_UDP6TABLE_OWNER_MODULE(X)<iprtrmib.h>
SIZEOF_UDP6TABLE_OWNER_PID(X)<iprtrmib.h>
SIZEOF_UDPTABLE(X)<iprtrmib.h>
SIZEOF_UDPTABLE_OWNER_MODULE(X)<iprtrmib.h>
SIZEOF_UDPTABLE_OWNER_PID(X)<iprtrmib.h>
SizeOfIStream(LPSTREAM pStrm,ULARGE_INTEGER * puliSize)virtual HRESULT WINAPI <scardssp.h>
SizeofResource(HMODULE hModule,HRSRC hResInfo) WINBASEAPI DWORD WINAPI <libloaderapi.h>
SizeU(UINT32 width=0,UINT32 height=0)D2D1FORCEINLINE D2D1_SIZE_U <d2d1helper.h>
Skew()))))))))))))))))static D2D1FORCEINLINE Matrix3x2F <d2d1helper.h>
Skip(__LONG32 cElements)virtual HRESULT WINAPI <wia.h>
Skip(DWORD celt) virtual HRESULT WINAPI <wia.h>
Skip(LONG celt)virtual HRESULT WINAPI <wia.h>
Skip(ULONG celt)virtual HRESULT WINAPI <wia.h>
Skip(ULONG cNumberToSkip)virtual HRESULT WINAPI <wia.h>
Skip(ULONG cNumberToSkipIn)virtual HRESULT WINAPI <wia.h>
Skip(ULONG cRecords)virtual HRESULT WINAPI <wia.h>
Skip(ULONG cSkipElem)virtual HRESULT WINAPI <wia.h>
Skip(unsigned __LONG32 celt)virtual HRESULT WINAPI <wia.h>
Skip(unsigned __LONG32 cSkip)virtual HRESULT WINAPI <wia.h>
SkipNextDocument(void)virtual HRESULT WINAPI <xmltrnsf.h>
SkipPointerFrameMessages(UINT32 pointerId) WINUSERAPI WINBOOL WINAPI <winuser.h>
SLAcquireGenuineTicket(void ** ppTicketBlob,UINT * pcbTicketBlob,PCWSTR pwszTemplateId,PCWSTR pwszServerUrl,PCWSTR pwszClientToken)HRESULT WINAPI <slpublic.h>
SLDF_RESERVED(int)<shlobj.h>
Sleep(DWORD dwMilliseconds) WINBASEAPI VOID WINAPI <synchapi.h>
SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable,PCRITICAL_SECTION CriticalSection,DWORD dwMilliseconds) WINBASEAPI WINBOOL WINAPI <synchapi.h>
SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable,PSRWLOCK SRWLock,DWORD dwMilliseconds,ULONG Flags) WINBASEAPI WINBOOL WINAPI <synchapi.h>
SleepEx(DWORD dwMilliseconds,WINBOOL bAlertable) WINBASEAPI DWORD WINAPI <synchapi.h>
SLGetGenuineInformation(const SLID * pAppId,PCWSTR pwszValueName,SLDATATYPE * peDataType,UINT * pcbValue,BYTE ** ppbValue)HRESULT WINAPI <slpublic.h>
SLGetInstalledSAMLicenseApplications(UINT * pnReturnedAppIds,SLID ** ppReturnedAppIds)HRESULT WINAPI <slpublic.h>
SLGetSAMLicense(const SLID * pApplicationId,UINT * pcbXmlLicenseData,PBYTE * ppbXmlLicenseData)HRESULT WINAPI <slpublic.h>
SLGetWindowsInformation(PCWSTR pwszValueName,SLDATATYPE * peDataType,UINT * pcbValue,PBYTE * ppbValue)HRESULT WINAPI <slpublic.h>
SLGetWindowsInformationDWORD(PCWSTR pwszValueName,DWORD * pdwValue)HRESULT WINAPI <slpublic.h>
SLInstallSAMLicense(const SLID * pApplicationId,UINT cbXmlLicenseData,const BYTE * pbXmlLicenseData)HRESULT WINAPI <slpublic.h>
SLIsGenuineLocal(const SLID * pAppId,SL_GENUINE_STATE * pGenuineState,SL_NONGENUINE_UI_OPTIONS * pUIOptions)HRESULT WINAPI <slpublic.h>
SLIsGenuineLocalEx(const SLID * pAppId,const SLID pSkuId,SL_GENUINE_STATE * pGenuineState)HRESULT WINAPI <slpublic.h>
SLSetGenuineInformation(const SLID * pAppId,PCWSTR pwszValueName,SLDATATYPE eDataType,UINT cbValue,const BYTE * pbValue)HRESULT WINAPI <slpublic.h>
SLUninstallSAMLicense(const SLID * pApplicationId)HRESULT WINAPI <slpublic.h>
SMAKEHR(val)<corerror.h>
small_array_from_ndr(Source,LowerIndex,UpperIndex,Target)<rpcndr.h>
small_from_ndr(source,target)<rpcndr.h>
small_from_ndr_temp(source,target,format)<rpcndr.h>
SmbClassAlarm(IN PSMB_CLASS SmbClass,IN UCHAR Address,IN USHORT Data)<smbus.h>
SmbClassCompleteRequest(IN PSMB_CLASS SmbClass)<smbus.h>
SmbClassCreateFdo(IN PDRIVER_OBJECT DriverObject,IN PDEVICE_OBJECT PDO,IN ULONG MiniportExtensionSize,IN PSMB_INITIALIZE_MINIPORT MiniportInitialize,IN PVOID MiniportContext,OUT PDEVICE_OBJECT * FDO)<smbus.h>
SmbClassInitializeDevice(IN ULONG MajorVersion,IN ULONG MinorVersion,IN PDRIVER_OBJECT DriverObject)<smbus.h>
SmbClassLockDevice(IN PSMB_CLASS SmbClass)<smbus.h>
SmbClassUnlockDevice(IN PSMB_CLASS SmbClass)<smbus.h>
SMEGetExtendedErrorStringA(VOID)LPSTR WINAPI <smx.h>
SMEGetExtendedErrorStringW(VOID)LPWSTR WINAPI <smx.h>
SMEInitializeMenu(VOID)VOID WINAPI <smx.h>
SMELoadMenuA(HWND hWnd,PSMS_LOADMENUA psmsload)DWORD WINAPI <smx.h>
SMELoadMenuW(HWND hWnd,PSMS_LOADMENUW psmsload)DWORD WINAPI <smx.h>
SMEMenuAction(HWND hwndParent,DWORD dwEventId)VOID WINAPI <smx.h>
SMERefresh(HWND hwndParent)VOID WINAPI <smx.h>
SMEUnloadMenu(VOID)VOID WINAPI <smx.h>
SMEValidateA(PSMS_VALIDATEA psmsValidate)WINBOOL WINAPI <smx.h>
SMEValidateW(PSMS_VALIDATEW psmsValidate)WINBOOL WINAPI <smx.h>
SnapinScopeObject(VARIANT ScopeNode,PPDISPATCH ScopeNodeObject)virtual HRESULT WINAPI <mmcobj.h>
SnapinSelectionObject(PPDISPATCH SelectionObject)virtual HRESULT WINAPI <mmcobj.h>
SnapRect(IHTMLElement * pIElement,RECT * prcNew,ELEMENT_CORNER eHandle)virtual HRESULT WINAPI <mshtmlc.h>
SNB_UserFree(ULONG *,SNB *)void            __RPC_USER <objidl.h>
SNB_UserMarshal(ULONG *,unsigned char *,SNB *)unsigned char<objidl.h>
SNB_UserSize(ULONG *,ULONG,SNB *)ULONG           __RPC_USER <objidl.h>
SNB_UserUnmarshal(ULONG *,unsigned char *,SNB *)unsigned char<objidl.h>
sndAlias(c0,c1)<mmsystem.h>
sndPlaySound(LPCSTR pszSound,UINT fuSound)<mmsystem.h>
sndPlaySoundA(LPCSTR pszSound,UINT fuSound) WINMMAPI WINBOOL WINAPI <mmsystem.h>
sndPlaySoundW(LPCWSTR pszSound,UINT fuSound) WINMMAPI WINBOOL WINAPI <mmsystem.h>
SNMPAPI_CALLBACK(HSNMP_SESSION hSession,HWND hWnd,UINT wMsg,WPARAM wParam,LPARAM lParam,LPVOID lpClientData) typedef SNMPAPI_STATUS<winsnmp.h>
SnmpCancelMsg(HSNMP_SESSION session,smiINT32 reqId) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpCleanup(void) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpCleanupEx(void) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpClose(HSNMP_SESSION session) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpContextToStr(HSNMP_CONTEXT context,smiLPOCTETS string) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpCountVbl(HSNMP_VBL vbl) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpCreatePdu(HSNMP_SESSION session,smiINT PDU_type,smiINT32 request_id,smiINT error_status,smiINT error_index,HSNMP_VBL varbindlist) HSNMP_PDU WINAPI <winsnmp.h>
SnmpCreateSession(HWND hWnd,UINT wMsg,SNMPAPI_CALLBACK fCallBack,LPVOID lpClientData) HSNMP_SESSION WINAPI <winsnmp.h>
SnmpCreateVbl(HSNMP_SESSION session,smiLPCOID name,smiLPCVALUE value) HSNMP_VBL WINAPI <winsnmp.h>
SNMPDBG(_x_)<snmp.h>
SnmpDecodeMsg(HSNMP_SESSION session,LPHSNMP_ENTITY srcEntity,LPHSNMP_ENTITY dstEntity,LPHSNMP_CONTEXT context,LPHSNMP_PDU pdu,smiLPCOCTETS msgBufDesc) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpDeleteVb(HSNMP_VBL vbl,smiUINT32 index) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpDuplicatePdu(HSNMP_SESSION session,HSNMP_PDU PDU) HSNMP_PDU WINAPI <winsnmp.h>
SnmpDuplicateVbl(HSNMP_SESSION session,HSNMP_VBL vbl) HSNMP_VBL WINAPI <winsnmp.h>
SnmpEncodeMsg(HSNMP_SESSION session,HSNMP_ENTITY srcEntity,HSNMP_ENTITY dstEntity,HSNMP_CONTEXT context,HSNMP_PDU pdu,smiLPOCTETS msgBufDesc) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpEntityToStr(HSNMP_ENTITY entity,smiUINT32 size,LPSTR string) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpExtensionClose() VOID SNMP_FUNC_TYPE <snmp.h>
SnmpExtensionInit(DWORD dwUptimeReference,HANDLE * phSubagentTrapEvent,AsnObjectIdentifier * pFirstSupportedRegion) WINBOOL SNMP_FUNC_TYPE <snmp.h>
SnmpExtensionInitEx(AsnObjectIdentifier * pNextSupportedRegion) WINBOOL SNMP_FUNC_TYPE <snmp.h>
SnmpExtensionMonitor(LPVOID pAgentMgmtData) WINBOOL SNMP_FUNC_TYPE <snmp.h>
SnmpExtensionQuery(BYTE bPduType,SnmpVarBindList * pVarBindList,AsnInteger32 * pErrorStatus,AsnInteger32 * pErrorIndex) WINBOOL SNMP_FUNC_TYPE <snmp.h>
SnmpExtensionQueryEx(UINT nRequestType,UINT nTransactionId,SnmpVarBindList * pVarBindList,AsnOctetString * pContextInfo,AsnInteger32 * pErrorStatus,AsnInteger32 * pErrorIndex) WINBOOL SNMP_FUNC_TYPE <snmp.h>
SnmpExtensionTrap(AsnObjectIdentifier * pEnterpriseOid,AsnInteger32 * pGenericTrapId,AsnInteger32 * pSpecificTrapId,AsnTimeticks * pTimeStamp,SnmpVarBindList * pVarBindList) WINBOOL SNMP_FUNC_TYPE <snmp.h>
SnmpFreeContext(HSNMP_CONTEXT context) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpFreeDescriptor(smiUINT32 syntax,smiLPOPAQUE descriptor) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpFreeEntity(HSNMP_ENTITY entity) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpFreePdu(HSNMP_PDU PDU) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpFreeVbl(HSNMP_VBL vbl) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetLastError(HSNMP_SESSION session) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetPduData(HSNMP_PDU PDU,smiLPINT PDU_type,smiLPINT32 request_id,smiLPINT error_status,smiLPINT error_index,LPHSNMP_VBL varbindlist) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetRetransmitMode(smiLPUINT32 nRetransmitMode) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetRetry(HSNMP_ENTITY hEntity,smiLPUINT32 nPolicyRetry,smiLPUINT32 nActualRetry) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetTimeout(HSNMP_ENTITY hEntity,smiLPTIMETICKS nPolicyTimeout,smiLPTIMETICKS nActualTimeout) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetTranslateMode(smiLPUINT32 nTranslateMode) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetVb(HSNMP_VBL vbl,smiUINT32 index,smiLPOID name,smiLPVALUE value) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpGetVendorInfo(smiLPVENDORINFO vendorInfo) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpListen(HSNMP_ENTITY hEntity,SNMPAPI_STATUS lStatus) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpListenEx(HSNMP_ENTITY hEntity,SNMPAPI_STATUS lStatus,smiUINT32 nUseEntityAddr) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpMgrClose(LPSNMP_MGR_SESSION session) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrCtl(LPSNMP_MGR_SESSION session,DWORD dwCtlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOUTBuffer,DWORD cbOUTBuffer,LPDWORD lpcbBytesReturned) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrGetTrap(AsnObjectIdentifier * enterprise,AsnNetworkAddress * IPAddress,AsnInteger * genericTrap,AsnInteger * specificTrap,AsnTimeticks * timeStamp,RFC1157VarBindList * variableBindings) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrGetTrapEx(AsnObjectIdentifier * enterprise,AsnNetworkAddress * agentAddress,AsnNetworkAddress * sourceAddress,AsnInteger * genericTrap,AsnInteger * specificTrap,AsnOctetString * community,AsnTimeticks * timeStamp,RFC1157VarBindList * variableBindings) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrOidToStr(AsnObjectIdentifier * oid,LPSTR * string) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrOpen(LPSTR lpAgentAddress,LPSTR lpAgentCommunity,INT nTimeOut,INT nRetries) LPSNMP_MGR_SESSION SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrRequest(LPSNMP_MGR_SESSION session,BYTE requestType,RFC1157VarBindList * variableBindings,AsnInteger * errorStatus,AsnInteger * errorIndex) SNMPAPI SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrStrToOid(LPSTR string,AsnObjectIdentifier * oid) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpMgrTrapListen(HANDLE * phTrapAvailable) WINBOOL SNMP_FUNC_TYPE <mgmtapi.h>
SnmpOidCompare(smiLPCOID xOID,smiLPCOID yOID,smiUINT32 maxlen,smiLPINT result) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpOidCopy(smiLPCOID srcOID,smiLPOID dstOID) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpOidToStr(smiLPCOID srcOID,smiUINT32 size,LPSTR string) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpOpen(HWND hWnd,UINT wMsg) HSNMP_SESSION WINAPI <winsnmp.h>
SnmpRecvMsg(HSNMP_SESSION session,LPHSNMP_ENTITY srcEntity,LPHSNMP_ENTITY dstEntity,LPHSNMP_CONTEXT context,LPHSNMP_PDU PDU) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpRegister(HSNMP_SESSION session,HSNMP_ENTITY srcEntity,HSNMP_ENTITY dstEntity,HSNMP_CONTEXT context,smiLPCOID notification,smiUINT32 state) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSendMsg(HSNMP_SESSION session,HSNMP_ENTITY srcEntity,HSNMP_ENTITY dstEntity,HSNMP_CONTEXT context,HSNMP_PDU PDU) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetPduData(HSNMP_PDU PDU,const smiINT * PDU_type,const smiINT32 * request_id,const smiINT * non_repeaters,const smiINT * max_repetitions,const HSNMP_VBL * varbindlist) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetPort(HSNMP_ENTITY hEntity,UINT nPort) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetRetransmitMode(smiUINT32 nRetransmitMode) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetRetry(HSNMP_ENTITY hEntity,smiUINT32 nPolicyRetry) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetTimeout(HSNMP_ENTITY hEntity,smiTIMETICKS nPolicyTimeout) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetTranslateMode(smiUINT32 nTranslateMode) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSetVb(HSNMP_VBL vbl,smiUINT32 index,smiLPCOID name,smiLPCVALUE value) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpStartup(smiLPUINT32 nMajorVersion,smiLPUINT32 nMinorVersion,smiLPUINT32 nLevel,smiLPUINT32 nTranslateMode,smiLPUINT32 nRetransmitMode) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpStartupEx(smiLPUINT32 nMajorVersion,smiLPUINT32 nMinorVersion,smiLPUINT32 nLevel,smiLPUINT32 nTranslateMode,smiLPUINT32 nRetransmitMode) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpStrToContext(HSNMP_SESSION session,smiLPCOCTETS string) HSNMP_CONTEXT WINAPI <winsnmp.h>
SnmpStrToEntity(HSNMP_SESSION session,LPCSTR string) HSNMP_ENTITY WINAPI <winsnmp.h>
SnmpStrToOid(LPCSTR string,smiLPOID dstOID) SNMPAPI_STATUS WINAPI <winsnmp.h>
SnmpSvcGetUptime() DWORD SNMP_FUNC_TYPE <snmp.h>
SnmpSvcSetLogLevel(INT nLogLevel) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpSvcSetLogType(INT nLogType) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilAsnAnyCpy(AsnAny * pAnyDst,AsnAny * pAnySrc) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilAsnAnyFree(AsnAny * pAny) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilDbgPrint(INT nLogLevel,LPSTR szFormat,...) VOID WINAPIV <snmp.h>
SnmpUtilIdsTo(UINT * Ids,UINT IdLength)
SnmpUtilIdsToA(UINT * Ids,UINT IdLength) LPSTR SNMP_FUNC_TYPE <snmp.h>
SnmpUtilMemAlloc(UINT nBytes) LPVOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilMemFree(LPVOID pMem) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilMemReAlloc(LPVOID pMem,UINT nBytes) LPVOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOctetsCmp(AsnOctetString * pOctets1,AsnOctetString * pOctets2) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOctetsCpy(AsnOctetString * pOctetsDst,AsnOctetString * pOctetsSrc) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOctetsFree(AsnOctetString * pOctets) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOctetsNCmp(AsnOctetString * pOctets1,AsnOctetString * pOctets2,UINT nChars) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOidAppend(AsnObjectIdentifier * pOidDst,AsnObjectIdentifier * pOidSrc) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOidCmp(AsnObjectIdentifier * pOid1,AsnObjectIdentifier * pOid2) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOidCpy(AsnObjectIdentifier * pOidDst,AsnObjectIdentifier * pOidSrc) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOidFree(AsnObjectIdentifier * pOid) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOidNCmp(AsnObjectIdentifier * pOid1,AsnObjectIdentifier * pOid2,UINT nSubIds) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilOidTo(AsnObjectIdentifier * Oid)
SnmpUtilOidToA(AsnObjectIdentifier * Oid) LPSTR SNMP_FUNC_TYPE <snmp.h>
SnmpUtilPrintAsnAny(AsnAny * pAny) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilPrintOid(AsnObjectIdentifier * Oid) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilVarBindCpy(SnmpVarBind * pVbDst,SnmpVarBind * pVbSrc) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilVarBindFree(SnmpVarBind * pVb) VOID SNMP_FUNC_TYPE <snmp.h>
SnmpUtilVarBindListCpy(SnmpVarBindList * pVblDst,SnmpVarBindList * pVblSrc) SNMPAPI SNMP_FUNC_TYPE <snmp.h>
SnmpUtilVarBindListFree(SnmpVarBindList * pVbl) VOID SNMP_FUNC_TYPE <snmp.h>
socket(int af,int type,int protocol) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
SoftwareUpdateMessageBox(HWND hWnd,PCWSTR pszDistUnit,DWORD dwFlags,LPSOFTDISTINFO psdi) SHDOCAPI_<shlobj.h>
SolidBrush()	virtual <gdiplusbrush.h>
SolidBrush(Color * color)	Status GetColor<gdiplusbrush.h>
SolidBrush(const Color & color)	<gdiplusbrush.h>
SolidBrush(const SolidBrush &)	<gdiplusbrush.h>
SolidBrush(GpBrush * brush,Status status)	<gdiplusbrush.h>
Sort(const void * elem1,const void * elem2)))))))))))))))))void CDXArray<mmc.h>
Sort(int nColumn,DWORD dwSortOptions,LPARAM lUserParam)virtual HRESULT WINAPI <mmc.h>
SORTCOMP(const void * pv1,const void * pv2)typedef int<winddi.h>
SORTIDFROMLCID(lcid)<winnt.h>
SortItems(int nColumn,DWORD dwSortOptions,LPARAM lUserParam)virtual HRESULT WINAPI <mmc.h>
SORTVERSIONFROMLCID(lcid)<winnt.h>
SoundSentry(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
Source()inline _bstr_t _com_error::<winioctl.h>
SpAcceptCredentialsFn(SECURITY_LOGON_TYPE LogonType,PUNICODE_STRING AccountName,PSECPKG_PRIMARY_CRED PrimaryCredentials,PSECPKG_SUPPLEMENTAL_CRED SupplementalCredentials) typedef NTSTATUS<ntsecpkg.h>
SpAcceptLsaModeContextFn(LSA_SEC_HANDLE CredentialHandle,LSA_SEC_HANDLE ContextHandle,PSecBufferDesc InputBuffer,ULONG ContextRequirements,ULONG TargetDataRep,PLSA_SEC_HANDLE NewContextHandle,PSecBufferDesc OutputBuffer,PULONG ContextAttributes,PTimeStamp ExpirationTime,PBOOLEAN MappedContext,PSecBuffer ContextData) typedef NTSTATUS<ntsecpkg.h>
SpAcquireCredentialsHandleFn(PUNICODE_STRING PrincipalName,ULONG CredentialUseFlags,PLUID LogonId,PVOID AuthorizationData,PVOID GetKeyFunciton,PVOID GetKeyArgument,PLSA_SEC_HANDLE CredentialHandle,PTimeStamp ExpirationTime) typedef NTSTATUS<ntsecpkg.h>
SpAddCredentialsFn(LSA_SEC_HANDLE CredentialHandle,PUNICODE_STRING PrincipalName,PUNICODE_STRING Package,ULONG CredentialUseFlags,PVOID AuthorizationData,PVOID GetKeyFunciton,PVOID GetKeyArgument,PTimeStamp ExpirationTime) typedef NTSTATUS<ntsecpkg.h>
SpApplyControlTokenFn(LSA_SEC_HANDLE ContextHandle,PSecBufferDesc ControlToken) typedef NTSTATUS<ntsecpkg.h>
SpCompleteAuthTokenFn(LSA_SEC_HANDLE ContextHandle,PSecBufferDesc InputBuffer) typedef NTSTATUS<ntsecpkg.h>
SpDeleteContextFn(LSA_SEC_HANDLE ContextHandle) typedef NTSTATUS<ntsecpkg.h>
SpDeleteCredentialsFn(LSA_SEC_HANDLE CredentialHandle,PSecBuffer Key) typedef NTSTATUS<ntsecpkg.h>
Speak(BSTR bszText,BSTR bszUrl,__LONG32 * pdwReqID)virtual HRESULT WINAPI <agtsvr.h>
Speak(VARIANT Text,VARIANT Url,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <agtsvr.h>
SpEnumTokens(const WCHAR * category_id,const WCHAR * req_attrs,const WCHAR * opt_attrs,IEnumSpObjectTokens ** ret)inline HRESULT <sphelper.h>
SpExportSecurityContextFn(LSA_SEC_HANDLE phContext,ULONG fFlags,PSecBuffer pPackedContext,PHANDLE pToken) typedef NTSTATUS<ntsecpkg.h>
SPF_VOICE_MASK(SPF_ASYNC | SPF_PURGEBEFORESPEAK) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML) | SPF_IS_FILENAME) | SPF_IS_XML)<sapi54.h>
SPFEI(SPEI_ord)<sapi.h>
SpFormatCredentialsFn(PSecBuffer Credentials,PSecBuffer FormattedCredentials) typedef NTSTATUS<ntsecpkg.h>
SpFreeCredentialsHandleFn(LSA_SEC_HANDLE CredentialHandle) typedef NTSTATUS<ntsecpkg.h>
SpGetCategoryFromId(const WCHAR * category_id,ISpObjectTokenCategory ** ret,BOOL fCreateIfNotExist=FALSE)inline HRESULT <sphelper.h>
SpGetContextTokenFn(LSA_SEC_HANDLE ContextHandle,PHANDLE ImpersonationToken) typedef NTSTATUS<ntsecpkg.h>
SpGetCredentialsFn(LSA_SEC_HANDLE CredentialHandle,PSecBuffer Credentials) typedef NTSTATUS<ntsecpkg.h>
SpGetDescription()))))))))))))))))inline HRESULT <sphelper.h>
SpGetExtendedInformationFn(SECPKG_EXTENDED_INFORMATION_CLASS Class,PSECPKG_EXTENDED_INFORMATION * ppInformation) typedef NTSTATUS<ntsecpkg.h>
SpGetInfoFn(PSecPkgInfo PackageInfo) typedef NTSTATUS<ntsecpkg.h>
SpGetUserInfoFn(PLUID LogonId,ULONG Flags,PSecurityUserData * UserData) typedef NTSTATUS<ntsecpkg.h>
SPGO_SRGS_SCRIPT(SPGO_SRGS | SPGO_SRGS_MS_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT) | SPGO_SRGS_W3C_SCRIPT)<sapi54.h>
SpHexFromUlong(WCHAR * str,ULONG ul)inline void <sphelper.h>
SpImportSecurityContextFn(PSecBuffer pPackedContext,HANDLE Token,PLSA_SEC_HANDLE phContext) typedef NTSTATUS<ntsecpkg.h>
SpInitializeFn(ULONG_PTR PackageId,PSECPKG_PARAMETERS Parameters,PLSA_SECPKG_FUNCTION_TABLE FunctionTable) typedef NTSTATUS<ntsecpkg.h>
SpInitLsaModeContextFn(LSA_SEC_HANDLE CredentialHandle,LSA_SEC_HANDLE ContextHandle,PUNICODE_STRING TargetName,ULONG ContextRequirements,ULONG TargetDataRep,PSecBufferDesc InputBuffers,PLSA_SEC_HANDLE NewContextHandle,PSecBufferDesc OutputBuffers,PULONG ContextAttributes,PTimeStamp ExpirationTime,PBOOLEAN MappedContext,PSecBuffer ContextData) typedef NTSTATUS<ntsecpkg.h>
SpInitUserModeContextFn(LSA_SEC_HANDLE ContextHandle,PSecBuffer PackedContext) typedef NTSTATUS<ntsecpkg.h>
SpInstanceInitFn(ULONG Version,PSECPKG_DLL_FUNCTIONS FunctionTable,PVOID * UserFunctions) typedef NTSTATUS<ntsecpkg.h>
SplDeleteSpoolerPortEnd(PCWSTR pName,WINBOOL bDeletePort)<winsplp.h>
SplDeleteSpoolerPortStart(PCWSTR pPortName)<winsplp.h>
SplIsSessionZero(HANDLE hPrinter,DWORD JobId,WINBOOL * pIsSessionZero)<winsplp.h>
SplitSymbols(PSTR ImageName,PCSTR SymbolsPath,PSTR SymbolFilePath,DWORD Flags) WINBOOL IMAGEAPI <imagehlp.h>
SplPromptUIInUsersSession(HANDLE hPrinter,DWORD JobId,PSHOWUIPARAMS pUIParams,DWORD * pResponse)<winsplp.h>
SpLsaModeInitializeFn(ULONG LsaVersion,PULONG PackageVersion,PSECPKG_FUNCTION_TABLE * ppTables,PULONG pcTables) typedef NTSTATUS<ntsecpkg.h>
SpMakeSignatureFn(LSA_SEC_HANDLE ContextHandle,ULONG QualityOfProtection,PSecBufferDesc MessageBuffers,ULONG MessageSequenceNumber) typedef NTSTATUS<ntsecpkg.h>
SpMarshallSupplementalCredsFn(ULONG CredentialSize,PUCHAR Credentials,PULONG MarshalledCredSize,PVOID * MarshalledCreds) typedef NTSTATUS<ntsecpkg.h>
SpoolerCopyFileEvent(LPWSTR pszPrinterName,LPWSTR pszKey,DWORD dwCopyFileEvent)<winsplp.h>
SpoolerFindClosePrinterChangeNotification(HANDLE hPrinter)WINBOOL WINAPI <winsplp.h>
SpoolerFindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,PHANDLE phEvent,PVOID pPrinterNotifyOptions,PVOID pvReserved)WINBOOL WINAPI <winsplp.h>
SpoolerFindNextPrinterChangeNotification(HANDLE hPrinter,LPDWORD pfdwChange,PVOID pvReserved0,PVOID ppPrinterNotifyInfo)WINBOOL WINAPI <winsplp.h>
SpoolerFreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pInfo)VOID WINAPI <winsplp.h>
SpoolerRefreshPrinterChangeNotification(HANDLE hPrinter,DWORD dwColor,PPRINTER_NOTIFY_OPTIONS pOptions,PPRINTER_NOTIFY_INFO * ppInfo)WINBOOL WINAPI <winsplp.h>
SpQueryContextAttributesFn(LSA_SEC_HANDLE ContextHandle,ULONG ContextAttribute,PVOID Buffer) typedef NTSTATUS<ntsecpkg.h>
SpQueryCredentialsAttributesFn(LSA_SEC_HANDLE CredentialHandle,ULONG CredentialAttribute,PVOID Buffer) typedef NTSTATUS<ntsecpkg.h>
SpSaveCredentialsFn(LSA_SEC_HANDLE CredentialHandle,PSecBuffer Credentials) typedef NTSTATUS<ntsecpkg.h>
SpSealMessageFn(LSA_SEC_HANDLE ContextHandle,ULONG QualityOfProtection,PSecBufferDesc MessageBuffers,ULONG MessageSequenceNumber) typedef NTSTATUS<ntsecpkg.h>
SpSetContextAttributesFn(LSA_SEC_HANDLE ContextHandle,ULONG ContextAttribute,PVOID Buffer,ULONG BufferSize) typedef NTSTATUS<ntsecpkg.h>
SpSetCredentialsAttributesFn(LSA_SEC_HANDLE CredentialHandle,ULONG CredentialAttribute,PVOID Buffer,ULONG BufferSize) typedef NTSTATUS<ntsecpkg.h>
SpSetExtendedInformationFn(SECPKG_EXTENDED_INFORMATION_CLASS Class,PSECPKG_EXTENDED_INFORMATION Info) typedef NTSTATUS<ntsecpkg.h>
SpShutdownFn(VOID) typedef NTSTATUS<ntsecpkg.h>
SpUnsealMessageFn(LSA_SEC_HANDLE ContextHandle,PSecBufferDesc MessageBuffers,ULONG MessageSequenceNumber,PULONG QualityOfProtection) typedef NTSTATUS<ntsecpkg.h>
SpUserModeInitializeFn(ULONG LsaVersion,PULONG PackageVersion,PSECPKG_USER_FUNCTION_TABLE * ppTables,PULONG pcTables) typedef NTSTATUS<ntsecpkg.h>
SPVER(Version)<sdkddkver.h>
SpVerifySignatureFn(LSA_SEC_HANDLE ContextHandle,PSecBufferDesc MessageBuffers,ULONG MessageSequenceNumber,PULONG QualityOfProtection) typedef NTSTATUS<ntsecpkg.h>
SQL1_Parser() ~<sql_1.h>
SQL1_Parser(CGenLexSource * pSrc) void SetSource<sql_1.h>
SQL1_Parser(LPWSTR pBuf,int nBufSize) int GetQueryClass<sql_1.h>
SQL1_Parser(SQL_LEVEL_1_RPN_EXPRESSION ** pOutput) int Parse<sql_1.h>
SQL_ADD_RECORD(hstmt,irow)<sqlext.h>
SQL_DELETE_RECORD(hstmt,irow)<sqlext.h>
SQL_FUNC_EXISTS(pfExists,uwAPI)<sqlext.h>
SQL_LEN_BINARY_ATTR(length)<sqlext.h>
SQL_LEN_DATA_AT_EXEC(length)<sqlext.h>
SQL_LEVEL_1_RPN_EXPRESSION() ~<sql_1.h>
SQL_LEVEL_1_RPN_EXPRESSION(const char * pszTextFile) void Dump<sql_1.h>
SQL_LEVEL_1_RPN_EXPRESSION(LPWSTR pProp) void AddProperty<sql_1.h>
SQL_LEVEL_1_RPN_EXPRESSION(SQL_LEVEL_1_TOKEN & pTok) void AddToken<sql_1.h>
SQL_LEVEL_1_RPN_EXPRESSION(SQL_LEVEL_1_TOKEN * pTok) void AddToken<sql_1.h>
SQL_LEVEL_1_TOKEN() ~<sql_1.h>
SQL_LEVEL_1_TOKEN(FILE *) void Dump<sql_1.h>
SQL_LEVEL_1_TOKEN(SQL_LEVEL_1_TOKEN & Src) <sql_1.h>
SQL_LEVEL_1_TOKEN(SQL_LEVEL_1_TOKEN &) <sql_1.h>
SQL_LOCK_RECORD(hstmt,irow,fLock)<sqlext.h>
SQL_POSITION_TO(hstmt,irow)<sqlext.h>
SQL_REFRESH_RECORD(hstmt,irow,fLock)<sqlext.h>
SQL_SUCCEEDED(rc)<sql.h>
SQL_UPDATE_RECORD(hstmt,irow)<sqlext.h>
SQLAllocConnect(SQLHENV EnvironmentHandle,SQLHDBC * ConnectionHandle) SQLRETURN SQL_API <sql.h>
SQLAllocEnv(phenv)<sqlext.h>
SQLAllocEnv(SQLHENV * EnvironmentHandle) SQLRETURN SQL_API <sqlext.h>
SQLAllocHandle(SQLSMALLINT HandleType,SQLHANDLE InputHandle,SQLHANDLE * OutputHandle) SQLRETURN SQL_API <sqlext.h>
SQLAllocHandleStd(SQLSMALLINT fHandleType,SQLHANDLE hInput,SQLHANDLE * phOutput) SQLRETURN SQL_API <sqlext.h>
SQLAllocStmt(SQLHDBC ConnectionHandle,SQLHSTMT * StatementHandle) SQLRETURN SQL_API <sql.h>
SQLBindCol(SQLHSTMT StatementHandle,SQLUSMALLINT ColumnNumber,SQLSMALLINT TargetType,SQLPOINTER TargetValue,SQLLEN BufferLength,SQLLEN * StrLen_or_Ind) SQLRETURN SQL_API <sql.h>
SQLBindParam(SQLHSTMT StatementHandle,SQLUSMALLINT ParameterNumber,SQLSMALLINT ValueType,SQLSMALLINT ParameterType,SQLULEN LengthPrecision,SQLSMALLINT ParameterScale,SQLPOINTER ParameterValue,SQLLEN * StrLen_or_Ind) SQLRETURN SQL_API <sql.h>
SQLBindParameter(SQLHSTMT hstmt,SQLUSMALLINT ipar,SQLSMALLINT fParamType,SQLSMALLINT fCType,SQLSMALLINT fSqlType,SQLULEN cbColDef,SQLSMALLINT ibScale,SQLPOINTER rgbValue,SQLLEN cbValueMax,SQLLEN * pcbValue) SQLRETURN SQL_API <sqlext.h>
SQLBrowseConnect(SQLHDBC hdbc,SQLCHAR * szConnStrIn,SQLSMALLINT cbConnStrIn,SQLCHAR * szConnStrOut,SQLSMALLINT cbConnStrOutMax,SQLSMALLINT * pcbConnStrOut) SQLRETURN SQL_API <sqlucode.h>
SQLBrowseConnectA(SQLHDBC hdbc,SQLCHAR * szConnStrIn,SQLSMALLINT cbConnStrIn,SQLCHAR * szConnStrOut,SQLSMALLINT cbConnStrOutMax,SQLSMALLINT * pcbConnStrOut) SQLRETURN SQL_API <sqlucode.h>
SQLBrowseConnectW(SQLHDBC hdbc,SQLWCHAR * szConnStrIn,SQLSMALLINT cbConnStrIn,SQLWCHAR * szConnStrOut,SQLSMALLINT cbConnStrOutMax,SQLSMALLINT * pcbConnStrOut) SQLRETURN SQL_API <sqlucode.h>
SQLBulkOperations(SQLHSTMT StatementHandle,SQLSMALLINT Operation) SQLRETURN SQL_API <sqlext.h>
SQLCancel(SQLHSTMT StatementHandle) SQLRETURN SQL_API <sql.h>
SQLCloseCursor(SQLHSTMT StatementHandle) SQLRETURN SQL_API <sql.h>
SQLCloseEnumServers(HANDLE hEnumHandle) RETCODE SQL_API <odbcss.h>
SQLColAttribute(SQLHSTMT hstmt,SQLSMALLINT iCol,SQLSMALLINT iField,SQLPOINTER pCharAttr,SQLSMALLINT cbCharAttrMax,SQLSMALLINT * pcbCharAttr,SQLLEN * pNumAttr) SQLRETURN SQL_API <sqlucode.h>
SQLColAttribute(SQLHSTMT hstmt,SQLSMALLINT iCol,SQLSMALLINT iField,SQLPOINTER pCharAttr,SQLSMALLINT cbCharAttrMax,SQLSMALLINT * pcbCharAttr,SQLPOINTER pNumAttr) SQLRETURN SQL_API <sqlucode.h>
SQLColAttribute(SQLHSTMT StatementHandle,SQLUSMALLINT ColumnNumber,SQLUSMALLINT FieldIdentifier,SQLPOINTER CharacterAttribute,SQLSMALLINT BufferLength,SQLSMALLINT * StringLength,SQLLEN * NumericAttribute) SQLRETURN SQL_API <sqlucode.h>
SQLColAttribute(SQLHSTMT StatementHandle,SQLUSMALLINT ColumnNumber,SQLUSMALLINT FieldIdentifier,SQLPOINTER CharacterAttribute,SQLSMALLINT BufferLength,SQLSMALLINT * StringLength,SQLPOINTER NumericAttribute) SQLRETURN SQL_API <sqlucode.h>
SQLColAttributeA(SQLHSTMT hstmt,SQLSMALLINT iCol,SQLSMALLINT iField,SQLPOINTER pCharAttr,SQLSMALLINT cbCharAttrMax,SQLSMALLINT * pcbCharAttr,SQLLEN * pNumAttr) SQLRETURN SQL_API <sqlucode.h>
SQLColAttributeA(SQLHSTMT hstmt,SQLSMALLINT iCol,SQLSMALLINT iField,SQLPOINTER pCharAttr,SQLSMALLINT cbCharAttrMax,SQLSMALLINT * pcbCharAttr,SQLPOINTER pNumAttr) SQLRETURN SQL_API <sqlucode.h>
SQLColAttributes(SQLHSTMT hstmt,SQLUSMALLINT icol,SQLUSMALLINT fDescType,SQLPOINTER rgbDesc,SQLSMALLINT cbDescMax,SQLSMALLINT * pcbDesc,SQLLEN * pfDesc) SQLRETURN SQL_API <sqlucode.h>
SQLColAttributesA(SQLHSTMT hstmt,SQLUSMALLINT icol,SQLUSMALLINT fDescType,SQLPOINTER rgbDesc,SQLSMALLINT cbDescMax,SQLSMALLINT * pcbDesc,SQLLEN * pfDesc) SQLRETURN SQL_API <sqlucode.h>
SQLColAttributesW(SQLHSTMT hstmt,SQLUSMALLINT icol,SQLUSMALLINT fDescType,SQLPOINTER rgbDesc,SQLSMALLINT cbDescMax,SQLSMALLINT * pcbDesc,SQLLEN * pfDesc) SQLRETURN SQL_API <sqlucode.h>
SQLColAttributeW(SQLHSTMT hstmt,SQLUSMALLINT iCol,SQLUSMALLINT iField,SQLPOINTER pCharAttr,SQLSMALLINT cbCharAttrMax,SQLSMALLINT * pcbCharAttr,SQLLEN * pNumAttr) SQLRETURN SQL_API <sqlucode.h>
SQLColumnPrivileges(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLColumnPrivilegesA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLColumnPrivilegesW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName,SQLWCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLColumns(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLColumns(SQLHSTMT StatementHandle,SQLCHAR * CatalogName,SQLSMALLINT NameLength1,SQLCHAR * SchemaName,SQLSMALLINT NameLength2,SQLCHAR * TableName,SQLSMALLINT NameLength3,SQLCHAR * ColumnName,SQLSMALLINT NameLength4) SQLRETURN SQL_API <sqlucode.h>
SQLColumnsA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLColumnsW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName,SQLWCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLConfigDataSource(HWND hwndParent,WORD fRequest,LPCSTR lpszDriver,LPCSTR lpszAttributes) WINBOOL WINAPI <odbcinst.h>
SQLConfigDataSourceW(HWND hwndParent,WORD fRequest,LPCWSTR lpszDriver,LPCWSTR lpszAttributes) WINBOOL WINAPI <odbcinst.h>
SQLConfigDriver(HWND hwndParent,WORD fRequest,LPCSTR lpszDriver,LPCSTR lpszArgs,LPSTR lpszMsg,WORD cbMsgMax,WORD * pcbMsgOut) WINBOOL WINAPI <odbcinst.h>
SQLConfigDriverW(HWND hwndParent,WORD fRequest,LPCWSTR lpszDriver,LPCWSTR lpszArgs,LPWSTR lpszMsg,WORD cbMsgMax,WORD * pcbMsgOut) WINBOOL WINAPI <odbcinst.h>
SQLConnect(SQLHDBC ConnectionHandle,SQLCHAR * ServerName,SQLSMALLINT NameLength1,SQLCHAR * UserName,SQLSMALLINT NameLength2,SQLCHAR * Authentication,SQLSMALLINT NameLength3) SQLRETURN SQL_API <sqlucode.h>
SQLConnect(SQLHDBC hdbc,SQLCHAR * szDSN,SQLSMALLINT cbDSN,SQLCHAR * szUID,SQLSMALLINT cbUID,SQLCHAR * szAuthStr,SQLSMALLINT cbAuthStr) SQLRETURN SQL_API <sqlucode.h>
SQLConnectA(SQLHDBC hdbc,SQLCHAR * szDSN,SQLSMALLINT cbDSN,SQLCHAR * szUID,SQLSMALLINT cbUID,SQLCHAR * szAuthStr,SQLSMALLINT cbAuthStr) SQLRETURN SQL_API <sqlucode.h>
SQLConnectW(SQLHDBC hdbc,SQLWCHAR * szDSN,SQLSMALLINT cbDSN,SQLWCHAR * szUID,SQLSMALLINT cbUID,SQLWCHAR * szAuthStr,SQLSMALLINT cbAuthStr) SQLRETURN SQL_API <sqlucode.h>
SQLCopyDesc(SQLHDESC SourceDescHandle,SQLHDESC TargetDescHandle) SQLRETURN SQL_API <sql.h>
SQLCreateDataSource(HWND hwndParent,LPCSTR lpszDSN) WINBOOL WINAPI <odbcinst.h>
SQLCreateDataSourceW(HWND hwndParent,LPCWSTR lpszDSN) WINBOOL WINAPI <odbcinst.h>
SQLDataSources(SQLHENV EnvironmentHandle,SQLUSMALLINT Direction,SQLCHAR * ServerName,SQLSMALLINT BufferLength1,SQLSMALLINT * NameLength1,SQLCHAR * Description,SQLSMALLINT BufferLength2,SQLSMALLINT * NameLength2) SQLRETURN SQL_API <sqlucode.h>
SQLDataSources(SQLHENV henv,SQLUSMALLINT fDirection,SQLCHAR * szDSN,SQLSMALLINT cbDSNMax,SQLSMALLINT * pcbDSN,SQLCHAR * szDescription,SQLSMALLINT cbDescriptionMax,SQLSMALLINT * pcbDescription) SQLRETURN SQL_API <sqlucode.h>
SQLDataSourcesA(SQLHENV henv,SQLUSMALLINT fDirection,SQLCHAR * szDSN,SQLSMALLINT cbDSNMax,SQLSMALLINT * pcbDSN,SQLCHAR * szDescription,SQLSMALLINT cbDescriptionMax,SQLSMALLINT * pcbDescription) SQLRETURN SQL_API <sqlucode.h>
SQLDataSourcesW(SQLHENV henv,SQLUSMALLINT fDirection,SQLWCHAR * szDSN,SQLSMALLINT cbDSNMax,SQLSMALLINT * pcbDSN,SQLWCHAR * szDescription,SQLSMALLINT cbDescriptionMax,SQLSMALLINT * pcbDescription) SQLRETURN SQL_API <sqlucode.h>
SQLDescribeCol(SQLHSTMT hstmt,SQLUSMALLINT icol,SQLCHAR * szColName,SQLSMALLINT cbColNameMax,SQLSMALLINT * pcbColName,SQLSMALLINT * pfSqlType,SQLUINTEGER * pcbColDef,SQLSMALLINT * pibScale,SQLSMALLINT * pfNullable) SQLRETURN SQL_API <sqlucode.h>
SQLDescribeCol(SQLHSTMT StatementHandle,SQLUSMALLINT ColumnNumber,SQLCHAR * ColumnName,SQLSMALLINT BufferLength,SQLSMALLINT * NameLength,SQLSMALLINT * DataType,SQLULEN * ColumnSize,SQLSMALLINT * DecimalDigits,SQLSMALLINT * Nullable) SQLRETURN SQL_API <sqlucode.h>
SQLDescribeColA(SQLHSTMT hstmt,SQLUSMALLINT icol,SQLCHAR * szColName,SQLSMALLINT cbColNameMax,SQLSMALLINT * pcbColName,SQLSMALLINT * pfSqlType,SQLUINTEGER * pcbColDef,SQLSMALLINT * pibScale,SQLSMALLINT * pfNullable) SQLRETURN SQL_API <sqlucode.h>
SQLDescribeColW(SQLHSTMT hstmt,SQLUSMALLINT icol,SQLWCHAR * szColName,SQLSMALLINT cbColNameMax,SQLSMALLINT * pcbColName,SQLSMALLINT * pfSqlType,SQLULEN * pcbColDef,SQLSMALLINT * pibScale,SQLSMALLINT * pfNullable) SQLRETURN SQL_API <sqlucode.h>
SQLDescribeParam(SQLHSTMT hstmt,SQLUSMALLINT ipar,SQLSMALLINT * pfSqlType,SQLUINTEGER * pcbParamDef,SQLSMALLINT * pibScale,SQLSMALLINT * pfNullable) SQLRETURN SQL_API <sqlext.h>
SQLDescribeParam(SQLHSTMT hstmt,SQLUSMALLINT ipar,SQLSMALLINT * pfSqlType,SQLULEN * pcbParamDef,SQLSMALLINT * pibScale,SQLSMALLINT * pfNullable) SQLRETURN SQL_API <sqlext.h>
SQLDescribeParamA(SQLHSTMT hstmt,SQLUSMALLINT ipar,SQLSMALLINT * pfSqlType,SQLUINTEGER * pcbParamDef,SQLSMALLINT * pibScale,SQLSMALLINT * pfNullable) SQLRETURN SQL_API <sqlucode.h>
SQLDisconnect(SQLHDBC ConnectionHandle) SQLRETURN SQL_API <sql.h>
SQLDriverConnect(SQLHDBC hdbc,SQLHWND hwnd,SQLCHAR * szConnStrIn,SQLSMALLINT cbConnStrIn,SQLCHAR * szConnStrOut,SQLSMALLINT cbConnStrOutMax,SQLSMALLINT * pcbConnStrOut,SQLUSMALLINT fDriverCompletion) SQLRETURN SQL_API <sqlucode.h>
SQLDriverConnectA(SQLHDBC hdbc,SQLHWND hwnd,SQLCHAR * szConnStrIn,SQLSMALLINT cbConnStrIn,SQLCHAR * szConnStrOut,SQLSMALLINT cbConnStrOutMax,SQLSMALLINT * pcbConnStrOut,SQLUSMALLINT fDriverCompletion) SQLRETURN SQL_API <sqlucode.h>
SQLDriverConnectW(SQLHDBC hdbc,SQLHWND hwnd,SQLWCHAR * szConnStrIn,SQLSMALLINT cbConnStrIn,SQLWCHAR * szConnStrOut,SQLSMALLINT cbConnStrOutMax,SQLSMALLINT * pcbConnStrOut,SQLUSMALLINT fDriverCompletion) SQLRETURN SQL_API <sqlucode.h>
SQLDrivers(SQLHENV henv,SQLUSMALLINT fDirection,SQLCHAR * szDriverDesc,SQLSMALLINT cbDriverDescMax,SQLSMALLINT * pcbDriverDesc,SQLCHAR * szDriverAttributes,SQLSMALLINT cbDrvrAttrMax,SQLSMALLINT * pcbDrvrAttr) SQLRETURN SQL_API <sqlucode.h>
SQLDriversA(SQLHENV henv,SQLUSMALLINT fDirection,SQLCHAR * szDriverDesc,SQLSMALLINT cbDriverDescMax,SQLSMALLINT * pcbDriverDesc,SQLCHAR * szDriverAttributes,SQLSMALLINT cbDrvrAttrMax,SQLSMALLINT * pcbDrvrAttr) SQLRETURN SQL_API <sqlucode.h>
SQLDriversW(SQLHENV henv,SQLUSMALLINT fDirection,SQLWCHAR * szDriverDesc,SQLSMALLINT cbDriverDescMax,SQLSMALLINT * pcbDriverDesc,SQLWCHAR * szDriverAttributes,SQLSMALLINT cbDrvrAttrMax,SQLSMALLINT * pcbDrvrAttr) SQLRETURN SQL_API <sqlucode.h>
SQLEndTran(SQLSMALLINT HandleType,SQLHANDLE Handle,SQLSMALLINT CompletionType) SQLRETURN SQL_API <sql.h>
SQLError(SQLHENV EnvironmentHandle,SQLHDBC ConnectionHandle,SQLHSTMT StatementHandle,SQLCHAR * Sqlstate,SQLINTEGER * NativeError,SQLCHAR * MessageText,SQLSMALLINT BufferLength,SQLSMALLINT * TextLength) SQLRETURN SQL_API <sqlucode.h>
SQLError(SQLHENV henv,SQLHDBC hdbc,SQLHSTMT hstmt,SQLCHAR * szSqlState,SQLINTEGER * pfNativeError,SQLCHAR * szErrorMsg,SQLSMALLINT cbErrorMsgMax,SQLSMALLINT * pcbErrorMsg) SQLRETURN SQL_API <sqlucode.h>
SQLErrorA(SQLHENV henv,SQLHDBC hdbc,SQLHSTMT hstmt,SQLCHAR * szSqlState,SQLINTEGER * pfNativeError,SQLCHAR * szErrorMsg,SQLSMALLINT cbErrorMsgMax,SQLSMALLINT * pcbErrorMsg) SQLRETURN SQL_API <sqlucode.h>
SQLErrorW(SQLHENV henv,SQLHDBC hdbc,SQLHSTMT hstmt,SQLWCHAR * szSqlState,SQLINTEGER * pfNativeError,SQLWCHAR * szErrorMsg,SQLSMALLINT cbErrorMsgMax,SQLSMALLINT * pcbErrorMsg) SQLRETURN SQL_API <sqlucode.h>
SQLExecDirect(SQLHSTMT hstmt,SQLCHAR * szSqlStr,SQLINTEGER cbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLExecDirect(SQLHSTMT StatementHandle,SQLCHAR * StatementText,SQLINTEGER TextLength) SQLRETURN SQL_API <sqlucode.h>
SQLExecDirectA(SQLHSTMT hstmt,SQLCHAR * szSqlStr,SQLINTEGER cbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLExecDirectW(SQLHSTMT hstmt,SQLWCHAR * szSqlStr,SQLINTEGER cbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLExecute(SQLHSTMT StatementHandle) SQLRETURN SQL_API <sql.h>
SQLExtendedFetch(SQLHSTMT hstmt,SQLUSMALLINT fFetchType,SQLLEN irow,SQLULEN * pcrow,SQLUSMALLINT * rgfRowStatus) SQLRETURN SQL_API <sqlext.h>
SQLFetch(SQLHSTMT StatementHandle) SQLRETURN SQL_API <sql.h>
SQLFetchScroll(SQLHSTMT StatementHandle,SQLSMALLINT FetchOrientation,SQLLEN FetchOffset) SQLRETURN SQL_API <sql.h>
SQLForeignKeys(SQLHSTMT hstmt,SQLCHAR * szPkCatalogName,SQLSMALLINT cbPkCatalogName,SQLCHAR * szPkSchemaName,SQLSMALLINT cbPkSchemaName,SQLCHAR * szPkTableName,SQLSMALLINT cbPkTableName,SQLCHAR * szFkCatalogName,SQLSMALLINT cbFkCatalogName,SQLCHAR * szFkSchemaName,SQLSMALLINT cbFkSchemaName,SQLCHAR * szFkTableName,SQLSMALLINT cbFkTableName) SQLRETURN SQL_API <sqlucode.h>
SQLForeignKeysA(SQLHSTMT hstmt,SQLCHAR * szPkCatalogName,SQLSMALLINT cbPkCatalogName,SQLCHAR * szPkSchemaName,SQLSMALLINT cbPkSchemaName,SQLCHAR * szPkTableName,SQLSMALLINT cbPkTableName,SQLCHAR * szFkCatalogName,SQLSMALLINT cbFkCatalogName,SQLCHAR * szFkSchemaName,SQLSMALLINT cbFkSchemaName,SQLCHAR * szFkTableName,SQLSMALLINT cbFkTableName) SQLRETURN SQL_API <sqlucode.h>
SQLForeignKeysW(SQLHSTMT hstmt,SQLWCHAR * szPkCatalogName,SQLSMALLINT cbPkCatalogName,SQLWCHAR * szPkSchemaName,SQLSMALLINT cbPkSchemaName,SQLWCHAR * szPkTableName,SQLSMALLINT cbPkTableName,SQLWCHAR * szFkCatalogName,SQLSMALLINT cbFkCatalogName,SQLWCHAR * szFkSchemaName,SQLSMALLINT cbFkSchemaName,SQLWCHAR * szFkTableName,SQLSMALLINT cbFkTableName) SQLRETURN SQL_API <sqlucode.h>
SQLFreeConnect(SQLHDBC ConnectionHandle) SQLRETURN SQL_API <sql.h>
SQLFreeEnv(SQLHENV EnvironmentHandle) SQLRETURN SQL_API <sql.h>
SQLFreeHandle(SQLSMALLINT HandleType,SQLHANDLE Handle) SQLRETURN SQL_API <sql.h>
SQLFreeStmt(SQLHSTMT StatementHandle,SQLUSMALLINT Option) SQLRETURN SQL_API <sql.h>
SQLGetAvailableDrivers(LPCSTR lpszInfFile,LPSTR lpszBuf,WORD cbBufMax,WORD * pcbBufOut) WINBOOL WINAPI <odbcinst.h>
SQLGetAvailableDriversW(LPCWSTR lpszInfFile,LPWSTR lpszBuf,WORD cbBufMax,WORD * pcbBufOut) WINBOOL WINAPI <odbcinst.h>
SQLGetConfigMode(UWORD * pwConfigMode) WINBOOL WINAPI <odbcinst.h>
SQLGetConnectAttr(SQLHDBC ConnectionHandle,SQLINTEGER Attribute,SQLPOINTER Value,SQLINTEGER BufferLength,SQLINTEGER * StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectAttr(SQLHDBC hdbc,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectAttrA(SQLHDBC hdbc,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectAttrW(SQLHDBC hdbc,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectOption(SQLHDBC ConnectionHandle,SQLUSMALLINT Option,SQLPOINTER Value) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectOption(SQLHDBC hdbc,SQLUSMALLINT fOption,SQLPOINTER pvParam) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectOptionA(SQLHDBC hdbc,SQLUSMALLINT fOption,SQLPOINTER pvParam) SQLRETURN SQL_API <sqlucode.h>
SQLGetConnectOptionW(SQLHDBC hdbc,SQLUSMALLINT fOption,SQLPOINTER pvParam) SQLRETURN SQL_API <sqlucode.h>
SQLGetCursorName(SQLHSTMT hstmt,SQLCHAR * szCursor,SQLSMALLINT cbCursorMax,SQLSMALLINT * pcbCursor) SQLRETURN SQL_API <sqlucode.h>
SQLGetCursorName(SQLHSTMT StatementHandle,SQLCHAR * CursorName,SQLSMALLINT BufferLength,SQLSMALLINT * NameLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetCursorNameA(SQLHSTMT hstmt,SQLCHAR * szCursor,SQLSMALLINT cbCursorMax,SQLSMALLINT * pcbCursor) SQLRETURN SQL_API <sqlucode.h>
SQLGetCursorNameW(SQLHSTMT hstmt,SQLWCHAR * szCursor,SQLSMALLINT cbCursorMax,SQLSMALLINT * pcbCursor) SQLRETURN SQL_API <sqlucode.h>
SQLGetData(SQLHSTMT StatementHandle,SQLUSMALLINT ColumnNumber,SQLSMALLINT TargetType,SQLPOINTER TargetValue,SQLLEN BufferLength,SQLLEN * StrLen_or_Ind) SQLRETURN SQL_API <sql.h>
SQLGetDescField(SQLHDESC DescriptorHandle,SQLSMALLINT RecNumber,SQLSMALLINT FieldIdentifier,SQLPOINTER Value,SQLINTEGER BufferLength,SQLINTEGER * StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescField(SQLHDESC hdesc,SQLSMALLINT iRecord,SQLSMALLINT iField,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescFieldA(SQLHDESC hdesc,SQLSMALLINT iRecord,SQLSMALLINT iField,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescFieldW(SQLHDESC hdesc,SQLSMALLINT iRecord,SQLSMALLINT iField,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescRec(SQLHDESC DescriptorHandle,SQLSMALLINT RecNumber,SQLCHAR * Name,SQLSMALLINT BufferLength,SQLSMALLINT * StringLength,SQLSMALLINT * Type,SQLSMALLINT * SubType,SQLLEN * Length,SQLSMALLINT * Precision,SQLSMALLINT * Scale,SQLSMALLINT * Nullable) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescRec(SQLHDESC hdesc,SQLSMALLINT iRecord,SQLCHAR * szName,SQLSMALLINT cbNameMax,SQLSMALLINT * pcbName,SQLSMALLINT * pfType,SQLSMALLINT * pfSubType,SQLINTEGER * pLength,SQLSMALLINT * pPrecision,SQLSMALLINT * pScale,SQLSMALLINT * pNullable) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescRecA(SQLHDESC hdesc,SQLSMALLINT iRecord,SQLCHAR * szName,SQLSMALLINT cbNameMax,SQLSMALLINT * pcbName,SQLSMALLINT * pfType,SQLSMALLINT * pfSubType,SQLINTEGER * pLength,SQLSMALLINT * pPrecision,SQLSMALLINT * pScale,SQLSMALLINT * pNullable) SQLRETURN SQL_API <sqlucode.h>
SQLGetDescRecW(SQLHDESC hdesc,SQLSMALLINT iRecord,SQLWCHAR * szName,SQLSMALLINT cbNameMax,SQLSMALLINT * pcbName,SQLSMALLINT * pfType,SQLSMALLINT * pfSubType,SQLLEN * pLength,SQLSMALLINT * pPrecision,SQLSMALLINT * pScale,SQLSMALLINT * pNullable) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagField(SQLSMALLINT fHandleType,SQLHANDLE handle,SQLSMALLINT iRecord,SQLSMALLINT fDiagField,SQLPOINTER rgbDiagInfo,SQLSMALLINT cbDiagInfoMax,SQLSMALLINT * pcbDiagInfo) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagField(SQLSMALLINT HandleType,SQLHANDLE Handle,SQLSMALLINT RecNumber,SQLSMALLINT DiagIdentifier,SQLPOINTER DiagInfo,SQLSMALLINT BufferLength,SQLSMALLINT * StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagFieldA(SQLSMALLINT fHandleType,SQLHANDLE handle,SQLSMALLINT iRecord,SQLSMALLINT fDiagField,SQLPOINTER rgbDiagInfo,SQLSMALLINT cbDiagInfoMax,SQLSMALLINT * pcbDiagInfo) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagFieldW(SQLSMALLINT fHandleType,SQLHANDLE handle,SQLSMALLINT iRecord,SQLSMALLINT fDiagField,SQLPOINTER rgbDiagInfo,SQLSMALLINT cbDiagInfoMax,SQLSMALLINT * pcbDiagInfo) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagRec(SQLSMALLINT fHandleType,SQLHANDLE handle,SQLSMALLINT iRecord,SQLCHAR * szSqlState,SQLINTEGER * pfNativeError,SQLCHAR * szErrorMsg,SQLSMALLINT cbErrorMsgMax,SQLSMALLINT * pcbErrorMsg) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagRec(SQLSMALLINT HandleType,SQLHANDLE Handle,SQLSMALLINT RecNumber,SQLCHAR * Sqlstate,SQLINTEGER * NativeError,SQLCHAR * MessageText,SQLSMALLINT BufferLength,SQLSMALLINT * TextLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagRecA(SQLSMALLINT fHandleType,SQLHANDLE handle,SQLSMALLINT iRecord,SQLCHAR * szSqlState,SQLINTEGER * pfNativeError,SQLCHAR * szErrorMsg,SQLSMALLINT cbErrorMsgMax,SQLSMALLINT * pcbErrorMsg) SQLRETURN SQL_API <sqlucode.h>
SQLGetDiagRecW(SQLSMALLINT fHandleType,SQLHANDLE handle,SQLSMALLINT iRecord,SQLWCHAR * szSqlState,SQLINTEGER * pfNativeError,SQLWCHAR * szErrorMsg,SQLSMALLINT cbErrorMsgMax,SQLSMALLINT * pcbErrorMsg) SQLRETURN SQL_API <sqlucode.h>
SQLGetEnvAttr(SQLHENV EnvironmentHandle,SQLINTEGER Attribute,SQLPOINTER Value,SQLINTEGER BufferLength,SQLINTEGER * StringLength) SQLRETURN SQL_API <sql.h>
SQLGetFunctions(SQLHDBC ConnectionHandle,SQLUSMALLINT FunctionId,SQLUSMALLINT * Supported) SQLRETURN SQL_API <sql.h>
SQLGetInfo(SQLHDBC ConnectionHandle,SQLUSMALLINT InfoType,SQLPOINTER InfoValue,SQLSMALLINT BufferLength,SQLSMALLINT * StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetInfo(SQLHDBC hdbc,SQLUSMALLINT fInfoType,SQLPOINTER rgbInfoValue,SQLSMALLINT cbInfoValueMax,SQLSMALLINT * pcbInfoValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetInfoA(SQLHDBC hdbc,SQLUSMALLINT fInfoType,SQLPOINTER rgbInfoValue,SQLSMALLINT cbInfoValueMax,SQLSMALLINT * pcbInfoValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetInfoW(SQLHDBC hdbc,SQLUSMALLINT fInfoType,SQLPOINTER rgbInfoValue,SQLSMALLINT cbInfoValueMax,SQLSMALLINT * pcbInfoValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetInstalledDrivers(LPSTR lpszBuf,WORD cbBufMax,WORD * pcbBufOut) WINBOOL WINAPI <odbcinst.h>
SQLGetInstalledDriversW(LPWSTR lpszBuf,WORD cbBufMax,WORD * pcbBufOut) WINBOOL WINAPI <odbcinst.h>
SQLGetNextEnumeration(HANDLE hEnumHandle,BYTE * prgEnumData,INT * piEnumLength) RETCODE SQL_API <odbcss.h>
SQLGetPrivateProfileString(LPCSTR lpszSection,LPCSTR lpszEntry,LPCSTR lpszDefault,LPSTR lpszRetBuffer,int cbRetBuffer,LPCSTR lpszFilename) int WINAPI <odbcinst.h>
SQLGetPrivateProfileStringW(LPCWSTR lpszSection,LPCWSTR lpszEntry,LPCWSTR lpszDefault,LPWSTR lpszRetBuffer,int cbRetBuffer,LPCWSTR lpszFilename) int WINAPI <odbcinst.h>
SQLGetStmtAttr(SQLHSTMT hstmt,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetStmtAttr(SQLHSTMT StatementHandle,SQLINTEGER Attribute,SQLPOINTER Value,SQLINTEGER BufferLength,SQLINTEGER * StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLGetStmtAttrA(SQLHSTMT hstmt,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetStmtAttrW(SQLHSTMT hstmt,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax,SQLINTEGER * pcbValue) SQLRETURN SQL_API <sqlucode.h>
SQLGetStmtOption(SQLHSTMT hstmt,SQLUSMALLINT fOption,SQLPOINTER pvParam) SQLRETURN SQL_API <sql.h>
SQLGetStmtOption(SQLHSTMT StatementHandle,SQLUSMALLINT Option,SQLPOINTER Value) SQLRETURN SQL_API <sql.h>
SQLGetStmtOptionA(SQLHSTMT hstmt,SQLUSMALLINT fOption,SQLPOINTER pvParam) SQLRETURN SQL_API <sqlucode.h>
SQLGetTranslator(HWND hwnd,LPSTR lpszName,WORD cbNameMax,WORD * pcbNameOut,LPSTR lpszPath,WORD cbPathMax,WORD * pcbPathOut,DWORD * pvOption) WINBOOL WINAPI <odbcinst.h>
SQLGetTranslatorW(HWND hwnd,LPWSTR lpszName,WORD cbNameMax,WORD * pcbNameOut,LPWSTR lpszPath,WORD cbPathMax,WORD * pcbPathOut,DWORD * pvOption) WINBOOL WINAPI <odbcinst.h>
SQLGetTypeInfo(SQLHSTMT StatementHandle,SQLSMALLINT DataTyoe) SQLRETURN SQL_API <sqlucode.h>
SQLGetTypeInfo(SQLHSTMT StatementHandle,SQLSMALLINT DataType) SQLRETURN SQL_API <sqlucode.h>
SQLGetTypeInfoA(SQLHSTMT StatementHandle,SQLSMALLINT DataTyoe) SQLRETURN SQL_API <sqlucode.h>
SQLGetTypeInfoW(SQLHSTMT StatementHandle,SQLSMALLINT DataType) SQLRETURN SQL_API <sqlucode.h>
SQLInitEnumServers(WCHAR * pwchServerName,WCHAR * pwchInstanceName) HANDLE SQL_API <odbcss.h>
SQLInstallDriver(LPCSTR lpszInfFile,LPCSTR lpszDriver,LPSTR lpszPath,WORD cbPathMax,WORD * pcbPathOut) WINBOOL WINAPI <odbcinst.h>
SQLInstallDriverEx(LPCSTR lpszDriver,LPCSTR lpszPathIn,LPSTR lpszPathOut,WORD cbPathOutMax,WORD * pcbPathOut,WORD fRequest,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLInstallDriverExW(LPCWSTR lpszDriver,LPCWSTR lpszPathIn,LPWSTR lpszPathOut,WORD cbPathOutMax,WORD * pcbPathOut,WORD fRequest,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLInstallDriverManager(LPSTR lpszPath,WORD cbPathMax,WORD * pcbPathOut) WINBOOL WINAPI <odbcinst.h>
SQLInstallDriverManagerW(LPWSTR lpszPath,WORD cbPathMax,WORD * pcbPathOut) WINBOOL WINAPI <odbcinst.h>
SQLInstallDriverW(LPCWSTR lpszInfFile,LPCWSTR lpszDriver,LPWSTR lpszPath,WORD cbPathMax,WORD * pcbPathOut) WINBOOL WINAPI <odbcinst.h>
SQLInstallerError(WORD iError,DWORD * pfErrorCode,LPSTR lpszErrorMsg,WORD cbErrorMsgMax,WORD * pcbErrorMsg) SQLRETURN WINAPI <odbcinst.h>
SQLInstallerErrorW(WORD iError,DWORD * pfErrorCode,LPWSTR lpszErrorMsg,WORD cbErrorMsgMax,WORD * pcbErrorMsg) SQLRETURN WINAPI <odbcinst.h>
SQLInstallODBC(HWND hwndParent,LPCSTR lpszInfFile,LPCSTR lpszSrcPath,LPCSTR lpszDrivers) WINBOOL WINAPI <odbcinst.h>
SQLInstallODBCW(HWND hwndParent,LPCWSTR lpszInfFile,LPCWSTR lpszSrcPath,LPCWSTR lpszDrivers) WINBOOL WINAPI <odbcinst.h>
SQLInstallTranslator(LPCSTR lpszInfFile,LPCSTR lpszTranslator,LPCSTR lpszPathIn,LPSTR lpszPathOut,WORD cbPathOutMax,WORD * pcbPathOut,WORD fRequest,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLInstallTranslatorEx(LPCSTR lpszTranslator,LPCSTR lpszPathIn,LPSTR lpszPathOut,WORD cbPathOutMax,WORD * pcbPathOut,WORD fRequest,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLInstallTranslatorExW(LPCWSTR lpszTranslator,LPCWSTR lpszPathIn,LPWSTR lpszPathOut,WORD cbPathOutMax,WORD * pcbPathOut,WORD fRequest,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLInstallTranslatorW(LPCWSTR lpszInfFile,LPCWSTR lpszTranslator,LPCWSTR lpszPathIn,LPWSTR lpszPathOut,WORD cbPathOutMax,WORD * pcbPathOut,WORD fRequest,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLLinkedCatalogs(SQLHSTMT,LPCSTR,SWORD) SQLRETURN SQL_API <odbcss.h>
SQLLinkedCatalogsA(SQLHSTMT,LPCSTR,SWORD) SQLRETURN SQL_API <odbcss.h>
SQLLinkedCatalogsW(SQLHSTMT,LPCWSTR,SWORD) SQLRETURN SQL_API <odbcss.h>
SQLLinkedServers(SQLHSTMT) SQLRETURN SQL_API <odbcss.h>
SQLManageDataSources(HWND hwndParent) WINBOOL WINAPI <odbcinst.h>
SQLMoreResults(SQLHSTMT hstmt) SQLRETURN SQL_API <sqlext.h>
SQLNativeSql(SQLHDBC hdbc,SQLCHAR * szSqlStrIn,SQLINTEGER cbSqlStrIn,SQLCHAR * szSqlStr,SQLINTEGER cbSqlStrMax,SQLINTEGER * pcbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLNativeSqlA(SQLHDBC hdbc,SQLCHAR * szSqlStrIn,SQLINTEGER cbSqlStrIn,SQLCHAR * szSqlStr,SQLINTEGER cbSqlStrMax,SQLINTEGER * pcbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLNativeSqlW(SQLHDBC hdbc,SQLWCHAR * szSqlStrIn,SQLINTEGER cbSqlStrIn,SQLWCHAR * szSqlStr,SQLINTEGER cbSqlStrMax,SQLINTEGER * pcbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLNumParams(SQLHSTMT hstmt,SQLSMALLINT * pcpar) SQLRETURN SQL_API <sqlext.h>
SQLNumResultCols(SQLHSTMT StatementHandle,SQLSMALLINT * ColumnCount) SQLRETURN SQL_API <sql.h>
SQLParamData(SQLHSTMT StatementHandle,SQLPOINTER * Value) SQLRETURN SQL_API <sql.h>
SQLParamOptions(SQLHSTMT hstmt,SQLULEN crow,SQLULEN * pirow) SQLRETURN SQL_API <sqlext.h>
SQLPostInstallerError(DWORD dwErrorCode,LPCSTR lpszErrMsg) SQLRETURN WINAPI <odbcinst.h>
SQLPostInstallerErrorW(DWORD dwErrorCode,LPCWSTR lpszErrorMsg) SQLRETURN WINAPI <odbcinst.h>
SQLPrepare(SQLHSTMT hstmt,SQLCHAR * szSqlStr,SQLINTEGER cbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLPrepare(SQLHSTMT StatementHandle,SQLCHAR * StatementText,SQLINTEGER TextLength) SQLRETURN SQL_API <sqlucode.h>
SQLPrepareA(SQLHSTMT hstmt,SQLCHAR * szSqlStr,SQLINTEGER cbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLPrepareW(SQLHSTMT hstmt,SQLWCHAR * szSqlStr,SQLINTEGER cbSqlStr) SQLRETURN SQL_API <sqlucode.h>
SQLPrimaryKeys(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName) SQLRETURN SQL_API <sqlucode.h>
SQLPrimaryKeysA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName) SQLRETURN SQL_API <sqlucode.h>
SQLPrimaryKeysW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName) SQLRETURN SQL_API <sqlucode.h>
SQLProcedureColumns(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szProcName,SQLSMALLINT cbProcName,SQLCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLProcedureColumnsA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szProcName,SQLSMALLINT cbProcName,SQLCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLProcedureColumnsW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szProcName,SQLSMALLINT cbProcName,SQLWCHAR * szColumnName,SQLSMALLINT cbColumnName) SQLRETURN SQL_API <sqlucode.h>
SQLProcedures(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szProcName,SQLSMALLINT cbProcName) SQLRETURN SQL_API <sqlucode.h>
SQLProceduresA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szProcName,SQLSMALLINT cbProcName) SQLRETURN SQL_API <sqlucode.h>
SQLProceduresW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szProcName,SQLSMALLINT cbProcName) SQLRETURN SQL_API <sqlucode.h>
SQLPutData(SQLHSTMT StatementHandle,SQLPOINTER Data,SQLLEN StrLen_or_Ind) SQLRETURN SQL_API <sql.h>
SQLReadFileDSN(LPCSTR lpszFileName,LPCSTR lpszAppName,LPCSTR lpszKeyName,LPSTR lpszString,WORD cbString,WORD * pcbString) WINBOOL WINAPI <odbcinst.h>
SQLReadFileDSNW(LPCWSTR lpszFileName,LPCWSTR lpszAppName,LPCWSTR lpszKeyName,LPWSTR lpszString,WORD cbString,WORD * pcbString) WINBOOL WINAPI <odbcinst.h>
SQLRemoveDefaultDataSource(void) WINBOOL WINAPI <odbcinst.h>
SQLRemoveDriver(LPCSTR lpszDriver,WINBOOL fRemoveDSN,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLRemoveDriverManager(LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLRemoveDriverW(LPCWSTR lpszDriver,WINBOOL fRemoveDSN,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLRemoveDSNFromIni(LPCSTR lpszDSN) WINBOOL WINAPI <odbcinst.h>
SQLRemoveDSNFromIniW(LPCWSTR lpszDSN) WINBOOL WINAPI <odbcinst.h>
SQLRemoveTranslator(LPCSTR lpszTranslator,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLRemoveTranslatorW(LPCWSTR lpszTranslator,LPDWORD lpdwUsageCount) WINBOOL WINAPI <odbcinst.h>
SQLRowCount(SQLHSTMT StatementHandle,SQLLEN * RowCount) SQLRETURN SQL_API <sql.h>
SQLSetConfigMode(UWORD wConfigMode) WINBOOL WINAPI <odbcinst.h>
SQLSetConnectAttr(SQLHDBC ConnectionHandle,SQLINTEGER Attribute,SQLPOINTER Value,SQLINTEGER StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectAttr(SQLHDBC hdbc,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValue) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectAttrA(SQLHDBC hdbc,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValue) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectAttrW(SQLHDBC hdbc,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValue) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectOption(SQLHDBC ConnectionHandle,SQLUSMALLINT Option,SQLULEN Value) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectOption(SQLHDBC hdbc,SQLUSMALLINT fOption,SQLULEN vParam) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectOptionA(SQLHDBC hdbc,SQLUSMALLINT fOption,SQLULEN vParam) SQLRETURN SQL_API <sqlucode.h>
SQLSetConnectOptionW(SQLHDBC hdbc,SQLUSMALLINT fOption,SQLULEN vParam) SQLRETURN SQL_API <sqlucode.h>
SQLSetCursorName(SQLHSTMT hstmt,SQLCHAR * szCursor,SQLSMALLINT cbCursor) SQLRETURN SQL_API <sqlucode.h>
SQLSetCursorName(SQLHSTMT StatementHandle,SQLCHAR * CursorName,SQLSMALLINT NameLength) SQLRETURN SQL_API <sqlucode.h>
SQLSetCursorNameA(SQLHSTMT hstmt,SQLCHAR * szCursor,SQLSMALLINT cbCursor) SQLRETURN SQL_API <sqlucode.h>
SQLSetCursorNameW(SQLHSTMT hstmt,SQLWCHAR * szCursor,SQLSMALLINT cbCursor) SQLRETURN SQL_API <sqlucode.h>
SQLSetDescField(SQLHDESC DescriptorHandle,SQLSMALLINT RecNumber,SQLSMALLINT FieldIdentifier,SQLPOINTER Value,SQLINTEGER BufferLength) SQLRETURN SQL_API <sqlucode.h>
SQLSetDescFieldW(SQLHDESC DescriptorHandle,SQLSMALLINT RecNumber,SQLSMALLINT FieldIdentifier,SQLPOINTER Value,SQLINTEGER BufferLength) SQLRETURN SQL_API <sqlucode.h>
SQLSetDescRec(SQLHDESC DescriptorHandle,SQLSMALLINT RecNumber,SQLSMALLINT Type,SQLSMALLINT SubType,SQLLEN Length,SQLSMALLINT Precision,SQLSMALLINT Scale,SQLPOINTER Data,SQLLEN * StringLength,SQLLEN * Indicator) SQLRETURN SQL_API <sql.h>
SQLSetEnvAttr(SQLHENV EnvironmentHandle,SQLINTEGER Attribute,SQLPOINTER Value,SQLINTEGER StringLength) SQLRETURN SQL_API <sql.h>
SQLSetParam(SQLHSTMT StatementHandle,SQLUSMALLINT ParameterNumber,SQLSMALLINT ValueType,SQLSMALLINT ParameterType,SQLULEN LengthPrecision,SQLSMALLINT ParameterScale,SQLPOINTER ParameterValue,SQLLEN * StrLen_or_Ind) SQLRETURN SQL_API <sql.h>
SQLSetPos(SQLHSTMT hstmt,SQLSETPOSIROW irow,SQLUSMALLINT fOption,SQLUSMALLINT fLock) SQLRETURN SQL_API <sqlext.h>
SQLSetScrollOptions(SQLHSTMT hstmt,SQLUSMALLINT fConcurrency,SQLLEN crowKeyset,SQLUSMALLINT crowRowset) SQLRETURN SQL_API <sqlext.h>
SQLSetStmtAttr(SQLHSTMT StatementHandle,SQLINTEGER Attribute,SQLPOINTER Value,SQLINTEGER StringLength) SQLRETURN SQL_API <sqlucode.h>
SQLSetStmtAttrW(SQLHSTMT hstmt,SQLINTEGER fAttribute,SQLPOINTER rgbValue,SQLINTEGER cbValueMax) SQLRETURN SQL_API <sqlucode.h>
SQLSetStmtOption(SQLHSTMT hstmt,SQLUSMALLINT fOption,SQLULEN vParam) SQLRETURN SQL_API <sql.h>
SQLSetStmtOption(SQLHSTMT StatementHandle,SQLUSMALLINT Option,SQLULEN Value) SQLRETURN SQL_API <sql.h>
SQLSetStmtOptionA(SQLHSTMT hstmt,SQLUSMALLINT fOption,SQLULEN vParam) SQLRETURN SQL_API <sqlucode.h>
SQLSpecialColumns(SQLHSTMT hstmt,SQLUSMALLINT fColType,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLUSMALLINT fScope,SQLUSMALLINT fNullable) SQLRETURN SQL_API <sqlucode.h>
SQLSpecialColumns(SQLHSTMT StatementHandle,SQLUSMALLINT IdentifierType,SQLCHAR * CatalogName,SQLSMALLINT NameLength1,SQLCHAR * SchemaName,SQLSMALLINT NameLength2,SQLCHAR * TableName,SQLSMALLINT NameLength3,SQLUSMALLINT Scope,SQLUSMALLINT Nullable) SQLRETURN SQL_API <sqlucode.h>
SQLSpecialColumnsA(SQLHSTMT hstmt,SQLUSMALLINT fColType,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLUSMALLINT fScope,SQLUSMALLINT fNullable) SQLRETURN SQL_API <sqlucode.h>
SQLSpecialColumnsW(SQLHSTMT hstmt,SQLUSMALLINT fColType,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName,SQLUSMALLINT fScope,SQLUSMALLINT fNullable) SQLRETURN SQL_API <sqlucode.h>
SQLStatistics(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLUSMALLINT fUnique,SQLUSMALLINT fAccuracy) SQLRETURN SQL_API <sqlucode.h>
SQLStatistics(SQLHSTMT StatementHandle,SQLCHAR * CatalogName,SQLSMALLINT NameLength1,SQLCHAR * SchemaName,SQLSMALLINT NameLength2,SQLCHAR * TableName,SQLSMALLINT NameLength3,SQLUSMALLINT Unique,SQLUSMALLINT Reserved) SQLRETURN SQL_API <sqlucode.h>
SQLStatisticsA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLUSMALLINT fUnique,SQLUSMALLINT fAccuracy) SQLRETURN SQL_API <sqlucode.h>
SQLStatisticsW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName,SQLUSMALLINT fUnique,SQLUSMALLINT fAccuracy) SQLRETURN SQL_API <sqlucode.h>
SQLTablePrivileges(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName) SQLRETURN SQL_API <sqlucode.h>
SQLTablePrivilegesA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName) SQLRETURN SQL_API <sqlucode.h>
SQLTablePrivilegesW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName) SQLRETURN SQL_API <sqlucode.h>
SQLTables(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLCHAR * szTableType,SQLSMALLINT cbTableType) SQLRETURN SQL_API <sqlucode.h>
SQLTables(SQLHSTMT StatementHandle,SQLCHAR * CatalogName,SQLSMALLINT NameLength1,SQLCHAR * SchemaName,SQLSMALLINT NameLength2,SQLCHAR * TableName,SQLSMALLINT NameLength3,SQLCHAR * TableType,SQLSMALLINT NameLength4) SQLRETURN SQL_API <sqlucode.h>
SQLTablesA(SQLHSTMT hstmt,SQLCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLCHAR * szTableName,SQLSMALLINT cbTableName,SQLCHAR * szTableType,SQLSMALLINT cbTableType) SQLRETURN SQL_API <sqlucode.h>
SQLTablesW(SQLHSTMT hstmt,SQLWCHAR * szCatalogName,SQLSMALLINT cbCatalogName,SQLWCHAR * szSchemaName,SQLSMALLINT cbSchemaName,SQLWCHAR * szTableName,SQLSMALLINT cbTableName,SQLWCHAR * szTableType,SQLSMALLINT cbTableType) SQLRETURN SQL_API <sqlucode.h>
SQLTransact(SQLHENV EnvironmentHandle,SQLHDBC ConnectionHandle,SQLUSMALLINT CompletionType) SQLRETURN SQL_API <sql.h>
SqlUmsFIsPremptive() virtual WINBOOL WINAPI <sqloledb.h>
SqlUmsSuspend(ULONG ticks) virtual VOID WINAPI <sqloledb.h>
SqlUmsSwitchNonPremptive() virtual VOID WINAPI <sqloledb.h>
SqlUmsSwitchPremptive() virtual VOID WINAPI <sqloledb.h>
SqlUmsYield(ULONG ticks) virtual VOID WINAPI <sqloledb.h>
SQLValidDSN(LPCSTR lpszDSN) WINBOOL WINAPI <odbcinst.h>
SQLValidDSNW(LPCWSTR lpszDSN) WINBOOL WINAPI <odbcinst.h>
SQLWriteDSNToIni(LPCSTR lpszDSN,LPCSTR lpszDriver) WINBOOL WINAPI <odbcinst.h>
SQLWriteDSNToIniW(LPCWSTR lpszDSN,LPCWSTR lpszDriver) WINBOOL WINAPI <odbcinst.h>
SQLWriteFileDSN(LPCSTR lpszFileName,LPCSTR lpszAppName,LPCSTR lpszKeyName,LPCSTR lpszString) WINBOOL WINAPI <odbcinst.h>
SQLWriteFileDSNW(LPCWSTR lpszFileName,LPCWSTR lpszAppName,LPCWSTR lpszKeyName,LPCWSTR lpszString) WINBOOL WINAPI <odbcinst.h>
SQLWritePrivateProfileString(LPCSTR lpszSection,LPCSTR lpszEntry,LPCSTR lpszString,LPCSTR lpszFilename) WINBOOL WINAPI <odbcinst.h>
SQLWritePrivateProfileStringW(LPCWSTR lpszSection,LPCWSTR lpszEntry,LPCWSTR lpszString,LPCWSTR lpszFilename) WINBOOL WINAPI <odbcinst.h>
SquareMagnitude(const _D3DVECTOR & v)inline D3DVALUE <d3dtypes.h>
SRB_STATUS(Status)<srb.h>
SRRemoveRestorePoint(DWORD dwRPNum) DWORD __stdcall <srrestoreptapi.h>
SRSetRestorePoint(PRESTOREPOINTINFOA pRestorePtSpec,PSTATEMGRSTATUS pSMgrStatus) WINBOOL __stdcall <srrestoreptapi.h>
SRSetRestorePointA(PRESTOREPOINTINFOA pRestorePtSpec,PSTATEMGRSTATUS pSMgrStatus) WINBOOL __stdcall <srrestoreptapi.h>
SRSetRestorePointW(PRESTOREPOINTINFOW pRestorePtSpec,PSTATEMGRSTATUS pSMgrStatus) WINBOOL __stdcall <srrestoreptapi.h>
SRV_GETSERVER(a)<srv.h>
SRV_GOT_ATTENTION(a)<srv.h>
SRV_TDSVERSION(a)<srv.h>
SS_PORT(ssp)<ws2tcpip.h>
SSL_CRACK_CERTIFICATE_FN(PUCHAR pbCertificate,DWORD cbCertificate,WINBOOL VerifySignature,PX509Certificate * ppCertificate)typedef WINBOOL<schannel.h>
SSL_EMPTY_CACHE_FN_A(LPSTR pszTargetName,DWORD dwFlags)typedef WINBOOL<schannel.h>
SSL_EMPTY_CACHE_FN_W(LPWSTR pszTargetName,DWORD dwFlags)typedef WINBOOL<schannel.h>
SSL_FREE_CERTIFICATE_FN(PX509Certificate pCertificate)typedef VOID<schannel.h>
SslCrackCertificate(PUCHAR pbCertificate,DWORD cbCertificate,DWORD dwFlags,PX509Certificate * ppCertificate)WINBOOL <schannel.h>
SslEmptyCache(LPSTR pszTargetName,DWORD dwFlags)WINBOOL <schannel.h>
SslEmptyCacheA(LPSTR pszTargetName,DWORD dwFlags)WINBOOL <schannel.h>
SslEmptyCacheW(LPWSTR pszTargetName,DWORD dwFlags)WINBOOL <schannel.h>
SslFreeCertificate(PX509Certificate pCertificate)VOID <schannel.h>
SslGenerateKeyPair(PSSL_CREDENTIAL_CERTIFICATE pCerts,PSTR pszDN,PSTR pszPassword,DWORD Bits)WINBOOL <schannel.h>
SslGenerateRandomBits(PUCHAR pRandomData,LONG cRandomData)VOID <schannel.h>
SslGetDefaultIssuers(PBYTE pbIssuers,DWORD * pcbIssuers)WINBOOL <schannel.h>
SslGetMaximumKeySize(DWORD Reserved)DWORD WINAPI <schannel.h>
StackWalk(DWORD MachineType,HANDLE hProcess,HANDLE hThread,LPSTACKFRAME StackFrame,PVOID ContextRecord,PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,PTRANSLATE_ADDRESS_ROUTINE TranslateAddress) WINBOOL IMAGEAPI <psdk>
StackWalk64(DWORD MachineType,HANDLE hProcess,HANDLE hThread,LPSTACKFRAME64 StackFrame,PVOID ContextRecord,PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine,PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine,PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine,PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress) WINBOOL IMAGEAPI <psdk>
Start() HRESULT <winioctl.h>
Start(char * pFileName)virtual HRESULT WINAPI <winioctl.h>
Start(const CHAR * szFile) DWORD <winioctl.h>
Start(DWORD dwTimeoutMsecs)virtual HRESULT WINAPI <winioctl.h>
Start(void)virtual HRESULT WINAPI <winioctl.h>
StartAltPhrase(void)virtual HRESULT WINAPI <indexsrv.h>
StartChain(IBaseFilter * pStartFilter,IBaseFilter * pEndFilter)virtual HRESULT WINAPI <strmif.h>
StartDocPrinter(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo) DWORD WINAPI <winspool.h>
StartDocPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo) DWORD WINAPI <winspool.h>
StartDocPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo) DWORD WINAPI <winspool.h>
StartDocW(HDC hdc,CONST DOCINFOW * lpdi) WINGDIAPI int WINAPI <wingdi.h>
StartDTC(LPSTR szHostName) HRESULT __cdecl <dtchelp.h>
StartDTCA(LPSTR szHostName) HRESULT __cdecl <dtchelp.h>
StartDTCW(WCHAR * wszHostName) HRESULT __cdecl <dtchelp.h>
StartFigure()	Status <gdipluspath.h>
StartInking(HPCM,UINT,LPINKINGINFO) int WINAPI <penwin.h>
StartListenAddressAndPort(BSTR bstrInternalLocalAddress,__LONG32 lInternalLocalPort)virtual HRESULT WINAPI <rtccore.h>
StartNewConnectionWizard(HWND hwndParent,INetConnection ** ppCon)virtual HRESULT WINAPI <netcon.h>
StartOf(__LONG32 Unit,__LONG32 Extend,__LONG32 * pDelta)virtual HRESULT WINAPI <tom.h>
StartOLE(VOID) WINBOOL <_dbdao.h>
StartPage(HDC hdc) WINGDIAPI int WINAPI <wingdi.h>
StartPagePrinter(HANDLE hPrinter) WINBOOL WINAPI <winspool.h>
StartPenInput(HWND,UINT,LPPCMINFO,LPINT) HPCM WINAPI <penwin.h>
StartPresenting(DWORD_PTR dwUserID)virtual HRESULT WINAPI <strmif.h>
StartRinger(__LONG32 lRingMode,__LONG32 lDuration)virtual HRESULT WINAPI <tapi3if.h>
StartScreenSaver(BSTR bstrUserName)virtual HRESULT WINAPI <sensevts.h>
StartService(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR * lpServiceArgVectors) WINADVAPI WINBOOL WINAPI <winsvc.h>
StartService(void)virtual HRESULT WINAPI <winsvc.h>
StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR * lpServiceArgVectors) WINADVAPI WINBOOL WINAPI <winsvc.h>
StartServiceCtrlDispatcher(CONST SERVICE_TABLE_ENTRYA * lpServiceStartTable) WINADVAPI WINBOOL WINAPI <winsvc.h>
StartServiceCtrlDispatcherA(CONST SERVICE_TABLE_ENTRYA * lpServiceStartTable) WINADVAPI WINBOOL WINAPI <winsvc.h>
StartServiceCtrlDispatcherW(CONST SERVICE_TABLE_ENTRYW * lpServiceStartTable) WINADVAPI WINBOOL WINAPI <winsvc.h>
StartServiceW(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCWSTR * lpServiceArgVectors) WINADVAPI WINBOOL WINAPI <winsvc.h>
StartShell(BSTR bstrUserName)virtual HRESULT WINAPI <sensevts.h>
StartStream(void)virtual HRESULT WINAPI <tapi3if.h>
StartSubStream(void)virtual HRESULT WINAPI <tapi3if.h>
StartT120Applet(RTC_T120_APPLET enApplet)virtual HRESULT WINAPI <rtccore.h>
StartThreadpoolIo(PTP_IO pio) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
StartTone(PHONE_TONE Tone,__LONG32 lDuration)virtual HRESULT WINAPI <tapi3if.h>
StartTrace(PTRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
StartTraceA(PTRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
StartTraceGuid(BSTR bstrguidEvent,BSTR bstrguidFilter,LONG lPidFilter)virtual HRESULT WINAPI <comsvcs.h>
StartTraceW(PTRACEHANDLE TraceHandle,LPCWSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
StartTransaction(ISOLEVEL isoLevel,ULONG isoFlags,ITransactionOptions * pOtherOptions,ULONG * pulTransactionLevel)virtual HRESULT WINAPI <oledb.h>
Startup(IUnknown * punkProcessControl)virtual HRESULT WINAPI <comsvcs.h>
Startup(void)virtual HRESULT WINAPI <comsvcs.h>
StartXpsPrintJob1(LPCWSTR printerName,LPCWSTR jobName,LPCWSTR outputFileName,HANDLE progressEvent,HANDLE completionEvent,IXpsPrintJob ** xpsPrintJob,IXpsOMPackageTarget ** printContentReceiver)HRESULT WINAPI <xpsprint.h>
Stat(LPSTATSTRUCT pstatstg,LONG grfStatFlag)virtual HRESULT WINAPI <wia.h>
Stat(STATPROPSETSTG * pstatpsstg)virtual HRESULT WINAPI <wia.h>
Static_Enable(hwndCtl,fEnable)<windowsx.h>
Static_GetIcon(hwndCtl,hIcon)<windowsx.h>
Static_GetText(hwndCtl,lpch,cchMax)<windowsx.h>
Static_GetTextLength(hwndCtl)<windowsx.h>
Static_SetIcon(hwndCtl,hIcon)<windowsx.h>
Static_SetText(hwndCtl,lpsz)<windowsx.h>
STATICGUIDOF(guid)<mmreg.h>
Status(__LONG32 lProgressNumerator,__LONG32 lProgressDenominator,HRESULT hrStatus,VARIANT * pResult,IGPMStatusMsgCollection * ppIGPMStatusMsgCollection)virtual HRESULT WINAPI <wsdtypes.h>
Status(DWORD dwBufferSize,unsigned char * pbBuffer,DWORD * pdwMDRequiredBufferSize,DWORD * pdwNumServices)virtual HRESULT WINAPI <wsdtypes.h>
Status(IDispatch ** ppObject)virtual HRESULT WINAPI <wsdtypes.h>
Status(UUID * ObjectUuid,UUID * TypeUuid,RPC_STATUS *) typedef void __RPC_API RPC_OBJECT_INQ_FN<wsdtypes.h>
STATUS_SEVERITY(hr)<mferror.h>
STATUSPROC(DWORD,HCAPTURE,HFILTER,LPVOID) typedef WINBOOL<netmon.h>
STCAll(CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER) | CLSCTX_LOCAL_SERVER)<sapi54.h>
STD_CREATE_BODY(classname, unknown, outer_unknown, pool_type)<stdunk.h>
STD_CREATE_BODY(classname, unknown, outer_unknown, pool_type, base)<stdunk.h>
STD_CREATE_BODY_WITH_TAG(classname, unknown, outer_unknown, pool_type, tag, base)<stdunk.h>
STD_CREATE_BODY_WITH_TAG(classname, unknown, outer_unknown, pool_type, tag, base)<stdunk.h>
STD_CTL_SCODE(n)<olectl.h>
STDAPI(type)	<winnt.h>
STDAPI(type)<winnt.h>
STDAPIV(type)	<winnt.h>
STDAPIV(type)<winnt.h>
STDINITMETHODIMP(type)<wabdefs.h>
STDMETHOD(method)<shlobj.h>
STDMETHOD()()()
STDMETHOD(type, method)<shlobj.h>
STDMETHODIMP(type)<winnt.h>
STDMETHODIMP(type)<winnt.h>
STDMETHODIMPV(type)	 <winnt.h>
STDMETHODIMPV(type)<winnt.h>
STDMETHODV(method)<combaseapi.h>
STDMETHODV()()()
STDMETHODV(type, method)<combaseapi.h>
Step(DWORD dwFrames,IUnknown * pStepObject)virtual HRESULT WINAPI <strmif.h>
StgConvertPropertyToVariant(const SERIALIZEDPROPERTYVALUE * pprop,USHORT CodePage,PROPVARIANT * pvar,PMemoryAllocator * pma)EXTERN_C BOOLEAN __stdcall <propidl.h>
StgConvertVariantToProperty(const PROPVARIANT * pvar,USHORT CodePage,SERIALIZEDPROPERTYVALUE * pprop,ULONG * pcb,PROPID pid,BOOLEAN fReserved,ULONG * pcIndirect)EXTERN_C SERIALIZEDPROPERTYVALUE<propidl.h>
StgCreateDocfile(const WCHAR * pwcsName,DWORD grfMode,DWORD reserved,IStorage ** ppstgOpen)WINOLEAPI <objbase.h>
StgCreateDocfileOnILockBytes(ILockBytes * plkbyt,DWORD grfMode,DWORD reserved,IStorage ** ppstgOpen)WINOLEAPI <objbase.h>
StgCreatePropSetStg(IStorage * pStorage,DWORD dwReserved,IPropertySetStorage ** ppPropSetStg) WINOLEAPI <propidl.h>
StgCreatePropStg(IUnknown * pUnk,REFFMTID fmtid,const CLSID * pclsid,DWORD grfFlags,DWORD dwReserved,IPropertyStorage ** ppPropStg) WINOLEAPI <propidl.h>
StgCreateStorageEx(const WCHAR * pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,STGOPTIONS * pStgOptions,PSECURITY_DESCRIPTOR pSecurityDescriptor,REFIID riid,void ** ppObjectOpen)WINOLEAPI <objbase.h>
StgGetIFillLockBytesOnFile(OLECHAR const * pwcsName,IFillLockBytes ** ppflb)WINOLEAPI <objbase.h>
StgGetIFillLockBytesOnILockBytes(ILockBytes * pilb,IFillLockBytes ** ppflb)WINOLEAPI <objbase.h>
StgIsStorageFile(const WCHAR * pwcsName)WINOLEAPI <objbase.h>
StgIsStorageILockBytes(ILockBytes * plkbyt)WINOLEAPI <objbase.h>
StgMakeUniqueName(IStorage * pstgParent,PCWSTR pszFileSpec,DWORD grfMode,REFIID riid,void ** ppv) STDAPI <shlobj.h>
STGMEDIUM_UserFree(ULONG *,STGMEDIUM *) void __RPC_API <wia.h>
STGMEDIUM_UserMarshal(ULONG *,unsigned char *,STGMEDIUM *) unsigned char<wia.h>
STGMEDIUM_UserSize(ULONG *,ULONG,STGMEDIUM *) ULONG __RPC_API <wia.h>
STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,STGMEDIUM *) unsigned char<wia.h>
StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes * pflb,DWORD grfMode,DWORD asyncFlags,IStorage ** ppstgOpen)WINOLEAPI <objbase.h>
StgOpenLayoutDocfile(OLECHAR const * pwcsDfName,DWORD grfMode,DWORD reserved,IStorage ** ppstgOpen)WINOLEAPI <objbase.h>
StgOpenPropStg(IUnknown * pUnk,REFFMTID fmtid,DWORD grfFlags,DWORD dwReserved,IPropertyStorage ** ppPropStg) WINOLEAPI <propidl.h>
StgOpenStorage(const WCHAR * pwcsName,IStorage * pstgPriority,DWORD grfMode,SNB snbExclude,DWORD reserved,IStorage ** ppstgOpen)WINOLEAPI <objbase.h>
StgOpenStorageEx(const WCHAR * pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,STGOPTIONS * pStgOptions,PSECURITY_DESCRIPTOR pSecurityDescriptor,REFIID riid,void ** ppObjectOpen)WINOLEAPI <objbase.h>
StgOpenStorageOnILockBytes(ILockBytes * plkbyt,IStorage * pstgPriority,DWORD grfMode,SNB snbExclude,DWORD reserved,IStorage ** ppstgOpen)WINOLEAPI <objbase.h>
StgSetTimes(const WCHAR * lpszName,const FILETIME * pctime,const FILETIME * patime,const FILETIME * pmtime)WINOLEAPI <objbase.h>
StiCreateInstance(HINSTANCE hinst,DWORD dwVer,struct IStillImageA ** ppSti,LPUNKNOWN punkOuter) STDMETHODIMP <sti.h>
StiCreateInstanceA(HINSTANCE hinst,DWORD dwVer,struct IStillImageA ** ppSti,LPUNKNOWN punkOuter) STDMETHODIMP <sti.h>
StiCreateInstanceW(HINSTANCE hinst,DWORD dwVer,struct IStillImageW ** ppSti,LPUNKNOWN punkOuter) STDMETHODIMP <sti.h>
StillOff(void)virtual HRESULT WINAPI <strmif.h>
Stop() HRESULT <tapi3if.h>
Stop(__LONG32 dwReqID)virtual HRESULT WINAPI <tapi3if.h>
Stop(DWORD dwTimeoutMsecs,DWORD dwForce)virtual HRESULT WINAPI <tapi3if.h>
Stop(LPSTATISTICS lpStats)virtual HRESULT WINAPI <tapi3if.h>
Stop(VARIANT Request)virtual HRESULT WINAPI <tapi3if.h>
Stop(void)virtual HRESULT WINAPI <tapi3if.h>
StopAll(__LONG32 lTypes)virtual HRESULT WINAPI <agtsvr.h>
StopAll(VARIANT Types)virtual HRESULT WINAPI <agtsvr.h>
StopChain(IBaseFilter * pStartFilter,IBaseFilter * pEndFilter)virtual HRESULT WINAPI <strmif.h>
StopDTC(LPSTR szHostName) HRESULT __cdecl <dtchelp.h>
StopDTCA(LPSTR szHostName) HRESULT __cdecl <dtchelp.h>
StopDTCW(WCHAR * wszHostName) HRESULT __cdecl <dtchelp.h>
StopForResume(void)virtual HRESULT WINAPI <strmif.h>
StopInking(HPCM) int WINAPI <penwin.h>
StopListenAddressAndPort(BSTR bstrInternalLocalAddress,__LONG32 lInternalLocalPort)virtual HRESULT WINAPI <rtccore.h>
StopPenInput(HPCM,UINT,int) int WINAPI <penwin.h>
StopPresenting(DWORD_PTR dwUserID)virtual HRESULT WINAPI <strmif.h>
StopRenderFilter(void)virtual HRESULT WINAPI <termmgr.h>
StopRinger(void)virtual HRESULT WINAPI <tapi3if.h>
StopScreenSaver(BSTR bstrUserName)virtual HRESULT WINAPI <sensevts.h>
StopService(void)virtual HRESULT WINAPI <sdoias.h>
StopStream(void)virtual HRESULT WINAPI <tapi3if.h>
StopSubStream(void)virtual HRESULT WINAPI <tapi3if.h>
StopT120Applets(void)virtual HRESULT WINAPI <rtccore.h>
StopTone(void)virtual HRESULT WINAPI <tapi3if.h>
StopTrace(a, b, c)<evntrace.h>
StopTrace(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
StopTraceA(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
StopTraceGuid(BSTR bstrguidEvent,BSTR bstrguidFilter,LONG lPidFilter)virtual HRESULT WINAPI <comsvcs.h>
StopTraceW(TRACEHANDLE TraceHandle,LPCWSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
StopWatching(void)virtual HRESULT WINAPI <oledbdep.h>
Store(BSTR ProgID,IUnknown * pInterface)virtual HRESULT WINAPI <eventsys.h>
StoreAutoTune(void)virtual HRESULT WINAPI <strmif.h>
StorPortBusy(IN PVOID HwDeviceExtension,IN ULONG RequestsToComplete)<storport.h>
StorPortCompleteRequest(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN UCHAR SrbStatus)<storport.h>
StorPortConvertPhysicalAddressToUlong64(IN STOR_PHYSICAL_ADDRESS Address)<storport.h>
StorPortConvertUlong64ToPhysicalAddress(IN ULONG64 UlongAddress)<storport.h>
StorPortDebugPrint(IN ULONG DebugPrintLevel,IN PCCHAR DebugMessage,IN...)<storport.h>
StorPortDeviceBusy(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN ULONG RequestsToComplete)<storport.h>
StorPortDeviceReady(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun)<storport.h>
StorPortFreeDeviceBase(IN PVOID HwDeviceExtension,IN PVOID MappedAddress)<storport.h>
StorPortGetBusData(IN PVOID DeviceExtension,IN ULONG BusDataType,IN ULONG SystemIoBusNumber,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Length)<storport.h>
StorPortGetDeviceBase(IN PVOID HwDeviceExtension,IN INTERFACE_TYPE BusType,IN ULONG SystemIoBusNumber,IN SCSI_PHYSICAL_ADDRESS IoAddress,IN ULONG NumberOfBytes,IN BOOLEAN InIoSpace)<storport.h>
StorPortGetLogicalUnit(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun)<storport.h>
StorPortGetPhysicalAddress(IN PVOID HwDeviceExtension,IN PSCSI_REQUEST_BLOCK Srb,IN PVOID VirtualAddress,OUT ULONG * Length)<storport.h>
StorPortGetScatterGatherList(IN PVOID DeviceExtension,IN PSCSI_REQUEST_BLOCK Srb)<storport.h>
StorPortGetSrb(IN PVOID DeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN LONG QueueTag)<storport.h>
StorPortGetUncachedExtension(IN PVOID HwDeviceExtension,IN PPORT_CONFIGURATION_INFORMATION ConfigInfo,IN ULONG NumberOfBytes)<storport.h>
StorPortGetVirtualAddress(IN PVOID HwDeviceExtension,IN STOR_PHYSICAL_ADDRESS PhysicalAddress)<storport.h>
StorPortInitialize(IN PVOID Argument1,IN PVOID Argument2,IN PHW_INITIALIZATION_DATA HwInitializationData,IN PVOID Unused)<storport.h>
StorPortLogError(IN PVOID HwDeviceExtension,IN PSCSI_REQUEST_BLOCK Srb OPTIONAL,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN ULONG ErrorCode,IN ULONG UniqueId)<storport.h>
StorPortMoveMemory(IN PVOID WriteBuffer,IN PVOID ReadBuffer,IN ULONG Length)<storport.h>
StorPortNotification(IN SCSI_NOTIFICATION_TYPE NotificationType,IN PVOID HwDeviceExtension,IN...)<storport.h>
StorPortPause(IN PVOID HwDeviceExtension,IN ULONG TimeOut)<storport.h>
StorPortPauseDevice(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun,IN ULONG TimeOut)<storport.h>
StorPortReadPortUchar(IN PUCHAR Port)<storport.h>
StorPortReadPortUlong(IN PULONG Port)<storport.h>
StorPortReadPortUshort(IN PUSHORT Port)<storport.h>
StorPortReadRegisterUchar(IN PUCHAR Register)<storport.h>
StorPortReadRegisterUlong(IN PULONG Register)<storport.h>
StorPortReadRegisterUshort(IN PUSHORT Register)<storport.h>
StorPortReady(IN PVOID HwDeviceExtension)<storport.h>
StorPortResume(IN PVOID HwDeviceExtension)<storport.h>
StorPortResumeDevice(IN PVOID HwDeviceExtension,IN UCHAR PathId,IN UCHAR TargetId,IN UCHAR Lun)<storport.h>
StorPortSetBusDataByOffset(IN PVOID DeviceExtension,IN ULONG BusDataType,IN ULONG SystemIoBusNumber,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Offset,IN ULONG Length)<storport.h>
StorPortStallExecution(IN ULONG Delay)<storport.h>
StorPortSynchronizeAccess(IN PVOID HwDeviceExtension,IN PSTOR_SYNCHRONIZED_ACCESS SynchronizedAccessRoutine,IN PVOID Context)<storport.h>
StorPortValidateRange(IN PVOID HwDeviceExtension,IN INTERFACE_TYPE BusType,IN ULONG SystemIoBusNumber,IN STOR_PHYSICAL_ADDRESS IoAddress,IN ULONG NumberOfBytes,IN BOOLEAN InIoSpace)<storport.h>
StorPortWritePortUchar(IN PUCHAR Port,IN UCHAR Value)<storport.h>
StorPortWritePortUlong(IN PULONG Port,IN ULONG Value)<storport.h>
StorPortWritePortUshort(IN PUSHORT Port,IN USHORT Value)<storport.h>
StorPortWriteRegisterUchar(IN PUCHAR Port,IN UCHAR Value)<storport.h>
StorPortWriteRegisterUlong(IN PULONG Port,IN ULONG Value)<storport.h>
StorPortWriteRegisterUshort(IN PUSHORT Port,IN USHORT Value)<storport.h>
STPTR(rPtr,rS)<kxia64.h>
STPTRINC(rPtr,rS,imm)<kxia64.h>
Str_SetPtrW(LPWSTR * ppsz,LPCWSTR psz)WINCOMMCTRLAPI WINBOOL WINAPI <commctrl.h>
StrCatBuff(LPSTR pszDest,LPCSTR pszSrc,int cchDestBuffSize) LWSTDAPI_<shlwapi.h>
StrCatBuffA(LPSTR pszDest,LPCSTR pszSrc,int cchDestBuffSize) LWSTDAPI_<shlwapi.h>
StrCatBuffW(LPWSTR pszDest,LPCWSTR pszSrc,int cchDestBuffSize) LWSTDAPI_<shlwapi.h>
StrCatChainW(LPWSTR pszDst,DWORD cchDst,DWORD ichAt,LPCWSTR pszSrc) LWSTDAPI_<shlwapi.h>
StrCatW(LPWSTR psz1,LPCWSTR psz2) LWSTDAPI_<strsafe.h>
StrChr(LPCSTR lpStart,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrChrA(LPCSTR lpStart,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrChrI(LPCSTR lpStart,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrChrIA(LPCSTR lpStart,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrChrIW(LPCWSTR lpStart,WCHAR wMatch) LWSTDAPI_<shlwapi.h>
StrChrW(LPCWSTR lpStart,WCHAR wMatch) LWSTDAPI_<shlwapi.h>
StrCmpC(LPCSTR pszStr1,LPCSTR pszStr2) LWSTDAPI_<shlwapi.h>
StrCmpCA(LPCSTR pszStr1,LPCSTR pszStr2) LWSTDAPI_<shlwapi.h>
StrCmpCW(LPCWSTR pszStr1,LPCWSTR pszStr2) LWSTDAPI_<shlwapi.h>
StrCmpIC(LPCSTR pszStr1,LPCSTR pszStr2) LWSTDAPI_<shlwapi.h>
StrCmpICA(LPCSTR pszStr1,LPCSTR pszStr2) LWSTDAPI_<shlwapi.h>
StrCmpICW(LPCWSTR pszStr1,LPCWSTR pszStr2) LWSTDAPI_<shlwapi.h>
StrCmpIW(LPCWSTR psz1,LPCWSTR psz2) LWSTDAPI_<shlwapi.h>
StrCmpLogicalW(LPCWSTR psz1,LPCWSTR psz2) LWSTDAPI_<shlwapi.h>
StrCmpN(LPCSTR lpStr1,LPCSTR lpStr2,int nChar) LWSTDAPI_<shlwapi.h>
StrCmpNA(LPCSTR lpStr1,LPCSTR lpStr2,int nChar) LWSTDAPI_<shlwapi.h>
StrCmpNI(LPCSTR lpStr1,LPCSTR lpStr2,int nChar) LWSTDAPI_<shlwapi.h>
StrCmpNIA(LPCSTR lpStr1,LPCSTR lpStr2,int nChar) LWSTDAPI_<shlwapi.h>
StrCmpNIW(LPCWSTR lpStr1,LPCWSTR lpStr2,int nChar) LWSTDAPI_<shlwapi.h>
StrCmpNW(LPCWSTR lpStr1,LPCWSTR lpStr2,int nChar) LWSTDAPI_<shlwapi.h>
StrCmpW(LPCWSTR psz1,LPCWSTR psz2) LWSTDAPI_<shlwapi.h>
StrCpyNW(LPWSTR psz1,LPCWSTR psz2,int cchMax) LWSTDAPI_<shlwapi.h>
StrCpyW(LPWSTR psz1,LPCWSTR psz2) LWSTDAPI_<strsafe.h>
StrCSpn(LPCSTR lpStr,LPCSTR lpSet) LWSTDAPI_<shlwapi.h>
StrCSpnA(LPCSTR lpStr,LPCSTR lpSet) LWSTDAPI_<shlwapi.h>
StrCSpnI(LPCSTR lpStr,LPCSTR lpSet) LWSTDAPI_<shlwapi.h>
StrCSpnIA(LPCSTR lpStr,LPCSTR lpSet) LWSTDAPI_<shlwapi.h>
StrCSpnIW(LPCWSTR lpStr,LPCWSTR lpSet) LWSTDAPI_<shlwapi.h>
StrCSpnW(LPCWSTR lpStr,LPCWSTR lpSet) LWSTDAPI_<shlwapi.h>
StrDup(LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrDupA(LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrDupW(LPCWSTR lpSrch) LWSTDAPI_<shlwapi.h>
StreamClassAbortOutstandingRequests(IN PVOID HwDeviceExtension,IN PHW_STREAM_OBJECT HwStreamObject,IN NTSTATUS Status)<strmini.h>
StreamClassCallAtNewPriority(IN PHW_STREAM_OBJECT StreamObject,IN PVOID HwDeviceExtension,IN STREAM_PRIORITY Priority,IN PHW_PRIORITY_ROUTINE PriorityRoutine,IN PVOID Context)<strmini.h>
StreamClassCompleteRequestAndMarkQueueReady(IN PHW_STREAM_REQUEST_BLOCK Srb)<strmini.h>
StreamClassDebugAssert(IN PCHAR File,IN ULONG Line,IN PCHAR AssertText,IN ULONG AssertValue)<strmini.h>
StreamClassDebugPrint(IN STREAM_DEBUG_LEVEL DebugPrintLevel,IN PCCHAR DebugMessage,...)<strmini.h>
StreamClassDeviceNotification(IN STREAM_MINIDRIVER_DEVICE_NOTIFICATION_TYPE NotificationType,IN PVOID HwDeviceExtension,IN PHW_STREAM_REQUEST_BLOCK pSrb,IN PKSEVENT_ENTRY EventEntry,IN GUID * EventSet,IN ULONG EventId)<strmini.h>
StreamClassFilterReenumerateStreams(IN PVOID HwInstanceExtension,IN ULONG StreamDescriptorSize)<strmini.h>
StreamClassGetDmaBuffer(IN PVOID HwDeviceExtension)<strmini.h>
StreamClassGetNextEvent(IN PVOID HwInstanceExtension_OR_HwDeviceExtension,IN PHW_STREAM_OBJECT HwStreamObject,IN GUID * EventGuid,IN ULONG EventItem,IN PKSEVENT_ENTRY CurrentEvent)<strmini.h>
StreamClassGetPhysicalAddress(IN PVOID HwDeviceExtension,IN PHW_STREAM_REQUEST_BLOCK HwSRB,IN PVOID VirtualAddress,IN STREAM_BUFFER_TYPE Type,IN ULONG * Length)<strmini.h>
StreamClassQueryMasterClock(IN PHW_STREAM_OBJECT HwStreamObject,IN HANDLE MasterClockHandle,IN TIME_FUNCTION TimeFunction,IN PHW_QUERY_CLOCK_ROUTINE ClockCallbackRoutine)<strmini.h>
StreamClassQueryMasterClockSync(IN HANDLE MasterClockHandle,IN PHW_TIME_CONTEXT TimeContext)<strmini.h>
StreamClassReadWriteConfig(IN PVOID HwDeviceExtension,IN BOOLEAN Read,IN PVOID Buffer,IN ULONG Offset,IN ULONG Length)<strmini.h>
StreamClassReenumerateStreams(IN PVOID HwDeviceExtension,IN ULONG StreamDescriptorSize)<strmini.h>
StreamClassRegisterAdapter(IN PVOID Argument1,IN PVOID Argument2,IN PHW_INITIALIZATION_DATA HwInitializationData)<strmini.h>
StreamClassRegisterFilterWithNoKSPins(IN PDEVICE_OBJECT DeviceObject,IN const GUID * InterfaceClassGUID,IN ULONG PinCount,IN BOOLEAN * PinDirection,IN KSPIN_MEDIUM * MediumList,IN GUID * CategoryList)<strmini.h>
StreamClassScheduleTimer(IN PHW_STREAM_OBJECT StreamObject,IN PVOID HwDeviceExtension,IN ULONG NumberOfMicroseconds,IN PHW_TIMER_ROUTINE TimerRoutine,IN PVOID Context)<strmini.h>
StreamClassStreamNotification(IN STREAM_MINIDRIVER_STREAM_NOTIFICATION_TYPE NotificationType,IN PHW_STREAM_OBJECT StreamObject,IN...)<strmini.h>
StreamFromFOURCC(fcc)<vfw.h>
StretchBlt(HDC hdcDest,int xDest,int yDest,int wDest,int hDest,HDC hdcSrc,int xSrc,int ySrc,int wSrc,int hSrc,DWORD rop) WINGDIAPI WINBOOL WINAPI <wingdi.h>
StretchDIB(LPBITMAPINFOHEADER biDst,LPVOID lpDst,int DstX,int DstY,int DstXE,int DstYE,LPBITMAPINFOHEADER biSrc,LPVOID lpSrc,int SrcX,int SrcY,int SrcXE,int SrcYE) void WINAPI <vfw.h>
StretchDIBits(HDC hdc,int xDest,int yDest,int DestWidth,int DestHeight,int xSrc,int ySrc,int SrcWidth,int SrcHeight,CONST VOID * lpBits,CONST BITMAPINFO * lpbmi,UINT iUsage,DWORD rop) WINGDIAPI int WINAPI <wingdi.h>
StrFormatByteSize(DWORD dw,LPSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatByteSize64(LONGLONG qdw,LPSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatByteSize64A(LONGLONG qdw,LPSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatByteSizeA(DWORD dw,LPSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatByteSizeW(LONGLONG qdw,LPWSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatKBSize(LONGLONG qdw,LPSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatKBSizeA(LONGLONG qdw,LPSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFormatKBSizeW(LONGLONG qdw,LPWSTR szBuf,UINT uiBufSize) LWSTDAPI_<shlwapi.h>
StrFromTimeInterval(LPSTR pszOut,UINT cchMax,DWORD dwTimeMS,int digits) LWSTDAPI_<shlwapi.h>
StrFromTimeIntervalA(LPSTR pszOut,UINT cchMax,DWORD dwTimeMS,int digits) LWSTDAPI_<shlwapi.h>
StrFromTimeIntervalW(LPWSTR pszOut,UINT cchMax,DWORD dwTimeMS,int digits) LWSTDAPI_<shlwapi.h>
STRING_GUID()()()
STRING_GUID(l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)<adoguids.h>
StringCatExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCatExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCatNExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCatNExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCatNWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend)STRSAFEAPI <strsafe.h>
StringCatNWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend)STRSAFEAPI <strsafe.h>
StringCatWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCatWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbCat(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbCatA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbCatEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCatExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCatExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCatN(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToAppend)STRSAFEAPI <strsafe.h>
StringCbCatNA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToAppend)STRSAFEAPI <strsafe.h>
StringCbCatNEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToAppend,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCatNExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToAppend,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCatNExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToAppend,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCatNW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToAppend)STRSAFEAPI <strsafe.h>
StringCbCatW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbCopy(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbCopyA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbCopyEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCopyExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCopyExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCopyN(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToCopy)STRSAFEAPI <strsafe.h>
StringCbCopyNA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToCopy)STRSAFEAPI <strsafe.h>
StringCbCopyNEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToCopy,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCopyNExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToCopy,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCopyNExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToCopy,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCbCopyNW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToCopy)STRSAFEAPI <strsafe.h>
StringCbCopyW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCbGets(STRSAFE_LPSTR pszDest,size_t cbDest)STRSAFE_INLINE_API <strsafe.h>
StringCbGetsA(STRSAFE_LPSTR pszDest,size_t cbDest)STRSAFE_INLINE_API <strsafe.h>
StringCbGetsEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringCbGetsExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringCbGetsExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringCbGetsW(STRSAFE_LPWSTR pszDest,size_t cbDest)STRSAFE_INLINE_API <strsafe.h>
StringCbLength(STRSAFE_LPCSTR psz,size_t cbMax,size_t * pcbLength)STRSAFEAPI <strsafe.h>
StringCbLengthA(STRSAFE_LPCSTR psz,size_t cbMax,size_t * pcbLength)STRSAFEAPI <strsafe.h>
StringCbLengthW(STRSAFE_LPCWSTR psz,size_t cbMax,size_t * pcbLength)STRSAFEAPI <strsafe.h>
StringCbPrintf(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCbPrintfA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCbPrintfEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCbPrintfExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCbPrintfExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCbPrintfW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCbVPrintf(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCbVPrintfA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCbVPrintfEx(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCbVPrintfExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCbVPrintfExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCbVPrintfW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCchCat(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCchCatA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCchCatEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCatExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCatExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCatN(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend)STRSAFEAPI <strsafe.h>
StringCchCatNA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend)STRSAFEAPI <strsafe.h>
StringCchCatNEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCatNExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCatNExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCatNW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend)STRSAFEAPI <strsafe.h>
StringCchCatW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCchCopy(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCchCopyA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCchCopyEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCopyExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCopyExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCopyN(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy)STRSAFEAPI <strsafe.h>
StringCchCopyNA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy)STRSAFEAPI <strsafe.h>
StringCchCopyNEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCopyNExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCopyNExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCchCopyNW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy)STRSAFEAPI <strsafe.h>
StringCchCopyW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCchGets(STRSAFE_LPSTR pszDest,size_t cchDest)STRSAFE_INLINE_API <strsafe.h>
StringCchGetsA(STRSAFE_LPSTR pszDest,size_t cchDest)STRSAFE_INLINE_API <strsafe.h>
StringCchGetsEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringCchGetsExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringCchGetsExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringCchGetsW(STRSAFE_LPWSTR pszDest,size_t cchDest)STRSAFE_INLINE_API <strsafe.h>
StringCchLength(STRSAFE_LPCSTR psz,size_t cchMax,size_t * pcchLength)STRSAFEAPI <strsafe.h>
StringCchLengthA(STRSAFE_LPCSTR psz,size_t cchMax,size_t * pcchLength)STRSAFEAPI <strsafe.h>
StringCchLengthW(STRSAFE_LPCWSTR psz,size_t cchMax,size_t * pcchLength)STRSAFEAPI <strsafe.h>
StringCchPrintf(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCchPrintfA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCchPrintfEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCchPrintfExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCchPrintfExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCchPrintfW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszFormat,...)STRSAFEAPIV <strsafe.h>
StringCchVPrintf(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCchVPrintfA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCchVPrintfEx(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCchVPrintfExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCchVPrintfExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCchVPrintfW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringCopyExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCopyExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCopyNExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCopyNExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFEAPI <strsafe.h>
StringCopyNWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchSrc)STRSAFEAPI <strsafe.h>
StringCopyNWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy)STRSAFEAPI <strsafe.h>
StringCopyNWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy)STRSAFEAPI <strsafe.h>
StringCopyWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc)STRSAFEAPI <strsafe.h>
StringCopyWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc)STRSAFEAPI <strsafe.h>
StringFormat()	~<gdiplusstringformat.h>
StringFormat(const StringFormat &)	<gdiplusstringformat.h>
StringFormat(const StringFormat * format)	<gdiplusstringformat.h>
StringFormat(GpStringFormat * stringFormat,Status status)	<gdiplusstringformat.h>
StringFormat(HotkeyPrefix hotkeyPrefix)	Status SetHotkeyPrefix<gdiplusstringformat.h>
StringFormat(INT count,REAL * firstTabOffset,REAL * tabStops)	Status GetTabStops<gdiplusstringformat.h>
StringFormat(INT flags)	Status SetFormatFlags<gdiplusstringformat.h>
StringFormat(INT formatFlags=0,LANGID language=LANG_NEUTRAL)	<gdiplusstringformat.h>
StringFormat(INT rangeCount,const CharacterRange * ranges)	Status SetMeasurableCharacterRanges<gdiplusstringformat.h>
StringFormat(LANGID language,StringDigitSubstitute substitute)	Status SetDigitSubstitution<gdiplusstringformat.h>
StringFormat(REAL firstTabOffset,INT count,const REAL * tabStops)	Status SetTabStops<gdiplusstringformat.h>
StringFormat(Status newStatus)	Status updateStatus<gdiplusstringformat.h>
StringFormat(StringAlignment align)	Status SetLineAlignment<gdiplusstringformat.h>
StringFormat(StringTrimming trimming)	Status SetTrimming<gdiplusstringformat.h>
StringFromCLSID(REFCLSID rclsid,LPOLESTR * lplpsz)WINOLEAPI <combaseapi.h>
StringFromGUID2(REFGUID rguid,LPOLESTR lpsz,int cchMax)WINOLEAPI_<combaseapi.h>
StringFromIID(REFIID rclsid,LPOLESTR * lplpsz)WINOLEAPI <combaseapi.h>
StringFromPartID(LONG lPartID,BSTR * pbstrPart)virtual HRESULT WINAPI <mshtmlc.h>
StringGetsExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringGetsExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags)STRSAFE_INLINE_API <strsafe.h>
StringLengthWorkerA(STRSAFE_LPCSTR psz,size_t cchMax,size_t * pcchLength)STRSAFEAPI <strsafe.h>
StringLengthWorkerW(STRSAFE_LPCWSTR psz,size_t cchMax,size_t * pcchLength)STRSAFEAPI <strsafe.h>
StringToAddress(BYTE * lpAddress,LPSTR string) LPBYTE WINAPI <netmon.h>
StringVPrintfExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringVPrintfExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPWSTR * ppszDestEnd,size_t * pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringVPrintfWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StringVPrintfWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszFormat,va_list argList)STRSAFEAPI <strsafe.h>
StrIntlEqNA(s1,s2,nChar)<shlwapi.h>
StrIntlEqNIA(s1,s2,nChar)<shlwapi.h>
StrIntlEqNIW(s1,s2,nChar)<shlwapi.h>
StrIntlEqNW(s1,s2,nChar)<shlwapi.h>
StrIsIntlEqual(WINBOOL fCaseSens,LPCSTR lpString1,LPCSTR lpString2,int nChar) LWSTDAPI_<shlwapi.h>
StrIsIntlEqualA(WINBOOL fCaseSens,LPCSTR lpString1,LPCSTR lpString2,int nChar) LWSTDAPI_<shlwapi.h>
StrIsIntlEqualW(WINBOOL fCaseSens,LPCWSTR lpString1,LPCWSTR lpString2,int nChar) LWSTDAPI_<shlwapi.h>
StrNCat(LPSTR psz1,LPCSTR psz2,int cchMax) LWSTDAPI_<strsafe.h>
StrNCatA(LPSTR psz1,LPCSTR psz2,int cchMax) LWSTDAPI_<strsafe.h>
StrNCatW(LPWSTR psz1,LPCWSTR psz2,int cchMax) LWSTDAPI_<strsafe.h>
STROBJ_bEnum(STROBJ * pstro,ULONG * pc,PGLYPHPOS * ppgpos)<winddi.h>
STROBJ_bEnumPositionsOnly(STROBJ * pstro,ULONG * pc,PGLYPHPOS * ppgpos)<winddi.h>
STROBJ_bGetAdvanceWidths(STROBJ * pso,ULONG iFirst,ULONG c,POINTQF * pptqD)<winddi.h>
STROBJ_dwGetCodePage(STROBJ * pstro)<winddi.h>
STROBJ_fxBreakExtra(STROBJ * pstro)<winddi.h>
STROBJ_fxCharacterExtra(STROBJ * pstro)<winddi.h>
STROBJ_vEnumStart(STROBJ * pstro)<winddi.h>
StrokeAndFillPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
StrokePath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
StrokeStyleProperties(D2D1_CAP_STYLE startCap=D2D1_CAP_STYLE_FLAT,D2D1_CAP_STYLE endCap=D2D1_CAP_STYLE_FLAT,D2D1_CAP_STYLE dashCap=D2D1_CAP_STYLE_FLAT,D2D1_LINE_JOIN lineJoin=D2D1_LINE_JOIN_MITER,FLOAT miterLimit=10.0f,D2D1_DASH_STYLE dashStyle=D2D1_DASH_STYLE_SOLID,FLOAT dashOffset=0.0f)D2D1FORCEINLINE D2D1_STROKE_STYLE_PROPERTIES <d2d1helper.h>
StrPBrk(LPCSTR psz,LPCSTR pszSet) LWSTDAPI_<shlwapi.h>
StrPBrkA(LPCSTR psz,LPCSTR pszSet) LWSTDAPI_<shlwapi.h>
StrPBrkW(LPCWSTR psz,LPCWSTR pszSet) LWSTDAPI_<shlwapi.h>
StrRChr(LPCSTR lpStart,LPCSTR lpEnd,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrRChrA(LPCSTR lpStart,LPCSTR lpEnd,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrRChrI(LPCSTR lpStart,LPCSTR lpEnd,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrRChrIA(LPCSTR lpStart,LPCSTR lpEnd,WORD wMatch) LWSTDAPI_<shlwapi.h>
StrRChrIW(LPCWSTR lpStart,LPCWSTR lpEnd,WCHAR wMatch) LWSTDAPI_<shlwapi.h>
StrRChrW(LPCWSTR lpStart,LPCWSTR lpEnd,WCHAR wMatch) LWSTDAPI_<shlwapi.h>
StrRetToBSTR(STRRET * pstr,LPCITEMIDLIST pidl,BSTR * pbstr) LWSTDAPI <shlwapi.h>
StrRetToBuf(STRRET * pstr,LPCITEMIDLIST pidl,LPSTR pszBuf,UINT cchBuf) LWSTDAPI <shlwapi.h>
StrRetToBufA(STRRET * pstr,LPCITEMIDLIST pidl,LPSTR pszBuf,UINT cchBuf) LWSTDAPI <shlwapi.h>
StrRetToBufW(STRRET * pstr,LPCITEMIDLIST pidl,LPWSTR pszBuf,UINT cchBuf) LWSTDAPI <shlwapi.h>
StrRetToStr(STRRET * pstr,LPCITEMIDLIST pidl,LPSTR * ppsz) LWSTDAPI <shlwapi.h>
StrRetToStrA(STRRET * pstr,LPCITEMIDLIST pidl,LPSTR * ppsz) LWSTDAPI <shlwapi.h>
StrRetToStrW(STRRET * pstr,LPCITEMIDLIST pidl,LPWSTR * ppsz) LWSTDAPI <shlwapi.h>
StrRStrI(LPCSTR lpSource,LPCSTR lpLast,LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrRStrIA(LPCSTR lpSource,LPCSTR lpLast,LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrRStrIW(LPCWSTR lpSource,LPCWSTR lpLast,LPCWSTR lpSrch) LWSTDAPI_<shlwapi.h>
STRSAFE_FAILURE_BYTE(x)<strsafe.h>
STRSAFE_FILL_BYTE(x)<strsafe.h>
STRSAFE_GET_FILL_PATTERN(dwFlags)<strsafe.h>
StrSpn(LPCSTR psz,LPCSTR pszSet) LWSTDAPI_<shlwapi.h>
StrSpnA(LPCSTR psz,LPCSTR pszSet) LWSTDAPI_<shlwapi.h>
StrSpnW(LPCWSTR psz,LPCWSTR pszSet) LWSTDAPI_<shlwapi.h>
StrStr(LPCSTR lpFirst,LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrStrA(LPCSTR lpFirst,LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrStrI(LPCSTR lpFirst,LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrStrIA(LPCSTR lpFirst,LPCSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrStrIW(LPCWSTR lpFirst,LPCWSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrStrW(LPCWSTR lpFirst,LPCWSTR lpSrch) LWSTDAPI_<shlwapi.h>
StrToInt(LPCSTR lpSrc) LWSTDAPI_<shlwapi.h>
StrToInt64Ex(LPCSTR pszString,DWORD dwFlags,LONGLONG * pllRet) LWSTDAPI_<shlwapi.h>
StrToInt64ExA(LPCSTR pszString,DWORD dwFlags,LONGLONG * pllRet) LWSTDAPI_<shlwapi.h>
StrToInt64ExW(LPCWSTR pszString,DWORD dwFlags,LONGLONG * pllRet) LWSTDAPI_<shlwapi.h>
StrToIntA(LPCSTR lpSrc) LWSTDAPI_<shlwapi.h>
StrToIntEx(LPCSTR pszString,DWORD dwFlags,int * piRet) LWSTDAPI_<shlwapi.h>
StrToIntExA(LPCSTR pszString,DWORD dwFlags,int * piRet) LWSTDAPI_<shlwapi.h>
StrToIntExW(LPCWSTR pszString,DWORD dwFlags,int * piRet) LWSTDAPI_<shlwapi.h>
StrToIntW(LPCWSTR lpSrc) LWSTDAPI_<shlwapi.h>
StrTrim(LPSTR psz,LPCSTR pszTrimChars) LWSTDAPI_<shlwapi.h>
StrTrimA(LPSTR psz,LPCSTR pszTrimChars) LWSTDAPI_<shlwapi.h>
StrTrimW(LPWSTR psz,LPCWSTR pszTrimChars) LWSTDAPI_<shlwapi.h>
STRUC_ALIGNED_STACK_COPY(t,s)<stralign.h>
STUB_THUNK(PMIDL_STUB_MESSAGE) typedef void<rpcndr.h>
Style_is_Shared(p)<lpmapi.h>
Style_is_Wildcard(p)<lpmapi.h>
SubclassDialog(hwndDlg,lpfn)<windowsx.h>
SUBCLASSPROC(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam,UINT_PTR uIdSubclass,DWORD_PTR dwRefData) typedef LRESULT<commctrl.h>
SubclassWindow(hwnd,lpfn)<windowsx.h>
SubkeyExists(const char * pszPath,const char * szSubkey) WINBOOL __cdecl <netmon.h>
SUBLANGID(lgid)<winnt.h>
Submit(LONG Flags,const BSTR strRequest,const BSTR strAttributes,const BSTR strConfig,LONG * pDisposition)virtual HRESULT WINAPI <certcli.h>
Submit(LONG lFlags,VARIANT varReserved)virtual HRESULT WINAPI <certcli.h>
SubmitNtmsOperatorRequest(HANDLE hSession,DWORD dwRequest,LPCSTR lpMessage,LPNTMS_GUID lpArg1Id,LPNTMS_GUID lpArg2Id,LPNTMS_GUID lpRequestId) DWORD WINAPI <ntmsapi.h>
SubmitNtmsOperatorRequestA(HANDLE hSession,DWORD dwRequest,LPCSTR lpMessage,LPNTMS_GUID lpArg1Id,LPNTMS_GUID lpArg2Id,LPNTMS_GUID lpRequestId) DWORD WINAPI <ntmsapi.h>
SubmitNtmsOperatorRequestW(HANDLE hSession,DWORD dwRequest,LPCWSTR lpMessage,LPNTMS_GUID lpArg1Id,LPNTMS_GUID lpArg2Id,LPNTMS_GUID lpRequestId) DWORD WINAPI <ntmsapi.h>
SubmitThreadpoolWork(PTP_WORK pwk) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
SubPenMsgFromWpLp(wp,lp)<penwin.h>
SubpictureStreamChange(ULONG ulSubPicture,WINBOOL bDisplay)virtual HRESULT WINAPI <strmif.h>
Subscribe(DWORD dwEventFlags)HRESULT WINAPI <vswriter.h>
SubscribeEx(DWORD dwUnsubscribeTimeout,DWORD dwEventFlags)HRESULT WINAPI <vswriter.h>
SubtractRect(LPRECT lprcDst,CONST RECT * lprcSrc1,CONST RECT * lprcSrc2) WINUSERAPI WINBOOL WINAPI <winuser.h>
SubtractRgn(hrgnResult,hrgnA,hrgnB)<windowsx.h>
SUBVER(Version)<sdkddkver.h>
SUCCEEDED(hr)<winerror.h>
SuggestAllocatorProperties(const ALLOCATOR_PROPERTIES * pprop)virtual HRESULT WINAPI <strmif.h>
Suspend(void)virtual HRESULT WINAPI <usbspec.h>
SuspendGroup(void)virtual HRESULT WINAPI <qmgr.h>
SuspendThread(HANDLE hThread) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
SVCID_DNS(_RecordType)<svcguid.h>
SVCID_NETWARE(_SapId)<svcguid.h>
SVCID_TCP(_Port)<svcguid.h>
SVCID_TCP_RR(_Port,_RR)<svcguid.h>
SVCID_UDP(_Port)<svcguid.h>
SVCID_UDP_RR(_Port,_RR)<svcguid.h>
Swap(ComPtr & r)       void <client.h>
Swap(ComPtr && r)       void <client.h>
SWAP_IRQL(rNewIrql)<kxia64.h>
SwapBuffers(HDC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
SWAPBYTES(w)<netmon.h>
SwapHold(ITBasicCallControl * pCall)virtual HRESULT WINAPI <tapi3if.h>
SwapMouseButton(WINBOOL fSwap) WINUSERAPI WINBOOL WINAPI <winuser.h>
SwapNtmsMedia(HANDLE hSession,LPNTMS_GUID lpMediaId1,LPNTMS_GUID lpMediaId2) DWORD WINAPI <ntmsapi.h>
SWAPWORDS(d)<netmon.h>
SwitchDesktop(HDESK hDesktop) WINUSERAPI WINBOOL WINAPI <winuser.h>
SwitchTerminalToSubStream(ITTerminal * pITTerminal,ITSubStream * pITSubStream)virtual HRESULT WINAPI <confpriv.h>
SwitchToFiber(LPVOID lpFiber) WINBASEAPI VOID WINAPI <winbase.h>
SwitchToForeground(void)virtual HRESULT WINAPI <qmgr.h>
SwitchToThisWindow(HWND hwnd,WINBOOL fUnknown) WINUSERAPI VOID WINAPI <winuser.h>
SwitchToThread(VOID) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
SxsConfig(CSC_SxsConfig scsConfig)virtual HRESULT WINAPI <comsvcs.h>
SxsDirectory(LPCWSTR szSxsDirectory)virtual HRESULT WINAPI <comsvcs.h>
SxsName(LPCWSTR szSxsName)virtual HRESULT WINAPI <comsvcs.h>
SymAddSourceStream(HANDLE hProcess,ULONG64 Base,PCSTR StreamFile,PBYTE Buffer,size_t Size)WINBOOL WINAPI <psdk>
SymAddSourceStreamW(HANDLE hProcess,ULONG64 Base,PCWSTR StreamFile,PBYTE Buffer,size_t Size)WINBOOL WINAPI <psdk>
SymAddSymbol(HANDLE hProcess,ULONG64 BaseOfDll,PCSTR Name,DWORD64 Address,DWORD Size,DWORD Flags) WINBOOL IMAGEAPI <psdk>
SymAddSymbolW(HANDLE hProcess,ULONG64 BaseOfDll,PCWSTR Name,DWORD64 Address,DWORD Size,DWORD Flags) WINBOOL IMAGEAPI <psdk>
SymbolToCharacter(LPSYV,int,LPSTR,LPINT) WINBOOL WINAPI <penwin.h>
SymCleanup(HANDLE hProcess) WINBOOL IMAGEAPI <psdk>
SymDeleteSymbol(HANDLE hProcess,ULONG64 BaseOfDll,PCSTR Name,DWORD64 Address,DWORD Flags) WINBOOL IMAGEAPI <psdk>
SymDeleteSymbolW(HANDLE hProcess,ULONG64 BaseOfDll,PCWSTR Name,DWORD64 Address,DWORD Flags) WINBOOL IMAGEAPI <psdk>
SymEnumerateModules(HANDLE hProcess,PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumerateModules64(HANDLE hProcess,PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumerateModulesW64(HANDLE hProcess,PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumerateSymbols(HANDLE hProcess,DWORD BaseOfDll,PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumerateSymbols64(HANDLE hProcess,DWORD64 BaseOfDll,PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumerateSymbolsW(HANDLE hProcess,DWORD BaseOfDll,PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumerateSymbolsW64(HANDLE hProcess,DWORD64 BaseOfDll,PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumLines(HANDLE hProcess,ULONG64 Base,PCSTR Obj,PCSTR File,PSYM_ENUMLINES_CALLBACK EnumLinesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumLinesW(HANDLE hProcess,ULONG64 Base,PCWSTR Obj,PCSTR File,PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumSourceFiles(HANDLE hProcess,ULONG64 ModBase,PCSTR Mask,PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumSourceFilesW(HANDLE hProcess,ULONG64 ModBase,PCWSTR Mask,PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumSourceLines(HANDLE hProcess,ULONG64 Base,PCSTR Obj,PCSTR File,DWORD Line,DWORD Flags,PSYM_ENUMLINES_CALLBACK EnumLinesCallback,PVOID UserContext)WINBOOL WINAPI <psdk>
SymEnumSourceLinesW(HANDLE hProcess,ULONG64 Base,PCWSTR Obj,PCWSTR File,DWORD Line,DWORD Flags,PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,PVOID UserContext)WINBOOL WINAPI <psdk>
SymEnumSym(HANDLE hProcess,ULONG64 BaseOfDll,PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext) DBHLP_DEPRECIATED WINBOOL IMAGEAPI <psdk>
SymEnumSymbols(HANDLE hProcess,ULONG64 BaseOfDll,PCSTR Mask,PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumSymbolsForAddr(HANDLE hProcess,DWORD64 Address,PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumSymbolsForAddrW(HANDLE hProcess,DWORD64 Address,PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumSymbolsW(HANDLE hProcess,ULONG64 BaseOfDll,PCWSTR Mask,PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumTypes(HANDLE hProcess,ULONG64 BaseOfDll,PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymEnumTypesByName(HANDLE hProcess,ULONG64 BaseOfDll,PCSTR mask,PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext)WINBOOL WINAPI <psdk>
SymEnumTypesByNameW(HANDLE hProcess,ULONG64 BaseOfDll,PCSTR mask,PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,PVOID UserContext)WINBOOL WINAPI <psdk>
SymEnumTypesW(HANDLE hProcess,ULONG64 BaseOfDll,PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymFindDebugInfoFile(HANDLE hProcess,PCSTR FileName,PSTR DebugFilePath,PFIND_DEBUG_FILE_CALLBACK Callback,PVOID CallerData)HANDLE WINAPI <psdk>
SymFindDebugInfoFileW(HANDLE hProcess,PCWSTR FileName,PWSTR DebugFilePath,PFIND_DEBUG_FILE_CALLBACKW Callback,PVOID CallerData)HANDLE WINAPI <psdk>
SymFindExecutableImage(HANDLE hProcess,PCSTR FileName,PSTR ImageFilePath,PFIND_EXE_FILE_CALLBACK Callback,PVOID CallerData)HANDLE WINAPI <psdk>
SymFindExecutableImageW(HANDLE hProcess,PCWSTR FileName,PWSTR ImageFilePath,PFIND_EXE_FILE_CALLBACKW Callback,PVOID CallerData)HANDLE WINAPI <psdk>
SymFindFileInPath(HANDLE hprocess,PCSTR SearchPath,PCSTR FileName,PVOID id,DWORD two,DWORD three,DWORD flags,LPSTR FoundFile,PFINDFILEINPATHCALLBACK callback,PVOID context) WINBOOL IMAGEAPI <psdk>
SymFindFileInPathW(HANDLE hprocess,PCWSTR SearchPath,PCWSTR FileName,PVOID id,DWORD two,DWORD three,DWORD flags,LPSTR FoundFile,PFINDFILEINPATHCALLBACKW callback,PVOID context) WINBOOL IMAGEAPI <psdk>
SymFromAddr(HANDLE hProcess,DWORD64 Address,PDWORD64 Displacement,PSYMBOL_INFO Symbol) WINBOOL IMAGEAPI <psdk>
SymFromAddrW(HANDLE hProcess,DWORD64 Address,PDWORD64 Displacement,PSYMBOL_INFOW Symbol) WINBOOL IMAGEAPI <psdk>
SymFromIndex(HANDLE hProcess,ULONG64 BaseOfDll,DWORD Index,PSYMBOL_INFO Symbol)WINBOOL WINAPI <psdk>
SymFromIndexW(HANDLE hProcess,ULONG64 BaseOfDll,DWORD Index,PSYMBOL_INFOW Symbol)WINBOOL WINAPI <psdk>
SymFromName(HANDLE hProcess,PCSTR Name,PSYMBOL_INFO Symbol) WINBOOL IMAGEAPI <psdk>
SymFromNameW(HANDLE hProcess,PCWSTR Name,PSYMBOL_INFOW Symbol) WINBOOL IMAGEAPI <psdk>
SymFromToken(HANDLE hProcess,DWORD64 Base,DWORD Token,PSYMBOL_INFO Symbol) WINBOOL IMAGEAPI <psdk>
SymFromTokenW(HANDLE hProcess,DWORD64 Base,DWORD Token,PSYMBOL_INFOW Symbol) WINBOOL IMAGEAPI <psdk>
SymFunctionTableAccess(HANDLE hProcess,DWORD AddrBase) PVOID IMAGEAPI <psdk>
SymFunctionTableAccess64(HANDLE hProcess,DWORD64 AddrBase) PVOID IMAGEAPI <psdk>
SymGetHomeDirectory(DWORD type,PSTR dir,size_t size) PCHAR IMAGEAPI <psdk>
SymGetHomeDirectoryW(DWORD type,PWSTR dir,size_t size) PWCHAR IMAGEAPI <psdk>
SymGetLineFromAddr(HANDLE hProcess,DWORD dwAddr,PDWORD pdwDisplacement,PIMAGEHLP_LINE Line) WINBOOL IMAGEAPI <psdk>
SymGetLineFromAddr64(HANDLE hProcess,DWORD64 qwAddr,PDWORD pdwDisplacement,PIMAGEHLP_LINE64 Line64) WINBOOL IMAGEAPI <psdk>
SymGetLineFromAddrW64(HANDLE hProcess,DWORD64 qwAddr,PDWORD pdwDisplacement,PIMAGEHLP_LINEW64 Line64) WINBOOL IMAGEAPI <psdk>
SymGetLineFromName(HANDLE hProcess,PCSTR ModuleName,PCSTR FileName,DWORD dwLineNumber,PLONG plDisplacement,PIMAGEHLP_LINE Line) WINBOOL IMAGEAPI <psdk>
SymGetLineFromName64(HANDLE hProcess,PCSTR ModuleName,PCSTR FileName,DWORD dwLineNumber,PLONG plDisplacement,PIMAGEHLP_LINE64 Line) WINBOOL IMAGEAPI <psdk>
SymGetLineFromNameW64(HANDLE hProcess,PCWSTR ModuleName,PCWSTR FileName,DWORD dwLineNumber,PLONG plDisplacement,PIMAGEHLP_LINEW64 Line) WINBOOL IMAGEAPI <psdk>
SymGetLineNext(HANDLE hProcess,PIMAGEHLP_LINE Line) WINBOOL IMAGEAPI <psdk>
SymGetLineNext64(HANDLE hProcess,PIMAGEHLP_LINE64 Line) WINBOOL IMAGEAPI <psdk>
SymGetLineNextW64(HANDLE hProcess,PIMAGEHLP_LINEW64 Line) WINBOOL IMAGEAPI <psdk>
SymGetLinePrev(HANDLE hProcess,PIMAGEHLP_LINE Line) WINBOOL IMAGEAPI <psdk>
SymGetLinePrev64(HANDLE hProcess,PIMAGEHLP_LINE64 Line) WINBOOL IMAGEAPI <psdk>
SymGetLinePrevW64(HANDLE hProcess,PIMAGEHLP_LINEW64 Line) WINBOOL IMAGEAPI <psdk>
SymGetModuleBase(HANDLE hProcess,DWORD dwAddr) DWORD IMAGEAPI <psdk>
SymGetModuleBase64(HANDLE hProcess,DWORD64 qwAddr) DWORD64 IMAGEAPI <psdk>
SymGetModuleInfo(HANDLE hProcess,DWORD dwAddr,PIMAGEHLP_MODULE ModuleInfo) WINBOOL IMAGEAPI <psdk>
SymGetModuleInfo64(HANDLE hProcess,DWORD64 qwAddr,PIMAGEHLP_MODULE64 ModuleInfo) WINBOOL IMAGEAPI <psdk>
SymGetModuleInfoW(HANDLE hProcess,DWORD dwAddr,PIMAGEHLP_MODULEW ModuleInfo) WINBOOL IMAGEAPI <psdk>
SymGetModuleInfoW64(HANDLE hProcess,DWORD64 qwAddr,PIMAGEHLP_MODULEW64 ModuleInfo) WINBOOL IMAGEAPI <psdk>
SymGetOptions(VOID) DWORD IMAGEAPI <psdk>
SymGetScope(HANDLE hProcess,ULONG64 BaseOfDll,DWORD Index,PSYMBOL_INFO Symbol)WINBOOL WINAPI <psdk>
SymGetScopeW(HANDLE hProcess,ULONG64 BaseOfDll,DWORD Index,PSYMBOL_INFOW Symbol)WINBOOL WINAPI <psdk>
SymGetSearchPath(HANDLE hProcess,PSTR SearchPath,DWORD SearchPathLength) WINBOOL IMAGEAPI <psdk>
SymGetSearchPathW(HANDLE hProcess,PWSTR SearchPath,DWORD SearchPathLength) WINBOOL IMAGEAPI <psdk>
SymGetSourceFile(HANDLE hProcess,ULONG64 Base,PCSTR Params,PCSTR FileSpec,PSTR FilePath,DWORD Size)WINBOOL WINAPI <psdk>
SymGetSourceFileFromToken(HANDLE hProcess,PVOID Token,PCSTR Params,PSTR FilePath,DWORD Size)WINBOOL WINAPI <psdk>
SymGetSourceFileFromTokenW(HANDLE hProcess,PVOID Token,PCWSTR Params,PWSTR FilePath,DWORD Size)WINBOOL WINAPI <psdk>
SymGetSourceFileToken(HANDLE hProcess,ULONG64 Base,PCSTR FileSpec,PVOID * Token,DWORD * Size)WINBOOL WINAPI <psdk>
SymGetSourceFileTokenW(HANDLE hProcess,ULONG64 Base,PCWSTR FileSpec,PVOID * Token,DWORD * Size)WINBOOL WINAPI <psdk>
SymGetSourceFileW(HANDLE hProcess,ULONG64 Base,PCWSTR Params,PCWSTR FileSpec,PWSTR FilePath,DWORD Size)WINBOOL WINAPI <psdk>
SymGetSourceVarFromToken(HANDLE hProcess,PVOID Token,PCSTR Params,PCSTR VarName,PSTR Value,DWORD Size)WINBOOL WINAPI <psdk>
SymGetSourceVarFromTokenW(HANDLE hProcess,PVOID Token,PCWSTR Params,PCWSTR VarName,PWSTR Value,DWORD Size)WINBOOL WINAPI <psdk>
SymGetSymbolFile(HANDLE hProcess,PCSTR SymPath,PCSTR ImageFile,DWORD Type,PSTR SymbolFile,size_t cSymbolFile,PSTR DbgFile,size_t cDbgFile)WINBOOL WINAPI <psdk>
SymGetSymbolFileW(HANDLE hProcess,PCWSTR SymPath,PCWSTR ImageFile,DWORD Type,PWSTR SymbolFile,size_t cSymbolFile,PWSTR DbgFile,size_t cDbgFile)WINBOOL WINAPI <psdk>
SymGetSymFromAddr(HANDLE hProcess,DWORD dwAddr,PDWORD pdwDisplacement,PIMAGEHLP_SYMBOL Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymFromAddr64(HANDLE hProcess,DWORD64 qwAddr,PDWORD64 pdwDisplacement,PIMAGEHLP_SYMBOL64 Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymFromName(HANDLE hProcess,PCSTR Name,PIMAGEHLP_SYMBOL Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymFromName64(HANDLE hProcess,PCSTR Name,PIMAGEHLP_SYMBOL64 Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymNext(HANDLE hProcess,PIMAGEHLP_SYMBOL Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymNext64(HANDLE hProcess,PIMAGEHLP_SYMBOL64 Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymPrev(HANDLE hProcess,PIMAGEHLP_SYMBOL Symbol) WINBOOL IMAGEAPI <psdk>
SymGetSymPrev64(HANDLE hProcess,PIMAGEHLP_SYMBOL64 Symbol) WINBOOL IMAGEAPI <psdk>
SymGetTypeFromName(HANDLE hProcess,ULONG64 BaseOfDll,PCSTR Name,PSYMBOL_INFO Symbol) WINBOOL IMAGEAPI <psdk>
SymGetTypeFromNameW(HANDLE hProcess,ULONG64 BaseOfDll,PCWSTR Name,PSYMBOL_INFOW Symbol) WINBOOL IMAGEAPI <psdk>
SymGetTypeInfo(HANDLE hProcess,DWORD64 ModBase,ULONG TypeId,IMAGEHLP_SYMBOL_TYPE_INFO GetType,PVOID pInfo) WINBOOL IMAGEAPI <psdk>
SymInitialize(HANDLE hProcess,PCSTR UserSearchPath,WINBOOL fInvadeProcess) WINBOOL IMAGEAPI <psdk>
SymInitializeW(HANDLE hProcess,PCWSTR UserSearchPath,WINBOOL fInvadeProcess) WINBOOL IMAGEAPI <psdk>
SymLoadModule(HANDLE hProcess,HANDLE hFile,PCSTR ImageName,PCSTR ModuleName,DWORD BaseOfDll,DWORD SizeOfDll) DWORD IMAGEAPI <psdk>
SymLoadModule64(HANDLE hProcess,HANDLE hFile,PSTR ImageName,PSTR ModuleName,DWORD64 BaseOfDll,DWORD SizeOfDll) DWORD64 IMAGEAPI <psdk>
SymLoadModuleEx(HANDLE hProcess,HANDLE hFile,PCSTR ImageName,PCSTR ModuleName,DWORD64 BaseOfDll,DWORD DllSize,PMODLOAD_DATA Data,DWORD Flags) DWORD64 IMAGEAPI <psdk>
SymLoadModuleExW(HANDLE hProcess,HANDLE hFile,PCWSTR ImageName,PCWSTR ModuleName,DWORD64 BaseOfDll,DWORD DllSize,PMODLOAD_DATA Data,DWORD Flags) DWORD64 IMAGEAPI <psdk>
SymMatchFileName(PCSTR FileName,PCSTR Match,PSTR * FileNameStop,PSTR * MatchStop) WINBOOL IMAGEAPI <psdk>
SymMatchFileNameW(PCWSTR FileName,PCWSTR Match,PWSTR * FileNameStop,PWSTR * MatchStop) WINBOOL IMAGEAPI <psdk>
SymMatchString(PCSTR string,PCSTR expression,WINBOOL fCase) WINBOOL IMAGEAPI <psdk>
SymMatchStringW(PCWSTR string,PCWSTR expression,WINBOOL fCase) WINBOOL IMAGEAPI <psdk>
SymNext(HANDLE hProcess,PSYMBOL_INFO Symbol)WINBOOL WINAPI <psdk>
SymNextW(HANDLE hProcess,PSYMBOL_INFOW Symbol)WINBOOL WINAPI <psdk>
SymPrev(HANDLE hProcess,PSYMBOL_INFO Symbol)WINBOOL WINAPI <psdk>
SymPrevW(HANDLE hProcess,PSYMBOL_INFOW Symbol)WINBOOL WINAPI <psdk>
SymRefreshModuleList(HANDLE hProcess)WINBOOL WINAPI <psdk>
SymRegisterCallback(HANDLE hProcess,PSYMBOL_REGISTERED_CALLBACK CallbackFunction,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymRegisterCallback64(HANDLE hProcess,PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,ULONG64 UserContext) WINBOOL IMAGEAPI <psdk>
SymRegisterCallback64W(HANDLE hProcess,PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,ULONG64 UserContext) WINBOOL IMAGEAPI <psdk>
SymRegisterFunctionEntryCallback(HANDLE hProcess,PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,PVOID UserContext) WINBOOL IMAGEAPI <psdk>
SymRegisterFunctionEntryCallback64(HANDLE hProcess,PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction,ULONG64 UserContext) WINBOOL IMAGEAPI <psdk>
SymSearch(HANDLE hProcess,ULONG64 BaseOfDll,DWORD Index,DWORD SymTag,PCSTR Mask,DWORD64 Address,PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,PVOID UserContext,DWORD Options)WINBOOL WINAPI <psdk>
SymSearchW(HANDLE hProcess,ULONG64 BaseOfDll,DWORD Index,DWORD SymTag,PCWSTR Mask,DWORD64 Address,PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,PVOID UserContext,DWORD Options)WINBOOL WINAPI <psdk>
SymSetContext(HANDLE hProcess,PIMAGEHLP_STACK_FRAME StackFrame,PIMAGEHLP_CONTEXT Context) WINBOOL IMAGEAPI <psdk>
SymSetHomeDirectory(HANDLE hProcess,PCSTR dir) PCHAR IMAGEAPI <psdk>
SymSetHomeDirectoryW(HANDLE hProcess,PCWSTR dir) PCHAR IMAGEAPI <psdk>
SymSetOptions(DWORD SymOptions) DWORD IMAGEAPI <psdk>
SymSetParentWindow(HWND hwnd) WINBOOL IMAGEAPI <psdk>
SymSetSearchPath(HANDLE hProcess,PCSTR SearchPath) WINBOOL IMAGEAPI <psdk>
SymSetSearchPathW(HANDLE hProcess,PCWSTR SearchPath) WINBOOL IMAGEAPI <psdk>
SymSrvDeltaName(HANDLE hProcess,PCSTR SymPath,PCSTR Type,PCSTR File1,PCSTR File2)PCSTR WINAPI <psdk>
SymSrvDeltaNameW(HANDLE hProcess,PCWSTR SymPath,PCWSTR Type,PCWSTR File1,PCWSTR File2)PCWSTR WINAPI <psdk>
SymSrvGetFileIndexes(PCTSTR File,GUID * Id,DWORD * Val1,DWORD * Val2,DWORD Flags)WINBOOL WINAPI <psdk>
SymSrvGetFileIndexesW(PCWSTR File,GUID * Id,DWORD * Val1,DWORD * Val2,DWORD Flags)WINBOOL WINAPI <psdk>
SymSrvGetFileIndexInfo(PCSTR File,PSYMSRV_INDEX_INFO Info,DWORD Flags)WINBOOL WINAPI <psdk>
SymSrvGetFileIndexInfoW(PCWSTR File,PSYMSRV_INDEX_INFOW Info,DWORD Flags)WINBOOL WINAPI <psdk>
SymSrvGetFileIndexString(HANDLE hProcess,PCSTR SrvPath,PCSTR File,PSTR Index,size_t Size,DWORD Flags)WINBOOL WINAPI <psdk>
SymSrvGetFileIndexStringW(HANDLE hProcess,PCWSTR SrvPath,PCWSTR File,PWSTR Index,size_t Size,DWORD Flags)WINBOOL WINAPI <psdk>
SymSrvGetSupplement(HANDLE hProcess,PCSTR SymPath,PCSTR Node,PCSTR File)PCSTR WINAPI <psdk>
SymSrvGetSupplementW(HANDLE hProcess,PCWSTR SymPath,PCWSTR Node,PCWSTR File)PCWSTR WINAPI <psdk>
SymSrvIsStore(HANDLE hProcess,PCSTR path)WINBOOL WINAPI <psdk>
SymSrvIsStoreW(HANDLE hProcess,PCWSTR path)WINBOOL WINAPI <psdk>
SymSrvStoreFile(HANDLE hProcess,PCSTR SrvPath,PCSTR File,DWORD Flags)PCSTR WINAPI <psdk>
SymSrvStoreFileW(HANDLE hProcess,PCWSTR SrvPath,PCWSTR File,DWORD Flags)PCWSTR WINAPI <psdk>
SymSrvStoreSupplement(HANDLE hProcess,const PCTSTR SymPath,PCSTR Node,PCSTR File,DWORD Flags)PCSTR WINAPI <psdk>
SymSrvStoreSupplementW(HANDLE hProcess,const PCWSTR SymPath,PCWSTR Node,PCWSTR File,DWORD Flags)PCWSTR WINAPI <psdk>
SymUnDName(PIMAGEHLP_SYMBOL sym,PSTR UnDecName,DWORD UnDecNameLength) WINBOOL IMAGEAPI <psdk>
SymUnDName64(PIMAGEHLP_SYMBOL64 sym,PSTR UnDecName,DWORD UnDecNameLength) WINBOOL IMAGEAPI <psdk>
SymUnloadModule(HANDLE hProcess,DWORD BaseOfDll) WINBOOL IMAGEAPI <psdk>
SymUnloadModule64(HANDLE hProcess,DWORD64 BaseOfDll) WINBOOL IMAGEAPI <psdk>
Sync(WINBOOL fNoAccess)virtual HRESULT WINAPI <mlang.h>
Synchronize(HWND hWndParent)virtual HRESULT WINAPI <msdaipp.h>
Synchronize(MSDAIPP_SYNC_FLAGS dwFlags)virtual HRESULT WINAPI <msdaipp.h>
SynchronizeCompleted(HRESULT hr)virtual HRESULT WINAPI <mobsync.h>
SynchronousCall(IMTSCall * pCall)virtual HRESULT WINAPI <comsvcs.h>
SynchronousCall(IServiceCall * pIServiceCall)virtual HRESULT WINAPI <comsvcs.h>
SyncMgrResolveConflict(HWND hWndParent,RFCDLGPARAMA * pdlgParam) int WINAPI <mobsync.h>
SyncMgrResolveConflictA(HWND hWndParent,RFCDLGPARAMA * pdlgParam) int WINAPI <mobsync.h>
SyncMgrResolveConflictW(HWND hWndParent,RFCDLGPARAMW * pdlgParam) int WINAPI <mobsync.h>
SyncUsingStreamOffset(WINBOOL bUseStreamOffset)virtual HRESULT WINAPI <strmif.h>
SysAllocString(const OLECHAR *)WINOLEAUTAPI_<oleauto.h>
SysAllocStringByteLen(LPCSTR psz,UINT len)WINOLEAUTAPI_<oleauto.h>
SysAllocStringLen(const OLECHAR *,UINT)WINOLEAUTAPI_<oleauto.h>
SysBeep(void)virtual HRESULT WINAPI <tom.h>
SysFreeString(BSTR)WINOLEAUTAPI_<oleauto.h>
SysReAllocString(BSTR *,const OLECHAR *)WINOLEAUTAPI_<oleauto.h>
SysReAllocStringLen(BSTR *,const OLECHAR *,UINT)WINOLEAUTAPI_<oleauto.h>
SysStringByteLen(BSTR bstr)WINOLEAUTAPI_<oleauto.h>
SysStringLen(BSTR)WINOLEAUTAPI_<oleauto.h>
SystemParametersInfo(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni) WINUSERAPI WINBOOL WINAPI <winuser.h>
SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni) WINUSERAPI WINBOOL WINAPI <winuser.h>
SystemParametersInfoW(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni) WINUSERAPI WINBOOL WINAPI <winuser.h>
SystemTimeToFileTime(CONST SYSTEMTIME * lpSystemTime,LPFILETIME lpFileTime) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
SystemTimeToTzSpecificLocalTime(CONST TIME_ZONE_INFORMATION * lpTimeZoneInformation,CONST SYSTEMTIME * lpUniversalTime,LPSYSTEMTIME lpLocalTime) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
SystemTimeToTzSpecificLocalTimeEx(CONST DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,CONST SYSTEMTIME * lpUniversalTime,LPSYSTEMTIME lpLocalTime) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime,DOUBLE * pvtime)WINOLEAUTAPI_<oleauto.h>
SyvCharacterToSymbol(c)<penwin.h>
SyvKanjiToSymbol(c)<penwin.h>
SzDecodeScode(	_sc)<mapidbg.h>
SzDecodeScode(_sc)<mapidbg.h>
SzDecodeScodeFn(SCODE sc)char<mapidbg.h>
SzDecodeUlPropTag(	_ulPropTag)<mapidbg.h>
SzDecodeUlPropTag(_ulPropTag)<mapidbg.h>
SzDecodeUlPropTagFn(unsigned __LONG32 ulPropTag)char<mapidbg.h>
SzDecodeUlPropType(	_ulPropType)<mapidbg.h>
SzDecodeUlPropType(_ulPropType)<mapidbg.h>
SzDecodeUlPropTypeFn(unsigned __LONG32 ulPropType)char<mapidbg.h>
SzFindCh(LPCTSTR lpsz,USHORT ch) STDAPI_<wabutil.h>
SzFindLastCh(LPCTSTR lpsz,USHORT ch) STDAPI_<wabutil.h>
SzFindSz(LPCTSTR lpsz,LPCTSTR lpszKey) STDAPI_<wabutil.h>
szOID_CERT_PROP_ID(PropId)<wincrypt.h>
TabbedTextOut(HDC hdc,int x,int y,LPCSTR lpString,int chCount,int nTabPositions,CONST INT * lpnTabStopPositions,int nTabOrigin) WINUSERAPI LONG WINAPI <winuser.h>
TabbedTextOutA(HDC hdc,int x,int y,LPCSTR lpString,int chCount,int nTabPositions,CONST INT * lpnTabStopPositions,int nTabOrigin) WINUSERAPI LONG WINAPI <winuser.h>
TabbedTextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int chCount,int nTabPositions,CONST INT * lpnTabStopPositions,int nTabOrigin) WINUSERAPI LONG WINAPI <winuser.h>
TabCtrl_AdjustRect(hwnd,bLarger,prc)<commctrl.h>
TabCtrl_DeleteAllItems(hwnd)<commctrl.h>
TabCtrl_DeleteItem(hwnd,i)<commctrl.h>
TabCtrl_DeselectAll(hwnd,fExcludeFocus)<commctrl.h>
TabCtrl_GetCurFocus(hwnd)<commctrl.h>
TabCtrl_GetCurSel(hwnd)<commctrl.h>
TabCtrl_GetExtendedStyle(hwnd)<commctrl.h>
TabCtrl_GetImageList(hwnd)<commctrl.h>
TabCtrl_GetItem(hwnd,iItem,pitem)<commctrl.h>
TabCtrl_GetItemCount(hwnd)<commctrl.h>
TabCtrl_GetItemRect(hwnd,i,prc)<commctrl.h>
TabCtrl_GetRowCount(hwnd)<commctrl.h>
TabCtrl_GetToolTips(hwnd)<commctrl.h>
TabCtrl_GetUnicodeFormat(hwnd)<commctrl.h>
TabCtrl_HighlightItem(hwnd,i,fHighlight)<commctrl.h>
TabCtrl_HitTest(hwndTC,pinfo)<commctrl.h>
TabCtrl_InsertItem(hwnd,iItem,pitem)<commctrl.h>
TabCtrl_RemoveImage(hwnd,i)<commctrl.h>
TabCtrl_SetCurFocus(hwnd,i)<commctrl.h>
TabCtrl_SetCurSel(hwnd,i)<commctrl.h>
TabCtrl_SetExtendedStyle(hwnd,dw)<commctrl.h>
TabCtrl_SetImageList(hwnd,himl)<commctrl.h>
TabCtrl_SetItem(hwnd,iItem,pitem)<commctrl.h>
TabCtrl_SetItemExtra(hwndTC,cb)<commctrl.h>
TabCtrl_SetItemSize(hwnd,x,y)<commctrl.h>
TabCtrl_SetMinTabWidth(hwnd,x)<commctrl.h>
TabCtrl_SetPadding(hwnd,cx,cy)<commctrl.h>
TabCtrl_SetToolTips(hwnd,hwndTT)<commctrl.h>
TabCtrl_SetUnicodeFormat(hwnd,fUnicode)<commctrl.h>
Tag(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE DeviceHandle,IN PVOID Object,IN ULONG) IN ULONG <batclass.h>
tagEXCEPINFO(__stdcall * pfnDeferredFillIn)HRESULT<oaidl.h>
tagHyphenateInfo(WCHAR *,LANGID,__LONG32,HYPHRESULT *)void<richedit.h>
tagIMMPID_GUIDLIST_ITEM(selectany)extern const __declspec<mailmsgprops.h>
TakeOwnership(void)virtual HRESULT WINAPI <bits.h>
TakePicture(BSTR * pbstrNewImageFilename)virtual HRESULT WINAPI <wiavideo.h>
TakeSnapshotVhdSet(HANDLE VirtualDiskHandle,const PTAKE_SNAPSHOT_VHDSET_PARAMETERS Parameters,TAKE_SNAPSHOT_VHDSET_FLAG Flags)VIRTDISKAPI WINAPI DWORD <virtdisk.h>
TAPIERROR_FORMATMESSAGE(__ErrCode__)<tapi.h>
tapiRequestDrop(HWND hwnd,WPARAM wRequestID) LONG WINAPI <tapi.h>
tapiRequestMakeCall(LPCSTR lpszDestAddress,LPCSTR lpszAppName,LPCSTR lpszCalledParty,LPCSTR lpszComment) LONG WINAPI <tapi.h>
tapiRequestMakeCallA(LPCSTR lpszDestAddress,LPCSTR lpszAppName,LPCSTR lpszCalledParty,LPCSTR lpszComment) LONG WINAPI <tapi.h>
tapiRequestMakeCallW(LPCWSTR lpszDestAddress,LPCWSTR lpszAppName,LPCWSTR lpszCalledParty,LPCWSTR lpszComment) LONG WINAPI <tapi.h>
tapiRequestMediaCall(HWND hwnd,WPARAM wRequestID,LPCSTR lpszDeviceClass,LPCSTR lpDeviceID,DWORD dwSize,DWORD dwSecure,LPCSTR lpszDestAddress,LPCSTR lpszAppName,LPCSTR lpszCalledParty,LPCSTR lpszComment) LONG WINAPI <tapi.h>
tapiRequestMediaCallA(HWND hwnd,WPARAM wRequestID,LPCSTR lpszDeviceClass,LPCSTR lpDeviceID,DWORD dwSize,DWORD dwSecure,LPCSTR lpszDestAddress,LPCSTR lpszAppName,LPCSTR lpszCalledParty,LPCSTR lpszComment) LONG WINAPI <tapi.h>
tapiRequestMediaCallW(HWND hwnd,WPARAM wRequestID,LPCWSTR lpszDeviceClass,LPCWSTR lpDeviceID,DWORD dwSize,DWORD dwSecure,LPCWSTR lpszDestAddress,LPCWSTR lpszAppName,LPCWSTR lpszCalledParty,LPCWSTR lpszComment) LONG WINAPI <tapi.h>
TargetDown(BSTR bstrServerName,BSTR bstrClsidEng)virtual HRESULT WINAPI <comsvcs.h>
TargetPoints(LPTARGINFO,LPPOINT,DWORD,UINT,LPSTROKEINFO) int WINAPI <penwin.h>
TargetUp(BSTR bstrServerName,BSTR bstrClsidEng)virtual HRESULT WINAPI <comsvcs.h>
TaskDialog(HWND hwndOwner,HINSTANCE hInstance,PCWSTR pszWindowTitle,PCWSTR pszMainInstruction,PCWSTR pszContent,TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons,PCWSTR pszIcon,int * pnButton) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
TaskDialogIndirect(const TASKDIALOGCONFIG * pTaskConfig,int * pnButton,int * pnRadioButton,WINBOOL * pfVerificationFlagChecked) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
TASKENUMPROC(DWORD dwThreadId,WORD hMod16,WORD hTask16,LPARAM lpUserDefined) typedef WINBOOL<vdmdbg.h>
TASKENUMPROCEX(DWORD dwThreadId,WORD hMod16,WORD hTask16,PSZ pszModName,PSZ pszFileName,LPARAM lpUserDefined) typedef WINBOOL<vdmdbg.h>
TaskNotify(IDataObject * pdo,VARIANT * arg,VARIANT * param)virtual HRESULT WINAPI <mmc.h>
Tbsi_Context_Create(const TBS_CONTEXT_PARAMS * pContextParams,TBS_HCONTEXT * phContext) TBS_RESULT WINAPI <tbs.h>
Tbsi_Get_TCG_Log(TBS_HCONTEXT hContext,BYTE * pOutputBuf,UINT32 * pOutputBufLen) TBS_RESULT WINAPI <tbs.h>
Tbsi_Physical_Presence_Command(TBS_HCONTEXT hContext,const BYTE * pInputBuf,UINT32 InputBufLen,BYTE * pOutputBuf,UINT32 * pOutputBufLen) TBS_RESULT WINAPI <tbs.h>
Tbsip_Cancel_Commands(TBS_HCONTEXT hContext) TBS_RESULT WINAPI <tbs.h>
Tbsip_Context_Close(TBS_HCONTEXT hContext) TBS_RESULT WINAPI <tbs.h>
Tbsip_Submit_Command(TBS_HCONTEXT hContext,TBS_COMMAND_LOCALITY locality,TBS_COMMAND_PRIORITY priority,const BYTE * pCommandBuf,UINT32 commandBufLen,BYTE * pResultBuf,UINT32 * pResultBufLen) TBS_RESULT WINAPI <tbs.h>
TcAddFilter(HANDLE FlowHandle,PTC_GEN_FILTER pGenericFilter,PHANDLE pFilterHandle) ULONG WINAPI <traffic.h>
TcAddFlow(HANDLE IfcHandle,HANDLE ClFlowCtx,ULONG Flags,PTC_GEN_FLOW pGenericFlow,PHANDLE pFlowHandle) ULONG WINAPI <traffic.h>
TcCloseInterface(HANDLE IfcHandle) ULONG WINAPI <traffic.h>
TcDeleteFilter(HANDLE FilterHandle) ULONG WINAPI <traffic.h>
TcDeleteFlow(HANDLE FlowHandle) ULONG WINAPI <traffic.h>
TcDeregisterClient(HANDLE ClientHandle) ULONG WINAPI <traffic.h>
TcEnumerateFlows(HANDLE IfcHandle,PHANDLE pEnumHandle,PULONG pFlowCount,PULONG pBufSize,PENUMERATION_BUFFER Buffer) ULONG WINAPI <traffic.h>
TcEnumerateInterfaces(HANDLE ClientHandle,PULONG pBufferSize,PTC_IFC_DESCRIPTOR InterfaceBuffer) ULONG WINAPI <traffic.h>
TcGetFlowName(HANDLE FlowHandle,ULONG StrSize,LPSTR pFlowName) ULONG WINAPI <traffic.h>
TcGetFlowNameA(HANDLE FlowHandle,ULONG StrSize,LPSTR pFlowName) ULONG WINAPI <traffic.h>
TcGetFlowNameW(HANDLE FlowHandle,ULONG StrSize,LPWSTR pFlowName) ULONG WINAPI <traffic.h>
TCI_ADD_FLOW_COMPLETE_HANDLER(HANDLE ClFlowCtx,ULONG Status) typedef VOID<traffic.h>
TCI_DEL_FLOW_COMPLETE_HANDLER(HANDLE ClFlowCtx,ULONG Status) typedef VOID<traffic.h>
TCI_MOD_FLOW_COMPLETE_HANDLER(HANDLE ClFlowCtx,ULONG Status) typedef VOID<traffic.h>
TCI_NOTIFY_HANDLER(HANDLE ClRegCtx,HANDLE ClIfcCtx,ULONG Event,HANDLE SubCode,ULONG BufSize,PVOID Buffer) typedef VOID<traffic.h>
TcModifyFlow(HANDLE FlowHandle,PTC_GEN_FLOW pGenericFlow) ULONG WINAPI <traffic.h>
TCOMPfromLZXWindow(w)<fdi.h>
TCOMPfromTypeLevelMemory(t,l,m)<fdi.h>
TcOpenInterface(LPSTR pInterfaceName,HANDLE ClientHandle,HANDLE ClIfcCtx,PHANDLE pIfcHandle) ULONG WINAPI <traffic.h>
TcOpenInterfaceA(LPSTR pInterfaceName,HANDLE ClientHandle,HANDLE ClIfcCtx,PHANDLE pIfcHandle) ULONG WINAPI <traffic.h>
TcOpenInterfaceW(LPWSTR pInterfaceName,HANDLE ClientHandle,HANDLE ClIfcCtx,PHANDLE pIfcHandle) ULONG WINAPI <traffic.h>
TCP_DstPort(ULPTCP pTCP) INLINE DWORD <netmon.h>
TCP_HdrLen(ULPTCP pTCP) INLINE DWORD <netmon.h>
TCP_SrcPort(ULPTCP pTCP) INLINE DWORD <netmon.h>
TcQueryFlow(LPSTR pFlowName,LPGUID pGuidParam,PULONG pBufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcQueryFlowA(LPSTR pFlowName,LPGUID pGuidParam,PULONG pBufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcQueryFlowW(LPWSTR pFlowName,LPGUID pGuidParam,PULONG pBufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcQueryInterface(HANDLE IfcHandle,LPGUID pGuidParam,BOOLEAN NotifyChange,PULONG pBufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcRegisterClient(ULONG TciVersion,HANDLE ClRegCtx,PTCI_CLIENT_FUNC_LIST ClientHandlerList,PHANDLE pClientHandle) ULONG WINAPI <traffic.h>
TcSetFlow(LPSTR pFlowName,LPGUID pGuidParam,ULONG BufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcSetFlowA(LPSTR pFlowName,LPGUID pGuidParam,ULONG BufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcSetFlowW(LPWSTR pFlowName,LPGUID pGuidParam,ULONG BufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TcSetInterface(HANDLE IfcHandle,LPGUID pGuidParam,ULONG BufferSize,PVOID Buffer) ULONG WINAPI <traffic.h>
TdhEnumerateProviderFieldInformation(LPGUID pGuid,EVENT_FIELD_TYPE EventFieldType,PPROVIDER_FIELD_INFOARRAY pBuffer,ULONG * pBufferSize)ULONG __stdcall <tdh.h>
TdhEnumerateProviders(PPROVIDER_ENUMERATION_INFO pBuffer,ULONG * pBufferSize)ULONG __stdcall <tdh.h>
TdhGetEventInformation(PEVENT_RECORD pEvent,ULONG TdhContextCount,PTDH_CONTEXT pTdhContext,PTRACE_EVENT_INFO pBuffer,ULONG * pBufferSize)ULONG __stdcall <tdh.h>
TdhGetEventMapInformation(PEVENT_RECORD pEvent,LPWSTR pMapName,PEVENT_MAP_INFO pBuffer,ULONG * pBufferSize)ULONG __stdcall <tdh.h>
TdhGetProperty(PEVENT_RECORD pEvent,ULONG TdhContextCount,PTDH_CONTEXT pTdhContext,ULONG PropertyDataCount,PPROPERTY_DATA_DESCRIPTOR pPropertyData,ULONG BufferSize,PBYTE pBuffer)ULONG __stdcall <tdh.h>
TdhGetPropertySize(PEVENT_RECORD pEvent,ULONG TdhContextCount,PTDH_CONTEXT pTdhContext,ULONG PropertyDataCount,PPROPERTY_DATA_DESCRIPTOR pPropertyData,ULONG * pPropertySize)ULONG __stdcall <tdh.h>
TdhQueryProviderFieldInformation(LPGUID pGuid,ULONGLONG EventFieldValue,EVENT_FIELD_TYPE EventFieldType,PPROVIDER_FIELD_INFOARRAY pBuffer,ULONG * pBufferSize)ULONG __stdcall <tdh.h>
TdiBuildAccept(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nRequestConnectionInfo,ReturnConnectionInfo) RequestConnectionInfo<tdikrnl.h>
TdiBuildAction(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,MdlAddr) Irp<tdikrnl.h>
TdiBuildAssociateAddress(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,AddrHandle) Irp<tdikrnl.h>
TdiBuildBaseIrp(\\\nbIrp,bDevObj,bFileObj,bCompRoutine,bContxt,bIrpSp,bMinor) bIrp<tdikrnl.h>
TdiBuildConnect(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nTime,RequestConnectionInfo,ReturnConnectionInfo) Time<tdikrnl.h>
TdiBuildDisassociateAddress(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt) Irp<tdikrnl.h>
TdiBuildDisconnect(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,Time,\\\nFlags,RequestConnectionInfo,ReturnConnectionInfo) Flags<tdikrnl.h>
TdiBuildInternalDeviceControlIrp(\\\nIrpSubFunction,DeviceObject,\\\nFileObject,Event,IoStatusBlock) FileObject<tdikrnl.h>
TdiBuildListen(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nFlags,RequestConnectionInfo,ReturnConnectionInfo) Flags<tdikrnl.h>
TdiBuildNetbiosAddress(IN PUCHAR NetbiosName,IN BOOLEAN IsGroupName,IN OUT PTA_NETBIOS_ADDRESS NetworkName)<tdikrnl.h>
TdiBuildNetbiosAddressEa(IN PUCHAR Buffer,IN BOOLEAN IsGroupName,IN PUCHAR NetbiosName)<tdikrnl.h>
TdiBuildQueryInformation(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,QType,MdlAddr) Irp<tdikrnl.h>
TdiBuildReceive(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nMdlAddr,InFlags,ReceiveLen) MdlAddr<tdikrnl.h>
TdiBuildReceiveDatagram(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,MdlAddr,\\\nReceiveLen,ReceiveDatagramInfo,ReturnInfo,InFlags) ReceiveLen<tdikrnl.h>
TdiBuildSend(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nMdlAddr,InFlags,SendLen) MdlAddr<tdikrnl.h>
TdiBuildSendDatagram(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nMdlAddr,SendLen,SendDatagramInfo) MdlAddr<tdikrnl.h>
TdiBuildSetEventHandler(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,\\\nInEventType,InEventHandler,InEventContext) InEventType<tdikrnl.h>
TdiBuildSetInformation(\\\nIrp,DevObj,FileObj,CompRoutine,Contxt,SType,MdlAddr) Irp<tdikrnl.h>
TdiCompleteRequest(Irp, Status)<tdikrnl.h>
TdiCopyBufferToMdl(IN PVOID SourceBuffer,IN ULONG SourceOffset,IN ULONG SourceBytesToCopy,IN PMDL DestinationMdlChain,IN ULONG DestinationOffset,IN PULONG BytesCopied)<tdikrnl.h>
TdiCopyLookaheadData(Destination, Source, Length, ReceiveFlags)<tdikrnl.h>
TdiCopyMdlChainToMdlChain(IN PMDL SourceMdlChain,IN ULONG SourceOffset,IN PMDL DestinationMdlChain,IN ULONG DestinationOffset,OUT PULONG BytesCopied)<tdikrnl.h>
TdiCopyMdlToBuffer(IN PMDL SourceMdlChain,IN ULONG SourceOffset,IN PVOID DestinationBuffer,IN ULONG DestinationOffset,IN ULONG DestinationBufferSize,OUT PULONG BytesCopied)<tdikrnl.h>
TdiDefaultChainedRcvDatagramHandler(IN PVOID TdiEventContext,IN LONG SourceAddressLength,IN PVOID SourceAddress,IN LONG OptionsLength,IN PVOID Options,IN ULONG ReceiveDatagramFlags,IN ULONG ReceiveDatagramLength,IN ULONG StartingOffset,IN PMDL Tsdu,IN PVOID TsduDescriptor)<tdikrnl.h>
TdiDefaultChainedRcvExpeditedHandler(IN PVOID TdiEventContext,IN CONNECTION_CONTEXT ConnectionContext,IN ULONG ReceiveFlags,IN ULONG ReceiveLength,IN ULONG StartingOffset,IN PMDL Tsdu,IN PVOID TsduDescriptor)<tdikrnl.h>
TdiDefaultChainedReceiveHandler(IN PVOID TdiEventContext,IN CONNECTION_CONTEXT ConnectionContext,IN ULONG ReceiveFlags,IN ULONG ReceiveLength,IN ULONG StartingOffset,IN PMDL Tsdu,IN PVOID TsduDescriptor)<tdikrnl.h>
TdiDefaultConnectHandler(IN PVOID TdiEventContext,IN LONG RemoteAddressLength,IN PVOID RemoteAddress,IN LONG UserDataLength,IN PVOID UserData,IN LONG OptionsLength,IN PVOID Options,OUT CONNECTION_CONTEXT * ConnectionContext,OUT PIRP * AcceptIrp)<tdikrnl.h>
TdiDefaultDisconnectHandler(IN PVOID TdiEventContext,IN CONNECTION_CONTEXT ConnectionContext,IN LONG DisconnectDataLength,IN PVOID DisconnectData,IN LONG DisconnectInformationLength,IN PVOID DisconnectInformation,IN ULONG DisconnectFlags)<tdikrnl.h>
TdiDefaultErrorHandler(IN PVOID TdiEventContext,IN NTSTATUS Status)<tdikrnl.h>
TdiDefaultRcvDatagramHandler(IN PVOID TdiEventContext,IN LONG SourceAddressLength,IN PVOID SourceAddress,IN LONG OptionsLength,IN PVOID Options,IN ULONG ReceiveDatagramFlags,IN ULONG BytesIndicated,IN ULONG BytesAvailable,OUT ULONG * BytesTaken,IN PVOID Tsdu,OUT PIRP * IoRequestPacket)<tdikrnl.h>
TdiDefaultRcvExpeditedHandler(IN PVOID TdiEventContext,IN CONNECTION_CONTEXT ConnectionContext,IN ULONG ReceiveFlags,IN ULONG BytesIndicated,IN ULONG BytesAvailable,OUT ULONG * BytesTaken,IN PVOID Tsdu,OUT PIRP * IoRequestPacket)<tdikrnl.h>
TdiDefaultReceiveHandler(IN PVOID TdiEventContext,IN CONNECTION_CONTEXT ConnectionContext,IN ULONG ReceiveFlags,IN ULONG BytesIndicated,IN ULONG BytesAvailable,OUT ULONG * BytesTaken,IN PVOID Tsdu,OUT PIRP * IoRequestPacket)<tdikrnl.h>
TdiDefaultSendPossibleHandler(IN PVOID TdiEventContext,IN PVOID ConnectionContext,IN ULONG BytesAvailable)<tdikrnl.h>
TdiDeregisterAddressChangeHandler(IN HANDLE BindingHandle)<tdikrnl.h>
TdiDeregisterDeviceObject(IN HANDLE DevRegistrationHandle)<tdikrnl.h>
TdiDeregisterNetAddress(IN HANDLE AddrRegistrationHandle)<tdikrnl.h>
TdiDeregisterPnPHandlers(IN HANDLE BindingHandle)<tdikrnl.h>
TdiDeregisterProvider(IN HANDLE ProviderHandle)<tdikrnl.h>
TdiEnumerateAddresses(IN HANDLE BindingHandle)<tdikrnl.h>
TdiInitialize(VOID)<tdikrnl.h>
TdiMapBuffer(IN PMDL MdlChain)<tdikrnl.h>
TdiMapUserRequest(IN PDEVICE_OBJECT DeviceObject,IN PIRP Irp,IN PIO_STACK_LOCATION IrpSp)<tdikrnl.h>
TdiMatchPdoWithChainedReceiveContext(IN PVOID TsduDescriptor,IN PVOID PDO)<tdikrnl.h>
TdiPnPPowerComplete(IN HANDLE BindingHandle,IN PNET_PNP_EVENT PowerEvent,IN NTSTATUS Status)<tdikrnl.h>
TdiPnPPowerRequest(IN PUNICODE_STRING DeviceName,IN PNET_PNP_EVENT PowerEvent,IN PTDI_PNP_CONTEXT Context1,IN PTDI_PNP_CONTEXT Context2,IN ProviderPnPPowerComplete ProtocolCompletionHandler)<tdikrnl.h>
TdiProviderReady(IN HANDLE ProviderHandle)<tdikrnl.h>
TdiRegisterAddressChangeHandler(IN TDI_ADD_ADDRESS_HANDLER AddHandler,IN TDI_DEL_ADDRESS_HANDLER DeleteHandler,OUT HANDLE * BindingHandle)<tdikrnl.h>
TdiRegisterDeviceObject(IN PUNICODE_STRING DeviceName,OUT HANDLE * DevRegistrationHandle)<tdikrnl.h>
TdiRegisterNetAddress(IN PTA_ADDRESS Address,IN PUNICODE_STRING DeviceName,IN PTDI_PNP_CONTEXT Context,OUT HANDLE * AddrRegistrationHandle)<tdikrnl.h>
TdiRegisterNotificationHandler(IN TDI_BIND_HANDLER BindHandler,IN TDI_UNBIND_HANDLER UnbindHandler,OUT HANDLE * BindingHandle)<tdikrnl.h>
TdiRegisterPnPHandlers(IN PTDI_CLIENT_INTERFACE_INFO ClientInterfaceInfo,IN ULONG InterfaceInfoSize,OUT HANDLE * BindingHandle)<tdikrnl.h>
TdiRegisterProvider(IN PUNICODE_STRING ProviderName,OUT HANDLE * ProviderHandle)<tdikrnl.h>
TdiReturnChainedReceives(IN PVOID * TsduDescriptors,IN ULONG NumberOfTsdus)<tdikrnl.h>
TdiUnmapBuffer(IN PMDL MdlChain)<tdikrnl.h>
term() int <sql_1.h>
term2() int <sql_1.h>
TermCompositionTarget(IUnknown * pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget)virtual HRESULT WINAPI <strmif.h>
Terminate(HRESULT hrStatus)virtual HRESULT WINAPI <txdtc.h>
Terminate(RTC_TERMINATE_REASON enReason)virtual HRESULT WINAPI <txdtc.h>
Terminate(void)virtual HRESULT WINAPI <txdtc.h>
TerminateCache() FILEHC_EXPORT WINBOOL WINAPI <filehc.h>
TerminateExtension(DWORD dwFlags) WINBOOL WINAPI <httpext.h>
TerminateFilter(DWORD dwFlags) WINBOOL WINAPI <httpfilt.h>
TerminateJobObject(HANDLE hJob,UINT uExitCode) WINBASEAPI WINBOOL WINAPI <winbase.h>
TerminateLog(VOID) virtual HRESULT WINAPI <ilogobj.h>
TerminateLogArchive(CLFS_LOG_ARCHIVE_CONTEXT pvArchiveContext)WINBOOL WINAPI <clfsw32.h>
TerminateProcess(HANDLE hProcess,UINT uExitCode)WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
TerminateReadLog(PVOID pvCursorContext)WINBOOL WINAPI <clfsw32.h>
TerminateThread(HANDLE hThread,DWORD dwExitCode) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
TerminationFromWpLp(wp,lp)<penwin.h>
TermVFW(void) LONG WINAPI <vfw.h>
TEST_FLAG()()()
TEST_FLAG(Flags, Bit)<classpnp.h>
TestApplyPatchToFile(LPCSTR PatchFileName,LPCSTR OldFileName,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
TestApplyPatchToFileA(LPCSTR PatchFileName,LPCSTR OldFileName,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
TestApplyPatchToFileByBuffers(PBYTE PatchFileBuffer,ULONG PatchFileSize,PBYTE OldFileBuffer,ULONG OldFileSize,ULONG * NewFileSize,ULONG ApplyOptionFlags)WINBOOL PATCHAPI <patchapi.h>
TestApplyPatchToFileByHandles(HANDLE PatchFileHandle,HANDLE OldFileHandle,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
TestApplyPatchToFileW(LPCWSTR PatchFileName,LPCWSTR OldFileName,ULONG ApplyOptionFlags) WINBOOL PATCHAPI <patchapi.h>
TestData(IN PVOID BusContext,IN PVOID DeviceHandle,IN ULONG Opcode,IN PVOID) IN PVOID <hubbusif.h>
TestLanguageFeatures(ULONG uFlags,ULONG * uArraySize,ULONG * puFeatures)virtual HRESULT WINAPI <wmiutils.h>
TestMemory(LPVOID ptr) extern VOID WINAPI <nmsupp.h>
TEXT(quote)<winnt.h>
TextOut(HDC hdc,int x,int y,LPCSTR lpString,int c) WINGDIAPI WINBOOL WINAPI <wingdi.h>
TextOutA(HDC hdc,int x,int y,LPCSTR lpString,int c) WINGDIAPI WINBOOL WINAPI <wingdi.h>
TextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int c) WINGDIAPI WINBOOL WINAPI <wingdi.h>
TextureBrush()	Status ResetTransform<gdiplusbrush.h>
TextureBrush(const Matrix * matrix)	Status SetTransform<gdiplusbrush.h>
TextureBrush(const Matrix * matrix,MatrixOrder order=MatrixOrderPrepend)	Status MultiplyTransform<gdiplusbrush.h>
TextureBrush(const TextureBrush &)	<gdiplusbrush.h>
TextureBrush(GpBrush * brush,Status status)	<gdiplusbrush.h>
TextureBrush(Image * image,const Rect & dstRect,ImageAttributes * imageAttributes=NULL)	<gdiplusbrush.h>
TextureBrush(Image * image,const RectF & dstRect,ImageAttributes * imageAttributes=NULL)	<gdiplusbrush.h>
TextureBrush(Image * image,WrapMode wrapMode,const Rect & dstRect)	<gdiplusbrush.h>
TextureBrush(Image * image,WrapMode wrapMode,const RectF & dstRect)	<gdiplusbrush.h>
TextureBrush(Image * image,WrapMode wrapMode,INT dstX,INT dstY,INT dstWidth,INT dstHeight)	<gdiplusbrush.h>
TextureBrush(Image * image,WrapMode wrapMode,REAL dstX,REAL dstY,REAL dstWidth,REAL dstHeight)	<gdiplusbrush.h>
TextureBrush(Image * image,WrapMode wrapMode=WrapModeTile)	<gdiplusbrush.h>
TextureBrush(Matrix * matrix)	Status GetTransfrom<gdiplusbrush.h>
TextureBrush(REAL angle,MatrixOrder order=MatrixOrderPrepend)	Status RotateTransform<gdiplusbrush.h>
TextureBrush(REAL dx,REAL dy,MatrixOrder order=MatrixOrderPrepend)	Status TranslateTransform<gdiplusbrush.h>
TextureBrush(REAL sx,REAL sy,MatrixOrder order=MatrixOrderPrepend)	Status ScaleTransform<gdiplusbrush.h>
TextureBrush(WrapMode wrapMode)	Status SetWrapMode<gdiplusbrush.h>
TF_CreateInputProcessorProfiles(ITfInputProcessorProfiles ** ppipr)HRESULT WINAPI <msctf.h>
TF_CreateLangBarItemMgr(ITfLangBarItemMgr ** pplbim)HRESULT WINAPI <msctf.h>
TF_CreateLangBarMgr(ITfLangBarMgr ** pppbm)HRESULT WINAPI <msctf.h>
TF_CreateThreadMgr(ITfThreadMgr ** pptim)HRESULT WINAPI <msctf.h>
TF_GetThreadMgr(ITfThreadMgr ** pptim)HRESULT WINAPI <msctf.h>
TF_InvalidAssemblyListCacheIfExist(void)HRESULT WINAPI <msctf.h>
THEMEAPI(type)<uxtheme.h>
Think(BSTR bszText,__LONG32 * pdwReqID)virtual HRESULT WINAPI <agtsvr.h>
Think(BSTR Text,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <agtsvr.h>
THIRD_IPADDRESS(x)<commctrl.h>
THIRDBYTE(VALUE) <wdm.h>
Thread32First(HANDLE hSnapshot,LPTHREADENTRY32 lpte) WINBOOL WINAPI <tlhelp32.h>
Thread32Next(HANDLE hSnapshot,LPTHREADENTRY32 lpte) WINBOOL WINAPI <tlhelp32.h>
ThreadProc() HRESULT <mspthrd.h>
Tidy(void)virtual HRESULT WINAPI <mqoai.h>
TileWindows(HWND hwndParent,UINT wHow,CONST RECT * lpRect,UINT cKids,const HWND * lpKids) WINUSERAPI WORD WINAPI <winuser.h>
timeBeginPeriod(UINT uPeriod) WINMMAPI MMRESULT WINAPI <mmsystem.h>
TIMECALLBACK(UINT uTimerID,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2) typedef void<mmsystem.h>
timeEndPeriod(UINT uPeriod) WINMMAPI MMRESULT WINAPI <mmsystem.h>
TIMEFMT_ENUMPROCA(LPSTR) typedef WINBOOL<winnls.h>
TIMEFMT_ENUMPROCEX(LPWSTR,LPARAM) typedef WINBOOL<winnls.h>
TIMEFMT_ENUMPROCW(LPWSTR) typedef WINBOOL<winnls.h>
timeGetDevCaps(LPTIMECAPS ptc,UINT cbtc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
timeGetSystemTime(LPMMTIME pmmt,UINT cbmmt) WINMMAPI MMRESULT WINAPI <mmsystem.h>
timeGetTime(void) WINMMAPI DWORD WINAPI <mmsystem.h>
timeKillEvent(UINT uTimerID) WINMMAPI MMRESULT WINAPI <mmsystem.h>
TimePlay(ULONG ulTitle,ULONG bcdTime)virtual HRESULT WINAPI <strmif.h>
TimeProvClose(TimeProvHandle hTimeProv) HRESULT WINAPI <timeprov.h>
TimeProvCommand(TimeProvHandle hTimeProv,TimeProvCmd eCmd,TimeProvArgs pvArgs) HRESULT WINAPI <timeprov.h>
TimeProvOpen(WCHAR * wszName,TimeProvSysCallbacks * pSysCallbacks,TimeProvHandle * phTimeProv) HRESULT WINAPI <timeprov.h>
TIMER_HIGH(time)<rtutils.h>
TIMER_LOW(time)<rtutils.h>
TIMERPROC(HWND,UINT,UINT_PTR,DWORD) typedef VOID<winuser.h>
TimeSearch(ULONG bcdTime)virtual HRESULT WINAPI <strmif.h>
timeSetEvent(UINT uDelay,UINT uResolution,LPTIMECALLBACK fptc,DWORD_PTR dwUser,UINT fuEvent) WINMMAPI MMRESULT WINAPI <mmsystem.h>
TitlePlay(ULONG ulTitle)virtual HRESULT WINAPI <strmif.h>
TlsAlloc(VOID) WINBASEAPI DWORD WINAPI <processthreadsapi.h>
TlsFree(DWORD dwTlsIndex) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
TlsGetValue(DWORD dwTlsIndex) WINBASEAPI LPVOID WINAPI <processthreadsapi.h>
TlsSetValue(DWORD dwTlsIndex,LPVOID lpTlsValue) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
TM_ENUM(val,prefix,name)<schemadef.h>
TM_PART(val,prefix,name)<schemadef.h>
TM_PROP(val,prefix,name,primval)<schemadef.h>
TM_STATE(val,prefix,name)<schemadef.h>
TmDown(void)virtual HRESULT WINAPI <txdtc.h>
TMDown(void)virtual HRESULT WINAPI <txdtc.h>
ToAscii(UINT uVirtKey,UINT uScanCode,CONST BYTE * lpKeyState,LPWORD lpChar,UINT uFlags) WINUSERAPI int WINAPI <winuser.h>
ToAsciiEx(UINT uVirtKey,UINT uScanCode,CONST BYTE * lpKeyState,LPWORD lpChar,UINT uFlags,HKL dwhkl) WINUSERAPI int WINAPI <winuser.h>
ToCOLORREF()	COLORREF <gdipluscolor.h>
ToHex(n)<vfw.h>
TokenFromRid(rid, tktype)<correg.h>
TokenFromRid(rid,tktype)<correg.h>
Toolhelp32ReadProcessMemory(DWORD th32ProcessID,LPCVOID lpBaseAddress,LPVOID lpBuffer,SIZE_T cbRead,SIZE_T * lpNumberOfBytesRead) WINBOOL WINAPI <tlhelp32.h>
TopPGSearch(void)virtual HRESULT WINAPI <strmif.h>
TOUCH_COORD_TO_PIXEL(l)<winuser.h>
TouchFileTimes(HANDLE FileHandle,PSYSTEMTIME pSystemTime) WINBOOL IMAGEAPI <imagehlp.h>
ToUnicode(UINT wVirtKey,UINT wScanCode,CONST BYTE * lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags) WINUSERAPI int WINAPI <winuser.h>
ToUnicodeEx(UINT wVirtKey,UINT wScanCode,CONST BYTE * lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags,HKL dwhkl) WINUSERAPI int WINAPI <winuser.h>
TpDestroyCallbackEnviron(PTP_CALLBACK_ENVIRON cbe)FORCEINLINE VOID <winnt.h>
TpInitializeCallbackEnviron(PTP_CALLBACK_ENVIRON cbe)FORCEINLINE VOID <winnt.h>
TpSetCallbackActivationContext(PTP_CALLBACK_ENVIRON cbe,struct _ACTIVATION_CONTEXT * actx)FORCEINLINE VOID <winnt.h>
TpSetCallbackCleanupGroup(PTP_CALLBACK_ENVIRON cbe,PTP_CLEANUP_GROUP cleanup_group,PTP_CLEANUP_GROUP_CANCEL_CALLBACK cleanup_group_cb)FORCEINLINE VOID <winnt.h>
TpSetCallbackFinalizationCallback(PTP_CALLBACK_ENVIRON cbe,PTP_SIMPLE_CALLBACK fini_cb)FORCEINLINE VOID <winnt.h>
TpSetCallbackLongFunction(PTP_CALLBACK_ENVIRON cbe)FORCEINLINE VOID <winnt.h>
TpSetCallbackNoActivationContext(PTP_CALLBACK_ENVIRON cbe)FORCEINLINE VOID <winnt.h>
TpSetCallbackPersistent(PTP_CALLBACK_ENVIRON cbe)FORCEINLINE VOID <winnt.h>
TpSetCallbackPriority(PTP_CALLBACK_ENVIRON cbe,TP_CALLBACK_PRIORITY prio)FORCEINLINE VOID <winnt.h>
TpSetCallbackRaceWithDll(PTP_CALLBACK_ENVIRON cbe,PVOID h)FORCEINLINE VOID <winnt.h>
TpSetCallbackThreadpool(PTP_CALLBACK_ENVIRON cbe,PTP_POOL pool)FORCEINLINE VOID <winnt.h>
TPtoDP(LPPOINT,int) WINBOOL WINAPI <penwin.h>
TR_COMPARE_NETWORK_ADDRESSES(_A, _B, _Result)<xfilter.h>
TR_COMPARE_NETWORK_ADDRESSES_EQ(_A, _B, _Result)<xfilter.h>
TR_COPY_NETWORK_ADDRESS(_D, _S)<xfilter.h>
TR_IS_BROADCAST(_Address, _Result)<xfilter.h>
TR_IS_FUNCTIONAL(_Address, _Result)<xfilter.h>
TR_IS_GROUP(_Address, _Result)<xfilter.h>
TR_IS_MAC_FRAME(_PacketHeader)<xfilter.h>
TR_IS_NOT_DIRECTED(_Address, _Result)<xfilter.h>
TR_IS_SOURCE_ROUTING(_Address, _Result)<xfilter.h>
TR_VALUE(ed,ppn,ar,pl,d,a,ma,p)<kxia64.h>
TraceCloseLogFile() RETCODE SQL_API <sqlext.h>
TraceDeregister(DWORD dwTraceID) DWORD WINAPI <rtutils.h>
TraceDeregisterA(DWORD dwTraceID) DWORD WINAPI <rtutils.h>
TraceDeregisterEx(DWORD dwTraceID,DWORD dwFlags) DWORD WINAPI <rtutils.h>
TraceDeregisterExA(DWORD dwTraceID,DWORD dwFlags) DWORD WINAPI <rtutils.h>
TraceDeregisterExW(DWORD dwTraceID,DWORD dwFlags) DWORD WINAPI <rtutils.h>
TraceDeregisterW(DWORD dwTraceID) DWORD WINAPI <rtutils.h>
TraceDumpA(a,b,c,d,e,f)<rtutils.h>
TraceDumpEx(DWORD dwTraceID,DWORD dwFlags,LPBYTE lpbBytes,DWORD dwByteCount,DWORD dwGroupSize,WINBOOL bAddressPrefix,LPCSTR lpszPrefix) DWORD WINAPI <rtutils.h>
TraceDumpExA(DWORD dwTraceID,DWORD dwFlags,LPBYTE lpbBytes,DWORD dwByteCount,DWORD dwGroupSize,WINBOOL bAddressPrefix,LPCSTR lpszPrefix) DWORD WINAPI <rtutils.h>
TraceDumpExW(DWORD dwTraceID,DWORD dwFlags,LPBYTE lpbBytes,DWORD dwByteCount,DWORD dwGroupSize,WINBOOL bAddressPrefix,LPCWSTR lpszPrefix) DWORD WINAPI <rtutils.h>
TraceDumpW(a,b,c,d,e,f)<rtutils.h>
TraceEvent(TRACEHANDLE TraceHandle,PEVENT_TRACE_HEADER EventTrace) EXTERN_C ULONG WMIAPI <evntrace.h>
TraceEventInstance(TRACEHANDLE TraceHandle,PEVENT_INSTANCE_HEADER EventTrace,PEVENT_INSTANCE_INFO InstInfo,PEVENT_INSTANCE_INFO ParentInstInfo) EXTERN_C ULONG WMIAPI <evntrace.h>
TraceGetConsole(DWORD dwTraceID,LPHANDLE lphConsole) DWORD WINAPI <rtutils.h>
TraceGetConsoleA(DWORD dwTraceID,LPHANDLE lphConsole) DWORD WINAPI <rtutils.h>
TraceGetConsoleW(DWORD dwTraceID,LPHANDLE lphConsole) DWORD WINAPI <rtutils.h>
TraceMessage(TRACEHANDLE LoggerHandle,ULONG MessageFlags,LPCGUID MessageGuid,USHORT MessageNumber,...) EXTERN_C ULONG __cdecl <evntrace.h>
TraceMessageVa(TRACEHANDLE LoggerHandle,ULONG MessageFlags,LPCGUID MessageGuid,USHORT MessageNumber,va_list MessageArgList) EXTERN_C ULONG <evntrace.h>
TraceOpenLogFile(LPWSTR,LPWSTR,DWORD) RETCODE SQL_API <sqlext.h>
TracePrintf(DWORD dwTraceID,LPCSTR lpszFormat,...) DWORD __cdecl <rtutils.h>
TracePrintfA(DWORD dwTraceID,LPCSTR lpszFormat,...) DWORD __cdecl <rtutils.h>
TracePrintfEx(DWORD dwTraceID,DWORD dwFlags,LPCSTR lpszFormat,...) DWORD __cdecl <rtutils.h>
TracePrintfExA(DWORD dwTraceID,DWORD dwFlags,LPCSTR lpszFormat,...) DWORD __cdecl <rtutils.h>
TracePrintfExW(DWORD dwTraceID,DWORD dwFlags,LPCWSTR lpszFormat,...) DWORD __cdecl <rtutils.h>
TracePrintfW(DWORD dwTraceID,LPCWSTR lpszFormat,...) DWORD __cdecl <rtutils.h>
TracePutsA(a,b)<rtutils.h>
TracePutsEx(DWORD dwTraceID,DWORD dwFlags,LPCSTR lpszString) DWORD WINAPI <rtutils.h>
TracePutsExA(DWORD dwTraceID,DWORD dwFlags,LPCSTR lpszString) DWORD WINAPI <rtutils.h>
TracePutsExW(DWORD dwTraceID,DWORD dwFlags,LPCWSTR lpszString) DWORD WINAPI <rtutils.h>
TracePutsW(a,b)<rtutils.h>
TraceQueryInformation(TRACEHANDLE SessionHandle,TRACE_INFO_CLASS InformationClass,PVOID TraceInformation,ULONG InformationLength,PULONG ReturnLength) EXTERN_C ULONG WMIAPI <evntrace.h>
TraceRegisterA(a)<rtutils.h>
TraceRegisterEx(LPCSTR lpszCallerName,DWORD dwFlags) DWORD WINAPI <rtutils.h>
TraceRegisterExA(LPCSTR lpszCallerName,DWORD dwFlags) DWORD WINAPI <rtutils.h>
TraceRegisterExW(LPCWSTR lpszCallerName,DWORD dwFlags) DWORD WINAPI <rtutils.h>
TraceRegisterW(a)<rtutils.h>
TraceReturn(RETCODE,RETCODE) VOID SQL_API <sqlext.h>
TraceSetInformation(TRACEHANDLE SessionHandle,TRACE_INFO_CLASS InformationClass,PVOID TraceInformation,ULONG InformationLength) EXTERN_C ULONG WMIAPI <evntrace.h>
TraceSz(psz)<mapidbg.h>
TraceSz1(psz,a1)<mapidbg.h>
TraceSz2(psz,a1,a2)<mapidbg.h>
TraceSz3(psz,a1,a2,a3)<mapidbg.h>
TraceSz4(psz,a1,a2,a3,a4)<mapidbg.h>
TraceSz5(psz,a1,a2,a3,a4,a5)<mapidbg.h>
TraceSz6(psz,a1,a2,a3,a4,a5,a6)<mapidbg.h>
TraceSz7(psz,a1,a2,a3,a4,a5,a6,a7)<mapidbg.h>
TraceSz8(psz,a1,a2,a3,a4,a5,a6,a7,a8)<mapidbg.h>
TraceSz9(psz,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapidbg.h>
TraceVersion() DWORD SQL_API <sqlext.h>
TraceVprintfA(a,b,c)<rtutils.h>
TraceVprintfEx(DWORD dwTraceID,DWORD dwFlags,LPCSTR lpszFormat,va_list arglist) DWORD WINAPI <rtutils.h>
TraceVprintfExA(DWORD dwTraceID,DWORD dwFlags,LPCSTR lpszFormat,va_list arglist) DWORD WINAPI <rtutils.h>
TraceVprintfExW(DWORD dwTraceID,DWORD dwFlags,LPCWSTR lpszFormat,va_list arglist) DWORD WINAPI <rtutils.h>
TraceVprintfW(a,b,c)<rtutils.h>
TraceVSControl(DWORD) RETCODE SQL_API <sqlext.h>
TrackerConfig(CSC_TrackerConfig trackerConfig,LPCWSTR szTrackerAppName,LPCWSTR szTrackerCtxName)virtual HRESULT WINAPI <comsvcs.h>
TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack) WINUSERAPI WINBOOL WINAPI <winuser.h>
TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,CONST RECT * prcRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS) WINUSERAPI WINBOOL WINAPI <winuser.h>
TrackResource(const RESID __MIDL_0021)virtual HRESULT WINAPI <comsvcs.h>
TrackResourceS(constSRESID __MIDL_0022)virtual HRESULT WINAPI <comsvcs.h>
trailing_const_expr() int <sql_1.h>
trailing_or_null() int <sql_1.h>
trailing_prop_expr() int <sql_1.h>
trailing_prop_expr2() int <sql_1.h>
TrainContext(LPRCRESULT,LPSYE,int,LPSYC,int) WINBOOL WINAPI <penwin.h>
TrainContextInternal(LPRCRESULT,LPSYE,int,LPSYC,int) WINBOOL WINAPI <penwin.h>
TrainHREC(HREC,LPSYV,UINT,HPENDATA,UINT) int WINAPI <penwin.h>
TrainInk(LPRC,HPENDATA,LPSYV) WINBOOL WINAPI <penwin.h>
TrainInkInternal(LPRC,HPENDATA,LPSYV) WINBOOL WINAPI <penwin.h>
Transaction(LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
TransactionCommitted(byte * pPrepInfo,ULONG cbPrepInfo)virtual HRESULT WINAPI <txdtc.h>
TransactionOutcome(XACTSTAT XactStat,BOID * pboidReason)virtual HRESULT WINAPI <txcoord.h>
TransactionTimeout(ULONG ulTimeoutSec)virtual HRESULT WINAPI <comsvcs.h>
TransactionUOW(VARIANT Index,LPVARIANT pItem)virtual HRESULT WINAPI <comsvcs.h>
TransactNamedPipe(HANDLE hNamedPipe,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
Transfer(BSTR bstrLogicalPath)virtual HRESULT WINAPI <tapi3if.h>
Transfer(ITBasicCallControl * pCall,VARIANT_BOOL fSync)virtual HRESULT WINAPI <tapi3if.h>
Transform(const Matrix * matrix)	Status <gdipluspath.h>
TransformGlobalToLocal(POINT ptGlobal,POINT * pptLocal)virtual HRESULT WINAPI <mshtmlc.h>
TransformLocalToGlobal(POINT ptLocal,POINT * pptGlobal)virtual HRESULT WINAPI <mshtmlc.h>
TransformPoint(D2D1_POINT_2F point)D2D1FORCEINLINE D2D1_POINT_2F <mshtmlc.h>
TransformPoint(POINT * pPoint,COORD_SYSTEM eSource,COORD_SYSTEM eDestination,IHTMLElement * pIElement)virtual HRESULT WINAPI <mshtmlc.h>
TransformPoints(CoordinateSpace destSpace,CoordinateSpace srcSpace,Point * pts,INT count)	Status <gdiplusmatrix.h>
TransformPoints(CoordinateSpace destSpace,CoordinateSpace srcSpace,PointF * pts,INT count)	Status <gdiplusmatrix.h>
TransformPoints(Point * pts,INT count=1)	Status <gdiplusmatrix.h>
TransformPoints(PointF * pts,INT count=1)	Status <gdiplusmatrix.h>
TransformRect(RECT * pRect,COORD_SYSTEM eSource,COORD_SYSTEM eDestination,IHTMLElement * pIElement)virtual HRESULT WINAPI <mshtmlc.h>
TransformVectors(Point * pts,INT count=1)	Status <gdiplusmatrix.h>
TransformVectors(PointF * pts,INT count=1)	Status <gdiplusmatrix.h>
Translate(INT dx,INT dy)__inline__ Status Region::<gdiplusmatrix.h>
Translate(REAL dx,REAL dy)__inline__ Status Region::<gdiplusmatrix.h>
Translate(REAL offsetX,REAL offsetY,MatrixOrder order=MatrixOrderPrepend)	Status <gdiplusmatrix.h>
TranslateAccelerator(DISPID inEvtDispId,IHTMLEventObj * pIEventObj)virtual HRESULT WINAPI <winuser.h>
TranslateAccelerator(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg) WINUSERAPI int WINAPI <winuser.h>
TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg) WINUSERAPI int WINAPI <winuser.h>
TranslateAcceleratorW(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg) WINUSERAPI int WINAPI <winuser.h>
TranslateAddress(BSTR pAddressToTranslate,__LONG32 lCard,__LONG32 lTranslateOptions,ITAddressTranslationInfo ** ppTranslated)virtual HRESULT WINAPI <tapi3if.h>
TranslateBitmapBits(HTRANSFORM,PVOID,BMFORMAT,DWORD,DWORD,DWORD,PVOID,BMFORMAT,DWORD,PBMCALLBACKFN,LPARAM) WINBOOL WINAPI <icm.h>
TranslateCharsetInfo(DWORD * lpSrc,LPCHARSETINFO lpCs,DWORD dwFlags) WINGDIAPI WINBOOL WINAPI <wingdi.h>
TranslateClip(INT dx,INT dy)	Status <gdiplusgraphics.h>
TranslateClip(REAL dx,REAL dy)	Status <gdiplusgraphics.h>
TranslateColors(HTRANSFORM,PCOLOR,DWORD,COLORTYPE,PCOLOR,COLORTYPE) WINBOOL WINAPI <icm.h>
TranslateDialog(TAPIHWND hwndOwner,BSTR pAddressIn)virtual HRESULT WINAPI <tapi3if.h>
TranslateInfString(PCSTR pszInfFilename,PCSTR pszInstallSection,PCSTR pszTranslateSection,PCSTR pszTranslateKey,PSTR pszBuffer,DWORD dwBufferSize,PDWORD pdwRequiredSize,PVOID pvReserved) HRESULT WINAPI <advpub.h>
TRANSLATEINFSTRING(PCSTR pszInfFilename,PCSTR pszInstallSection,PCSTR pszTranslateSection,PCSTR pszTranslateKey,PSTR pszBuffer,DWORD dwBufferSize,PDWORD pdwRequiredSize,PVOID pvReserved) typedef HRESULT<advpub.h>
TranslateInfStringEx(HINF hInf,PCSTR pszInfFilename,PCSTR pszTranslateSection,PCSTR pszTranslateKey,PSTR pszBuffer,DWORD dwBufferSize,PDWORD pdwRequiredSize,PVOID pvReserved) HRESULT WINAPI <advpub.h>
TranslateMDISysAccel(HWND hWndClient,LPMSG lpMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
TranslateMessage(CONST MSG * lpMsg) WINUSERAPI WINBOOL WINAPI <winuser.h>
TranslateName(LPCSTR lpAccountName,EXTENDED_NAME_FORMAT AccountNameFormat,EXTENDED_NAME_FORMAT DesiredNameFormat,LPSTR lpTranslatedName,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
TranslateNameA(LPCSTR lpAccountName,EXTENDED_NAME_FORMAT AccountNameFormat,EXTENDED_NAME_FORMAT DesiredNameFormat,LPSTR lpTranslatedName,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
TranslateNameW(LPCWSTR lpAccountName,EXTENDED_NAME_FORMAT AccountNameFormat,EXTENDED_NAME_FORMAT DesiredNameFormat,LPWSTR lpTranslatedName,PULONG nSize) BOOLEAN SEC_ENTRY <secext.h>
TranslateTransform(REAL dx,REAL dy,MatrixOrder order=MatrixOrderPrepend)	Status <gdipluspen.h>
TranslateTridToXid(DWORD * pdwITransaction,DWORD dwRMCookie,XID * pXid)virtual HRESULT WINAPI <oletx2xa.h>
TranslateTridToXid(ITransaction * pITransaction,GUID * pguidBqual,XID * pXid)virtual HRESULT WINAPI <oletx2xa.h>
TranslateURL(PCSTR pcszURL,DWORD dwInFlags,PSTR * ppszTranslatedURL) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
TranslateURLA(PCSTR pcszURL,DWORD dwInFlags,PSTR * ppszTranslatedURL) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
TranslateURLW(PCWSTR pcszURL,DWORD dwInFlags,PWSTR UNALIGNED * ppszTranslatedURL) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
Translation(D2D1_SIZE_F size)static D2D1FORCEINLINE Matrix3x2F <d2d1helper.h>
Translation(FLOAT x,FLOAT y)static D2D1FORCEINLINE Matrix3x2F <d2d1helper.h>
TransmitCommChar(HANDLE hFile,char cChar) WINBASEAPI WINBOOL WINAPI <winbase.h>
TransmitFile(SOCKET hSocket,HANDLE hFile,DWORD nNumberOfBytesToWrite,DWORD nNumberOfBytesPerSend,LPOVERLAPPED lpOverlapped,LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,DWORD dwReserved) WINBOOL WINAPI <winsock.h>
TransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Trap()<mapidbg.h>
TrapSz(psz)<mapidbg.h>
TrapSz1(psz,a1)<mapidbg.h>
TrapSz2(psz,a1,a2)<mapidbg.h>
TrapSz3(psz,a1,a2,a3)<mapidbg.h>
TrapSz4(psz,a1,a2,a3,a4)<mapidbg.h>
TrapSz5(psz,a1,a2,a3,a4,a5)<mapidbg.h>
TrapSz6(psz,a1,a2,a3,a4,a5,a6)<mapidbg.h>
TrapSz7(psz,a1,a2,a3,a4,a5,a6,a7)<mapidbg.h>
TrapSz8(psz,a1,a2,a3,a4,a5,a6,a7,a8)<mapidbg.h>
TrapSz9(psz,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapidbg.h>
Travel(IUnknown * punk,int iOffset)virtual HRESULT WINAPI <shdeprecated.h>
TreeResetNamedSecurityInfo(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,WINBOOL KeepExplicit,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args) WINADVAPI DWORD WINAPI <aclapi.h>
TreeResetNamedSecurityInfoA(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,WINBOOL KeepExplicit,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args) WINADVAPI DWORD WINAPI <aclapi.h>
TreeResetNamedSecurityInfoW(LPWSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,WINBOOL KeepExplicit,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args) WINADVAPI DWORD WINAPI <aclapi.h>
TreeSetNamedSecurityInfo(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,DWORD dwAction,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args) WINADVAPI DWORD WINAPI <aclapi.h>
TreeSetNamedSecurityInfoA(LPSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,DWORD dwAction,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args) WINADVAPI DWORD WINAPI <aclapi.h>
TreeSetNamedSecurityInfoW(LPWSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,DWORD dwAction,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args) WINADVAPI DWORD WINAPI <aclapi.h>
TreeView_CreateDragImage(hwnd,hitem)<commctrl.h>
TreeView_DeleteAllItems(hwnd)<commctrl.h>
TreeView_DeleteItem(hwnd,hitem)<commctrl.h>
TreeView_EditLabel(hwnd,hitem)<commctrl.h>
TreeView_EndEditLabelNow(hwnd,fCancel)<commctrl.h>
TreeView_EnsureVisible(hwnd,hitem)<commctrl.h>
TreeView_Expand(hwnd,hitem,code)<commctrl.h>
TreeView_GetBkColor(hwnd)<commctrl.h>
TreeView_GetCheckState(hwndTV,hti)<commctrl.h>
TreeView_GetChild(hwnd,hitem)<commctrl.h>
TreeView_GetCount(hwnd)<commctrl.h>
TreeView_GetDropHilight(hwnd)<commctrl.h>
TreeView_GetEditControl(hwnd)<commctrl.h>
TreeView_GetExtendedStyle(hwnd)<commctrl.h>
TreeView_GetFirstVisible(hwnd)<commctrl.h>
TreeView_GetImageList(hwnd,iImage)<commctrl.h>
TreeView_GetIndent(hwnd)<commctrl.h>
TreeView_GetInsertMarkColor(hwnd)<commctrl.h>
TreeView_GetISearchString(hwndTV,lpsz)<commctrl.h>
TreeView_GetItem(hwnd,pitem)<commctrl.h>
TreeView_GetItemHeight(hwnd)<commctrl.h>
TreeView_GetItemPartRect(hwnd, hitem, prc, partid)<commctrl.h>
TreeView_GetItemRect(hwnd,hitem,prc,code)<commctrl.h>
TreeView_GetItemState(hwndTV,hti,mask)<commctrl.h>
TreeView_GetLastVisible(hwnd)<commctrl.h>
TreeView_GetLineColor(hwnd)<commctrl.h>
TreeView_GetNextItem(hwnd,hitem,code)<commctrl.h>
TreeView_GetNextSelected(hwnd, hitem)<commctrl.h>
TreeView_GetNextSibling(hwnd,hitem)<commctrl.h>
TreeView_GetNextVisible(hwnd,hitem)<commctrl.h>
TreeView_GetParent(hwnd,hitem)<commctrl.h>
TreeView_GetPrevSibling(hwnd,hitem)<commctrl.h>
TreeView_GetPrevVisible(hwnd,hitem)<commctrl.h>
TreeView_GetRoot(hwnd)<commctrl.h>
TreeView_GetScrollTime(hwnd)<commctrl.h>
TreeView_GetSelectedCount(hwnd)<commctrl.h>
TreeView_GetSelection(hwnd)<commctrl.h>
TreeView_GetTextColor(hwnd)<commctrl.h>
TreeView_GetToolTips(hwnd)<commctrl.h>
TreeView_GetUnicodeFormat(hwnd)<commctrl.h>
TreeView_GetVisibleCount(hwnd)<commctrl.h>
TreeView_HitTest(hwnd,lpht)<commctrl.h>
TreeView_InsertItem(hwnd,lpis)<commctrl.h>
TreeView_MapAccIDToHTREEITEM(hwnd,id)<commctrl.h>
TreeView_MapHTREEITEMToAccID(hwnd,htreeitem)<commctrl.h>
TreeView_Select(hwnd,hitem,code)<commctrl.h>
TreeView_SelectDropTarget(hwnd,hitem)<commctrl.h>
TreeView_SelectItem(hwnd,hitem)<commctrl.h>
TreeView_SelectSetFirstVisible(hwnd,hitem)<commctrl.h>
TreeView_SetAutoScrollInfo(hwnd, uPixPerSec, uUpdateTime)<commctrl.h>
TreeView_SetBkColor(hwnd,clr)<commctrl.h>
TreeView_SetBorder(hwnd, dwFlags, xBorder, yBorder)<commctrl.h>
TreeView_SetCheckState(hwndTV,hti,fCheck)<commctrl.h>
TreeView_SetExtendedStyle(hwnd, dw, mask)<commctrl.h>
TreeView_SetHot(hwnd, hitem)<commctrl.h>
TreeView_SetImageList(hwnd,himl,iImage)<commctrl.h>
TreeView_SetIndent(hwnd,indent)<commctrl.h>
TreeView_SetInsertMark(hwnd,hItem,fAfter)<commctrl.h>
TreeView_SetInsertMarkColor(hwnd,clr)<commctrl.h>
TreeView_SetItem(hwnd,pitem)<commctrl.h>
TreeView_SetItemHeight(hwnd,iHeight)<commctrl.h>
TreeView_SetItemState(hwndTV,hti,data,_mask)<commctrl.h>
TreeView_SetLineColor(hwnd,clr)<commctrl.h>
TreeView_SetScrollTime(hwnd,uTime)<commctrl.h>
TreeView_SetTextColor(hwnd,clr)<commctrl.h>
TreeView_SetToolTips(hwnd,hwndTT)<commctrl.h>
TreeView_SetUnicodeFormat(hwnd,fUnicode)<commctrl.h>
TreeView_ShowInfoTip(hwnd, hitem)<commctrl.h>
TreeView_SortChildren(hwnd,hitem,recurse)<commctrl.h>
TreeView_SortChildrenCB(hwnd,psort,recurse)<commctrl.h>
TrimPenData(HPENDATA,DWORD,DWORD) int WINAPI <penwin.h>
TryAcquireSRWLockExclusive(PSRWLOCK SRWLock) WINBASEAPI BOOLEAN WINAPI <synchapi.h>
TryAcquireSRWLockShared(PSRWLOCK SRWLock) WINBASEAPI BOOLEAN WINAPI <synchapi.h>
TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection) WINBASEAPI WINBOOL WINAPI <synchapi.h>
TryLock() WINBOOL <msputils.h>
TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK pfns,PVOID pv,PTP_CALLBACK_ENVIRON pcbe) WINBASEAPI WINBOOL WINAPI <threadpoolapiset.h>
TSPI_lineAccept(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineAddToConference(DRV_REQUESTID dwRequestID,HDRVCALL hdConfCall,HDRVCALL hdConsultCall) LONG WINAPI <tspi.h>
TSPI_lineAnswer(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineBlindTransfer(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tspi.h>
TSPI_lineClose(HDRVLINE hdLine) LONG WINAPI <tspi.h>
TSPI_lineCloseCall(HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineCloseMSPInstance(HDRVMSPLINE hdMSPLine) LONG WINAPI <tspi.h>
TSPI_lineCompleteCall(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPDWORD lpdwCompletionID,DWORD dwCompletionMode,DWORD dwMessageID) LONG WINAPI <tspi.h>
TSPI_lineCompleteTransfer(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,HDRVCALL hdConsultCall,HTAPICALL htConfCall,LPHDRVCALL lphdConfCall,DWORD dwTransferMode) LONG WINAPI <tspi.h>
TSPI_lineConditionalMediaDetection(HDRVLINE hdLine,DWORD dwMediaModes,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tspi.h>
TSPI_lineCreateMSPInstance(HDRVLINE hdLine,DWORD dwAddressID,HTAPIMSPLINE htMSPLine,LPHDRVMSPLINE lphdMSPLine) LONG WINAPI <tspi.h>
TSPI_lineDevSpecific(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwAddressID,HDRVCALL hdCall,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineDevSpecificFeature(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwFeature,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineDial(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tspi.h>
TSPI_lineDrop(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineDropNoOwner(HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineDropOnClose(HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineForward(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD bAllAddresses,DWORD dwAddressID,LPLINEFORWARDLIST const lpForwardList,DWORD dwNumRingsNoAnswer,HTAPICALL htConsultCall,LPHDRVCALL lphdConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tspi.h>
TSPI_lineGatherDigits(HDRVCALL hdCall,DWORD dwEndToEndID,DWORD dwDigitModes,LPWSTR lpsDigits,DWORD dwNumDigits,LPCWSTR lpszTerminationDigits,DWORD dwFirstDigitTimeout,DWORD dwInterDigitTimeout) LONG WINAPI <tspi.h>
TSPI_lineGenerateDigits(HDRVCALL hdCall,DWORD dwEndToEndID,DWORD dwDigitMode,LPCWSTR lpszDigits,DWORD dwDuration) LONG WINAPI <tspi.h>
TSPI_lineGenerateTone(HDRVCALL hdCall,DWORD dwEndToEndID,DWORD dwToneMode,DWORD dwDuration,DWORD dwNumTones,LPLINEGENERATETONE const lpTones) LONG WINAPI <tspi.h>
TSPI_lineGetAddressCaps(DWORD dwDeviceID,DWORD dwAddressID,DWORD dwTSPIVersion,DWORD dwExtVersion,LPLINEADDRESSCAPS lpAddressCaps) LONG WINAPI <tspi.h>
TSPI_lineGetAddressID(HDRVLINE hdLine,LPDWORD lpdwAddressID,DWORD dwAddressMode,LPCWSTR lpsAddress,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineGetAddressStatus(HDRVLINE hdLine,DWORD dwAddressID,LPLINEADDRESSSTATUS lpAddressStatus) LONG WINAPI <tspi.h>
TSPI_lineGetCallAddressID(HDRVCALL hdCall,LPDWORD lpdwAddressID) LONG WINAPI <tspi.h>
TSPI_lineGetCallHubTracking(HDRVLINE hdLine,LPLINECALLHUBTRACKINGINFO lpTrackingInfo) LONG WINAPI <tspi.h>
TSPI_lineGetCallIDs(HDRVCALL hdCall,LPDWORD lpdwAddressID,LPDWORD lpdwCallID,LPDWORD lpdwRelatedCallID) LONG WINAPI <tspi.h>
TSPI_lineGetCallInfo(HDRVCALL hdCall,LPLINECALLINFO lpCallInfo) LONG WINAPI <tspi.h>
TSPI_lineGetCallStatus(HDRVCALL hdCall,LPLINECALLSTATUS lpCallStatus) LONG WINAPI <tspi.h>
TSPI_lineGetDevCaps(DWORD dwDeviceID,DWORD dwTSPIVersion,DWORD dwExtVersion,LPLINEDEVCAPS lpLineDevCaps) LONG WINAPI <tspi.h>
TSPI_lineGetDevConfig(DWORD dwDeviceID,LPVARSTRING lpDeviceConfig,LPCWSTR lpszDeviceClass) LONG WINAPI <tspi.h>
TSPI_lineGetExtensionID(DWORD dwDeviceID,DWORD dwTSPIVersion,LPLINEEXTENSIONID lpExtensionID) LONG WINAPI <tspi.h>
TSPI_lineGetIcon(DWORD dwDeviceID,LPCWSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tspi.h>
TSPI_lineGetID(HDRVLINE hdLine,DWORD dwAddressID,HDRVCALL hdCall,DWORD dwSelect,LPVARSTRING lpDeviceID,LPCWSTR lpszDeviceClass,HANDLE hTargetProcess) LONG WINAPI <tspi.h>
TSPI_lineGetLineDevStatus(HDRVLINE hdLine,LPLINEDEVSTATUS lpLineDevStatus) LONG WINAPI <tspi.h>
TSPI_lineGetNumAddressIDs(HDRVLINE hdLine,LPDWORD lpdwNumAddressIDs) LONG WINAPI <tspi.h>
TSPI_lineHold(DRV_REQUESTID dwRequestID,HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineMakeCall(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,HTAPICALL htCall,LPHDRVCALL lphdCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tspi.h>
TSPI_lineMonitorDigits(HDRVCALL hdCall,DWORD dwDigitModes) LONG WINAPI <tspi.h>
TSPI_lineMonitorMedia(HDRVCALL hdCall,DWORD dwMediaModes) LONG WINAPI <tspi.h>
TSPI_lineMonitorTones(HDRVCALL hdCall,DWORD dwToneListID,LPLINEMONITORTONE const lpToneList,DWORD dwNumEntries) LONG WINAPI <tspi.h>
TSPI_lineMSPIdentify(DWORD dwDeviceID,GUID * pCLSID) LONG WINAPI <tspi.h>
TSPI_lineNegotiateExtVersion(DWORD dwDeviceID,DWORD dwTSPIVersion,DWORD dwLowVersion,DWORD dwHighVersion,LPDWORD lpdwExtVersion) LONG WINAPI <tspi.h>
TSPI_lineNegotiateTSPIVersion(DWORD dwDeviceID,DWORD dwLowVersion,DWORD dwHighVersion,LPDWORD lpdwTSPIVersion) LONG WINAPI <tspi.h>
TSPI_lineOpen(DWORD dwDeviceID,HTAPILINE htLine,LPHDRVLINE lphdLine,DWORD dwTSPIVersion,LINEEVENT lpfnEventProc) LONG WINAPI <tspi.h>
TSPI_linePark(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,DWORD dwParkMode,LPCWSTR lpszDirAddress,LPVARSTRING lpNonDirAddress) LONG WINAPI <tspi.h>
TSPI_linePickup(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwAddressID,HTAPICALL htCall,LPHDRVCALL lphdCall,LPCWSTR lpszDestAddress,LPCWSTR lpszGroupID) LONG WINAPI <tspi.h>
TSPI_linePrepareAddToConference(DRV_REQUESTID dwRequestID,HDRVCALL hdConfCall,HTAPICALL htConsultCall,LPHDRVCALL lphdConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tspi.h>
TSPI_lineReceiveMSPData(HDRVLINE hdLine,HDRVCALL hdCall,HDRVMSPLINE hdMSPLine,LPVOID pBuffer,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineRedirect(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCWSTR lpszDestAddress,DWORD dwCountryCode) LONG WINAPI <tspi.h>
TSPI_lineReleaseUserUserInfo(DRV_REQUESTID dwRequestID,HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineRemoveFromConference(DRV_REQUESTID dwRequestID,HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineSecureCall(DRV_REQUESTID dwRequestID,HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineSelectExtVersion(HDRVLINE hdLine,DWORD dwExtVersion) LONG WINAPI <tspi.h>
TSPI_lineSendUserUserInfo(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPCSTR lpsUserUserInfo,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineSetAppSpecific(HDRVCALL hdCall,DWORD dwAppSpecific) LONG WINAPI <tspi.h>
TSPI_lineSetCallData(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPVOID lpCallData,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_lineSetCallHubTracking(HDRVLINE hdLine,LPLINECALLHUBTRACKINGINFO lpTrackingInfo) LONG WINAPI <tspi.h>
TSPI_lineSetCallParams(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,DWORD dwBearerMode,DWORD dwMinRate,DWORD dwMaxRate,LPLINEDIALPARAMS const lpDialParams) LONG WINAPI <tspi.h>
TSPI_lineSetCallQualityOfService(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,LPVOID lpSendingFlowspec,DWORD dwSendingFlowspecSize,LPVOID lpReceivingFlowspec,DWORD dwReceivingFlowspecSize) LONG WINAPI <tspi.h>
TSPI_lineSetCallTreatment(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,DWORD dwTreatment) LONG WINAPI <tspi.h>
TSPI_lineSetCurrentLocation(DWORD dwLocation) LONG WINAPI <tspi.h>
TSPI_lineSetDefaultMediaDetection(HDRVLINE hdLine,DWORD dwMediaModes) LONG WINAPI <tspi.h>
TSPI_lineSetDevConfig(DWORD dwDeviceID,LPVOID const lpDeviceConfig,DWORD dwSize,LPCWSTR lpszDeviceClass) LONG WINAPI <tspi.h>
TSPI_lineSetLineDevStatus(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwStatusToChange,DWORD fStatus) LONG WINAPI <tspi.h>
TSPI_lineSetMediaControl(HDRVLINE hdLine,DWORD dwAddressID,HDRVCALL hdCall,DWORD dwSelect,LPLINEMEDIACONTROLDIGIT const lpDigitList,DWORD dwDigitNumEntries,LPLINEMEDIACONTROLMEDIA const lpMediaList,DWORD dwMediaNumEntries,LPLINEMEDIACONTROLTONE const lpToneList,DWORD dwToneNumEntries,LPLINEMEDIACONTROLCALLSTATE const lpCallStateList,DWORD dwCallStateNumEntries) LONG WINAPI <tspi.h>
TSPI_lineSetMediaMode(HDRVCALL hdCall,DWORD dwMediaMode) LONG WINAPI <tspi.h>
TSPI_lineSetStatusMessages(HDRVLINE hdLine,DWORD dwLineStates,DWORD dwAddressStates) LONG WINAPI <tspi.h>
TSPI_lineSetTerminal(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwAddressID,HDRVCALL hdCall,DWORD dwSelect,DWORD dwTerminalModes,DWORD dwTerminalID,DWORD bEnable) LONG WINAPI <tspi.h>
TSPI_lineSetupConference(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,HDRVLINE hdLine,HTAPICALL htConfCall,LPHDRVCALL lphdConfCall,HTAPICALL htConsultCall,LPHDRVCALL lphdConsultCall,DWORD dwNumParties,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tspi.h>
TSPI_lineSetupTransfer(DRV_REQUESTID dwRequestID,HDRVCALL hdCall,HTAPICALL htConsultCall,LPHDRVCALL lphdConsultCall,LPLINECALLPARAMS const lpCallParams) LONG WINAPI <tspi.h>
TSPI_lineSwapHold(DRV_REQUESTID dwRequestID,HDRVCALL hdActiveCall,HDRVCALL hdHeldCall) LONG WINAPI <tspi.h>
TSPI_lineUncompleteCall(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwCompletionID) LONG WINAPI <tspi.h>
TSPI_lineUnhold(DRV_REQUESTID dwRequestID,HDRVCALL hdCall) LONG WINAPI <tspi.h>
TSPI_lineUnpark(DRV_REQUESTID dwRequestID,HDRVLINE hdLine,DWORD dwAddressID,HTAPICALL htCall,LPHDRVCALL lphdCall,LPCWSTR lpszDestAddress) LONG WINAPI <tspi.h>
TSPI_phoneClose(HDRVPHONE hdPhone) LONG WINAPI <tspi.h>
TSPI_phoneDevSpecific(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_phoneGetButtonInfo(HDRVPHONE hdPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO lpButtonInfo) LONG WINAPI <tspi.h>
TSPI_phoneGetData(HDRVPHONE hdPhone,DWORD dwDataID,LPVOID lpData,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_phoneGetDevCaps(DWORD dwDeviceID,DWORD dwTSPIVersion,DWORD dwExtVersion,LPPHONECAPS lpPhoneCaps) LONG WINAPI <tspi.h>
TSPI_phoneGetDisplay(HDRVPHONE hdPhone,LPVARSTRING lpDisplay) LONG WINAPI <tspi.h>
TSPI_phoneGetExtensionID(DWORD dwDeviceID,DWORD dwTSPIVersion,LPPHONEEXTENSIONID lpExtensionID) LONG WINAPI <tspi.h>
TSPI_phoneGetGain(HDRVPHONE hdPhone,DWORD dwHookSwitchDev,LPDWORD lpdwGain) LONG WINAPI <tspi.h>
TSPI_phoneGetHookSwitch(HDRVPHONE hdPhone,LPDWORD lpdwHookSwitchDevs) LONG WINAPI <tspi.h>
TSPI_phoneGetIcon(DWORD dwDeviceID,LPCWSTR lpszDeviceClass,LPHICON lphIcon) LONG WINAPI <tspi.h>
TSPI_phoneGetID(HDRVPHONE hdPhone,LPVARSTRING lpDeviceID,LPCWSTR lpszDeviceClass,HANDLE hTargetProcess) LONG WINAPI <tspi.h>
TSPI_phoneGetLamp(HDRVPHONE hdPhone,DWORD dwButtonLampID,LPDWORD lpdwLampMode) LONG WINAPI <tspi.h>
TSPI_phoneGetRing(HDRVPHONE hdPhone,LPDWORD lpdwRingMode,LPDWORD lpdwVolume) LONG WINAPI <tspi.h>
TSPI_phoneGetStatus(HDRVPHONE hdPhone,LPPHONESTATUS lpPhoneStatus) LONG WINAPI <tspi.h>
TSPI_phoneGetVolume(HDRVPHONE hdPhone,DWORD dwHookSwitchDev,LPDWORD lpdwVolume) LONG WINAPI <tspi.h>
TSPI_phoneNegotiateExtVersion(DWORD dwDeviceID,DWORD dwTSPIVersion,DWORD dwLowVersion,DWORD dwHighVersion,LPDWORD lpdwExtVersion) LONG WINAPI <tspi.h>
TSPI_phoneNegotiateTSPIVersion(DWORD dwDeviceID,DWORD dwLowVersion,DWORD dwHighVersion,LPDWORD lpdwTSPIVersion) LONG WINAPI <tspi.h>
TSPI_phoneOpen(DWORD dwDeviceID,HTAPIPHONE htPhone,LPHDRVPHONE lphdPhone,DWORD dwTSPIVersion,PHONEEVENT lpfnEventProc) LONG WINAPI <tspi.h>
TSPI_phoneSelectExtVersion(HDRVPHONE hdPhone,DWORD dwExtVersion) LONG WINAPI <tspi.h>
TSPI_phoneSetButtonInfo(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwButtonLampID,LPPHONEBUTTONINFO const lpButtonInfo) LONG WINAPI <tspi.h>
TSPI_phoneSetData(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwDataID,LPVOID const lpData,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_phoneSetDisplay(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwRow,DWORD dwColumn,LPCWSTR lpsDisplay,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_phoneSetGain(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwHookSwitchDev,DWORD dwGain) LONG WINAPI <tspi.h>
TSPI_phoneSetHookSwitch(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwHookSwitchDevs,DWORD dwHookSwitchMode) LONG WINAPI <tspi.h>
TSPI_phoneSetLamp(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwButtonLampID,DWORD dwLampMode) LONG WINAPI <tspi.h>
TSPI_phoneSetRing(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwRingMode,DWORD dwVolume) LONG WINAPI <tspi.h>
TSPI_phoneSetStatusMessages(HDRVPHONE hdPhone,DWORD dwPhoneStates,DWORD dwButtonModes,DWORD dwButtonStates) LONG WINAPI <tspi.h>
TSPI_phoneSetVolume(DRV_REQUESTID dwRequestID,HDRVPHONE hdPhone,DWORD dwHookSwitchDev,DWORD dwVolume) LONG WINAPI <tspi.h>
TSPI_providerConfig(HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TSPI_providerCreateLineDevice(DWORD_PTR dwTempID,DWORD dwDeviceID) LONG WINAPI <tspi.h>
TSPI_providerCreatePhoneDevice(DWORD_PTR dwTempID,DWORD dwDeviceID) LONG WINAPI <tspi.h>
TSPI_providerEnumDevices(DWORD dwPermanentProviderID,LPDWORD lpdwNumLines,LPDWORD lpdwNumPhones,HPROVIDER hProvider,LINEEVENT lpfnLineCreateProc,PHONEEVENT lpfnPhoneCreateProc) LONG WINAPI <tspi.h>
TSPI_providerFreeDialogInstance(HDRVDIALOGINSTANCE hdDlgInst) LONG WINAPI <tspi.h>
TSPI_providerGenericDialogData(DWORD_PTR dwObjectID,DWORD dwObjectType,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tspi.h>
TSPI_providerInit(DWORD dwTSPIVersion,DWORD dwPermanentProviderID,DWORD dwLineDeviceIDBase,DWORD dwPhoneDeviceIDBase,DWORD_PTR dwNumLines,DWORD_PTR dwNumPhones,ASYNC_COMPLETION lpfnCompletionProc,LPDWORD lpdwTSPIOptions) LONG WINAPI <tspi.h>
TSPI_providerInstall(HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TSPI_providerRemove(HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TSPI_providerShutdown(DWORD dwTSPIVersion,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TSPI_providerUIIdentify(LPWSTR lpszUIDLLName) LONG WINAPI <tspi.h>
TSTR_ALIGNED(x)<stralign.h>
TSTR_ALIGNED_STACK_COPY(d,s)<stralign.h>
TtCount(IN PVOID BusContext,IN PUSB_DEVICE_HANDLE HubDeviceHandle,IN ULONG) IN ULONG <hubbusif.h>
TTDeleteEmbeddedFont(HANDLE,ULONG,ULONG *)LONG WINAPI <t2embapi.h>
TTGetEmbeddingType(HDC,ULONG *)LONG WINAPI <t2embapi.h>
TTIsEmbeddingEnabled(HDC hdc,WINBOOL * enabled)LONG WINAPI <t2embapi.h>
TTIsEmbeddingEnabledForFacename(LPCSTR facename,WINBOOL * enabled)LONG WINAPI <t2embapi.h>
TTLoadEmbeddedFont(HANDLE *,ULONG,ULONG *,ULONG,ULONG *,READEMBEDPROC,LPVOID,LPWSTR,LPSTR,TTLOADINFO *)LONG WINAPI <t2embapi.h>
TtPortNumber(IN PVOID BusContext,OUT PUSB_DEVICE_HANDLE * NewDeviceHandle,IN PUSB_DEVICE_HANDLE HsHubDeviceHandle,IN USHORT PortStatus,IN USHORT PortNumber,OUT PUSB_CD_ERROR_INFORMATION CdErrorInfo,IN USHORT) IN USHORT <hubbusif.h>
TUISPI_lineConfigDialog(TUISPIDLLCALLBACK lpfnUIDLLCallback,DWORD dwDeviceID,HWND hwndOwner,LPCWSTR lpszDeviceClass) LONG WINAPI <tspi.h>
TUISPI_lineConfigDialogEdit(TUISPIDLLCALLBACK lpfnUIDLLCallback,DWORD dwDeviceID,HWND hwndOwner,LPCWSTR lpszDeviceClass,LPVOID const lpDeviceConfigIn,DWORD dwSize,LPVARSTRING lpDeviceConfigOut) LONG WINAPI <tspi.h>
TUISPI_phoneConfigDialog(TUISPIDLLCALLBACK lpfnUIDLLCallback,DWORD dwDeviceID,HWND hwndOwner,LPCWSTR lpszDeviceClass) LONG WINAPI <tspi.h>
TUISPI_providerConfig(TUISPIDLLCALLBACK lpfnUIDLLCallback,HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TUISPI_providerGenericDialog(TUISPIDLLCALLBACK lpfnUIDLLCallback,HTAPIDIALOGINSTANCE htDlgInst,LPVOID lpParams,DWORD dwSize,HANDLE hEvent) LONG WINAPI <tspi.h>
TUISPI_providerGenericDialogData(HTAPIDIALOGINSTANCE htDlgInst,LPVOID lpParams,DWORD dwSize) LONG WINAPI <tspi.h>
TUISPI_providerInstall(TUISPIDLLCALLBACK lpfnUIDLLCallback,HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TUISPI_providerRemove(TUISPIDLLCALLBACK lpfnUIDLLCallback,HWND hwndOwner,DWORD dwPermanentProviderID) LONG WINAPI <tspi.h>
TUISPIDLLCALLBACK(DWORD_PTR dwObjectID,DWORD dwObjectType,LPVOID lpParams,DWORD dwSize) typedef LONG<tspi.h>
TWOCCFromFOURCC(fcc)<vfw.h>
TxActivate(LONG * plOldState) virtual HRESULT <textserv.h>
TxClientToScreen(LPPOINT lppt) virtual WINBOOL <textserv.h>
TxCreateCaret(HBITMAP hbmp,INT xWidth,INT yHeight) virtual WINBOOL <textserv.h>
TxDeactivate(LONG lNewState) virtual HRESULT <textserv.h>
TxDraw(DWORD),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId),DWORD dwContinue,LONG lViewId) virtual HRESULT <textserv.h>
TxEnableScrollBar(INT fuSBFlags,INT fuArrowflags) virtual WINBOOL <textserv.h>
TxfLogCreateFileReadContext(LPCWSTR LogPath,CLFS_LSN BeginningLsn,CLFS_LSN EndingLSN,PTXF_ID TxfFileId,PVOID * TxfLogContext)WINBOOL WINAPI <txfw32.h>
TxfLogDestroyReadContext(PVOID TxfLogContext)WINBOOL WINAPI <txfw32.h>
TxfLogReadRecords(PVOID TxfLogContext,ULONG BufferLength,PVOID Buffer,PULONG BytesUsed,PULONG RecordCount)WINBOOL WINAPI <txfw32.h>
TxGetAcceleratorPos(LONG * pcp) virtual HRESULT <textserv.h>
TxGetBackStyle(TXTBACKSTYLE * pstyle) virtual HRESULT <textserv.h>
TxGetBaseLinePos(LONG *) virtual HRESULT <textserv.h>
TxGetCachedSize(DWORD * pdwWidth,DWORD * pdwHeight) virtual HRESULT <textserv.h>
TxGetCharFormat(const CHARFORMATW ** ppCF) virtual HRESULT <textserv.h>
TxGetClientRect(LPRECT prc) virtual HRESULT <textserv.h>
TxGetCurTargetX(LONG *) virtual HRESULT <textserv.h>
TxGetDC() virtual HDC <textserv.h>
TxGetDropTarget(IDropTarget ** ppDropTarget) virtual HRESULT <textserv.h>
TxGetExtent(LPSIZEL lpExtent) virtual HRESULT <textserv.h>
TxGetHScroll(LONG * plMin,LONG * plMax,LONG * plPos,LONG * plPage,WINBOOL * pfEnabled) virtual HRESULT <textserv.h>
TxGetMaxLength(DWORD * plength) virtual HRESULT <textserv.h>
TxGetNaturalSize(DWORD dwAspect,HDC hdcDraw,HDC hicTargetDev,DVTARGETDEVICE * ptd,DWORD dwMode,const SIZEL * psizelExtent,LONG * pwidth,LONG * pheight) virtual HRESULT <textserv.h>
TxGetParaFormat(const PARAFORMAT ** ppPF) virtual HRESULT <textserv.h>
TxGetPasswordChar(TCHAR * pch) virtual HRESULT <textserv.h>
TxGetPropertyBits(DWORD dwMask,DWORD * pdwBits) virtual HRESULT <textserv.h>
TxGetScrollBars(DWORD * pdwScrollBar) virtual HRESULT <textserv.h>
TxGetSelectionBarWidth(LONG * lSelBarWidth) virtual HRESULT <textserv.h>
TxGetSysColor(int nIndex) virtual COLORREF <textserv.h>
TxGetText(BSTR * pbstrText) virtual HRESULT <textserv.h>
TxGetViewInset(LPRECT prc) virtual HRESULT <textserv.h>
TxGetVScroll(LONG * plMin,LONG * plMax,LONG * plPos,LONG * plPage,WINBOOL * pfEnabled) virtual HRESULT <textserv.h>
TxImmGetContext() virtual HIMC <textserv.h>
TxImmReleaseContext(HIMC himc) virtual void <textserv.h>
TxInvalidateRect(LPCRECT prc,WINBOOL fMode) virtual void <textserv.h>
TxKillTimer(UINT idTimer) virtual void <textserv.h>
TxNotify(DWORD iNotify,void * pv) virtual HRESULT <textserv.h>
TxQueryHitPoint(DWORD dwDrawAspect,LONG lindex,void * pvAspect,DVTARGETDEVICE * ptd,HDC hdcDraw,HDC hicTargetDev,LPCRECT lprcClient,INT x,INT y,DWORD * pHitResult) virtual HRESULT <textserv.h>
TxReleaseDC(HDC hdc) virtual INT <textserv.h>
TxScreenToClient(LPPOINT lppt) virtual WINBOOL <textserv.h>
TxScrollWindowEx(INT dx,INT dy,LPCRECT lprcScroll,LPCRECT lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate,UINT fuScroll) virtual void <textserv.h>
TxSendMessage(UINT msg,WPARAM wparam,LPARAM lparam,LRESULT * plresult) virtual HRESULT <textserv.h>
TxSetCapture(WINBOOL fCapture) virtual void <textserv.h>
TxSetCaretPos(INT x,INT y) virtual WINBOOL <textserv.h>
TxSetCursor(HCURSOR hcur,WINBOOL fText) virtual void <textserv.h>
TxSetFocus() virtual void <textserv.h>
TxSetScrollPos(INT fnBar,INT nPos,WINBOOL fRedraw) virtual WINBOOL <textserv.h>
TxSetScrollRange(INT fnBar,LONG nMinPos,INT nMaxPos,WINBOOL fRedraw) virtual WINBOOL <textserv.h>
TxSetText(LPCWSTR pszText) virtual HRESULT <textserv.h>
TxSetTimer(UINT idTimer,UINT uTimeout) virtual WINBOOL <textserv.h>
TxShowCaret(WINBOOL fShow) virtual WINBOOL <textserv.h>
TxShowScrollBar(INT fnBar,WINBOOL fShow) virtual WINBOOL <textserv.h>
TxViewChange(WINBOOL fUpdate) virtual void <textserv.h>
Type(TRACKING_COLL_TYPE * pType)virtual HRESULT WINAPI <xinput.h>
TYPE_ALIGNMENT(t)<winnt.h>
TYPE_FROM_PROTO_ID(X)<routprot.h>
typed_constant() int <sql_1.h>
TypeFromToken(tk)<correg.h>
TypeText(BSTR bstr)virtual HRESULT WINAPI <tom.h>
TzSpecificLocalTimeToSystemTime(CONST TIME_ZONE_INFORMATION * lpTimeZoneInformation,CONST SYSTEMTIME * lpLocalTime,LPSYSTEMTIME lpUniversalTime) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
TzSpecificLocalTimeToSystemTimeEx(CONST DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,CONST SYSTEMTIME * lpLocalTime,LPSYSTEMTIME lpUniversalTime) WINBASEAPI WINBOOL WINAPI <timezoneapi.h>
UFromSz(LPCTSTR lpsz) STDAPI_<wabutil.h>
UiaPatternRelease(HUIAPATTERNOBJECT hobj)WINBOOL WINAPI <uiautomationcoreapi.h>
UiaTextRangeRelease(HUIATEXTRANGE hobj)WINBOOL WINAPI <uiautomationcoreapi.h>
UiCreatePatchPackage(LPCSTR szPcpPath,LPCSTR szPatchPath,LPCSTR szLogPath,HWND hwndStatus,LPCSTR szTempFolder,WINBOOL fRemoveTempFolderIfPresent) UINT WINAPI <patchwiz.h>
UiCreatePatchPackageA(LPCSTR szPcpPath,LPCSTR szPatchPath,LPCSTR szLogPath,HWND hwndStatus,LPCSTR szTempFolder,WINBOOL fRemoveTempFolderIfPresent) UINT WINAPI <patchwiz.h>
UiCreatePatchPackageEx(LPCSTR szPcpPath,LPCSTR szPatchPath,LPCSTR szLogPath,HWND hwndStatus,LPCSTR szTempFolder,WINBOOL fRemoveTempFolderIfPresent,DWORD dwFlags,DWORD dwReserved) UINT WINAPI <patchwiz.h>
UiCreatePatchPackageExA(LPCSTR szPcpPath,LPCSTR szPatchPath,LPCSTR szLogPath,HWND hwndStatus,LPCSTR szTempFolder,WINBOOL fRemoveTempFolderIfPresent,DWORD dwFlags,DWORD dwReserved) UINT WINAPI <patchwiz.h>
UiCreatePatchPackageExW(LPCWSTR szPcpPath,LPCWSTR szPatchPath,LPCWSTR szLogPath,HWND hwndStatus,LPCWSTR szTempFolder,WINBOOL fRemoveTempFolderIfPresent,DWORD dwFlags,DWORD dwReserved) UINT WINAPI <patchwiz.h>
UiCreatePatchPackageW(LPCWSTR szPcpPath,LPCWSTR szPatchPath,LPCWSTR szLogPath,HWND hwndStatus,LPCWSTR szTempFolder,WINBOOL fRemoveTempFolderIfPresent) UINT WINAPI <patchwiz.h>
UILANGUAGE_ENUMPROCA(LPSTR,LONG_PTR) typedef WINBOOL<winnls.h>
UILANGUAGE_ENUMPROCW(LPWSTR,LONG_PTR) typedef WINBOOL<winnls.h>
UINT16_C(val)<stdint.h>
UINT32_C(val)<stdint.h>
UInt32x32To64(a, b)<winnt.h>
UINT64_C()()()
UINT64_C(val)<stdint.h>
UINT8_C(val)<stdint.h>
UINTMAX_C(val)<stdint.h>
UIntToPtr(const unsigned int ui) static __inline void<basetsd.h>
UIntToPtr(ui)<basetsd.h>
UintToPtr(ui)<basetsd.h>
UlAddRef(LPVOID lpunk) STDAPI_<wabutil.h>
UlFromSzHex(LPCTSTR lpsz) STDAPI_<mapiutil.h>
ULongToHandle(const unsigned __LONG32 h) static __inline void<basetsd.h>
ULongToHandle(ul)<basetsd.h>
UlongToHandle(ul)<basetsd.h>
ULongToPtr(const unsigned __LONG32 ul) static __inline void<basetsd.h>
ULongToPtr(ul)<basetsd.h>
UlongToPtr(ul)<basetsd.h>
UlPropSize(LPSPropValue lpSPropValue) STDAPI_<wabutil.h>
UlPropTagFromSz(	_sz)<mapidbg.h>
UlPropTagFromSz(_sz)<mapidbg.h>
UlPropTagFromSzFn(char * psz)unsigned __LONG32 EXPORTDBG __cdecl <mapidbg.h>
UlRelease(LPVOID lpunk) STDAPI_<wabutil.h>
UlValidate_IABContainer_CopyEntries(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IABContainer_CreateEntry(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IABContainer_DeleteEntries(a1,a2,a3)<mapival.h>
UlValidate_IABContainer_ResolveNames(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IABLogon_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IABLogon_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IABLogon_GetLastError(a1,a2,a3,a4)<mapival.h>
UlValidate_IABLogon_GetOneOffTable(a1,a2,a3)<mapival.h>
UlValidate_IABLogon_Logoff(a1,a2)<mapival.h>
UlValidate_IABLogon_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IABLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IABLogon_OpenTemplateID(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
UlValidate_IABLogon_PrepareRecips(a1,a2,a3,a4)<mapival.h>
UlValidate_IABLogon_Unadvise(a1,a2)<mapival.h>
UlValidate_IABProvider_Logon(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
UlValidate_IABProvider_Shutdown(a1,a2)<mapival.h>
UlValidate_IDistList_CopyEntries(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IDistList_CreateEntry(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IDistList_DeleteEntries(a1,a2,a3)<mapival.h>
UlValidate_IDistList_ResolveNames(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIAdviseSink_OnNotify(a1,a2,a3)<mapival.h>
UlValidate_IMAPIContainer_GetContentsTable(a1,a2,a3)<mapival.h>
UlValidate_IMAPIContainer_GetHierarchyTable(a1,a2,a3)<mapival.h>
UlValidate_IMAPIContainer_GetSearchCriteria(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIContainer_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMAPIContainer_SetSearchCriteria(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIControl_Activate(a1,a2,a3)<mapival.h>
UlValidate_IMAPIControl_GetLastError(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIControl_GetState(a1,a2,a3)<mapival.h>
UlValidate_IMAPIFolder_CopyFolder(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
UlValidate_IMAPIFolder_CopyMessages(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMAPIFolder_CreateFolder(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMAPIFolder_CreateMessage(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIFolder_DeleteFolder(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMAPIFolder_DeleteMessages(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIFolder_EmptyFolder(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIFolder_GetMessageStatus(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIFolder_SaveContentsSort(a1,a2,a3)<mapival.h>
UlValidate_IMAPIFolder_SetMessageStatus(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMAPIFolder_SetReadFlags(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIProp_CopyProps(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
UlValidate_IMAPIProp_CopyTo(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
UlValidate_IMAPIProp_DeleteProps(a1,a2,a3)<mapival.h>
UlValidate_IMAPIProp_GetIDsFromNames(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIProp_GetLastError(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIProp_GetNamesFromIDs(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMAPIProp_GetPropList(a1,a2,a3)<mapival.h>
UlValidate_IMAPIProp_GetProps(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIProp_OpenProperty(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMAPIProp_SaveChanges(a1,a2)<mapival.h>
UlValidate_IMAPIProp_SetProps(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIStatus_ChangePassword(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPIStatus_FlushQueues(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPIStatus_SettingsDialog(a1,a2,a3)<mapival.h>
UlValidate_IMAPIStatus_ValidateState(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_Abort(a1)<mapival.h>
UlValidate_IMAPITable_Advise(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPITable_CollapseRow(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPITable_CreateBookmark(a1,a2)<mapival.h>
UlValidate_IMAPITable_ExpandRow(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMAPITable_FindRow(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPITable_FreeBookmark(a1,a2)<mapival.h>
UlValidate_IMAPITable_GetCollapseState(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMAPITable_GetLastError(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPITable_GetRowCount(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_GetStatus(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_QueryColumns(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_QueryPosition(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPITable_QueryRows(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPITable_QuerySortOrder(a1,a2)<mapival.h>
UlValidate_IMAPITable_Restrict(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_SeekRow(a1,a2,a3,a4)<mapival.h>
UlValidate_IMAPITable_SeekRowApprox(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_SetCollapseState(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMAPITable_SetColumns(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_SortTable(a1,a2,a3)<mapival.h>
UlValidate_IMAPITable_Unadvise(a1,a2)<mapival.h>
UlValidate_IMAPITable_WaitForCompletion(a1,a2,a3,a4)<mapival.h>
UlValidate_IMessage_CreateAttach(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMessage_DeleteAttach(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMessage_GetAttachmentTable(a1,a2,a3)<mapival.h>
UlValidate_IMessage_GetRecipientTable(a1,a2,a3)<mapival.h>
UlValidate_IMessage_ModifyRecipients(a1,a2,a3)<mapival.h>
UlValidate_IMessage_OpenAttach(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMessage_SetReadFlag(a1,a2)<mapival.h>
UlValidate_IMessage_SubmitMessage(a1,a2)<mapival.h>
UlValidate_IMsgStore_AbortSubmit(a1,a2,a3,a4)<mapival.h>
UlValidate_IMsgStore_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMsgStore_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMsgStore_FinishedMsg(a1,a2,a3,a4)<mapival.h>
UlValidate_IMsgStore_GetOutgoingQueue(a1,a2,a3)<mapival.h>
UlValidate_IMsgStore_GetReceiveFolder(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMsgStore_GetReceiveFolderTable(a1,a2,a3)<mapival.h>
UlValidate_IMsgStore_NotifyNewMail(a1,a2)<mapival.h>
UlValidate_IMsgStore_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMsgStore_SetLockState(a1,a2,a3)<mapival.h>
UlValidate_IMsgStore_SetReceiveFolder(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMsgStore_StoreLogoff(a1,a2)<mapival.h>
UlValidate_IMsgStore_Unadvise(a1,a2)<mapival.h>
UlValidate_IMSLogon_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IMSLogon_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMSLogon_GetLastError(a1,a2,a3,a4)<mapival.h>
UlValidate_IMSLogon_Logoff(a1,a2)<mapival.h>
UlValidate_IMSLogon_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMSLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IMSLogon_Unadvise(a1,a2)<mapival.h>
UlValidate_IMSProvider_CompareStoreIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidate_IMSProvider_Logon(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
UlValidate_IMSProvider_Shutdown(a1,a2)<mapival.h>
UlValidate_IMSProvider_SpoolerLogon(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
UlValidate_IStream_Clone(a1,a2)<mapival.h>
UlValidate_IStream_Commit(a1,a2)<mapival.h>
UlValidate_IStream_CopyTo(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IStream_LockRegion(a1,a2,a3,a4)<mapival.h>
UlValidate_IStream_Read(a1,a2,a3,a4)<mapival.h>
UlValidate_IStream_Revert(a1)<mapival.h>
UlValidate_IStream_Seek(a1,a2,a3,a4)<mapival.h>
UlValidate_IStream_SetSize(a1,a2)<mapival.h>
UlValidate_IStream_Stat(a1,a2,a3)<mapival.h>
UlValidate_IStream_UnlockRegion(a1,a2,a3,a4)<mapival.h>
UlValidate_IStream_Write(a1,a2,a3,a4)<mapival.h>
UlValidate_IUnknown_AddRef(a1)<mapival.h>
UlValidate_IUnknown_QueryInterface(a1,a2,a3)<mapival.h>
UlValidate_IUnknown_Release(a1)<mapival.h>
UlValidate_IXPLogon_AddressTypes(a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidate_IXPLogon_EndMessage(a1,a2,a3)<mapival.h>
UlValidate_IXPLogon_FlushQueues(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IXPLogon_Idle(a1,a2)<mapival.h>
UlValidate_IXPLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IXPLogon_Poll(a1,a2)<mapival.h>
UlValidate_IXPLogon_RegisterOptions(a1,a2,a3,a4)<mapival.h>
UlValidate_IXPLogon_StartMessage(a1,a2,a3,a4)<mapival.h>
UlValidate_IXPLogon_SubmitMessage(a1,a2,a3,a4,a5)<mapival.h>
UlValidate_IXPLogon_TransportLogoff(a1,a2)<mapival.h>
UlValidate_IXPLogon_TransportNotify(a1,a2,a3)<mapival.h>
UlValidate_IXPLogon_ValidateState(a1,a2,a3)<mapival.h>
UlValidate_IXPProvider_Shutdown(a1,a2)<mapival.h>
UlValidate_IXPProvider_TransportLogon(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidateParameters(eMethod,First)<mapival.h>
UlValidateParameters(eMethod,ppThis)<mapival.h>
UlValidateParameters1(m,a1)<mapival.h>
UlValidateParameters10(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
UlValidateParameters11(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)<mapival.h>
UlValidateParameters12(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)<mapival.h>
UlValidateParameters13(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
UlValidateParameters14(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)<mapival.h>
UlValidateParameters15(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)<mapival.h>
UlValidateParameters16(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)<mapival.h>
UlValidateParameters2(m,a1,a2)<mapival.h>
UlValidateParameters3(m,a1,a2,a3)<mapival.h>
UlValidateParameters4(m,a1,a2,a3,a4)<mapival.h>
UlValidateParameters5(m,a1,a2,a3,a4,a5)<mapival.h>
UlValidateParameters6(m,a1,a2,a3,a4,a5,a6)<mapival.h>
UlValidateParameters7(m,a1,a2,a3,a4,a5,a6,a7)<mapival.h>
UlValidateParameters8(m,a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
UlValidateParameters9(m,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
UlValidateParms(x)<mapival.h>
UMECreateA(HWND hwndParent,PUMS_GETSELA pumsSelection)VOID WINAPI <umx.h>
UMECreateW(HWND hwndParent,PUMS_GETSELW pumsSelection)VOID WINAPI <umx.h>
UMEDeleteA(HWND hwndParent,PUMS_GETSELA pumsSelection)VOID WINAPI <umx.h>
UMEDeleteW(HWND hwndParent,PUMS_GETSELW pumsSelection)VOID WINAPI <umx.h>
UMEGetExtendedErrorStringA(VOID)LPSTR WINAPI <umx.h>
UMEGetExtendedErrorStringW(VOID)LPWSTR WINAPI <umx.h>
UMEInitializeMenu(VOID)VOID WINAPI <umx.h>
UMELoadMenuA(HWND hwndMessage,PUMS_LOADMENUA pumsload)DWORD WINAPI <umx.h>
UMELoadMenuW(HWND hwndMessage,PUMS_LOADMENUW pumsload)DWORD WINAPI <umx.h>
UMEMenuAction(HWND hwndParent,DWORD dwEventId)VOID WINAPI <umx.h>
UMERefresh(HWND hwndParent)VOID WINAPI <umx.h>
UMERenameA(HWND hwndParent,PUMS_GETSELA pumsSelection,LPSTR pchNewName)VOID WINAPI <umx.h>
UMERenameW(HWND hwndParent,PUMS_GETSELW pumsSelection,LPWSTR pchNewName)VOID WINAPI <umx.h>
UMEUnloadMenu(VOID)VOID WINAPI <umx.h>
UnableToRender(IPin * pPin)virtual HRESULT <strmif.h>
Unadvise(DWORD dwCookie)virtual HRESULT WINAPI <ocmm.h>
UnbindDevice(void)virtual HRESULT WINAPI <bidispl.h>
UnbindFromThread(void)virtual HRESULT WINAPI <comsvcs.h>
Unblock(__LONG32 lRow)virtual HRESULT WINAPI <msimcntl.h>
UnblockSelected(void)virtual HRESULT WINAPI <msimcntl.h>
UnDecorateSymbolName(PCSTR DecoratedName,PSTR UnDecoratedName,DWORD UndecoratedLength,DWORD Flags) DWORD IMAGEAPI WINAPI <psdk>
UnDecorateSymbolNameW(PCWSTR DecoratedName,PWSTR UnDecoratedName,DWORD UndecoratedLength,DWORD Flags) DWORD IMAGEAPI WINAPI <psdk>
Undo(__LONG32 Count,__LONG32 * prop)virtual HRESULT WINAPI <tom.h>
Undo(HCHAPTER hReserved,DBCOUNTITEM cRows,const HROW rghRows[],DBCOUNTITEM * pcRowsUndone,HROW ** prgRowsUndone,DBROWSTATUS ** prgRowStatus)virtual HRESULT WINAPI <tom.h>
UnenableRouter(OVERLAPPED * pOverlapped,LPDWORD lpdwEnableCount) DWORD WINAPI <iphlpapi.h>
Unenlist(void)virtual HRESULT WINAPI <txdtc.h>
Unfreeze(__LONG32 * pCount)virtual HRESULT WINAPI <tom.h>
UnFreezeVirtualCaretPos(WINBOOL fReset)virtual HRESULT WINAPI <mshtmlc.h>
UnhandledExceptionFilter(struct _EXCEPTION_POINTERS * ExceptionInfo)WINBASEAPI LONG WINAPI <errhandlingapi.h>
UnHold(LONG_PTR lCookie)virtual HRESULT WINAPI <rtccore.h>
UnhookResultsHookHREC(HREC,HRECHOOK) int WINAPI <penwin.h>
UnhookWindowsHook(int nCode,HOOKPROC pfnFilterProc) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnhookWindowsHookEx(HHOOK hhk) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnhookWinEvent(HWINEVENTHOOK hWinEventHook) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnicodeToBytes(LPWSTR lpWideCharStr,UINT cchWideChar,LPSTR lpMultiByteStr,UINT cchMultiByte)STDAPI_<gb18030.h>
Uninitialize()__inline void <rrascfg.h>
Uninitialize(DWORD dwEapTypeId,ULONG_PTR uConnectionParam)virtual HRESULT WINAPI <rrascfg.h>
Uninitialize(ULONG_PTR uConnectionParam)virtual HRESULT WINAPI <rrascfg.h>
Uninitialize(void)virtual HRESULT WINAPI <rrascfg.h>
UninitializeFlatSB(HWND) WINCOMMCTRLAPI HRESULT WINAPI <commctrl.h>
UninitializeNapAgentNotifier(NapNotifyType type) NAPAPI VOID WINAPI <naputil.h>
UninitLocalMsCtfMonitor(void)HRESULT CALLBACK <msctfmonitorapi.h>
UninstallApplication(WCHAR * ProductCode,DWORD dwStatus) DWORD WINAPI <appmgmt.h>
UninstallColorProfile(PCSTR,PCSTR,WINBOOL) WINBOOL WINAPI <icm.h>
UninstallColorProfileA(PCSTR,PCSTR,WINBOOL) WINBOOL WINAPI <icm.h>
UninstallColorProfileW(PCWSTR,PCWSTR,WINBOOL) WINBOOL WINAPI <icm.h>
UninstallRecognizer(HREC) VOID WINAPI <penwin.h>
Union(const GraphicsPath * path)__inline__ Status Region::<gdiplustypes.h>
Union(const Rect & rect)__inline__ Status Region::<gdiplustypes.h>
Union(const RectF & rect)__inline__ Status Region::<gdiplustypes.h>
Union(const Region * region)__inline__ Status Region::<gdiplustypes.h>
Union(Rect & c,const Rect & a,const Rect & b)	static BOOL <gdiplustypes.h>
Union(RectF & c,const RectF & a,const RectF & b)	static BOOL <gdiplustypes.h>
UnionRect(LPRECT lprcDst,CONST RECT * lprcSrc1,CONST RECT * lprcSrc2) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnionRgn(hrgnResult,hrgnA,hrgnB)<windowsx.h>
Unknown_AddRef(IUnknown * unknown_this)<stdunk.h>
unknown_func_expr() int <sql_1.h>
Unknown_QueryInterface(IUnknown * this,IN REFIID refiid,OUT PVOID * output)<stdunk.h>
Unknown_Release(IUnknown * unknown_this)<stdunk.h>
Unload(__LONG32 dwCharID)virtual HRESULT WINAPI <agtsvr.h>
Unload(BSTR CharacterID)virtual HRESULT WINAPI <agtsvr.h>
UNLOAD_MAC_HANDLER(IN NDIS_HANDLE MacMacContext)typedef VOID<ndis.h>
UnloadKeyboardLayout(HKL hkl) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnloadPerfCounterTextStrings(LPSTR lpCommandLine,WINBOOL bQuietModeArg) LOADPERF_FUNCTION <loadperf.h>
UnloadPerfCounterTextStringsA(LPSTR lpCommandLine,WINBOOL bQuietModeArg) LOADPERF_FUNCTION <loadperf.h>
UnloadPerfCounterTextStringsW(LPWSTR lpCommandLine,WINBOOL bQuietModeArg) LOADPERF_FUNCTION <loadperf.h>
UnloadUserProfile(HANDLE hToken,HANDLE hProfile) USERENVAPI WINBOOL WINAPI <userenv.h>
Unlock() void <ntsecapi.h>
UnLock(void)virtual HRESULT WINAPI <asptlb.h>
UnlockAStr(const CHAR * pszSrc,__LONG32 cchSrc,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
UnlockBits(BitmapData * lcokedBitmapData)	Status <gdiplusimpl.h>
UnlockBits(BitmapData * lockedBitmapData)__inline__ Status Bitmap::<gdiplusimpl.h>
UnlockBlob(HBLOB hBlob) DWORD __cdecl <netmon.h>
UnlockBuf(const CHAR * pszBuf,__LONG32 cchOffset,__LONG32 cchWrite)virtual HRESULT WINAPI <mlang.h>
UnlockBuf(const WCHAR * pszBuf,__LONG32 cchOffset,__LONG32 cchWrite)virtual HRESULT WINAPI <mlang.h>
UnlockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh) WINBASEAPI WINBOOL WINAPI <fileapi.h>
UnlockFileEx(HANDLE hFile,DWORD dwReserved,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <fileapi.h>
UnlockRegion(LONG libOffset,LONG cb,LONG dwLockType)virtual HRESULT WINAPI <scardssp.h>
UnlockResource(hResData)<winbase.h>
UnlockSCard(SCARD_DISPOSITIONS Disposition=LEAVE)virtual HRESULT WINAPI <scardssp.h>
UnlockSegment(w)<winbase.h>
UnlockServiceDatabase(SC_LOCK ScLock) WINADVAPI WINBOOL WINAPI <winsvc.h>
UnlockSurface(void)virtual HRESULT WINAPI <strmif.h>
UnlockUrlCacheEntryFile(LPCSTR lpszUrlName,DWORD dwReserved) BOOLAPI <wininet.h>
UnlockUrlCacheEntryFileA(LPCSTR lpszUrlName,DWORD dwReserved) BOOLAPI <wininet.h>
UnlockUrlCacheEntryFileW(LPCWSTR lpszUrlName,DWORD dwReserved) BOOLAPI <wininet.h>
UnlockUrlCacheEntryStream(HANDLE hUrlCacheStream,DWORD Reserved) BOOLAPI <wininet.h>
UnlockWStr(const WCHAR * pszSrc,__LONG32 cchSrc,__LONG32 * pcchActual,__LONG32 * plActualLen)virtual HRESULT WINAPI <mlang.h>
UnMapAndLoad(PLOADED_IMAGE LoadedImage) WINBOOL IMAGEAPI <imagehlp.h>
UnmapDebugInformation(PIMAGE_DEBUG_INFORMATION DebugInfo) WINBOOL IMAGEAPI <psdk>
UnmapStreamId(ULONG culStreamId,ULONG * pulStreamId)virtual HRESULT WINAPI <strmif.h>
UnmapViewOfFile(LPCVOID lpBaseAddress) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
UnmapViewOfFileEx(PVOID BaseAddress,ULONG UnmapFlags) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
Unmarshal(PVOID pBuffer,ULONG cbBuffer,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT * pcontext,ULONG * pcbUnmarshalled)virtual HRESULT WINAPI <callobj.h>
Unmarshal(ULONG iMethod,PVOID pBuffer,ULONG cbBuffer,WINBOOL fForceBufferCopy,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT * pcontext,ULONG * pcbUnmarshalled,ICallFrame ** ppFrame)virtual HRESULT WINAPI <callobj.h>
UnMarshalBlob(HBLOB * phBlob,DWORD Size,BYTE * pBytes) DWORD __cdecl <netmon.h>
UnmarshalInterface(IMSAdminBaseW ** piadmbwInterface)virtual HRESULT WINAPI <iadmw.h>
UnmarshalPropagationToken(ULONG cbToken,byte * rgbToken,ITransaction ** ppTransaction)virtual HRESULT WINAPI <txdtc.h>
UnmarshalReturnToken(ULONG cbReturnToken,byte * rgbReturnToken)virtual HRESULT WINAPI <txdtc.h>
Unpack2UINT32AsUINT64(UINT64 up,UINT32 * puh,UINT32 * pul) inline void <mfapi.h>
UnpackDDElParam(UINT msg,LPARAM lParam,PUINT_PTR puiLo,PUINT_PTR puiHi) WINBOOL WINAPI <dde.h>
UnpackRatio(UINT64 up,INT32 * pn,UINT32 * pud) inline void <mfapi.h>
UnpackSize(UINT64 up,UINT32 * puw,UINT32 * puh) inline void <mfapi.h>
Unpark(void)virtual HRESULT WINAPI <tapi3if.h>
Unplug(WINBOOL fConversationLost)virtual HRESULT WINAPI <txdtc.h>
Unposition(void)virtual HRESULT WINAPI <mshtmlc.h>
Unprepare(void)virtual HRESULT WINAPI <oledb.h>
UnrealizeObject(HGDIOBJ h) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Unreferenced(a)<mapidbg.h>
Unregister(__LONG32 dwSinkID)virtual HRESULT WINAPI <agtsvr.h>
UnregisterApplicationRecoveryCallback(void) WINBASEAPI HRESULT WINAPI <winbase.h>
UnregisterApplicationRestart(void) WINBASEAPI HRESULT WINAPI <winbase.h>
UnregisterBadMemoryNotification(PVOID RegistrationHandle) WINBASEAPI WINBOOL WINAPI <winbase.h>
UnregisterClass(LPCSTR lpClassName,HINSTANCE hInstance) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterClassA(LPCSTR lpClassName,HINSTANCE hInstance) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterClassW(LPCWSTR lpClassName,HINSTANCE hInstance) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterCMM(PCSTR,DWORD) WINBOOL WINAPI <icm.h>
UnregisterCMMA(PCSTR,DWORD) WINBOOL WINAPI <icm.h>
UnregisterCMMW(PCWSTR,DWORD) WINBOOL WINAPI <icm.h>
UnregisterDeviceNotification(HDEVNOTIFY Handle) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnRegisterForDirtyRange(DWORD dwCookie)virtual HRESULT WINAPI <mshtmlc.h>
UnregisterForEvent(const GUID * Api)virtual HRESULT WINAPI <strmif.h>
UnRegisterForPrintAsyncNotifications(HANDLE hRegistrationHandler)HRESULT <prnasnot.h>
UnregisterGPNotification(HANDLE hEvent) USERENVAPI WINBOOL WINAPI <userenv.h>
UnregisterHotKey(HWND hWnd,int id) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnRegisterNotificationCallBack(IAMTunerNotification * pNotify)virtual HRESULT WINAPI <strmif.h>
UnregisterNotifications(__LONG32 lRegister)virtual HRESULT WINAPI <tapi3if.h>
UnregisterPluggableTerminalEventSink(ITTerminal * pTerminal) HRESULT <mspstrm.h>
UnregisterPnpNotification(CMSPAddress * pCMSPAddress) HRESULT <mspthrd.h>
UnregisterPointerInputTarget(HWND hwnd,POINTER_INPUT_TYPE pointerType) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterPowerSettingNotification(HPOWERNOTIFY Handle) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterProvider(LPCOLESTR pwszURL,DB_DWRESERVE dwReserved,REFCLSID rclsidProvider)virtual HRESULT WINAPI <oledb.h>
UnregisterSink(void)virtual HRESULT WINAPI <tapi3.h>
UnregisterSuspendResumeNotification(HPOWERNOTIFY Handle) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterSyncMgrHandler(REFCLSID rclsidHandler,DWORD dwReserved)virtual HRESULT WINAPI <mobsync.h>
UnregisterTouchWindow(HWND hwnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
UnregisterTraceGuids(TRACEHANDLE RegistrationHandle) EXTERN_C ULONG WMIAPI <evntrace.h>
UnRegisterTypeLib(REFGUID libID,WORD wVerMajor,WORD wVerMinor,LCID lcid,SYSKIND syskind)WINOLEAUTAPI <oleauto.h>
UnregisterWait(HANDLE WaitHandle) WINBASEAPI WINBOOL WINAPI <winbase.h>
UnregisterWaitEvent(int index) HRESULT <mspcall.h>
UnregisterWaitEx(HANDLE WaitHandle,HANDLE CompletionEvent) WINBASEAPI WINBOOL WINAPI <threadpoollegacyapiset.h>
UnregisterWordA(HKL hKL,LPSTR szReading,DWORD dwStyle,LPSTR szUnregister)virtual HRESULT WINAPI <mshtmlc.h>
UnregisterWordW(HKL hKL,LPWSTR szReading,DWORD dwStyle,LPWSTR szUnregister)virtual HRESULT WINAPI <mshtmlc.h>
Unschedule(void)virtual HRESULT WINAPI <shappmgr.h>
UnselectCall(ITCallInfo * pCall)virtual HRESULT WINAPI <tapi3if.h>
UnselectTerminal(ITTerminal * pTerminal)virtual HRESULT WINAPI <tapi3if.h>
UnselectTerminalOnCall(ITTerminal * pTerminal)virtual HRESULT WINAPI <tapi3if.h>
UnsignedMultiply128(DWORD64 Multiplier,DWORD64 Multiplicand,DWORD64 * HighProduct)DWORD64 <winnt.h>
UnsignedMultiplyExtract128(DWORD64 Multiplier,DWORD64 Multiplicand,BYTE Shift)__CRT_INLINE DWORD64 <winnt.h>
UnsignedMultiplyHigh(ULONGLONG Multiplier,ULONGLONG Multiplicand)ULONGLONG <winnt.h>
Unsubscribe()HRESULT WINAPI <vswriter.h>
UntrackResource(const RESID __MIDL_0023,const WINBOOL __MIDL_0024)virtual HRESULT WINAPI <comsvcs.h>
UntrackResourceS(constSRESID __MIDL_0025,const WINBOOL __MIDL_0026)virtual HRESULT WINAPI <comsvcs.h>
Update(__LONG32 Mode)virtual HRESULT WINAPI <tom.h>
Update(HCHAPTER hReserved,DBCOUNTITEM cRows,const HROW rghRows[],DBCOUNTITEM * pcRows,HROW ** prgRows,DBROWSTATUS ** prgRowStatus)virtual HRESULT WINAPI <tom.h>
Update(IUnknown * punk,WINBOOL fIsLocalAnchor)virtual HRESULT WINAPI <tom.h>
Update(void)virtual HRESULT WINAPI <tom.h>
UpdateAll(void)virtual HRESULT WINAPI <subsmgr.h>
UpdateAllViews(LPDATAOBJECT lpDataObject,LPARAM data,LONG_PTR hint)virtual HRESULT WINAPI <mmc.h>
UpdateAlphaBitmapParameters(PVMRALPHABITMAP pBmpParms)virtual HRESULT WINAPI <strmif.h>
UpdateBackForwardState(void)virtual HRESULT WINAPI <shdeprecated.h>
UpdateBinary(BYTE byP1,BYTE byP2,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
UpdateCache(VARIANT varReserved)virtual HRESULT WINAPI <azroles.h>
UpdateColors(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
UpdateDebugInfoFile(PCSTR ImageFileName,PCSTR SymbolPath,PSTR DebugFilePath,PIMAGE_NT_HEADERS32 NtHeaders) WINBOOL IMAGEAPI <imagehlp.h>
UpdateDebugInfoFileEx(PCSTR ImageFileName,PCSTR SymbolPath,PSTR DebugFilePath,PIMAGE_NT_HEADERS32 NtHeaders,DWORD OldChecksum) WINBOOL IMAGEAPI <imagehlp.h>
UpdateDestination(BSTR bstrSource,VARIANT * pvarDestination,IGPMMapEntry ** ppEntry)virtual HRESULT WINAPI <gpmgmt.h>
UpdateDriverForPlugAndPlayDevices(HWND hwndParent,LPCSTR HardwareId,LPCSTR FullInfPath,DWORD InstallFlags,PBOOL bRebootRequired OPTIONAL)<newdev.h>
UpdateDriverForPlugAndPlayDevicesA(HWND hwndParent,LPCSTR HardwareId,LPCSTR FullInfPath,DWORD InstallFlags,PBOOL bRebootRequired OPTIONAL)<newdev.h>
UpdateDriverForPlugAndPlayDevicesW(HWND hwndParent,LPCWSTR HardwareId,LPCWSTR FullInfPath,DWORD InstallFlags,PBOOL bRebootRequired OPTIONAL)<newdev.h>
UpdateEntry(IUnknown * punk,WINBOOL fIsLocalAnchor)virtual HRESULT WINAPI <shdeprecated.h>
UpdateExternal(IUnknown * punk,IUnknown * punkHLBrowseContext)virtual HRESULT WINAPI <shdeprecated.h>
UpdateHlink(ULONG uHLID,IMoniker * pimkTarget,LPCWSTR pwzLocation,LPCWSTR pwzFriendlyName)virtual HRESULT WINAPI <hlink.h>
UpdateICMRegKey(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command) WINGDIAPI WINBOOL WINAPI <wingdi.h>
UpdateICMRegKeyA(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command) WINGDIAPI WINBOOL WINAPI <wingdi.h>
UpdateICMRegKeyW(DWORD reserved,LPWSTR lpszCMID,LPWSTR lpszFileName,UINT command) WINGDIAPI WINBOOL WINAPI <wingdi.h>
UpdateItem(HRESULTITEM itemID)virtual HRESULT WINAPI <mmc.h>
UpdateItems(DWORD dwFlags,DWORD dwNumCookies,const SUBSCRIPTIONCOOKIE * pCookies)virtual HRESULT WINAPI <subsmgr.h>
UpdateItems(DWORD dwInvokeFlags,REFCLSID rclsid,DWORD cbCookie,const BYTE * lpCookie)virtual HRESULT WINAPI <subsmgr.h>
UpdateLayeredWindow(HWND hWnd,HDC hdcDst,POINT * pptDst,SIZE * psize,HDC hdcSrc,POINT * pptSrc,COLORREF crKey,BLENDFUNCTION * pblend,DWORD dwFlags) WINUSERAPI WINBOOL WINAPI <winuser.h>
UpdateNtmsOmidInfo(HANDLE hSession,LPNTMS_GUID lpMediaId,DWORD labelType,DWORD numberOfBytes,LPVOID lpBuffer) DWORD WINAPI <ntmsapi.h>
UpdatePanningFeedback(HWND hwnd,LONG lTotalOverpanOffsetX,LONG lTotalOverpanOffsetY,WINBOOL fInInertia)WINBOOL WINAPI <uxtheme.h>
UpdatePenInfo(LPPENINFO) VOID WINAPI <penwin.h>
UpdatePerfNameFiles(LPCSTR szNewCtrFilePath,LPCSTR szNewHlpFilePath,LPSTR szLanguageID,ULONG_PTR dwFlags) LOADPERF_FUNCTION <loadperf.h>
UpdatePerfNameFilesA(LPCSTR szNewCtrFilePath,LPCSTR szNewHlpFilePath,LPSTR szLanguageID,ULONG_PTR dwFlags) LOADPERF_FUNCTION <loadperf.h>
UpdatePerfNameFilesW(LPCWSTR szNewCtrFilePath,LPCWSTR szNewHlpFilePath,LPWSTR szLanguageID,ULONG_PTR dwFlags) LOADPERF_FUNCTION <loadperf.h>
UpdatePicture(void)virtual HRESULT WINAPI <h323priv.h>
UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,DWORD dwFlags,DWORD_PTR Attribute,PVOID lpValue,SIZE_T cbSize,PVOID lpPreviousValue,PSIZE_T lpReturnSize) WINBASEAPI WINBOOL WINAPI <processthreadsapi.h>
UpdateRecord(BYTE byRecordId,BYTE byRefCtrl,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
UpdateRemoteAddress(BSTR bstrRemoteAddress,BSTR bstrInternalLocalAddress,__LONG32 lInternalLocalPort,BSTR bstrExternalLocalAddress,__LONG32 lExternalLocalPort)virtual HRESULT WINAPI <rtccore.h>
UpdateResource(HANDLE hUpdate,LPCSTR lpType,LPCSTR lpName,WORD wLanguage,LPVOID lpData,DWORD cb) WINBASEAPI WINBOOL WINAPI <winbase.h>
UpdateResourceA(HANDLE hUpdate,LPCSTR lpType,LPCSTR lpName,WORD wLanguage,LPVOID lpData,DWORD cb) WINBASEAPI WINBOOL WINAPI <winbase.h>
UpdateResourceW(HANDLE hUpdate,LPCWSTR lpType,LPCWSTR lpName,WORD wLanguage,LPVOID lpData,DWORD cb) WINBASEAPI WINBOOL WINAPI <winbase.h>
UpdateSecureLockIcon(int eSecureLock)virtual HRESULT WINAPI <shdeprecated.h>
UpdateSubscription(LPCWSTR pwszURL)virtual HRESULT WINAPI <subsmgr.h>
UpdateTerminalList(void) virtual HRESULT <mspaddr.h>
UpdateTerminalListForPnp(WINBOOL bDeviceArrival) virtual HRESULT <mspaddr.h>
UpdateTrace(a, b, c)<evntrace.h>
UpdateTrace(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
UpdateTraceA(TRACEHANDLE TraceHandle,LPCSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
UpdateTraceW(TRACEHANDLE TraceHandle,LPCWSTR InstanceName,PEVENT_TRACE_PROPERTIES Properties) EXTERN_C ULONG WMIAPI <evntrace.h>
UpdateWaitTimer(PWT_TIMER_ENTRY pte,LONGLONG * time) DWORD WINAPI <rtutils.h>
UpdateWindow(HWND hWnd) WINUSERAPI WINBOOL WINAPI <winuser.h>
UpdateWindow(void)virtual HRESULT WINAPI <winuser.h>
UpdateWindowList(void)virtual HRESULT WINAPI <shdeprecated.h>
UploadPrinterDriverPackage(LPCSTR pszServer,LPCSTR pszInfPath,LPCSTR pszEnvironment,DWORD dwFlags,HWND hwnd,LPSTR pszDestInfPath,PULONG pcchDestInfPath)HRESULT WINAPI <winspool.h>
UploadPrinterDriverPackageA(LPCSTR pszServer,LPCSTR pszInfPath,LPCSTR pszEnvironment,DWORD dwFlags,HWND hwnd,LPSTR pszDestInfPath,PULONG pcchDestInfPath)HRESULT WINAPI <winspool.h>
UploadPrinterDriverPackageW(LPCWSTR pszServer,LPCWSTR pszInfPath,LPCWSTR pszEnvironment,DWORD dwFlags,HWND hwnd,LPWSTR pszDestInfPath,PULONG pcchDestInfPath)HRESULT WINAPI <winspool.h>
UpperButtonSelect(void)virtual HRESULT WINAPI <strmif.h>
UPSCancelWait(VOID)<upssvc.h>
UPSGetState(VOID)<upssvc.h>
UPSInit(VOID)<upssvc.h>
UPSStop(VOID)<upssvc.h>
UPSTurnOff(IN DWORD aTurnOffDelay)<upssvc.h>
UPSWaitForStateChange(IN DWORD aCurrentState,IN DWORD anInterval)<upssvc.h>
URB_FROM_IRP(Irp)<usb.h>
URB_STATUS(urb)				<usbdlib.h>
UrlApplyScheme(LPCSTR pszIn,LPSTR pszOut,LPDWORD pcchOut,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlApplySchemeA(LPCSTR pszIn,LPSTR pszOut,LPDWORD pcchOut,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlApplySchemeW(LPCWSTR pszIn,LPWSTR pszOut,LPDWORD pcchOut,DWORD dwFlags) LWSTDAPI <shlwapi.h>
URLAssociationDialog(HWND hwndParent,DWORD dwInFlags,PCSTR pcszFile,PCSTR pcszURL,PSTR pszAppBuf,UINT ucAppBufLen) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
URLAssociationDialogA(HWND hwndParent,DWORD dwInFlags,PCSTR pcszFile,PCSTR pcszURL,PSTR pszAppBuf,UINT ucAppBufLen) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
URLAssociationDialogW(HWND hwndParent,DWORD dwInFlags,PCWSTR pcszFile,PCWSTR pcszURL,PWSTR pszAppBuf,UINT ucAppBufLen) INTSHCUTAPI HRESULT WINAPI <intshcut.h>
URLCACHEAPI(type)<wininet.h>
UrlCanonicalize(LPCSTR pszUrl,LPSTR pszCanonicalized,LPDWORD pcchCanonicalized,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCanonicalizeA(LPCSTR pszUrl,LPSTR pszCanonicalized,LPDWORD pcchCanonicalized,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCanonicalizeW(LPCWSTR pszUrl,LPWSTR pszCanonicalized,LPDWORD pcchCanonicalized,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCombine(LPCSTR pszBase,LPCSTR pszRelative,LPSTR pszCombined,LPDWORD pcchCombined,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCombineA(LPCSTR pszBase,LPCSTR pszRelative,LPSTR pszCombined,LPDWORD pcchCombined,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCombineW(LPCWSTR pszBase,LPCWSTR pszRelative,LPWSTR pszCombined,LPDWORD pcchCombined,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCompare(LPCSTR psz1,LPCSTR psz2,WINBOOL fIgnoreSlash) LWSTDAPI_<shlwapi.h>
UrlCompareA(LPCSTR psz1,LPCSTR psz2,WINBOOL fIgnoreSlash) LWSTDAPI_<shlwapi.h>
UrlCompareW(LPCWSTR psz1,LPCWSTR psz2,WINBOOL fIgnoreSlash) LWSTDAPI_<shlwapi.h>
UrlCreateFromPath(LPCSTR pszPath,LPSTR pszUrl,LPDWORD pcchUrl,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCreateFromPathA(LPCSTR pszPath,LPSTR pszUrl,LPDWORD pcchUrl,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlCreateFromPathW(LPCWSTR pszPath,LPWSTR pszUrl,LPDWORD pcchUrl,DWORD dwFlags) LWSTDAPI <shlwapi.h>
URLDownloadToCacheFile(LPUNKNOWN,LPCSTR,LPSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLDownloadToCacheFileA(LPUNKNOWN,LPCSTR,LPSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLDownloadToCacheFileW(LPUNKNOWN,LPCWSTR,LPWSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLDownloadToFile(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLEncode(BSTR bstrIn,BSTR * pbstrEncoded)virtual HRESULT WINAPI <asptlb.h>
UrlEscape(LPCSTR pszUrl,LPSTR pszEscaped,LPDWORD pcchEscaped,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlEscapeA(LPCSTR pszUrl,LPSTR pszEscaped,LPDWORD pcchEscaped,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlEscapeSpaces(pszUrl,pszEscaped,pcchEscaped)<shlwapi.h>
UrlEscapeW(LPCWSTR pszUrl,LPWSTR pszEscaped,LPDWORD pcchEscaped,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlGetLocation(LPCSTR psz1) LWSTDAPI_<shlwapi.h>
UrlGetLocationA(LPCSTR psz1) LWSTDAPI_<shlwapi.h>
UrlGetLocationW(LPCWSTR psz1) LWSTDAPI_<shlwapi.h>
UrlGetPart(LPCSTR pszIn,LPSTR pszOut,LPDWORD pcchOut,DWORD dwPart,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlGetPartA(LPCSTR pszIn,LPSTR pszOut,LPDWORD pcchOut,DWORD dwPart,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlGetPartW(LPCWSTR pszIn,LPWSTR pszOut,LPDWORD pcchOut,DWORD dwPart,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlHash(LPCSTR pszUrl,LPBYTE pbHash,DWORD cbHash) LWSTDAPI <shlwapi.h>
UrlHashA(LPCSTR pszUrl,LPBYTE pbHash,DWORD cbHash) LWSTDAPI <shlwapi.h>
UrlHashW(LPCWSTR pszUrl,LPBYTE pbHash,DWORD cbHash) LWSTDAPI <shlwapi.h>
UrlIs(LPCSTR pszUrl,URLIS UrlIs) LWSTDAPI_<shlwapi.h>
UrlIsA(LPCSTR pszUrl,URLIS UrlIs) LWSTDAPI_<shlwapi.h>
UrlIsFileUrlA(pszURL)<shlwapi.h>
UrlIsFileUrlW(pszURL)<shlwapi.h>
UrlIsNoHistory(LPCSTR pszURL)
UrlIsNoHistoryA(LPCSTR pszURL) LWSTDAPI_<shlwapi.h>
UrlIsNoHistoryW(LPCWSTR pszURL) LWSTDAPI_<shlwapi.h>
UrlIsOpaque(LPCSTR pszURL) LWSTDAPI_<shlwapi.h>
UrlIsOpaqueA(LPCSTR pszURL) LWSTDAPI_<shlwapi.h>
UrlIsOpaqueW(LPCWSTR pszURL) LWSTDAPI_<shlwapi.h>
UrlIsW(LPCWSTR pszUrl,URLIS UrlIs) LWSTDAPI_<shlwapi.h>
UrlMkGetSessionOption(DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD * pdwBufferLengthOut,DWORD dwReserved)STDAPI <urlmon.h>
UrlMkSetSessionOption(DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD dwReserved)STDAPI <urlmon.h>
URLOpenBlockingStream(LPUNKNOWN,LPCSTR,LPSTREAM *,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM *,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM *,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenPullStream(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenStream(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK)STDAPI <urlmon.h>
URLPathEncode(BSTR bstrIn,BSTR * pbstrEncoded)virtual HRESULT WINAPI <asptlb.h>
UrlUnescape(LPSTR pszUrl,LPSTR pszUnescaped,LPDWORD pcchUnescaped,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlUnescapeA(LPSTR pszUrl,LPSTR pszUnescaped,LPDWORD pcchUnescaped,DWORD dwFlags) LWSTDAPI <shlwapi.h>
UrlUnescapeInPlace(pszUrl,dwFlags)<shlwapi.h>
UrlUnescapeW(LPWSTR pszUrl,LPWSTR pszUnescaped,LPDWORD pcchUnescaped,DWORD dwFlags) LWSTDAPI <shlwapi.h>
USB_30_ENDPOINT_TYPE_INTERRUPT_USAGE(bmAttr)<usbspec.h>
USB_CONNECTED_ADDRESS(address)<usbprotocoldefs.h>
USB_CTL(id)<usbiodef.h>
USB_DESCRIPTOR_MAKE_TYPE_AND_INDEX()()()
USB_DESCRIPTOR_MAKE_TYPE_AND_INDEX(d, i)<usbspec.h>
USB_ENDPOINT_DIRECTION_IN(addr)<usbspec.h>
USB_ENDPOINT_DIRECTION_OUT(addr)<usbspec.h>
USB_ENDPOINT_TYPE_ISOCHRONOUS_SYNCHRONIZATION(bmAttr)<usbspec.h>
USB_ENDPOINT_TYPE_ISOCHRONOUS_USAGE(bmAttr)<usbspec.h>
USB_IDLE_CALLBACK(PVOID Context)typedef VOID<usbiodef.h>
USB_KERNEL_CTL(id)<usbiodef.h>
USB_KERNEL_CTL_BUFFERED(id)<usbiodef.h>
USB_MAKE_LANGID(lang, sublang)<usbprotocoldefs.h>
USB_MAKE_REQUEST_TYPE(direction, type, recipient)<usbprotocoldefs.h>
USB_UNCONNECTED_ADDRESS(address)	<usbprotocoldefs.h>
UsbBuildFeatureRequest(urb, op, featureSelector, index, link)<usbdlib.h>
UsbBuildGetDescriptorRequest(urb, length, descriptorType, descriptorIndex, languageId, transferBuffer, transferBufferMDL, transferBufferLength, link)<usbdlib.h>
UsbBuildGetStatusRequest(urb, op, index, transferBuffer, transferBufferMDL, link)<usbdlib.h>
UsbBuildInterruptOrBulkTransferRequest(urb,length, pipeHandle, transferBuffer, transferBufferMDL, transferBufferLength, transferFlags, link)<usbdlib.h>
UsbBuildOsFeatureDescriptorRequest(urb, length, interface, index, transferBuffer, transferBufferMDL, transferBufferLength, link)<usbdlib.h>
UsbBuildSelectConfigurationRequest(urb, length, configurationDescriptor)<usbdlib.h>
UsbBuildSelectInterfaceRequest(urb, length, configurationHandle, interfaceNumber, alternateSetting)<usbdlib.h>
UsbBuildVendorRequest(urb, cmd, length, transferFlags, reservedbits, request, value, index, transferBuffer, transferBufferMDL, transferBufferLength, link)<usbdlib.h>
USBCAMD_AdapterReceivePacket(PHW_STREAM_REQUEST_BLOCK Srb,PUSBCAMD_DEVICE_DATA DeviceData,PDEVICE_OBJECT * DeviceObject,BOOLEAN NeedsCompletion)<usbcamdi.h>
USBCAMD_ControlVendorCommand(PVOID DeviceContext,UCHAR Request,USHORT Value,USHORT Index,PVOID Buffer,PULONG BufferLength,BOOLEAN GetData,PCOMMAND_COMPLETE_FUNCTION CommandComplete,PVOID CommandContext)<usbcamdi.h>
USBCAMD_Debug_LogEntry(CHAR * Name,ULONG Info1,ULONG Info2,ULONG Info3)<usbcamdi.h>
USBCAMD_DriverEntry(PVOID Context1,PVOID Context2,ULONG DeviceContextSize,ULONG FrameContextSize,PADAPTER_RECEIVE_PACKET_ROUTINE ReceivePacket)<usbcamdi.h>
USBCAMD_GetRegistryKeyValue(HANDLE Handle,PWCHAR KeyNameString,ULONG KeyNameStringLength,PVOID Data,ULONG DataLength)<usbcamdi.h>
USBCAMD_InitializeNewInterface(PVOID DeviceContext,PVOID DeviceData,ULONG Version,ULONG CamControlFlag)<usbcamdi.h>
USBCAMD_SelectAlternateInterface(PVOID DeviceContext,PUSBD_INTERFACE_INFORMATION RequestInterface)<usbcamdi.h>
USBD_CalculateUsbBandwidth(IN ULONG MaxPacketSize,IN UCHAR EndpointType,IN BOOLEAN LowSpeed)<usbdlib.h>
USBD_CreateConfigurationRequest(IN PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,OUT PUSHORT Siz)<usbdlib.h>
USBD_CreateConfigurationRequestEx(IN PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,IN PUSBD_INTERFACE_LIST_ENTRY InterfaceList)<usbdlib.h>
USBD_ERROR(Status)<usb.h>
USBD_GetInterfaceLength(IN PUSB_INTERFACE_DESCRIPTOR InterfaceDescriptor,IN PUCHAR BufferEnd)<usbdlib.h>
USBD_GetPdoRegistryParameter(IN PDEVICE_OBJECT PhysicalDeviceObject,IN OUT PVOID Parameter,IN ULONG ParameterLength,IN PWSTR KeyName,IN ULONG KeyNameLength)<usbdlib.h>
USBD_GetUSBDIVersion(OUT PUSBD_VERSION_INFORMATION VersionInformation)<usbdlib.h>
USBD_HALTED(Status)<usbdi.h>
USBD_ParseConfigurationDescriptor(IN PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,IN UCHAR InterfaceNumber,IN UCHAR AlternateSetting)<usbdlib.h>
USBD_ParseConfigurationDescriptorEx(IN PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,IN PVOID StartPosition,IN LONG InterfaceNumber,IN LONG AlternateSetting,IN LONG InterfaceClass,IN LONG InterfaceSubClass,IN LONG InterfaceProtocol)<usbdlib.h>
USBD_ParseDescriptors(IN PVOID DescriptorBuffer,IN ULONG TotalLength,IN PVOID StartPosition,IN LONG DescriptorType)<usbdlib.h>
USBD_PENDING(Status)<usb.h>
USBD_PIPE_DIRECTION_IN(pipeInformation)<usb.h>
USBD_QueryBusTime(IN PDEVICE_OBJECT RootHubPdo,OUT PULONG CurrentFrame)<usbdlib.h>
USBD_RegisterHcFilter(IN PDEVICE_OBJECT DeviceObject,IN PDEVICE_OBJECT FilterDeviceObject)<usbdlib.h>
USBD_STATUS(Status)<usbdi.h>
USBD_SUCCESS(Status)<usb.h>
USBD_TRANSFER_DIRECTION(x)<usbdi.h>
USBD_TRANSFER_DIRECTION_FLAG(flags)<usb.h>
USBD_ValidateConfigurationDescriptor(IN PUSB_CONFIGURATION_DESCRIPTOR ConfigDesc,IN ULONG BufferLength,IN USHORT Level,OUT PUCHAR * Offset,IN ULONG Tag OPTIONAL)<usbdlib.h>
UsbDevicePdo(IN PVOID BusContext,IN PVOID DeviceHandle,IN PDEVICE_OBJECT) IN PDEVICE_OBJECT <hubbusif.h>
UseDefaultValue(VARIANT varIndex)virtual HRESULT WINAPI <msclus.h>
UseDefaultValue(void)virtual HRESULT WINAPI <msclus.h>
USER_CALL_AUX_MASK(f)<rpcndr.h>
USER_CALL_CTXT_MASK(f)<rpcndr.h>
USER_MARSHAL_FREEING_ROUTINE(ULONG *,void *) typedef void<rpcndr.h>
USER_MARSHAL_MARSHALLING_ROUTINE(ULONG *,unsigned char *,void *) typedef unsigned char<rpcndr.h>
USER_MARSHAL_SIZING_ROUTINE(ULONG *,ULONG,void *) typedef ULONG<rpcndr.h>
USER_MARSHAL_UNMARSHALLING_ROUTINE(ULONG *,unsigned char *,void *) typedef unsigned char<rpcndr.h>
UserHandleGrantAccess(HANDLE hUserHandle,HANDLE hJob,WINBOOL bGrant) WINUSERAPI WINBOOL WINAPI <winuser.h>
USERINSTSTUBWRAPPER(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow) typedef HRESULT<advpub.h>
UserInstStubWrapper(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow) HRESULT WINAPI <advpub.h>
USERUNINSTSTUBWRAPPER(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow) typedef HRESULT<advpub.h>
UserUnInstStubWrapper(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow) HRESULT WINAPI <advpub.h>
UuidCompare(UUID * Uuid1,UUID * Uuid2,RPC_STATUS * Status) RPCRTAPI signed int RPC_ENTRY <rpcdce.h>
UuidCreate(UUID * Uuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidCreateNil(UUID * NilUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidCreateSequential(UUID * Uuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidEqual(UUID * Uuid1,UUID * Uuid2,RPC_STATUS * Status) RPCRTAPI int RPC_ENTRY <rpcdce.h>
UuidFromString(RPC_CSTR StringUuid,UUID * Uuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidFromStringA(RPC_CSTR StringUuid,UUID * Uuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidFromStringW(RPC_WSTR StringUuid,UUID * Uuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidHash(UUID * Uuid,RPC_STATUS * Status) RPCRTAPI unsigned short RPC_ENTRY <rpcdce.h>
UuidIsNil(UUID * Uuid,RPC_STATUS * Status) RPCRTAPI int RPC_ENTRY <rpcdce.h>
UuidToString(UUID * Uuid,RPC_CSTR * StringUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidToStringA(UUID * Uuid,RPC_CSTR * StringUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
UuidToStringW(UUID * Uuid,RPC_WSTR * StringUuid) RPCRTAPI RPC_STATUS RPC_ENTRY <rpcdce.h>
V_ARRAY(X)<oleauto.h>
V_ARRAYREF(X)<oleauto.h>
V_BOOL(X)<oleauto.h>
V_BOOLREF(X)<oleauto.h>
V_BSTR(X)<oleauto.h>
V_BSTRREF(X)<oleauto.h>
V_BYREF(X)<oleauto.h>
V_CY(X)<oleauto.h>
V_CYREF(X)<oleauto.h>
V_DATE(X)<oleauto.h>
V_DATEREF(X)<oleauto.h>
V_DECIMAL(X)<oleauto.h>
V_DECIMALREF(X)<oleauto.h>
V_DISPATCH(this)if<oleauto.h>
V_DISPATCH(X)<oleauto.h>
V_DISPATCHREF(X)<oleauto.h>
V_ERROR(X)<oleauto.h>
V_ERRORREF(X)<oleauto.h>
V_I1(X)<oleauto.h>
V_I1REF(X)<oleauto.h>
V_I2(X)<oleauto.h>
V_I2REF(X)<oleauto.h>
V_I4(X)<oleauto.h>
V_I4REF(X)<oleauto.h>
V_I8(X)<oleauto.h>
V_I8REF(X)<oleauto.h>
V_INT(X)<oleauto.h>
V_INT_PTR(X)<oleauto.h>
V_INT_PTRREF(X)<oleauto.h>
V_INTREF(X)<oleauto.h>
V_R4(X)<oleauto.h>
V_R4REF(X)<oleauto.h>
V_R8(X)<oleauto.h>
V_R8REF(X)<oleauto.h>
V_RECORD(X)<oleauto.h>
V_RECORDINFO(X)<oleauto.h>
V_SS_BINARY(X)<sqloledb.h>
V_SS_BIT(X)<sqloledb.h>
V_SS_DATETIME(X)<sqloledb.h>
V_SS_DECIMAL(X)<sqloledb.h>
V_SS_GUID(X)<sqloledb.h>
V_SS_I2(X)<sqloledb.h>
V_SS_I4(X)<sqloledb.h>
V_SS_I8(X)<sqloledb.h>
V_SS_IMAGE(X)<sqloledb.h>
V_SS_MONEY(X)<sqloledb.h>
V_SS_NTEXT(X)<sqloledb.h>
V_SS_NUMERIC(X)<sqloledb.h>
V_SS_R4(X)<sqloledb.h>
V_SS_R8(X)<sqloledb.h>
V_SS_SMALLDATETIME(X)<sqloledb.h>
V_SS_SMALLMONEY(X)<sqloledb.h>
V_SS_STRING(X)<sqloledb.h>
V_SS_TEXT(X)<sqloledb.h>
V_SS_UI1(X)<sqloledb.h>
V_SS_UI4(X)<sqloledb.h>
V_SS_UNKNOWN(X)<sqloledb.h>
V_SS_VARBINARY(X)<sqloledb.h>
V_SS_VARSTRING(X)<sqloledb.h>
V_SS_VT(X)<sqloledb.h>
V_SS_WSTRING(X)<sqloledb.h>
V_SS_WVARSTRING(X)<sqloledb.h>
V_UI1(X)<oleauto.h>
V_UI1REF(X)<oleauto.h>
V_UI2(X)<oleauto.h>
V_UI2REF(X)<oleauto.h>
V_UI4(X)<oleauto.h>
V_UI4REF(X)<oleauto.h>
V_UI8(X)<oleauto.h>
V_UI8REF(X)<oleauto.h>
V_UINT(X)<oleauto.h>
V_UINT_PTR(X)<oleauto.h>
V_UINT_PTRREF(X)<oleauto.h>
V_UINTREF(X)<oleauto.h>
V_UNION(X,Y)<oleauto.h>
V_UNKNOWN(this)if<oleauto.h>
V_UNKNOWN(X)<oleauto.h>
V_UNKNOWNREF(X)<oleauto.h>
V_VARIANTREF(X)<oleauto.h>
V_VT(X)<oleauto.h>
va_arg(v,l)<stdarg.h>
va_copy(d,s)<stdarg.h>
va_end(v)<stdarg.h>
va_start(v,l)<stdarg.h>
VALID_IMPERSONATION_LEVEL(Level)<winnt.h>
Valid_SUPERINDEX(pi)<aviriff.h>
Validate(IGPMResult ** ppResult)virtual HRESULT WINAPI <gpmgmt.h>
Validate_IABContainer_CopyEntries(a1,a2,a3,a4,a5)<mapival.h>
Validate_IABContainer_CreateEntry(a1,a2,a3,a4,a5)<mapival.h>
Validate_IABContainer_DeleteEntries(a1,a2,a3)<mapival.h>
Validate_IABContainer_ResolveNames(a1,a2,a3,a4,a5)<mapival.h>
Validate_IABLogon_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IABLogon_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IABLogon_GetLastError(a1,a2,a3,a4)<mapival.h>
Validate_IABLogon_GetOneOffTable(a1,a2,a3)<mapival.h>
Validate_IABLogon_Logoff(a1,a2)<mapival.h>
Validate_IABLogon_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IABLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
Validate_IABLogon_OpenTemplateID(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
Validate_IABLogon_PrepareRecips(a1,a2,a3,a4)<mapival.h>
Validate_IABLogon_Unadvise(a1,a2)<mapival.h>
Validate_IABProvider_Logon(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
Validate_IABProvider_Shutdown(a1,a2)<mapival.h>
Validate_IDistList_CopyEntries(a1,a2,a3,a4,a5)<mapival.h>
Validate_IDistList_CreateEntry(a1,a2,a3,a4,a5)<mapival.h>
Validate_IDistList_DeleteEntries(a1,a2,a3)<mapival.h>
Validate_IDistList_ResolveNames(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIAdviseSink_OnNotify(a1,a2,a3)<mapival.h>
Validate_IMAPIContainer_GetContentsTable(a1,a2,a3)<mapival.h>
Validate_IMAPIContainer_GetHierarchyTable(a1,a2,a3)<mapival.h>
Validate_IMAPIContainer_GetSearchCriteria(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIContainer_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMAPIContainer_SetSearchCriteria(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIControl_Activate(a1,a2,a3)<mapival.h>
Validate_IMAPIControl_GetLastError(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIControl_GetState(a1,a2,a3)<mapival.h>
Validate_IMAPIFolder_CopyFolder(a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
Validate_IMAPIFolder_CopyMessages(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMAPIFolder_CreateFolder(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMAPIFolder_CreateMessage(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIFolder_DeleteFolder(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMAPIFolder_DeleteMessages(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIFolder_EmptyFolder(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIFolder_GetMessageStatus(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIFolder_SaveContentsSort(a1,a2,a3)<mapival.h>
Validate_IMAPIFolder_SetMessageStatus(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMAPIFolder_SetReadFlags(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIProp_CopyProps(a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
Validate_IMAPIProp_CopyTo(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
Validate_IMAPIProp_DeleteProps(a1,a2,a3)<mapival.h>
Validate_IMAPIProp_GetIDsFromNames(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIProp_GetLastError(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIProp_GetNamesFromIDs(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMAPIProp_GetPropList(a1,a2,a3)<mapival.h>
Validate_IMAPIProp_GetProps(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIProp_OpenProperty(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMAPIProp_SaveChanges(a1,a2)<mapival.h>
Validate_IMAPIProp_SetProps(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIStatus_ChangePassword(a1,a2,a3,a4)<mapival.h>
Validate_IMAPIStatus_FlushQueues(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPIStatus_SettingsDialog(a1,a2,a3)<mapival.h>
Validate_IMAPIStatus_ValidateState(a1,a2,a3)<mapival.h>
Validate_IMAPITable_Abort(a1)<mapival.h>
Validate_IMAPITable_Advise(a1,a2,a3,a4)<mapival.h>
Validate_IMAPITable_CollapseRow(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPITable_CreateBookmark(a1,a2)<mapival.h>
Validate_IMAPITable_ExpandRow(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMAPITable_FindRow(a1,a2,a3,a4)<mapival.h>
Validate_IMAPITable_FreeBookmark(a1,a2)<mapival.h>
Validate_IMAPITable_GetCollapseState(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMAPITable_GetLastError(a1,a2,a3,a4)<mapival.h>
Validate_IMAPITable_GetRowCount(a1,a2,a3)<mapival.h>
Validate_IMAPITable_GetStatus(a1,a2,a3)<mapival.h>
Validate_IMAPITable_QueryColumns(a1,a2,a3)<mapival.h>
Validate_IMAPITable_QueryPosition(a1,a2,a3,a4)<mapival.h>
Validate_IMAPITable_QueryRows(a1,a2,a3,a4)<mapival.h>
Validate_IMAPITable_QuerySortOrder(a1,a2)<mapival.h>
Validate_IMAPITable_Restrict(a1,a2,a3)<mapival.h>
Validate_IMAPITable_SeekRow(a1,a2,a3,a4)<mapival.h>
Validate_IMAPITable_SeekRowApprox(a1,a2,a3)<mapival.h>
Validate_IMAPITable_SetCollapseState(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMAPITable_SetColumns(a1,a2,a3)<mapival.h>
Validate_IMAPITable_SortTable(a1,a2,a3)<mapival.h>
Validate_IMAPITable_Unadvise(a1,a2)<mapival.h>
Validate_IMAPITable_WaitForCompletion(a1,a2,a3,a4)<mapival.h>
Validate_IMessage_CreateAttach(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMessage_DeleteAttach(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMessage_GetAttachmentTable(a1,a2,a3)<mapival.h>
Validate_IMessage_GetRecipientTable(a1,a2,a3)<mapival.h>
Validate_IMessage_ModifyRecipients(a1,a2,a3)<mapival.h>
Validate_IMessage_OpenAttach(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMessage_SetReadFlag(a1,a2)<mapival.h>
Validate_IMessage_SubmitMessage(a1,a2)<mapival.h>
Validate_IMsgStore_AbortSubmit(a1,a2,a3,a4)<mapival.h>
Validate_IMsgStore_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMsgStore_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMsgStore_FinishedMsg(a1,a2,a3,a4)<mapival.h>
Validate_IMsgStore_GetOutgoingQueue(a1,a2,a3)<mapival.h>
Validate_IMsgStore_GetReceiveFolder(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMsgStore_GetReceiveFolderTable(a1,a2,a3)<mapival.h>
Validate_IMsgStore_NotifyNewMail(a1,a2)<mapival.h>
Validate_IMsgStore_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMsgStore_SetLockState(a1,a2,a3)<mapival.h>
Validate_IMsgStore_SetReceiveFolder(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMsgStore_StoreLogoff(a1,a2)<mapival.h>
Validate_IMsgStore_Unadvise(a1,a2)<mapival.h>
Validate_IMSLogon_Advise(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IMSLogon_CompareEntryIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMSLogon_GetLastError(a1,a2,a3,a4)<mapival.h>
Validate_IMSLogon_Logoff(a1,a2)<mapival.h>
Validate_IMSLogon_OpenEntry(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMSLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
Validate_IMSLogon_Unadvise(a1,a2)<mapival.h>
Validate_IMSProvider_CompareStoreIDs(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
Validate_IMSProvider_Logon(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
Validate_IMSProvider_Shutdown(a1,a2)<mapival.h>
Validate_IMSProvider_SpoolerLogon(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
Validate_IStream_Clone(a1,a2)<mapival.h>
Validate_IStream_Commit(a1,a2)<mapival.h>
Validate_IStream_CopyTo(a1,a2,a3,a4,a5)<mapival.h>
Validate_IStream_LockRegion(a1,a2,a3,a4)<mapival.h>
Validate_IStream_Read(a1,a2,a3,a4)<mapival.h>
Validate_IStream_Revert(a1)<mapival.h>
Validate_IStream_Seek(a1,a2,a3,a4)<mapival.h>
Validate_IStream_SetSize(a1,a2)<mapival.h>
Validate_IStream_Stat(a1,a2,a3)<mapival.h>
Validate_IStream_UnlockRegion(a1,a2,a3,a4)<mapival.h>
Validate_IStream_Write(a1,a2,a3,a4)<mapival.h>
Validate_IUnknown_AddRef(a1)<mapival.h>
Validate_IUnknown_QueryInterface(a1,a2,a3)<mapival.h>
Validate_IUnknown_Release(a1)<mapival.h>
Validate_IXPLogon_AddressTypes(a1,a2,a3,a4,a5,a6)<mapival.h>
Validate_IXPLogon_EndMessage(a1,a2,a3)<mapival.h>
Validate_IXPLogon_FlushQueues(a1,a2,a3,a4,a5)<mapival.h>
Validate_IXPLogon_Idle(a1,a2)<mapival.h>
Validate_IXPLogon_OpenStatusEntry(a1,a2,a3,a4,a5)<mapival.h>
Validate_IXPLogon_Poll(a1,a2)<mapival.h>
Validate_IXPLogon_RegisterOptions(a1,a2,a3,a4)<mapival.h>
Validate_IXPLogon_StartMessage(a1,a2,a3,a4)<mapival.h>
Validate_IXPLogon_SubmitMessage(a1,a2,a3,a4,a5)<mapival.h>
Validate_IXPLogon_TransportLogoff(a1,a2)<mapival.h>
Validate_IXPLogon_TransportNotify(a1,a2,a3)<mapival.h>
Validate_IXPLogon_ValidateState(a1,a2,a3)<mapival.h>
Validate_IXPProvider_Shutdown(a1,a2)<mapival.h>
Validate_IXPProvider_TransportLogon(a1,a2,a3,a4,a5,a6,a7)<mapival.h>
ValidateCodePage(UINT uiCodePage,HWND hwnd)virtual HRESULT WINAPI <mlang.h>
ValidateCodePageEx(UINT uiCodePage,HWND hwnd,DWORD dwfIODControl)virtual HRESULT WINAPI <mlang.h>
ValidateCompletely(void)virtual HRESULT WINAPI <oledbdep.h>
ValidateElements(IMarkupPointer * pPointerStart,IMarkupPointer * pPointerFinish,IMarkupPointer * pPointerTarget,IMarkupPointer * pPointerStatus,IHTMLElement ** ppElemFailBottom,IHTMLElement ** ppElemFailTop)virtual HRESULT WINAPI <mshtmlc.h>
ValidateLog(LPCWSTR pszLogFileName,LPSECURITY_ATTRIBUTES psaLogFile,PCLFS_INFORMATION pinfoBuffer,PULONG pcbBuffer)WINBOOL WINAPI <clfsw32.h>
ValidateParameters(eMethod,First)<mapival.h>
ValidateParameters(eMethod,ppThis)<mapival.h>
ValidateParameters1(m,a1)<mapival.h>
ValidateParameters10(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)<mapival.h>
ValidateParameters11(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)<mapival.h>
ValidateParameters12(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)<mapival.h>
ValidateParameters13(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)<mapival.h>
ValidateParameters14(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)<mapival.h>
ValidateParameters15(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)<mapival.h>
ValidateParameters16(m,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)<mapival.h>
ValidateParameters2(m,a1,a2)<mapival.h>
ValidateParameters3(m,a1,a2,a3)<mapival.h>
ValidateParameters4(m,a1,a2,a3,a4)<mapival.h>
ValidateParameters5(m,a1,a2,a3,a4,a5)<mapival.h>
ValidateParameters6(m,a1,a2,a3,a4,a5,a6)<mapival.h>
ValidateParameters7(m,a1,a2,a3,a4,a5,a6,a7)<mapival.h>
ValidateParameters8(m,a1,a2,a3,a4,a5,a6,a7,a8)<mapival.h>
ValidateParameters9(m,a1,a2,a3,a4,a5,a6,a7,a8,a9)<mapival.h>
ValidateParms(x)<mapival.h>
ValidatePassword(HPASSWORD hPassword) extern ACCESSRIGHTS WINAPI <nmsupp.h>
ValidatePowerPolicies(PGLOBAL_POWER_POLICY,PPOWER_POLICY) BOOLEAN WINAPI <powrprof.h>
ValidateRect(HWND hWnd,CONST RECT * lpRect) WINUSERAPI WINBOOL WINAPI <winuser.h>
ValidateRgn(HWND hWnd,HRGN hRgn) WINUSERAPI WINBOOL WINAPI <winuser.h>
ValidateSecureUrl(WINBOOL * pfAllow,OLECHAR * pchUrlInQuestion,DWORD dwFlags)virtual HRESULT WINAPI <mshtmlc.h>
ValidateSyntax(void)virtual HRESULT WINAPI <oledbdep.h>
ValueGetter(const IUnknown * effect,BYTE * data,UINT32 dataSize,UINT32 * actualSize)HRESULT CALLBACK <d2d1effecthelpers.h>
ValueLength(IN PVOID BusContext,IN GUID * DeviceFlagGuid,IN PVOID ValueData,IN ULONG) IN ULONG <winnt.h>
ValueSetter(IUnknown * effect,const BYTE * data,UINT32 dataSize)HRESULT CALLBACK <d2d1effecthelpers.h>
VarAbs(LPVARIANT pvarIn,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarAdd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarAnd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarBoolFromCy(CY cyIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromDate(DATE dateIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromDec(DECIMAL * pdecIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromDisp(IDispatch * pdispIn,LCID lcid,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromI1(CHAR cIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromI2(SHORT sIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromI4(LONG lIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromI8(LONG64 i64In,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromR4(FLOAT fltIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromR8(DOUBLE dblIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromUI1(BYTE bIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromUI2(USHORT uiIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromUI4(ULONG ulIn,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBoolFromUI8(ULONG64 i64In,VARIANT_BOOL * pboolOut)WINOLEAUTAPI <oleauto.h>
VarBstrCat(BSTR bstrLeft,BSTR bstrRight,LPBSTR pbstrResult)STDAPI <oleauto.h>
VarBstrCmp(BSTR bstrLeft,BSTR bstrRight,LCID lcid,ULONG dwFlags)STDAPI <oleauto.h>
VarBstrFromBool(VARIANT_BOOL boolIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromCy(CY cyIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromDate(DATE dateIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromDec(DECIMAL * pdecIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromDisp(IDispatch * pdispIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromI1(CHAR cIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromI2(SHORT iVal,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromI4(LONG lIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromI8(LONG64 i64In,LCID lcid,unsigned __LONG32 dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromR4(FLOAT fltIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromR8(DOUBLE dblIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromUI1(BYTE bVal,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromUI2(USHORT uiIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromUI4(ULONG ulIn,LCID lcid,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarBstrFromUI8(ULONG64 ui64In,LCID lcid,unsigned __LONG32 dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarCat(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid) static __inline HRESULT WINAPI <oleauto.h>
VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid,ULONG dwFlags)STDAPI <oleauto.h>
VarCyAbs(CY cyIn,LPCY pcyResult)STDAPI <oleauto.h>
VarCyAdd(CY cyLeft,CY cyRight,LPCY pcyResult)STDAPI <oleauto.h>
VarCyCmp(CY cyLeft,CY cyRight)STDAPI <oleauto.h>
VarCyCmpR8(CY cyLeft,double dblRight)STDAPI <oleauto.h>
VarCyFix(CY cyIn,LPCY pcyResult)STDAPI <oleauto.h>
VarCyFromBool(VARIANT_BOOL boolIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromDate(DATE dateIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromDec(DECIMAL * pdecIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromDisp(IDispatch * pdispIn,LCID lcid,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromI1(CHAR cIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromI2(SHORT sIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromI4(LONG lIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromI8(LONG64 i64In,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromR4(FLOAT fltIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromR8(DOUBLE dblIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromUI1(BYTE bIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromUI2(USHORT uiIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromUI4(ULONG ulIn,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyFromUI8(ULONG64 ui64In,CY * pcyOut)WINOLEAUTAPI <oleauto.h>
VarCyInt(CY cyIn,LPCY pcyResult)STDAPI <oleauto.h>
VarCyMul(CY cyLeft,CY cyRight,LPCY pcyResult)STDAPI <oleauto.h>
VarCyMulI4(CY cyLeft,__LONG32 lRight,LPCY pcyResult)STDAPI <oleauto.h>
VarCyMulI8(CY cyLeft,LONG64 lRight,LPCY pcyResult)STDAPI <oleauto.h>
VarCyNeg(CY cyIn,LPCY pcyResult)STDAPI <oleauto.h>
VarCyRound(CY cyIn,int cDecimals,LPCY pcyResult)STDAPI <oleauto.h>
VarCySub(CY cyLeft,CY cyRight,LPCY pcyResult)STDAPI <oleauto.h>
VarDateFromBool(VARIANT_BOOL boolIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromCy(CY cyIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromDec(DECIMAL * pdecIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromDisp(IDispatch * pdispIn,LCID lcid,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromI1(CHAR cIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromI2(SHORT sIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromI4(LONG lIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromI8(LONG64 i64In,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromR4(FLOAT fltIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromR8(DOUBLE dblIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromUdate(UDATE * pudateIn,ULONG dwFlags,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromUdateEx(UDATE * pudateIn,LCID lcid,ULONG dwFlags,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromUI1(BYTE bIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromUI2(USHORT uiIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromUI4(ULONG ulIn,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDateFromUI8(ULONG64 ui64In,DATE * pdateOut)WINOLEAUTAPI <oleauto.h>
VarDecAbs(LPDECIMAL pdecIn,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecAdd(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecCmp(LPDECIMAL pdecLeft,LPDECIMAL pdecRight)STDAPI <oleauto.h>
VarDecCmpR8(LPDECIMAL pdecLeft,double dblRight)STDAPI <oleauto.h>
VarDecDiv(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecFix(LPDECIMAL pdecIn,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecFromBool(VARIANT_BOOL boolIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromCy(CY cyIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromDate(DATE dateIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromDisp(IDispatch * pdispIn,LCID lcid,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromI1(CHAR cIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromI2(SHORT uiIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromI4(LONG lIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromI8(LONG64 i64In,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromR4(FLOAT fltIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromR8(DOUBLE dblIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromUI1(BYTE bIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromUI2(USHORT uiIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromUI4(ULONG ulIn,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecFromUI8(ULONG64 ui64In,DECIMAL * pdecOut)WINOLEAUTAPI <oleauto.h>
VarDecInt(LPDECIMAL pdecIn,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecMul(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecNeg(LPDECIMAL pdecIn,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecRound(LPDECIMAL pdecIn,int cDecimals,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDecSub(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult)STDAPI <oleauto.h>
VarDiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarEqv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarFix(LPVARIANT pvarIn,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarFormat(LPVARIANT pvarIn,LPOLESTR pstrFormat,int iFirstDay,int iFirstWeek,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarFormatCurrency(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarFormatDateTime(LPVARIANT pvarIn,int iNamedFormat,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarFormatFromTokens(LPVARIANT pvarIn,LPOLESTR pstrFormat,LPBYTE pbTokCur,ULONG dwFlags,BSTR * pbstrOut,LCID lcid)WINOLEAUTAPI <oleauto.h>
VarFormatNumber(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarFormatPercent(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarI1FromBool(VARIANT_BOOL boolIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromCy(CY cyIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromDate(DATE dateIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromDec(DECIMAL * pdecIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromDisp(IDispatch * pdispIn,LCID lcid,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromI2(SHORT uiIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromI4(LONG lIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromI8(LONG64 i64In,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromR4(FLOAT fltIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromR8(DOUBLE dblIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromUI1(BYTE bIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromUI2(USHORT uiIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromUI4(ULONG ulIn,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI1FromUI8(ULONG64 i64In,CHAR * pcOut)WINOLEAUTAPI <oleauto.h>
VarI2FromBool(VARIANT_BOOL boolIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromCy(CY cyIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromDate(DATE dateIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromDec(DECIMAL * pdecIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromDisp(IDispatch * pdispIn,LCID lcid,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromI1(CHAR cIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromI4(LONG lIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromI8(LONG64 i64In,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromR4(FLOAT fltIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromR8(DOUBLE dblIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromUI1(BYTE bIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromUI2(USHORT uiIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromUI4(ULONG ulIn,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI2FromUI8(ULONG64 ui64In,SHORT * psOut)WINOLEAUTAPI <oleauto.h>
VarI4FromBool(VARIANT_BOOL boolIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromCy(CY cyIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromDate(DATE dateIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromDec(DECIMAL * pdecIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromDisp(IDispatch * pdispIn,LCID lcid,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromI1(CHAR cIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromI2(SHORT sIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromI4(in,pOut)<oleauto.h>
VarI4FromI8(LONG64 i64In,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromInt(INT intIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromR4(FLOAT fltIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromR8(DOUBLE dblIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromUI1(BYTE bIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromUI2(USHORT uiIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromUI4(ULONG ulIn,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI4FromUI8(ULONG64 ui64In,LONG * plOut)WINOLEAUTAPI <oleauto.h>
VarI8FromBool(VARIANT_BOOL boolIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromCy(CY cyIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromDate(DATE dateIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromDec(DECIMAL * pdecIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromDisp(IDispatch * pdispIn,LCID lcid,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromI1(CHAR cIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromI2(SHORT sIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromI4(LONG lIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromI8(in,pOut)<oleauto.h>
VarI8FromInt(INT intIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromR4(FLOAT fltIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromR8(DOUBLE dblIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromStr(OLECHAR * strIn,LCID lcid,unsigned __LONG32 dwFlags,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromUI1(BYTE bIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromUI2(USHORT uiIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromUI4(ULONG ulIn,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarI8FromUI8(ULONG64 ui64In,LONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VARIANT_UserFree(ULONG *,VARIANT *) void __RPC_API <xenroll.h>
VARIANT_UserMarshal(ULONG *,unsigned char *,VARIANT *) unsigned char<xenroll.h>
VARIANT_UserSize(ULONG *,ULONG,VARIANT *) ULONG __RPC_API <xenroll.h>
VARIANT_UserUnmarshal(ULONG *,unsigned char *,VARIANT *) unsigned char<xenroll.h>
VariantChangeType(VARIANTARG * pvargDest,VARIANTARG * pvarSrc,USHORT wFlags,VARTYPE vt)WINOLEAUTAPI <oleauto.h>
VariantChangeTypeEx(VARIANTARG * pvargDest,VARIANTARG * pvarSrc,LCID lcid,USHORT wFlags,VARTYPE vt)WINOLEAUTAPI <oleauto.h>
VariantClear(VARIANTARG * pvarg)WINOLEAUTAPI <oleauto.h>
VariantCopy(VARIANTARG * pvargDest,VARIANTARG * pvargSrc)WINOLEAUTAPI <oleauto.h>
VariantCopyInd(VARIANT * pvarDest,VARIANTARG * pvargSrc)WINOLEAUTAPI <oleauto.h>
VariantInit(VARIANTARG * pvarg)WINOLEAUTAPI_<oleauto.h>
VariantTimeToDosDateTime(DOUBLE vtime,USHORT * pwDosDate,USHORT * pwDosTime)WINOLEAUTAPI_<oleauto.h>
VariantTimeToSystemTime(DOUBLE vtime,LPSYSTEMTIME lpSystemTime)WINOLEAUTAPI_<oleauto.h>
VariantToGUID(const VARIANT * pvar,GUID * guid)HRESULT WINAPI <propvarutil.h>
VarIdiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarImp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarInt(LPVARIANT pvarIn,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarLenSmallIntToDword(LPBYTE pValue,WORD ValueLen,WINBOOL fIsByteswapped,LPDWORD lpDword) LPDWORD WINAPI <netmon.h>
VarMod(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarMonthName(int iMonth,int fAbbrev,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarMul(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarNeg(LPVARIANT pvarIn,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarNot(LPVARIANT pvarIn,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarNumFromParseNum(NUMPARSE * pnumprs,BYTE * rgbDig,ULONG dwVtBits,VARIANT * pvar)WINOLEAUTAPI <oleauto.h>
VarOr(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarParseNumFromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,NUMPARSE * pnumprs,BYTE * rgbDig)WINOLEAUTAPI <oleauto.h>
VarPow(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarR4CmpR8(float fltLeft,double dblRight)STDAPI <oleauto.h>
VarR4FromBool(VARIANT_BOOL boolIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromCy(CY cyIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromDate(DATE dateIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromDec(DECIMAL * pdecIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromDisp(IDispatch * pdispIn,LCID lcid,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromI1(CHAR cIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromI2(SHORT sIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromI4(LONG lIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromI8(LONG64 i64In,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromR8(DOUBLE dblIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromUI1(BYTE bIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromUI2(USHORT uiIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromUI4(ULONG ulIn,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR4FromUI8(ULONG64 ui64In,FLOAT * pfltOut)WINOLEAUTAPI <oleauto.h>
VarR8FromBool(VARIANT_BOOL boolIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromCy(CY cyIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromDate(DATE dateIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromDec(DECIMAL * pdecIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromDisp(IDispatch * pdispIn,LCID lcid,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromI1(CHAR cIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromI2(SHORT sIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromI4(LONG lIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromI8(LONG64 i64In,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromR4(FLOAT fltIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromUI1(BYTE bIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromUI2(USHORT uiIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromUI4(ULONG ulIn,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8FromUI8(ULONG64 ui64In,DOUBLE * pdblOut)WINOLEAUTAPI <oleauto.h>
VarR8Pow(double dblLeft,double dblRight,double * pdblResult)STDAPI <oleauto.h>
VarR8Round(double dblIn,int cDecimals,double * pdblResult)STDAPI <oleauto.h>
VarRound(LPVARIANT pvarIn,int cDecimals,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarSub(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VarTokenizeFormatString(LPOLESTR pstrFormat,LPBYTE rgbTok,int cbTok,int iFirstDay,int iFirstWeek,LCID lcid,int * pcbActual)WINOLEAUTAPI <oleauto.h>
VarUdateFromDate(DATE dateIn,ULONG dwFlags,UDATE * pudateOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromBool(VARIANT_BOOL boolIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromCy(CY cyIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromDate(DATE dateIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromDec(DECIMAL * pdecIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromDisp(IDispatch * pdispIn,LCID lcid,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromI1(CHAR cIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromI2(SHORT sIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromI4(LONG lIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromI8(LONG64 i64In,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromR4(FLOAT fltIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromR8(DOUBLE dblIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromUI2(USHORT uiIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromUI4(ULONG ulIn,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI1FromUI8(ULONG64 ui64In,BYTE * pbOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromBool(VARIANT_BOOL boolIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromCy(CY cyIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromDate(DATE dateIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromDec(DECIMAL * pdecIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromDisp(IDispatch * pdispIn,LCID lcid,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromI1(CHAR cIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromI2(SHORT uiIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromI4(LONG lIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromI8(LONG64 i64In,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromR4(FLOAT fltIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromR8(DOUBLE dblIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromUI1(BYTE bIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromUI4(ULONG ulIn,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI2FromUI8(ULONG64 i64In,USHORT * puiOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromBool(VARIANT_BOOL boolIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromCy(CY cyIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromDate(DATE dateIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromDec(DECIMAL * pdecIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromDisp(IDispatch * pdispIn,LCID lcid,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromI1(CHAR cIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromI2(SHORT uiIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromI4(LONG lIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromI8(LONG64 i64In,ULONG * plOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromR4(FLOAT fltIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromR8(DOUBLE dblIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromStr(OLECHAR * strIn,LCID lcid,ULONG dwFlags,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromUI1(BYTE bIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromUI2(USHORT uiIn,ULONG * pulOut)WINOLEAUTAPI <oleauto.h>
VarUI4FromUI4(in,pOut)<oleauto.h>
VarUI4FromUI8(ULONG64 ui64In,ULONG * plOut)WINOLEAUTAPI <oleauto.h>
VarUI8FromBool(VARIANT_BOOL boolIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromCy(CY cyIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromDate(DATE dateIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromDec(DECIMAL * pdecIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromDisp(IDispatch * pdispIn,LCID lcid,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromI1(CHAR cIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromI2(SHORT sIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromI4(LONG lIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromI8(LONG64 ui64In,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromInt(INT intIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromR4(FLOAT fltIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromR8(DOUBLE dblIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromStr(OLECHAR * strIn,LCID lcid,unsigned __LONG32 dwFlags,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromUI1(BYTE bIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromUI2(USHORT uiIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromUI4(ULONG ulIn,ULONG64 * pi64Out)WINOLEAUTAPI <oleauto.h>
VarUI8FromUI8(in,pOut)<oleauto.h>
VarWeekdayName(int iWeekday,int fAbbrev,int iFirstDay,ULONG dwFlags,BSTR * pbstrOut)WINOLEAUTAPI <oleauto.h>
VarXor(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult)STDAPI <oleauto.h>
VcppException(sev,err)<delayimp.h>
VDMBreakThread(HANDLE hProcess,HANDLE hThread) WINBOOL WINAPI <vdmdbg.h>
VDMBREAKTHREADPROC(HANDLE) typedef WINBOOL<vdmdbg.h>
VDMCONTEXT_TO_PROGRAM_COUNTER(Context)<vdmdbg.h>
VDMDetectWOW(VOID) WINBOOL WINAPI <vdmdbg.h>
VDMDETECTWOWPROC(VOID) typedef WINBOOL<vdmdbg.h>
VDMEnumProcessWOW(PROCESSENUMPROC fp,LPARAM lparam) INT WINAPI <vdmdbg.h>
VDMENUMPROCESSWOWPROC(PROCESSENUMPROC,LPARAM) typedef INT<vdmdbg.h>
VDMEnumTaskWOW(DWORD dwProcessId,TASKENUMPROC fp,LPARAM lparam) INT WINAPI <vdmdbg.h>
VDMEnumTaskWOWEx(DWORD dwProcessId,TASKENUMPROCEX fp,LPARAM lparam) INT WINAPI <vdmdbg.h>
VDMENUMTASKWOWEXPROC(DWORD,TASKENUMPROCEX,LPARAM) typedef INT<vdmdbg.h>
VDMENUMTASKWOWPROC(DWORD,TASKENUMPROC,LPARAM) typedef INT<vdmdbg.h>
VDMGetAddrExpression(LPSTR szModule,LPSTR szSymbol,PWORD Selector,PDWORD Offset,PWORD Type) WINBOOL WINAPI <vdmdbg.h>
VDMGETADDREXPRESSIONPROC(LPSTR,LPSTR,PWORD,PDWORD,PWORD) typedef WINBOOL<vdmdbg.h>
VDMGetContext(HANDLE hProcess,HANDLE hThread,LPVDMCONTEXT lpVDMContext) WINBOOL WINAPI <vdmdbg.h>
VDMGETCONTEXTPROC(HANDLE,HANDLE,LPVDMCONTEXT) typedef WINBOOL<vdmdbg.h>
VDMGetDbgFlags(HANDLE hProcess) DWORD WINAPI <vdmdbg.h>
VDMGETDBGFLAGSPROC(HANDLE) typedef DWORD<vdmdbg.h>
VDMGetModuleSelector(HANDLE hProcess,HANDLE hThread,UINT wSegmentNumber,LPSTR lpModuleName,LPWORD lpSelector) WINBOOL WINAPI <vdmdbg.h>
VDMGETMODULESELECTORPROC(HANDLE,HANDLE,UINT,LPSTR,LPWORD) typedef WINBOOL<vdmdbg.h>
VDMGetPointer(HANDLE hProcess,HANDLE hThread,WORD wSelector,DWORD dwOffset,WINBOOL fProtMode) ULONG WINAPI <vdmdbg.h>
VDMGETPOINTERPROC(HANDLE,HANDLE,WORD,DWORD,WINBOOL) typedef ULONG<vdmdbg.h>
VDMGetSegmentInfo(WORD Selector,ULONG Offset,WINBOOL bProtectMode,VDM_SEGINFO * pSegInfo) WINBOOL WINAPI <vdmdbg.h>
VDMGETSEGMENTINFOPROC(WORD,ULONG,WINBOOL,VDM_SEGINFO) typedef WINBOOL<vdmdbg.h>
VDMGetSelectorModule(HANDLE hProcess,HANDLE hThread,WORD wSelector,PUINT lpSegmentNumber,LPSTR lpModuleName,UINT nNameSize,LPSTR lpModulePath,UINT nPathSize) WINBOOL WINAPI <vdmdbg.h>
VDMGETSELECTORMODULEPROC(HANDLE,HANDLE,WORD,PUINT,LPSTR,UINT,LPSTR,UINT) typedef WINBOOL<vdmdbg.h>
VDMGetSymbol(LPSTR szModule,WORD SegNumber,DWORD Offset,WINBOOL bProtectMode,WINBOOL bNextSymbol,LPSTR szSymbolName,PDWORD pDisplacement) WINBOOL WINAPI <vdmdbg.h>
VDMGETSYMBOLPROC(LPSTR,WORD,DWORD,WINBOOL,WINBOOL,LPSTR,PDWORD) typedef WINBOOL<vdmdbg.h>
VDMGetThreadSelectorEntry(HANDLE hProcess,HANDLE hThread,WORD wSelector,LPVDMLDT_ENTRY lpSelectorEntry) WINBOOL WINAPI <vdmdbg.h>
VDMGETTHREADSELECTORENTRYPROC(HANDLE,HANDLE,DWORD,LPVDMLDT_ENTRY) typedef WINBOOL<vdmdbg.h>
VDMGlobalFirst(HANDLE hProcess,HANDLE hThread,LPGLOBALENTRY lpGlobalEntry,WORD wFlags,DEBUGEVENTPROC lpEventProc,LPVOID lpData) WINBOOL WINAPI <vdmdbg.h>
VDMGLOBALFIRSTPROC(HANDLE,HANDLE,LPGLOBALENTRY,WORD,DEBUGEVENTPROC,LPVOID) typedef WINBOOL<vdmdbg.h>
VDMGlobalNext(HANDLE hProcess,HANDLE hThread,LPGLOBALENTRY lpGlobalEntry,WORD wFlags,DEBUGEVENTPROC lpEventProc,LPVOID lpData) WINBOOL WINAPI <vdmdbg.h>
VDMGLOBALNEXTPROC(HANDLE,HANDLE,LPGLOBALENTRY,WORD,DEBUGEVENTPROC,LPVOID) typedef WINBOOL<vdmdbg.h>
VDMIsModuleLoaded(LPSTR szPath) WINBOOL WINAPI <vdmdbg.h>
VDMISMODULELOADEDPROC(LPSTR) typedef WINBOOL<vdmdbg.h>
VDMKillWOW(VOID) WINBOOL WINAPI <vdmdbg.h>
VDMKILLWOWPROC(VOID) typedef WINBOOL<vdmdbg.h>
VDMModuleFirst(HANDLE hProcess,HANDLE hThread,LPMODULEENTRY lpModuleEntry,DEBUGEVENTPROC lpEventProc,LPVOID lpData) WINBOOL WINAPI <vdmdbg.h>
VDMMODULEFIRSTPROC(HANDLE,HANDLE,LPMODULEENTRY,DEBUGEVENTPROC,LPVOID) typedef WINBOOL<vdmdbg.h>
VDMModuleNext(HANDLE hProcess,HANDLE hThread,LPMODULEENTRY lpModuleEntry,DEBUGEVENTPROC lpEventProc,LPVOID lpData) WINBOOL WINAPI <vdmdbg.h>
VDMMODULENEXTPROC(HANDLE,HANDLE,LPMODULEENTRY,DEBUGEVENTPROC,LPVOID) typedef WINBOOL<vdmdbg.h>
VDMProcessException(LPDEBUG_EVENT lpDebugEvent) WINBOOL WINAPI <vdmdbg.h>
VDMPROCESSEXCEPTIONPROC(LPDEBUG_EVENT) typedef WINBOOL<vdmdbg.h>
VDMSetContext(HANDLE hProcess,HANDLE hThread,LPVDMCONTEXT lpVDMContext) WINBOOL WINAPI <vdmdbg.h>
VDMSETCONTEXTPROC(HANDLE,HANDLE,LPVDMCONTEXT) typedef WINBOOL<vdmdbg.h>
VDMSetDbgFlags(HANDLE hProcess,DWORD dwFlags) WINBOOL WINAPI <vdmdbg.h>
VDMSETDBGFLAGSPROC(HANDLE,DWORD) typedef WINBOOL<vdmdbg.h>
VDMStartTaskInWOW(DWORD dwProcessId,LPSTR lpCommandLine,WORD wShow) WINBOOL WINAPI <vdmdbg.h>
VDMSTARTTASKINWOWPROC(DWORD,LPSTR,WORD) typedef WINBOOL<vdmdbg.h>
VDMTERMINATETASKINWOWPROC(DWORD,WORD) typedef WINBOOL<vdmdbg.h>
VDMTerminateTaskWOW(DWORD dwProcessId,WORD htask) WINBOOL WINAPI <vdmdbg.h>
Vector2F(FLOAT x=0.0f,FLOAT y=0.0f)D2D1FORCEINLINE D2D1_VECTOR_2F <d2d1_1helper.h>
Vector3F(FLOAT x=0.0f,FLOAT y=0.0f,FLOAT z=0.0f)D2D1FORCEINLINE D2D1_VECTOR_3F <d2d1_1helper.h>
Vector4F(FLOAT x=0.0f,FLOAT y=0.0f,FLOAT z=0.0f,FLOAT w=0.0f)D2D1FORCEINLINE D2D1_VECTOR_4F <d2d1_1helper.h>
VectorFromBstr(BSTR bstr,SAFEARRAY ** ppsa)WINOLEAUTAPI <oleauto.h>
VENDOR_FROM_PROTO_ID(X)<routprot.h>
VER_PRODUCTVERSION_MAJORMINOR1(x,y)<ntverp.h>
VER_PRODUCTVERSION_MAJORMINOR2()()()
VER_PRODUCTVERSION_MAJORMINOR2(x,y)<ntverp.h>
VER_PRODUCTVERSION_STR1(x,y)<ntverp.h>
VER_PRODUCTVERSION_STR2()()()
VER_PRODUCTVERSION_STR2(x,y)<ntverp.h>
VER_SET_CONDITION(_m_,_t_,_c_)<winnt.h>
VER_SET_CONDITION(ConditionMask, TypeBitMask, ComparisonType)<winnt.h>
VerFindFile(DWORD uFlags,LPSTR szFileName,LPSTR szWinDir,LPSTR szAppDir,LPSTR szCurDir,PUINT lpuCurDirLen,LPSTR szDestDir,PUINT lpuDestDirLen) DWORD WINAPI <winver.h>
VerFindFileA(DWORD uFlags,LPSTR szFileName,LPSTR szWinDir,LPSTR szAppDir,LPSTR szCurDir,PUINT lpuCurDirLen,LPSTR szDestDir,PUINT lpuDestDirLen) DWORD WINAPI <winver.h>
VerFindFileW(DWORD uFlags,LPWSTR szFileName,LPWSTR szWinDir,LPWSTR szAppDir,LPWSTR szCurDir,PUINT lpuCurDirLen,LPWSTR szDestDir,PUINT lpuDestDirLen) DWORD WINAPI <winver.h>
VERIFIER_STOP(Code,Msg,P1,S1,P2,S2,P3,S3,P4,S4)<winnt.h>
VerifierEnumerateResource(HANDLE Process,ULONG Flags,ULONG ResourceType,AVRF_RESOURCE_ENUMERATE_CALLBACK ResourceCallback,PVOID EnumerationContext) ULONG NTAPI <avrfsdk.h>
VerifierIsPerUserSettingsEnabled(VOID) WINBOOL NTAPI <avrfsdk.h>
Verify(BYTE byRefCtrl,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
VERIFY_SIGNATURE_FN(PCtxtHandle,PSecBufferDesc,unsigned __LONG32,unsigned __LONG32 *) typedef SECURITY_STATUS<sspi.h>
VerifyCatalog(const WCHAR * pwszMachine,const WCHAR * pwszCatalogName)virtual HRESULT WINAPI <indexsrv.h>
VerifyRequest(const BSTR strConfig,LONG Context,LONG bNewRequest,LONG Flags,LONG * pDisposition)virtual HRESULT WINAPI <certpol.h>
VerifyScripts(DWORD dwFlags,LPCWSTR lpLocaleScripts,int cchLocaleScripts,LPCWSTR lpTestScripts,int cchTestScripts) WINBASEAPI WINBOOL WINAPI <winnls.h>
VERIFYSERVERCERT(PLDAP Connection,PCCERT_CONTEXT pServerCert) typedef BOOLEAN<winldap.h>
VerifySignature(PCtxtHandle phContext,PSecBufferDesc pMessage,unsigned __LONG32 MessageSeqNo,unsigned __LONG32 * pfQOP) KSECDDDECLSPEC SECURITY_STATUS WINAPI <sspi.h>
VerifyVersionInfo(LPOSVERSIONINFOEXA lpVersionInformation,DWORD dwTypeMask,DWORDLONG dwlConditionMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation,DWORD dwTypeMask,DWORDLONG dwlConditionMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation,DWORD dwTypeMask,DWORDLONG dwlConditionMask) WINBASEAPI WINBOOL WINAPI <winbase.h>
VerInstallFile(DWORD uFlags,LPSTR szSrcFileName,LPSTR szDestFileName,LPSTR szSrcDir,LPSTR szDestDir,LPSTR szCurDir,LPSTR szTmpFile,PUINT lpuTmpFileLen) DWORD WINAPI <winver.h>
VerInstallFileA(DWORD uFlags,LPSTR szSrcFileName,LPSTR szDestFileName,LPSTR szSrcDir,LPSTR szDestDir,LPSTR szCurDir,LPSTR szTmpFile,PUINT lpuTmpFileLen) DWORD WINAPI <winver.h>
VerInstallFileW(DWORD uFlags,LPWSTR szSrcFileName,LPWSTR szDestFileName,LPWSTR szSrcDir,LPWSTR szDestDir,LPWSTR szCurDir,LPWSTR szTmpFile,PUINT lpuTmpFileLen) DWORD WINAPI <winver.h>
VerLanguageName(DWORD wLang,LPSTR szLang,DWORD nSize) DWORD WINAPI <winver.h>
VerLanguageNameA(DWORD wLang,LPSTR szLang,DWORD nSize) DWORD WINAPI <winver.h>
VerLanguageNameW(DWORD wLang,LPWSTR szLang,DWORD nSize) DWORD WINAPI <winver.h>
VerQueryValue(LPCVOID pBlock,LPCSTR lpSubBlock,LPVOID * lplpBuffer,PUINT puLen) WINBOOL WINAPI <winver.h>
VerQueryValueA(LPCVOID pBlock,LPCSTR lpSubBlock,LPVOID * lplpBuffer,PUINT puLen) WINBOOL WINAPI <winver.h>
VerQueryValueW(LPCVOID pBlock,LPCWSTR lpSubBlock,LPVOID * lplpBuffer,PUINT puLen) WINBOOL WINAPI <winver.h>
VerSetConditionMask(IN ULONGLONG ConditionMask,IN ULONG TypeMask,IN UCHAR Condition)<sysinfoapi.h>
VerSetConditionMask(ULONGLONG ConditionMask,ULONG TypeMask,UCHAR Condition) NTSYSAPI ULONGLONG NTAPI <sysinfoapi.h>
VideoDebugPrint(x)<video.h>
VideoForWindowsVersion(void) DWORD WINAPI <vfw.h>
VideoModePreferrence(ULONG ulPreferredDisplayMode)virtual HRESULT WINAPI <strmif.h>
VideoPortAcquireDeviceLock(IN PVOID HwDeviceExtension)<video.h>
VideoPortAcquireSpinLock(IN PVOID HwDeviceExtension,IN PSPIN_LOCK SpinLock,OUT PUCHAR OldIrql)<video.h>
VideoPortAcquireSpinLockAtDpcLevel(IN PVOID HwDeviceExtension,IN PSPIN_LOCK SpinLock)<video.h>
VideoPortAllocateBuffer(IN PVOID HwDeviceExtension,IN ULONG Size,OUT PVOID * Buffer)<video.h>
VideoPortAllocateCommonBuffer(IN PVOID HwDeviceExtension,IN PVP_DMA_ADAPTER VpDmaAdapter,IN ULONG DesiredLength,OUT PPHYSICAL_ADDRESS LogicalAddress,IN BOOLEAN CacheEnabled,PVOID Reserved)<video.h>
VideoPortAllocateContiguousMemory(IN PVOID HwDeviceExtension,IN ULONG NumberOfBytes,IN PHYSICAL_ADDRESS HighestAcceptableAddress)<video.h>
VideoPortAllocatePool(IN PVOID HwDeviceExtension,IN VP_POOL_TYPE PoolType,IN SIZE_T NumberOfBytes,IN ULONG Tag)<video.h>
VideoPortAssociateEventsWithDmaHandle(IN PVOID HwDeviceExtension,IN OUT PVIDEO_REQUEST_PACKET pVrp,IN PVOID MappedUserEvent,IN PVOID DisplayDriverEvent)<video.h>
VideoPortCheckForDeviceExistence(IN PVOID HwDeviceExtension,IN USHORT VendorId,IN USHORT DeviceId,IN UCHAR RevisionId,IN USHORT SubVendorId,IN USHORT SubSystemId,IN ULONG Flags)<video.h>
VideoPortClearEvent(IN PVOID HwDeviceExtension,IN PEVENT pEvent)<video.h>
VideoPortCompareMemory(IN PVOID Source1,IN PVOID Source2,IN SIZE_T Length)<video.h>
VideoPortCompleteDma(IN PVOID HwDeviceExtension,IN PVP_DMA_ADAPTER VpDmaAdapter,IN PVP_SCATTER_GATHER_LIST VpScatterGather,IN BOOLEAN WriteToDevice)<video.h>
VideoPortCreateEvent(IN PVOID HwDeviceExtension,IN ULONG EventFlag,IN PVOID Unused,OUT PEVENT * ppEvent)<video.h>
VideoPortCreateSecondaryDisplay(IN PVOID HwDeviceExtension,IN OUT PVOID * SecondaryDeviceExtension,IN ULONG ulFlag)<video.h>
VideoPortCreateSpinLock(IN PVOID HwDeviceExtension,OUT PSPIN_LOCK * SpinLock)<video.h>
VideoPortDbgReportComplete(IN OUT PVIDEO_DEBUG_REPORT pReport)<video.h>
VideoPortDbgReportCreate(IN PVOID HwDeviceExtension,IN ULONG ulCode,IN ULONG_PTR ulpArg1,IN ULONG_PTR ulpArg2,IN ULONG_PTR ulpArg3,IN ULONG_PTR ulpArg4)<video.h>
VideoPortDbgReportSecondaryData(IN OUT PVIDEO_DEBUG_REPORT pReport,IN PVOID pvData,IN ULONG ulDataSize)<video.h>
VideoPortDDCMonitorHelper(IN PVOID HwDeviceExtension,IN PVOID DDCControl,IN OUT PUCHAR EdidBuffer,IN ULONG EdidBufferSize)<video.h>
VideoPortDebugPrint(IN VIDEO_DEBUG_LEVEL DebugPrintLevel,IN PSTR DebugMessage,IN...)<video.h>
VideoPortDeleteEvent(IN PVOID HwDeviceExtension,IN PEVENT pEvent)<video.h>
VideoPortDeleteSpinLock(IN PVOID HwDeviceExtension,IN PSPIN_LOCK SpinLock)<video.h>
VideoPortDisableInterrupt(IN PVOID HwDeviceExtension)<video.h>
VideoPortDoDma(IN PVOID HwDeviceExtension,IN PDMA pDma,IN DMA_FLAGS DmaFlags)<video.h>
VideoPortEnableInterrupt(IN PVOID HwDeviceExtension)<video.h>
VideoPortEnumerateChildren(IN PVOID HwDeviceExtension,IN PVOID Reserved)<video.h>
VideoPortFlushRegistry(PVOID HwDeviceExtension)<video.h>
VideoPortFreeCommonBuffer(IN PVOID HwDeviceExtension,IN ULONG Length,IN PVOID VirtualAddress,IN PHYSICAL_ADDRESS LogicalAddress,IN BOOLEAN CacheEnabled)<video.h>
VideoPortFreeDeviceBase(IN PVOID HwDeviceExtension,IN PVOID MappedAddress)<video.h>
VideoPortFreePool(IN PVOID HwDeviceExtension,IN PVOID Ptr)<video.h>
VideoPortGetAccessRanges(IN PVOID HwDeviceExtension,IN ULONG NumRequestedResources,IN PIO_RESOURCE_DESCRIPTOR RequestedResources OPTIONAL,IN ULONG NumAccessRanges,OUT PVIDEO_ACCESS_RANGE AccessRanges,IN PVOID VendorId,IN PVOID DeviceId,OUT PULONG Slot)<video.h>
VideoPortGetAgpServices(IN PVOID HwDeviceExtension,IN PVIDEO_PORT_AGP_SERVICES AgpServices)<videoagp.h>
VideoPortGetAssociatedDeviceExtension(IN PVOID DeviceObject)<video.h>
VideoPortGetAssociatedDeviceID(IN PVOID DeviceObject)<video.h>
VideoPortGetBusData(IN PVOID HwDeviceExtension,IN BUS_DATA_TYPE BusDataType,IN ULONG SlotNumber,IN OUT PVOID Buffer,IN ULONG Offset,IN ULONG Length)<video.h>
VideoPortGetBytesUsed(IN PVOID HwDeviceExtension,IN PDMA pDma)<video.h>
VideoPortGetCommonBuffer(IN PVOID HwDeviceExtension,IN ULONG DesiredLength,IN ULONG Alignment,OUT PPHYSICAL_ADDRESS LogicalAddress,OUT PULONG pActualLength,IN BOOLEAN CacheEnabled)<video.h>
VideoPortGetCurrentIrql(VOID)<video.h>
VideoPortGetDeviceBase(IN PVOID HwDeviceExtension,IN PHYSICAL_ADDRESS IoAddress,IN ULONG NumberOfUchars,IN UCHAR InIoSpace)<video.h>
VideoPortGetDeviceData(IN PVOID HwDeviceExtension,IN VIDEO_DEVICE_DATA_TYPE DeviceDataType,IN PMINIPORT_QUERY_DEVICE_ROUTINE CallbackRoutine,IN PVOID Context)<video.h>
VideoPortGetDmaAdapter(IN PVOID HwDeviceExtension,IN PVP_DEVICE_DESCRIPTION VpDeviceDescription)<video.h>
VideoPortGetDmaContext(IN PVOID HwDeviceExtension,IN PDMA pDma)<video.h>
VideoPortGetMdl(IN PVOID HwDeviceExtension,IN PDMA pDma)<video.h>
VideoPortGetRegistryParameters(IN PVOID HwDeviceExtension,IN PWSTR ParameterName,IN UCHAR IsParameterFileName,IN PMINIPORT_GET_REGISTRY_ROUTINE CallbackRoutine,IN PVOID Context)<video.h>
VideoPortGetRomImage(IN PVOID HwDeviceExtension,IN PVOID Unused1,IN ULONG Unused2,IN ULONG Length)<video.h>
VideoPortGetVersion(IN PVOID HwDeviceExtension,IN OUT PVPOSVERSIONINFO pVpOsVersionInfo)<video.h>
VideoPortGetVgaStatus(IN PVOID HwDeviceExtension,OUT PULONG VgaStatus)<video.h>
VideoPortInitialize(IN PVOID Argument1,IN PVOID Argument2,IN PVIDEO_HW_INITIALIZATION_DATA HwInitializationData,IN PVOID HwContext)<video.h>
VideoPortInt10(IN PVOID HwDeviceExtension,IN PVIDEO_X86_BIOS_ARGUMENTS BiosArguments)<video.h>
VideoPortInterlockedDecrement(IN PLONG Addend)<video.h>
VideoPortInterlockedExchange(IN OUT PLONG Target,IN LONG Value)<video.h>
VideoPortInterlockedIncrement(IN PLONG Addend)<video.h>
VideoPortIsNoVesa(VOID)<video.h>
VideoPortLockBuffer(IN PVOID HwDeviceExtension,IN PVOID BaseAddress,IN ULONG Length,IN VP_LOCK_OPERATION Operation)<video.h>
VideoPortLockPages(IN PVOID HwDeviceExtension,IN OUT PVIDEO_REQUEST_PACKET pVrp,IN OUT PEVENT pUEvent,IN PEVENT pDisplayEvent,IN DMA_FLAGS DmaFlags)<video.h>
VideoPortLogError(IN PVOID HwDeviceExtension,IN PVIDEO_REQUEST_PACKET Vrp OPTIONAL,IN VP_STATUS ErrorCode,IN ULONG UniqueId)<video.h>
VideoPortMapBankedMemory(IN PVOID HwDeviceExtension,IN PHYSICAL_ADDRESS PhysicalAddress,IN OUT PULONG Length,PULONG InIoSpace,PVOID * VirtualAddress,ULONG BankLength,UCHAR ReadWriteBank,PBANKED_SECTION_ROUTINE BankRoutine,PVOID Context)<video.h>
VideoPortMapDmaMemory(IN PVOID HwDeviceExtension,IN PVIDEO_REQUEST_PACKET pVrp,IN PHYSICAL_ADDRESS BoardAddress,IN PULONG Length,IN PULONG InIoSpace,IN PVOID MappedUserEvent,IN PVOID DisplayDriverEvent,IN OUT PVOID * VirtualAddress)<video.h>
VideoPortMapMemory(IN PVOID HwDeviceExtension,IN PHYSICAL_ADDRESS PhysicalAddress,IN OUT PULONG Length,IN PULONG InIoSpace,IN OUT PVOID * VirtualAddress)<video.h>
VideoPortMoveMemory(IN PVOID Destination,IN PVOID Source,IN ULONG Length)<video.h>
VideoPortPutDmaAdapter(IN PVOID HwDeviceExtension,IN PVP_DMA_ADAPTER VpDmaAdapter)<video.h>
VideoPortQueryPerformanceCounter(IN PVOID HwDeviceExtension,OUT PLONGLONG PerformanceFrequency OPTIONAL)<video.h>
VideoPortQueryServices(IN PVOID HwDeviceExtension,IN VIDEO_PORT_SERVICES ServicesType,IN OUT PINTERFACE Interface)<video.h>
VideoPortQuerySystemTime(OUT PLARGE_INTEGER CurrentTime)<video.h>
VideoPortQueueDpc(IN PVOID HwDeviceExtension,IN PMINIPORT_DPC_ROUTINE CallbackRoutine,IN PVOID Context)<video.h>
VideoPortReadPortBufferUchar(IN PUCHAR Port,OUT PUCHAR Buffer,IN ULONG Count)<video.h>
VideoPortReadPortBufferUlong(IN PULONG Port,OUT PULONG Buffer,IN ULONG Count)<video.h>
VideoPortReadPortBufferUshort(IN PUSHORT Port,OUT PUSHORT Buffer,IN ULONG Count)<video.h>
VideoPortReadPortUchar(IN PUCHAR Port)<video.h>
VideoPortReadPortUlong(IN PULONG Port)<video.h>
VideoPortReadPortUshort(IN PUSHORT Port)<video.h>
VideoPortReadRegisterBufferUchar(IN PUCHAR Register,OUT PUCHAR Buffer,IN ULONG Count)<video.h>
VideoPortReadRegisterBufferUlong(IN PULONG Register,OUT PULONG Buffer,IN ULONG Count)<video.h>
VideoPortReadRegisterBufferUshort(IN PUSHORT Register,OUT PUSHORT Buffer,IN ULONG Count)<video.h>
VideoPortReadRegisterUchar(IN PUCHAR Register)<video.h>
VideoPortReadRegisterUlong(IN PULONG Register)<video.h>
VideoPortReadRegisterUshort(IN PUSHORT Register)<video.h>
VideoPortReadStateEvent(IN PVOID HwDeviceExtension,IN PEVENT pEvent)<video.h>
VideoPortRegisterBugcheckCallback(IN PVOID HwDeviceExtension,IN ULONG BugcheckCode,IN PVIDEO_BUGCHECK_CALLBACK Callback,IN ULONG BugcheckDataSize)<video.h>
VideoPortReleaseBuffer(IN PVOID HwDeviceExtension,IN PVOID Buffer)<video.h>
VideoPortReleaseCommonBuffer(IN PVOID HwDeviceExtension,IN PVP_DMA_ADAPTER VpDmaAdapter,IN ULONG Length,IN PHYSICAL_ADDRESS LogicalAddress,IN PVOID VirtualAddress,IN BOOLEAN CacheEnabled)<video.h>
VideoPortReleaseDeviceLock(IN PVOID HwDeviceExtension)<video.h>
VideoPortReleaseSpinLock(IN PVOID HwDeviceExtension,IN PSPIN_LOCK SpinLock,IN UCHAR NewIrql)<video.h>
VideoPortReleaseSpinLockFromDpcLevel(IN PVOID HwDeviceExtension,IN PSPIN_LOCK SpinLock)<video.h>
VideoPortScanRom(PVOID HwDeviceExtension,PUCHAR RomBase,ULONG RomLength,PUCHAR String)<video.h>
VideoPortSetBusData(IN PVOID HwDeviceExtension,IN BUS_DATA_TYPE BusDataType,IN ULONG SlotNumber,IN PVOID Buffer,IN ULONG Offset,IN ULONG Length)<video.h>
VideoPortSetBytesUsed(IN PVOID HwDeviceExtension,IN OUT PDMA pDma,IN ULONG BytesUsed)<video.h>
VideoPortSetDmaContext(IN PVOID HwDeviceExtension,OUT PDMA pDma,IN PVOID InstanceContext)<video.h>
VideoPortSetEvent(IN PVOID HwDeviceExtension,IN PEVENT pEvent)<video.h>
VideoPortSetRegistryParameters(IN PVOID HwDeviceExtension,IN PWSTR ValueName,IN PVOID ValueData,IN ULONG ValueLength)<video.h>
VideoPortSetTrappedEmulatorPorts(IN PVOID HwDeviceExtension,IN ULONG NumAccessRanges,IN PVIDEO_ACCESS_RANGE AccessRange)<video.h>
VideoPortSignalDmaComplete(IN PVOID HwDeviceExtension,IN PDMA pDmaHandle)<video.h>
VideoPortStallExecution(IN ULONG Microseconds)<video.h>
VideoPortStartDma(IN PVOID HwDeviceExtension,IN PVP_DMA_ADAPTER VpDmaAdapter,IN PVOID Mdl,IN ULONG Offset,IN OUT PULONG pLength,IN PEXECUTE_DMA ExecuteDmaRoutine,IN PVOID Context,IN BOOLEAN WriteToDevice)<video.h>
VideoPortStartTimer(IN PVOID HwDeviceExtension)<video.h>
VideoPortStopTimer(IN PVOID HwDeviceExtension)<video.h>
VideoPortSynchronizeExecution(IN PVOID HwDeviceExtension,IN VIDEO_SYNCHRONIZE_PRIORITY Priority,IN PMINIPORT_SYNCHRONIZE_ROUTINE SynchronizeRoutine,IN PVOID Context)<video.h>
VideoPortUnLockBuffer(IN PVOID HwDeviceExtension,IN PVOID Mdl)<video.h>
VideoPortUnlockPages(IN PVOID hwDeviceExtension,IN OUT PDMA pDma)<video.h>
VideoPortUnmapDmaMemory(IN PVOID HwDeviceExtension,IN PVOID VirtualAddress,IN HANDLE ProcessHandle,IN PDMA BoardMemoryHandle)<video.h>
VideoPortUnmapMemory(IN PVOID HwDeviceExtension,IN OUT PVOID VirtualAddress,IN HANDLE ProcessHandle)<video.h>
VideoPortVerifyAccessRanges(IN PVOID HwDeviceExtension,IN ULONG NumAccessRanges,IN PVIDEO_ACCESS_RANGE AccessRanges)<video.h>
VideoPortWaitForSingleObject(IN PVOID HwDeviceExtension,IN PVOID Object,IN PLARGE_INTEGER Timeout OPTIONAL)<video.h>
VideoPortWritePortBufferUchar(IN PUCHAR Port,IN PUCHAR Buffer,IN ULONG Count)<video.h>
VideoPortWritePortBufferUlong(IN PULONG Port,IN PULONG Buffer,IN ULONG Count)<video.h>
VideoPortWritePortBufferUshort(IN PUSHORT Port,IN PUSHORT Buffer,IN ULONG Count)<video.h>
VideoPortWritePortUchar(IN PUCHAR Port,IN UCHAR Value)<video.h>
VideoPortWritePortUlong(IN PULONG Port,IN ULONG Value)<video.h>
VideoPortWritePortUshort(IN PUSHORT Port,IN USHORT Value)<video.h>
VideoPortWriteRegisterBufferUchar(IN PUCHAR Register,IN PUCHAR Buffer,IN ULONG Count)<video.h>
VideoPortWriteRegisterBufferUlong(IN PULONG Register,IN PULONG Buffer,IN ULONG Count)<video.h>
VideoPortWriteRegisterBufferUshort(IN PUSHORT Register,IN PUSHORT Buffer,IN ULONG Count)<video.h>
VideoPortWriteRegisterUchar(IN PUCHAR Register,IN UCHAR Value)<video.h>
VideoPortWriteRegisterUlong(IN PULONG Register,IN ULONG Value)<video.h>
VideoPortWriteRegisterUshort(IN PUSHORT Register,IN USHORT Value)<video.h>
VideoPortZeroDeviceMemory(IN PVOID Destination,IN ULONG Length)<video.h>
VideoPortZeroMemory(IN PVOID Destination,IN ULONG Length)<video.h>
VidMemAlloc(LPVMEMHEAP pvmh,DWORD width,DWORD height) extern FLATPTR WINAPI <dmemmgr.h>
VidMemFree(LPVMEMHEAP pvmh,FLATPTR ptr) extern void WINAPI <dmemmgr.h>
ViewMemento(BSTR Memento)virtual HRESULT WINAPI <mmcobj.h>
VirtualAlloc(LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect) WINBASEAPI LPVOID WINAPI <memoryapi.h>
VirtualAllocEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect) WINBASEAPI LPVOID WINAPI <memoryapi.h>
VirtualAllocExNuma(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect,DWORD nndPreferred) WINBASEAPI LPVOID WINAPI <winbase.h>
VirtualAllocFromApp(PVOID BaseAddress,SIZE_T Size,ULONG AllocationType,ULONG Protection) WINBASEAPI PVOID WINAPI <memoryapi.h>
VirtualFree(LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType)WINBASEAPI WINBOOL WINAPI <memoryapi.h>
VirtualFreeEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
VirtualLock(LPVOID lpAddress,SIZE_T dwSize) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
VirtualProtect(LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
VirtualProtectEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
VirtualQuery(LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,SIZE_T dwLength) WINBASEAPI SIZE_T WINAPI <memoryapi.h>
VirtualQueryEx(HANDLE hProcess,LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,SIZE_T dwLength) WINBASEAPI SIZE_T WINAPI <memoryapi.h>
VirtualUnlock(LPVOID lpAddress,SIZE_T dwSize) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
VisibleState(__LONG32 dwCharID,__LONG32 bVisible,__LONG32 dwCause)virtual HRESULT WINAPI <agtsvr.h>
VkKeyScan(CHAR ch) WINUSERAPI SHORT WINAPI <winuser.h>
VkKeyScanA(CHAR ch) WINUSERAPI SHORT WINAPI <winuser.h>
VkKeyScanEx(CHAR ch,HKL dwhkl) WINUSERAPI SHORT WINAPI <winuser.h>
VkKeyScanExA(CHAR ch,HKL dwhkl) WINUSERAPI SHORT WINAPI <winuser.h>
VkKeyScanExW(WCHAR ch,HKL dwhkl) WINUSERAPI SHORT WINAPI <winuser.h>
VkKeyScanW(WCHAR ch) WINUSERAPI SHORT WINAPI <winuser.h>
VMAlloc(ULONG)void<mapidbg.h>
VMAllocEx(ULONG,ULONG)void<mapidbg.h>
VMFree(void *)void EXPORTDBG __cdecl <mapidbg.h>
VMFreeEx(void *,ULONG)void EXPORTDBG __cdecl <mapidbg.h>
VMGetSize(void *)ULONG EXPORTDBG __cdecl <mapidbg.h>
VMGetSizeEx(void *,ULONG)ULONG EXPORTDBG __cdecl <mapidbg.h>
VMRealloc(void *,ULONG)void<mapidbg.h>
VMReallocEx(void *,ULONG,ULONG)void<mapidbg.h>
VOID() typedef  WINAPI BAD_MEMORY_CALLBACK_ROUTINE<winsplp.h>
VOID(WINAPI * pfnShutdown) <winsplp.h>
VOID_OFFSET()()()
VOID_OFFSET(pv, cb)<shlobj.h>
VolumeLabel(WCHAR) WCHAR <winternl.h>
VoteRequest(void)virtual HRESULT WINAPI <txdtc.h>
VoteRequestDone(HRESULT hr,BOID * pboidReason)virtual HRESULT WINAPI <txdtc.h>
VSS_PROTECTION_FAULT_DESTROY_ALL_SNAPSHOTS( VSS_PROTECTION_FAULT_GROW_FAILED + 1 ) <vsmgmt.h>
VSS_PROTECTION_FAULT_DIFF_AREA_MISSING( VSS_PROTECTION_FAULT_NONE + 1 ) <vsmgmt.h>
VSS_PROTECTION_FAULT_DIFF_AREA_REMOVED( VSS_PROTECTION_FAULT_IO_FAILURE + 1 ) <vsmgmt.h>
VSS_PROTECTION_LEVEL_SNAPSHOT( VSS_PROTECTION_LEVEL_ORIGINAL_VOLUME + 1 ) <vsmgmt.h>
VSSamplers(D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT)BYTE <d3d10effect.h>
VssFreeSnapshotProperties(VSS_SNAPSHOT_PROP * pProp)void WINAPI <vsbackup.h>
VssFreeSnapshotPropertiesInternal(VSS_SNAPSHOT_PROP * pProp)void WINAPI <vsbackup.h>
VSShaderResources(D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT)BYTE <d3d10effect.h>
W1(x)<vdmdbg.h>
W2(x)<vdmdbg.h>
W3(x)<vdmdbg.h>
W4(x)<vdmdbg.h>
W_MINIPORT_CALLBACK(IN NDIS_HANDLE MiniportAdapterContext,IN PVOID CallbackContext)typedef VOID<ndis.h>
WAB_IWABEXTINIT_METHODS(IPURE)<wabapi.h>
WAB_IWABOBJECT_METHODS(IMPL)<wabapi.h>
WAB_IWABOBJECT_METHODS(IPURE)<wabapi.h>
WABALLOCATEBUFFER(LPWABOBJECT lpWABObject,ULONG cbSize,LPVOID * lppBuffer)typedef SCODE<wabmem.h>
WABALLOCATEMORE(LPWABOBJECT lpWABObject,ULONG cbSize,LPVOID lpObject,LPVOID * lppBuffer)typedef SCODE<wabmem.h>
WABCreateIProp(LPCIID lpInterface,ALLOCATEBUFFER * lpAllocateBuffer,ALLOCATEMORE * lpAllocateMore,FREEBUFFER * lpFreeBuffer,LPVOID lpvReserved,LPPROPDATA * lppPropData) STDAPI_<wabutil.h>
WABFREEBUFFER(LPWABOBJECT lpWABObject,LPVOID lpBuffer)typedef ULONG<wabmem.h>
WABOpen(LPADRBOOK * lppAdrBook,LPWABOBJECT * lppWABObject,LPWAB_PARAM lpWP,DWORD Reserved2) STDMETHODIMP <wabapi.h>
WABOPEN(LPADRBOOK * lppAdrBook,LPWABOBJECT * lppWABObject,LPWAB_PARAM lpWP,DWORD Reserved2) typedef HRESULT<wabapi.h>
WABOpenEx(LPADRBOOK * lppAdrBook,LPWABOBJECT * lppWABObject,LPWAB_PARAM lpWP,DWORD Reserved,ALLOCATEBUFFER * fnAllocateBuffer,ALLOCATEMORE * fnAllocateMore,FREEBUFFER * fnFreeBuffer) STDMETHODIMP <wabapi.h>
WABOPENEX(LPADRBOOK * lppAdrBook,LPWABOBJECT * lppWABObject,LPWAB_PARAM lpWP,DWORD Reserved,ALLOCATEBUFFER * fnAllocateBuffer,ALLOCATEMORE * fnAllocateMore,FREEBUFFER * fnFreeBuffer) typedef HRESULT<wabapi.h>
Wait(__LONG32 dwReqID,__LONG32 * pdwReqID)virtual HRESULT WINAPI <agtsvr.h>
Wait(IDispatch * WaitForRequest,IAgentCtlRequest ** Request)virtual HRESULT WINAPI <agtsvr.h>
WaitCommEvent(HANDLE hFile,LPDWORD lpEvtMask,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <winbase.h>
WaitForCompletion(__LONG32 msTimeout,__LONG32 * pEvCode)virtual HRESULT WINAPI <control.h>
WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent,DWORD dwMilliseconds) WINBASEAPI WINBOOL APIENTRY <debugapi.h>
WaitForEnd(void)virtual HRESULT WINAPI <strmif.h>
WaitForEnlistment(void)virtual HRESULT WINAPI <txdtc.h>
WaitForInputIdle(HANDLE hProcess,DWORD dwMilliseconds) WINUSERAPI DWORD WINAPI <winuser.h>
WaitForMultipleObjects(DWORD nCount,CONST HANDLE * lpHandles,WINBOOL bWaitAll,DWORD dwMilliseconds) WINBASEAPI DWORD WINAPI <winbase.h>
WaitForMultipleObjectsEx(DWORD nCount,CONST HANDLE * lpHandles,WINBOOL bWaitAll,DWORD dwMilliseconds,WINBOOL bAlertable) WINBASEAPI DWORD WINAPI <synchapi.h>
WaitForNtmsNotification(HANDLE hNotification,LPNTMS_NOTIFICATIONINFORMATION lpNotificationInformation,DWORD dwTimeout) DWORD WINAPI <ntmsapi.h>
WaitForNtmsOperatorRequest(HANDLE hSession,LPNTMS_GUID lpRequestId,DWORD dwTimeout) DWORD WINAPI <ntmsapi.h>
WaitForPrinterChange(HANDLE hPrinter,DWORD Flags) DWORD WINAPI <winspool.h>
WaitForSingleObject(HANDLE hHandle,DWORD dwMilliseconds) WINBASEAPI DWORD WINAPI <synchapi.h>
WaitForSingleObjectEx(HANDLE hHandle,DWORD dwMilliseconds,WINBOOL bAlertable) WINBASEAPI DWORD WINAPI <synchapi.h>
WaitForStart(void)virtual HRESULT WINAPI <strmif.h>
WaitForThreadpoolIoCallbacks(PTP_IO pio,WINBOOL fCancelPendingCallbacks) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
WaitForThreadpoolTimerCallbacks(PTP_TIMER pti,WINBOOL fCancelPendingCallbacks) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
WaitForThreadpoolWaitCallbacks(PTP_WAIT pwa,WINBOOL fCancelPendingCallbacks) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
WaitForThreadpoolWorkCallbacks(PTP_WORK pwk,WINBOOL fCancelPendingCallbacks) WINBASEAPI VOID WINAPI <threadpoolapiset.h>
WaitMessage(VOID) WINUSERAPI WINBOOL WINAPI <winuser.h>
WaitNamedPipe(LPCSTR lpNamedPipeName,DWORD nTimeOut) WINBASEAPI WINBOOL WINAPI <winbase.h>
WaitNamedPipeA(LPCSTR lpNamedPipeName,DWORD nTimeOut) WINBASEAPI WINBOOL WINAPI <winbase.h>
WaitNamedPipeW(LPCWSTR lpNamedPipeName,DWORD nTimeOut) WINBASEAPI WINBOOL WINAPI <namedpipeapi.h>
WaitOnAddress(volatile VOID * Address,PVOID CompareAddress,SIZE_T AddressSize,DWORD dwMilliseconds) WINBOOL WINAPI <synchapi.h>
WAITORTIMERCALLBACKFUNC(PVOID,BOOLEAN)typedef VOID<winnt.h>
WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable) WINBASEAPI VOID WINAPI <synchapi.h>
WakeByAddressAll(PVOID Address) VOID WINAPI <synchapi.h>
WakeByAddressSingle(PVOID Address) VOID WINAPI <synchapi.h>
WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable) WINBASEAPI VOID WINAPI <synchapi.h>
WalkFrame(DWORD walkWhat,ICallFrameWalker * pWalker)virtual HRESULT WINAPI <callobj.h>
WAN_TRANSFER_DATA_HANDLER(VOID)typedef NDIS_STATUS<ndis.h>
Warp(const PointF * destPoints,INT count,const RectF & srcRect,const Matrix * matrix=NULL,WarpMode warpMode=WarpModePerspective,REAL flatness=FlatnessDefault)	Status <gdipluspath.h>
WAVE_CTL_CODE()()()
WAVE_CTL_CODE(subcode, iomethod, access)<ntddsnd.h>
waveInAddBuffer(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInClose(HWAVEIN hwi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetDevCaps(UINT_PTR uDeviceID,LPWAVEINCAPSA pwic,UINT cbwic) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetDevCapsA(UINT_PTR uDeviceID,LPWAVEINCAPSA pwic,UINT cbwic) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetDevCapsW(UINT_PTR uDeviceID,LPWAVEINCAPSW pwic,UINT cbwic) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetErrorText(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetID(HWAVEIN hwi,LPUINT puDeviceID) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInGetNumDevs(void) WINMMAPI UINT WINAPI <mmsystem.h>
waveInGetPosition(HWAVEIN hwi,LPMMTIME pmmt,UINT cbmmt) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInMessage(HWAVEIN hwi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInOpen(LPHWAVEIN phwi,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInPrepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInReset(HWAVEIN hwi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInStart(HWAVEIN hwi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInStop(HWAVEIN hwi) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveInUnprepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutBreakLoop(HWAVEOUT hwo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutClose(HWAVEOUT hwo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetDevCaps(UINT_PTR uDeviceID,LPWAVEOUTCAPSA pwoc,UINT cbwoc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetDevCapsA(UINT_PTR uDeviceID,LPWAVEOUTCAPSA pwoc,UINT cbwoc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetDevCapsW(UINT_PTR uDeviceID,LPWAVEOUTCAPSW pwoc,UINT cbwoc) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetErrorText(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetID(HWAVEOUT hwo,LPUINT puDeviceID) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetNumDevs(void) WINMMAPI UINT WINAPI <mmsystem.h>
waveOutGetPitch(HWAVEOUT hwo,LPDWORD pdwPitch) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetPlaybackRate(HWAVEOUT hwo,LPDWORD pdwRate) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetPosition(HWAVEOUT hwo,LPMMTIME pmmt,UINT cbmmt) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutGetVolume(HWAVEOUT hwo,LPDWORD pdwVolume) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutMessage(HWAVEOUT hwo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutOpen(LPHWAVEOUT phwo,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutPause(HWAVEOUT hwo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutPrepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutReset(HWAVEOUT hwo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutRestart(HWAVEOUT hwo) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutSetPitch(HWAVEOUT hwo,DWORD dwPitch) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutSetPlaybackRate(HWAVEOUT hwo,DWORD dwRate) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutSetVolume(HWAVEOUT hwo,DWORD dwVolume) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutUnprepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
waveOutWrite(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh) WINMMAPI MMRESULT WINAPI <mmsystem.h>
WCode()inline WORD _com_error::<comdef.h>
WCODE_HRESULT_FIRST(SEVERITY_ERROR,FACILITY_ITF,0x200)<comdef.h>
WCODE_HRESULT_LAST(SEVERITY_ERROR,FACILITY_ITF,0x200)WCODE_HRESULT_FIRST<comdef.h>
WCodeToHRESULT(WORD wCode)inline HRESULT _com_error::<comdef.h>
WcsAssociateColorProfileWithDevice(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PCWSTR pProfileName,PCWSTR pDeviceName)WINBOOL WINAPI <icm.h>
WcsCheckColors(HTRANSFORM hColorTransform,DWORD nColors,DWORD nInputChannels,COLORDATATYPE cdtInput,DWORD cbInput,PVOID pInputData,PBYTE paResult)WINBOOL WINAPI <icm.h>
WcsCreateIccProfile(HPROFILE hWcsProfile,DWORD dwOptions)HPROFILE WINAPI <icm.h>
WcsDisassociateColorProfileFromDevice(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PCWSTR pProfileName,PCWSTR pDeviceName)WINBOOL WINAPI <icm.h>
WcsEnumColorProfiles(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PENUMTYPEW pEnumRecord,PBYTE pBuffer,DWORD dwSize,PDWORD pnProfiles)WINBOOL WINAPI <icm.h>
WcsEnumColorProfilesSize(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PENUMTYPEW pEnumRecord,PDWORD pdwSize)WINBOOL WINAPI <icm.h>
WcsGetDefaultColorProfile(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PCWSTR pDeviceName,COLORPROFILETYPE cptColorProfileType,COLORPROFILESUBTYPE cpstColorProfileSubType,DWORD dwProfileID,DWORD cbProfileName,LPWSTR pProfileName)WINBOOL WINAPI <icm.h>
WcsGetDefaultColorProfileSize(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PCWSTR pDeviceName,COLORPROFILETYPE cptColorProfileType,COLORPROFILESUBTYPE cpstColorProfileSubType,DWORD dwProfileID,PDWORD pcbProfileName)WINBOOL WINAPI <icm.h>
WcsGetDefaultRenderingIntent(WCS_PROFILE_MANAGEMENT_SCOPE scope,PDWORD pdwRenderingIntent)WINBOOL WINAPI <icm.h>
WcsGetUsePerUserProfiles(LPCWSTR pDeviceName,DWORD dwDeviceClass,WINBOOL * pUsePerUserProfiles)WINBOOL WINAPI <icm.h>
WcsOpenColorProfile(PPROFILE pCDMPProfile,PPROFILE pCAMPProfile,PPROFILE pGMMPProfile,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwCreationMode,DWORD dwFlags)HPROFILE WINAPI <icm.h>
WcsOpenColorProfileA(PPROFILE pCDMPProfile,PPROFILE pCAMPProfile,PPROFILE pGMMPProfile,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwCreationMode,DWORD dwFlags)HPROFILE WINAPI <icm.h>
WcsOpenColorProfileW(PPROFILE pCDMPProfile,PPROFILE pCAMPProfile,PPROFILE pGMMPProfile,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwCreationMode,DWORD dwFlags)HPROFILE WINAPI <icm.h>
WcsSetDefaultColorProfile(WCS_PROFILE_MANAGEMENT_SCOPE profileManagementScope,PCWSTR pDeviceName,COLORPROFILETYPE cptColorProfileType,COLORPROFILESUBTYPE cpstColorProfileSubType,DWORD dwProfileID,LPCWSTR pProfileName)WINBOOL WINAPI <icm.h>
WcsSetDefaultRenderingIntent(WCS_PROFILE_MANAGEMENT_SCOPE scope,DWORD dwRenderingIntent)WINBOOL WINAPI <icm.h>
WcsSetUsePerUserProfiles(LPCWSTR pDeviceName,DWORD dwDeviceClass,WINBOOL usePerUserProfiles)WINBOOL WINAPI <icm.h>
WcsTranslateColors(HTRANSFORM hColorTransform,DWORD nColors,DWORD nInputChannels,COLORDATATYPE cdtInput,DWORD cbInput,PVOID pInputData,DWORD nOutputChannels,COLORDATATYPE cdtOutput,DWORD cbOutput,PVOID pOutputData)WINBOOL WINAPI <icm.h>
WdsBpAddOption(HANDLE hHandle,ULONG uOption,ULONG uValueLen,PVOID pValue)HRESULT WDSBPAPI <wdsbp.h>
WdsBpCloseHandle(HANDLE hHandle)HRESULT WDSBPAPI <wdsbp.h>
WdsBpGetOptionBuffer(HANDLE hHandle,ULONG uBufferLen,PVOID pBuffer,PULONG puBytes)HRESULT WDSBPAPI <wdsbp.h>
WdsBpInitialize(BYTE bPacketType,HANDLE * phHandle)HRESULT WDSBPAPI <wdsbp.h>
WdsBpParseInitialize(PVOID pPacket,ULONG uPacketLen,PBYTE pbPacketType,HANDLE * phHandle)HRESULT WDSBPAPI <wdsbp.h>
WdsBpQueryOption(HANDLE hHandle,ULONG uOption,ULONG uValueLen,PVOID pValue,PULONG puBytes)HRESULT WDSBPAPI <wdsbp.h>
WdsCliAuthorizeSession(HANDLE hSession,PWDS_CLI_CRED pCred)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliCancelTransfer(HANDLE hTransfer)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliClose(HANDLE Handle)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliCreateSession(PWSTR pwszServer,PWDS_CLI_CRED pCred,PHANDLE phSession)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliFindFirstImage(HANDLE hSession,PHANDLE phFindHandle)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliFindNextImage(HANDLE Handle)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetEnumerationFlags(HANDLE Handle,PDWORD pdwFlags)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageArchitecture(HANDLE hIfh,PDWORD pdwValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageDescription(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageGroup(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageHalName(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageHandleFromFindHandle(HANDLE FindHandle,PHANDLE phImageHandle)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageHandleFromTransferHandle(HANDLE hTransfer,PHANDLE phImageHandle)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageIndex(HANDLE hIfh,PDWORD pdwValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageLanguage(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageLanguages(HANDLE hIfh,PTSTR ** pppszValues,PDWORD pdwNumValues)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageLastModifiedTime(HANDLE hIfh,PSYSTEMTIME * ppSysTimeValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageName(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WINAPI <wdsclientapi.h>
WdsCliGetImageNamespace(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImagePath(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageSize(HANDLE hIfh,PULONGLONG pullValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetImageVersion(HANDLE hIfh,PWSTR * ppwszValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliGetTransferSize(HANDLE hIfh,PULONGLONG pullValue)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliInitializeLog(HANDLE hSession,ULONG ulClientArchitecture,PWSTR pwszClientId,PWSTR pwszClientAddress)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliLog(HANDLE hSession,ULONG ulLogLevel,ULONG ulMessageCode,...)HRESULT __cdecl <wdsclientapi.h>
WdsCliRegisterTrace(PFN_WdsCliTraceFunction pfn)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliTransferFile(PCWSTR pwszServer,PCWSTR pwszNamespace,PCWSTR pwszRemoteFilePath,PCWSTR pwszLocalFilePath,DWORD dwFlags,DWORD dwReserved,PFN_WdsCliCallback pfnWdsCliCallback,PVOID pvUserData,PHANDLE phTransfer)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliTransferImage(HANDLE hImage,PWSTR pwszLocalPath,DWORD dwFlags,DWORD dwReserved,PFN_WdsCliCallback pfnWdsCliCallback,PVOID pvUserData,PHANDLE phTransfer)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsCliWaitForTransfer(HANDLE hTransfer)HRESULT WDSCLIAPI <wdsclientapi.h>
WdsTransportClientAddRefBuffer(PVOID pvBuffer)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientCancelSession(HANDLE hSessionKey)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientCloseSession(HANDLE hSessionKey)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientCompleteReceive(HANDLE hSessionKey,HANDLE ulSize,PULARGE_INTEGER pullOffset)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientInitialize(void)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientInitializeSession(PWDS_TRANSPORTCLIENT_REQUEST pSessionRequest,PVOID pCallerData,PHANDLE hSessionKey)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientQueryStatus(HANDLE hSessionKey,PULONG puStatus,PULONG puErrorCode)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientRegisterCallback(HANDLE hSessionKey,TRANSPORTCLIENT_CALLBACK_ID CallbackId,PVOID pfnCallback)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientReleaseBuffer(PVOID pvBuffer)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientShutdown(void)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientStartSession(HANDLE hSessionKey)DWORD WDSTCIAPI <wdstci.h>
WdsTransportClientWaitForCompletion(HANDLE hSessionKey,ULONG uTimeout)DWORD WDSTCIAPI <wdstci.h>
WdsTransportServerAllocateBuffer(HANDLE hProvider,ULONG ulBufferSize)PVOID WDSMCSAPI <wdstpdi.h>
WdsTransportServerCompleteRead(HANDLE hProvider,ULONG ulBytesRead,PVOID pvUserData,HRESULT hReadResult)HRESULT WDSMCSAPI <wdstpdi.h>
WdsTransportServerFreeBuffer(HANDLE hProvider,PVOID pvBuffer)HRESULT WDSMCSAPI <wdstpdi.h>
WdsTransportServerRegisterCallback(HANDLE hProvider,TRANSPORTPROVIDER_CALLBACK_ID CallbackId,PVOID pfnCallback)HRESULT WDSMCSAPI <wdstpdi.h>
WdsTransportServerTrace(HANDLE hProvider,WDS_MC_SEVERITY Severity,LPCWSTR pwszFormat)HRESULT WDSMCSAPI <wdstpdi.h>
WdsTransportServerTraceV(HANDLE hProvider,WDS_MC_SEVERITY Severity,LPCWSTR pwszFormat,va_list Params)HRESULT WDSMCSAPI <wdstpdi.h>
WerAddExcludedApplication(PCWSTR pwzExeName,WINBOOL bAllUsers)HRESULT WINAPI <werapi.h>
WerGetFlags(HANDLE hProcess,PDWORD pdwFlags)HRESULT WINAPI <werapi.h>
WerRegisterFile(PCWSTR pwzFile,WER_REGISTER_FILE_TYPE regFileType,DWORD dwFlags)HRESULT WINAPI <werapi.h>
WerRegisterMemoryBlock(PVOID pvAddress,DWORD dwSize)HRESULT WINAPI <werapi.h>
WerRegisterRuntimeExceptionModule(PCWSTR pwszOutOfProcessCallbackDll,PVOID pContext)HRESULT WINAPI <werapi.h>
WerRemoveExcludedApplication(PCWSTR pwzExeName,WINBOOL bAllUsers)HRESULT WINAPI <werapi.h>
WerReportAddDump(HREPORT hReportHandle,HANDLE hProcess,HANDLE hThread,WER_DUMP_TYPE dumpType,PWER_EXCEPTION_INFORMATION pExceptionParam,PWER_DUMP_CUSTOM_OPTIONS pDumpCustomOptions,DWORD dwFlags)HRESULT WINAPI <werapi.h>
WerReportAddFile(HREPORT hReportHandle,PCWSTR pwzPath,WER_FILE_TYPE repFileType,DWORD dwFileFlags)HRESULT WINAPI <werapi.h>
WerReportCloseHandle(HREPORT hReportHandle)HRESULT WINAPI <werapi.h>
WerReportCreate(PCWSTR pwzEventType,WER_REPORT_TYPE repType,PWER_REPORT_INFORMATION pReportInformation,HREPORT * phReportHandle)HRESULT WINAPI <werapi.h>
WerReportHang(HWND hwndHungWindow,PCWSTR wszHungApplicationName)HRESULT WINAPI <werapi.h>
WerReportSetParameter(HREPORT hReportHandle,DWORD dwparamID,PCWSTR pwzName,PCWSTR pwzValue)HRESULT WINAPI <werapi.h>
WerReportSetUIOption(HREPORT hReportHandle,WER_REPORT_UI repUITypeID,PCWSTR pwzValue)HRESULT WINAPI <werapi.h>
WerReportSubmit(HREPORT hReportHandle,WER_CONSENT consent,DWORD dwFlags,PWER_SUBMIT_RESULT pSubmitResult)HRESULT WINAPI <werapi.h>
WerSetFlags(DWORD dwFlags)HRESULT WINAPI <werapi.h>
WerUnregisterFile(PCWSTR pwzFilePath)HRESULT WINAPI <werapi.h>
WerUnregisterMemoryBlock(PVOID pvAddress)HRESULT WINAPI <werapi.h>
WerUnregisterRuntimeExceptionModule(PCWSTR pwszOutOfProcessCallbackDll,PVOID pContext)HRESULT WINAPI <werapi.h>
wglCopyContext(HGLRC,HGLRC,UINT) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglCreateContext(HDC) WINGDIAPI HGLRC WINAPI <wingdi.h>
wglCreateLayerContext(HDC,int) WINGDIAPI HGLRC WINAPI <wingdi.h>
wglDeleteContext(HGLRC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglGetCurrentContext(VOID) WINGDIAPI HGLRC WINAPI <wingdi.h>
wglGetCurrentDC(VOID) WINGDIAPI HDC WINAPI <wingdi.h>
wglGetLayerPaletteEntries(HDC,int,int,int,COLORREF *) WINGDIAPI int WINAPI <wingdi.h>
wglGetProcAddress(LPCSTR) WINGDIAPI PROC WINAPI <wingdi.h>
wglMakeCurrent(HDC,HGLRC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglRealizeLayerPalette(HDC,int,WINBOOL) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglSetLayerPaletteEntries(HDC,int,int,int,CONST COLORREF *) WINGDIAPI int WINAPI <wingdi.h>
wglShareLists(HGLRC,HGLRC) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglSwapLayerBuffers(HDC,UINT) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglSwapMultipleBuffers(UINT,CONST WGLSWAP *) WINGDIAPI DWORD WINAPI <wingdi.h>
wglUseFontBitmaps(HDC,DWORD,DWORD,DWORD)<wingdi.h>
wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglUseFontOutlines(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT)<wingdi.h>
wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT) WINGDIAPI WINBOOL WINAPI <wingdi.h>
wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT) WINGDIAPI WINBOOL WINAPI <wingdi.h>
WHashValOfLHashVal(lhashval)<oleauto.h>
WHICH_BIT(Data, Bit)<scsi.h>
WIA_PROP_LIST_COUNT(ppv)<wiadef.h>
WIA_PROP_LIST_VALUE(ppv,index)<wiadef.h>
WICConvertBitmapSource(REFWICPixelFormatGUID dstFormat,IWICBitmapSource * pISrc,IWICBitmapSource ** ppIDst)HRESULT WINAPI <wincodec.h>
WideCharToMultiByte(UINT CodePage,DWORD dwFlags,LPCWCH lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cbMultiByte,LPCCH lpDefaultChar,LPBOOL lpUsedDefaultChar) WINBASEAPI int WINAPI <stringapiset.h>
Widen(const Pen * pen,const Matrix * matrix=NULL,REAL flatness=FlatnessDefault)	Status <gdipluspath.h>
WidenPath(HDC hdc) WINGDIAPI WINBOOL WINAPI <wingdi.h>
Win32DeleteFile(PCWSTR pszPath) SHSTDAPI_<shlobj.h>
WINAPI_FAMILY_ONE_PARTITION()()()
WINAPI_FAMILY_ONE_PARTITION(vset, v)<winapifamily.h>
WINAPI_FAMILY_PARTITION(v)<winapifamily.h>
WindowFromAccessibleObject(IAccessible *,HWND * phwnd) STDAPI <oleacc.h>
WindowFromDC(HDC hDC) WINUSERAPI HWND WINAPI <winuser.h>
WindowFromPhysicalPoint(POINT Point) WINUSERAPI HWND WINAPI <winuser.h>
WindowFromPoint(POINT Point) WINUSERAPI HWND WINAPI <winuser.h>
Windows()__inline void Uninitialize<roapi.h>
Windows(HSTRING classid,T ** factory)template<roapi.h>
Windows(RO_INIT_TYPE it=RO_INIT_SINGLETHREADED)__inline HRESULT Initialize<roapi.h>
WindowsCompareStringOrdinal(HSTRING string1,HSTRING string2,INT32 * result)HRESULT WINAPI <winstring.h>
WindowsConcatString(HSTRING string1,HSTRING string2,HSTRING * newString)HRESULT WINAPI <winstring.h>
WindowsCreateString(LPCWSTR sourceString,UINT32 length,HSTRING * string)HRESULT WINAPI <winstring.h>
WindowsCreateStringReference(PCWSTR sourceString,UINT32 length,HSTRING_HEADER * hstringHeader,HSTRING * string)HRESULT WINAPI <winstring.h>
WindowsDeleteString(HSTRING string)HRESULT WINAPI <winstring.h>
WindowsDeleteStringBuffer(HSTRING_BUFFER bufferHandle)HRESULT <winstring.h>
WindowsDuplicateString(HSTRING string,HSTRING * newString)HRESULT WINAPI <winstring.h>
WindowsGetStringLen(HSTRING string)UINT32 WINAPI <winstring.h>
WindowsGetStringRawBuffer(HSTRING string,UINT32 * length)PCWSTR WINAPI <winstring.h>
WindowsInspectString(UINT_PTR targetHString,USHORT machine,PINSPECT_HSTRING_CALLBACK callback,void * context,UINT32 * length,UINT_PTR * targetStringAddress)HRESULT WINAPI <winstring.h>
WindowsIsStringEmpty(HSTRING string)BOOL WINAPI <winstring.h>
WindowsPreallocateStringBuffer(UINT32 length,WCHAR ** mutableBuffer,HSTRING_BUFFER * bufferHandle)HRESULT <winstring.h>
WindowsPromoteStringBuffer(HSTRING_BUFFER bufferHandle,HSTRING * string)HRESULT <winstring.h>
WindowsReplaceString(HSTRING string,HSTRING stringReplaced,HSTRING stringReplaceWith,HSTRING * newString)HRESULT WINAPI <winstring.h>
WindowsStringHasEmbeddedNull(HSTRING string,BOOL * hasEmbedNull)HRESULT WINAPI <winstring.h>
WindowsSubstring(HSTRING string,UINT32 startIndex,HSTRING * newString)HRESULT WINAPI <winstring.h>
WindowsSubstringWithSpecifiedLength(HSTRING string,UINT32 startIndex,UINT32 length,HSTRING * newString)HRESULT WINAPI <winstring.h>
WindowsTrimStringEnd(HSTRING string,HSTRING trimString,HSTRING * newString)HRESULT WINAPI <winstring.h>
WindowsTrimStringStart(HSTRING string,HSTRING trimString,HSTRING * newString)HRESULT WINAPI <winstring.h>
WINEVENTPROC(HWINEVENTHOOK hWinEventHook,DWORD event,HWND hwnd,LONG idObject,LONG idChild,DWORD idEventThread,DWORD dwmsEventTime) typedef VOID<winuser.h>
WinExec(LPCSTR lpCmdLine,UINT uCmdShow) WINBASEAPI UINT WINAPI <winbase.h>
WinHelpW(HWND hWndMain,LPCWSTR lpszHelp,UINT uCommand,ULONG_PTR dwData) WINUSERAPI WINBOOL WINAPI <winuser.h>
WINHTTP_STATUS_CALLBACK(HINTERNET,DWORD_PTR,DWORD,LPVOID,DWORD)typedef VOID<winhttp.h>
WinHttpAddRequestHeaders(HINTERNET,LPCWSTR,DWORD,DWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpCheckPlatform(void)WINBOOL     WINAPI <winhttp.h>
WinHttpCloseHandle(HINTERNET)WINBOOL     WINAPI <winhttp.h>
WinHttpConnect(HINTERNET,LPCWSTR,INTERNET_PORT,DWORD)HINTERNET   WINAPI <winhttp.h>
WinHttpCrackUrl(LPCWSTR,DWORD,DWORD,LPURL_COMPONENTS)WINBOOL     WINAPI <winhttp.h>
WinHttpCreateUrl(LPURL_COMPONENTS,DWORD,LPWSTR,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpDetectAutoProxyConfigUrl(DWORD,LPWSTR *)WINBOOL     WINAPI <winhttp.h>
WinHttpGetDefaultProxyConfiguration(WINHTTP_PROXY_INFO *)WINBOOL     WINAPI <winhttp.h>
WinHttpGetIEProxyConfigForCurrentUser(WINHTTP_CURRENT_USER_IE_PROXY_CONFIG *)WINBOOL     WINAPI <winhttp.h>
WinHttpGetProxyForUrl(HINTERNET,LPCWSTR,WINHTTP_AUTOPROXY_OPTIONS *,WINHTTP_PROXY_INFO *)WINBOOL     WINAPI <winhttp.h>
WinHttpOpen(LPCWSTR,DWORD,LPCWSTR,LPCWSTR,DWORD)HINTERNET   WINAPI <winhttp.h>
WinHttpOpenRequest(HINTERNET,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR *,DWORD)HINTERNET   WINAPI <winhttp.h>
WinHttpQueryAuthParams(HINTERNET,DWORD,LPVOID *)WINBOOL     WINAPI <winhttp.h>
WinHttpQueryAuthSchemes(HINTERNET,LPDWORD,LPDWORD,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpQueryDataAvailable(HINTERNET,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpQueryHeaders(HINTERNET,DWORD,LPCWSTR,LPVOID,LPDWORD,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpQueryOption(HINTERNET,DWORD,LPVOID,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpReadData(HINTERNET,LPVOID,DWORD,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpReceiveResponse(HINTERNET,LPVOID)WINBOOL     WINAPI <winhttp.h>
WinHttpSendRequest(HINTERNET,LPCWSTR,DWORD,LPVOID,DWORD,DWORD,DWORD_PTR)WINBOOL     WINAPI <winhttp.h>
WinHttpSetCredentials(HINTERNET,DWORD,DWORD,LPCWSTR,LPCWSTR,LPVOID)WINBOOL     WINAPI <winhttp.h>
WinHttpSetDefaultProxyConfiguration(WINHTTP_PROXY_INFO *)WINBOOL     WINAPI <winhttp.h>
WinHttpSetOption(HINTERNET,DWORD,LPVOID,DWORD)WINBOOL     WINAPI <winhttp.h>
WinHttpSetStatusCallback(HINTERNET,WINHTTP_STATUS_CALLBACK,DWORD,DWORD_PTR)WINHTTP_STATUS_CALLBACK WINAPI <winhttp.h>
WinHttpSetTimeouts(HINTERNET,int,int,int,int)WINBOOL     WINAPI <winhttp.h>
WinHttpTimeFromSystemTime(const SYSTEMTIME *,LPWSTR)WINBOOL     WINAPI <winhttp.h>
WinHttpTimeToSystemTime(LPCWSTR,SYSTEMTIME *)WINBOOL     WINAPI <winhttp.h>
WinHttpWriteData(HINTERNET,LPCVOID,DWORD,LPDWORD)WINBOOL     WINAPI <winhttp.h>
WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,int nShowCmd) int WINAPI <winbase.h>
WINNLSEnableIME(HWND,WINBOOL) WINBOOL WINAPI <winnls32.h>
WINNLSGetEnableStatus(HWND) WINBOOL WINAPI <winnls32.h>
WINNLSGetIMEHotkey(HWND) UINT WINAPI <winnls32.h>
WINOLEAPI(type)<combaseapi.h>
WINOLEAUTAPI(type)<oleauto.h>
WINOLECTLAPI(type)<olectl.h>
WINPTHREADS_ATTRIBUTE(X)<pthread>
WINPTHREADS_SECTION(X)<pthread>
WintrustAddActionID(GUID * pgActionID,DWORD fdwFlags,CRYPT_REGISTER_ACTIONID * psProvInfo) extern WINBOOL WINAPI <wintrust.h>
WintrustAddDefaultForUsage(const char * pszUsageOID,CRYPT_PROVIDER_REGDEFUSAGE * psDefUsage) extern WINBOOL WINAPI <wintrust.h>
WintrustGetDefaultForUsage(DWORD dwAction,const char * pszUsageOID,CRYPT_PROVIDER_DEFUSAGE * psUsage) extern WINBOOL WINAPI <wintrust.h>
WintrustGetRegPolicyFlags(DWORD * pdwPolicyFlags) extern void WINAPI <wintrust.h>
WintrustLoadFunctionPointers(GUID * pgActionID,CRYPT_PROVIDER_FUNCTIONS * pPfns) extern WINBOOL WINAPI <wintrust.h>
WintrustRemoveActionID(GUID * pgActionID) extern WINBOOL WINAPI <wintrust.h>
WintrustSetDefaultIncludePEPageHashes(WINBOOL fIncludePEPageHashes)void WINAPI <wintrust.h>
WintrustSetRegPolicyFlags(DWORD dwPolicyFlags) extern WINBOOL WINAPI <wintrust.h>
WinUsb_AbortPipe(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID) WINBOOL WINAPI <winusb.h>
WinUsb_ControlTransfer(WINUSB_INTERFACE_HANDLE InterfaceHandle,WINUSB_SETUP_PACKET SetupPacket,PUCHAR Buffer,ULONG BufferLength,PULONG LengthTransferred,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinUsb_FlushPipe(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID) WINBOOL WINAPI <winusb.h>
WinUsb_Free(WINUSB_INTERFACE_HANDLE InterfaceHandle) WINBOOL WINAPI <winusb.h>
WinUsb_GetAdjustedFrameNumber(PULONG CurrentFrameNumber,LARGE_INTEGER TimeStamp) WINBOOL WINAPI <winusb.h>
WinUsb_GetAssociatedInterface(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR AssociatedInterfaceIndex,PWINUSB_INTERFACE_HANDLE AssociatedInterfaceHandle) WINBOOL WINAPI <winusb.h>
WinUsb_GetCurrentAlternateSetting(WINUSB_INTERFACE_HANDLE InterfaceHandle,PUCHAR SettingNumber) WINBOOL WINAPI <winusb.h>
WinUsb_GetCurrentFrameNumber(WINUSB_INTERFACE_HANDLE InterfaceHandle,PULONG CurrentFrameNumber,LARGE_INTEGER * TimeStamp) WINBOOL WINAPI <winusb.h>
WinUsb_GetDescriptor(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR DescriptorType,UCHAR Index,USHORT LanguageID,PUCHAR Buffer,ULONG BufferLength,PULONG LengthTransferred) WINBOOL WINAPI <winusb.h>
WinUsb_GetOverlappedResult(WINUSB_INTERFACE_HANDLE InterfaceHandle,LPOVERLAPPED lpOverlapped,LPDWORD lpNumberOfBytesTransferred,WINBOOL bWait) WINBOOL WINAPI <winusb.h>
WinUsb_GetPipePolicy(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID,ULONG PolicyType,PULONG ValueLength,PVOID Value) WINBOOL WINAPI <winusb.h>
WinUsb_GetPowerPolicy(WINUSB_INTERFACE_HANDLE InterfaceHandle,ULONG PolicyType,PULONG ValueLength,PVOID Value) WINBOOL WINAPI <winusb.h>
WinUsb_Initialize(HANDLE DeviceHandle,PWINUSB_INTERFACE_HANDLE InterfaceHandle) WINBOOL WINAPI <winusb.h>
WinUsb_ParseConfigurationDescriptor(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,PVOID StartPosition,LONG InterfaceNumber,LONG AlternateSetting,LONG InterfaceClass,LONG InterfaceSubClass,LONG InterfaceProtocol) PUSB_INTERFACE_DESCRIPTOR WINAPI <winusb.h>
WinUsb_ParseDescriptors(PVOID DescriptorBuffer,ULONG TotalLength,PVOID StartPosition,LONG DescriptorType) PUSB_COMMON_DESCRIPTOR WINAPI <winusb.h>
WinUsb_QueryDeviceInformation(WINUSB_INTERFACE_HANDLE InterfaceHandle,ULONG InformationType,PULONG BufferLength,PVOID Buffer) WINBOOL WINAPI <winusb.h>
WinUsb_QueryInterfaceSettings(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR AlternateInterfaceNumber,PUSB_INTERFACE_DESCRIPTOR UsbAltInterfaceDescriptor) WINBOOL WINAPI <winusb.h>
WinUsb_QueryPipe(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR AlternateInterfaceNumber,UCHAR PipeIndex,PWINUSB_PIPE_INFORMATION PipeInformation) WINBOOL WINAPI <winusb.h>
WinUsb_QueryPipeEx(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR AlternateInterfaceNumber,UCHAR PipeIndex,PWINUSB_PIPE_INFORMATION_EX PipeInformationEx) WINBOOL WINAPI <winusb.h>
WinUsb_ReadIsochPipe(WINUSB_ISOCH_BUFFER_HANDLE BufferHandle,ULONG Offset,ULONG Length,PULONG FrameNumber,ULONG NumberOfPackets,PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinUsb_ReadIsochPipeAsap(WINUSB_ISOCH_BUFFER_HANDLE BufferHandle,ULONG Offset,ULONG Length,BOOL ContinueStream,ULONG NumberOfPackets,PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinUsb_ReadPipe(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID,PUCHAR Buffer,ULONG BufferLength,PULONG LengthTransferred,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinUsb_RegisterIsochBuffer(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID,PUCHAR Buffer,ULONG BufferLength,PWINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle) WINBOOL WINAPI <winusb.h>
WinUsb_ResetPipe(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID) WINBOOL WINAPI <winusb.h>
WinUsb_SetCurrentAlternateSetting(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR SettingNumber) WINBOOL WINAPI <winusb.h>
WinUsb_SetPipePolicy(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID,ULONG PolicyType,ULONG ValueLength,PVOID Value) WINBOOL WINAPI <winusb.h>
WinUsb_SetPowerPolicy(WINUSB_INTERFACE_HANDLE InterfaceHandle,ULONG PolicyType,ULONG ValueLength,PVOID Value) WINBOOL WINAPI <winusb.h>
WinUsb_UnregisterIsochBuffer(WINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle) WINBOOL WINAPI <winusb.h>
WinUsb_WriteIsochPipe(WINUSB_ISOCH_BUFFER_HANDLE BufferHandle,ULONG Offset,ULONG Length,PULONG FrameNumber,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinUsb_WriteIsochPipeAsap(WINUSB_ISOCH_BUFFER_HANDLE BufferHandle,ULONG Offset,ULONG Length,BOOL ContinueStream,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinUsb_WritePipe(WINUSB_INTERFACE_HANDLE InterfaceHandle,UCHAR PipeID,PUCHAR Buffer,ULONG BufferLength,PULONG LengthTransferred,LPOVERLAPPED Overlapped) WINBOOL WINAPI <winusb.h>
WinVerifyTrust(HWND hwnd,GUID * pgActionID,LPVOID pWVTData) extern LONG WINAPI <wintrust.h>
WinVerifyTrustEx(HWND hwnd,GUID * pgActionID,WINTRUST_DATA * pWinTrustData) extern HRESULT WINAPI <wintrust.h>
WinWatchClose(HWINWATCH hWW) extern void WINAPI <dciman.h>
WinWatchDidStatusChange(HWINWATCH hWW) extern WINBOOL WINAPI <dciman.h>
WinWatchGetClipList(HWINWATCH hWW,LPRECT prc,UINT size,LPRGNDATA prd) extern UINT WINAPI <dciman.h>
WinWatchNotify(HWINWATCH hWW,WINWATCHNOTIFYPROC NotifyCallback,LPARAM NotifyParam) extern WINBOOL WINAPI <dciman.h>
WINWATCHNOTIFYPROC(HWINWATCH hww,HWND hwnd,DWORD code,LPARAM lParam) typedef void<dciman.h>
WinWatchOpen(HWND hwnd) extern HWINWATCH WINAPI <dciman.h>
wIsEqualGUID(REFGUID rguid1,REFGUID rguid2)WINBOOL _fastcall <objbase.h>
WIZARDENTRY(HINSTANCE hProviderDLLInstance,LPTSTR * lppcsResourceName,DLGPROC * lppDlgProc,LPMAPIPROP lpMapiProp,LPVOID lpMapiSupportObject)typedef ULONG<mapiwz.h>
WLAN_NOTIFICATION_CALLBACK(PWLAN_NOTIFICATION_DATA,PVOID)typedef VOID<wlanapi.h>
WlanAllocateMemory(DWORD dwMemorySize)PVOID WINAPI <wlanapi.h>
WlanCloseHandle(HANDLE hClientHandle,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanConnect(HANDLE hClientHandle,const GUID * pInterfaceGuid,const PWLAN_CONNECTION_PARAMETERS pConnectionParameters,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanDeleteProfile(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanDisconnect(HANDLE hClientHandle,const GUID * pInterfaceGuid,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanEnumInterfaces(HANDLE hClientHandle,PVOID pReserved,PWLAN_INTERFACE_INFO_LIST * ppInterfaceList)DWORD WINAPI <wlanapi.h>
WlanExtractPsdIEDataList(HANDLE hClientHandle,DWORD dwIeDataSize,const PBYTE pRawIeData,LPCWSTR strFormat,PVOID pReserved,PWLAN_RAW_DATA_LIST * ppPsdIEDataList)DWORD WINAPI <wlanapi.h>
WlanFreeMemory(PVOID pMemory)VOID WINAPI <wlanapi.h>
WlanGetAvailableNetworkList(HANDLE hClientHandle,const GUID * pInterfaceGuid,DWORD dwFlags,PVOID pReserved,PWLAN_AVAILABLE_NETWORK_LIST * ppAvailableNetworkList)DWORD WINAPI <wlanapi.h>
WlanGetFilterList(HANDLE hClientHandle,WLAN_FILTER_LIST_TYPE wlanFilterListType,PVOID pReserved,PDOT11_NETWORK_LIST * ppNetworkList)DWORD WINAPI <wlanapi.h>
WlanGetInterfaceCapability(HANDLE hClientHandle,const GUID * pInterfaceGuid,PVOID pReserved,PWLAN_INTERFACE_CAPABILITY * ppCapability)DWORD WINAPI <wlanapi.h>
WlanGetNetworkBssList(HANDLE hClientHandle,const GUID * pInterfaceGuid,const PDOT11_SSID pDot11Ssid,DOT11_BSS_TYPE dot11BssType,WINBOOL bSecurityEnabled,PVOID pReserved,PWLAN_BSS_LIST * ppWlanBssList)DWORD WINAPI <wlanapi.h>
WlanGetProfile(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,PVOID pReserved,LPWSTR * pstrProfileXml,DWORD * pdwFlags,PDWORD pdwGrantedAccess)DWORD WINAPI <wlanapi.h>
WlanGetProfileCustomUserData(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,PVOID pReserved,DWORD * pdwDataSize,PBYTE * ppData)DWORD WINAPI <wlanapi.h>
WlanGetProfileList(HANDLE hClientHandle,const GUID * pInterfaceGuid,PVOID pReserved,PWLAN_PROFILE_INFO_LIST * ppProfileList)DWORD WINAPI <wlanapi.h>
WlanGetSecuritySettings(HANDLE hClientHandle,WLAN_SECURABLE_OBJECT SecurableObject,PWLAN_OPCODE_VALUE_TYPE pValueType,LPWSTR * pstrCurrentSDDL,PDWORD pdwGrantedAccess)DWORD WINAPI <wlanapi.h>
WlanIhvControl(HANDLE hClientHandle,const GUID * pInterfaceGuid,WLAN_IHV_CONTROL_TYPE Type,DWORD dwInBufferSize,PVOID pInBuffer,DWORD dwOutBufferSize,PVOID pOutBuffer,PDWORD pdwBytesReturned)DWORD WINAPI <wlanapi.h>
WlanOpenHandle(DWORD dwClientVersion,PVOID pReserved,PDWORD pdwNegotiatedVersion,PHANDLE phClientHandle)DWORD WINAPI <wlanapi.h>
WlanQueryAutoConfigParameter(HANDLE hClientHandle,WLAN_AUTOCONF_OPCODE OpCode,PVOID pReserved,PDWORD pdwDataSize,PVOID ppData,PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType)DWORD WINAPI <wlanapi.h>
WlanQueryInterface(HANDLE hClientHandle,const GUID * pInterfaceGuid,WLAN_INTF_OPCODE OpCode,PVOID pReserved,PDWORD pdwDataSize,PVOID * ppData,PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType)DWORD WINAPI <wlanapi.h>
WlanReasonCodeToString(DWORD dwReasonCode,DWORD dwBufferSize,PWCHAR pStringBuffer,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanRegisterNotification(HANDLE hClientHandle,DWORD dwNotifSource,WINBOOL bIgnoreDuplicate,WLAN_NOTIFICATION_CALLBACK funcCallback,PVOID pCallbackContext,PVOID pReserved,PDWORD pdwPrevNotifSource)DWORD WINAPI <wlanapi.h>
WlanRenameProfile(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strOldProfileName,LPCWSTR strNewProfileName,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSaveTemporaryProfile(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,LPCWSTR strAllUserProfileSecurity,DWORD dwFlags,WINBOOL bOverWrite,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanScan(HANDLE hClientHandle,const GUID * pInterfaceGuid,const PDOT11_SSID pDot11Ssid,const PWLAN_RAW_DATA pIeData,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetAutoConfigParameter(HANDLE hClientHandle,WLAN_AUTOCONF_OPCODE OpCode,DWORD dwDataSize,const PVOID pData,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetFilterList(HANDLE hClientHandle,WLAN_FILTER_LIST_TYPE wlanFilterListType,const PDOT11_NETWORK_LIST pNetworkList,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetInterface(HANDLE hClientHandle,const GUID * pInterfaceGuid,WLAN_INTF_OPCODE OpCode,DWORD dwDataSize,const PVOID pData,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetProfile(HANDLE hClientHandle,const GUID * pInterfaceGuid,DWORD dwFlags,LPCWSTR strProfileXml,LPCWSTR strAllUserProfileSecurity,WINBOOL bOverwrite,PVOID pReserved,DWORD * pdwReasonCode)DWORD WINAPI <wlanapi.h>
WlanSetProfileCustomUserData(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,DWORD dwDataSize,const PBYTE pData,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetProfileEapUserData(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,EAP_METHOD_TYPE eapType,DWORD dwFlags,DWORD dwEapUserDataSize,const LPBYTE pbEapUserData,PVOID pReserved)DWORD <wlanapi.h>
WlanSetProfileEapXmlUserData(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,DWORD dwFlags,LPCWSTR strEapXmlUserData,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetProfileList(HANDLE hClientHandle,const GUID * pInterfaceGuid,DWORD dwItems,LPCWSTR * strProfileNames,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetProfilePosition(HANDLE hClientHandle,const GUID * pInterfaceGuid,LPCWSTR strProfileName,DWORD dwPosition,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetPsdIEDataList(HANDLE hClientHandle,LPCWSTR strFormat,const PWLAN_RAW_DATA_LIST pPsdIEDataList,PVOID pReserved)DWORD WINAPI <wlanapi.h>
WlanSetSecuritySettings(HANDLE hClientHandle,WLAN_SECURABLE_OBJECT SecurableObject,LPCWSTR strModifiedSDDL)DWORD WINAPI <wlanapi.h>
WlanUIEditProfile(DWORD dwClientVersion,LPCWSTR wstrProfileName,GUID * pInterfaceGuid,HWND hWnd,WL_DISPLAY_PAGES wlStartPage,PVOID pReserved,PWLAN_REASON_CODE * pWlanReasonCode)DWORD WINAPI <wlanapi.h>
WlxActivateUserShell(PVOID pWlxContext,PWSTR pszDesktopName,PWSTR pszMprLogonScript,PVOID pEnvironment)WINBOOL WINAPI <winwlx.h>
WlxDisconnectNotify(PVOID pWlxContext)VOID WINAPI <winwlx.h>
WlxDisplayLockedNotice(PVOID pWlxContext)VOID WINAPI <winwlx.h>
WlxDisplaySASNotice(PVOID pWlxContext)VOID WINAPI <winwlx.h>
WlxDisplayStatusMessage(PVOID pWlxContext,HDESK hDesktop,DWORD dwOptions,PWSTR pTitle,PWSTR pMessage)WINBOOL WINAPI <winwlx.h>
WlxGetConsoleSwitchCredentials(PVOID pWlxContext,PVOID pCredInfo)WINBOOL WINAPI <winwlx.h>
WlxGetStatusMessage(PVOID pWlxContext,DWORD * pdwOptions,PWSTR pMessage,DWORD dwBufferSize)WINBOOL WINAPI <winwlx.h>
WlxInitialize(LPWSTR lpWinsta,HANDLE hWlx,PVOID pvReserved,PVOID pWinlogonFunctions,PVOID * pWlxContext)WINBOOL WINAPI <winwlx.h>
WlxIsLockOk(PVOID pWlxContext)WINBOOL WINAPI <winwlx.h>
WlxIsLogoffOk(PVOID pWlxContext)WINBOOL WINAPI <winwlx.h>
WlxLoggedOnSAS(PVOID pWlxContext,DWORD dwSasType,PVOID pReserved)int WINAPI <winwlx.h>
WlxLoggedOutSAS(PVOID pWlxContext,DWORD dwSasType,PLUID pAuthenticationId,PSID pLogonSid,PDWORD pdwOptions,PHANDLE phToken,PWLX_MPR_NOTIFY_INFO pNprNotifyInfo,PVOID * pProfile)int WINAPI <winwlx.h>
WlxLogoff(PVOID pWlxContext)VOID WINAPI <winwlx.h>
WlxNegotiate(DWORD dwWinlogonVersion,PDWORD pdwDllVersion)WINBOOL WINAPI <winwlx.h>
WlxNetworkProviderLoad(PVOID pWlxContext,PWLX_MPR_NOTIFY_INFO pNprNotifyInfo)WINBOOL WINAPI <winwlx.h>
WlxReconnectNotify(PVOID pWlxContext)VOID WINAPI <winwlx.h>
WlxRemoveStatusMessage(PVOID pWlxContext)WINBOOL WINAPI <winwlx.h>
WlxScreenSaverNotify(PVOID pWlxContext,WINBOOL * pSecure)WINBOOL WINAPI <winwlx.h>
WlxShutdown(PVOID pWlxContext,DWORD ShutdownType)VOID WINAPI <winwlx.h>
WlxStartApplication(PVOID pWlxContext,PWSTR pszDesktopName,PVOID pEnvironment,PWSTR pszCmdLine)WINBOOL WINAPI <winwlx.h>
WlxWkstaLockedSAS(PVOID pWlxContext,DWORD dwSasType)int WINAPI <winwlx.h>
WMCreateProfileManager(IWMProfileManager **)HRESULT WINAPI <wmsdkidl.h>
WMCreateReader(IUnknown *,DWORD,IWMReader **)HRESULT WINAPI <wmsdkidl.h>
WMCreateWriter(IUnknown *,IWMWriter **)HRESULT WINAPI <wmsdkidl.h>
WmfRecordTypeAbortDoc(0x0052)	<gdiplusenums.h>
WmfRecordTypeAnimatePalette(META_ANIMATEPALETTE)	<gdiplusenums.h>
WmfRecordTypeArc(META_ARC)	<gdiplusenums.h>
WmfRecordTypeBitBlt(META_BITBLT)	<gdiplusenums.h>
WmfRecordTypeChord(META_CHORD)	<gdiplusenums.h>
WmfRecordTypeCreateBitmap(0x06FE)	<gdiplusenums.h>
WmfRecordTypeCreateBitmapIndirect(0x02FD)	<gdiplusenums.h>
WmfRecordTypeCreateBrush(0x00F8)	<gdiplusenums.h>
WmfRecordTypeCreatePalette(META_CREATEPALETTE)	<gdiplusenums.h>
WmfRecordTypeCreatePenIndirect(META_CREATEPENINDIRECT)	<gdiplusenums.h>
WmfRecordTypeCreateRegion(META_CREATEREGION)	<gdiplusenums.h>
WmfRecordTypeDeleteObject(META_DELETEOBJECT)	<gdiplusenums.h>
WmfRecordTypeDIBBitBlt(META_DIBBITBLT)	<gdiplusenums.h>
WmfRecordTypeDIBStretchBlt(META_DIBSTRETCHBLT)	<gdiplusenums.h>
WmfRecordTypeDrawText(0x062F)	<gdiplusenums.h>
WmfRecordTypeEllipse(META_ELLIPSE)	<gdiplusenums.h>
WmfRecordTypeEndDoc(0x005E)	<gdiplusenums.h>
WmfRecordTypeEndPage(0x0050)	<gdiplusenums.h>
WmfRecordTypeEscape(META_ESCAPE)	<gdiplusenums.h>
WmfRecordTypeExcludeClipRect(META_EXCLUDECLIPRECT)	<gdiplusenums.h>
WmfRecordTypeExtFloodFill(META_EXTFLOODFILL)	<gdiplusenums.h>
WmfRecordTypeExtTextOut(META_EXTTEXTOUT)	<gdiplusenums.h>
WmfRecordTypeFillRegion(META_FILLREGION)	<gdiplusenums.h>
WmfRecordTypeFloodFill(META_FLOODFILL)	<gdiplusenums.h>
WmfRecordTypeFrameRegion(META_FRAMEREGION)	<gdiplusenums.h>
WmfRecordTypeIntersectClipRect(META_INTERSECTCLIPRECT)	<gdiplusenums.h>
WmfRecordTypeInvertRegion(META_INVERTREGION)	<gdiplusenums.h>
WmfRecordTypeLineTo(META_LINETO)	<gdiplusenums.h>
WmfRecordTypeMoveTo(META_MOVETO)	<gdiplusenums.h>
WmfRecordTypeOffsetClipRgn(META_OFFSETCLIPRGN)	<gdiplusenums.h>
WmfRecordTypeOffsetViewportOrg(META_OFFSETVIEWPORTORG)	<gdiplusenums.h>
WmfRecordTypeOffsetWindowOrg(META_OFFSETWINDOWORG)	<gdiplusenums.h>
WmfRecordTypePaintRegion(META_PAINTREGION)	<gdiplusenums.h>
WmfRecordTypePatBlt(META_PATBLT)	<gdiplusenums.h>
WmfRecordTypePie(META_PIE)	<gdiplusenums.h>
WmfRecordTypePolygon(META_POLYGON)	<gdiplusenums.h>
WmfRecordTypePolyline(META_POLYLINE)	<gdiplusenums.h>
WmfRecordTypePolyPolygon(META_POLYPOLYGON)	<gdiplusenums.h>
WmfRecordTypeRealizePalette(META_REALIZEPALETTE)	<gdiplusenums.h>
WmfRecordTypeRectangle(META_RECTANGLE)	<gdiplusenums.h>
WmfRecordTypeResetDC(0x014C)	<gdiplusenums.h>
WmfRecordTypeResizePalette(META_RESIZEPALETTE)	<gdiplusenums.h>
WmfRecordTypeRestoreDC(META_RESTOREDC)	<gdiplusenums.h>
WmfRecordTypeRoundRect(META_ROUNDRECT)	<gdiplusenums.h>
WmfRecordTypeSaveDC(META_SAVEDC)	<gdiplusenums.h>
WmfRecordTypeScaleViewportExt(META_SCALEVIEWPORTEXT)	<gdiplusenums.h>
WmfRecordTypeScaleWindowExt(META_SCALEWINDOWEXT)	<gdiplusenums.h>
WmfRecordTypeSelectClipRegion(META_SELECTCLIPREGION)	<gdiplusenums.h>
WmfRecordTypeSelectObject(META_SELECTOBJECT)	<gdiplusenums.h>
WmfRecordTypeSelectPalette(META_SELECTPALETTE)	<gdiplusenums.h>
WmfRecordTypeSetBkColor(META_SETBKCOLOR)	<gdiplusenums.h>
WmfRecordTypeSetBkMode(META_SETBKMODE)	<gdiplusenums.h>
WmfRecordTypeSetDIBToDev(META_SETDIBTODEV)	<gdiplusenums.h>
WmfRecordTypeSetLayout(0x0149)	<gdiplusenums.h>
WmfRecordTypeSetMapMode(META_SETMAPMODE)	<gdiplusenums.h>
WmfRecordTypeSetMapperFlags(META_SETMAPPERFLAGS)	<gdiplusenums.h>
WmfRecordTypeSetPalEntries(META_SETPALENTRIES)	<gdiplusenums.h>
WmfRecordTypeSetPixel(META_SETPIXEL)	<gdiplusenums.h>
WmfRecordTypeSetPolyFillMode(META_SETPOLYFILLMODE)	<gdiplusenums.h>
WmfRecordTypeSetRelAbs(META_SETRELABS)	<gdiplusenums.h>
WmfRecordTypeSetROP2(META_SETROP2)	<gdiplusenums.h>
WmfRecordTypeSetStretchBltMode(META_SETSTRETCHBLTMODE)	<gdiplusenums.h>
WmfRecordTypeSetTextAlign(META_SETTEXTALIGN)	<gdiplusenums.h>
WmfRecordTypeSetTextCharExtra(META_SETTEXTCHAREXTRA)	<gdiplusenums.h>
WmfRecordTypeSetTextColor(META_SETTEXTCOLOR)	<gdiplusenums.h>
WmfRecordTypeSetViewportExt(META_SETVIEWPORTEXT)	<gdiplusenums.h>
WmfRecordTypeSetViewportOrg(META_SETVIEWPORTORG)	<gdiplusenums.h>
WmfRecordTypeSetWindowExt(META_SETWINDOWEXT)	<gdiplusenums.h>
WmfRecordTypeSetWindowOrg(META_SETWINDOWORG)	<gdiplusenums.h>
WmfRecordTypeStartDoc(0x014D)	<gdiplusenums.h>
WmfRecordTypeStartPage(0x004F)	<gdiplusenums.h>
WmfRecordTypeStretchBlt(META_STRETCHBLT)	<gdiplusenums.h>
WmfRecordTypeStretchDIB(META_STRETCHDIB)	<gdiplusenums.h>
WmfRecordTypeTextOut(META_TEXTOUT)	<gdiplusenums.h>
WmiCompleteRequest(IN PDEVICE_OBJECT DeviceObject,IN OUT PIRP Irp,IN NTSTATUS Status,IN ULONG BufferUsed,IN CCHAR PriorityBoost)<wmilib.h>
WMIDPREQUEST(WMIDPREQUESTCODE RequestCode,PVOID RequestContext,ULONG * BufferSize,PVOID Buffer)typedef ULONG<evntrace.h>
WmiFireEvent(IN PDEVICE_OBJECT DeviceObject,IN LPCGUID Guid,IN ULONG InstanceIndex,IN ULONG EventDataSize,IN PVOID EventData)<wmilib.h>
WmiQueryTraceInformation(IN TRACE_INFORMATION_CLASS TraceInformationClass,OUT PVOID TraceInformation,IN ULONG TraceInformationLength,OUT PULONG RequiredLength OPTIONAL,IN PVOID Buffer OPTIONAL)<wdm.h>
WmiSystemControl(IN PWMILIB_CONTEXT WmiLibInfo,IN PDEVICE_OBJECT DeviceObject,IN OUT PIRP Irp,OUT PSYSCTL_IRP_DISPOSITION IrpDisposition)<wmilib.h>
WmiTraceMessage(IN TRACEHANDLE LoggerHandle,IN ULONG MessageFlags,IN LPGUID MessageGuid,IN USHORT MessageNumber,IN...)<wdm.h>
WNDENUMPROC(HWND,LPARAM) typedef WINBOOL<winuser.h>
WNDOBJ_bEnum(WNDOBJ * pwo,ULONG cj,ULONG * pul)<winddi.h>
WNDOBJ_cEnumStart(WNDOBJ * pwo,ULONG iType,ULONG iDirection,ULONG cLimit)<winddi.h>
WNDOBJ_vSetConsumer(WNDOBJ * pwo,PVOID pvConsumer)<winddi.h>
WNDOBJCHANGEPROC(WNDOBJ * pwo,FLONG fl)typedef VOID<winddi.h>
WNDPROC(HWND,UINT,WPARAM,LPARAM) typedef LRESULT<winuser.h>
WndProcBS(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam)virtual LRESULT WINAPI <shdeprecated.h>
WNetAddConnection2(LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags) DWORD WINAPI <winnetwk.h>
WNetAddConnection2A(LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags) DWORD WINAPI <winnetwk.h>
WNetAddConnection2W(LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags) DWORD WINAPI <winnetwk.h>
WNetAddConnection3(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags) DWORD WINAPI <winnetwk.h>
WNetAddConnection3A(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags) DWORD WINAPI <winnetwk.h>
WNetAddConnection3W(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags) DWORD WINAPI <winnetwk.h>
WNetAddConnectionW(LPCWSTR lpRemoteName,LPCWSTR lpPassword,LPCWSTR lpLocalName) DWORD WINAPI <winnetwk.h>
WNetCancelConnection(LPCSTR lpName,WINBOOL fForce) DWORD WINAPI <winnetwk.h>
WNetCancelConnection2(LPCSTR lpName,DWORD dwFlags,WINBOOL fForce) DWORD WINAPI <winnetwk.h>
WNetCancelConnection2A(LPCSTR lpName,DWORD dwFlags,WINBOOL fForce) DWORD WINAPI <winnetwk.h>
WNetCancelConnection2W(LPCWSTR lpName,DWORD dwFlags,WINBOOL fForce) DWORD WINAPI <winnetwk.h>
WNetCancelConnectionA(LPCSTR lpName,WINBOOL fForce) DWORD WINAPI <winnetwk.h>
WNetCancelConnectionW(LPCWSTR lpName,WINBOOL fForce) DWORD WINAPI <winnetwk.h>
WNetCloseEnum(HANDLE hEnum) DWORD WINAPI <winnetwk.h>
WNetConnectionDialog(HWND hwnd,DWORD dwType) DWORD WINAPI <winnetwk.h>
WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct) DWORD WINAPI <winnetwk.h>
WNetDisconnectDialog(HWND hwnd,DWORD dwType) DWORD WINAPI <winnetwk.h>
WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct) DWORD WINAPI <winnetwk.h>
WNetEnumResource(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetEnumResourceA(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetEnumResourceW(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetGetConnection(LPCSTR lpLocalName,LPSTR lpRemoteName,LPDWORD lpnLength) DWORD WINAPI <winnetwk.h>
WNetGetConnectionA(LPCSTR lpLocalName,LPSTR lpRemoteName,LPDWORD lpnLength) DWORD WINAPI <winnetwk.h>
WNetGetConnectionW(LPCWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnLength) DWORD WINAPI <winnetwk.h>
WNetGetLastError(LPDWORD lpError,LPSTR lpErrorBuf,DWORD nErrorBufSize,LPSTR lpNameBuf,DWORD nNameBufSize) DWORD WINAPI <winnetwk.h>
WNetGetLastErrorA(LPDWORD lpError,LPSTR lpErrorBuf,DWORD nErrorBufSize,LPSTR lpNameBuf,DWORD nNameBufSize) DWORD WINAPI <winnetwk.h>
WNetGetLastErrorW(LPDWORD lpError,LPWSTR lpErrorBuf,DWORD nErrorBufSize,LPWSTR lpNameBuf,DWORD nNameBufSize) DWORD WINAPI <winnetwk.h>
WNetGetNetworkInformation(LPCSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct) DWORD WINAPI <winnetwk.h>
WNetGetNetworkInformationA(LPCSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct) DWORD WINAPI <winnetwk.h>
WNetGetNetworkInformationW(LPCWSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct) DWORD WINAPI <winnetwk.h>
WNetGetProviderName(DWORD dwNetType,LPSTR lpProviderName,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetGetProviderNameA(DWORD dwNetType,LPSTR lpProviderName,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetGetProviderNameW(DWORD dwNetType,LPWSTR lpProviderName,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetGetResourceInformation(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPSTR * lplpSystem) DWORD WINAPI <winnetwk.h>
WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPSTR * lplpSystem) DWORD WINAPI <winnetwk.h>
WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPWSTR * lplpSystem) DWORD WINAPI <winnetwk.h>
WNetGetResourceParent(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer) DWORD WINAPI <winnetwk.h>
WNetGetResourceParentA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer) DWORD WINAPI <winnetwk.h>
WNetGetResourceParentW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer) DWORD WINAPI <winnetwk.h>
WNetGetUniversalNameW(LPCWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize) DWORD WINAPI <winnetwk.h>
WNetGetUser(LPCSTR lpName,LPSTR lpUserName,LPDWORD lpnLength) DWORD WINAPI <winnetwk.h>
WNetGetUserA(LPCSTR lpName,LPSTR lpUserName,LPDWORD lpnLength) DWORD WINAPI <winnetwk.h>
WNetGetUserW(LPCWSTR lpName,LPWSTR lpUserName,LPDWORD lpnLength) DWORD WINAPI <winnetwk.h>
WNetOpenEnum(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum) DWORD WINAPI <winnetwk.h>
WNetOpenEnumA(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum) DWORD WINAPI <winnetwk.h>
WNetOpenEnumW(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum) DWORD WINAPI <winnetwk.h>
WNetRestoreConnection(HWND hwndParent,LPCSTR lpDevice) DWORD WINAPI <winnetwk.h>
WNetRestoreConnectionA(HWND hwndParent,LPCSTR lpDevice) DWORD WINAPI <winnetwk.h>
WNetRestoreConnectionW(HWND hwndParent,LPCWSTR lpDevice) DWORD WINAPI <winnetwk.h>
WNetRestoreSingleConnectionW(HWND hwndParent,LPCWSTR lpDevice,BOOL fUseUI) DWORD WINAPI <winnetwk.h>
WNetSetLastError(DWORD err,LPSTR lpError,LPSTR lpProviders)VOID <npapi.h>
WNetSetLastErrorA(DWORD err,LPSTR lpError,LPSTR lpProviders)VOID <npapi.h>
WNetSetLastErrorW(DWORD err,LPWSTR lpError,LPWSTR lpProviders)VOID <npapi.h>
WNetUseConnection(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserID,DWORD dwFlags,LPSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult) DWORD WINAPI <winnetwk.h>
WNetUseConnectionA(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserID,DWORD dwFlags,LPSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult) DWORD WINAPI <winnetwk.h>
WNetUseConnectionW(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserID,DWORD dwFlags,LPWSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult) DWORD WINAPI <winnetwk.h>
wnsprintf(LPSTR lpOut,int cchLimitIn,LPCSTR lpFmt,...)<shlwapi.h>
wnsprintfA(LPSTR lpOut,int cchLimitIn,LPCSTR lpFmt,...) LWSTDAPIV_<shlwapi.h>
wnsprintfW(LPWSTR lpOut,int cchLimitIn,LPCWSTR lpFmt,...) LWSTDAPIV_<shlwapi.h>
WordToBinary(LPSTR string,DWORD WordValue) DWORD WINAPI <netmon.h>
WORKERCALLBACKFUNC(PVOID)typedef VOID<winnt.h>
WORKERFUNCTION(PVOID) typedef VOID<rtutils.h>
Wow64DisableWow64FsRedirection(PVOID * OldValue) WINBASEAPI WINBOOL WINAPI <wow64apiset.h>
Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection) WINBASEAPI BOOLEAN WINAPI <winbase.h>
Wow64GetThreadContext(HANDLE hThread,PWOW64_CONTEXT lpContext) WINBASEAPI WINBOOL WINAPI <winbase.h>
Wow64GetThreadSelectorEntry(HANDLE hThread,DWORD dwSelector,PWOW64_LDT_ENTRY lpSelectorEntry) WINBASEAPI WINBOOL WINAPI <winbase.h>
Wow64RevertWow64FsRedirection(PVOID OlValue) WINBASEAPI WINBOOL WINAPI <wow64apiset.h>
Wow64SetThreadContext(HANDLE hThread,CONST WOW64_CONTEXT * lpContext) WINBASEAPI WINBOOL WINAPI <winbase.h>
Wow64SuspendThread(HANDLE hThread) WINBASEAPI DWORD WINAPI <winbase.h>
Wow64Win32ApiEntry(DWORD dwFuncNumber,DWORD dwFlag,DWORD dwRes) WINADVAPI LONG WINAPI <winreg.h>
WOWCallback16(DWORD vpfn16,DWORD dwParam)DWORD WINAPI <wownt32.h>
WOWCallback16Ex(DWORD vpfn16,DWORD dwFlags,DWORD cbArgs,PVOID pArgs,PDWORD pdwRetCode)WINBOOL WINAPI <wownt32.h>
WOWDirectedYield16(WORD htask16)VOID WINAPI <wownt32.h>
WOWGetVDMPointer(DWORD vp,DWORD dwBytes,WINBOOL fProtectedMode)LPVOID WINAPI <wownt32.h>
WOWGetVDMPointerFix(DWORD vp,DWORD dwBytes,WINBOOL fProtectedMode)LPVOID WINAPI <wownt32.h>
WOWGetVDMPointerUnfix(DWORD vp)VOID WINAPI <wownt32.h>
WOWGlobalAlloc16(WORD wFlags,DWORD cb)WORD WINAPI <wownt32.h>
WOWGlobalAllocLock16(WORD wFlags,DWORD cb,WORD * phMem)DWORD WINAPI <wownt32.h>
WOWGlobalFree16(WORD hMem)WORD WINAPI <wownt32.h>
WOWGlobalLock16(WORD hMem)DWORD WINAPI <wownt32.h>
WOWGlobalLockSize16(WORD hMem,PDWORD pcb)DWORD WINAPI <wownt32.h>
WOWGlobalUnlock16(WORD hMem)WINBOOL WINAPI <wownt32.h>
WOWGlobalUnlockFree16(DWORD vpMem)WORD WINAPI <wownt32.h>
WOWHandle16(HANDLE,WOW_HANDLE_TYPE)WORD WINAPI <wownt32.h>
WOWHandle32(WORD,WOW_HANDLE_TYPE)HANDLE WINAPI <wownt32.h>
WOWYield16(VOID)VOID WINAPI <wownt32.h>
WpBindToSite(HWND hwnd,LPCSTR sSiteName,LPCSTR sSitePostingURL,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk) DWORD WINAPI <wpapi.h>
WpBindToSiteA(HWND hwnd,LPCSTR sSiteName,LPCSTR sSitePostingURL,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk) DWORD WINAPI <wpapi.h>
WpBindToSiteW(HWND hwnd,LPCWSTR wsSiteName,LPCWSTR wsSitePostingURL,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk) DWORD WINAPI <wpapi.h>
WpCreateSite(LPCSTR sSiteName,LPCSTR sSiteLocalBaseDir,LPCSTR sSitePostingURL,LPCSTR sProviderCLSID,DWORD dwFlags) DWORD WINAPI <wpapi.h>
WpCreateSiteA(LPCSTR sSiteName,LPCSTR sSiteLocalBaseDir,LPCSTR sSitePostingURL,LPCSTR sProviderCLSID,DWORD dwFlags) DWORD WINAPI <wpapi.h>
WpCreateSiteW(LPCWSTR wsSiteName,LPCWSTR wsSiteLocalBaseDir,LPCWSTR wsSitePostingURL,LPCWSTR wsProviderCLSID,DWORD dwFlags) DWORD WINAPI <wpapi.h>
WpDeleteSite(LPCSTR sSiteName) DWORD WINAPI <wpapi.h>
WpDeleteSiteA(LPCSTR sSiteName) DWORD WINAPI <wpapi.h>
WpDeleteSiteW(LPCWSTR wsSiteName) DWORD WINAPI <wpapi.h>
WpDoesSiteExist(LPCSTR sSiteName,WINBOOL * pfSiteExists) DWORD WINAPI <wpapi.h>
WpDoesSiteExistA(LPCSTR sSiteName,WINBOOL * pfSiteExists) DWORD WINAPI <wpapi.h>
WpDoesSiteExistW(LPCWSTR wsSiteName,WINBOOL * pfSiteExists) DWORD WINAPI <wpapi.h>
WpEnumProviders(LPDWORD pdwProvidersBufLen,LPWPPROVINFOA pProvidersBuffer,LPDWORD pdwNumProviders) DWORD WINAPI <wpapi.h>
WpEnumProvidersA(LPDWORD pdwProvidersBufLen,LPWPPROVINFOA pProvidersBuffer,LPDWORD pdwNumProviders) DWORD WINAPI <wpapi.h>
WpEnumProvidersW(LPDWORD pdwProvidersBufLen,LPWPPROVINFOW pProvidersBuffer,LPDWORD pdwNumProviders) DWORD WINAPI <wpapi.h>
WpGetErrorString(UINT uErrCode,LPSTR sOutputBuf,LPDWORD pdwBufLen) DWORD WINAPI <wpapi.h>
WpGetErrorStringA(UINT uErrCode,LPSTR sOutputBuf,LPDWORD pdwBufLen) DWORD WINAPI <wpapi.h>
WpGetErrorStringW(UINT uErrCode,LPWSTR wsOutputBuf,LPDWORD pdwBufLen) DWORD WINAPI <wpapi.h>
WpListSites(LPDWORD pdwSitesBufLen,LPWPSITEINFOA pSitesBuffer,LPDWORD pdwNumSites) DWORD WINAPI <wpapi.h>
WpListSitesA(LPDWORD pdwSitesBufLen,LPWPSITEINFOA pSitesBuffer,LPDWORD pdwNumSites) DWORD WINAPI <wpapi.h>
WpListSitesW(LPDWORD pdwSitesBufLen,LPWPSITEINFOW pSitesBuffer,LPDWORD pdwNumSites) DWORD WINAPI <wpapi.h>
WppBindToSiteA(HWND hwnd,LPCSTR sSiteName,LPCSTR sURL,REFIID riid,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk)HRESULT WPPFUNC WINAPI <wpspihlp.h>
WppBindToSiteW(HWND hwnd,LPCWSTR sSiteName,LPCWSTR sURL,REFIID riid,DWORD dwFlag,DWORD dwReserved,PVOID * ppvUnk)HRESULT WPPFUNC WINAPI <wpspihlp.h>
WppDeleteSiteA(LPCSTR sSiteName)HRESULT WPPFUNC WINAPI <wpspihlp.h>
WppDeleteSiteW(LPCWSTR sSiteName)HRESULT WPPFUNC WINAPI <wpspihlp.h>
WppListSitesA(LPDWORD pdwSitesBufLen,LPWPSITEINFOA pSitesBuffer,LPDWORD pdwNumSites)HRESULT WPPFUNC WINAPI <wpspihlp.h>
WppListSitesW(LPDWORD pdwSitesBufLen,LPWPSITEINFOW pSitesBuffer,LPDWORD pdwNumSites)HRESULT WPPFUNC WINAPI <wpspihlp.h>
WpPost(HWND hwnd,DWORD dwNumLocalPaths,LPSTR * psLocalPaths,LPDWORD pdwSiteNameBufLen,LPSTR sSiteName,LPDWORD pdwDestURLBufLen,LPSTR sDestURLBufLen,DWORD dwFlag) DWORD WINAPI <wpapi.h>
WpPostA(HWND hwnd,DWORD dwNumLocalPaths,LPSTR * psLocalPaths,LPDWORD pdwSiteNameBufLen,LPSTR sSiteName,LPDWORD pdwDestURLBufLen,LPSTR sDestURLBufLen,DWORD dwFlag) DWORD WINAPI <wpapi.h>
WpPostW(HWND hwnd,DWORD dwNumLocalPaths,LPWSTR * pwsLocalPaths,LPDWORD pdwSiteNameBufLen,LPWSTR wsSiteName,LPDWORD pdwDestURLBufLen,LPWSTR wsDestURL,DWORD dwFlag) DWORD WINAPI <wpapi.h>
WPU_GET_QOS_TEMPLATE(const LPGUID Guid,LPWSABUF QosName,LPQOS Qos)typedef WINBOOL<qosname.h>
WPUCloseEvent(WSAEVENT hEvent,LPINT lpErrno) WINBOOL WSPAPI <ws2spi.h>
WPUCloseSocketHandle(SOCKET s,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUCloseThread(LPWSATHREADID lpThreadId,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUCompleteOverlappedRequest(SOCKET s,LPWSAOVERLAPPED lpOverlapped,DWORD dwError,DWORD cbTransferred,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUCreateEvent(LPINT lpErrno) WSAEVENT WSPAPI <ws2spi.h>
WPUCreateSocketHandle(DWORD dwCatalogEntryId,DWORD_PTR dwContext,LPINT lpErrno) SOCKET WSPAPI <ws2spi.h>
WPUFDIsSet(SOCKET s,fd_set * fdset) int WSPAPI <ws2spi.h>
WPUGetProviderPath(LPGUID lpProviderId,WCHAR * lpszProviderDllPath,LPINT lpProviderDllPathLen,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUModifyIFSHandle(DWORD dwCatalogEntryId,SOCKET ProposedHandle,LPINT lpErrno) SOCKET WSPAPI <ws2spi.h>
WPUOpenCurrentThread(LPWSATHREADID lpThreadId,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUPostMessage(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam) WINBOOL WSPAPI <ws2spi.h>
WPUQueryBlockingCallback(DWORD dwCatalogEntryId,LPBLOCKINGCALLBACK * lplpfnCallback,PDWORD_PTR lpdwContext,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUQuerySocketHandleContext(SOCKET s,PDWORD_PTR lpContext,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUQueueApc(LPWSATHREADID lpThreadId,LPWSAUSERAPC lpfnUserApc,DWORD_PTR dwContext,LPINT lpErrno) int WSPAPI <ws2spi.h>
WPUResetEvent(WSAEVENT hEvent,LPINT lpErrno) WINBOOL WSPAPI <ws2spi.h>
WPUSetEvent(WSAEVENT hEvent,LPINT lpErrno) WINBOOL WSPAPI <ws2spi.h>
WrapCompressedRTFStream(LPSTREAM lpCompressedRTFStream,ULONG ulFlags,LPSTREAM * lpUncompressedRTFStream) STDAPI_<wabutil.h>
WrapperReserved(PVOID) UCHAR <ndis.h>
WrapperReservedEx(PVOID) UCHAR <ndis.h>
WrapStoreEntryID(ULONG ulFlags,LPTSTR lpszDLLName,ULONG cbOrigEntry,LPENTRYID lpOrigEntry,ULONG * lpcbWrappedEntry,LPENTRYID * lppWrappedEntry) STDAPI <wabutil.h>
Write(BYTE * pByte,LONG cb,LONG * pcbWritten)virtual HRESULT WINAPI <winioctl.h>
Write(VARIANT varText)virtual HRESULT WINAPI <winioctl.h>
WRITE_PORT_BUFFER_UCHAR(IN PUCHAR Port,IN PUCHAR Buffer,IN ULONG Count)<wdm.h>
WRITE_PORT_BUFFER_ULONG(IN PULONG Port,IN PULONG Buffer,IN ULONG Count)<wdm.h>
WRITE_PORT_BUFFER_USHORT(IN PUSHORT Port,IN PUSHORT Buffer,IN ULONG Count)<wdm.h>
WRITE_PORT_UCHAR()()()
WRITE_PORT_UCHAR(IN PUCHAR Port,IN UCHAR Value)<wdm.h>
WRITE_PORT_UCHAR(p, v)<wdm.h>
WRITE_PORT_ULONG()()()
WRITE_PORT_ULONG(IN PULONG Port,IN ULONG Value)<wdm.h>
WRITE_PORT_ULONG(p, v)<wdm.h>
WRITE_PORT_USHORT()()()
WRITE_PORT_USHORT(IN PUSHORT Port,IN USHORT Value)<wdm.h>
WRITE_PORT_USHORT(p, v)<wdm.h>
WRITE_REGISTER_BUFFER_UCHAR(IN PUCHAR Register,IN PUCHAR Buffer,IN ULONG Count)<wdm.h>
WRITE_REGISTER_BUFFER_ULONG(IN PULONG Register,IN PULONG Buffer,IN ULONG Count)<wdm.h>
WRITE_REGISTER_BUFFER_USHORT(IN PUSHORT Register,IN PUSHORT Buffer,IN ULONG Count)<wdm.h>
WRITE_REGISTER_UCHAR()()()
WRITE_REGISTER_UCHAR(IN PUCHAR Register,IN UCHAR Value)<wdm.h>
WRITE_REGISTER_UCHAR(IN volatile UCHAR * Register,IN UCHAR Value)<wdm.h>
WRITE_REGISTER_UCHAR(r, v)<wdm.h>
WRITE_REGISTER_ULONG()()()
WRITE_REGISTER_ULONG(IN PULONG Register,IN ULONG Value)<wdm.h>
WRITE_REGISTER_ULONG(IN volatile ULONG * Register,IN ULONG Value)<wdm.h>
WRITE_REGISTER_ULONG(r, v)<wdm.h>
WRITE_REGISTER_USHORT()()()
WRITE_REGISTER_USHORT(IN PUSHORT Register,IN USHORT Value)<wdm.h>
WRITE_REGISTER_USHORT(IN volatile USHORT * Register,IN USHORT Value)<wdm.h>
WRITE_REGISTER_USHORT(r, v)<wdm.h>
WriteAccessRuleset(PST_KEY Key,const GUID * pType,const GUID * pSubtype,PPST_ACCESSRULESET pRules,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
WriteAttributeDefinition(LPWSTR pszAttributeName,PADS_ATTR_DEF pAttributeDefinition)virtual HRESULT WINAPI <iads.h>
WriteBinary(BYTE byP1,BYTE byP2,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
WriteBlobToFile(HBLOB hBlob,const char * pFileName) DWORD __cdecl <netmon.h>
WriteBlock(short iBlockNumber)virtual HRESULT WINAPI <asptlb.h>
WriteCabinetState(CABINETSTATE * pcs) SHSTDAPI_<shlobj.h>
WriteClassDefinition(LPWSTR pszClassName,PADS_CLASS_DEF pClassDefinition)virtual HRESULT WINAPI <iads.h>
WriteClassStg(LPSTORAGE pStg,REFCLSID rclsid)WINOLEAPI <ole2.h>
WriteClassStm(LPSTREAM pStm,REFCLSID rclsid)WINOLEAPI <ole2.h>
WriteConsole(HANDLE hConsoleOutput,CONST VOID * lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleA(HANDLE hConsoleOutput,CONST VOID * lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleInput(HANDLE hConsoleInput,CONST INPUT_RECORD * lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleInputA(HANDLE hConsoleInput,CONST INPUT_RECORD * lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleInputW(HANDLE hConsoleInput,CONST INPUT_RECORD * lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutput(HANDLE hConsoleOutput,CONST CHAR_INFO * lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutputA(HANDLE hConsoleOutput,CONST CHAR_INFO * lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutputAttribute(HANDLE hConsoleOutput,CONST WORD * lpAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutputCharacter(HANDLE hConsoleOutput,LPCSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutputCharacterA(HANDLE hConsoleOutput,LPCSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutputCharacterW(HANDLE hConsoleOutput,LPCWSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleOutputW(HANDLE hConsoleOutput,CONST CHAR_INFO * lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion) WINBASEAPI WINBOOL WINAPI <wincon.h>
WriteConsoleW(HANDLE hConsoleOutput,CONST VOID * lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved) WINBASEAPI WINBOOL WINAPI <wincon.h>
WRITEEMBEDPROC(void *,void *,ULONG)typedef ULONG<t2embapi.h>
WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback,PVOID pvCallbackContext,PVOID pvContext) WINADVAPI DWORD WINAPI <winbase.h>
WriteFile(HANDLE hFile,LPCVOID lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <fileapi.h>
WriteFileEx(HANDLE hFile,LPCVOID lpBuffer,DWORD nNumberOfBytesToWrite,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINBASEAPI WINBOOL WINAPI <fileapi.h>
WriteFileGather(HANDLE hFile,FILE_SEGMENT_ELEMENT aSegmentArray[],DWORD nNumberOfBytesToWrite,LPDWORD lpReserved,LPOVERLAPPED lpOverlapped) WINBASEAPI WINBOOL WINAPI <fileapi.h>
WriteFmtUserTypeStg(LPSTORAGE pstg,CLIPFORMAT cf,LPOLESTR lpszUserType)WINOLEAPI <ole2.h>
WriteGlobalPwrPolicy(PGLOBAL_POWER_POLICY) BOOLEAN WINAPI <powrprof.h>
WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)WINBOOL WINAPI <urlmon.h>
WriteHWL(HWL,HFILE) int WINAPI <penwin.h>
WriteItem(PST_KEY Key,const GUID * pItemType,const GUID * pItemSubtype,LPCWSTR szItemName,DWORD cbData,BYTE * pbData,PPST_PROMPTINFO pPromptInfo,DWORD dwDefaultConfirmationStyle,DWORD dwFlags)virtual HRESULT WINAPI <pstore.h>
WriteLogRecord(BLOB rgBlob[],ULONG cBlob)virtual HRESULT WINAPI <comsvcs.h>
WriteLogRecordVariants(VARIANT * pLogRecord)virtual HRESULT WINAPI <comsvcs.h>
WriteMultiple(ULONG cpspec,const PROPSPEC rgpspec[],const PROPVARIANT rgpropvar[],PROPID propidNameFirst)virtual HRESULT WINAPI <wia.h>
WritePort(HANDLE hPort,LPBYTE pBuffer,DWORD cbBuf,LPDWORD pcbWritten)<winsplp.h>
WritePrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten) WINBOOL WINAPI <winspool.h>
WritePrivateProfileSection(LPCSTR lpAppName,LPCSTR lpString,LPCSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileSectionA(LPCSTR lpAppName,LPCSTR lpString,LPCSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileSectionW(LPCWSTR lpAppName,LPCWSTR lpString,LPCWSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileString(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString,LPCSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString,LPCSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpString,LPCWSTR lpFileName) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileStruct(LPCSTR lpszSection,LPCSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCSTR szFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileStructA(LPCSTR lpszSection,LPCSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCSTR szFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
WritePrivateProfileStructW(LPCWSTR lpszSection,LPCWSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCWSTR szFile) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProcessMemory(HANDLE hProcess,LPVOID lpBaseAddress,LPCVOID lpBuffer,SIZE_T nSize,SIZE_T * lpNumberOfBytesWritten) WINBASEAPI WINBOOL WINAPI <memoryapi.h>
WriteProcessorPwrScheme(UINT,PMACHINE_PROCESSOR_POWER_POLICY) BOOLEAN WINAPI <powrprof.h>
WriteProfileSection(LPCSTR lpAppName,LPCSTR lpString) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProfileSectionA(LPCSTR lpAppName,LPCSTR lpString) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProfileSectionW(LPCWSTR lpAppName,LPCWSTR lpString) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProfileString(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpString) WINBASEAPI WINBOOL WINAPI <winbase.h>
WriteProperties(ULONG nCount,const LPCWSTR rgwszName[],const VARIANT rgValue[])virtual HRESULT WINAPI <subsmgr.h>
WritePropertyNames(ULONG cpropid,const PROPID rgpropid[],const LPOLESTR rglpwstrName[])virtual HRESULT WINAPI <wia.h>
WritePwrScheme(PUINT,LPTSTR,LPTSTR,PPOWER_POLICY) BOOLEAN WINAPI <powrprof.h>
WriteRecord(BYTE byRecordId,BYTE byRefCtrl,LPBYTEBUFFER pData,LPSCARDCMD * ppCmd)virtual HRESULT WINAPI <scardssp.h>
WriteStringToStorage(LPCOLESTR pwszFileName,LPCOLESTR pwszInitializationString,DWORD dwCreationDisposition)virtual HRESULT WINAPI <msdasc.h>
WriteSync(void)virtual HRESULT WINAPI <strmif.h>
WriteTapemark(HANDLE hDevice,DWORD dwTapemarkType,DWORD dwTapemarkCount,WINBOOL bImmediate) WINBASEAPI DWORD WINAPI <winbase.h>
WriteToFile(BSTR FileName)virtual HRESULT WINAPI <cdonts.h>
WSA_CMSG_DATA(cmsg)<mswsock.h>
WSA_CMSG_FIRSTHDR(msg)<mswsock.h>
WSA_CMSG_LEN(length)<mswsock.h>
WSA_CMSG_NXTHDR(msg,cmsg)<mswsock.h>
WSA_CMSG_SPACE(length)<mswsock.h>
WSA_CMSGDATA_ALIGN(length)<mswsock.h>
WSA_CMSGHDR_ALIGN(length)<mswsock.h>
WSAAccept(SOCKET s,struct sockaddr * addr,LPINT addrlen,LPCONDITIONPROC lpfnCondition,DWORD_PTR dwCallbackData) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
WSAAddressToString(LPSOCKADDR lpsaAddress,DWORD dwAddressLength,LPWSAPROTOCOL_INFOA lpProtocolInfo,LPSTR lpszAddressString,LPDWORD lpdwAddressStringLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAAddressToStringA(LPSOCKADDR lpsaAddress,DWORD dwAddressLength,LPWSAPROTOCOL_INFOA lpProtocolInfo,LPSTR lpszAddressString,LPDWORD lpdwAddressStringLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAAddressToStringW(LPSOCKADDR lpsaAddress,DWORD dwAddressLength,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPWSTR lpszAddressString,LPDWORD lpdwAddressStringLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAAdvertiseProvider(const GUID * puuidProviderId,const LPCNSPV2_ROUTINE * pNSPv2Routine)INT WSAAPI <ws2spi.h>
WSAAsyncGetHostByAddr(a,b,c,d,e,f,g)<wsipv6ok.h>
WSAAsyncGetHostByAddr(HWND hWnd,u_int wMsg,const char * addr,int len,int type,char * buf,int buflen) WINSOCK_API_LINKAGE HANDLE WSAAPI <wsipv6ok.h>
WSAAsyncGetHostByName(a,b,c,d,e)<wsipv6ok.h>
WSAAsyncGetHostByName(HWND hWnd,u_int wMsg,const char * name,char * buf,int buflen) WINSOCK_API_LINKAGE HANDLE WSAAPI <wsipv6ok.h>
WSAAsyncGetProtoByName(HWND hWnd,u_int wMsg,const char * name,char * buf,int buflen) WINSOCK_API_LINKAGE HANDLE WSAAPI <winsock2.h>
WSAAsyncGetProtoByNumber(HWND hWnd,u_int wMsg,int number,char * buf,int buflen) WINSOCK_API_LINKAGE HANDLE WSAAPI <winsock2.h>
WSAAsyncGetServByName(HWND hWnd,u_int wMsg,const char * name,const char * proto,char * buf,int buflen) WINSOCK_API_LINKAGE HANDLE WSAAPI <winsock2.h>
WSAAsyncGetServByPort(HWND hWnd,u_int wMsg,int port,const char * proto,char * buf,int buflen) WINSOCK_API_LINKAGE HANDLE WSAAPI <winsock2.h>
WSAAsyncSelect(SOCKET s,HWND hWnd,u_int wMsg,__LONG32 lEvent) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSACancelAsyncRequest(HANDLE hAsyncTaskHandle) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSACancelBlockingCall(void) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSACleanup(void) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSACloseEvent(WSAEVENT hEvent) WINSOCK_API_LINKAGE WINBOOL WSAAPI <winsock2.h>
WSAConnect(SOCKET s,const struct sockaddr * name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAConnectByList(SOCKET s,PSOCKET_ADDRESS_LIST SocketAddressList,LPDWORD LocalAddressLength,LPSOCKADDR LocalAddress,LPDWORD RemoteAddressLength,LPSOCKADDR RemoteAddress,const PTIMEVAL timeout,LPWSAOVERLAPPED Reserved)WINSOCK_API_LINKAGE WINBOOL PASCAL <winsock2.h>
WSAConnectByName(SOCKET s,LPSTR nodename,LPSTR servicename,LPDWORD LocalAddressLength,LPSOCKADDR LocalAddress,LPDWORD RemoteAddressLength,LPSOCKADDR RemoteAddress,const PTIMEVAL timeout,LPWSAOVERLAPPED Reserved)WINSOCK_API_LINKAGE WINBOOL PASCAL <winsock2.h>
WSAConnectByNameA(SOCKET s,LPSTR nodename,LPSTR servicename,LPDWORD LocalAddressLength,LPSOCKADDR LocalAddress,LPDWORD RemoteAddressLength,LPSOCKADDR RemoteAddress,const PTIMEVAL timeout,LPWSAOVERLAPPED Reserved)WINSOCK_API_LINKAGE WINBOOL PASCAL <winsock2.h>
WSAConnectByNameW(SOCKET s,LPWSTR nodename,LPWSTR servicename,LPDWORD LocalAddressLength,LPSOCKADDR LocalAddress,LPDWORD RemoteAddressLength,LPSOCKADDR RemoteAddress,const PTIMEVAL timeout,LPWSAOVERLAPPED Reserved)WINSOCK_API_LINKAGE WINBOOL PASCAL <winsock2.h>
WSACreateEvent(void) WINSOCK_API_LINKAGE WSAEVENT WSAAPI <winsock2.h>
WSADuplicateSocket(SOCKET s,DWORD dwProcessId,LPWSAPROTOCOL_INFOA lpProtocolInfo) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSADuplicateSocketA(SOCKET s,DWORD dwProcessId,LPWSAPROTOCOL_INFOA lpProtocolInfo) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSADuplicateSocketW(SOCKET s,DWORD dwProcessId,LPWSAPROTOCOL_INFOW lpProtocolInfo) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAEnumNameSpaceProviders(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOA lpnspBuffer) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAEnumNameSpaceProvidersA(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOA lpnspBuffer) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAEnumNameSpaceProvidersEx(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOEXA lpnspBuffer)INT WSAAPI <winsock2.h>
WSAEnumNameSpaceProvidersExA(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOEXA lpnspBuffer)INT WSAAPI <winsock2.h>
WSAEnumNameSpaceProvidersExW(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOEXW lpnspBuffer)INT WSAAPI <winsock2.h>
WSAEnumNameSpaceProvidersW(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOW lpnspBuffer) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAEnumNetworkEvents(SOCKET s,WSAEVENT hEventObject,LPWSANETWORKEVENTS lpNetworkEvents) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAEnumProtocols(LPINT lpiProtocols,LPWSAPROTOCOL_INFOA lpProtocolBuffer,LPDWORD lpdwBufferLength) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAEnumProtocolsA(LPINT lpiProtocols,LPWSAPROTOCOL_INFOA lpProtocolBuffer,LPDWORD lpdwBufferLength) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAEnumProtocolsW(LPINT lpiProtocols,LPWSAPROTOCOL_INFOW lpProtocolBuffer,LPDWORD lpdwBufferLength) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAEventSelect(SOCKET s,WSAEVENT hEventObject,__LONG32 lNetworkEvents) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAGETASYNCBUFLEN(lParam)<winsock2.h>
WSAGETASYNCERROR(lParam)<winsock2.h>
WSAGetLastError(void) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAGetOverlappedResult(SOCKET s,LPWSAOVERLAPPED lpOverlapped,LPDWORD lpcbTransfer,WINBOOL fWait,LPDWORD lpdwFlags) WINSOCK_API_LINKAGE WINBOOL WSAAPI <winsock2.h>
WSAGetQOSByName(SOCKET s,LPWSABUF lpQOSName,LPQOS lpQOS) WINSOCK_API_LINKAGE WINBOOL WSAAPI <winsock2.h>
WSAGETSELECTERROR(lParam)<winsock2.h>
WSAGETSELECTEVENT(lParam)<winsock2.h>
WSAGetServiceClassInfo(LPGUID lpProviderId,LPGUID lpServiceClassId,LPDWORD lpdwBufSize,LPWSASERVICECLASSINFOA lpServiceClassInfo) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAGetServiceClassInfoA(LPGUID lpProviderId,LPGUID lpServiceClassId,LPDWORD lpdwBufSize,LPWSASERVICECLASSINFOA lpServiceClassInfo) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAGetServiceClassInfoW(LPGUID lpProviderId,LPGUID lpServiceClassId,LPDWORD lpdwBufSize,LPWSASERVICECLASSINFOW lpServiceClassInfo) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAGetServiceClassNameByClassId(LPGUID lpServiceClassId,LPSTR lpszServiceClassName,LPDWORD lpdwBufferLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAGetServiceClassNameByClassIdA(LPGUID lpServiceClassId,LPSTR lpszServiceClassName,LPDWORD lpdwBufferLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAGetServiceClassNameByClassIdW(LPGUID lpServiceClassId,LPWSTR lpszServiceClassName,LPDWORD lpdwBufferLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAHtonl(SOCKET s,u_long hostlong,u_long * lpnetlong) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAHtons(SOCKET s,u_short hostshort,u_short * lpnetshort) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAImpersonateSocketPeer(SOCKET Socket,const struct sockaddr * PeerAddress,ULONG peerAddressLen)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
WSAInstallServiceClass(LPWSASERVICECLASSINFOA lpServiceClassInfo) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAInstallServiceClassA(LPWSASERVICECLASSINFOA lpServiceClassInfo) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAInstallServiceClassW(LPWSASERVICECLASSINFOW lpServiceClassInfo) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAIoctl(SOCKET s,DWORD dwIoControlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOutBuffer,DWORD cbOutBuffer,LPDWORD lpcbBytesReturned,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAIsBlocking(void) WINSOCK_API_LINKAGE WINBOOL WSAAPI <winsock2.h>
WSAJoinLeaf(SOCKET s,const struct sockaddr * name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS,DWORD dwFlags) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
WSALookupServiceBegin(LPWSAQUERYSETA lpqsRestrictions,DWORD dwControlFlags,LPHANDLE lphLookup) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSALookupServiceBeginA(LPWSAQUERYSETA lpqsRestrictions,DWORD dwControlFlags,LPHANDLE lphLookup) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSALookupServiceBeginW(LPWSAQUERYSETW lpqsRestrictions,DWORD dwControlFlags,LPHANDLE lphLookup) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSALookupServiceEnd(HANDLE hLookup) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSALookupServiceNext(HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSETA lpqsResults) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSALookupServiceNextA(HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSETA lpqsResults) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSALookupServiceNextW(HANDLE hLookup,DWORD dwControlFlags,LPDWORD lpdwBufferLength,LPWSAQUERYSETW lpqsResults) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAMAKEASYNCREPLY(buflen,error)<winsock2.h>
WSAMAKESELECTREPLY(event,error)<winsock2.h>
WSANSPIoctl(HANDLE hLookup,DWORD dwControlCode,LPVOID lpvInBuffer,DWORD cbInBuffer,LPVOID lpvOutBuffer,DWORD cbOutBuffer,LPDWORD lpcbBytesReturned,LPWSACOMPLETION lpCompletion) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSANtohl(SOCKET s,u_long netlong,u_long * lphostlong) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSANtohs(SOCKET s,u_short netshort,u_short * lphostshort) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAPoll(WSAPOLLFD fdarray[],ULONG nfds,INT timeout)int WSAAPI <winsock2.h>
WSAProviderCompleteAsyncCall(HANDLE hAsyncCall,INT iRetCode)INT WSPAPI <ws2spi.h>
WSAProviderConfigChange(LPHANDLE lpNotificationHandle,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAQuerySocketSecurity(SOCKET Socket,const SOCKET_SECURITY_QUERY_TEMPLATE * SecurityQueryTemplate,ULONG SecurityQueryTemplateLen,SOCKET_SECURITY_QUERY_INFO * SecurityQueryInfo,ULONG * SecurityQueryInfoLen,LPWSAOVERLAPPED Overlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
WSARecv(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesRecvd,LPDWORD lpFlags,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSARecvDisconnect(SOCKET s,LPWSABUF lpInboundDisconnectData) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSARecvEx(SOCKET s,char * buf,int len,int * flags) int WINAPI <winsock.h>
WSARecvFrom(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesRecvd,LPDWORD lpFlags,struct sockaddr * lpFrom,LPINT lpFromlen,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSARemoveServiceClass(LPGUID lpServiceClassId) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAResetEvent(WSAEVENT hEvent) WINSOCK_API_LINKAGE WINBOOL WSAAPI <winsock2.h>
WSARevertImpersonation(void)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
WSASend(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesSent,DWORD dwFlags,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSASendDisconnect(SOCKET s,LPWSABUF lpOutboundDisconnectData) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSASendMsg(SOCKET s,LPWSAMSG lpMsg,DWORD dwFlags,LPDWORD lpNumberOfBytesSent,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)int WSAAPI <winsock2.h>
WSASendTo(SOCKET s,LPWSABUF lpBuffers,DWORD dwBufferCount,LPDWORD lpNumberOfBytesSent,DWORD dwFlags,const struct sockaddr * lpTo,int iTolen,LPWSAOVERLAPPED lpOverlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSASetBlockingHook(FARPROC lpBlockFunc) WINSOCK_API_LINKAGE FARPROC WSAAPI <winsock2.h>
WSASetEvent(WSAEVENT hEvent) WINSOCK_API_LINKAGE WINBOOL WSAAPI <winsock2.h>
WSASetLastError(int iError) WINSOCK_API_LINKAGE void WSAAPI <winsock2.h>
WSASetService(LPWSAQUERYSETA lpqsRegInfo,WSAESETSERVICEOP essoperation,DWORD dwControlFlags) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSASetServiceA(LPWSAQUERYSETA lpqsRegInfo,WSAESETSERVICEOP essoperation,DWORD dwControlFlags) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSASetServiceW(LPWSAQUERYSETW lpqsRegInfo,WSAESETSERVICEOP essoperation,DWORD dwControlFlags) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSASetSocketPeerTargetName(SOCKET Socket,const SOCKET_PEER_TARGET_NAME * PeerTargetName,ULONG PeerTargetNameLen,LPWSAOVERLAPPED Overlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
WSASetSocketSecurity(SOCKET Socket,const SOCKET_SECURITY_SETTINGS * SecuritySettings,ULONG SecuritySettingsLen,LPWSAOVERLAPPED Overlapped,LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine)WINSOCK_API_LINKAGE int WSAAPI <ws2tcpip.h>
WSASocket(int af,int type,int protocol,LPWSAPROTOCOL_INFOA lpProtocolInfo,GROUP g,DWORD dwFlags) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
WSASocketA(int af,int type,int protocol,LPWSAPROTOCOL_INFOA lpProtocolInfo,GROUP g,DWORD dwFlags) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
WSASocketW(int af,int type,int protocol,LPWSAPROTOCOL_INFOW lpProtocolInfo,GROUP g,DWORD dwFlags) WINSOCK_API_LINKAGE SOCKET WSAAPI <winsock2.h>
WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAStringToAddress(LPSTR AddressString,INT AddressFamily,LPWSAPROTOCOL_INFOA lpProtocolInfo,LPSOCKADDR lpAddress,LPINT lpAddressLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAStringToAddressA(LPSTR AddressString,INT AddressFamily,LPWSAPROTOCOL_INFOA lpProtocolInfo,LPSOCKADDR lpAddress,LPINT lpAddressLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAStringToAddressW(LPWSTR AddressString,INT AddressFamily,LPWSAPROTOCOL_INFOW lpProtocolInfo,LPSOCKADDR lpAddress,LPINT lpAddressLength) WINSOCK_API_LINKAGE INT WSAAPI <winsock2.h>
WSAUnadvertiseProvider(const GUID * puuidProviderId)INT WSPAPI <ws2spi.h>
WSAUnhookBlockingHook(void) WINSOCK_API_LINKAGE int WSAAPI <winsock2.h>
WSAWaitForMultipleEvents(DWORD cEvents,const WSAEVENT * lphEvents,WINBOOL fWaitAll,DWORD dwTimeout,WINBOOL fAlertable) WINSOCK_API_LINKAGE DWORD WSAAPI <winsock2.h>
WSC_INSTALL_QOS_TEMPLATE(const LPGUID Guid,LPWSABUF QosName,LPQOS Qos)typedef WINBOOL<qosname.h>
WSC_REMOVE_QOS_TEMPLATE(const LPGUID Guid,LPWSABUF QosName)typedef WINBOOL<qosname.h>
WSCDeinstallProvider(LPGUID lpProviderId,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCDeinstallProvider32(LPGUID lpProviderId,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCEnableNSProvider(LPGUID lpProviderId,WINBOOL fEnable) INT WSPAPI <ws2spi.h>
WSCEnableNSProvider32(LPGUID lpProviderId,WINBOOL fEnable) INT WSPAPI <ws2spi.h>
WSCEnumNameSpaceProviders32(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOW lpnspBuffer) INT WSAAPI <ws2spi.h>
WSCEnumNameSpaceProvidersEx32(LPDWORD lpdwBufferLength,LPWSANAMESPACE_INFOEXW lpnspBuffer)INT WSPAPI <ws2spi.h>
WSCEnumProtocols(LPINT lpiProtocols,LPWSAPROTOCOL_INFOW lpProtocolBuffer,LPDWORD lpdwBufferLength,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCEnumProtocols32(LPINT lpiProtocols,LPWSAPROTOCOL_INFOW lpProtocolBuffer,LPDWORD lpdwBufferLength,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCGetApplicationCategory(LPCWSTR Path,DWORD PathLength,LPCWSTR Extra,DWORD ExtraLength,DWORD * pPermittedLspCategories,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCGetProviderInfo(LPGUID lpProviderId,WSC_PROVIDER_INFO_TYPE InfoType,PBYTE Info,size_t * InfoSize,DWORD Flags,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCGetProviderInfo32(LPGUID lpProviderId,WSC_PROVIDER_INFO_TYPE InfoType,PBYTE Info,size_t * InfoSize,DWORD Flags,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCGetProviderPath(LPGUID lpProviderId,WCHAR * lpszProviderDllPath,LPINT lpProviderDllPathLen,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCGetProviderPath32(LPGUID lpProviderId,WCHAR * lpszProviderDllPath,LPINT lpProviderDllPathLen,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCInstallNameSpace(LPWSTR lpszIdentifier,LPWSTR lpszPathName,DWORD dwNameSpace,DWORD dwVersion,LPGUID lpProviderId) INT WSPAPI <ws2spi.h>
WSCInstallNameSpace32(LPWSTR lpszIdentifier,LPWSTR lpszPathName,DWORD dwNameSpace,DWORD dwVersion,LPGUID lpProviderId) INT WSPAPI <ws2spi.h>
WSCInstallNameSpaceEx(LPWSTR lpszIdentifier,LPWSTR lpszPathName,DWORD dwNameSpace,DWORD dwVersion,LPGUID lpProviderId,LPBLOB lpProviderInfo)int WSAAPI <ws2spi.h>
WSCInstallNameSpaceEx32(LPWSTR lpszIdentifier,LPWSTR lpszPathName,DWORD dwNameSpace,DWORD dwVersion,LPGUID lpProviderId,LPBLOB lpProviderInfo)int WSAAPI <ws2spi.h>
WSCInstallProvider(LPGUID lpProviderId,const WCHAR * lpszProviderDllPath,const LPWSAPROTOCOL_INFOW lpProtocolInfoList,DWORD dwNumberOfEntries,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCInstallProvider64_32(LPGUID lpProviderId,const WCHAR * lpszProviderDllPath,const LPWSAPROTOCOL_INFOW lpProtocolInfoList,DWORD dwNumberOfEntries,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCInstallProviderAndChains(const LPGUID lpProviderId,const LPWSTR lpszProviderDllPath,const LPWSTR lpszLspName,DWORD dwServiceFlags,const LPWSAPROTOCOL_INFO lpProtocolInfoList,DWORD dwNumberOfEntries,LPDWORD lpdwCatalogEntryId,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCInstallProviderAndChains64_32(const LPGUID lpProviderId,const LPWSTR lpszProviderDllPath,const LPWSTR lpszProviderDllPath32,const LPWSTR lpszLspName,DWORD dwServiceFlags,const LPWSAPROTOCOL_INFO lpProtocolInfoList,DWORD dwNumberOfEntries,LPDWORD lpdwCatalogEntryId,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCInstallQOSTemplate(const LPGUID Guid,LPWSABUF QosName,LPQOS Qos) int WSPAPI <ws2spi.h>
WSCRemoveQOSTemplate(const LPGUID Guid,LPWSABUF QosName) int WSPAPI <ws2spi.h>
WSCSetApplicationCategory(LPCWSTR Path,DWORD PathLength,LPCWSTR Extra,DWORD ExtraLength,DWORD PermittedLspCategories,DWORD * pPrevPermLspCat,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCSetProviderInfo(LPGUID lpProviderId,WSC_PROVIDER_INFO_TYPE InfoType,PBYTE Info,size_t InfoSize,DWORD Flags,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCSetProviderInfo32(LPGUID lpProviderId,WSC_PROVIDER_INFO_TYPE InfoType,PBYTE Info,size_t InfoSize,DWORD Flags,LPINT lpErrno)int WSPAPI <ws2spi.h>
WSCUnInstallNameSpace(LPGUID lpProviderId) INT WSPAPI <ws2spi.h>
WSCUnInstallNameSpace32(LPGUID lpProviderId) INT WSPAPI <ws2spi.h>
WSCUpdateProvider(LPGUID lpProviderId,const WCHAR * lpszProviderDllPath,const LPWSAPROTOCOL_INFOW lpProtocolInfoList,DWORD dwNumberOfEntries,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCUpdateProvider32(LPGUID lpProviderId,const WCHAR * lpszProviderDllPath,const LPWSAPROTOCOL_INFOW lpProtocolInfoList,DWORD dwNumberOfEntries,LPINT lpErrno) int WSPAPI <ws2spi.h>
WSCWriteNameSpaceOrder(LPGUID lpProviderId,DWORD dwNumberOfEntries) int WSPAPI <sporder.h>
WSCWriteNameSpaceOrder32(LPGUID lpProviderId,DWORD dwNumberOfEntries) int WSPAPI <sporder.h>
WSCWriteProviderOrder(LPDWORD lpwdCatalogEntryId,DWORD dwNumberOfEntries) int WSPAPI <sporder.h>
WSCWriteProviderOrder32(LPDWORD lpwdCatalogEntryId,DWORD dwNumberOfEntries) int WSPAPI <sporder.h>
WSD_STUB_FUNCTION(IUnknown * server,IWSDServiceMessaging * session,WSD_EVENT * event)typedef HRESULT<wsdtypes.h>
WSDAllocateLinkedMemory(void * pParent,size_t cbSize)void<wsdutil.h>
WSDAttachLinkedMemory(void * pParent,void * pChild)void WINAPI <wsdutil.h>
WSDCreateDeviceHost(LPCWSTR pszLocalId,IWSDXMLContext * pContext,IWSDDeviceHost ** ppDeviceHost)HRESULT WINAPI <wsdhost.h>
WSDCreateDeviceHost2(LPCWSTR pszLocalId,IWSDXMLContext * pContext,WSD_CONFIG_PARAM * pConfigParams,DWORD dwConfigParamCount,IWSDDeviceHost ** ppDeviceHost)HRESULT WINAPI <wsdhost.h>
WSDCreateDeviceHostAdvanced(LPCWSTR pszLocalId,IWSDXMLContext * pContext,IWSDAddress ** ppHostAddresses,DWORD dwHostAddressCount,IWSDDeviceHost ** ppDeviceHost)HRESULT WINAPI <wsdhost.h>
WSDCreateDeviceProxy(LPCWSTR pszDeviceId,LPCWSTR pszLocalId,IWSDXMLContext * pContext,IWSDDeviceProxy ** ppDeviceProxy)HRESULT WINAPI <wsdclient.h>
WSDCreateDeviceProxy2(LPCWSTR pszDeviceId,LPCWSTR pszLocalId,IWSDXMLContext * pContext,WSD_CONFIG_PARAM * pConfigParams,DWORD dwConfigParamCount,IWSDDeviceProxy ** ppDeviceProxy)HRESULT WINAPI <wsdclient.h>
WSDCreateDeviceProxyAdvanced(LPCWSTR pszDeviceId,IWSDAddress * pDeviceAddress,LPCWSTR pszLocalId,IWSDXMLContext * pContext,IWSDDeviceProxy ** ppDeviceProxy)HRESULT WINAPI <wsdclient.h>
WSDCreateDiscoveryProvider(IWSDXMLContext * pContext,IWSDiscoveryProvider ** ppProvider)HRESULT WINAPI <wsddisco.h>
WSDCreateDiscoveryProvider2(IWSDXMLContext * pContext,WSD_CONFIG_PARAM * pConfigParams,DWORD dwConfigParamCount,IWSDiscoveryProvider ** ppProvider)HRESULT WINAPI <wsddisco.h>
WSDCreateDiscoveryPublisher(IWSDXMLContext * pContext,IWSDiscoveryPublisher ** ppPublisher)HRESULT WINAPI <wsddisco.h>
WSDCreateDiscoveryPublisher2(IWSDXMLContext * pContext,WSD_CONFIG_PARAM * pConfigParams,DWORD dwConfigParamCount,IWSDiscoveryPublisher ** ppPublisher)HRESULT WINAPI <wsddisco.h>
WSDCreateHttpAddress(IWSDHttpAddress ** ppAdress)HRESULT WINAPI <wsdbase.h>
WSDCreateHttpMessageParameters(IWSDHttpMessageParameters ** ppTxParams)HRESULT WINAPI <wsdbase.h>
WSDCreateOutboundAttachment(IWSDOutboundAttachment ** ppAttachment)HRESULT WINAPI <wsdattachment.h>
WSDCreateUdpAddress(IWSDUdpAddress ** ppAddress)<wsdbase.h>
WSDCreateUdpMessageParameters(IWSDUdpMessageParameters ** ppTxParams)<wsdbase.h>
WSDDetachLinkedMemory(void * pVoid)void WINAPI <wsdutil.h>
WSDFreeLinkedMemory(void * pVoid)void WINAPI <wsdutil.h>
WSDGenerateFault(const LPCWSTR * pszCode,const LPCWSTR * pszSubCode,const LPCWSTR * pszReason,const LPCWSTR * pszDetail,IWSDXMLContext * pContext,WSD_SOAP_FAULT ** ppFault)HRESULT WINAPI <wsdutil.h>
WSDGenerateFaultEx(WSDXML_NAME * pCode,WSDXML_NAME * pSubCode,WSD_LOCALIZED_STRING_LIST * pReasons,const LPCWSTR * pszDetail,WSD_SOAP_FAULT ** ppFault)HRESULT WINAPI <wsdutil.h>
WSDGetConfigurationOption(DWORD dwOption,LPVOID pVoid,DWORD cbOutBuffer)HRESULT WINAPI <wsdutil.h>
WSDRegisterTypes(pContext)<wsdtypes.h>
WSDSetConfigurationOption(DWORD dwOption,LPVOID pVoid,DWORD cbInBuffer)HRESULT WINAPI <wsdutil.h>
WSDXML_NAME_ENCODING()()()
WSDXML_NAME_ENCODING(nidx, nsenc)<wsdxml.h>
WSDXML_NAMESPACE_ENCODING()()()
WSDXML_NAMESPACE_ENCODING(nsidx, lno)<wsdxml.h>
WSDXML_TYPE_ENCODING(tidx,lno)<wsdxml.h>
WSDXMLAddChild(WSDXML_ELEMENT * pParent,WSDXML_ELEMENT * pChild)STDAPI <wsdutil.h>
WSDXMLAddSibling(WSDXML_ELEMENT * pFirst,WSDXML_ELEMENT * pSecond)STDAPI <wsdutil.h>
WSDXMLBuildAnyForSingleElement(WSDXML_NAME * pElementName,const LPCWSTR * pszText,WSDXML_ELEMENT ** ppAny)STDAPI <wsdutil.h>
WSDXMLCleanupElement(WSDXML_ELEMENT * pAny)HRESULT WINAPI <wsdutil.h>
WSDXMLCreateContext(IWSDXMLContext ** ppContext)HRESULT WINAPI <wsdxml.h>
WSDXMLGetNameFromBuiltinNamespace(LPCWSTR pszNamespace,LPCWSTR pszName,WSDXML_NAME ** ppName)HRESULT WINAPI <wsdxml.h>
WSDXMLGetValueFromAny(const WCHAR * pszNamespace,const WCHAR * pszName,WSDXML_ELEMENT * pAny,const LPCWSTR * ppszValue)STDAPI <wsdutil.h>
WSMAN_PLUGIN_AUTHORIZE_OPERATION(PVOID pluginContext,WSMAN_SENDER_DETAILS * senderDetails,DWORD flags,DWORD operation,PCWSTR action,PCWSTR resourceUri) typedef VOID<wsman.h>
WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA(PVOID pluginContext,WSMAN_SENDER_DETAILS * senderDetails,DWORD flags) typedef VOID<wsman.h>
WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT(PVOID userAuthorizationContext) typedef VOID<wsman.h>
WSMAN_PLUGIN_AUTHORIZE_USER(PVOID pluginContext,WSMAN_SENDER_DETAILS * senderDetails,DWORD flags) typedef VOID<wsman.h>
WSMAN_PLUGIN_COMMAND(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PVOID shellContext,PCWSTR commandLine,WSMAN_COMMAND_ARG_SET * arguments) typedef VOID<wsman.h>
WSMAN_PLUGIN_CONNECT(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PVOID shellContext,PVOID commandContext,WSMAN_DATA * inboundConnectInformation) typedef VOID<wsman.h>
WSMAN_PLUGIN_RECEIVE(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PVOID shellContext,PVOID commandContext,WSMAN_STREAM_ID_SET * streamSet) typedef VOID<wsman.h>
WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT(PVOID shellContext,PVOID commandContext) typedef VOID<wsman.h>
WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT(PVOID shellContext) typedef VOID<wsman.h>
WSMAN_PLUGIN_SEND(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PVOID shellContext,PVOID commandContext,PCWSTR stream,WSMAN_DATA * inboundData) typedef VOID<wsman.h>
WSMAN_PLUGIN_SHELL(PVOID pluginContext,WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,WSMAN_SHELL_STARTUP_INFO * startupInfo,WSMAN_DATA * inboundShellInformation) typedef VOID<wsman.h>
WSMAN_PLUGIN_SHUTDOWN(PVOID pluginContext,DWORD flags,DWORD reason) typedef DWORD<wsman.h>
WSMAN_PLUGIN_SIGNAL(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PVOID shellContext,PVOID commandContext,PCWSTR code) typedef VOID<wsman.h>
WSMAN_PLUGIN_STARTUP(DWORD flags,PCWSTR applicationIdentification,PCWSTR extraInfo,PVOID * pluginContext) typedef DWORD<wsman.h>
WSMAN_SHELL_COMPLETION_FUNCTION(PVOID operationContext,DWORD flags,WSMAN_ERROR * error,WSMAN_SHELL_HANDLE shell,WSMAN_COMMAND_HANDLE command,WSMAN_OPERATION_HANDLE operationHandle,WSMAN_RECEIVE_DATA_RESULT * data) typedef void<wsman.h>
WSMAN_SHELL_COMPLETION_FUNCTION(PVOID operationContext,DWORD flags,WSMAN_ERROR * error,WSMAN_SHELL_HANDLE shell,WSMAN_COMMAND_HANDLE command,WSMAN_OPERATION_HANDLE operationHandle,WSMAN_RESPONSE_DATA * data) typedef void<wsman.h>
WSManCloseCommand(WSMAN_COMMAND_HANDLE commandHandle,DWORD flags,WSMAN_SHELL_ASYNC * async) void WINAPI <wsman.h>
WSManCloseOperation(WSMAN_OPERATION_HANDLE operationHandle,DWORD flags) DWORD WINAPI <wsman.h>
WSManCloseSession(WSMAN_SESSION_HANDLE session,DWORD flags) DWORD WINAPI <wsman.h>
WSManCloseShell(WSMAN_SHELL_HANDLE shellHandle,DWORD flags,WSMAN_SHELL_ASYNC * async) void WINAPI <wsman.h>
WSManConnectShell(WSMAN_SESSION_HANDLE session,DWORD flags,PCWSTR resourceUri,PCWSTR shellID,WSMAN_OPTION_SET * options,WSMAN_DATA * connectXml,WSMAN_SHELL_ASYNC * async,WSMAN_SHELL_HANDLE * shell) void WINAPI <wsman.h>
WSManConnectShellCommand(WSMAN_SHELL_HANDLE shell,DWORD flags,PCWSTR commandID,WSMAN_OPTION_SET * options,WSMAN_DATA * connectXml,WSMAN_SHELL_ASYNC * async,WSMAN_COMMAND_HANDLE * command) void WINAPI <wsman.h>
WSManCreateSession(WSMAN_API_HANDLE apiHandle,PCWSTR connection,DWORD flags,WSMAN_AUTHENTICATION_CREDENTIALS * serverAuthenticationCredentials,WSMAN_PROXY_INFO * proxyInfo,WSMAN_SESSION_HANDLE * session) DWORD WINAPI <wsman.h>
WSManCreateShell(WSMAN_SESSION_HANDLE session,DWORD flags,PCWSTR resourceUri,WSMAN_SHELL_STARTUP_INFO * startupInfo,WSMAN_OPTION_SET * options,WSMAN_DATA * createXml,WSMAN_SHELL_ASYNC * async,WSMAN_SHELL_HANDLE * shell) void WINAPI <wsman.h>
WSManCreateShellEx(WSMAN_SESSION_HANDLE session,DWORD flags,PCWSTR resourceUri,PCWSTR shellId,WSMAN_SHELL_STARTUP_INFO * startupInfo,WSMAN_OPTION_SET * options,WSMAN_DATA * createXml,WSMAN_SHELL_ASYNC * async,WSMAN_SHELL_HANDLE * shell) void WINAPI <wsman.h>
WSManDeinitialize(WSMAN_API_HANDLE apiHandle,DWORD flags) DWORD WINAPI <wsman.h>
WSManDisconnectShell(WSMAN_SHELL_HANDLE shell,DWORD flags,WSMAN_SHELL_DISCONNECT_INFO * disconnectInfo,WSMAN_SHELL_ASYNC * async) void WINAPI <wsman.h>
WSManGetErrorMessage(WSMAN_API_HANDLE apiHandle,DWORD flags,PCWSTR languageCode,DWORD errorCode,DWORD messageLength,PWSTR message,DWORD * messageLengthUsed) DWORD WINAPI <wsman.h>
WSManGetSessionOptionAsDword(WSMAN_SESSION_HANDLE session,WSManSessionOption option,DWORD * value) DWORD WINAPI <wsman.h>
WSManGetSessionOptionAsString(WSMAN_SESSION_HANDLE session,WSManSessionOption option,DWORD stringLength,PWSTR string,DWORD * stringLengthUsed) DWORD WINAPI <wsman.h>
WSManInitialize(DWORD flags,WSMAN_API_HANDLE * apiHandle) DWORD WINAPI <wsman.h>
WSManPluginAuthzOperationComplete(WSMAN_SENDER_DETAILS * senderDetails,DWORD flags,PVOID userAuthorizationContext,DWORD errorCode,PCWSTR extendedErrorInformation) DWORD WINAPI <wsman.h>
WSManPluginAuthzQueryQuotaComplete(WSMAN_SENDER_DETAILS * senderDetails,DWORD flags,WSMAN_AUTHZ_QUOTA * quota,DWORD errorCode,PCWSTR extendedErrorInformation) DWORD WINAPI <wsman.h>
WSManPluginAuthzUserComplete(WSMAN_SENDER_DETAILS * senderDetails,DWORD flags,PVOID userAuthorizationContext,HANDLE impersonationToken,WINBOOL userIsAdministrator,DWORD errorCode,PCWSTR extendedErrorInformation) DWORD WINAPI <wsman.h>
WSManPluginFreeRequestDetails(WSMAN_PLUGIN_REQUEST * requestDetails) DWORD WINAPI <wsman.h>
WSManPluginGetConfiguration(PVOID pluginContext,DWORD flags,WSMAN_DATA * data) DWORD WINAPI <wsman.h>
WSManPluginGetOperationParameters(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,WSMAN_DATA * data) DWORD WINAPI <wsman.h>
WSManPluginOperationComplete(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,DWORD errorCode,PCWSTR extendedInformation) DWORD WINAPI <wsman.h>
WSManPluginReceiveResult(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PCWSTR stream,WSMAN_DATA * streamResult,PCWSTR commandState,DWORD exitCode) DWORD WINAPI <wsman.h>
WSManPluginReportCompletion(PVOID pluginContext,DWORD flags) DWORD WINAPI <wsman.h>
WSManPluginReportContext(WSMAN_PLUGIN_REQUEST * requestDetails,DWORD flags,PVOID context) DWORD WINAPI <wsman.h>
WSManReceiveShellOutput(WSMAN_SHELL_HANDLE shell,WSMAN_COMMAND_HANDLE command,DWORD flags,WSMAN_STREAM_ID_SET * desiredStreamSet,WSMAN_SHELL_ASYNC * async,WSMAN_OPERATION_HANDLE * receiveOperation) void WINAPI <wsman.h>
WSManReconnectShell(WSMAN_SHELL_HANDLE shell,DWORD flags,WSMAN_SHELL_ASYNC * async) void WINAPI <wsman.h>
WSManReconnectShellCommand(WSMAN_COMMAND_HANDLE commandHandle,DWORD flags,WSMAN_SHELL_ASYNC * async) void WINAPI <wsman.h>
WSManRunShellCommand(WSMAN_SHELL_HANDLE shell,DWORD flags,PCWSTR commandLine,WSMAN_COMMAND_ARG_SET * args,WSMAN_OPTION_SET * options,WSMAN_SHELL_ASYNC * async,WSMAN_COMMAND_HANDLE * command) void WINAPI <wsman.h>
WSManRunShellCommandEx(WSMAN_SHELL_HANDLE shell,DWORD flags,PCWSTR commandId,PCWSTR commandLine,WSMAN_COMMAND_ARG_SET * args,WSMAN_OPTION_SET * options,WSMAN_SHELL_ASYNC * async,WSMAN_COMMAND_HANDLE * command) void WINAPI <wsman.h>
WSManSendShellInput(WSMAN_SHELL_HANDLE shell,WSMAN_COMMAND_HANDLE command,DWORD flags,PCWSTR streamId,WSMAN_DATA * streamData,WINBOOL endOfStream,WSMAN_SHELL_ASYNC * async,WSMAN_OPERATION_HANDLE * sendOperation) void WINAPI <wsman.h>
WSManSetSessionOption(WSMAN_SESSION_HANDLE session,WSManSessionOption option,WSMAN_DATA * data) DWORD WINAPI <wsman.h>
WSManSignalShell(WSMAN_SHELL_HANDLE shell,WSMAN_COMMAND_HANDLE command,DWORD flags,PCWSTR code,WSMAN_SHELL_ASYNC * async,WSMAN_OPERATION_HANDLE * signalOperation) void WINAPI <wsman.h>
WSPDeregisterMemory(IN SOCKET s,IN HANDLE Handle,OUT LPINT lpErrno)<ws2san.h>
WSPDeregisterRdmaMemory(IN SOCKET s,IN LPVOID lpRdmaBufferDescriptor,IN DWORD dwDescriptorLength,OUT LPINT lpErrno)<ws2san.h>
WSPIAPI_PFREEADDRINFO(struct addrinfo * ai)typedef void<wspiapi.h>
WSPIAPI_PGETADDRINFO(const char * nodename,const char * servname,const struct addrinfo * hints,struct addrinfo ** res)typedef int<wspiapi.h>
WSPIAPI_PGETNAMEINFO(const struct sockaddr * sa,socklen_t salen,char * host,size_t hostlen,char * serv,size_t servlen,int flags)typedef int<wspiapi.h>
WspiapiClone(WORD wPort,struct addrinfo * ptResult) int WINAPI <wspiapi.h>
WspiapiFree(p)<wspiapi.h>
WspiapiFreeAddrInfo(struct addrinfo * ai) void WINAPI <wspiapi.h>
WspiapiGetAddrInfo(const char * nodename,const char * servname,const struct addrinfo * hints,struct addrinfo ** res) int WINAPI <wspiapi.h>
WspiapiGetNameInfo(const struct sockaddr * sa,socklen_t salen,char * host,size_t hostlen,char * serv,size_t servlen,int flags) int WINAPI <wspiapi.h>
WspiapiLegacyFreeAddrInfo(struct addrinfo * ptHead) void WINAPI <wspiapi.h>
WspiapiLegacyGetAddrInfo(const char * pszNodeName,const char * pszServiceName,const struct addrinfo * ptHints,struct addrinfo ** pptResult) int WINAPI <wspiapi.h>
WspiapiLegacyGetNameInfo(const struct sockaddr * ptSocketAddress,socklen_t tSocketLength,char * pszNodeName,size_t tNodeLength,char * pszServiceName,size_t tServiceLength,int iFlags) int WINAPI <wspiapi.h>
WspiapiLoad(WORD wFunction) FARPROC WINAPI <wspiapi.h>
WspiapiLookupNode(const char * pszNodeName,int iSocketType,int iProtocol,WORD wPort,WINBOOL bAI_CANONNAME,struct addrinfo ** pptResult) int WINAPI <wspiapi.h>
WspiapiMalloc(tSize)<wspiapi.h>
WspiapiNewAddrInfo(int iSocketType,int iProtocol,WORD wPort,DWORD dwAddress) struct addrinfo<wspiapi.h>
WspiapiParseV4Address(const char * pszAddress,PDWORD pdwAddress) <wspiapi.h>
WspiapiQueryDNS(const char * pszNodeName,int iSocketType,int iProtocol,WORD wPort,char pszAlias[NI_MAXHOST],struct addrinfo ** pptResult) int WINAPI <wspiapi.h>
WspiapiStrdup(const char * pszString) char<wspiapi.h>
WspiapiSwap(a,b,c)<wspiapi.h>
WSPMemoryRegistrationCacheCallback(IN PVOID lpvAddress,IN SIZE_T Size,OUT LPINT lpErrno)<ws2san.h>
WSPRdmaRead(IN SOCKET s,IN LPWSABUFEX lpBuffers,IN DWORD dwBufferCount,IN LPVOID lpTargetBufferDescriptor,IN DWORD dwTargetDescriptorLength,IN DWORD dwTargetBufferOffset,OUT LPDWORD lpdwNumberOfBytesRead,IN DWORD dwFlags,IN LPWSAOVERLAPPED lpOverlapped OPTIONAL,IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine OPTIONAL,IN LPWSATHREADID lpThreadId,OUT LPINT lpErrno)<ws2san.h>
WSPRdmaWrite(IN SOCKET s,IN LPWSABUFEX lpBuffers,IN DWORD dwBufferCount,IN LPVOID lpTargetBufferDescriptor,IN DWORD dwTargetDescriptorLength,IN DWORD dwTargetBufferOffset,OUT LPDWORD lpdwNumberOfBytesWritten,IN DWORD dwFlags,IN LPWSAOVERLAPPED lpOverlapped OPTIONAL,IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine OPTIONAL,IN LPWSATHREADID lpThreadId,OUT LPINT lpErrno)<ws2san.h>
WSPRegisterMemory(IN SOCKET s,IN PVOID lpBuffer,IN DWORD dwBufferLength,IN DWORD dwFlags,OUT LPINT lpErrno)<ws2san.h>
WSPRegisterRdmaMemory(IN SOCKET s,IN PVOID lpBuffer,IN DWORD dwBufferLength,IN DWORD dwFlags,OUT LPVOID lpRdmaBufferDescriptor,IN OUT LPDWORD lpdwDescriptorLength,OUT LPINT lpErrno)<ws2san.h>
wsprintf(LPSTR,LPCSTR,...)<winuser.h>
wsprintfA(LPSTR,LPCSTR,...) WINUSERAPI int WINAPIV <winuser.h>
wsprintfW(LPWSTR,LPCWSTR,...) WINUSERAPI int WINAPIV <winuser.h>
WSPStartup(WORD wVersionRequested,LPWSPDATA lpWSPData,LPWSAPROTOCOL_INFOW lpProtocolInfo,WSPUPCALLTABLE UpcallTable,LPWSPPROC_TABLE lpProcTable) int WSPAPI <ws2spi.h>
WSPStartupEx(IN WORD wVersionRequested,OUT LPWSPDATA lpWSPData,IN LPWSAPROTOCOL_INFOW lpProtocolInfo,IN LPWSPUPCALLTABLEEX lpUpcallTable,OUT LPWSPPROC_TABLE lpProcTable)<ws2san.h>
WSTR_ALIGNED(s)<stralign.h>
WSTR_ALIGNED_STACK_COPY(d,s)<stralign.h>
WSyvToKanji(syv)<penwin.h>
WSZARRAYSIZE(a)<celib.h>
wszDeviceInstancePath(2 * MAX_PATH) WCHAR <usbstorioctl.h>
wszOID_CERT_PROP_ID(PropId)<wincrypt.h>
WT_SET_MAX_THREADPOOL_THREADS()()()
WT_SET_MAX_THREADPOOL_THREADS(Flags, Limit)<winnt.h>
WTFree(PVOID ptr) VOID WINAPI <rtutils.h>
WTFreeEvent(PWT_EVENT_ENTRY peeEvent) VOID WINAPI <rtutils.h>
WTFreeTimer(PWT_TIMER_ENTRY pteTimer) VOID WINAPI <rtutils.h>
WTHelperCertCheckValidSignature(CRYPT_PROVIDER_DATA * pProvData) extern HRESULT WINAPI <wintrust.h>
WTHelperCertIsSelfSigned(DWORD dwEncoding,CERT_INFO * pCert) extern WINBOOL WINAPI <wintrust.h>
WTHelperGetProvCertFromChain(CRYPT_PROVIDER_SGNR * pSgnr,DWORD idxCert) extern CRYPT_PROVIDER_CERT<wintrust.h>
WTHelperGetProvPrivateDataFromChain(CRYPT_PROVIDER_DATA * pProvData,GUID * pgProviderID) extern CRYPT_PROVIDER_PRIVDATA<wintrust.h>
WTHelperGetProvSignerFromChain(CRYPT_PROVIDER_DATA * pProvData,DWORD idxSigner,WINBOOL fCounterSigner,DWORD idxCounterSigner) extern CRYPT_PROVIDER_SGNR<wintrust.h>
WTHelperProvDataFromStateData(HANDLE hStateData) extern CRYPT_PROVIDER_DATA<wintrust.h>
WTSCloseServer(HANDLE hServer) VOID WINAPI <wtsapi32.h>
WTSConnectSessionW(ULONG LogonId,ULONG TargetLogonId,PWSTR pPassword,WINBOOL bWait)WINBOOL WINAPI <wtsapi32.h>
WTSDisconnectSession(HANDLE hServer,DWORD SessionId,WINBOOL bWait) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateProcesses(HANDLE hServer,DWORD Reserved,DWORD Version,PWTS_PROCESS_INFOA * ppProcessInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateProcessesA(HANDLE hServer,DWORD Reserved,DWORD Version,PWTS_PROCESS_INFOA * ppProcessInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateProcessesW(HANDLE hServer,DWORD Reserved,DWORD Version,PWTS_PROCESS_INFOW * ppProcessInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateServers(LPSTR pDomainName,DWORD Reserved,DWORD Version,PWTS_SERVER_INFOA * ppServerInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateServersA(LPSTR pDomainName,DWORD Reserved,DWORD Version,PWTS_SERVER_INFOA * ppServerInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateServersW(LPWSTR pDomainName,DWORD Reserved,DWORD Version,PWTS_SERVER_INFOW * ppServerInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateSessions(HANDLE hServer,DWORD Reserved,DWORD Version,PWTS_SESSION_INFOA * ppSessionInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateSessionsA(HANDLE hServer,DWORD Reserved,DWORD Version,PWTS_SESSION_INFOA * ppSessionInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSEnumerateSessionsW(HANDLE hServer,DWORD Reserved,DWORD Version,PWTS_SESSION_INFOW * ppSessionInfo,DWORD * pCount) WINBOOL WINAPI <wtsapi32.h>
WTSFreeMemory(PVOID pMemory) VOID WINAPI <wtsapi32.h>
WTSGetActiveConsoleSessionId(VOID) WINBASEAPI DWORD WINAPI <winbase.h>
WTSLogoffSession(HANDLE hServer,DWORD SessionId,WINBOOL bWait) WINBOOL WINAPI <wtsapi32.h>
WTSOpenServer(LPSTR pServerName) HANDLE WINAPI <wtsapi32.h>
WTSOpenServerA(LPSTR pServerName) HANDLE WINAPI <wtsapi32.h>
WTSOpenServerW(LPWSTR pServerName) HANDLE WINAPI <wtsapi32.h>
WTSQuerySessionInformation(HANDLE hServer,DWORD SessionId,WTS_INFO_CLASS WTSInfoClass,LPSTR * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSQuerySessionInformationA(HANDLE hServer,DWORD SessionId,WTS_INFO_CLASS WTSInfoClass,LPSTR * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSQuerySessionInformationW(HANDLE hServer,DWORD SessionId,WTS_INFO_CLASS WTSInfoClass,LPWSTR * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSQueryUserConfig(LPSTR pServerName,LPSTR pUserName,WTS_CONFIG_CLASS WTSConfigClass,LPSTR * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSQueryUserConfigA(LPSTR pServerName,LPSTR pUserName,WTS_CONFIG_CLASS WTSConfigClass,LPSTR * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSQueryUserConfigW(LPWSTR pServerName,LPWSTR pUserName,WTS_CONFIG_CLASS WTSConfigClass,LPWSTR * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSQueryUserToken(ULONG SessionId,PHANDLE phToken) WINBOOL WINAPI <wtsapi32.h>
WTSRegisterSessionNotification(HWND hWnd,DWORD dwFlags) WINBOOL WINAPI <wtsapi32.h>
WTSRegisterSessionNotificationEx(HANDLE hServer,HWND hWnd,DWORD dwFlags)WINBOOL <wtsapi32.h>
WTSSendMessage(HANDLE hServer,DWORD SessionId,LPSTR pTitle,DWORD TitleLength,LPSTR pMessage,DWORD MessageLength,DWORD Style,DWORD Timeout,DWORD * pResponse,WINBOOL bWait) WINBOOL WINAPI <wtsapi32.h>
WTSSendMessageA(HANDLE hServer,DWORD SessionId,LPSTR pTitle,DWORD TitleLength,LPSTR pMessage,DWORD MessageLength,DWORD Style,DWORD Timeout,DWORD * pResponse,WINBOOL bWait) WINBOOL WINAPI <wtsapi32.h>
WTSSendMessageW(HANDLE hServer,DWORD SessionId,LPWSTR pTitle,DWORD TitleLength,LPWSTR pMessage,DWORD MessageLength,DWORD Style,DWORD Timeout,DWORD * pResponse,WINBOOL bWait) WINBOOL WINAPI <wtsapi32.h>
WTSSetUserConfig(LPSTR pServerName,LPSTR pUserName,WTS_CONFIG_CLASS WTSConfigClass,LPSTR pBuffer,DWORD DataLength) WINBOOL WINAPI <wtsapi32.h>
WTSSetUserConfigA(LPSTR pServerName,LPSTR pUserName,WTS_CONFIG_CLASS WTSConfigClass,LPSTR pBuffer,DWORD DataLength) WINBOOL WINAPI <wtsapi32.h>
WTSSetUserConfigW(LPWSTR pServerName,LPWSTR pUserName,WTS_CONFIG_CLASS WTSConfigClass,LPWSTR pBuffer,DWORD DataLength) WINBOOL WINAPI <wtsapi32.h>
WTSShutdownSystem(HANDLE hServer,DWORD ShutdownFlag) WINBOOL WINAPI <wtsapi32.h>
WTSStartRemoteControlSession(LPSTR pTargetServerName,ULONG TargetLogonId,BYTE HotkeyVk,USHORT HotkeyModifiers)WINBOOL WINAPI <wtsapi32.h>
WTSStartRemoteControlSessionA(LPSTR pTargetServerName,ULONG TargetLogonId,BYTE HotkeyVk,USHORT HotkeyModifiers)WINBOOL WINAPI <wtsapi32.h>
WTSStartRemoteControlSessionW(LPWSTR pTargetServerName,ULONG TargetLogonId,BYTE HotkeyVk,USHORT HotkeyModifiers)WINBOOL WINAPI <wtsapi32.h>
WTSStopRemoteControlSession(ULONG LogonId)WINBOOL WINAPI <wtsapi32.h>
WTSTerminateProcess(HANDLE hServer,DWORD ProcessId,DWORD ExitCode) WINBOOL WINAPI <wtsapi32.h>
WTSUnRegisterSessionNotification(HWND hWnd) WINBOOL WINAPI <wtsapi32.h>
WTSUnRegisterSessionNotificationEx(HANDLE hServer,HWND hWnd)WINBOOL WINAPI <wtsapi32.h>
WTSVirtualChannelClose(HANDLE hChannelHandle) WINBOOL WINAPI <wtsapi32.h>
WTSVirtualChannelOpen(HANDLE hServer,DWORD SessionId,LPSTR pVirtualName) HANDLE WINAPI <wtsapi32.h>
WTSVirtualChannelOpenEx(DWORD SessionId,LPSTR pVirtualName,DWORD flags)HANDLE WINAPI <wtsapi32.h>
WTSVirtualChannelPurgeInput(HANDLE hChannelHandle) WINBOOL WINAPI <wtsapi32.h>
WTSVirtualChannelPurgeOutput(HANDLE hChannelHandle) WINBOOL WINAPI <wtsapi32.h>
WTSVirtualChannelQuery(HANDLE hChannelHandle,WTS_VIRTUAL_CLASS,PVOID * ppBuffer,DWORD * pBytesReturned) WINBOOL WINAPI <wtsapi32.h>
WTSVirtualChannelRead(HANDLE hChannelHandle,ULONG TimeOut,PCHAR Buffer,ULONG BufferSize,PULONG pBytesRead) WINBOOL WINAPI <wtsapi32.h>
WTSVirtualChannelWrite(HANDLE hChannelHandle,PCHAR Buffer,ULONG Length,PULONG pBytesWritten) WINBOOL WINAPI <wtsapi32.h>
WTSWaitSystemEvent(HANDLE hServer,DWORD EventMask,DWORD * pEventFlags) WINBOOL WINAPI <wtsapi32.h>
wvnsprintf(LPSTR lpOut,int cchLimitIn,LPCSTR lpFmt,va_list arglist)<shlwapi.h>
wvnsprintfA(LPSTR lpOut,int cchLimitIn,LPCSTR lpFmt,va_list arglist) LWSTDAPI_<shlwapi.h>
wvnsprintfW(LPWSTR lpOut,int cchLimitIn,LPCWSTR lpFmt,va_list arglist) LWSTDAPI_<shlwapi.h>
wvsprintfW(LPWSTR,LPCWSTR,va_list arglist) WINUSERAPI int WINAPI <winuser.h>
WVT_IS_CBSTRUCT_GT_MEMBEROFFSET(structtypedef,structpassedsize,member)<wintrust.h>
WVT_ISINSTRUCT(structtypedef,structpassedsize,member)<wintrust.h>
WVT_OFFSETOF(t,f)<wintrust.h>
wWinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPWSTR lpCmdLine,int nShowCmd) int WINAPI <winbase.h>
XA_CLOSE_EPT(char *,int,__LONG32)typedef int<xa.h>
XA_COMMIT_EPT(XID *,int,__LONG32)typedef int<xa.h>
XA_COMPLETE_EPT(int *,int *,int,__LONG32)typedef int<xa.h>
XA_END_EPT(XID *,int,__LONG32)typedef int<xa.h>
XA_FORGET_EPT(XID *,int,__LONG32)typedef int<xa.h>
XA_OPEN_EPT(char *,int,__LONG32)typedef int<xa.h>
XA_PREPARE_EPT(XID *,int,__LONG32)typedef int<xa.h>
XA_RECOVER_EPT(XID *,__LONG32,int,__LONG32)typedef int<xa.h>
XA_ROLLBACK_EPT(XID *,int,__LONG32)typedef int<xa.h>
XA_START_EPT(XID *,int,__LONG32)typedef int<xa.h>
xa_switch_t(char * __MIDL_0004,int __MIDL_0005,__LONG32 __MIDL_0006)int<xa.h>
xa_switch_t(char * __MIDL_0008,int __MIDL_0009,__LONG32 __MIDL_0010)int<xa.h>
xa_switch_t(char *,int,__LONG32) int<xa.h>
xa_switch_t(int * __MIDL_0041,int * __MIDL_0042,int __MIDL_0043,__LONG32 __MIDL_0044)int<xa.h>
xa_switch_t(int *,int *,int,__LONG32) int<xa.h>
xa_switch_t(XID * __MIDL_0012,int __MIDL_0013,__LONG32 __MIDL_0014)int<xa.h>
xa_switch_t(XID * __MIDL_0016,int __MIDL_0017,__LONG32 __MIDL_0018)int<xa.h>
xa_switch_t(XID * __MIDL_0020,int __MIDL_0021,__LONG32 __MIDL_0022)int<xa.h>
xa_switch_t(XID * __MIDL_0024,int __MIDL_0025,__LONG32 __MIDL_0026)int<xa.h>
xa_switch_t(XID * __MIDL_0028,int __MIDL_0029,__LONG32 __MIDL_0030)int<xa.h>
xa_switch_t(XID * __MIDL_0032,__LONG32 __MIDL_0033,int __MIDL_0034,__LONG32 __MIDL_0035)int<xa.h>
xa_switch_t(XID * __MIDL_0037,int __MIDL_0038,__LONG32 __MIDL_0039)int<xa.h>
xa_switch_t(XID *,__LONG32,int,__LONG32) int<xa.h>
xa_switch_t(XID *,int,__LONG32) int<xa.h>
XACTTOMSG(dwXact)<txdtc.h>
XARMCreate(char * pszDSN,char * pszClientDll,DWORD * pdwRMCookie)virtual HRESULT WINAPI <oletx2xa.h>
XCHG(x)<netmon.h>
XCN_CERT_DECIPHER_ONLY_KEY_USAGE( 0x80 << 8 )<certenroll.h>
XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION( 0x4 | 0x8 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 ) | 0x10 )<certenroll.h>
XcvClosePort(HANDLE hXcv)<winsplp.h>
XcvDataPort(HANDLE hXcv,LPCWSTR pszDataName,PBYTE pInputData,DWORD cbInputData,PBYTE pOutputData,DWORD cbOutputData,PDWORD pcbOutputNeeded)<winsplp.h>
XcvDataW(HANDLE hXcv,PCWSTR pszDataName,PBYTE pInputData,DWORD cbInputData,PBYTE pOutputData,DWORD cbOutputData,PDWORD pcbOutputNeeded,PDWORD pdwStatus) WINBOOL WINAPI <winspool.h>
XcvOpenPort(LPCWSTR pszObject,ACCESS_MASK GrantedAccess,PHANDLE phXcv)<winsplp.h>
xEnumDisplayDevices(PVOID Unused,DWORD iDevNum,PDISPLAY_DEVICE lpDisplayDevice,DWORD flags) WINBOOL WINAPI <multimon.h>
xEnumDisplayMonitors(HDC hdcOptionalForPainting,LPCRECT lprcEnumMonitorsThatIntersect,MONITORENUMPROC lpfnEnumProc,LPARAM dwData) WINBOOL WINAPI <multimon.h>
XFORMOBJ_bApplyXform(XFORMOBJ * pxo,ULONG iMode,ULONG cPoints,PVOID pvIn,PVOID pvOut)<winddi.h>
XFORMOBJ_iGetFloatObjXform(XFORMOBJ * pxo,FLOATOBJ_XFORM * pxfo)<winddi.h>
XFORMOBJ_iGetXform(XFORMOBJ * pxo,XFORML * pxform)<winddi.h>
xGetMonitorInfo(HMONITOR hmon,LPMONITORINFO pmi) WINBOOL WINAPI <multimon.h>
xGetSystemMetrics(int n) int WINAPI <multimon.h>
XInputEnable(WINBOOL)void WINAPI <xinput.h>
XInputGetBatteryInformation(DWORD,BYTE,XINPUT_BATTERY_INFORMATION *)DWORD WINAPI <xinput.h>
XInputGetCapabilities(DWORD,DWORD,XINPUT_CAPABILITIES *)DWORD WINAPI <xinput.h>
XInputGetDSoundAudioDeviceGuids(DWORD,GUID *,GUID *)DWORD WINAPI <xinput.h>
XInputGetKeystroke(DWORD,DWORD,PXINPUT_KEYSTROKE)DWORD WINAPI <xinput.h>
XInputGetState(DWORD,XINPUT_STATE *)DWORD WINAPI <xinput.h>
XInputGetStateEx(DWORD,XINPUT_STATE_EX *)DWORD WINAPI <xinput.h>
XInputSetState(DWORD,XINPUT_VIBRATION *)DWORD WINAPI <xinput.h>
XLATEOBJ_cGetPalette(XLATEOBJ * pxlo,ULONG iPal,ULONG cPal,ULONG * pPal)<winddi.h>
XLATEOBJ_hGetColorTransform(XLATEOBJ * pxlo)<winddi.h>
XLATEOBJ_iXlate(XLATEOBJ * pxlo,ULONG iColor)<winddi.h>
XLATEOBJ_piVector(XLATEOBJ * pxlo)<winddi.h>
XMIT_HELPER_ROUTINE(PMIDL_STUB_MESSAGE) typedef void<rpcndr.h>
xMonitorFromPoint(POINT pt,DWORD flags) HMONITOR WINAPI <multimon.h>
xMonitorFromRect(LPCRECT pr,DWORD flags) HMONITOR WINAPI <multimon.h>
xMonitorFromWindow(HWND hw,DWORD flags) HMONITOR WINAPI <multimon.h>
Xor(const GraphicsPath * path)__inline__ Status Region::<gdiplusimpl.h>
Xor(const Rect & rect)__inline__ Status Region::<gdiplusimpl.h>
Xor(const RectF & rect)__inline__ Status Region::<gdiplusimpl.h>
Xor(const Region * region)__inline__ Status Region::<gdiplusimpl.h>
XorRgn(hrgnResult,hrgnA,hrgnB)<windowsx.h>
XPPROVIDERINIT(HINSTANCE hInstance,LPMALLOC lpMalloc,LPALLOCATEBUFFER lpAllocateBuffer,LPALLOCATEMORE lpAllocateMore,LPFREEBUFFER lpFreeBuffer,ULONG ulFlags,ULONG ulMAPIVer,ULONG * lpulProviderVer,LPXPPROVIDER * lppXPProvider) typedef HRESULT<mapispi.h>
YIELDPROC(MCIDEVICEID mciId,DWORD dwYieldData) typedef UINT<mmsystem.h>
YieldProcessor() <winnt.h>
ZeroMemory(Destination, Length)<minwinbase.h>
ZombifyActCtx(HANDLE hActCtx) WINBASEAPI WINBOOL WINAPI <winbase.h>
ZwAccessCheckAndAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId,IN PUNICODE_STRING ObjectTypeName,IN PUNICODE_STRING ObjectName,IN PSECURITY_DESCRIPTOR SecurityDescriptor,IN ACCESS_MASK DesiredAccess,IN PGENERIC_MAPPING GenericMapping,IN BOOLEAN ObjectCreation,OUT PACCESS_MASK GrantedAccess,OUT PBOOLEAN AccessStatus,OUT PBOOLEAN GenerateOnClose)<ntifs.h>
ZwAdjustPrivilegesToken(IN HANDLE TokenHandle,IN BOOLEAN DisableAllPrivileges,IN PTOKEN_PRIVILEGES NewState,IN ULONG BufferLength,OUT PTOKEN_PRIVILEGES PreviousState OPTIONAL,OUT PULONG ReturnLength)<ntifs.h>
ZwAlertThread(IN HANDLE ThreadHandle)<ntifs.h>
ZwAllocateLocallyUniqueId(OUT PLUID Luid)<ntddk.h>
ZwAllocateVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN ULONG_PTR ZeroBits,IN OUT PSIZE_T RegionSize,IN ULONG AllocationType,IN ULONG Protect)<ntifs.h>
ZwCancelIoFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock)<ntifs.h>
ZwCancelTimer(IN HANDLE TimerHandle,OUT PBOOLEAN CurrentState OPTIONAL)<ntddk.h>
ZwClearEvent(IN HANDLE EventHandle)<ntifs.h>
ZwClose(IN HANDLE Handle)<wdm.h>
ZwCloseObjectAuditAlarm(IN PUNICODE_STRING SubsystemName,IN PVOID HandleId,IN BOOLEAN GenerateOnClose)<ntifs.h>
ZwCommitComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwCommitEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwCommitTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Wait)<wdm.h>
ZwCreateDirectoryObject(OUT PHANDLE DirectoryHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<wdm.h>
ZwCreateEnlistment(OUT PHANDLE EnlistmentHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE ResourceManagerHandle,IN HANDLE TransactionHandle,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN NOTIFICATION_MASK NotificationMask,IN PVOID EnlistmentKey OPTIONAL)<wdm.h>
ZwCreateEvent(OUT PHANDLE EventHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN EVENT_TYPE EventType,IN BOOLEAN InitialState)<ntifs.h>
ZwCreateFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER AllocationSize OPTIONAL,IN ULONG FileAttributes,IN ULONG ShareAccess,IN ULONG CreateDisposition,IN ULONG CreateOptions,IN PVOID EaBuffer OPTIONAL,IN ULONG EaLength)<wdm.h>
ZwCreateKey(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG TitleIndex,IN PUNICODE_STRING Class OPTIONAL,IN ULONG CreateOptions,OUT PULONG Disposition OPTIONAL)<wdm.h>
ZwCreateKeyTransacted(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG TitleIndex,IN PUNICODE_STRING Class OPTIONAL,IN ULONG CreateOptions,IN HANDLE TransactionHandle,OUT PULONG Disposition OPTIONAL)<wdm.h>
ZwCreateResourceManager(OUT PHANDLE ResourceManagerHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE TmHandle,IN LPGUID ResourceManagerGuid OPTIONAL,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN PUNICODE_STRING Description OPTIONAL)<wdm.h>
ZwCreateSection(OUT PHANDLE SectionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PLARGE_INTEGER MaximumSize OPTIONAL,IN ULONG SectionPageProtection,IN ULONG AllocationAttributes,IN HANDLE FileHandle OPTIONAL)<wdm.h>
ZwCreateSymbolicLinkObject(OUT PHANDLE SymbolicLinkHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PUNICODE_STRING TargetName)<ntifs.h>
ZwCreateTimer(OUT PHANDLE TimerHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN TIMER_TYPE TimerType)<ntddk.h>
ZwCreateTransaction(OUT PHANDLE TransactionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN LPGUID Uow OPTIONAL,IN HANDLE TmHandle OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN ULONG IsolationLevel OPTIONAL,IN ULONG IsolationFlags OPTIONAL,IN PLARGE_INTEGER Timeout OPTIONAL,IN PUNICODE_STRING Description OPTIONAL)<wdm.h>
ZwCreateTransactionManager(OUT PHANDLE TmHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PUNICODE_STRING LogFileName OPTIONAL,IN ULONG CreateOptions OPTIONAL,IN ULONG CommitStrength OPTIONAL)<wdm.h>
ZwCurrentProcess() <wdm.h>
ZwCurrentThread()<wdm.h>
ZwDeleteFile(IN POBJECT_ATTRIBUTES ObjectAttributes)<ntifs.h>
ZwDeleteKey(IN HANDLE KeyHandle)<wdm.h>
ZwDeleteValueKey(IN HANDLE KeyHandle,IN PUNICODE_STRING ValueName)<wdm.h>
ZwDeviceIoControlFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG IoControlCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength)<ntddk.h>
ZwDisplayString(IN PUNICODE_STRING String)<ntddk.h>
ZwDuplicateObject(IN HANDLE SourceProcessHandle,IN HANDLE SourceHandle,IN HANDLE TargetProcessHandle OPTIONAL,OUT PHANDLE TargetHandle OPTIONAL,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,IN ULONG Options)<ntifs.h>
ZwDuplicateToken(IN HANDLE ExistingTokenHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN BOOLEAN EffectiveOnly,IN TOKEN_TYPE TokenType,OUT PHANDLE NewTokenHandle)<ntifs.h>
ZwEnumerateKey(IN HANDLE KeyHandle,IN ULONG Index,IN KEY_INFORMATION_CLASS KeyInformationClass,OUT PVOID KeyInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength)<wdm.h>
ZwEnumerateTransactionObject(IN HANDLE RootObjectHandle OPTIONAL,IN KTMOBJECT_TYPE QueryType,IN OUT PKTMOBJECT_CURSOR ObjectCursor,IN ULONG ObjectCursorLength,OUT PULONG ReturnLength)<wdm.h>
ZwEnumerateValueKey(IN HANDLE KeyHandle,IN ULONG Index,IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,OUT PVOID KeyValueInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength)<wdm.h>
ZwFlushBuffersFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock)<ntifs.h>
ZwFlushInstructionCache(IN HANDLE ProcessHandle,IN PVOID BaseAddress OPTIONAL,IN ULONG FlushSize)<ntifs.h>
ZwFlushKey(IN HANDLE KeyHandle)<wdm.h>
ZwFlushVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN OUT PSIZE_T RegionSize,OUT PIO_STATUS_BLOCK IoStatusBlock)<ntifs.h>
ZwFreeVirtualMemory(IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN OUT PSIZE_T RegionSize,IN ULONG FreeType)<ntifs.h>
ZwFsControlFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG FsControlCode,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength)<ntifs.h>
ZwGetNotificationResourceManager(IN HANDLE ResourceManagerHandle,OUT PTRANSACTION_NOTIFICATION TransactionNotification,IN ULONG NotificationLength,IN PLARGE_INTEGER Timeout,IN PULONG ReturnLength OPTIONAL,IN ULONG Asynchronous,IN ULONG_PTR AsynchronousContext OPTIONAL)<wdm.h>
ZwInitiatePowerAction(IN POWER_ACTION SystemAction,IN SYSTEM_POWER_STATE MinSystemState,IN ULONG Flags,IN BOOLEAN Asynchronous)<ntifs.h>
ZwLoadDriver(IN PUNICODE_STRING DriverServiceName)<wdm.h>
ZwLoadKey(IN POBJECT_ATTRIBUTES KeyObjectAttributes,IN POBJECT_ATTRIBUTES FileObjectAttributes)<ntifs.h>
ZwLockFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER ByteOffset,IN PLARGE_INTEGER Length,IN ULONG Key,IN BOOLEAN FailImmediately,IN BOOLEAN ExclusiveLock)<ntifs.h>
ZwMakeTemporaryObject(IN HANDLE Handle)<wdm.h>
ZwMapViewOfSection(IN HANDLE SectionHandle,IN HANDLE ProcessHandle,IN OUT PVOID * BaseAddress,IN ULONG_PTR ZeroBits,IN SIZE_T CommitSize,IN OUT PLARGE_INTEGER SectionOffset OPTIONAL,IN OUT PSIZE_T ViewSize,IN SECTION_INHERIT InheritDisposition,IN ULONG AllocationType,IN ULONG Protect)<wdm.h>
ZwNotifyChangeKey(IN HANDLE KeyHandle,IN HANDLE EventHandle OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG NotifyFilter,IN BOOLEAN WatchSubtree,OUT PVOID Buffer,IN ULONG BufferLength,IN BOOLEAN Asynchronous)<ntifs.h>
ZwNotifyChangeMultipleKeys(IN HANDLE MasterKeyHandle,IN ULONG Count OPTIONAL,IN OBJECT_ATTRIBUTES SubordinateObjects[]OPTIONAL,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG CompletionFilter,IN BOOLEAN WatchTree,OUT PVOID Buffer OPTIONAL,IN ULONG BufferSize,IN BOOLEAN Asynchronous)<wdm.h>
ZwOpenDirectoryObject(OUT PHANDLE DirectoryHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<ntifs.h>
ZwOpenEnlistment(OUT PHANDLE EnlistmentHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE RmHandle,IN LPGUID EnlistmentGuid,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL)<wdm.h>
ZwOpenEvent(OUT PHANDLE EventHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<wdm.h>
ZwOpenFile(OUT PHANDLE FileHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PIO_STATUS_BLOCK IoStatusBlock,IN ULONG ShareAccess,IN ULONG OpenOptions)<wdm.h>
ZwOpenKey(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<wdm.h>
ZwOpenKeyEx(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG OpenOptions)<wdm.h>
ZwOpenKeyTransacted(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN HANDLE TransactionHandle)<wdm.h>
ZwOpenKeyTransactedEx(OUT PHANDLE KeyHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN ULONG OpenOptions,IN HANDLE TransactionHandle)<wdm.h>
ZwOpenProcess(OUT PHANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PCLIENT_ID ClientId OPTIONAL)<ntddk.h>
ZwOpenProcessToken(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,OUT PHANDLE TokenHandle)<ntifs.h>
ZwOpenProcessTokenEx(IN HANDLE ProcessHandle,IN ACCESS_MASK DesiredAccess,IN ULONG HandleAttributes,OUT PHANDLE TokenHandle)<ntifs.h>
ZwOpenResourceManager(OUT PHANDLE ResourceManagerHandle,IN ACCESS_MASK DesiredAccess,IN HANDLE TmHandle,IN LPGUID ResourceManagerGuid,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL)<wdm.h>
ZwOpenSection(OUT PHANDLE SectionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<wdm.h>
ZwOpenSymbolicLinkObject(OUT PHANDLE LinkHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<wdm.h>
ZwOpenThread(OUT PHANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes,IN PCLIENT_ID ClientId)<ntifs.h>
ZwOpenThreadToken(IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN BOOLEAN OpenAsSelf,OUT PHANDLE TokenHandle)<ntifs.h>
ZwOpenThreadTokenEx(IN HANDLE ThreadHandle,IN ACCESS_MASK DesiredAccess,IN BOOLEAN OpenAsSelf,IN ULONG HandleAttributes,OUT PHANDLE TokenHandle)<ntifs.h>
ZwOpenTimer(OUT PHANDLE TimerHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes)<ntddk.h>
ZwOpenTransaction(OUT PHANDLE TransactionHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN LPGUID Uow,IN HANDLE TmHandle OPTIONAL)<wdm.h>
ZwOpenTransactionManager(OUT PHANDLE TmHandle,IN ACCESS_MASK DesiredAccess,IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,IN PUNICODE_STRING LogFileName OPTIONAL,IN LPGUID TmIdentity OPTIONAL,IN ULONG OpenOptions OPTIONAL)<wdm.h>
ZwPowerInformation(IN POWER_INFORMATION_LEVEL PowerInformationLevel,IN PVOID InputBuffer OPTIONAL,IN ULONG InputBufferLength,OUT PVOID OutputBuffer OPTIONAL,IN ULONG OutputBufferLength)<ntddk.h>
ZwPrepareComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwPrepareEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwPrePrepareComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwPrePrepareEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwPulseEvent(IN HANDLE EventHandle,OUT PLONG PreviousState OPTIONAL)<ntifs.h>
ZwQueryDefaultLocale(IN BOOLEAN ThreadOrSystem,OUT PLCID Locale)<ntifs.h>
ZwQueryDirectoryFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass,IN BOOLEAN ReturnSingleEntry,IN PUNICODE_STRING FileName OPTIONAL,IN BOOLEAN RestartScan)<ntifs.h>
ZwQueryDirectoryObject(IN HANDLE DirectoryHandle,OUT PVOID Buffer,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN BOOLEAN RestartScan,IN OUT PULONG Context,OUT PULONG ReturnLength OPTIONAL)<ntifs.h>
ZwQueryEaFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN PVOID EaList OPTIONAL,IN ULONG EaListLength,IN PULONG EaIndex OPTIONAL,IN BOOLEAN RestartScan)<ntifs.h>
ZwQueryFullAttributesFile(IN POBJECT_ATTRIBUTES ObjectAttributes,OUT PFILE_NETWORK_OPEN_INFORMATION FileInformation)<wdm.h>
ZwQueryInformationEnlistment(IN HANDLE EnlistmentHandle,IN ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,OUT PVOID EnlistmentInformation,IN ULONG EnlistmentInformationLength,IN PULONG ReturnLength OPTIONAL)<wdm.h>
ZwQueryInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass)<wdm.h>
ZwQueryInformationProcess(IN HANDLE ProcessHandle,IN PROCESSINFOCLASS ProcessInformationClass,OUT PVOID ProcessInformation,IN ULONG ProcessInformationLength,OUT PULONG ReturnLength OPTIONAL)<ntifs.h>
ZwQueryInformationResourceManager(IN HANDLE ResourceManagerHandle,IN RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,OUT PVOID ResourceManagerInformation,IN ULONG ResourceManagerInformationLength,IN PULONG ReturnLength OPTIONAL)<wdm.h>
ZwQueryInformationToken(IN HANDLE TokenHandle,IN TOKEN_INFORMATION_CLASS TokenInformationClass,OUT PVOID TokenInformation,IN ULONG Length,OUT PULONG ResultLength)<ntifs.h>
ZwQueryInformationTransaction(IN HANDLE TransactionHandle,IN TRANSACTION_INFORMATION_CLASS TransactionInformationClass,OUT PVOID TransactionInformation,IN ULONG TransactionInformationLength,OUT PULONG ReturnLength OPTIONAL)<wdm.h>
ZwQueryInformationTransactionManager(IN HANDLE TransactionManagerHandle,IN TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,OUT PVOID TransactionManagerInformation,IN ULONG TransactionManagerInformationLength,OUT PULONG ReturnLength OPTIONAL)<wdm.h>
ZwQueryKey(IN HANDLE KeyHandle,IN KEY_INFORMATION_CLASS KeyInformationClass,OUT PVOID KeyInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength)<wdm.h>
ZwQueryMultipleValueKey(IN HANDLE KeyHandle,IN OUT PKEY_VALUE_ENTRY ValueEntries,IN ULONG EntryCount,OUT PVOID ValueBuffer,IN OUT PULONG BufferLength,OUT PULONG RequiredBufferLength OPTIONAL)<wdm.h>
ZwQueryObject(IN HANDLE Handle OPTIONAL,IN OBJECT_INFORMATION_CLASS ObjectInformationClass,OUT PVOID ObjectInformation OPTIONAL,IN ULONG ObjectInformationLength,OUT PULONG ReturnLength OPTIONAL)<ntifs.h>
ZwQueryQuotaInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length,IN BOOLEAN ReturnSingleEntry,IN PVOID SidList,IN ULONG SidListLength,IN PSID StartSid OPTIONAL,IN BOOLEAN RestartScan)<ntifs.h>
ZwQuerySecurityObject(IN HANDLE FileHandle,IN SECURITY_INFORMATION SecurityInformation,OUT PSECURITY_DESCRIPTOR SecurityDescriptor,IN ULONG Length,OUT PULONG ResultLength)<ntifs.h>
ZwQuerySymbolicLinkObject(IN HANDLE LinkHandle,IN OUT PUNICODE_STRING LinkTarget,OUT PULONG ReturnedLength OPTIONAL)<wdm.h>
ZwQueryValueKey(IN HANDLE KeyHandle,IN PUNICODE_STRING ValueName,IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,OUT PVOID KeyValueInformation OPTIONAL,IN ULONG Length,OUT PULONG ResultLength)<wdm.h>
ZwQueryVolumeInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID FsInformation,IN ULONG Length,IN FS_INFORMATION_CLASS FsInformationClass)<ntddk.h>
ZwReadFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL)<wdm.h>
ZwReadOnlyEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwRecoverEnlistment(IN HANDLE EnlistmentHandle,IN PVOID EnlistmentKey OPTIONAL)<wdm.h>
ZwRecoverResourceManager(IN HANDLE ResourceManagerHandle)<wdm.h>
ZwRecoverTransactionManager(IN HANDLE TransactionManagerHandle)<wdm.h>
ZwRenameKey(IN HANDLE KeyHandle,IN PUNICODE_STRING NewName)<wdm.h>
ZwReplaceKey(IN POBJECT_ATTRIBUTES NewFileObjectAttributes,IN HANDLE KeyHandle,IN POBJECT_ATTRIBUTES OldFileObjectAttributes)<ntifs.h>
ZwResetEvent(IN HANDLE EventHandle,OUT PLONG PreviousState OPTIONAL)<ntifs.h>
ZwRestoreKey(IN HANDLE KeyHandle,IN HANDLE FileHandle,IN ULONG Flags)<ntifs.h>
ZwRollbackComplete(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwRollbackEnlistment(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwRollbackTransaction(IN HANDLE TransactionHandle,IN BOOLEAN Wait)<wdm.h>
ZwRollforwardTransactionManager(IN HANDLE TransactionManagerHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwSaveKey(IN HANDLE KeyHandle,IN HANDLE FileHandle)<ntifs.h>
ZwSetDefaultLocale(IN BOOLEAN ThreadOrSystem,IN LCID Locale)<ntifs.h>
ZwSetDefaultUILanguage(IN LANGID LanguageId)<ntifs.h>
ZwSetEaFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,OUT PVOID Buffer,IN ULONG Length)<ntifs.h>
ZwSetEvent(IN HANDLE EventHandle,OUT PLONG PreviousState OPTIONAL)<ntifs.h>
ZwSetInformationEnlistment(IN HANDLE EnlistmentHandle,IN ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,IN PVOID EnlistmentInformation,IN ULONG EnlistmentInformationLength)<wdm.h>
ZwSetInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID FileInformation,IN ULONG Length,IN FILE_INFORMATION_CLASS FileInformationClass)<wdm.h>
ZwSetInformationKey(IN HANDLE KeyHandle,IN KEY_SET_INFORMATION_CLASS KeySetInformationClass,IN PVOID KeySetInformation,IN ULONG KeySetInformationLength)<wdm.h>
ZwSetInformationProcess(IN HANDLE ProcessHandle,IN PROCESSINFOCLASS ProcessInformationClass,IN PVOID ProcessInformation,IN ULONG ProcessInformationLength)<ntifs.h>
ZwSetInformationResourceManager(IN HANDLE ResourceManagerHandle,IN RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,IN PVOID ResourceManagerInformation,IN ULONG ResourceManagerInformationLength)<wdm.h>
ZwSetInformationThread(IN HANDLE ThreadHandle,IN THREADINFOCLASS ThreadInformationClass,IN PVOID ThreadInformation,IN ULONG ThreadInformationLength)<ntddk.h>
ZwSetInformationToken(IN HANDLE TokenHandle,IN TOKEN_INFORMATION_CLASS TokenInformationClass,IN PVOID TokenInformation,IN ULONG TokenInformationLength)<ntifs.h>
ZwSetInformationTransaction(IN HANDLE TransactionHandle,IN TRANSACTION_INFORMATION_CLASS TransactionInformationClass,IN PVOID TransactionInformation,IN ULONG TransactionInformationLength)<wdm.h>
ZwSetInformationTransactionManager(IN HANDLE TmHandle,IN TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,IN PVOID TransactionManagerInformation,IN ULONG TransactionManagerInformationLength)<wdm.h>
ZwSetQuotaInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID Buffer,IN ULONG Length)<ntifs.h>
ZwSetSecurityObject(IN HANDLE Handle,IN SECURITY_INFORMATION SecurityInformation,IN PSECURITY_DESCRIPTOR SecurityDescriptor)<ntifs.h>
ZwSetSystemTime(IN PLARGE_INTEGER NewTime,OUT PLARGE_INTEGER OldTime OPTIONAL)<ntifs.h>
ZwSetTimer(IN HANDLE TimerHandle,IN PLARGE_INTEGER DueTime,IN PTIMER_APC_ROUTINE TimerApcRoutine OPTIONAL,IN PVOID TimerContext OPTIONAL,IN BOOLEAN ResumeTimer,IN LONG Period OPTIONAL,OUT PBOOLEAN PreviousState OPTIONAL)<ntddk.h>
ZwSetTimerEx(IN HANDLE TimerHandle,IN TIMER_SET_INFORMATION_CLASS TimerSetInformationClass,IN OUT PVOID TimerSetInformation,IN ULONG TimerSetInformationLength)<ntddk.h>
ZwSetValueKey(IN HANDLE KeyHandle,IN PUNICODE_STRING ValueName,IN ULONG TitleIndex OPTIONAL,IN ULONG Type,IN PVOID Data OPTIONAL,IN ULONG DataSize)<wdm.h>
ZwSetVolumeInformationFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID FsInformation,IN ULONG Length,IN FS_INFORMATION_CLASS FsInformationClass)<ntifs.h>
ZwSinglePhaseReject(IN HANDLE EnlistmentHandle,IN PLARGE_INTEGER TmVirtualClock OPTIONAL)<wdm.h>
ZwTerminateProcess(IN HANDLE ProcessHandle OPTIONAL,IN NTSTATUS ExitStatus)<ntddk.h>
ZwUnloadDriver(IN PUNICODE_STRING DriverServiceName)<wdm.h>
ZwUnloadKey(IN POBJECT_ATTRIBUTES KeyObjectAttributes)<ntifs.h>
ZwUnlockFile(IN HANDLE FileHandle,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PLARGE_INTEGER ByteOffset,IN PLARGE_INTEGER Length,IN ULONG Key)<ntifs.h>
ZwUnmapViewOfSection(IN HANDLE ProcessHandle,IN PVOID BaseAddress OPTIONAL)<wdm.h>
ZwWaitForMultipleObjects(IN ULONG HandleCount,IN PHANDLE Handles,IN WAIT_TYPE WaitType,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL)<ntifs.h>
ZwWaitForSingleObject(IN HANDLE Handle,IN BOOLEAN Alertable,IN PLARGE_INTEGER Timeout OPTIONAL)<ntifs.h>
ZwWriteFile(IN HANDLE FileHandle,IN HANDLE Event OPTIONAL,IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,IN PVOID ApcContext OPTIONAL,OUT PIO_STATUS_BLOCK IoStatusBlock,IN PVOID Buffer,IN ULONG Length,IN PLARGE_INTEGER ByteOffset OPTIONAL,IN PULONG Key OPTIONAL)<wdm.h>
ZwYieldExecution(VOID)<ntifs.h>
