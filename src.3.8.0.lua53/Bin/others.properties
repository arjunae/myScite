# Define SciTE settings for other simple files (registry,makefiles,diff)
file.patterns.props=*.properties;*.session;*.url;*.cfg;*.cnf;*.aut;*.prefs;*.ini;*gtkrc
file.patterns.text=*.txt;*.log;*.lst;*.list;*.doc;*.diz;*.nfo;*.readme;readme.*;*.me;news.*;*.gitconfig;*.gitattributes;*.gitignore;*.api
file.patterns.markdown=*.diz;*.nfo;*.md;changelog.*
file.patterns.batch=*.cmd;*.bat;*.nt
file.patterns.diff=*.diff;*.patch;*.rej
file.patterns.make=GNUmakefile;*.iface;*.mk;*.mak;makefile;Makefile;makefile.*;qmake.*
# Todo: write a small lexer for Automake's Macro File format.
file.patterns.automake=;aclocal.*;*.m4;*.ac
file.patterns.bash=*.sh;*.bsh;*.ksh;*.zsh;configure

*source.patterns.props=$(file.patterns.props);
*source.patterns.batch=$(file.patterns.batch);
*source.patterns.diff=$(file.patterns.diff);
*source.patterns.make=$(file.patterns.make);

*filter.properties=Properties ( ini inf reg url cfg cnf )|$(file.patterns.props)|
*filter.text=Text / Batch ( txt log lst make bat cmd nt )|$(file.patterns.text);$(file.patterns.diff);$(file.patterns.make);$(file.patterns.batch)|
word.characters.$(file.patterns.text)=$(chars.alpha)$(chars.numeric)$(chars.accented)-'

# use markdown lexer for .txt, so allowing for simple plainText styling... :)
#lexer.$(file.patterns.text)=markdown
#lexer.$(file.patterns.text)=makefile
#lexer.$(file.patterns.automake)=text

lexer.$(file.patterns.markdown)=markdown
lexer.$(file.patterns.props)=props
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff
lexer.$(file.patterns.batch)=batch


#*language.batch=&NTBatch|cmd||
#*language.makefile=&Makefile|mak|$(keyMake)|
*language.text=Text|txt||
*language.difference=&Difference|diff||
#*language.errorlist=&Errorlist|err||
*language.properties=&Properties|properties||

# ---- Properties styles
# Default
style.props.0=$(colour.userdefinedliterals)
# Comment
style.props.1=$(colour.comment.line),$(font.comment)
# Section
style.props.2=$(colour.signal)
# Assignment operator
style.props.3=$(colour.operator)
# Default value (@)
style.props.4=$(colour.preproc)
style.props.5=$(colour.keyword6)
# Matched Operators
style.props.34=$(colour.operator),notbold
style.props.35=$(colour.operator),notbold
comment.block.props=#~

#####--- Markdown styles ---######
# Default
style.unknown=$(colour.identifier),$(colour.accent.back)
# Normal
style.markdown.0=$(colour.default)
# Special, e.g. end-of-line codes if enabled
style.markdown.1=$(colour.accent.back)
# STRONG **double asterisk**
style.markdown.2=$(colour.keyword1),italics
# STRONG 2 (not used)
style.markdown.3=$(style.unknown)
# EM1 *single asterisk*
style.markdown.4=$(colour.keyword1),italics
# EM2 _single underline_
style.markdown.5=fore:#965324,italics
# H1-H3 ## Hash signs ##
style.markdown.6=fore:#8B7700,bold,$(font.monospace)
style.markdown.7=fore:#9E6600,bold,$(font.monospace)
style.markdown.8=fore:#BF5500,bold,$(font.monospace)
# H4
style.markdown.9=fore:#C05000,bold,$(font.monospace)
# H5
style.markdown.10=$(style.unknown),bold
# H6
style.markdown.11=$(style.unknown),bold
# prechar (up to three indent spaces, eg for a second-level list)
style.markdown.12=fore:#304020,$(colour.accent.back)
# list
style.markdown.13=fore:#44CC00,$(colour.accent.back),bold
# list
style.markdown.14=$(style.unknown)
# BLOCKQUOTE
style.markdown.15=$(style.unknown)
# STRIKEOUT ~~double tilde~~ (apparently not in Markdown)
style.markdown.16=$(style.unknown)
# HRULE --- (three or more hyphens)
style.markdown.17=$(colour.keyword)
# LINK
style.markdown.18=fore:#0000AA
# CODE `single backticks`
style.markdown.19=$(colour.keyword2),$(font.monospace),$(colour.accent.back)
# CODE2 ``double backticks`` (quotes code containing a single backtick)
style.markdown.20=$(colour.keyword2),$(font.monospace),$(colour.accent.back)
# CODEBLOCK
style.markdown.21=$(colour.keyword2),$(font.monospace)
# COMMENT
style.markdown.22=$(colour.comment),$(font.monospace)
# OPTION
style.markdown.23=$(colour.keyword2),$(font.monospace)
# PREPROC
style.markdown.24=$(colour.keyword2),$(font.monospace)
# POSTPROC
style.markdown.25=$(colour.keyword2),$(font.monospace)
style.markdown.18=$(colour.signal)


######--- MakeFiles ---########
#GNU make keywords https://www.gnu.org/software/make/manual/html_node/Quick-Reference.html

# ... Directives Rules: @line start or prepended by whitespace and end before {\t\r\n ;}
keywordclass.make.directives= define endef undefine if ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport vpath .PHONY
# ... Functions & Variables Rules: vars start with [ ({ ] => case sensitive
keywordclass.make.functions=subst patsubst findstring filter filter-out sort sort-list word words wordlist firstword lastword dir notdir suffixes basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if then and call eval file value
# Make internal Vars Notation: $(VPATH)
keywordclass.make.variables=VPATH SHELL MAKESHELL MAKE MAKE_HOST MAKELEVEL MAKEFLAGS GNUMAKEFLAGS MAKECMDGOALS MAKEFILES MAKEFILE_LIST CURDIR SUFFIXES .LIBPATTERNS .VARIABLES OVERRIDES 
# qMake internal Vars Notation:  $$QMAKE_CXX , Vars which QMake was build:  $$[...]
keywordclass.qmake.variables=CONFIG DEFINES DEF_FILE DEPENDPATH DESTDIR DESTDIR_TARGET DLLDESTDIR DISTFILES DSP_TEMPLATE FORMS FORMS3 HEADERS INCLUDEPATH INSTALLS LEXIMPLS LEXOBJECTS LEXSOURCES LIBS LITERAL_HASH MAKEFILE MAKEFILE_GENERATOR MOC_DIR OBJECTS OBJECTS_DIR OBJMOC POST_TARGETDEPS PRE_TARGETDEPS PRECOMPILED_HEADER QMAKE QMAKESPEC QMAKE_APP_FLAG QMAKE_APP_OR_DLL QMAKE_AR_CMD QMAKE_BUNDLE_DATA QMAKE_CFLAGS_DEBUG QMAKE_CFLAGS_MT QMAKE_CFLAGS_MT_DBG QMAKE_CFLAGS_MT_DLL QMAKE_CFLAGS_MT_DLLDBG QMAKE_CFLAGS_RELEASE QMAKE_CFLAGS_SHLIB QMAKE_CFLAGS_THREAD QMAKE_CFLAGS_WARN_OFF QMAKE_CFLAGS_WARN_ON QMAKE_CLEAN QMAKE_CXXFLAGS_DEBUG QMAKE_CXXFLAGS_MT QMAKE_CXXFLAGS_MT_DBG QMAKE_CXXFLAGS_MT_DLL QMAKE_CXXFLAGS_MT_DLLDBG QMAKE_CXXFLAGS_RELEASE QMAKE_CXXFLAGS_SHLIB QMAKE_CXXFLAGS_THREAD QMAKE_CXXFLAGS_WARN_OFF QMAKE_CXXFLAGS_WARN_ON QMAKE_EXTENSION_SHLIB QMAKE_EXT_MOC QMAKE_EXT_UI QMAKE_EXT_PRL QMAKE_EXT_LEX QMAKE_EXT_YACC QMAKE_EXT_OBJ QMAKE_EXT_CPP QMAKE_EXT_H QMAKE_FAILED_REQUIREMENTS QMAKE_FILETAGS QMAKE_FRAMEWORK_VERSION QMAKE_INCDIR QMAKE_INCDIR_OPENGL QMAKE_INCDIR_QT QMAKE_INCDIR_THREAD QMAKE_INCDIR_X11 QMAKE_LFLAGS_CONSOLE QMAKE_LFLAGS_CONSOLE_DLL QMAKE_LFLAGS_DEBUG QMAKE_LFLAGS_PLUGIN QMAKE_LFLAGS_QT_DLL QMAKE_LFLAGS_RELEASE QMAKE_LFLAGS_SHAPP QMAKE_LFLAGS_SHLIB QMAKE_LFLAGS_SONAME QMAKE_LFLAGS_THREAD QMAKE_LFLAGS_WINDOWS QMAKE_LFLAGS_WINDOWS_DLL QMAKE_LIBDIR QMAKE_LIBDIR_FLAGS QMAKE_LIBDIR_OPENGL QMAKE_LIBDIR_QT QMAKE_LIBDIR_X11 QMAKE_LIBS QMAKE_LIBS_CONSOLE QMAKE_LIBS_OPENGL QMAKE_LIBS_OPENGL_QT QMAKE_LIBS_QT QMAKE_LIBS_QT_DLL QMAKE_LIBS_QT_OPENGL QMAKE_LIBS_QT_THREAD QMAKE_LIBS_RT QMAKE_LIBS_RTMT QMAKE_LIBS_THREAD QMAKE_LIBS_WINDOWS QMAKE_LIBS_X11 QMAKE_LIBS_X11SM QMAKE_LIB_FLAG QMAKE_LINK_SHLIB_CMD QMAKE_POST_LINK QMAKE_PRE_LINK QMAKE_LN_SHLIB QMAKE_MAKEFILE QMAKE_MOC_SRC QMAKE_QMAKE QMAKE_QT_DLL QMAKE_RUN_CC QMAKE_RUN_CC_IMP QMAKE_RUN_CXX QMAKE_RUN_CXX_IMP QMAKE_TARGET QMAKE_UIC QTPLUGIN RC_FILE RCC_DIR REQUIRES RES_FILE SOURCES SRCMOC SUBDIRS TARGET TARGET_EXT TARGET_x TARGET_x.y.z TEMPLATE TRANSLATIONS UICIMPLS UICOBJECTS UI_DIR UI_HEADERS_DIR UI_SOURCES_DIR VERSION VER_MAJ VER_MIN VER_PAT VPATH YACCIMPLS YACCOBJECTS YACCSOURCES 
# ... Shell commands Rules: prepended by lineStart or [ &|-@\t\r\n \":, '({ ] and end before [\t\r\n ;]
keywordclass.make.extcmd=autoconf autoheader ar awk bash break case cc chmod command open curl cp cd gcc g++ cl cat copy date del diff do done echo elif esac endfor env exist exit exec export false find git for in if fi lib link ln ls make mkdir nmake pwd not return rmdir sed sort sudo then true uname rm mv test touch print printf while xargs expand grep egrep printf php python sensible-browser sh sleep tar read unzip wget which xdg zip gpg

keywords.$(file.patterns.make)=$(keywordclass.make.directives) 
keywords2.$(file.patterns.make)=$(keywordclass.make.functions) $(keywordclass.make.variables) $(keywordclass.qmake.variables)
keywords3.$(file.patterns.make)=$(keywordclass.make.extcmd)

# SCE_MAKE_DEFAULT
style.makefile.0=$(colour.default)
# SCE_MAKE_COMMENT: #
style.makefile.1=$(colour.comment.line),$(font.comment.box)
# SCE_MAKE_PREROC pre-processor or  !
style.makefile.2=$(colour.preproc)
# SCE_MAKE_IDENTIFIER (Variable Definitions)
style.makefile.3=$(colour.userdefinedliterals)
# SCE_MAKE_OPERATOR
style.makefile.4=$(colour.operator)
# SCE_MAKE_TARGET
style.makefile.5=$(colour.taskmarker),underlined
# SCE_MAKE_USER_VARIABLE (User Variable Reference)
style.makefile.6=$(colour.keyword6)
# SCE_MAKE_FUNCTION
style.makefile.7=$(colour.operator) 
# SCE_MAKE_DIRECTIVE
style.makefile.8=$(colour.number)
# SCE_MAKE_IDEOL  (unclosed String)
style.makefile.9=$(colour.error),eolfilled
# SCE_MAKE_FLAGS
style.makefile.10=$(colour.doccommenttripledash)
# SCE_MAKE_EXTCMD (Shell commands / Automatic Variables @DF..$@)
style.makefile.11=$(colour.extcmd)
# SCE_MAKE_STRING
style.makefile.12=$(colour.string),$(colour.background)
# SCE_MAKE_NUMBER
style.makefile.13=$(colour.number),$(colour.background)

# Matched Operators
style.makefile.34=$(colour.operator),notbold
style.makefile.35=$(colour.operator),notbold

comment.block.makefile=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF

# Makefile related Properties
# lexer.makefile.line.chars.max | Limits the amout of bytes that will be styled while searching for a line End. 

######--- Error list styles  ---######
#~ Output Pane 

# Default
style.errorlist.32=$(style.errlist.32)
style.errorlist.0=$(style.errlist.0)
# python Error
style.errlist.1=$(style.errlist.1)
# gcc Error
style.errorlist.2=$(style.errlist.2)
# Microsoft Error
style.errorlist.3=$(style.errlist.3)
# command or return status
style.errorlist.4=$(style.errlist.4)
# Borland error and warning messages
style.errorlist.5=$(style.errlist.5)
# perl error and warning messages
style.errorlist.6=$(style.errlist.6)
# .NET tracebacks
style.errorlist.7=$(style.errlist.7)
# Lua error and warning messages
style.errorlist.8=$(style.errlist.8)
# ctags
style.errorlist.9=$(style.errlist.9)
# diff changed !
style.errorlist.10=$(style.errlist.10)
# diff addition +
style.errorlist.11=$(style.errlist.11)
# diff deletion -
style.errorlist.12=$(style.errlist.12)
# diff message ---
style.errorlist.13=$(style.errlist.13)
# PHP error
style.errorlist.14=$(style.errlist.14)
# Essential Lahey Fortran 90 error
style.errorlist.15=$(style.errlist.15)
# Intel Fortran Compiler error
style.errorlist.16=$(style.errlist.16)
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=$(style.errlist.17)
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=$(style.errlist.18)
# HTML Tidy
style.errorlist.19=$(style.errlist.19)
# Java runtime stack trace
style.errorlist.20=$(style.errlist.20)
style.errorlist.21=$(style.errlist.21)
# Message: In file included from ../src/xxxx.cxx:49:0:
style.errorlist.22=$(style.errlist.22)

# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

# ---- Difference styles
# http://www.markusbe.com/2009/12/how-to-read-a-patch-or-diff-and-understand-its-structure-to-apply-it-manually/

# Default
style.diff.32=$(colour.default)
style.diff.0=$(colour.default),$(font.small)
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=$(colour.comment.block)
# Command (diff ...)
style.diff.2=$(colour.signal)
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=$(colour.keyword2),$(font.monospace)
# Position setting (@@ ...)
style.diff.4=$(colour.signal),$(colour.accent.back)
# Line removal (-...)
style.diff.5=$(colour.keyword3),$(colour.accent.back),$(font.monospace),eolfilled
# Line addition (+...)
style.diff.6=$(colour.keyword4),$(colour.accent.back),$(font.monospace),eolfilled


# ---- Build Commands
	command.build.makefile=make
	command.build.*.mak=make

if PLAT_WIN
	command.go.$(file.patterns.batch)=cmd /c $(FileNameExt) $(1) $(2) $(3) $(4)
	command.name.0.*.bat;*.cmd=Execute Selection

	command.3.$(file.patterns.batch)=cmd /c $(CurrentSelection) /?

	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)
# Define SciTE settings for registry files.

file.patterns.registry=*.reg
*filter.registry=Registration files (reg)|$(file.patterns.registry)|
lexer.$(file.patterns.registry)=registry

comment.block.registry=;;

[ Styles ]

style.registry.32=$(colour.default),($colour.background)
# Default
style.registry.0=$(colour.identifier),($colour.background)
# Comment: ;;
style.registry.1=$(colour.comment.line)
# Value name: "Icon"="cmd.exe,-1"
style.registry.2=$(colour.default)
# String
style.registry.3=$(colour.string),$(font.small)
# Hex digit
style.registry.4=$(colour.comment.line)
# Value type: dword, hex(2), hex(7)
style.registry.5=$(colour.foreground)
# Added key, [HKLM\*\shell\notepad] 
style.registry.6=$(colour.default),$(font.small)
# Removed key, [-HKLM\*\shell\notepad]
style.registry.7=$(colour.taskmarker),$(font.small)
# Escaped characters in strings
style.registry.8=$(colour.string)
# GUID in key path, [HKCU\{C4ACBD3E-6114-4618-904C-B206ABA9DEB0}]
style.registry.9=$(colour.operator),bold
# GUID in string, @="{C4ACBD3E-6114-4618-904C-B206ABA9DEB0}"
style.registry.10=$(colour.foreground)
# Parameter: "notepad.exe %1 %*"
style.registry.11=$(colour.string))
# Operators
style.registry.12=$(colour.operator)

command.go.*.registry=regedit "$(FilePath)"
command.go.subsystem.*.registry=0
