ADD_CUSTOM_COMMAND(OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [APPEND])
ADD_CUSTOM_COMMAND(TARGET target PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM])
ADD_CUSTOM_TARGET(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM])
ADD_DEFINITIONS(-DFOO -DBAR ...)
ADD_DEPENDENCIES(target-name depend-target1 depend-target2 ...)
ADD_EXECUTABLE(exename [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)
ADD_LIBRARY(libname [SHARED | STATIC | MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)
ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
ADD_TEST(testname Exename arg1 arg2 ...)
AUX_SOURCE_DIRECTORY(dir VARIABLE)
BUILD_COMMAND(variable MAKECOMMAND)
BUILD_NAME(variable)
CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])
CONFIGURE_FILE(InputFile OutputFile [COPYONLY] [ESCAPE_QUOTES] [@ONLY])
CREATE_TEST_SOURCELIST(SourceListName DriverName test1 test2 test3 EXTRA_INCLUDE include.h FUNCTION function)
ELSE(expression)
ELSEIF(expression)
ENABLE_LANGUAGE(languageName)
ENABLE_TESTING()
ENDFOREACH(expression)
ENDIF(expression)
ENDMACRO(expression)
ENDWHILE(expression)
EXEC_PROGRAM(Executable [directory in which to run] [ARGS <arguments to executable>] [OUTPUT_VARIABLE <var>] [RETURN_VALUE <var>])
EXECUTE_PROCESS(COMMAND <cmd1> [args1...]] [COMMAND <cmd2> [args2...] [...]] [WORKING_DIRECTORY <directory>] [TIMEOUT <seconds>] [RESULT_VARIABLE <variable>] [OUTPUT_VARIABLE <variable>] [ERROR_VARIABLE <variable>] [INPUT_FILE <file>] [OUTPUT_FILE <file>] [ERROR_FILE <file>] [OUTPUT_QUIET] [ERROR_QUIET] [OUTPUT_STRIP_TRAILING_WHITESPACE] [ERROR_STRIP_TRAILING_WHITESPACE])
EXPORT_LIBRARY_DEPENDENCIES(FILE [APPEND])
FILE(WRITE filename "message to write"... )
FILE(APPEND filename "message to write"... )
FILE(READ filename variable)
FILE(GLOB variable [RELATIVE path] [globbing expressions]...)
FILE(GLOB_RECURSE variable [RELATIVE path] [globbing expressions]...)
FILE(REMOVE [directory]...)
FILE(REMOVE_RECURSE [directory]...)
FILE(MAKE_DIRECTORY [directory]...)
FILE(RELATIVE_PATH variable directory file)
FILE(TO_CMAKE_PATH path result)
FILE(TO_NATIVE_PATH path result)
FIND_FILE(<VAR> name1 path1 path2 ...)
FIND_FILE(<VAR> name | NAMES name1 [name2 ...] PATHS path1 [path2 ... ENV var] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC "cache documentation string"] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH])
FIND_LIBRARY(<VAR> name1 path1 path2 ...)
FIND_LIBRARY(<VAR> name | NAMES name1 [name2 ...] PATHS path1 [path2 ... ENV var] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC "cache documentation string"] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH])
FIND_PACKAGE(<name> [major.minor] [QUIET] [NO_MODULE] [[REQUIRED|COMPONENTS] [componets...]])
FIND_PATH(<VAR> name1 path1 path2 ...)
FIND_PATH(<VAR> name | NAMES name1 [name2 ...] PATHS path1 [path2 ... ENV var] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC "cache documentation string"] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH])
FIND_PROGRAM(<VAR> name1 path1 path2 ...)
FIND_PROGRAM(<VAR> name | NAMES name1 [name2 ...] PATHS path1 [path2 ... ENV var] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC "cache documentation string"] [NO_DEFAULT_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_CMAKE_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH])
FLTK_WRAP_UI(resultingLibraryName source1 source2 ... sourceN)
FOREACH(loop_var arg1 arg2 ...)
FOREACH(loop_var RANGE total)
FOREACH(loop_var RANGE start stop [step])
GET_CMAKE_PROPERTY(VAR property)
GET_DIRECTORY_PROPERTY(VAR [DIRECTORY dir] property)
GET_FILENAME_COMPONENT(VarName FileName PATH|ABSOLUTE|NAME|EXT|NAME_WE [CACHE])
GET_FILENAME_COMPONENT(VarName FileName PROGRAM [PROGRAM_ARGS ArgVar] [CACHE])
GET_SOURCE_FILE_PROPERTY(VAR file property)
GET_TARGET_PROPERTY(VAR target property)
GET_TEST_PROPERTY(test VAR property)
IF(variable)
IF(NOT variable)
IF(variable1 AND variable2)
IF(variable1 OR variable2)
IF(COMMAND command-name)
IF(EXISTS file-name)
IF(EXISTS directory-name)
IF(file1 IS_NEWER_THAN file2)
IF(IS_DIRECTORY directory-name)
IF(variable MATCHES regex)
IF(string MATCHES regex)
IF(variable LESS number)
IF(string LESS number)
IF(variable GREATER number)
IF(string GREATER number)
IF(variable EQUAL number)
IF(string EQUAL number)
IF(variable STRLESS string)
IF(string STRLESS string)
IF(variable STRGREATER string)
IF(string STRGREATER string)
IF(variable STREQUAL string)
IF(string STREQUAL string)
IF(DEFINED variable)
INCLUDE(file1 [OPTIONAL])
INCLUDE(module [OPTIONAL])
INCLUDE_DIRECTORIES([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)
INCLUDE_EXTERNAL_MSPROJECT(projectname location dep1 dep2 ...)
INCLUDE_REGULAR_EXPRESSION(regex_match [regex_complain])
INSTALL(TARGETS targets... [[ARCHIVE|LIBRARY|RUNTIME] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [OPTIONAL]] [...])
INSTALL(FILES files... DESTINATION <dir> [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [RENAME <name>] [OPTIONAL])
INSTALL(PROGRAMS files... DESTINATION <dir> [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [RENAME <name>] [OPTIONAL])
INSTALL(DIRECTORY dirs... DESTINATION <dir> [FILE_PERMISSIONS permissions...] [DIRECTORY_PERMISSIONS permissions...] [USE_SOURCE_PERMISSIONS] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS permissions...]] [...])
INSTALL([[SCRIPT <file>] [CODE <code>]] [...])
INSTALL_FILES(<dir> extension file file ...)
INSTALL_FILES(<dir> regexp)
INSTALL_FILES(<dir> FILES file file ...)
INSTALL_PROGRAMS(<dir> file1 file2 [file3 ...])
INSTALL_PROGRAMS(<dir> FILES file1 [file2 ...])
INSTALL_PROGRAMS(<dir> regexp)
INSTALL_TARGETS(<dir> [RUNTIME_DIRECTORY dir] target target)
LINK_DIRECTORIES(directory1 directory2 ...)
LINK_LIBRARIES(library1 <debug | optimized> library2 ...)
LIST(LENGTH <list> <output variable>)
LIST(GET <list> <element index> [<element index> ...] <output variable>)
LIST(APPEND <list> <element> [<element> ...])
LIST(INSERT <list> <element_index> <element> [<element> ...])
LIST(REMOVE_ITEM <list> <value> [<value> ...])
LIST(REMOVE_AT <list> <index> [<index> ...])
LIST(SORT <list>)
LIST(REVERSE <list>)
LOAD_CACHE(pathToCacheFile READ_WITH_PREFIX prefix entry1...)
LOAD_CACHE(pathToCacheFile [EXCLUDE entry1...] [INCLUDE_INTERNALS entry1...])
LOAD_COMMAND(COMMAND_NAME <loc1> [loc2 ...])
MACRO(<name> [arg1 [arg2 [arg3 ...]]])
MAKE_DIRECTORY(directory)
MARK_AS_ADVANCED([CLEAR|FORCE] VAR VAR2 VAR...)
MATH(EXPR <output variable> <math expression>)
MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] "message to display" ...)
OPTION(OPTION_VAR "help string describing option" [initial value])
OUTPUT_REQUIRED_FILES(srcfile outputfile)
PROJECT(projectname [CXX] [C] [Java])
QT_WRAP_CPP(resultingLibraryName DestName SourceLists ...)
QT_WRAP_UI(resultingLibraryName HeadersDestName SourcesDestName SourceLists ...)
REMOVE(VAR VALUE VALUE ...)
REMOVE_DEFINITIONS(-DFOO -DBAR ...)
SEPARATE_ARGUMENTS(VARIABLE)
SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])
SET(VAR VALUE1 ... VALUEN).
SET_DIRECTORY_PROPERTIES(PROPERTIES prop1 value1 prop2 value2)
SET_SOURCE_FILES_PROPERTIES(file1 file2 ... PROPERTIES prop1 value1 prop2 value2 ...)
SET_TARGET_PROPERTIES(target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ...)
SET_TESTS_PROPERTIES(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)
SITE_NAME(variable)
SOURCE_GROUP(name [REGULAR_EXPRESSION regex] [FILES src1 src2 ...])
STRING(REGEX MATCH <regular_expression> <output variable> <input> [<input>...])
STRING(REGEX MATCHALL <regular_expression> <output variable> <input> [<input>...])
STRING(REGEX REPLACE <regular_expression> <replace_expression> <output variable> <input> [<input>...])
STRING(REPLACE <match_expression> <replace_expression> <output variable> <input> [<input>...])
STRING(COMPARE EQUAL <string1> <string2> <output variable>)
STRING(COMPARE NOTEQUAL <string1> <string2> <output variable>)
STRING(COMPARE LESS <string1> <string2> <output variable>)
STRING(COMPARE GREATER <string1> <string2> <output variable>)
STRING(ASCII <number> [<number> ...] <output variable>)
STRING(CONFIGURE <string1> <output variable> [@ONLY] [ESCAPE_QUOTES])
STRING(TOUPPER <string1> <output variable>)
STRING(TOLOWER <string1> <output variable>)
STRING(LENGTH <string> <output variable>)
STRING(SUBSTRING <string> <begin> <length> <output variable>)
SUBDIR_DEPENDS(subdir dep1 dep2 ...)
SUBDIRS(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...] [PREORDER] )
TARGET_LINK_LIBRARIES(target library1 <debug | optimized> library2 ...)
TRY_COMPILE(RESULT_VAR bindir srcdir projectName <targetname> <CMAKE_FLAGS <Flags>> <OUTPUT_VARIABLE var>)
TRY_COMPILE(RESULT_VAR bindir srcfile <CMAKE_FLAGS <Flags>> <COMPILE_DEFINITIONS <flags> ...> <OUTPUT_VARIABLE var>)
TRY_RUN(RUN_RESULT_VAR COMPILE_RESULT_VAR bindir srcfile <CMAKE_FLAGS <Flags>> <COMPILE_DEFINITIONS <flags>> <OUTPUT_VARIABLE var> <ARGS <arg1> <arg2>...>)
USE_MANGLED_MESA(PATH_TO_MESA OUTPUT_DIRECTORY)
UTILITY_SOURCE(cache_entry executable_name path_to_source [file1 file2 ...])
VARIABLE_REQUIRES(TEST_VARIABLE RESULT_VARIABLE REQUIRED_VARIABLE1 REQUIRED_VARIABLE2 ...)
VTK_MAKE_INSTANTIATOR(className outSourceList src-list1 [src-list2 ..] EXPORT_MACRO exportMacro [HEADER_LOCATION dir] [GROUP_SIZE groupSize] [INCLUDES [file1 file2 ..]])
VTK_WRAP_JAVA(resultingLibraryName SourceListName class1 class2 ...)
VTK_WRAP_PYTHON(resultingLibraryName SourceListName class1 class2 ...)
VTK_WRAP_TCL(resultingLibraryName [SOURCES] SourceListName class1 class2 ... [COMMANDS CommandName1 CommandName2 ...])
WHILE(condition)
WRITE_FILE(filename "message to write"... [APPEND])

 	  	 
