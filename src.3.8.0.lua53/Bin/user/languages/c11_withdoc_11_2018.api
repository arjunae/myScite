##
# C11-C API, [c89-c11] , fetched from CPlusPlus.com / Februar2017, Marcedo@HabmalneFrage.de
##

#[<class=assert.h>]
__FILE__ (@)|[c99 cpp98 cpp11]|[(assert.h)]
__func__ (@)|[c99 cpp98 cpp11]|[(assert.h)]
__LINE__ (@)|[c99 cpp98 cpp11]|[(assert.h)]
assert(int expression)Param: (Expression to be evaluated.)\t\nDesc: Evaluate assertion (macro)\t\nProto: void assert (int expression);\t\n|[c90 c99 arm cpp98 cpp11]|[<cassert> (assert.h)]
#[</class>]
#[<class=ctype.h>]
isalnum( int c )Param: (Character to be checked, casted as an int, or EOF.)\t\nDesc: Check if character is alphanumeric (function)\t\nProto: int isalnum ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isalpha( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is alphabetic (function)\t\nProto: int isalpha ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isblank( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is blank (function)\t\nProto: int isblank ( int c );\t\n|[c99 cpp11]|[(ctype.h)]
iscntrl( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is a control character (function)\t\nProto: int iscntrl ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isdigit( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is decimal digit (function)\t\nProto: int isdigit ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isgraph( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character has graphical representation (function)\t\nProto: int isgraph ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
islower( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is lowercase letter (function)\t\nProto: int islower ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isprint( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is printable (function)\t\nProto: int isprint ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
ispunct( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is a punctuation character (function)\t\nProto: int ispunct ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isspace( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is a white-space (function)\t\nProto: int isspace ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isupper( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is uppercase letter (function)\t\nProto: int isupper ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
isxdigit( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is hexadecimal digit (function)\t\nProto: int isxdigit ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
tolower( int c )Param: (Character to be converted, casted to an int, or EOF.)\t\nDesc: Convert uppercase letter to lowercase (function)\t\nProto: int tolower ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
toupper( int c )Param: (Character to be converted, casted to an int, or EOF.)\t\nDesc: Convert lowercase letter to uppercase (function)\t\nProto: int toupper ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[(ctype.h)]
#[</class>]
#[<class=complex.h>]
CMPLX(x) constructs a complex number from real and imaginary parts [C11]|[(complex.h)]
CMPLXF(x) constructs a complex number from real and imaginary parts [C11]|[(complex.h)]
CMPLXL(x) constructs a complex number from real and imaginary parts [C11]|[(complex.h)]
creal(x) computes the real part of a complex number [C99]|[(complex.h)]
crealf(x) computes the real part of a complex number [C99]|[(complex.h)]
creall(x) computes the real part of a complex number [C99]|[(complex.h)]
cimag(x) computes the imaginary part a complex number [C99]|[(complex.h)]
cimagf(x) computes the imaginary part a complex number [C99]|[(complex.h)]
cimagl(x) computes the imaginary part a complex number [C99]|[(complex.h)]
cabs(x) computes the magnitude of a complex number [C99]|[(complex.h)]
cabsf(x) computes the magnitude of a complex number[C99]|[(complex.h)]
cabsl(x) computes the magnitude of a complex number [C99]|[(complex.h)]
carg(x) computes the phase angle of a complex number [C99]|[(complex.h)]
cargf(x) computes the phase angle of a complex number [C99]|[(complex.h)]
cargl(x) computes the phase angle of a complex number [C99]|[(complex.h)]
conj(x) computes the complex conjugate [C99]|[(complex.h)]
conjf(x) computes the complex conjugate [C99]|[(complex.h)]
conjl(x) computes the complex conjugate [C99]|[(complex.h)]
cproj(x) computes the projection on Riemann sphere [C99]|[(complex.h)]
cprojf(x) computes the projection on Riemann sphere[C99]|[(complex.h)]
cprojl(x) computes the projection on Riemann sphere [C99]|[(complex.h)]
cexp(x) computes the complex base-e exponential [C99]|[(complex.h)]
cexpf(x) computes the complex base-e exponential [C99]|[(complex.h)]
cexpl(x) computes the complex base-e exponential [C99]|[(complex.h)]
clog(x) computes the complex natural logarithm [C99]|[(complex.h)]
clogf(x) computes the complex natural logarithm [C99]|[(complex.h)]
clogl(x) computes the complex natural logarithm [C99]|[(complex.h)]
cpow(x) computes the complex power function [C99]|[(complex.h)]
cpowf(x) computes the complex power function [C99]|[(complex.h)]
cpowl(x) computes the complex power function [C99]|[(complex.h)]
csqrt(x) computes the complex square root [C99]|[(complex.h)]
csqrtf(x) computes the complex square root [C99]|[(complex.h)]
csqrtl(x) computes the complex square root [C99]|[(complex.h)]
csin(x) computes the complex sine [C99]|[(complex.h)]
csinf(x) computes the complex sine [C99]|[(complex.h)]
csinl(x) computes the complex sine [C99]|[(complex.h)]
ccos(x) computes the complex cosine [C99]|[(complex.h)]
ccosf(x) computes the complex cosine [C99]|[(complex.h)]
ccosl(x) computes the complex cosine [C99]|[(complex.h)]
ctan(x) computes the complex tangent [C99]|[(complex.h)]
ctanf(x) computes the complex tangent [C99] |[(complex.h)]
ctanl(x) computes the complex tangent [C99]|[(complex.h)]
casin(x) computes the complex arc sine [C99]|[(complex.h)]
casinf(x) computes the complex arc sine [C99] |[(complex.h)]
casinl(x) computes the complex arc sine [C99]|[(complex.h)]
cacos(x) computes the complex arc cosine [C99]|[(complex.h)]
cacosf(x) computes the complex arc cosine [C99]|[(complex.h)]
cacosl(x) computes the complex arc cosine [C99]|[(complex.h)]
catan(x) computes the complex arc tangent [C99]|[(complex.h)]
catanf(x) computes the complex arc tangent [C99]|[(complex.h)]
catanl(x) computes the complex arc tangent [C99]|[(complex.h)]
csinh(x) computes the complex hyperbolic sine [C99]|[(complex.h)]
csinhf(x) computes the complex hyperbolic sine [C99]|[(complex.h)]
csinhl(x) computes the complex hyperbolic sine [C99]|[(complex.h)]
ccosh(x) computes the complex hyperbolic cosine [C99]|[(complex.h)]
ccoshf(x) computes the complex hyperbolic cosine [C99]|[(complex.h)]
ccoshl(x) computes the complex hyperbolic cosine [C99]|[(complex.h)]
ctanh(x) computes the complex hyperbolic tangent [C99]|[(complex.h)]
ctanhf(x) computes the complex hyperbolic tangent [C99]|[(complex.h)]
ctanhl(x) computes the complex hyperbolic tangent [C99]|[(complex.h)]
casinh(x) computes the complex arc hyperbolic sine [C99]|[(complex.h)]
casinhf(x) computes the complex arc hyperbolic sine [C99]|[(complex.h)]
casinhl(x) computes the complex arc hyperbolic sine [C99]|[(complex.h)]
cacosh(x) computes the complex arc hyperbolic cosine [C99]|[(complex.h)]
cacoshf(x) computes the complex arc hyperbolic cosine [C99]|[(complex.h)]
cacoshl(x) computes the complex arc hyperbolic cosine [C99]|[(complex.h)]
catanh(x) computes the complex arc hyperbolic tangent [C99]|[(complex.h)]
catanhf(x) computes the complex arc hyperbolic tangent [C99]|[(complex.h)]
catanhl(x) computes the complex arc hyperbolic tangent [C99]|[(complex.h)]
#[</class>]
#[<class=errno.h>]
errno()Param: ()\t\nDesc: Last error number (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cerrno> (errno.h)]
E2BIG (@)|[c99 cpp98 cpp11]|[(errno.h)]
EACCES (@)|[c99 cpp98 cpp11]|[(errno.h)]
EAGAIN (@)|[c99 cpp98 cpp11]|[(errno.h)]
EBADF (@)|[c99 cpp98 cpp11]|[(errno.h)]
EBADMSG (@)|[c99 cpp98 cpp11]|[(errno.h)]
EBUSY (@)|[c99 cpp98 cpp11]|[(errno.h)]
ECANCELED (@)|[c99 cpp98 cpp11]|[(errno.h)]
ECHILD (@)|[c99 cpp98 cpp11]|[(errno.h)]
EDEADLK (@)|[c99 cpp98 cpp11]|[(errno.h)]
EDOM (@)|[c99 cpp98 cpp11]|[(errno.h)]
EEXIST (@)|[c99 cpp98 cpp11]|[(errno.h)]
EFAULT (@)|[c99 cpp98 cpp11]|[(errno.h)]
EFBIG (@)|[c99 cpp98 cpp11]|[(errno.h)]
EILSEQ (@)|[c99 cpp98 cpp11]|[(errno.h)]
EINPROGRESS (@)|[c99 cpp98 cpp11]|[(errno.h)]
EINTR (@)|[c99 cpp98 cpp11]|[(errno.h)]
EINVAL (@)|[c99 cpp98 cpp11]|[(errno.h)]
EIO (@)|[c99 cpp98 cpp11]|[(errno.h)]
EISDIR (@)|[c99 cpp98 cpp11]|[(errno.h)]
EMFILE (@)|[c99 cpp98 cpp11]|[(errno.h)]
EMLINK (@)|[c99 cpp98 cpp11]|[(errno.h)]
EMSGSIZE (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENAMETOOLONG (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENFILE (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENODEV (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOENT (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOEXEC (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOLCK (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOMEM (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOSPC (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOSYS (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOTDIR (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOTEMPTY (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOTSUP (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENOTTY (@)|[c99 cpp98 cpp11]|[(errno.h)]
ENXIO (@)|[c99 cpp98 cpp11]|[(errno.h)]
EPERM (@)|[c99 cpp98 cpp11]|[(errno.h)]
EPIPE (@)|[c99 cpp98 cpp11]|[(errno.h)]
ERANGE (@)|[c99 cpp98 cpp11]|[(errno.h)]
EROFS (@)|[c99 cpp98 cpp11]|[(errno.h)]
ESPIPE (@)|[c99 cpp98 cpp11]|[(errno.h)]
ESRCH (@)|[c99 cpp98 cpp11]|[(errno.h)]
ETIMEDOUT (@)|[c99 cpp98 cpp11]|[(errno.h)]
EXDEV (@)|[c99 cpp98 cpp11]|[(errno.h)]
#[</class>]
#[<class=fenv.h>]
FE_ALL_EXCEPT()Param: ()\t\nDesc: All exceptions (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_DFL_ENV()Param: ()\t\nDesc: Default environment (macro)\t\nProto: fenv_t*\t\n|[c99 cpp11]|[(fenv.h)]
FE_DIVBYZERO()Param: ()\t\nDesc: Pole error exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_DOWNWARD()Param: ()\t\nDesc: Downward rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_INEXACT()Param: ()\t\nDesc: Inexact result exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_INVALID()Param: ()\t\nDesc: Invalid argument exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_OVERFLOW()Param: ()\t\nDesc: Overflow range error exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_TONEAREST()Param: ()\t\nDesc: To-nearest rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_TOWARDZERO()Param: ()\t\nDesc: Toward-zero rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_UNDERFLOW()Param: ()\t\nDesc: Underflow range error exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
FE_UPWARD()Param: ()\t\nDesc: Upward rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
feclearexcept(int excepts)Param: (Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation.)\t\nDesc: Clear floating-point exceptions (function)\t\nProto: int feclearexcept (int excepts);\t\n|[c99 cpp11]|[(fenv.h)]
fegetenv(fenv_t* envp)Param: (Pointer to a fenv_t object where the state of the floating-point environment is stored.)\t\nDesc: Get floating-point environment (function)\t\nProto: int fegetenv (fenv_t* envp);\t\n|[c99 cpp11]|[(fenv.h)]
fegetexceptflag(fexcept_t* flagp, int excepts)Param: (Pointer to a fexcept_t object where the representation is stored.)\t\nDesc: Get floating-point exception flags (function)\t\nProto: int fegetexceptflag (fexcept_t* flagp, int excepts);\t\n|[c99 cpp11]|[(fenv.h)]
fegetround(void)Param: ()\t\nDesc: Get rounding direction mode (function)\t\nProto: int fegetround (void);\t\n|[c99 cpp11]|[(fenv.h)]
feholdexcept(fenv_t* envp)Param: (Pointer to a fenv_t object where the state of the floating-point environment is stored.)\t\nDesc: Hold floating-point exceptions (function)\t\nProto: int feholdexcept (fenv_t* envp);\t\n|[c99 cpp11]|[(fenv.h)]
FENV_ACCESS()Param: ()\t\nDesc: Access to Floating-point environment (pragma)\t\nProto:\t\n#pragma STDC FENV_ACCESS on\t\n#pragma STDC FENV_ACCESS off\t\n|[c99 cpp11]|[(fenv.h)]
fenv_t()Param: ()\t\nDesc: Floating-point environment type (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
feraiseexcept(int excepts)Param: (Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation.)\t\nDesc: Raise floating-point exception (function)\t\nProto: int feraiseexcept (int excepts);\t\n|[c99 cpp11]|[(fenv.h)]
fesetenv(const fenv_t* envp)Param: (Either a pointer to a fenv_t value (filled by a previous call to fegetenv or feholdexcept), or one of the floating-point environment macro.)\t\nDesc: Set floating-point environment (function)\t\nProto: int fesetenv (const fenv_t* envp);\t\n|[c99 cpp11]|[(fenv.h)]
fesetexceptflag(const fexcept_t* flagp, int excepts)Param: (Pointer to a fexcept_t object with a representation of floating-point exceptions.)\t\nDesc: Set floating-point exception flags (function)\t\nProto: int fesetexceptflag (const fexcept_t* flagp, int excepts);\t\n|[c99 cpp11]|[(fenv.h)]
fesetround(int rdir)Param: (One of the values defined as rounding direction mode.)\t\nDesc: Set rounding direction mode (function)\t\nProto: int fesetround (int rdir);\t\n|[c99 cpp11]|[(fenv.h)]
fetestexcept(int excepts)Param: (Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation.)\t\nDesc: Test for floating-point exceptions (function)\t\nProto: int fetestexcept (int excepts);\t\n|[c99 cpp11]|[(fenv.h)]
feupdateenv(const fenv_t* envp)Param: (Either a pointer to a fenv_t value (filled by a previous call to fegetenv or feholdexcept), or one of the floating-point environment macro values.)\t\nDesc: Update floating-point environment (function)\t\nProto: int feupdateenv (const fenv_t* envp);\t\n|[c99 cpp11]|[(fenv.h)]
fexcept_t()Param: ()\t\nDesc: Floating-point exceptions type (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[(fenv.h)]
#[</class>]
#[<class=float.h>]
DBL_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_EPSILON (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MANT_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MAX (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MAX_10_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MAX_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MIN (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MIN_10_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
DBL_MIN_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
DECIMAL_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_EPSILON (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_EVAL_METHOD (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MANT_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MAX (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MAX_10_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MAX_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MIN (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MIN_10_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_MIN_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_RADIX (@)|[c99 cpp98 cpp11]|[(float.h)]
FLT_ROUNDS (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_EPSILON (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MANT_DIG (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MAX (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MAX_10_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MAX_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MIN (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MIN_10_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
LDBL_MIN_EXP (@)|[c99 cpp98 cpp11]|[(float.h)]
#[</class>]
#[<class=inttypes.h>]
PRId16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRId32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRId64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRId8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIdPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIi16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIi32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIi64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIi8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIiPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIo16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIo32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIo64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIo8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIoPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIu16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIu32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIu64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIu8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIuPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIX16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIx32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIx64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIX8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIXFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIXFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIxFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIxFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIXLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIXLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIXLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIxLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIxMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
PRIXPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNd16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNd32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNd64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNd8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNdPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNi16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNi32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNi64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNi8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNiPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNo16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNo32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNo64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNo8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNoPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNu16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNu32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNu64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNu8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNuPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNX16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNx16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNX32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNx32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNx64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNX64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNx8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNX8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXFAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXFAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxFAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxFAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXLEAST16 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXLEAST32 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXLEAST64 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXLEAST8 (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxMAX (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNXPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
SCNxPTR (@)|[c99 cpp98 cpp11]|[(inttypes.h)]
#[</class>]
#[<class=iso646.h>]
and (@)|[c99 cpp98 cpp11]|[(iso646.h)]
and_eq (@)|[c99 cpp98 cpp11]|[(iso646.h)]
bitand (@)|[c99 cpp98 cpp11]|[(iso646.h)]
bitor (@)|[c99 cpp98 cpp11]|[(iso646.h)]
compl (@)|[c99 cpp98 cpp11]|[(iso646.h)]
not (@)|[c99 cpp98 cpp11]|[(iso646.h)]
not_eq (@)|[c99 cpp98 cpp11]|[(iso646.h)]
or (@)|[c99 cpp98 cpp11]|[(iso646.h)]
or_eq (@)|[c99 cpp98 cpp11]|[(iso646.h)]
xor (x)|[c99 cpp98 cpp11]|[(iso646.h)]
xor_eq (x)|[c99 cpp98 cpp11]|[(iso646.h)]
#[</class>]
#[<class=limits.h>]	
CHAR_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
CHAR_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
DBL_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
DBL_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
denorm_absent(@) if it does not allow denormalized values.|[c99 cpp98 cpp11]|[(limits.h)]
denorm_indeterminate(@) if indeterminate at compile time.|[c99 cpp98 cpp11]|[(limits.h)]
denorm_min() Minimum positive denormalized value.For types not allowing denormalized values: same as min().|[c99 cpp98 cpp11]|[(limits.h)]
denorm_present(@) if it allows denormalized values.|[c99 cpp98 cpp11]|[(limits.h)]
digits(int)	For integer types: number of non-sign bits (radix base digits) in the representation.For floating types: number of digits (in radix base) in the mantissa (equivalent to FLT_MANT_DIG, DBL_MANT_DIG or LDBL_MANT_DIG).|[c99 cpp98 cpp11]|[(limits.h)]
digits10(int)Number of digits (in decimal base) hat can be represented without change. Equivalent to FLT_DIG, DBL_DIG or LDBL_DIG for floating types.|[c99 cpp98 cpp11]|[(limits.h)]
epsilon()Machine epsilon (the difference between 1 and the least value greater than 1 that is representable). Equivalent to FLT_EPSILON, DBL_EPSILON or LDBL_EPSILON for floating types.|[c99 cpp98 cpp11]|[(limits.h)]
float_round_style(@)	Rounding style. see round_.|[c99 cpp98 cpp11]|[(limits.h)]
FLT_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
FLT_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
has_denorm_loss(bool)true if a loss of accuracy is detected as a denormalization loss, rather than an inexact result.|[c99 cpp98 cpp11]|[(limits.h)]
has_infinity(bool)true if the type has a representation for positive infinity.|[c99 cpp98 cpp11]|[(limits.h)]
has_quiet_NaN(bool)true if the type has a representation for a quiet (non-signaling) Not-a-Number.|[c99 cpp98 cpp11]|[(limits.h)]
has_signaling_NaN(bool)true if the type has a representation for a signaling Not-a-Number.|[c99 cpp98 cpp11]|[(limits.h)]
infinity() Representation of positive infinity, if available.|[c99 cpp98 cpp11]|[(limits.h)]
INT_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
INT_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
is_bounded(bool)true if the set of values represented by the type is finite.|[c99 cpp98 cpp11]|[(limits.h)]
is_exact(bool)true if type uses exact representations.|[c99 cpp98 cpp11]|[(limits.h)]
is_iec559(bool)true if the type adheres to IEC-559 / IEEE-754 standard.An IEC-559 type always has has_infinity, has_quiet_NaN and has_signaling_NaN set to true; And infinity, quiet_NaN and signaling_NaN return some non-zero value.|[c99 cpp98 cpp11]|[(limits.h)]
is_integer(bool)true if type is integer.|[c99 cpp98 cpp11]|[(limits.h)]
is_modulo(bool)true if the type is modulo. A type is modulo if it is possible to add two positive numbers and have a result that wraps around to a third number that is less.|[c99 cpp98 cpp11]|[(limits.h)]
is_signed(bool)true if type is signed.|[c99 cpp98 cpp11]|[(limits.h)]
is_specialized(bool)	true for all arithmetic types (i.e., those for which numeric_limits is specialized). false...for all other types.|[c99 cpp98 cpp11]|[(limits.h)]
LDBL_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
LDBL_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
LLONG_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
LLONG_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
LONG_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
LONG_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
lowest()Minimum finite value. (since C++11) For integral types: the same as min. For floating-point types: implementation-dependent; generally, the negative of max.|[c99 cpp98 cpp11]|[(limits.h)]
max(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
max_digits10(int)Number of digits (in decimal base) required to ensure that values that differ are always differentiated.|[c99 cpp98 cpp11]|[(limits.h)]
max_exponent(int)Maximum integer value such that radix raised to (max_exponent-1) generates a representable finite floating-point number.Equivalent to FLT_MAX_EXP, DBL_MAX_EXP or LDBL_MAX_EXP for floating types.|[c99 cpp98 cpp11]|[(limits.h)]
max_exponent10(int)Maximum integer value such that 10 raised to that power generates a normalized finite floating-point number.Equivalent to FLT_MAX_10_EXP, DBL_MAX_10_EXP or LDBL_MAX_10_EXP for floating types.|[c99 cpp98 cpp11]|[(limits.h)]
MB_LEN_MAX(@)|[c99 cpp98 cpp11]|[(limits.h)]
min(@)Minimum finite value. For floating types with denormalization (variable number of exponent bits): minimum positive normalized value.|[c99 cpp98 cpp11]|[(limits.h)]
min_exponent(int)Minimum negative integer value such that radix raised to (min_exponent-1) generates a normalized floating-point number.Equivalent to FLT_MIN_EXP, DBL_MIN_EXP or LDBL_MIN_EXP for floating types.|[c99 cpp98 cpp11]|[(limits.h)]
min_exponent10(int)Minimum negative integer value such that 10 raised to that power generates a normalized floating-point number.Equivalent to FLT_MIN_10_EXP, DBL_MIN_10_EXP or LDBL_MIN_10_EXP for floating types.|[c99 cpp98 cpp11]|[(limits.h)]
quiet_NaN() Representation of quiet (non-signaling) Not-a-Number, if available.|[c99 cpp98 cpp11]|[(limits.h)]
radix(int)For integer types: base of the representation. For floating types: base of the exponent of the representation (equivalent to FLT_RADIX).|[c99 cpp98 cpp11]|[(limits.h)]
round_error() Measure of the maximum rounding error.|[c99 cpp98 cpp11]|[(limits.h)]
round_indeterminate(@) if the rounding style is indeterminable at compile time.|[c99 cpp98 cpp11]|[(limits.h)]
round_style(@)	Rounding style. see round_.|[c99 cpp98 cpp11]|[(limits.h)]
round_to_nearest(@) if it rounds to the nearest representable value.|[c99 cpp98 cpp11]|[(limits.h)]
round_toward_infinity(@) if it rounds toward infinity.|[c99 cpp98 cpp11]|[(limits.h)]
round_toward_neg_infinity(@) if it rounds toward negative infinity.|[c99 cpp98 cpp11]|[(limits.h)]
round_toward_zero(@) if it rounds toward zero.|[c99 cpp98 cpp11]|[(limits.h)]
SCHAR_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
SCHAR_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
SHRT_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
SHRT_MIN(@)Minimum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
signaling_NaN() Representation of signaling Not-a-Number, if available.|[c99 cpp98 cpp11]|[(limits.h)]
tinyness_before(bool)true if tinyness is detected before rounding.|[c99 cpp98 cpp11]|[(limits.h)]
traps(bool)true if trapping is implemented for the type.|[c99 cpp98 cpp11]|[(limits.h)]
UCHAR_MAX (@)|[c99 cpp98 cpp11]|[(limits.h)]
UCHAR_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
UINT_LEAST16_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
UINT_LEAST32_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
UINT_MAX (@)|[c99 cpp98 cpp11]|[(limits.h)]
UINT_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
ULLONG_MAX (@)|[c99 cpp98 cpp11]|[(limits.h)]
ULLONG_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
ULONG_MAX (@)|[c99 cpp98 cpp11]|[(limits.h)]
ULONG_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
USHRT_MAX (@)|[c99 cpp98 cpp11]|[(limits.h)]
USHRT_MAX(@)Maximum finite value.|[c99 cpp98 cpp11]|[(limits.h)]
#[</class>]
#[<class=locale.h>]
localeconv(void)Param: ()\t\nDesc: Get locale formatting parameters for quantities (function)\t\nProto: struct lconv* localeconv (void);\t\n|[c90 c99 arm cpp98 cpp11]|[(locale.h)]
NULL()Param: ()\t\nDesc: no-Description\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(locale.h)]
setlocale(int category, const char* locale)Param: (Portion of the locale affected.)\t\nDesc: Set or retrieve locale (function)\t\nProto: char* setlocale (int category, const char* locale);\t\n|[c90 c99 arm cpp98 cpp11]|[(locale.h)]
struct lconv()Param: ()\t\nDesc: Formatting info for numeric values (type)\t\nProto: struct lconv;\t\n|[c90 c99 arm cpp98 cpp11]|[(locale.h)]
LC_ALL (@)|[c99 cpp98 cpp11]|[(locale.h)]
LC_COLLATE (@)|[c99 cpp98 cpp11]|[(locale.h)]
LC_CTYPE (@)|[c99 cpp98 cpp11]|[(locale.h)]
LC_MESSAGES (@)|[c99 cpp98 cpp11]|[(locale.h)]
LC_MONETARY (@)|[c99 cpp98 cpp11]|[(locale.h)]
LC_NUMERC (@)|[c99 cpp98 cpp11]|[(locale.h)]
LC_TIME (@)|[c99 cpp98 cpp11]|[(locale.h)]
#[</class>]
#[<class=math.h>]	
abs(double x)Param: (Value whose absolute value is returned.)\t\nDesc: Compute absolute value (function)\t\nProto: double abs (double x); float abs (float x);\t\nProto: long double abs (long double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
acos(double x)Param: (Value whose arc cosine is computed, in the interval [-1,+1].)\t\nDesc: Compute arc cosine (function)\t\nProto: double acos (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
acosh(double x)Param: (Value whose arc hyperbolic cosine is computed.)\t\nDesc: Compute arc hyperbolic cosine (function)\t\nProto: double acosh (double x); float acoshf (float x);\t\nProto: long double acoshl (long double x);\t\n|[c99 cpp11]|[(math.h)]
asin(double x)Param: (Value whose arc sine is computed, in the interval [-1,+1].)\t\nDesc: Compute arc sine (function)\t\nProto: double asin(double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
asinh(double x)Param: (Value whose arc hyperbolic sine is computed.)\t\nDesc: Compute arc hyperbolic sine (function)\t\nProto: double asinh (double x); float asinhf (float x);\t\nProto: long double asinhl (long double x);\t\n|[c99 cpp11]|[(math.h)]
atan(double x)Param: (Value whose arc tangent is computed.)\t\nDesc: Compute arc tangent (function)\t\nProto: double atan(double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
atan2(double y, double x)Param: (Value representing the proportion of the y-coordinate.)\t\nDesc: Compute arc tangent with two parameters (function)\t\nProto: double atan2(double y, double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
atanh(double x)Param: (Value whose arc hyperbolic tangent is computed, in the interval [-1,+1].)\t\nDesc: Compute arc hyperbolic tangent (function)\t\nProto: double atanh (double x); float atanhf (float x);\t\nProto: long double atanhl (long double x);\t\n|[c99 cpp11]|[(math.h)]
cbrt(double x)Param: (Value whose cubit root is computed.)\t\nDesc: Compute cubic root (function)\t\nProto: double cbrt (double x); float cbrtf (float x);\t\nProto: long double cbrtl (long double x);\t\n|[c99 cpp11]|[(math.h)]
ceil(double x)Param: (Value to round up.)\t\nDesc: Round up value (function)\t\nProto: double ceil (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
copysign(double x)Param: (Value with the magnitude of the resulting value.)\t\nDesc: Copy sign (function)\t\nProto: double copysign (double x, double y); float copysignf (float x , float y);\t\nProto: long double copysignl (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
double_t()Param: ()\t\nDesc: Floating-point type (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[(math.h)]
erf(double x)Param: (Parameter for the error function.)\t\nDesc: Compute error function (function)\t\nProto: double erf (double x); float erff (float x);\t\nProto: long double erfl (long double x);\t\n|[c99 cpp11]|[(math.h)]
erfc(double x)Param: (Parameter for the complementary error function.)\t\nDesc: Compute complementary error function (function)\t\nProto: double erfc (double x); float erfcf (float x);\t\nProto: long double erfcl (long double x);\t\n|[c99 cpp11]|[(math.h)]
exp(double x)Param: (Value of the exponent.)\t\nDesc: Compute exponential function (function)\t\nProto: double exp (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
exp2(double x)Param: (Value of the exponent.)\t\nDesc: Compute binary exponential function (function)\t\nProto: double exp2 (double x); float exp2f (float x);\t\nProto: long double exp2l (long double x);\t\n|[c99 cpp11]|[(math.h)]
expm1(double x)Param: (Value of the exponent.)\t\nDesc: Compute exponential minus one (function)\t\nProto: double expm1 (double x); float expm1f (float x);\t\nProto: long double expm1l (long double x);\t\n|[c99 cpp11]|[(math.h)]
fabs(double x)Param: (Value whose absolute value is returned.)\t\nDesc: Compute absolute value (function)\t\nProto: double fabs (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
fdim(double x)Param: (Values whose difference is calculated.)\t\nDesc: Positive difference (function)\t\nProto: double fdim (double x, double y); float fdimf (float x , float y);\t\nProto: long double fdiml (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
floor(double x)Param: (Value to round down.)\t\nDesc: Round down value (function)\t\nProto: double floor (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
fma(double x)Param: (Values to be multiplied.)\t\nDesc: Multiply-add (function)\t\nProto: double fma (double x, double y, double z); float fmaf (float x , float y , float z);\t\nProto: long double fmal (long double x, long double y, long double z);\t\n|[c99 cpp11]|[(math.h)]
fmax(double x)Param: (Values among which the function selects a maximum.)\t\nDesc: Maximum value (function)\t\nProto: double fmax (double x, double y); float fmaxf (float x , float y);\t\nProto: long double fmaxl (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
fmin(double x)Param: (Values among which the function selects a minimum.)\t\nDesc: Minimum value (function)\t\nProto: double fmin (double x, double y); float fminf (float x , float y);\t\nProto: long double fminl (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
fmod(double numer, double denom)Param: (Value of the quotient numerator.)\t\nDesc: Compute remainder of division (function)\t\nProto: double fmod (double numer, double denom);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
fpclassify(x)Param: ()\t\nDesc: Classify floating-point value (macro/function)\t\nProto: fpclassify(x)\t\n|[c99 cpp11]|[(math.h)]
frexp(double x)Param: (Value to be decomposed.)\t\nDesc: Get significand and exponent (function)\t\nProto: double frexp (double x, int* exp);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
HUGE_VAL()Param: ()\t\nDesc: Huge value (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
HUGE_VALF()Param: ()\t\nDesc: Huge float value\t\nProto: no-proto\t\n|[c99 cpp11]|[(math.h)]
HUGE_VALL()Param: ()\t\nDesc: Huge long double value (constant)\t\nProto: no-proto\t\n|[c99 cpp11]|[(math.h)]
hypot(double x)Param: (Floating point values corresponding to the legs of a right-angled triangle for which the hypotenuse is computed.)\t\nDesc: Compute hypotenuse (function)\t\nProto: double hypot (double x, double y); float hypotf (float x , float y);\t\nProto: long double hypotl (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
ilogb(double x)Param: (Value whose ilogb is returned.)\t\nDesc: Integer binary logarithm (function)\t\nProto: int ilogb (double x);\t\nProto: int ilogbf (float x);\t\nProto: int ilogbl (long double x);\t\n|[c99 cpp11]|[(math.h)]
INFINITY()Param: ()\t\nDesc: Infinity (constant)\t\nProto: no-proto\t\n|[c99 cpp11]|[(math.h)]
isfinite(x)Param: (A floating-point value.)\t\nDesc: Is finite value (macro)\t\nProto: isfinite(x)\t\n|[c99 cpp11]|[(math.h)]
isgreater(x, y)Param: (Values to be compared.)\t\nDesc: Is greater (macro)\t\nProto: isgreater(x,y)\t\n|[c99 cpp11]|[(math.h)]
isgreaterequal(x, y)Param: (Values to be compared.)\t\nDesc: Is greater or equal (macro)\t\nProto: isgreaterequal(x,y)\t\n|[c99 cpp11]|[(math.h)]
isinf(x)Param: (A floating-point value.)\t\nDesc: Is infinity (macro/function)\t\nProto: isinf(x)\t\n|[c99 cpp11]|[(math.h)]
isless(x, y)Param: (Values to be compared.)\t\nDesc: Is less (macro)\t\nProto: isless(x,y)\t\n|[c99 cpp11]|[(math.h)]
islessequal(x, y)Param: (Values to be compared.)\t\nDesc: Is less or equal (macro)\t\nProto: islessequal(x,y)\t\n|[c99 cpp11]|[(math.h)]
islessgreater(x, y)Param: (Values to be compared.)\t\nDesc: Is less or greater (macro)\t\nProto: islessgreater(x,y)\t\n|[c99 cpp11]|[(math.h)]
isnan(x)Param: (A floating-point value.)\t\nDesc: Is Not-A-Number (macro/function)\t\nProto: isnan(x)\t\n|[c99 cpp11]|[(math.h)]
isnormal(x)Param: (A floating-point value.)\t\nDesc: Is normal (macro/function)\t\nProto: isnormal(x)\t\n|[c99 cpp11]|[(math.h)]
isunordered(x, y)Param: (Values to check whether they are unordered.)\t\nDesc: Is unordered (macro)\t\nProto: isunordered(x,y)\t\n|[c99 cpp11]|[(math.h)]
ldexp(double x)Param: (Floating point value representing the significand.)\t\nDesc: Generate value from significand and exponent (function)\t\nProto: double ldexp (double x, int exp);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
lgamma(double x)Param: (Parameter for the log-gamma function.)\t\nDesc: Compute log-gamma function (function)\t\nProto: double lgamma (double x); float lgammaf (float x);\t\nProto: long double lgammal (long double x);\t\n|[c99 cpp11]|[(math.h)]
llrint(double x)Param: (Value to round.)\t\nDesc: Round and cast to long long integer (function)\t\nProto: long long int llrint (double x);\t\nProto: long long int llrintf (float x);\t\nProto: long long int llrintl (long double x);\t\n|[c99 cpp11]|[(math.h)]
llround(double x)Param: (Value to round.)\t\nDesc: Round to nearest and cast to long long integer (function)\t\nProto: long long int llround (double x);\t\nProto: long long int llroundf (float x);\t\nProto: long long int llroundl (long double x);\t\n|[c99 cpp11]|[(math.h)]
log(double x):double #Returns the natural logarithm (base-e logarithm) of x [c99 cpp11]|[(math.h)]
log10(double x)Param: (Value whose logarithm is calculated.)\t\nDesc: Compute common logarithm (function)\t\nProto: double log10 (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
log1p(double x)Param: (Value whose logarithm is calculated.)\t\nDesc: Compute logarithm plus one (function)\t\nProto: double log1p (double x); float log1pf (float x);\t\nProto: long double log1pl (long double x);\t\n|[c99 cpp11]|[(math.h)]
log2(double x)Param: (Value whose logarithm is calculated.)\t\nDesc: Compute binary logarithm (function)\t\nProto: double log2 (double x); float log2f (float x);\t\nProto: long double log2l (long double x);\t\n|[c99 cpp11]|[(math.h)]
lrint(double x)Param: (Value to round.)\t\nDesc: Round and cast to long integer (function)\t\nProto: long int llrint (double x);\t\nProto: long int llrintf (float x);\t\nProto: long int llrintl (long double x);\t\n|[c99 cpp11]|[(math.h)]
lround(double x)Param: (Value to round.)\t\nDesc: Round to nearest and cast to long integer (function)\t\nProto: long int lround (double x);\t\nProto: long int lroundf (float x);\t\nProto: long int lroundl (long double x);\t\n|[c99 cpp11]|[(math.h)]
math_errhandling()Param: ()\t\nDesc: Error handling (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[(math.h)]
modf(double x)Param: (Floating point value to break into parts.)\t\nDesc: Break into fractional and integral parts (function)\t\nProto: double modf (double x, double* intpart);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
nanf(const char* tagp)Param: (An implementation-specific C-string.)\t\nDesc: no-Description\t\nProto: float nanf (const char* tagp);\t\n|[c99 cpp11]|[(math.h)]
nanl(const char* tagp)Param: (An implementation-specific C-string.)\t\nDesc: no-Description\t\nProto: float nanl (const char* tagp);\t\n|[c99 cpp11]|[(math.h)]
nearbyint(double x)Param: (Value to round.)\t\nDesc: Round to nearby integral value (function)\t\nProto: double nearbyint (double x); float nearbyintf (float x);\t\nProto: long double nearbyintl (long double x);\t\n|[c99 cpp11]|[(math.h)]
nextafter(double x)Param: (Base value.)\t\nDesc: Next representable value (function)\t\nProto: double nextafter (double x, double y); float nextafterf (float x , float y);\t\nProto: long double nextafterl (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
nexttoward(double x)Param: (Base value.)\t\nDesc: Next representable value toward precise value (function)\t\nProto: double nexttoward (double x, long double y); float nexttowardf (float x , long double y);\t\nProto: long double nexttowardl (long double x, long double y);\t\n|[c99 cpp11]|[(math.h)]
pow(double base, double exponent)Param: (Base value.)\t\nDesc: Raise to power (function)\t\nProto: double pow (double base, double exponent);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
remainder(double numer, double denom)Param: (Value of the quotient numerator.)\t\nDesc: Compute remainder (IEC 60559) (function)\t\nProto: double remainder (double numer, double denom); float remainderf (float numer , float denom);\t\nProto: long double remainderl (long double numer, long double denom);\t\n|[c99 cpp11]|[(math.h)]
remquo(double numer, double denom, int* quot)Param: (Floating point value with the quotient numerator.)\t\nDesc: Compute remainder and quotient (function)\t\nProto: double remquo (double numer, double denom, int* quot); float remquof (float numer , float denom , int* quot);\t\nProto: long double remquol (long double numer, long double denom, int* quot);\t\n|[c99 cpp11]|[(math.h)]
scalbln(double x)Param: (significand.)\t\nDesc: Scale significand using floating-point base exponent (long) (function)\t\nProto: double scalbln (double x, long int n); float scalblnf (float x , long int n);\t\nProto: long double scalblnl (long double x, long int n);\t\n|[c99 cpp11]|[(math.h)]
scalbn(double x)Param: (Value representing the significand.)\t\nDesc: Scale significand using floating-point base exponent (function)\t\nProto: double scalbn (double x, int n); float scalbnf (float x , int n);\t\nProto: long double scalbnl (long double x, int n);\t\n|[c99 cpp11]|[(math.h)]
signbit(x)Param: (A floating-point value.)\t\nDesc: Sign bit (macro/function)\t\nProto: signbit(x)\t\n|[c99 cpp11]|[(math.h)]
sqrt(double x)Param: (Value whose square root is computed.)\t\nDesc: Compute square root (function)\t\nProto: double sqrt (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[(math.h)]
tgamma(double x)Param: (Parameter for the gamma function.)\t\nDesc: Compute gamma function (function)\t\nProto: double tgamma (double x); float tgammaf ( float x);\t\nProto: long double tgammal (long double x);\t\n|[c99 cpp11]|[(math.h)]
trunc(double x)Param: (Value to truncate.)\t\nDesc: Truncate value (function)\t\nProto: double trunc (double x); float truncf ( float x);\t\nProto: long double truncl (long double x);\t\n|[c99 cpp11]|[(math.h)]
#[</class>]
#[<class=setjmp.h>]	
jmp_buf()Param: ()\t\nDesc: Type to hold information to restore calling environment (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(setjmp.h)]
longjmp(jmp_buf env, int val)Param: (Object of type jmp_buf filled by a previous call to setjmp that contains information to restore the environment to that point.)\t\nDesc: Long jump (function)\t\nProto: void longjmp (jmp_buf env, int val);\t\n|[c90 c99 arm cpp98 cpp11]|[(setjmp.h)]
setjmp(jmp_buf env)Param: (Object of type jmp_buf where the environment information is stored.)\t\nDesc: Save calling environment for long jump (macro)\t\nProto: int setjmp (jmp_buf env);\t\n|[c90 c99 arm cpp98 cpp11]|[(setjmp.h)]
#[</class>]
#[<class=signal.h>]	
raise(int sig):int #Causes signal sig to be generated [c99 cpp98 cpp11]|[(signal.h)]
signal( void * ptr, size_t size, size_t count, FILE * stream )Param: (The signal value to which a handling function is set.)\t\nDesc: Set function to handle signal (function)\t\nProto: void (*signal(int sig, void (*func)(int)))(int);\t\n|[c90 c99 arm cpp98 cpp11]|[<csignal> (signal.h)]
SIG_DFL (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIG_ERR (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIG_IGN (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIGABRT (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIGFPE (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIGILL (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIGINT (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIGSEGV (@)|[c99 cpp98 cpp11]|[(signal.h)]
SIGTERM (@)|[c99 cpp98 cpp11]|[(signal.h)]
#[</class>]
#[<class=stdalign.h>]
offsetof(@)byte offset from the beginning of a struct type to specified member [c99 c11]|[(stdalign.h)]
#[</class>]
#[<class=stdarg.h>]	
va_arg(va_list ap, type)Param: (Object of type va_list carrying information about the current retrieval state of a variable argument list.)\t\nDesc: Retrieve next argument (macro)\t\nProto: type va_arg (va_list ap, type)\t\n|[c90 c99 arm cpp98 cpp11]|[(stdarg.h)]
va_copy(va_list dest, va_list src)Param: (Uninitialized object of type va_list.)\t\nDesc: Copy variable argument list (macro)\t\nProto: void va_copy (va_list dest, va_list src);\t\n|[c99 cpp11]|[(stdarg.h)]
va_end(va_list ap)Param: (va_list object previously initialized by va_start or va_copy.)\t\nDesc: End using variable argument list (macro)\t\nProto: void va_end (va_list ap);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdarg.h)]
va_list()Param: ()\t\nDesc: Type to hold information about variable arguments (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdarg.h)]
va_start(va_list ap, paramN)Param: (Uninitialized object of type va_list.)\t\nDesc: Initialize a variable argument list (macro)\t\nProto: void va_start (va_list ap, paramN);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdarg.h)]
#[</class>]
#[<class=stdatomic.h>]	
# Empty
#[</class>]
#[<class=stdbool.h>]	
bool (@)|[c99 cpp98 cpp11]|[(stdbool.h)]
false (@)|[c99 cpp98 cpp11]|[(stdbool.h)]
true (@)|[c99 cpp98 cpp11]|[(stdbool.h)]
#[</class>]
#[<class=stddef.h>]	
offsetof(type,member)Param: (A type in which member is a valid member designator.)\t\nDesc: Return member offset (macro)\t\nProto: offsetof (type,member)\t\n|[c90 c99 arm cpp98 cpp11]|[(stddef.h)]
ptrdiff_t()Param: ()\t\nDesc: Result of pointer subtraction (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stddef.h)]
size_t(@)Param: ()\t\nDesc: Unsigned integral type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stddef.h)]
sizeof(type)Desc:Returns size in bytes of the object representation of type. [c11][(stddef.h)]
#[</class>]
#[<class=stdint.h>]
INT16_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT16_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT16_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int16_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT32_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT32_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT32_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int32_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT64_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT64_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT64_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int64_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT8_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT8_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT8_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int8_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST16_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST16_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_fast16_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST32_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST32_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_fast32_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST64_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST64_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_fast64_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST8_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_FAST8_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_fast8_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST16_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST16_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_least16_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST32_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST32_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_least32_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST64_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST64_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_least64_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST8_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INT_LEAST8_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
int_least8_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INTMAX_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INTMAX_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INTMAX_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
intmax_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INTPTR_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
INTPTR_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
intptr_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
PTRDIFF_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
PTRDIFF_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
SIG_ATOMIC_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
SIG_ATOMIC_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
SIZE_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT16_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT16_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint16_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT32_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT32_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint32_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT64_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT64_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint64_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT8_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT8_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint8_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_FAST16_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_fast16_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_FAST32_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_fast32_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_FAST64_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_fast64_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_FAST8_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_fast8_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_LEAST16_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_least16_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_LEAST32_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_least32_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_LEAST64_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_least64_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINT_LEAST8_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uint_least8_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINTMAX_C (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINTMAX_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uintmax_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
UINTPTR_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
uintptr_t (@)|[c99 cpp98 cpp11]|[(stdint.h)]
WINT_MAX (@)|[c99 cpp98 cpp11]|[(stdint.h)]
WINT_MIN (@)|[c99 cpp98 cpp11]|[(stdint.h)]
#[</class>]
#[<class=stdio.h>]	
BUFSIZ()Param: ()\t\nDesc: Buffer size (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
clearerr( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Clear error indicators (function)\t\nProto: void clearerr ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
EOF()Param: ()\t\nDesc: End-of-File (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
gets(char *str):char * #Reads a line from stdin and stores it into the string pointed to by str[c89 c99 c11][(stdio.h)]
getc(FILE *stream):int #Gets the next character (an unsigned char) from the specified stream and advances the position indicator for the stream[c89 c99 c11][(stdio.h)]
fclose( FILE * stream )Param: (Pointer to a FILE object that specifies the stream to be closed.)\t\nDesc: Close file (function)\t\nProto: int fclose ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
feof( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Check end-of-file indicator (function)\t\nProto: int feof ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
ferror( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Check error indicator (function)\t\nProto: int ferror ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fflush( FILE * stream )Param: (Pointer to a FILE object that specifies a buffered stream.)\t\nDesc: Flush stream (function)\t\nProto: int fflush ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fgetc( FILE * stream )Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Get character from stream (function)\t\nProto: int fgetc ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fgetpos( FILE * stream, fpos_t * pos )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Get current position in stream (function)\t\nProto: int fgetpos ( FILE * stream, fpos_t * pos );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fgets( char * str, int num, FILE * stream )Param: (Pointer to an array of chars where the string read is copied.)\t\nDesc: Get string from stream (function)\t\nProto: char * fgets ( char * str, int num, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
FILE()Param: ()\t\nDesc: Object containing information to control a stream (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
FILENAME_MAX()Param: ()\t\nDesc: Maximum length of file names (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fopen( const char * filename, const char * mode )Param: (C string containing the name of the file to be opened.)\t\nDesc: Open file (function)\t\nProto: FILE * fopen ( const char * filename, const char * mode );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
FOPEN_MAX()Param: ()\t\nDesc: Potential limit of simultaneous open streams (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fpos_t(@)Param: ()\t\nDesc: Object containing information to specify a position within a file (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fprintf( FILE * stream, const char * format, ... )Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data to stream (function)\t\nProto: int fprintf ( FILE * stream, const char * format, ... );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fputc( int character, FILE * stream )Param: (The int promotion of the character to be written.)\t\nDesc: Write character to stream (function)\t\nProto: int fputc ( int character, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fputs( const char * str, FILE * stream )Param: (C string with the content to be written to stream.)\t\nDesc: Write string to stream (function)\t\nProto: int fputs ( const char * str, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fread( void * ptr, size_t size, size_t count, FILE * stream )Param: (Pointer to a block of memory with a size of at least (size*count) bytes, converted to a )\t\nDesc: Read block of data from stream (function)\t\nProto: size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
freopen( const char * filename, const char * mode, FILE * stream )Param: (C string containing the name of the file to be opened.)\t\nDesc: Reopen stream with different file or mode (function)\t\nProto: FILE * freopen ( const char * filename, const char * mode, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fscanf( FILE * stream, const char * format, ... )Param: (Pointer to a FILE object that identifies the input stream to read data from.)\t\nDesc: Read formatted data from stream (function)\t\nProto: int fscanf ( FILE * stream, const char * format, ... );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fseek( FILE * stream, long int offset, int origin )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Reposition stream position indicator (function)\t\nProto: int fseek ( FILE * stream, long int offset, int origin );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fsetpos( FILE * stream, const fpos_t * pos )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Set position indicator of stream (function)\t\nProto: int fsetpos ( FILE * stream, const fpos_t * pos );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
ftell( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Get current position in stream (function)\t\nProto: long int ftell ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
fwrite( const void * ptr, size_t size, size_t count, FILE * stream )Param: (Pointer to the array of elements to be written, converted to a const )\t\nDesc: Write block of data to stream (function)\t\nProto: size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
getchar( void )Param: ()\t\nDesc: Get character from stdin (function)\t\nProto: int getchar ( void );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
L_tmpnam()Param: ()\t\nDesc: Minimum length for temporary file name (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
perror( const char * str )Param: (C string containing a custom message to be printed before the error message itself.)\t\nDesc: Print error message (function)\t\nProto: void perror ( const char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
printf(const char *format, ...):int #Sends formatted output to stdout[c89 c99 c11][(stdio.h)]
putc(int char, FILE *stream):int #Writes an unsigned char specified by the argument char to the specified stream and advances the position indicator for the stream[c89 c99 c11][(stdio.h)]
puts(const char *str):int #Writes a string to stdout up to but not including the null character[c89 c99 c11][(stdio.h)]
putchar( int character )Param: (The int promotion of the character to be written.)\t\nDesc: Write character to stdout (function)\t\nProto: int putchar ( int character );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
remove( const char * filename )Param: (C string containing the name of the file to be deleted.)\t\nDesc: Remove file (function)\t\nProto: int remove ( const char * filename );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
rename( const char * oldname, const char * newname )Param: (C string containing the name of an existing file to be renamed and/or moved.)\t\nDesc: Rename file (function)\t\nProto: int rename ( const char * oldname, const char * newname );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
rewind( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Set position of stream to the beginning (function)\t\nProto: void rewind ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
scanf(const char *format, ...):int #Read formatted input [c89 c99 c11][(stdio.h)]
setbuf( FILE * stream, char * buffer )Param: (Pointer to a FILE object that identifies an open stream.)\t\nDesc: Set stream buffer (function)\t\nProto: void setbuf ( FILE * stream, char * buffer );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
setvbuf( FILE * stream, char * buffer, int mode, size_t size )Param: (Pointer to a FILE object that identifies an open stream.)\t\nDesc: Change stream buffering (function)\t\nProto: int setvbuf ( FILE * stream, char * buffer, int mode, size_t size );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
snprintf( char * s, size_t n, const char * format, ... )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted output to sized buffer (function)\t\nProto: int snprintf ( char * s, size_t n, const char * format, ... );\t\n|[c99 cpp11]|[(stdio.h)]
sprintf( char * str, const char * format, ... )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted data to string (function)\t\nProto: int sprintf ( char * str, const char * format, ... );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
sscanf( const char * s, const char * format, ...)Param: (C string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from string (function)\t\nProto: int sscanf ( const char * s, const char * format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
stderr(@) Desc: no-Description\t\nProto: FILE *;\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
stdin(@) Desc: no-Description\t\nProto: FILE *;\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
stdout(@) Desc: no-Description\t\nProto: FILE * ;\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
TMP_MAX()Param: ()\t\nDesc: Number of temporary files (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
tmpfile( void )Param: ()\t\nDesc: Open a temporary file (function)\t\nProto: FILE * tmpfile ( void );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
tmpnam( char * str )Param: (Pointer to an array of characters where the proposed temporary name will be stored as a C string.)\t\nDesc: Generate temporary filename (function)\t\nProto: char * tmpnam ( char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
ungetc( int character, FILE * stream )Param: (The int promotion of the character to be put back.)\t\nDesc: Unget character from stream (function)\t\nProto: int ungetc ( int character, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
vfprintf( FILE * stream, const char * format, va_list arg )Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data from variable argument list to stream (function)\t\nProto: int vfprintf ( FILE * stream, const char * format, va_list arg );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
vfscanf( FILE * stream, const char * format, va_list arg )Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Read formatted data from stream into variable argument list (function)\t\nProto: int vfscanf ( FILE * stream, const char * format, va_list arg );\t\n|[c99 cpp11]|[(stdio.h)]
vprintf( const char * format, va_list arg )Param: (C string that contains a format string that follows the same specifications as format in printf (see printf for details).)\t\nDesc: Print formatted data from variable argument list to stdout (function)\t\nProto: int vprintf ( const char * format, va_list arg );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
vscanf( const char * format, va_list arg )Param: (C string that contains a format string that follows the same specifications as format in scanf (see scanf for details).)\t\nDesc: Read formatted data into variable argument list (function)\t\nProto: int vscanf ( const char * format, va_list arg );\t\n|[c99 cpp11]|[(stdio.h)]
vsnprintf(char * s, size_t n, const char * format, va_list arg )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted data from variable argument list to sized buffer (function)\t\nProto: int vsnprintf (char * s, size_t n, const char * format, va_list arg );\t\n|[c99 cpp11]|[(stdio.h)]
vsprintf(char * s, const char * format, va_list arg )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted data from variable argument list to string (function)\t\nProto: int vsprintf (char * s, const char * format, va_list arg );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdio.h)]
vsscanf( const char * s, const char * format, va_list arg )Param: (C string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from string into variable argument list (function)\t\nProto: int vsscanf ( const char * s, const char * format, va_list arg );\t\n|[c99 cpp11]|[(stdio.h)]
_IOFBF (@)|[c99 cpp98 cpp11]|[(stdio.h)]
_IOLBF (@)|[c99 cpp98 cpp11]|[(stdio.h)]
_IONBF (@)|[c99 cpp98 cpp11]|[(stdio.h)]
NULL (@)|[c99 cpp98 cpp11]|[(stdio.h)]
SEEK_CUR (@)|[c99 cpp98 cpp11]|[(stdio.h)]
SEEK_END (@)|[c99 cpp98 cpp11]|[(stdio.h)]
SEEK_SET (@)|[c99 cpp98 cpp11]|[(stdio.h)]
#[</class>]
#[<class=stdlib.h>]	
abort(void)Param: ()\t\nDesc: Abort current process (function)\t\nProto: void abort (void);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
atexit(void *func void)Param: (Function to be called.)\t\nDesc: Set function to be executed on exit (function)\t\nProto: int atexit (void (*func)(void));\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
atof(const char* str)Param: (C-string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to double (function)\t\nProto: double atof (const char* str);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
atoi(const char * str)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to integer (function)\t\nProto: int atoi (const char * str);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
atol(const char * str)Param: (C-string containing the representation of an integral number.)\t\nDesc: Convert string to long integer (function)\t\nProto: long int atol ( const char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
atoll(const char * str)Param: (C-string containing the representation of an integral number.)\t\nDesc: Convert string to long long integer (function)\t\nProto: long long int atoll ( const char * str );\t\n|[c99 cpp11]|[(stdlib.h)]
bsearch(const void* key, const void* base,  size_t num, size_t size,  int (*compar)(const void*,const void*))Param: (Pointer to the object that serves as key for the search, type-casted to a )\t\nDesc: Binary search in array (function)\t\nProto: void* bsearch (const void* key, const void* base,  size_t num, size_t size,  int (*compar)(const void*,const void*));\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
calloc(size_t num, size_t size)Param: (Number of elements to allocate.)\t\nDesc: Allocate and zero-initialize array (function)\t\nProto: void* calloc (size_t num, size_t size);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
div(int numer, int denom)Param: (Numerator.)\t\nDesc: Integral division (function)\t\nProto: div_t div (int numer, int denom);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
div_t(quot)Param: (Represents the quotient of the integral division operation performed by div, which is the integer of lesser magnitude that is nearest to the algebraic quotient.)\t\nDesc: Structure returned by div (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
EXIT_FAILURE()Param: ()\t\nDesc: Failure termination code (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
EXIT_SUCCESS()Param: ()\t\nDesc: Success termination code (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
exit(int status):void #Causes the program to terminate normally [c99 cpp98 cpp11]|[(stdlib.h)]
getenv(const char *name):char * #Searches for the environment string pointed to by name and returns the associated value to the string [c99 cpp98 cpp11]|[(stdlib.h)]
free(void* ptr)Param: (Pointer to a memory block previously allocated with malloc, calloc or realloc.)\t\nDesc: Deallocate memory block (function)\t\nProto: void free (void* ptr);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
labs(long int n)Param: (Integral value.)\t\nDesc: Absolute value (function)\t\nProto: long int labs (long int n);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
ldiv(long int numer, long int denom)Param: (Numerator.)\t\nDesc: Integral division (function)\t\nProto: ldiv_t ldiv (long int numer, long int denom);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
ldiv_t(quot)Param: (Represents the quotient of the integral division operation performed by ldiv, which is the integer of lesser magnitude that is nearest to the algebraic quotient.)\t\nDesc: Structure returned by ldiv (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
llabs(long long int n)Param: (Integral value.)\t\nDesc: Absolute value (function)\t\nProto: long long int llabs (long long int n);\t\n|[c99 cpp11]|[(stdlib.h)]
lldiv(long long int numer, long long int denom)Param: (Numerator.)\t\nDesc: Integral division (function)\t\nProto: lldiv_t lldiv (long long int numer, long long int denom);\t\n|[c99 cpp11]|[(stdlib.h)]
lldiv_t(quot)Param: (Represents the quotient of the integral division operation performed by lldiv, which is the integer of lesser magnitude that is nearest to the algebraic quotient.)\t\nDesc: Structure returned by lldiv (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[(stdlib.h)]
malloc(size_t size)Param: (Size of the memory block, in bytes.)\t\nDesc: Allocate memory block (function)\t\nProto: void* malloc (size_t size);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
MB_CUR_MAX()Param: ()\t\nDesc: Maximum size of multibyte characters (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
mblen(const char* pmb, size_t max)Param: (Pointer to the first byte of a multibyte character.)\t\nDesc: Get length of multibyte character (function)\t\nProto: int mblen (const char* pmb, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
mbstowcs(wchar_t* dest, const char* src, size_t max)Param: (Pointer to an array of wchar_t elements long enough to contain the resulting sequence (at most, max wide characters).)\t\nDesc: Convert multibyte string to wide-character string (function)\t\nProto: size_t mbstowcs (wchar_t* dest, const char* src, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
mbtowc(wchar_t* pwc, const char* pmb, size_t max)Param: (Pointer to an object of type wchar_t.)\t\nDesc: Convert multibyte sequence to wide character (function)\t\nProto: int mbtowc (wchar_t* pwc, const char* pmb, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
qsort(void* base, size_t num, size_t size, int (*compar)(const void*,const void*))Param: (Pointer to the first object of the array to be sorted, converted to a )\t\nDesc: Sort elements of array (function)\t\nProto: void qsort (void* base, size_t num, size_t size, int (*compar)(const void*,const void*));\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
rand(void)Param: ()\t\nDesc: Generate random number (function)\t\nProto: int rand (void);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
RAND_MAX()Param: ()\t\nDesc: Maximum value returned by rand (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
realloc(void* ptr, size_t size)Param: (Pointer to a memory block previously allocated with malloc, calloc or realloc.)\t\nDesc: Reallocate memory block (function)\t\nProto: void* realloc (void* ptr, size_t size);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
srand(unsigned int seed)Param: (An integer value to be used as seed by the pseudo-random number generator algorithm.)\t\nDesc: Initialize random number generator (function)\t\nProto: void srand (unsigned int seed);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
strtod(const char* str, char** endptr)Param: (C-string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to double (function)\t\nProto: double strtod (const char* str, char** endptr);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
strtof(const char* str, char** endptr)Param: (C-string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to float (function)\t\nProto: float strtof (const char* str, char** endptr);\t\n|[c99 cpp11]|[(stdlib.h)]
strtol(const char* str, char** endptr, int base)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to long integer (function)\t\nProto: long int strtol (const char* str, char** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
strtold(const char* str, char** endptr)Param: (C string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to long double (function)\t\nProto: long double strtold (const char* str, char** endptr);\t\n|[c99 cpp11]|[(stdlib.h)]
strtoll(const char* str, char** endptr, int base)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to long long integer (function)\t\nProto: long long int strtoll (const char* str, char** endptr, int base);\t\n|[c99 cpp11]|[(stdlib.h)]
strtoul(const char* str, char** endptr, int base)Param: (C-string containing the representation of an integral number.)\t\nDesc: Convert string to unsigned long integer (function)\t\nProto: unsigned long int strtoul (const char* str, char** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
strtoull(const char* str, char** endptr, int base)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to unsigned long long integer (function)\t\nProto: unsigned long long int strtoull (const char* str, char** endptr, int base);\t\n|[c99 cpp11]|[(stdlib.h)]
system(const char* command)Param: (C-string containing the system command to be executed.)\t\nDesc: Execute system command (function)\t\nProto: int system (const char* command);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
wcstombs(char* dest, const wchar_t* src, size_t max)Param: (Pointer to an array of char elements long enough to contain the resulting sequence (at most, max bytes).)\t\nDesc: Convert wide-character string to multibyte string (function)\t\nProto: size_t wcstombs (char* dest, const wchar_t* src, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
wctomb(char* pmb, wchar_t wc)Param: ()\t\nDesc: Convert wide character to multibyte sequence (function)\t\nProto: int wctomb (char* pmb, wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[(stdlib.h)]
itoa( int value, char * str, int base )Param: (Value to be converted to a string.)\t\nDesc: no-Description\t\nProto: char * itoa ( int value, char * str, int base );\t\n|[arm]|[(stdlib.h)]
#[C11] 
at_quick_exit(void *func void)Param: (Function to be called.)\t\nDesc: Set function to be executed on quick exit (function)\t\nProto: int at_quick_exit (void (*func)(void));\t\n|[c11 cpp11]|[(stdlib.h)]
#[</class>]
#[<class=stdnoreturn.h>]
alignas(x)modify the alignment requirement of the object being declared.[c11]|[(stdnoreturn.h)]
alignof(x)Queries the alignment requirement of its operand type.[c11]|[(stdnoreturn.h)]
__alignas_is_defined(@):bool [c11]|[(stdnoreturn.h)]
__alignof_is_defined(@):bool [c11]|[(stdnoreturn.h)]
#[</class>]
#[<class=string.h>]
memchr( const void * ptr, int value, size_t num )Param: (Pointer to the block of memory where the search is performed.)\t\nDesc: Locate character in block of memory (function)\t\nProto: const void * memchr ( const void * ptr, int value, size_t num );void * memchr ( void * ptr, int value, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
memcmp( const void * ptr1, const void * ptr2, size_t num )Param: (Pointer to block of memory.)\t\nDesc: Compare two blocks of memory (function)\t\nProto: int memcmp ( const void * ptr1, const void * ptr2, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
memcpy( void * destination, const void * source, size_t num )Param: (Pointer to the destination array where the content is to be copied, type-casted to a pointer of type )\t\nDesc: Copy block of memory (function)\t\nProto: void * memcpy ( void * destination, const void * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
memmove( void * destination, const void * source, size_t num )Param: (Pointer to the destination array where the content is to be copied, type-casted to a pointer of type )\t\nDesc: Move block of memory (function)\t\nProto: void * memmove ( void * destination, const void * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
memset( void * ptr, int value, size_t num )Param: (Pointer to the block of memory to fill.)\t\nDesc: Fill block of memory (function)\t\nProto: void * memset ( void * ptr, int value, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strcat( char * destination, const char * source )Param: (Pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string.)\t\nDesc: Concatenate strings (function)\t\nProto: char * strcat ( char * destination, const char * source );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strchr( const char * str, int character )Param: (C string.)\t\nDesc: Locate first occurrence of character in string (function)\t\nProto: const char * strchr ( const char * str, int character );\t\nProto: char * strchr ( char * str, int character );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strcmp( const char * str1, const char * str2 )Param: (C string to be compared.)\t\nDesc: Compare two strings (function)\t\nProto: int strcmp ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strcoll( const char * str1, const char * str2 )Param: (C string to be compared.)\t\nDesc: Compare two strings using locale (function)\t\nProto: int strcoll ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strcpy( char * destination, const char * source )Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy string (function)\t\nProto: char * strcpy ( char * destination, const char * source );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strcspn( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Get span until character in string (function)\t\nProto: size_t strcspn ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strerror( int errnum )Param: (Error number.)\t\nDesc: Get pointer to error message string (function)\t\nProto: char * strerror ( int errnum );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strlen( const char * str )Param: (C string.)\t\nDesc: Get string length (function)\t\nProto: size_t strlen ( const char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strncat( char * destination, const char * source, size_t num )Param: (Pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string, including the additional null-character.)\t\nDesc: Append characters from string (function)\t\nProto: char * strncat ( char * destination, const char * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strncmp( const char * str1, const char * str2, size_t num )Param: (C string to be compared.)\t\nDesc: Compare characters of two strings (function)\t\nProto: int strncmp ( const char * str1, const char * str2, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strncpy( char * destination, const char * source, size_t num )Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy characters from string (function)\t\nProto: char * strncpy ( char * destination, const char * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strpbrk( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Locate characters in string (function)\t\nProto: const char * strpbrk ( const char * str1, const char * str2 );\t\nProto: char * strpbrk ( char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strrchr( const char * str, int character )Param: (C string.)\t\nDesc: Locate last occurrence of character in string (function)\t\nProto: const char * strrchr ( const char * str, int character );\t\nProto: char * strrchr ( char * str, int character );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strspn( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Get span of character set in string (function)\t\nProto: size_t strspn ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strstr( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Locate substring (function)\t\nProto: const char * strstr ( const char * str1, const char * str2 );\t\nProto: char * strstr ( char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strtok( char * str, const char * delimiters )Param: (C string to truncate.)\t\nDesc: Split string into tokens (function)\t\nProto: char * strtok ( char * str, const char * delimiters );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
strxfrm( char * destination, const char * source, size_t num )Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Transform string using locale (function)\t\nProto: size_t strxfrm ( char * destination, const char * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[(string.h)]
#[</class>]
#[<class=tgmath.h>]
fabs(x)[c99]|(tgmath.h)]
exp(x)[c99]|(tgmath.h)]
log(x)[c99]|(tgmath.h)]
pow(x)[c99]|(tgmath.h)]
sqrt(x)[c99]|(tgmath.h)]
sin(x)[c99]#Returns the sine of a radian angle x|(tgmath.h)]
cos(x)#Returns the cosine of a radian angle x[c99]|(tgmath.h)]
tan(x)[c99]#Returns the tangent of a radian angle x|(tgmath.h)]
asin(x)[c99]|(tgmath.h)]
acos(x)[c99]|(tgmath.h)]
atan(x)[c99]|(tgmath.h)]
sinh(x)#Returns the hyperbolic sine of x[c99]|(tgmath.h)]
cosh(x)[c99]#Returns the hyperbolic cosine of x|(tgmath.h)]
tanh(x)[c99]|(tgmath.h)]
asin(x)[c99]|(tgmath.h)]
acosl(x)[c99]|(tgmath.h)]
atan(x)[c99]|(tgmath.h)]
atan2(x)[c99]|(tgmath.h)]
cbrt(x)[c99]|(tgmath.h)]
ceil(x)[c99]|(tgmath.h)]
copysign(x)[c99]|(tgmath.h)]
erf(x)[c99]|(tgmath.h)]
erfc(x)[c99]|(tgmath.h)]
exp2(x)[c99]|(tgmath.h)]
expm1(x)[c99]|(tgmath.h)]
fdim(x)[c99]|(tgmath.h)]
floor(x)[c99]|(tgmath.h)]
fma(x)[c99]|(tgmath.h)]
fmax(x)[c99]|(tgmath.h)]
fmin(x)[c99]|(tgmath.h)]
fmod(x)[c99]|(tgmath.h)]
frexp(x)[c99]|(tgmath.h)]
hypot(x)[c99]|(tgmath.h)]
ilogb(x)[c99]|(tgmath.h)]
ldexp(x)[c99]|(tgmath.h)]
lgamma(x)[c99]|(tgmath.h)]
llrint(x)[c99]|(tgmath.h)]
llround(x)[c99]|(tgmath.h)]
log10(x)[c99]|(tgmath.h)]
log1p(x)[c99]|(tgmath.h)]
log2(x)[c99]|(tgmath.h)]
logb(x)[c99]|(tgmath.h)]
lrint(x)[c99]|(tgmath.h)]
lround(x)[c99]|(tgmath.h)]
nearbyint(x)[c99]|(tgmath.h)]
nextafter(x)[c99]|(tgmath.h)]
nexttoward(x)[c99]|(tgmath.h)]
remainder(x)[c99]|(tgmath.h)]
remquo(x)[c99]|(tgmath.h)]
rint(x)[c99]|(tgmath.h)]
round(x)[c99]|(tgmath.h)]
scalbln(x)[c99]|(tgmath.h)]
scalbn(x)[c99]|(tgmath.h)]
tgamma(x)[c99]|(tgmath.h)]
trunc(x)[c99]|(tgmath.h)]
#[</class>]
#[<class=threads.h>]
# Empty
#[</class>]
#[<class=time.h>]
asctime(const struct tm * timeptr)Param: (Pointer to a tm structure that contains a calendar time broken down into its components (see struct tm).)\t\nDesc: Convert tm structure to string (function)\t\nProto: char* asctime (const struct tm * timeptr);\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
clock(void)Param: ()\t\nDesc: Clock program (function)\t\nProto: clock_t clock (void);\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
clock_t()Param: ()\t\nDesc: Clock type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
CLOCKS_PER_SEC()Param: ()\t\nDesc: Clock ticks per second (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
difftime(time_t end, time_t beginning)Param: (Higher bound of the time interval whose length is calculated.)\t\nDesc: Return difference between two times (function)\t\nProto: double difftime (time_t end, time_t beginning);\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
gmtime(const time_t * timer)Param: (Pointer to an object of type time_t that contains a time value.)\t\nDesc: Convert time_t to tm as UTC time (function)\t\nProto: struct tm * gmtime (const time_t * timer);\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
localtime(const time_t * timer)Param: (Pointer to an object of type time_t that contains a time value.)\t\nDesc: Convert time_t to tm as local time (function)\t\nProto: struct tm * localtime (const time_t * timer);\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
mktime(struct tm * timeptr)Param: (Pointer to a tm structure that contains a calendar time broken down into its components (see struct tm).)\t\nDesc: Convert tm structure to time_t (function)\t\nProto: time_t mktime (struct tm * timeptr);\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
strftime(char* ptr, size_t maxsize, const char* format,const struct tm* timeptr )Param: (Pointer to the destination array where the resulting C string is copied.)\t\nDesc: Format time as string (function)\t\nProto: size_t strftime (char* ptr, size_t maxsize, const char* format,const struct tm* timeptr );\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
struct tm()Param: ()\t\nDesc: Time structure (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
time(time_t *timer):time_t #Calculates the current calender time and encodes it into time_t format|[c90 c99 arm cpp98 cpp11]|[(time.h)]
time_t()Param: ()\t\nDesc: Time type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(time.h)]
ctime(const time_t *timer):char * #Returns a string representing the localtime based on the argument timer [c99 cpp98 cpp11]|[(time.h)]
#[</class>]
#[<class=uchar.h>]
c16rtomb( char * pmb, char16_t c16, mbstate_t * ps )Param: (Pointer to an array large enough to hold a multibyte sequence.)\t\nDesc: Convert 16-bit character to multibyte sequence (function)\t\nProto: size_t c16rtomb ( char * pmb, char16_t c16, mbstate_t * ps );\t\n|[c11 cpp11]|[(uchar.h)]
c32rtomb( char * pmb, char32_t c32, mbstate_t * ps )Param: (Pointer to an array large enough to hold a multibyte sequence.)\t\nDesc: Convert 32-bit character to multibyte sequence (function)\t\nProto: size_t c32rtomb ( char * pmb, char32_t c32, mbstate_t * ps );\t\n|[c11 cpp11]|[(uchar.h)]
mbrtoc16( char16_t * pc16, const char * pmb, size_t max, mbstate_t * ps)Param: (Pointer to an object of type char16_t.)\t\nDesc: Convert multibyte sequence to 16-bit character (function)\t\nProto: size_t mbrtoc16 ( char16_t * pc16, const char * pmb, size_t max, mbstate_t * ps);\t\n|[c11 cpp11]|[(uchar.h)]
mbrtoc32( char32_t * pc32, const char * pmb, size_t max, mbstate_t * ps)Param: (Pointer to an object of type char32_t.)\t\nDesc: Convert multibyte sequence to 32-bit character (function)\t\nProto: size_t mbrtoc32 ( char32_t * pc32, const char * pmb, size_t max, mbstate_t * ps);\t\n|[c11 cpp11]|[(uchar.h)]
#[</class>]
#[<class=wchar.h>]
fgetwc(FILE * stream)Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Get wide character from stream (function)\t\nProto: wint_t fgetwc (FILE * stream);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
fgetws(wchar_t* ws, int num, FILE* stream)Param: (Pointer to an array of wchar_t where the wide string read is copied.)\t\nDesc: Get wide string from stream (function)\t\nProto: wchar_t* fgetws (wchar_t* ws, int num, FILE* stream);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
fputwc(wchar_t wc, FILE * stream)Param: (The wide character to write.)\t\nDesc: Write wide character to stream (function)\t\nProto: wint_t fputwc (wchar_t wc, FILE * stream);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
fputws(const wchar_t* ws, FILE* stream)Param: (C wide string with the content to write to the stream.)\t\nDesc: Write wide string to stream (function)\t\nProto: int fputws (const wchar_t* ws, FILE* stream);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
fwide(FILE* stream, int mode)Param: (Pointer to a FILE object that identifies a stream.)\t\nDesc: Stream orientation (function)\t\nProto: int fwide (FILE* stream, int mode);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
fwprintf(FILE* stream, const wchar_t* format, ...)Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data to stream (function)\t\nProto: int fwprintf (FILE* stream, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
fwscanf(FILE* stream, const wchar_t* format, ...)Param: (Pointer to a FILE object that identifies the input stream to read data from.)\t\nDesc: Read formatted data from stream (function)\t\nProto: int fwscanf (FILE* stream, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
getwchar(void)Param: ()\t\nDesc: Get wide character from stdin (function)\t\nProto: wint_t getwchar (void);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
mbrlen(const char* pmb, size_t max, mbstate_t* ps)Param: (Pointer to the first byte of a multibyte character.)\t\nDesc: Get length of multibyte character (function)\t\nProto: size_t mbrlen (const char* pmb, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
mbrtowc(wchar_t* pwc, const char* pmb, size_t max, mbstate_t* ps)Param: (Pointer to an object of type wchar_t.)\t\nDesc: Convert multibyte sequence to wide character (function)\t\nProto: size_t mbrtowc (wchar_t* pwc, const char* pmb, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
mbsinit(const mbstate_t* ps)Param: (Pointer to an mbstate_t object.)\t\nDesc: Check if initial conversion state (function)\t\nProto: int mbsinit (const mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
mbsrtowcs(wchar_t* dest, const char** src, size_t max, mbstate_t* ps)Param: (Pointer to an array of wchar_t elements long enough to store a string of max wide characters.)\t\nDesc: Convert multibyte string to wide-character string (function)\t\nProto: size_t mbsrtowcs (wchar_t* dest, const char** src, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
mbstate_t()Param: ()\t\nDesc: Multibyte conversion state (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
putwchar(wchar_t wc)Param: (The wide character to be written.)\t\nDesc: Write wide character to stdout (function)\t\nProto: wint_t putwchar (wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
swprintf(wchar_t* ws, size_t len, const wchar_t* format, ...)Param: (Pointer to a buffer where the resulting C wide string is stored.)\t\nDesc: Write formatted data to wide string (function)\t\nProto: int swprintf (wchar_t* ws, size_t len, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
swscanf(const wchar_t* ws, const wchar_t* format, ...)Param: (C wide string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from string (function)\t\nProto: int swscanf (const wchar_t* ws, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
ungetwc(wint_t wc, FILE* stream)Param: (The wint_t promotion of the wide character to be put back.)\t\nDesc: Unget wide character from stream (function)\t\nProto: wint_t ungetwc (wint_t wc, FILE* stream);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
vfwprintf(FILE* stream, const wchar_t* format, va_list arg)Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data from variable argument list to stream (function)\t\nProto: int vfwprintf (FILE* stream, const wchar_t* format, va_list arg);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
vfwscanf(FILE* stream, const wchar_t* format, va_list arg)Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Read formatted data from stream into variable argument list (function)\t\nProto: int vfwscanf (FILE* stream, const wchar_t* format, va_list arg);\t\n|[c99 cpp11]|[(wchar.h)]
vswprintf(wchar_t * ws, size_t len, const wchar_t * format, va_list arg )Param: (Pointer to a buffer where the resulting C wide string is stored.)\t\nDesc: Write formatted data from variable argument list to sized buffer (function)\t\nProto: int vswprintf (wchar_t * ws, size_t len, const wchar_t * format, va_list arg );\t\n|[c99 cpp11]|[(wchar.h)]
vswscanf(const wchar_t* ws, const wchar_t* format, va_list arg)Param: (C wide string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from wide string into variable argument list (function)\t\nProto: int vswscanf (const wchar_t* ws, const wchar_t* format, va_list arg);\t\n|[c99 cpp11]|[(wchar.h)]
vwprintf(const wchar_t* format, va_list arg)Param: (C wide string that contains a format string that follows the same specifications as format in printf (see printf for details).)\t\nDesc: Print formatted data from variable argument list to stdout (function)\t\nProto: int vwprintf (const wchar_t* format, va_list arg);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
vwscanf( const wchar_t * format, va_list arg )Param: (C wide string that contains a format string that follows the same specifications as format in scanf (see scanf for details).)\t\nDesc: Read formatted data into variable argument list (function)\t\nProto: int vwscanf ( const wchar_t * format, va_list arg );\t\n|[c99 cpp11]|[(wchar.h)]
WCHAR_MAX()Param: ()\t\nDesc: Maximum value of wchar_t (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
WCHAR_MIN()Param: ()\t\nDesc: Minimum value of wchar_t (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wchar_t()Param: ()\t\nDesc: Wide character (type)\t\nProto: no-proto\t\n|[c99]|[(wchar.h)]
wcrtomb(char* pmb, wchar_t wc, mbstate_t* ps)Param: (Pointer to an array large enough to hold a multibyte sequence.)\t\nDesc: Convert wide character to multibyte sequence (function)\t\nProto: size_t wcrtomb (char* pmb, wchar_t wc, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcscat(wchar_t* destination, const wchar_t* source)Param: (Pointer to the destination array, which should contain a C wide string, and be large enough to contain the concatenated resulting string.)\t\nDesc: Concatenate wide strings (function)\t\nProto: wchar_t* wcscat (wchar_t* destination, const wchar_t* source);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcschr(const wchar_t* ws, wchar_t wc)Param: (C wide string.)\t\nDesc: Locate first occurrence of character in wide string (function)\t\nProto: const wchar_t* wcschr (const wchar_t* ws, wchar_t wc);\t\nProto: wchar_t* wcschr (wchar_t* ws, wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcscmp(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be compared.)\t\nDesc: Compare two strings (function)\t\nProto: int wcscmp (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcscoll(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be compared.)\t\nDesc: Compare two wide strings using locale (function)\t\nProto: int wcscoll (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcscpy(wchar_t* destination, const wchar_t* source)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy wide string (function)\t\nProto: wchar_t* wcscpy (wchar_t* destination, const wchar_t* source);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcscspn(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Get span until character in wide string (function)\t\nProto: size_t wcscspn (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsftime(wchar_t* ptr, size_t maxsize, const wchar_t* format,const struct tm* timeptr)Param: (Pointer to the destination array where the resulting C wide string is copied.)\t\nDesc: Format time as wide string (function)\t\nProto: size_t wcsftime (wchar_t* ptr, size_t maxsize, const wchar_t* format,const struct tm* timeptr);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcslen(const wchar_t* wcs)Param: (C wide string.)\t\nDesc: Get wide string length (function)\t\nProto: size_t wcslen (const wchar_t* wcs);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsncat(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array, which should contain a C wide string, and be large enough to contain the concatenated resulting string, including the additional null wide character.)\t\nDesc: Append characters from wide string (function)\t\nProto: wchar_t* wcsncat (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsncmp(const wchar_t* wcs1, const wchar_t* wcs2, size_t num)Param: (C wide string to be compared.)\t\nDesc: Compare characters of two wide strings (function)\t\nProto: int wcsncmp (const wchar_t* wcs1, const wchar_t* wcs2, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsncpy(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy characters from wide string (function)\t\nProto: wchar_t* wcsncpy (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcspbrk(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Locate characters in wide string (function)\t\nProto: const wchar_t* wcspbrk (const wchar_t* wcs1, const wchar_t* wcs2);\t\nProto: wchar_t* wcspbrk (wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsrchr(const wchar_t* ws, wchar_t wc)Param: (C wide string.)\t\nDesc: Locate last occurrence of character in wide string (function)\t\nProto: const wchar_t* wcsrchr (const wchar_t* ws, wchar_t wc);\t\nProto: wchar_t* wcsrchr (wchar_t* ws, wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsrtombs(char* dest, const wchar_t** src, size_t max, mbstate_t* ps)Param: (Pointer to an array of char elements long enough to store a C string of max bytes.)\t\nDesc: Convert wide-character string to multibyte string (function)\t\nProto: size_t wcsrtombs (char* dest, const wchar_t** src, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsspn(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Get span of character set in wide string (function)\t\nProto: size_t wcsspn (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcsstr(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Locate substring of wide string (function)\t\nProto: const wchar_t* wcsstr (const wchar_t* wcs1, const wchar_t* wcs2);\t\nProto: wchar_t* wcsstr (wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcstod(const wchar_t* str, wchar_t** endptr)Param: (C wide string beginning with the representation of a floating-point number.)\t\nDesc: Convert wide string to double (function)\t\nProto: double wcstod (const wchar_t* str, wchar_t** endptr);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcstof(const wchar_t* str, wchar_t** endptr)Param: (C wide string beginning with the representation of a floating-point number.)\t\nDesc: Convert wide string to float (function)\t\nProto: float wcstof (const wchar_t* str, wchar_t** endptr);\t\n|[c99 cpp11]|[(wchar.h)]
wcstok(wchar_t* wcs, const wchar_t* delimiters)Param: (C wide string to truncate.)\t\nDesc: Split wide string into tokens (function)\t\nProto: wchar_t* wcstok (wchar_t* wcs, const wchar_t* delimiters);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcstol(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string beginning with the representation of an integral number.)\t\nDesc: Convert wide string to long integer (function)\t\nProto: long int wcstol (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcstold(const wchar_t* str, wchar_t** endptr)Param: (C wide string beginning with the representation of a floating-point number.)\t\nDesc: Convert wide string to long double (function)\t\nProto: long double wcstold (const wchar_t* str, wchar_t** endptr);\t\n|[c99 cpp11]|[(wchar.h)]
wcstoll(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string beginning with the representation of an integral number.)\t\nDesc: Convert wide string to long long integer (function)\t\nProto: long long int strtoll (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c99 cpp11]|[(wchar.h)]
wcstoul(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string containing the representation of an integral number.)\t\nDesc: Convert wide string to unsigned long integer (function)\t\nProto: unsigned long int wcstoul (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wcstoull(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string beginning with the representation of an integral number.)\t\nDesc: Convert wide string to unsigned long long integer (function)\t\nProto: unsigned long long int wcstoull (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c99 cpp11]|[(wchar.h)]
wcsxfrm(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Transform wide string using locale (function)\t\nProto: size_t wcsxfrm (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wctob(wint_t wc)Param: (The wint_t promotion of a wide character.)\t\nDesc: Convert wide character to single byte (function)\t\nProto: int wctob (wint_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
WEOF()Param: ()\t\nDesc: Wide end-of-file (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wint_t()Param: ()\t\nDesc: Wide int type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wmemchr(const wchar_t* ptr, wchar_t wc, size_t num)wchar_t* wmemchr (wchar_t* ptr, wchar_t wc, size_t num)Param: (Pointer to the array of wchar_t elements to be searched.)\t\nDesc: Locate character in block of wide characters (function)\t\nProto: const wchar_t* wmemchr (const wchar_t* ptr, wchar_t wc, size_t num);\t\nProto: wchar_t* wmemchr (wchar_t* ptr, wchar_t wc, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wmemcmp(const wchar_t* ptr1, const wchar_t* ptr2, size_t num)Param: (Pointer to block of elements of type wchar_t.)\t\nDesc: Compare two blocks of wide characters (function)\t\nProto: int wmemcmp (const wchar_t* ptr1, const wchar_t* ptr2, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wmemcpy(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy block of wide characters (function)\t\nProto: wchar_t* wmemcpy (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wmemmove(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Move block of wide characters (function)\t\nProto: wchar_t* wmemmove (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
wmemset(wchar_t* ptr, wchar_t wc, size_t num)Param: (Pointer to the array to fill.)\t\nDesc: Fill array of wide characters (function)\t\nProto: wchar_t* wmemset (wchar_t* ptr, wchar_t wc, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[(wchar.h)]
#[</class>]
#[<class=wctype.h>]
iswalnum(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is alphanumeric (function)\t\nProto: int iswalnum (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswalpha(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is alphabetic (function)\t\nProto: int iswalpha (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswblank(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is blank (function)\t\nProto: int iswblank (wint_t c);\t\n|[c99 cpp11]|[(wctype.h)]
iswcntrl(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is a control character (function)\t\nProto: int iswcntrl (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswctype(wint_t c, wctype_t desc)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character has property (function)\t\nProto: int iswctype(wint_t c, wctype_t desc);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswdigit(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is decimal digit (function)\t\nProto: int iswdigit (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswgraph(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character has graphical representation (function)\t\nProto: int iswgraph (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswlower(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is lowercase letter (function)\t\nProto: int iswlower (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswprint(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is printable (function)\t\nProto: int iswprint (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswpunct(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is punctuation character (function)\t\nProto: int iswpunct (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswspace(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is a white-space (function)\t\nProto: int iswspace (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswupper(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is uppercase letter (function)\t\nProto: int iswupper (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
iswxdigit(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is hexadecimal digit (function)\t\nProto: int iswxdigit (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
towctrans(wint_t c, wctrans_t desc)Param: (Wide character to be transformed, casted to a wint_t value, or WEOF.)\t\nDesc: Convert using transformation (function)\t\nProto: wint_t towctrans(wint_t c, wctrans_t desc);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
towlower( void * ptr, size_t size, size_t count, FILE * stream )Param: (Wide character to be converted, casted to a wint_t value, or WEOF.)\t\nDesc: Convert uppercase wide character to lowercase (function)\t\nProto: wint_t towlower ( wint_t c );\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
towupper(wint_t c)Param: (Wide character to be converted, casted to a wint_t value, or WEOF.)\t\nDesc: Convert lowercase wide character to uppercase (function)\t\nProto: wint_t towupper (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
wctrans_t()Param: ()\t\nDesc: Wide character transformation (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
wctype_t()Param: ()\t\nDesc: Wide character type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[(wctype.h)]
CHAR_BIT(@)|[c99 cpp98 cpp11]|[(limits.h)]
#[</class>]
#[<class=baseTypes.h>]
signed
unsigned 
short
void
float
char
double
int
long 
short
signed
wchar_t
char16_t
char32_t
return(ret): #Returns some useful Data
#[</class>]
##############
#CPP Adds
#[<cmath.h>]
float_t()Param: ()\t\nDesc: Floating-point type (type)\t\nProto: no-proto\t\n|[cpp99 cpp11]|[(math.h)]
NAN()Param: ()\t\nDesc: Not-A-Number (constant)\t\nProto: float\t\n|[cpp99 cpp11]|[(math.h)]
#[</class>]
#[<stddef.h>]
max_align_t()Param: ()\t\nDesc: Type with widest scalar alignment (type)\t\nProto: no-proto\t\n|[cpp11]|[(stddef.h)]
nullptr_t(nullptr);Param: ()\t\nDesc: Null pointer type (C++) (type)\t\nProto: typedef decltype(nullptr) nullptr_t;\t\n|[cpp11]|[(stddef.h)]
#[</class>]
##############
#Todo