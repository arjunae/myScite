######
#~ Scite Settings for Scite Editor Pane Api, subset
######

scite.Open(filename) opens a file in a new buffer
scite.SendEditor(SCI_constant, ...) sends a message to the editor pane
scite.SendOutput(SCI_constant, ...) sends a message to the output pane
scite.ConstantName(number) returns the symbolic name of a Scintilla / SciTE constant
scite.MenuCommand(number) executes a SciTE menu command
scite.UpdateStatusBar(bUpdateSlowData) updates SciTE statusbar
scite.ShowParametersDialog(text)Desc: show parameters dialog with message (txt) and return result action (only SciTE-Ru)
scite.ReloadStartupScript()Desc: reload startup script

#~-- Methods & Functions
output:textrange(startPos, endPos) gets the text in the specified range
output:findtext(text, [flags], [startPos, [endPos]]) returns the start and end of the first match, or nil if no match
output:match(text, [flags], [startPos]) returns a generator that allows you to loop over the matches i.e. for m in output:match(text, flags) do ... end
output:append(text) appends text to the end of the document
output:insert(pos, text) inserts text at the specified position
output:remove(startPos, endPos) removes the text in the range

editor:textrange(startPos, endPos) gets the text in the specified range
editor:findtext(text, [flags], [startPos, [endPos]]) returns the start and end of the first match, or nil if no match
editor:match(text, [flags], [startPos]) returns a generator that allows you to loop over the matches i.e. for m in editor:match(text, flags) do ... end
editor:append(text) appends text to the end of the document
editor:insert(pos, text) inserts text at the specified position
editor:remove(startPos, endPos) removes the text in the range

editor:AddRefDocument(int doc)Desc: Create a new document object. Starts with reference count of 1 and not selected into editor. Extend life of document.
editor:AddStyledText(int length, cells c)Desc: Add array of cells to document.
editor:AddText(int length, string text)Desc: Add text to the document at current position.
editor:Allocate(int bytes)Desc: Enlarge the document to a particular size of text bytes.
editor:AppendText(int length, string text)Desc: Append a string to the end of the document without changing the selection.
editor:AssignCmdKey(keymod km, int msg)Desc: When key+modifier combination km is pressed perform msg.
editor:AutoCActive() = bool\n Is there an auto-completion list visible?
editor:AutoCCancel()Desc: Remove the auto-completion list from the screen.
editor:AutoCComplete()Desc: User has selected an item so remove the list and insert the selection.
editor:AutoCGetCurrent() = int\n Get currently selected item position in the auto-completion list
editor:AutoCPosStart() = int pos\n Retrieve the position of the caret when the auto-completion list was displayed.
editor:AutoCSelect(string text)Desc: Select the item in the auto-completion list that starts with a string.
editor:AutoCShow(int lenEntered, string itemList)Desc: Display a auto-completion list. The lenEntered parameter indicates how many characters before the caret should be used to provide context.
editor:AutoCStops(string characterSet)Desc: Define a set of character that when typed cancel the auto-completion list.
editor:BackTab()Desc: Dedent the selected lines.
editor:BeginUndoAction()Desc: Start a sequence of actions that is undone and redone as a unit. May be nested.
editor:BraceBadLight(position pos)Desc: Highlight the character at a position indicating there is no matching brace.
editor:BraceHighlight(int posStart, int posEnd)Desc: Highlight the characters at two positions.
editor:BraceMatch(int pos) = int pos\n Find the position of a matching brace or INVALID_POSITION if no match.
editor:CallTipActive() = bool\n Is there an active call tip?
editor:CallTipCancel()Desc: Remove the call tip from the screen.
editor:CallTipPosStart() = int pos\n Retrieve the position where the caret was before displaying the call tip.
editor:CallTipSetHlt(int start, int end)Desc: Highlight a segment of the definition.
editor:CallTipShow(int pos, string definition)Desc: Show a call tip containing a definition near position pos.
editor:Cancel()Desc: Cancel any modes such as call tip or auto-completion list display.
editor:CanPaste() = bool\n Will a paste succeed?
editor:CanRedo() = bool\n Are there any redoable actions in the undo history?
editor:CanUndo() = bool\n Are there any undoable actions in the undo history?
editor:CharLeft()Desc: Move caret left one character.
editor:CharLeftExtend()Desc: Move caret left one character extending selection to new caret position.
editor:CharLeftRectExtend()Desc: Move caret left one character, extending rectangular selection to new caret position.
editor:CharRight()Desc: Move caret right one character.
editor:CharRightExtend()Desc: Move caret right one character extending selection to new caret position.
editor:CharRightRectExtend()Desc: Move caret right one character, extending rectangular selection to new caret position.
editor:ChooseCaretX()Desc: Set the last x chosen value to be the caret x position.
editor:Clear()Desc: Clear the selection.
editor:ClearAll()Desc: Delete all text in the document.
editor:ClearAllCmdKeys()Desc: Drop all key mappings.
editor:ClearCmdKey(int keymod)Desc: When key+modifier combination km is pressed do nothing.
editor:ClearDocumentStyle()Desc: Set all style bytes to 0, remove all folding information.
editor:ClearRegisteredImages()Desc: Clear all the registered XPM images.
editor:Colourise(int posStart, int posEnd)Desc: Colourise a segment of the document using the current lexing language.
editor:ConvertEOLs(int eolMode)Desc: Convert all line endings in the document to one mode.
editor:Copy()Desc: Copy the selection to the clipboard.
editor:CopyAllowLine()Desc: Copy the selection, if selection empty copy the line with the caret.
editor:CopyRange(int posStart, int posEnd)Desc: Copy a range of text to the clipboard. Positions are clipped into the document.
editor:CopyText(int length, string text)Desc: Copy argument text to the clipboard.
editor:CreateDocument() = int\n Create a new document object. Starts with reference count of 1 and not selected into editor.
editor:Cut()Desc: Cut the selection to the clipboard.
editor:DeleteBack()Desc: Delete the selection or if no selection, the character before the caret.
editor:DeleteBackNotLine()Desc: Delete the selection or if no selection, the character before the caret. Will not delete the character before at the start of a line.
editor:DelLineLeft()Desc: Delete back from the current position to the start of the line.
editor:DelLineRight()Desc: Delete forwards from the current position to the end of the line.
editor:DelWordLeft()Desc: Delete the word to the left of the caret.
editor:DelWordRight()Desc: Delete the word to the right of the caret.
editor:DelWordRightEnd()Desc: Delete the word to the right of the caret, but not the trailing non-word characters.
editor:DocLineFromVisible(int lineDisplay) = int\n Find the document line of a display line taking hidden lines into account.
editor:DocumentEnd()Desc: Move caret to last position in document.
editor:DocumentEndExtend()Desc: Move caret to last position in document extending selection to new caret position.
editor:DocumentStart()Desc: Move caret to first position in document.
editor:DocumentStartExtend()Desc: Move caret to first position in document extending selection to new caret position.
editor:EditToggleOvertype()Desc: Switch from insert to overtype mode or the reverse.
editor:EmptyUndoBuffer()Desc: Delete the undo history.
editor:EncodedFromUTF8(string text)Desc: = string text
editor:EndUndoAction()Desc: End a sequence of actions that is undone and redone as a unit.
editor:EnsureVisible(int line)Desc: Ensure a particular line is visible by expanding any header line hiding it.
editor:EnsureVisibleEnforcePolicy(int line)Desc: Ensure a particular line is visible by expanding any header line hiding it. Use the currently set visibility policy to determine which range to display.
editor:FindColumn(int, int) = int
editor:FindText(int flags, findtext ft) = int pos\n Find some text in the document.
editor:FormatRange(bool draw, formatrange fr) = int pos\n On Windows, will draw the document into a display context such as a printer.
editor:FormFeed()Desc: Insert a Form Feed character.
editor:GetCurLine(int length, stringresult text) = string text\n Retrieve the text of the line containing the caret. Returns the index of the caret on the line.
editor:GetLastChild(int, int) = int
editor:GetLexerLanguage() = = string text\n Get current lexer language
editor:GetLine(int line, stringresult text) = string text\n Retrieve the contents of a line. Returns the length of the line.
editor:GetLineSelEndPosition(int line) = int pos\n Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line)\n.
editor:GetLineSelStartPosition(int line) = int pos\n Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
editor:GetProperty(string text) = string text
editor:GetPropertyExpanded(string text) = string text
editor:GetSelText(stringresult text) = string text\n Retrieve the selected text. Return the length of the text.
editor:GetStyledText(textrange tr) = int\n Retrieve a buffer of cells. Returns the number of bytes in the buffer not including terminating NULs.
editor:GetText(int length, stringresult text) = string text\n Retrieve all the text in the document. Returns number of characters retrieved.
editor:GetTextRange(textrange tr) = int\n Retrieve a range of text. Return the length of the text.
editor:GotoLine(int line)Desc: Set caret to start of a line and ensure it is visible.
editor:GotoPos(int pos)Desc: Set caret to a position and ensure it is visible.
editor:GrabFocus()Desc: Set the focus to this Scintilla widget. GTK+ Specific.
editor:HideLines(int lineStart, int lineEnd)Desc: Make a range of lines invisible.
editor:HideSelection(bool normal)Desc: Draw the selection in normal style or with selection highlighted.
editor:Home()Desc: Move caret to first position on line.
editor:HomeDisplay()Desc: Move caret to first position on display line.
editor:HomeDisplayExtend()Desc: Move caret to first position on display line extending selection to new caret position.
editor:HomeExtend()Desc: Move caret to first position on line extending selection to new caret position.
editor:HomeRectExtend()Desc: Move caret to first position on line, extending rectangular selection to new caret position.
editor:HomeWrap()
editor:HomeWrapExtend()
editor:InsertText(int pos, string text)Desc: Insert string at a position. (position=-1 -> current position)
editor:LineCopy()Desc: Copy the line containing the caret.
editor:LineCut()Desc: Cut the line containing the caret.
editor:LineDelete()Desc: Delete the line containing the caret.
editor:LineDown()\n# Start of key messages Move caret down one line.
editor:LineDownExtend()Desc: Move caret down one line extending selection to new caret position.
editor:LineDownRectExtend()\n# RectExtended rectangular selection moves Move caret down one line, extending rectangular selection to new caret position.
editor:LineDuplicate()Desc: Duplicate the current line.
editor:LineEnd()Desc: Move caret to last position on line.
editor:LineEndDisplay()Desc: Move caret to last position on display line.
editor:LineEndDisplayExtend()Desc: Move caret to last position on display line extending selection to new caret position.
editor:LineEndExtend()Desc: Move caret to last position on line extending selection to new caret position.
editor:LineEndRectExtend()Desc: Move caret to last position on line, extending rectangular selection to new caret position.
editor:LineEndWrap()
editor:LineEndWrapExtend()
editor:LineFromPosition(int pos) = int line\n Retrieve the line containing a position.
editor:LineLength(int line) = int length\n How many characters are on a line, not including end of line characters?
editor:LineScroll(int columns, int lines)Desc: Scroll horizontally and vertically.
editor:LineScrollDown()Desc: Scroll the document down, keeping the caret visible.
editor:LineScrollUp()Desc: Scroll the document up, keeping the caret visible.
editor:LinesJoin()Desc: Join the lines in the target.
editor:LinesSplit(int pixelWidth)Desc: Split the lines in the target into lines that are less wide than pixelWidth where possible.
editor:LineTranspose()Desc: Switch the current line with the previous.
editor:LineUp()Desc: Move caret up one line.
editor:LineUpExtend()Desc: Move caret up one line extending selection to new caret position.
editor:LineUpRectExtend()Desc: Move caret up one line, extending rectangular selection to new caret position.
editor:LoadLexerLibrary(string path)Desc: Load a lexer library (dll / so).
editor:LowerCase()Desc: Transform the selection to lower case.
editor:MarkerAdd(int line, int markerNumber) = int\n Add a marker to a line, returning an ID which can be used to find or delete the marker.
editor:MarkerAddSet(int line, int markerNumber)
editor:MarkerDefine(int markerNumber, int markerSymbol)Desc: Set the symbol used for a particular marker number.
editor:MarkerDefinePixmap(int markerNumber, string pixmap)Desc: Define a marker from a pixmap.
editor:MarkerDelete(int line, int markerNumber)Desc: Delete a marker from a line.
editor:MarkerDeleteAll(int markerNumber)Desc: Delete all markers with a particular number from all lines.
editor:MarkerDeleteHandle(int handle)Desc: Delete a marker.
editor:MarkerGet(int line) = int\n Get a bit mask of all the markers set on a line.
editor:MarkerLineFromHandle(int handle) = int\n Retrieve the line number at which a particular marker is located.
editor:MarkerNext(int lineStart, int markerMask) = int\n Find the next line after lineStart that includes a marker in mask.
editor:MarkerPrevious(int lineStart, int markerMask) = int\n Find the previous line before lineStart that includes a marker in mask.
editor:MarkerSetAlpha(int markerNumber, int colour)
editor:MarkerSetBack(int markerNumber, colour back)Desc: Set the background colour used for a particular marker number.
editor:MarkerSetFore(int markerNumber, colour fore)Desc: Set the foreground colour used for a particular marker number.
editor:MoveCaretInsideView()Desc: Move the caret inside current view if it's not there already.
editor:NewLine()Desc: Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
editor:Null()Desc: Null operation.
editor:PageDown()Desc: Move caret one page down.
editor:PageDownExtend()Desc: Move caret one page down extending selection to new caret position.
editor:PageDownRectExtend()Desc: Move caret one page down, extending rectangular selection to new caret position.
editor:PageUp()Desc: Move caret one page up.
editor:PageUpExtend()Desc: Move caret one page up extending selection to new caret position.
editor:PageUpRectExtend()Desc: Move caret one page up, extending rectangular selection to new caret position.
editor:ParaDown()Desc: Move caret between paragraphs (delimited by empty lines).
editor:ParaDownExtend()Desc: Move caret between paragraphs (delimited by empty lines).
editor:ParaUp()Desc: Move caret between paragraphs (delimited by empty lines).
editor:ParaUpExtend()Desc: Move caret between paragraphs (delimited by empty lines).
editor:Paste()Desc: Paste the contents of the clipboard into the document replacing the selection.
editor:PointXFromPosition(int pos) = int\n Retrieve the x value of the point in the window where a position is displayed.
editor:PointYFromPosition(int pos) = int\n Retrieve the y value of the point in the window where a position is displayed.
editor:PositionAfter(int pos) = int pos\n Given a valid document position, return the next position taking code page into account. Maximum value returned is the last position in the document.
editor:PositionBefore(int pos) = int pos\n Given a valid document position, return the previous position taking code page into account. Returns 0 if passed 0.
editor:PositionFromLine(int line) = int pos\n Retrieve the position at the start of a line.
editor:PositionFromPoint(int x, int y) = int pos\n Find the position from a point within the window.
editor:PositionFromPointClose(int x, int y) = int pos\n Find the position from a point within the window but return INVALID_POSITION if not close to text.
editor:Redo()Desc: Redoes the next action on the undo history.
editor:RegisterImage(int type, string xpmData)Desc: Register an XPM image for use in autocompletion lists.
editor:ReleaseDocument(int doc)Desc: Create a new document object. Starts with reference count of 1 and not selected into editor.\n Extend life of document. Release a reference to the document, deleting document if it fades to black.
editor:ReplaceSel(string text)Desc: Replace the selected text with the argument text.
editor:ReplaceTarget(int length, string text) = int\n Replace the target text with the argument text. Text is counted so it can contain NULs. Returns the length of the replacement text.
editor:ReplaceTargetRE(int length, string text) = int\n Replace the target text with the argument text after \d processing. Text is counted so it can contain NULs.\n Looks for \d where d is between 1 and 9 and replaces these with the strings matched in the last search operation which were surrounded by \( and \).\n Returns the length of the replacement text including any change caused by processing the \d patterns.
editor:ScrollCaret()Desc: Ensure the caret is visible.
editor:SearchAnchor()Desc: Sets the current caret position to be the search anchor.
editor:SearchInTarget(int length, string text) = int\n Search for a counted string in the target and set the target to the found range. Text is counted so it can contain NULs.\n Returns length of range or -1 for failure in which case target is not moved.
editor:SearchNext(int flags, string text) = int\n Find some text starting at the search anchor. Does not ensure the selection is visible.
editor:SearchPrev(int flags, string text) = int\n Find some text starting at the search anchor and moving backwards. Does not ensure the selection is visible.
editor:SelectAll()Desc: Select all the text in the document.
editor:SelectionDuplicate()
editor:SetCaretPolicy(int caretPolicy, int caretSlop)Desc: CARET_POLICY changed in 1.47
editor:SetCharsDefault()Desc: Reset the set of characters for whitespace and word characters to the defaults.
editor:SetFoldFlags(int flags)Desc: Set some style options for folding.
editor:SetFoldMarginColour(bool useSetting, colour back)Desc: Set the colours used as a chequerboard pattern in the fold margin
editor:SetFoldMarginHiColour(bool useSetting, colour fore)Desc: Set the colours used as a chequerboard pattern in the fold margin
editor:SetLengthForEncode(int)
editor:SetSavePoint()Desc: Remember the current position in the undo history as the position at which the document was saved.
editor:SetSel(int posStart, int posEnd)Desc: Select a range of text.
editor:SetSelBack(bool useSetting, colour back)Desc: Set the background colour of the selection and whether to use this setting.
editor:SetSelFore(bool useSetting, colour fore)Desc: Set the foreground colour of the selection and whether to use this setting.
editor:SetStyling(int length, int style)Desc: Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.\n (style sample: INDIC1_MASK)
editor:SetStylingEx(int length, string styles)Desc: Set the styles for a segment of the document.
editor:SetText(string text)Desc: Replace the contents of the document with the argument text.
editor:SetVisiblePolicy(int visiblePolicy, int visibleSlop)Desc: Constants for use with SetVisiblePolicy, similar to SetCaretPolicy.\n Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc.
editor:SetWhitespaceBack(bool useSetting, colour back)Desc: Set the background colour of all whitespace and whether to use this setting.
editor:SetWhitespaceFore(bool useSetting, colour fore)Desc: Set the foreground colour of all whitespace and whether to use this setting.
editor:SetXCaretPolicy(int caretPolicy, int caretSlop)Desc: Set the way the caret is kept visible when going sideway. The exclusion zone is given in pixels.
editor:SetYCaretPolicy(int caretPolicy, int caretSlop)Desc: Set the way the line the caret is on is kept visible. The exclusion zone is given in lines.
editor:ShowLines(int lineStart, int lineEnd)Desc: Make a range of lines visible.
editor:StartRecord()Desc: Start notifying the container of all key presses and commands.
editor:StartStyling(int posStart, int mask)Desc: Set the current styling position to pos and the styling mask to mask. The styling mask can be used to protect some bits in each styling byte from modification. (mask sample: INDICS_MASK)\n
editor:StopRecord()Desc: Stop notifying the container of all key presses and commands.
editor:StutteredPageDown()Desc: Move caret to bottom of page, or one page down if already at bottom of page.
editor:StutteredPageDownExtend()Desc: Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
editor:StutteredPageUp()Desc: Move caret to top of page, or one page up if already at top of page.
editor:StutteredPageUpExtend()Desc: Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
editor:StyleClearAll()
editor:StyleResetDefault()Desc: Reset the default style to its state at startup
editor:Tab()Desc: If selection is empty or all on one line replace the selection with a tab character. If more than one line selected, indent the lines.
editor:TargetAsUTF8() = string text
editor:TargetFromSelection()Desc: Make the target range start and end be the same as the selection range start and end.
editor:TextHeight(int line) = int\n Retrieve the height of a particular line of text in pixels.
editor:TextWidth(int style, string text) = int\n Measure the pixel width of some text in a particular style. NUL terminated text argument. Does not handle tab or control characters.
editor:ToggleCaretSticky()
editor:ToggleFold(int line)Desc: Switch a header line between expanded and contracted.
editor:Undo()Desc: Undo one action in the undo history.
editor:UpperCase()Desc: Transform the selection to upper case.
editor:UsePopUp(bool allowPopUp)Desc: Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button.
editor:UserListShow(int listType, string itemList)Desc: Display a list of strings and send notification when user chooses one.
editor:VCHome()Desc: Move caret to before first visible character on line. If already there move to first character on line.
editor:VCHomeExtend()Desc: Like VCHome but extending selection to new caret position.
editor:VCHomeRectExtend()Desc: Move caret to before first visible character on line. If already there move to first character on line.\n In either case, extend rectangular selection to new caret position.
editor:VCHomeWrap()
editor:VCHomeWrapExtend()
editor:VisibleFromDocLine(int line) = int\n Find the display line of a document line taking hidden lines into account.
editor:WordEndPosition(int pos, bool onlyWordCharacters) = int\n Get position of end of word.
editor:WordLeft()Desc: Move caret left one word.
editor:WordLeftEnd()Desc: Move caret left one word, position cursor at end of word.
editor:WordLeftEndExtend()Desc: Move caret left one word, position cursor at end of word, extending selection to new caret position.
editor:WordLeftExtend()Desc: Move caret left one word extending selection to new caret position.
editor:WordPartLeft()Desc: Move to the previous change in capitalisation.
editor:WordPartLeftExtend()Desc: Move to the previous change in capitalisation. Move to the previous change in capitalisation extending selection to new caret position.
editor:WordPartRight()Desc: Move to the previous change in capitalisation.\n Move to the previous change in capitalisation extending selection to new caret position.\n Move to the change next in capitalisation.
editor:WordPartRightExtend()Desc: Move to the previous change in capitalisation.\n Move to the previous change in capitalisation extending selection to new caret position.\n Move to the change next in capitalisation.\n Move to the next change in capitalisation extending selection to new caret position.
editor:WordRight()Desc: Move caret right one word.
editor:WordRightEnd()Desc: Move caret right one word, position cursor at end of word.
editor:WordRightEndExtend()Desc: Move caret right one word, position cursor at end of word, extending selection to new caret position.
editor:WordRightExtend()Desc: Move caret right one word extending selection to new caret position.
editor:WordStartPosition(int pos, bool onlyWordCharacters) = int\n Get position of start of word.
editor:WrapCount(int) = int
editor:ZoomIn()Desc: Magnify the displayed text by increasing the sizes by 1 point.
editor:ZoomOut()Desc: Make the displayed text smaller by decreasing the sizes by 1 point.

#~ todo: add functions .. sample:
editor.TargetStart() :position -- Sets the position that starts the target which is used for updating the document without affecting the scroll position.
editor.TargetEnd() :position  -- Sets the position that ends the target which is used for updating the document without affecting the scroll position.
editor.SearchFlags() :int -- Set the search flags used by SearchInTarget.
editor.TargetText() :string read-only
editor.Tag([int tagNumber]) :string read-only
editor.PasteConvertEndings() :bool -- Enable/Disable convert-on-paste for line endings

editor.Anchor
editor.AutoCAutoHide
editor.AutoCCancelAtStart
editor.AutoCChooseSingle
editor.AutoCDropRestOfWord
editor.AutoCFillUps
editor.AutoCIgnoreCase
editor.AutoCMaxHeight
editor.AutoCMaxWidth
editor.AutoCSeparator
editor.AutoCTypeSeparator
editor.BackSpaceUnIndents
editor.BufferedDraw
editor.CallTipBack
editor.CallTipFore
editor.CallTipForeHlt
editor.CallTipUseStyle
editor.CaretFore
editor.CaretLineBack
editor.CaretLineBackAlpha
editor.CaretLineVisible
editor.CaretPeriod
editor.CaretSticky
editor.CaretWidth
editor.CharAt
editor.CodePage
editor.Column
editor.ControlCharSymbol
editor.CurrentPos
editor.Cursor
editor.DirectFunction
editor.DirectPointer
editor.DocPointer
editor.EOLMode
editor.EdgeColour
editor.EdgeColumn
editor.EdgeMode
editor.EndAtLastLine
editor.EndStyled
editor.FirstVisibleLine
editor.Focus
editor.FoldExpanded
editor.FoldLevel
editor.FoldParent
editor.HScrollBar
editor.HighlightGuide
editor.HotspotActiveBack
editor.HotspotActiveFore
editor.HotspotActiveUnderline
editor.HotspotSingleLine
editor.Indent
editor.IndentationGuides
editor.IndicFore
editor.IndicStyle
editor.KeyWords
editor.LayoutCache
editor.Length
editor.Lexer
editor.LexerLanguage
editor.LineCount
editor.LineEndPosition
editor.LineIndentPosition
editor.LineIndentation
editor.LineState
editor.LineVisible
editor.LinesOnScreen
editor.MarginLeft
editor.MarginMaskN
editor.MarginRight
editor.MarginSensitiveN
editor.MarginTypeN
editor.MarginWidthN
editor.MaxLineState
editor.ModEventMask
editor.Modify
editor.MouseDownCaptures
editor.MouseDwellTime
editor.Overtype
editor.PrintColourMode
editor.PrintMagnification
editor.PrintWrapMode
editor.Property
editor.PropertyInt
editor.ReadOnly
editor.ScrollWidth
editor.SelAlpha
editor.SelectionEnd
editor.SelectionIsRectangle
editor.SelectionMode
editor.SelectionStart
editor.Status
editor.StyleAt
editor.StyleBack
editor.StyleBits
editor.StyleBitsNeeded
editor.StyleBold
editor.StyleCase
editor.StyleChangeable
editor.StyleCharacterSet
editor.StyleEOLFilled
editor.StyleFont
editor.StyleFore
editor.StyleHotSpot
editor.StyleItalic
editor.StyleSize
editor.StyleUnderline
editor.StyleVisible
editor.TabIndents
editor.TabWidth
editor.TextLength
editor.TwoPhaseDraw
editor.UndoCollection
editor.UsePalette
editor.UseTabs
editor.VScrollBar
editor.ViewEOL
editor.ViewWS
editor.WhitespaceChars
editor.WordChars
editor.WrapMode
editor.WrapStartIndent
editor.WrapVisualFlags
editor.WrapVisualFlagsLocation
editor.XOffset
editor.Zoom

#~ External Libs
#~ shell.dll

shell.msgbox (<Text>, <Title>, <Options>)Desc: Message Box. Return select button  /extern lib "shell"/
shell.inputbox (<Title>, <Prompt>, <Default>, <funcCheck>, <minWidth>)Desc: Input Box. Return input string  /extern lib "shell"/
shell.getfileattr (<FileName>)return: File Attribute as number  /extern lib "shell"/
shell.setfileattr (<FileName>, <FileAttr>)Desc: Set File Attribute  /extern lib "shell"/
shell.exec (strCommand, [strOperation], [boolNoShow], [bWaitOnReturn])Desc: /extern lib "shell"/
shell.findfiles (<FileMask>)return: list of files by mask  /extern lib "shell"/
shell.fileexists (<FileName>)return: true if file or folder exists  /extern lib "shell"/

#~ gui.dll
gui.window ("title")Desc: create new top-level windows  /extern lib "gui"/
gui.panel (width)Desc: create panel  /extern lib "gui"/
gui.set_panel (panel_name, "right")Desc: panel attached to the left or the right side of the editor pane  /extern lib "gui"/
gui.set_panel ()Desc: remove the panel and hide it  /extern lib "gui"/
gui.tabbar (win_name)Desc: create tabbar control from window or panel  /extern lib "gui"/
gui.list (true)Desc: create standard list view (with caption\n true|false)  /extern lib "gui"/
gui.memo ()Desc: creates a Windows Rich Text control  /extern lib "gui"/
gui.pass_focus ()Desc: pass keyboard focus to editor  /extern lib "gui"/
gui.toolbar ("title", {"icon1.bmp:item1 caption|func1", "FILEOPEN:Open|IDM_OPEN"}, icons_size, "c:\\Path to icons\\button")
gui.open_dlg (caption,filter)Desc: standard Open File Dialog to the user, with the specified caption and filter  /extern lib "gui"/
gui.save_dlg (caption,filter)Desc: standard Save File Dialog to the user, with the specified caption and filter  /extern lib "gui"/
gui.select_dir_dlg (caption)Desc: stset_andard Open Folder Dialog to the user, with the specified caption  /extern lib "gui"/
gui.colour_dlg (default_colour)Desc: open the Windows Colour choser  /extern lib "gui"/
gui.files (path_with_mask, true)Desc: list of files (nil/false) or folders (true)  /extern lib "gui"/
gui.chdir (dir)Desc: change current dir  /extern lib "gui"/
gui.message (msg,kind)Desc: message box with the desired message text  /extern lib "gui"/
gui.prompt_value (prompt,default)Desc: ask the user to enter a single string value  /extern lib "gui"/
gui.run (program_or_document, parameters)Desc: launch a program or open a document  /extern lib "gui"/


#~ win=gui%.window%s*%b()
win:add(list1, "top", height)Desc: "top" or "bottom"
win:add(list1, "left", width)Desc: "left" or "right"
win:client(list1)Desc: list or memo
win:size(width, height)
win:position(x, y)
win:show()
win:hide()
win:context_menu('item1|func1, ....')
win:bounds()return: visible, x, y, width, height
win:count
win:remove
win:add_buttons
win:on_select
win:on_double_click
win:on_close
win:on_show
win:on_focus
win:on_key

#~ panel=gui%.panel%s*%b()
panel:add(list1, "top", height)Desc: "top" or "bottom"
panel:add(list1, "left", width)Desc: "left" or "right"
panel:client(list1)Desc: list or memo
panel:size(width, height)
panel:context_menu('item1|func1', ...)
panel:bounds()return: visible, x, y, width, height

#~ tab=gui%.tabbar%b()
tab:client(list1)Desc: list or memo
tab:add_tab("Tab1 heading", list1)
tab:on_select(function(index) print(index) end)

#~ lst=gui%.list%s*%b()
lst:size(width, height)Desc: Changes _either height or width -one of the parameters is ignored.
lst:set_list_colour(strForeground, strBackground)Desc: "#FFFFFF", "#000000"
lst:set_selected_item(index)
lst:add_column('Title1', width)Desc:  If gui.list(true)
lst:add_item ({'Caption1','Caption2'}, {data1, data2})
lst:delete_item(index)
lst:insert_item(index, {'Caption1','Caption2'}, {data1, data2})
lst:count()
lst:get_item_data(index)
lst:get_item_text(index)
lst:get_selected_item()
lst:bounds()return: visible, x, y, width, height
lst:on_select(function(index) print(index) end)
lst:on_double_click(function(index) print(index) end)
lst:on_key(function(key) print(key) end)

#~ memo=gui%.memo%s*%b()
memo:set_memo_colour(strForeground, strBackground)Desc: "#FFFFFF", "#000000"
memo:size(width, height)Desc: Changes either height or width (one of parameters is ignored)
memo:set_text('{\\rtf{\\fonttbl{\\f0\\fcharset0 Helv;}}\\f0\\fs16'..'sample text'..'}')
memo:bounds()

#~ tool=gui%.toolbar%s*%b()
tool:

#~ tree=gui%.tree%s*%b()
tree:
